// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EvacTreatment_Full

/// /// Treatment information.
class EvacTreatment_Full : flatbuffers.handle
    /// Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
    /// Example: /// Example: BREATHING CHEST TUBE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    /// Example: /// Example: CHEST
    /// Constraints: Minimum length = 0, Maximum length = 32
    def bodyPart() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Datetime of the treatment in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def time() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Additional comments on the patient's treatment information.
    /// Example: /// Example: Comments on the treatment info.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsEvacTreatment_Full(buf:string): return EvacTreatment_Full { buf, flatbuffers.indirect(buf, 0) }

struct EvacTreatment_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, type)
        return this
    def add_bodyPart(bodyPart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, bodyPart)
        return this
    def add_time(time:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, time)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, comments)
        return this
    def end():
        return b_.EndObject()

