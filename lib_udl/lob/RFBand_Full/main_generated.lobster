// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum RFBand_Full_mode_Enum:
    /// No description available.
    RFBand_Full_mode_Enum_TX = 0
    /// No description available.
    RFBand_Full_mode_Enum_RX = 1

enum RFBand_Full_purpose_Enum:
    /// No description available.
    RFBand_Full_purpose_Enum_COMM = 0
    /// No description available.
    RFBand_Full_purpose_Enum_TTC = 1
    /// No description available.
    RFBand_Full_purpose_Enum_OPS = 2
    /// No description available.
    RFBand_Full_purpose_Enum_OTHER = 3

enum RFBand_Full_polarization_Enum:
    /// No description available.
    RFBand_Full_polarization_Enum_H = 0
    /// No description available.
    RFBand_Full_polarization_Enum_V = 1
    /// No description available.
    RFBand_Full_polarization_Enum_R = 2
    /// No description available.
    RFBand_Full_polarization_Enum_L = 3

enum RFBand_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    RFBand_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    RFBand_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    RFBand_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    RFBand_Full_dataMode_Enum_EXERCISE = 3

class RFBand_Full

/// /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
class RFBand_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RFBAND-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent Entity which uses this band.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// RF Band name.
    /// Example: /// Example: BAND_NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: Ku
    /// Constraints: Minimum length = 0, Maximum length = 5
    def band() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// RF Band mode (e.g. TX, RX).
    /// Example: /// Example: TX
    /// Constraints: Minimum length = 0, Maximum length = 4
    def mode() -> RFBand_Full_mode_Enum:
        return RFBand_Full_mode_Enum(flatbuffers.field_int8(buf_, pos_, 14, 0))
    /// Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
    /// Example: /// Example: TTC
    /// Constraints: Minimum length = 0, Maximum length = 16
    def purpose() -> RFBand_Full_purpose_Enum:
        return RFBand_Full_purpose_Enum(flatbuffers.field_int8(buf_, pos_, 16, 0))
    /// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def freqMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// End/maximum of transmit RF frequency range, if applicable, in Mhz.
    /// Example: /// Example: 2000.23
    /// Constraints: No constraints specified.
    def freqMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Center frequency of RF frequency range, if applicable, in Mhz.
    /// Example: /// Example: 1000.23
    /// Constraints: No constraints specified.
    def centerFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// RF Range maximum gain, in dBi.
    /// Example: /// Example: 120.23
    /// Constraints: No constraints specified.
    def peakGain() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// RF Range edge gain, in dBi.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def edgeGain() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// RF Band frequency range bandwidth in Mhz.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def bandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def beamwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 4
    def polarization() -> RFBand_Full_polarization_Enum:
        return RFBand_Full_polarization_Enum(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
    /// Example: /// Example: 2.23
    /// Constraints: No constraints specified.
    def erp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
    /// Example: /// Example: 2.23
    /// Constraints: No constraints specified.
    def eirp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> RFBand_Full_dataMode_Enum:
        return RFBand_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 42, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)

def GetRootAsRFBand_Full(buf:string): return RFBand_Full { buf, flatbuffers.indirect(buf, 0) }

struct RFBand_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(25)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idEntity)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, name)
        return this
    def add_band(band:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, band)
        return this
    def add_mode(mode:RFBand_Full_mode_Enum):
        b_.PrependInt8Slot(5, mode, 0)
        return this
    def add_purpose(purpose:RFBand_Full_purpose_Enum):
        b_.PrependInt8Slot(6, purpose, 0)
        return this
    def add_freqMin(freqMin:float):
        b_.PrependFloat64Slot(7, freqMin, 0.0)
        return this
    def add_freqMax(freqMax:float):
        b_.PrependFloat64Slot(8, freqMax, 0.0)
        return this
    def add_centerFreq(centerFreq:float):
        b_.PrependFloat64Slot(9, centerFreq, 0.0)
        return this
    def add_peakGain(peakGain:float):
        b_.PrependFloat64Slot(10, peakGain, 0.0)
        return this
    def add_edgeGain(edgeGain:float):
        b_.PrependFloat64Slot(11, edgeGain, 0.0)
        return this
    def add_bandwidth(bandwidth:float):
        b_.PrependFloat64Slot(12, bandwidth, 0.0)
        return this
    def add_beamwidth(beamwidth:float):
        b_.PrependFloat64Slot(13, beamwidth, 0.0)
        return this
    def add_polarization(polarization:RFBand_Full_polarization_Enum):
        b_.PrependInt8Slot(14, polarization, 0)
        return this
    def add_erp(erp:float):
        b_.PrependFloat64Slot(15, erp, 0.0)
        return this
    def add_eirp(eirp:float):
        b_.PrependFloat64Slot(16, eirp, 0.0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origin)
        return this
    def add_dataMode(dataMode:RFBand_Full_dataMode_Enum):
        b_.PrependInt8Slot(19, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, updatedBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, origNetwork)
        return this
    def end():
        return b_.EndObject()

