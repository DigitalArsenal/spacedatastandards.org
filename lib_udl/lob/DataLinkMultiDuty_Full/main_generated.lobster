// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DataLinkMultiDuty_Full

/// /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
class DataLinkMultiDuty_Full : flatbuffers.handle
    /// Designated force of unit specified by ship name, unit call sign, or unit designator.
    /// Example: /// Example: SHIP:STENNIS
    /// Constraints: Minimum length = 0, Maximum length = 38
    def unitDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The name of the person to be contacted for multilink coordination.
    /// Example: /// Example: POPOVICH
    /// Constraints: Minimum length = 0, Maximum length = 20
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The rank or position of the person to be contacted for multilink coordination.
    /// Example: /// Example: LCDR
    /// Constraints: Minimum length = 0, Maximum length = 16
    def rank() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
    /// Example: /// Example: SICO
    /// Constraints: Minimum length = 0, Maximum length = 4
    def duty() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    def dutyTeleFreqNums(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 12) + i * 4)
    def dutyTeleFreqNums_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 12)
    /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def multiDutyVoiceCoord(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def multiDutyVoiceCoord_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)

def GetRootAsDataLinkMultiDuty_Full(buf:string): return DataLinkMultiDuty_Full { buf, flatbuffers.indirect(buf, 0) }

struct DataLinkMultiDuty_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(6)
        return this
    def add_unitDes(unitDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, unitDes)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, name)
        return this
    def add_rank(rank:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, rank)
        return this
    def add_duty(duty:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, duty)
        return this
    def add_dutyTeleFreqNums(dutyTeleFreqNums:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, dutyTeleFreqNums)
        return this
    def add_multiDutyVoiceCoord(multiDutyVoiceCoord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, multiDutyVoiceCoord)
        return this
    def end():
        return b_.EndObject()

def DataLinkMultiDuty_FullStartDutyTeleFreqNumsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLinkMultiDuty_FullCreateDutyTeleFreqNumsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLinkMultiDuty_FullStartMultiDutyVoiceCoordVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLinkMultiDuty_FullCreateMultiDutyVoiceCoordVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

