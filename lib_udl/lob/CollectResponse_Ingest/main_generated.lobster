// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum CollectResponse_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    CollectResponse_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    CollectResponse_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    CollectResponse_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    CollectResponse_Ingest_dataMode_Enum_EXERCISE = 3

class CollectResponse_Ingest

/// /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
class CollectResponse_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: COLLECTRESPONSE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the request associated with this response.
    /// Example: /// Example: REF-REQUEST-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idRequest() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the target on-orbit object associated with this response.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// Optional task ID associated with the request/response.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def taskId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the parent plan or schedule associated with the request/response.
    /// Example: /// Example: REF-PLAN-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idPlan() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
    /// Example: /// Example: EXTERNAL-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
    /// ACCEPTED: The collect or contact request has been received and accepted.
    /// CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
    /// COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
    /// COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
    /// DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
    /// FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
    /// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
    /// PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
    /// REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
    /// SCHEDULED: The request was received and has been scheduled for execution.
    /// Example: /// Example: ACCEPTED
    /// Constraints: Minimum length = 0, Maximum length = 36
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The actual start time of the collect or contact, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def actualStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The actual end time of the collect or contact, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T18:00:00.123456Z
    /// Constraints: No constraints specified.
    def actualEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Proposed alternative start time, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def altStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Proposed alternative end time, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T18:00:00.123456Z
    /// Constraints: No constraints specified.
    def altEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Error code associated with this request/response.
    /// Example: /// Example: ERROR CODE
    /// Constraints: Minimum length = 0, Maximum length = 36
    def errCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
    /// Example: /// Example: ['DOA', 'DWELL']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
    /// Example: /// Example: ['DOA_ID', 'DWELL_ID']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Notes or comments associated with this response.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: REF-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> CollectResponse_Ingest_dataMode_Enum:
        return CollectResponse_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 54, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)

def GetRootAsCollectResponse_Ingest(buf:string): return CollectResponse_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct CollectResponse_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(27)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idRequest(idRequest:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idRequest)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origObjectId)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(5, satNo, 0)
        return this
    def add_taskId(taskId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, taskId)
        return this
    def add_idPlan(idPlan:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idPlan)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, externalId)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, status)
        return this
    def add_actualStartTime(actualStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, actualStartTime)
        return this
    def add_actualEndTime(actualEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, actualEndTime)
        return this
    def add_altStartTime(altStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, altStartTime)
        return this
    def add_altEndTime(altEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, altEndTime)
        return this
    def add_errCode(errCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, errCode)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, srcIds)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origNetwork)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, origSensorId)
        return this
    def add_dataMode(dataMode:CollectResponse_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(25, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, tags)
        return this
    def end():
        return b_.EndObject()

def CollectResponse_IngestStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def CollectResponse_IngestCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def CollectResponse_IngestStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def CollectResponse_IngestCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def CollectResponse_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def CollectResponse_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

