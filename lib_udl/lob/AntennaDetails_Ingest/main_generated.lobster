// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AntennaDetails_Ingest_mode_Enum:
    /// No description available.
    AntennaDetails_Ingest_mode_Enum_TX = 0
    /// No description available.
    AntennaDetails_Ingest_mode_Enum_RX = 1

enum AntennaDetails_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AntennaDetails_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AntennaDetails_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AntennaDetails_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AntennaDetails_Ingest_dataMode_Enum_EXERCISE = 3

class AntennaDetails_Ingest

/// /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
class AntennaDetails_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ANTENNADETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent Antenna.
    /// Example: /// Example: ANTENNA-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idAntenna() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
    /// Example: /// Example: Reflector
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Antenna position (e.g. Top, Nadir, Side).
    /// Example: /// Example: Top
    /// Constraints: Minimum length = 0, Maximum length = 128
    def position() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Antenna mode (e.g. TX,RX).
    /// Example: /// Example: TX
    /// Constraints: Minimum length = 0, Maximum length = 4
    def mode() -> AntennaDetails_Ingest_mode_Enum:
        return AntennaDetails_Ingest_mode_Enum(flatbuffers.field_int8(buf_, pos_, 14, 0))
    /// Boolean indicating if this antenna is steerable.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def steerable() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 16, 0))
    /// Boolean indicating if this is a beam forming antenna.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def beamForming() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 18, 0))
    /// ID of the organization that manufactures the antenna.
    /// Example: /// Example: MANUFACTUREORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Antenna diameter in meters.
    /// Example: /// Example: 0.01
    /// Constraints: No constraints specified.
    def diameter() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    /// Example: /// Example: [0.03, 0.05]
    /// Constraints: No constraints specified.
    def size(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def size_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)
    /// Antenna start of frequency range in Mhz.
    /// Example: /// Example: 2.1
    /// Constraints: No constraints specified.
    def startFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Antenna end of frequency range in Mhz.
    /// Example: /// Example: 3.3
    /// Constraints: No constraints specified.
    def endFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    /// Example: /// Example: 14.1
    /// Constraints: No constraints specified.
    def beamwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Antenna maximum gain in dBi.
    /// Example: /// Example: 20.1
    /// Constraints: No constraints specified.
    def gain() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Antenna gain tolerance in dB.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    def gainTolerance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Antenna polarization in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def polarization() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Antenna description.
    /// Example: /// Example: Description of antenna A
    /// Constraints: Minimum length = 0, Maximum length = 512
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AntennaDetails_Ingest_dataMode_Enum:
        return AntennaDetails_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 50, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 52) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 52)

def GetRootAsAntennaDetails_Ingest(buf:string): return AntennaDetails_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AntennaDetails_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(25)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idAntenna(idAntenna:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idAntenna)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, type)
        return this
    def add_position(position:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, position)
        return this
    def add_mode(mode:AntennaDetails_Ingest_mode_Enum):
        b_.PrependInt8Slot(5, mode, 0)
        return this
    def add_steerable(steerable:bool):
        b_.PrependBoolSlot(6, steerable, 0)
        return this
    def add_beamForming(beamForming:bool):
        b_.PrependBoolSlot(7, beamForming, 0)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, manufacturerOrgId)
        return this
    def add_diameter(diameter:float):
        b_.PrependFloat64Slot(9, diameter, 0.0)
        return this
    def add_size(size:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, size)
        return this
    def add_startFrequency(startFrequency:float):
        b_.PrependFloat64Slot(11, startFrequency, 0.0)
        return this
    def add_endFrequency(endFrequency:float):
        b_.PrependFloat64Slot(12, endFrequency, 0.0)
        return this
    def add_beamwidth(beamwidth:float):
        b_.PrependFloat64Slot(13, beamwidth, 0.0)
        return this
    def add_gain(gain:float):
        b_.PrependFloat64Slot(14, gain, 0.0)
        return this
    def add_gainTolerance(gainTolerance:float):
        b_.PrependFloat64Slot(15, gainTolerance, 0.0)
        return this
    def add_polarization(polarization:float):
        b_.PrependFloat64Slot(16, polarization, 0.0)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, description)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origNetwork)
        return this
    def add_dataMode(dataMode:AntennaDetails_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(23, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, tags)
        return this
    def end():
        return b_.EndObject()

def AntennaDetails_IngestStartSizeVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AntennaDetails_IngestCreateSizeVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AntennaDetails_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AntennaDetails_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

