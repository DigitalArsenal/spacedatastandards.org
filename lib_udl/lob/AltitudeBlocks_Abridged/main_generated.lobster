// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AltitudeBlocks_Abridged

/// /// Minimum and maximum altitude bounds for the track.
class AltitudeBlocks_Abridged : flatbuffers.handle
    /// Sequencing field for the altitude block.
    /// Example: /// Example: A1
    /// Constraints: Minimum length = 0, Maximum length = 24
    def altitudeSequenceId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Lowest altitude of the track route altitude block above mean sea level in feet.
    /// Example: /// Example: 27000.1
    /// Constraints: No constraints specified.
    def lowerAltitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Highest altitude of the track route altitude block above mean sea level in feet.
    /// Example: /// Example: 27200.5
    /// Constraints: No constraints specified.
    def upperAltitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)

def GetRootAsAltitudeBlocks_Abridged(buf:string): return AltitudeBlocks_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct AltitudeBlocks_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(3)
        return this
    def add_altitudeSequenceId(altitudeSequenceId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, altitudeSequenceId)
        return this
    def add_lowerAltitude(lowerAltitude:float):
        b_.PrependFloat64Slot(1, lowerAltitude, 0.0)
        return this
    def add_upperAltitude(upperAltitude:float):
        b_.PrependFloat64Slot(2, upperAltitude, 0.0)
        return this
    def end():
        return b_.EndObject()

