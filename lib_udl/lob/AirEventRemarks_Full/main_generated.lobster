// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AirEventRemarks_Full

/// /// Collection of remarks associated with this Air Event.
class AirEventRemarks_Full : flatbuffers.handle
    /// Optional remark ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 23ea2877a6f74d7d8f309567a5896441
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalRemarkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Text of the remark.
    /// Example: /// Example: Example air event remarks.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def text() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def date() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// User who published the remark.
    /// Example: /// Example: John Doe
    /// Constraints: Minimum length = 0, Maximum length = 20
    def user() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsAirEventRemarks_Full(buf:string): return AirEventRemarks_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirEventRemarks_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_externalRemarkId(externalRemarkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, externalRemarkId)
        return this
    def add_text(text:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, text)
        return this
    def add_date(date:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, date)
        return this
    def add_user(user:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, user)
        return this
    def end():
        return b_.EndObject()

