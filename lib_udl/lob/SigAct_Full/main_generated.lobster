// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SigAct_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SigAct_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SigAct_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SigAct_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SigAct_Full_dataMode_Enum_EXERCISE = 3

class SigAct_Full

/// /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
class SigAct_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SIGACT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The source language of the significant event using the ISO 639-3, 3 character code definition.
    /// Example: /// Example: eng
    /// Constraints: Minimum length = 0, Maximum length = 4
    def sourceLanguage() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The city in or near which this event occurred.
    /// Example: /// Example: Austin
    /// Constraints: Minimum length = 0, Maximum length = 128
    def city() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The district in which this event occurred.
    /// Example: /// Example: district 12
    /// Constraints: Minimum length = 0, Maximum length = 128
    def district() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The province in which this event occurred.
    /// Example: /// Example: Province_Example
    /// Constraints: Minimum length = 0, Maximum length = 128
    def province() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.31
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 90.23
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// &nbsp;&nbsp;4Q (grid zone designator, GZD)
    /// &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
    /// &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 128
    def milgrid() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
    /// Example: /// Example: Kabul
    /// Constraints: Minimum length = 0, Maximum length = 128
    def theater() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: Minimum length = 0, Maximum length = 512
    def area() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: Minimum length = 0, Maximum length = 512
    def atext() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: Minimum length = 0, Maximum length = 512
    def agjson() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Type of region as projected on the ground.
    /// Example: /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def atype() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def andims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def asrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// The approximate start time of the event, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:03.123Z
    /// Constraints: No constraints specified.
    def eventStart() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The approximate end time of the event, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:03.123Z
    /// Constraints: No constraints specified.
    def eventEnd() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Date of the report or filing.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def reportDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// A list of one or more actors involved in the event.
    /// Example: /// Example: ['US', 'CAN']
    /// Constraints: No constraints specified.
    def actors(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def actors_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Number of civilians abducted in the activity.
    /// Example: /// Example: 423
    /// Constraints: No constraints specified.
    def civAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// Number of civilians detained in the activity.
    /// Example: /// Example: 234
    /// Constraints: No constraints specified.
    def civDet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// Number of civilians killed in the activity.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def civKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Number of civilians wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def civWound() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// Number of coalition members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def coalAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// Number of coalition members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def coalDet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Number of coalition members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def coalKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Number of coalition members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def coalWound() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// Number of enemy combatants abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def enemyAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// Number of enemy combatants detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def enemyDet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)
    /// Number of enemy combatants killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def enemyKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 66, 0)
    /// Number of friendlies abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def friendlyAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 68, 0)
    /// Number of friendlies in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def friendlyDet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// Number of friendlies killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def friendlyKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// Number of friendlies wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def friendlyWound() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Number of Host Nation members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def hostNatAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// Number of Host Nation members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def hostNatDet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// Number of Host Nation members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def hostNatKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// Number of Host Nation members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def hostNatWound() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// Number of side A members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideAAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// Number of side A members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideADet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// Number of side A members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideAKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 88, 0)
    /// Number of side A members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideAWound() -> int:
        return flatbuffers.field_int32(buf_, pos_, 90, 0)
    /// Number of side B members abducted in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideBAbd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 92, 0)
    /// Number of side B members detained in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideBDet() -> int:
        return flatbuffers.field_int32(buf_, pos_, 94, 0)
    /// Number of side B members killed in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideBKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 96, 0)
    /// Number of side B members wounded in the activity.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def sideBWound() -> int:
        return flatbuffers.field_int32(buf_, pos_, 98, 0)
    /// The name of the target.  The target may be an individual, an entity, or a country/region.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 64
    def target() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// A description of the event.
    /// Example: /// Example: Example_Description
    /// Constraints: Minimum length = 0, Maximum length = 4096
    def eventDescription() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// The type of event (e.g.  Military, Natural, Political, Social, etc.).
    /// Example: /// Example: Military
    /// Constraints: Minimum length = 0, Maximum length = 32
    def eventType() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
    /// Example: /// Example: IED Explosion
    /// Constraints: Minimum length = 0, Maximum length = 32
    def typeOfAttack() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Flag indicating that this attack was of a complex or coordinated nature.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def complexAttack() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 108, 0))
    /// Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
    /// Example: /// Example: NUMBER-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def idNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Estimate of the confidence that this event occurred.
    /// Example: /// Example: 13
    /// Constraints: No constraints specified.
    def confidence() -> int:
        return flatbuffers.field_int32(buf_, pos_, 112, 0)
    /// Estimate of the accuracy that this event occurred as described/reported.
    /// Example: /// Example: 13
    /// Constraints: No constraints specified.
    def accuracy() -> int:
        return flatbuffers.field_int32(buf_, pos_, 114, 0)
    /// 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
    /// 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def clarity() -> int:
        return flatbuffers.field_int32(buf_, pos_, 116, 0)
    /// This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
    /// Example: /// Example: CAMEO_CODE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def cameoCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
    /// Example: /// Example: Example_cameoBaseCode
    /// Constraints: Minimum length = 0, Maximum length = 32
    def cameoBaseCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
    /// Example: /// Example: Example_cameoRootCode
    /// Constraints: Minimum length = 0, Maximum length = 32
    def cameoRootCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
    /// Example: /// Example: 9.32
    /// Constraints: No constraints specified.
    def goldstein() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// The source of the document or report.
    /// Example: /// Example: Example_documentSource
    /// Constraints: Minimum length = 0, Maximum length = 128
    def documentSource() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// The filename of the document or report.
    /// Example: /// Example: Example_documentFilename
    /// Constraints: Minimum length = 0, Maximum length = 128
    def documentFilename() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def hasAttachment() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 130, 0))
    /// Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def filesize() -> int:
        return flatbuffers.field_int64(buf_, pos_, 132, 0)
    /// MD5 value of the file. The ingest/create operation will automatically generate the value.
    /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
    /// Constraints: Minimum length = 0, Maximum length = 256
    def checksumValue() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// The reporting unit.
    /// Example: /// Example: Unit_1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def repUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// The reporting unit type.
    /// Example: /// Example: Example_repUnitType
    /// Constraints: Minimum length = 0, Maximum length = 128
    def repUnitType() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// The activity the unit was engaged in.
    /// Example: /// Example: Example_Activity
    /// Constraints: Minimum length = 0, Maximum length = 128
    def repUnitActivity() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    def numMentions() -> int:
        return flatbuffers.field_int32(buf_, pos_, 142, 0)
    /// This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    def numSources() -> int:
        return flatbuffers.field_int32(buf_, pos_, 144, 0)
    /// This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    def numArticles() -> int:
        return flatbuffers.field_int32(buf_, pos_, 146, 0)
    /// This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
    /// Example: /// Example: 8.23
    /// Constraints: No constraints specified.
    def avgTone() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
    /// Example: /// Example: Example_URL
    /// Constraints: Minimum length = 0, Maximum length = 256
    def sourceUrl() -> string:
        return flatbuffers.field_string(buf_, pos_, 150)
    /// Related document ids.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def relatedDocs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 152) + i * 4)
    def relatedDocs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 152)
    /// A summary of the event.
    /// Example: /// Example: Example_Summary
    /// Constraints: Minimum length = 0, Maximum length = 4096
    def summary() -> string:
        return flatbuffers.field_string(buf_, pos_, 154)
    /// Notes related to the documents or event.
    /// Example: /// Example: Example_Notes
    /// Constraints: Minimum length = 0, Maximum length = 4096
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 156)
    /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 158)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: No constraints specified.
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 160)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 164)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SigAct_Full_dataMode_Enum:
        return SigAct_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 166, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 168)

def GetRootAsSigAct_Full(buf:string): return SigAct_Full { buf, flatbuffers.indirect(buf, 0) }

struct SigAct_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(83)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_sourceLanguage(sourceLanguage:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, sourceLanguage)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, countryCode)
        return this
    def add_city(city:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, city)
        return this
    def add_district(district:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, district)
        return this
    def add_province(province:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, province)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(7, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(8, lon, 0.0)
        return this
    def add_milgrid(milgrid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, milgrid)
        return this
    def add_theater(theater:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, theater)
        return this
    def add_area(area:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, area)
        return this
    def add_atext(atext:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, atext)
        return this
    def add_agjson(agjson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, agjson)
        return this
    def add_atype(atype:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, atype)
        return this
    def add_andims(andims:int):
        b_.PrependInt32Slot(15, andims, 0)
        return this
    def add_asrid(asrid:int):
        b_.PrependInt32Slot(16, asrid, 0)
        return this
    def add_eventStart(eventStart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, eventStart)
        return this
    def add_eventEnd(eventEnd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, eventEnd)
        return this
    def add_reportDate(reportDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, reportDate)
        return this
    def add_actors(actors:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, actors)
        return this
    def add_civAbd(civAbd:int):
        b_.PrependInt32Slot(21, civAbd, 0)
        return this
    def add_civDet(civDet:int):
        b_.PrependInt32Slot(22, civDet, 0)
        return this
    def add_civKIA(civKIA:int):
        b_.PrependInt32Slot(23, civKIA, 0)
        return this
    def add_civWound(civWound:int):
        b_.PrependInt32Slot(24, civWound, 0)
        return this
    def add_coalAbd(coalAbd:int):
        b_.PrependInt32Slot(25, coalAbd, 0)
        return this
    def add_coalDet(coalDet:int):
        b_.PrependInt32Slot(26, coalDet, 0)
        return this
    def add_coalKIA(coalKIA:int):
        b_.PrependInt32Slot(27, coalKIA, 0)
        return this
    def add_coalWound(coalWound:int):
        b_.PrependInt32Slot(28, coalWound, 0)
        return this
    def add_enemyAbd(enemyAbd:int):
        b_.PrependInt32Slot(29, enemyAbd, 0)
        return this
    def add_enemyDet(enemyDet:int):
        b_.PrependInt32Slot(30, enemyDet, 0)
        return this
    def add_enemyKIA(enemyKIA:int):
        b_.PrependInt32Slot(31, enemyKIA, 0)
        return this
    def add_friendlyAbd(friendlyAbd:int):
        b_.PrependInt32Slot(32, friendlyAbd, 0)
        return this
    def add_friendlyDet(friendlyDet:int):
        b_.PrependInt32Slot(33, friendlyDet, 0)
        return this
    def add_friendlyKIA(friendlyKIA:int):
        b_.PrependInt32Slot(34, friendlyKIA, 0)
        return this
    def add_friendlyWound(friendlyWound:int):
        b_.PrependInt32Slot(35, friendlyWound, 0)
        return this
    def add_hostNatAbd(hostNatAbd:int):
        b_.PrependInt32Slot(36, hostNatAbd, 0)
        return this
    def add_hostNatDet(hostNatDet:int):
        b_.PrependInt32Slot(37, hostNatDet, 0)
        return this
    def add_hostNatKIA(hostNatKIA:int):
        b_.PrependInt32Slot(38, hostNatKIA, 0)
        return this
    def add_hostNatWound(hostNatWound:int):
        b_.PrependInt32Slot(39, hostNatWound, 0)
        return this
    def add_sideAAbd(sideAAbd:int):
        b_.PrependInt32Slot(40, sideAAbd, 0)
        return this
    def add_sideADet(sideADet:int):
        b_.PrependInt32Slot(41, sideADet, 0)
        return this
    def add_sideAKIA(sideAKIA:int):
        b_.PrependInt32Slot(42, sideAKIA, 0)
        return this
    def add_sideAWound(sideAWound:int):
        b_.PrependInt32Slot(43, sideAWound, 0)
        return this
    def add_sideBAbd(sideBAbd:int):
        b_.PrependInt32Slot(44, sideBAbd, 0)
        return this
    def add_sideBDet(sideBDet:int):
        b_.PrependInt32Slot(45, sideBDet, 0)
        return this
    def add_sideBKIA(sideBKIA:int):
        b_.PrependInt32Slot(46, sideBKIA, 0)
        return this
    def add_sideBWound(sideBWound:int):
        b_.PrependInt32Slot(47, sideBWound, 0)
        return this
    def add_target(target:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, target)
        return this
    def add_eventDescription(eventDescription:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, eventDescription)
        return this
    def add_eventType(eventType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, eventType)
        return this
    def add_typeOfAttack(typeOfAttack:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, typeOfAttack)
        return this
    def add_complexAttack(complexAttack:bool):
        b_.PrependBoolSlot(52, complexAttack, 0)
        return this
    def add_idNumber(idNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, idNumber)
        return this
    def add_confidence(confidence:int):
        b_.PrependInt32Slot(54, confidence, 0)
        return this
    def add_accuracy(accuracy:int):
        b_.PrependInt32Slot(55, accuracy, 0)
        return this
    def add_clarity(clarity:int):
        b_.PrependInt32Slot(56, clarity, 0)
        return this
    def add_cameoCode(cameoCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, cameoCode)
        return this
    def add_cameoBaseCode(cameoBaseCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, cameoBaseCode)
        return this
    def add_cameoRootCode(cameoRootCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, cameoRootCode)
        return this
    def add_goldstein(goldstein:float):
        b_.PrependFloat64Slot(60, goldstein, 0.0)
        return this
    def add_documentSource(documentSource:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, documentSource)
        return this
    def add_documentFilename(documentFilename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, documentFilename)
        return this
    def add_hasAttachment(hasAttachment:bool):
        b_.PrependBoolSlot(63, hasAttachment, 0)
        return this
    def add_filesize(filesize:int):
        b_.PrependInt64Slot(64, filesize, 0)
        return this
    def add_checksumValue(checksumValue:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, checksumValue)
        return this
    def add_repUnit(repUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, repUnit)
        return this
    def add_repUnitType(repUnitType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, repUnitType)
        return this
    def add_repUnitActivity(repUnitActivity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, repUnitActivity)
        return this
    def add_numMentions(numMentions:int):
        b_.PrependInt32Slot(69, numMentions, 0)
        return this
    def add_numSources(numSources:int):
        b_.PrependInt32Slot(70, numSources, 0)
        return this
    def add_numArticles(numArticles:int):
        b_.PrependInt32Slot(71, numArticles, 0)
        return this
    def add_avgTone(avgTone:float):
        b_.PrependFloat64Slot(72, avgTone, 0.0)
        return this
    def add_sourceUrl(sourceUrl:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(73, sourceUrl)
        return this
    def add_relatedDocs(relatedDocs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(74, relatedDocs)
        return this
    def add_summary(summary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, summary)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(76, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(77, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(78, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(80, origin)
        return this
    def add_dataMode(dataMode:SigAct_Full_dataMode_Enum):
        b_.PrependInt8Slot(81, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(82, origNetwork)
        return this
    def end():
        return b_.EndObject()

def SigAct_FullStartActorsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SigAct_FullCreateActorsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SigAct_FullStartRelatedDocsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SigAct_FullCreateRelatedDocsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

