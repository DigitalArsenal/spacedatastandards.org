// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SeradataCommDetails_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SeradataCommDetails_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SeradataCommDetails_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SeradataCommDetails_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SeradataCommDetails_Ingest_dataMode_Enum_EXERCISE = 3

class SeradataCommDetails_Ingest

/// /// Seradata-compiled information on communications payloads.
class SeradataCommDetails_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATACOMMDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// UUID of the parent Comm record.
    /// Example: /// Example: idComm
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idComm() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: spacecraftId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def spacecraftId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: X
    /// Constraints: Minimum length = 0, Maximum length = 5
    def band() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Solid state power amplifier, in Watts.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def solidStatePowerAmp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Comm travelingWaveTubeAmplifier in Watts.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def travelingWaveTubeAmplifier() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Comm gatewayUplinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def gatewayUplinkFrom() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Comm gatewayUplinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def gatewayUplinkTo() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Comm gatewayDownlinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def gatewayDownlinkFrom() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Comm gatewayDownlinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def gatewayDownlinkTo() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Comm polarization.
    /// Example: /// Example: polarization
    /// Constraints: Minimum length = 0, Maximum length = 64
    def polarization() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Effective isotropic radiated power in dB.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def eirp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Comm bandwidth in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def bandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Comm numOperationalTransponders.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numOperationalTransponders() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Comm numSpareTransponders.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numSpareTransponders() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Comm hostedForCompanyOrgId.
    /// Example: /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def hostedForCompanyOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Comm manufacturerOrgId.
    /// Example: /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Comm tradeLeaseOrgId.
    /// Example: /// Example: tradeLeaseOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def tradeLeaseOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Comm num36MhzEquivalentTransponders.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def num36MhzEquivalentTransponders() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// Comm htsNumUserSpotBeams.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def htsNumUserSpotBeams() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Comm htsUserDownlinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def htsUserDownlinkBandwidthPerBeam() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Comm htsUserUplinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def htsUserUplinkBandwidthPerBeam() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def estHtsTotalUserDownlinkBandwidthPerBeam() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def estHtsTotalUserUplinkBandwidthPerBeam() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Comm estimated HtsTotalCapacity in Gbps.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def estHtsTotalCapacity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Comm userDownlinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def userDownlinkFrom() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Comm userDownlinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def userDownlinkTo() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Comm userUplinkFrom in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def userUplinkFrom() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Comm userUplinkTo in Ghz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def userUplinkTo() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Payload notes.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def payloadNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SeradataCommDetails_Ingest_dataMode_Enum:
        return SeradataCommDetails_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 72, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)

def GetRootAsSeradataCommDetails_Ingest(buf:string): return SeradataCommDetails_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct SeradataCommDetails_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(37)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idComm(idComm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idComm)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_spacecraftId(spacecraftId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, spacecraftId)
        return this
    def add_band(band:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, band)
        return this
    def add_solidStatePowerAmp(solidStatePowerAmp:float):
        b_.PrependFloat64Slot(5, solidStatePowerAmp, 0.0)
        return this
    def add_travelingWaveTubeAmplifier(travelingWaveTubeAmplifier:float):
        b_.PrependFloat64Slot(6, travelingWaveTubeAmplifier, 0.0)
        return this
    def add_gatewayUplinkFrom(gatewayUplinkFrom:float):
        b_.PrependFloat64Slot(7, gatewayUplinkFrom, 0.0)
        return this
    def add_gatewayUplinkTo(gatewayUplinkTo:float):
        b_.PrependFloat64Slot(8, gatewayUplinkTo, 0.0)
        return this
    def add_gatewayDownlinkFrom(gatewayDownlinkFrom:float):
        b_.PrependFloat64Slot(9, gatewayDownlinkFrom, 0.0)
        return this
    def add_gatewayDownlinkTo(gatewayDownlinkTo:float):
        b_.PrependFloat64Slot(10, gatewayDownlinkTo, 0.0)
        return this
    def add_polarization(polarization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, polarization)
        return this
    def add_eirp(eirp:float):
        b_.PrependFloat64Slot(12, eirp, 0.0)
        return this
    def add_bandwidth(bandwidth:float):
        b_.PrependFloat64Slot(13, bandwidth, 0.0)
        return this
    def add_numOperationalTransponders(numOperationalTransponders:int):
        b_.PrependInt32Slot(14, numOperationalTransponders, 0)
        return this
    def add_numSpareTransponders(numSpareTransponders:int):
        b_.PrependInt32Slot(15, numSpareTransponders, 0)
        return this
    def add_hostedForCompanyOrgId(hostedForCompanyOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, hostedForCompanyOrgId)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, manufacturerOrgId)
        return this
    def add_tradeLeaseOrgId(tradeLeaseOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, tradeLeaseOrgId)
        return this
    def add_num36MhzEquivalentTransponders(num36MhzEquivalentTransponders:int):
        b_.PrependInt32Slot(19, num36MhzEquivalentTransponders, 0)
        return this
    def add_htsNumUserSpotBeams(htsNumUserSpotBeams:int):
        b_.PrependInt32Slot(20, htsNumUserSpotBeams, 0)
        return this
    def add_htsUserDownlinkBandwidthPerBeam(htsUserDownlinkBandwidthPerBeam:float):
        b_.PrependFloat64Slot(21, htsUserDownlinkBandwidthPerBeam, 0.0)
        return this
    def add_htsUserUplinkBandwidthPerBeam(htsUserUplinkBandwidthPerBeam:float):
        b_.PrependFloat64Slot(22, htsUserUplinkBandwidthPerBeam, 0.0)
        return this
    def add_estHtsTotalUserDownlinkBandwidthPerBeam(estHtsTotalUserDownlinkBandwidthPerBeam:float):
        b_.PrependFloat64Slot(23, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0)
        return this
    def add_estHtsTotalUserUplinkBandwidthPerBeam(estHtsTotalUserUplinkBandwidthPerBeam:float):
        b_.PrependFloat64Slot(24, estHtsTotalUserUplinkBandwidthPerBeam, 0.0)
        return this
    def add_estHtsTotalCapacity(estHtsTotalCapacity:float):
        b_.PrependFloat64Slot(25, estHtsTotalCapacity, 0.0)
        return this
    def add_userDownlinkFrom(userDownlinkFrom:float):
        b_.PrependFloat64Slot(26, userDownlinkFrom, 0.0)
        return this
    def add_userDownlinkTo(userDownlinkTo:float):
        b_.PrependFloat64Slot(27, userDownlinkTo, 0.0)
        return this
    def add_userUplinkFrom(userUplinkFrom:float):
        b_.PrependFloat64Slot(28, userUplinkFrom, 0.0)
        return this
    def add_userUplinkTo(userUplinkTo:float):
        b_.PrependFloat64Slot(29, userUplinkTo, 0.0)
        return this
    def add_payloadNotes(payloadNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, payloadNotes)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, origNetwork)
        return this
    def add_dataMode(dataMode:SeradataCommDetails_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(34, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, createdBy)
        return this
    def end():
        return b_.EndObject()

