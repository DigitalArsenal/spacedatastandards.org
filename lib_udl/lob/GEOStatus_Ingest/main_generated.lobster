// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum GEOStatus_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    GEOStatus_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    GEOStatus_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    GEOStatus_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    GEOStatus_Ingest_dataMode_Enum_EXERCISE = 3

class GEOStatus_Ingest

/// /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
class GEOStatus_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: GEOSTATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the object on-orbit object.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Sine of inclination times the sine of right ascension.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def ss() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Sine of inclination times the cosine of right ascension.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def sc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Objects displacement from geostationary orbit in deg^2/day^2.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relativeEnergy() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Corrective or overriding long term trend for longitudinal change in degrees/day.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def longitudeRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
    /// Example: /// Example: 180.1
    /// Constraints: No constraints specified.
    def longitudeMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
    /// Example: /// Example: 1.01
    /// Constraints: No constraints specified.
    def longitudeMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Indicates the confidence level in the entry.  (Low, Medium, High).
    /// Example: /// Example: Low
    /// Constraints: Minimum length = 0, Maximum length = 8
    def confidenceLevel() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Geosynchronous plane changing status.  (Current, Never, Former, Future).
    /// Example: /// Example: Current
    /// Constraints: Minimum length = 0, Maximum length = 8
    def planeChangeStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Indicates the trough (gravity well) or drift direction of a space object:
    /// 255 - Influenced by 255° longitude trough. 
    /// 75 - Influenced by 75° longitude trough. 
    /// Both - Oscillating between both 255 and 75 troughs. 
    /// East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
    /// West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
    /// Example: /// Example: West
    /// Constraints: Minimum length = 0, Maximum length = 8
    def troughType() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Lost space object indicator.  (True or False).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def lostFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// Semi-annual correction.  (True or False).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def semiAnnualCorrFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Space object status.  (Active, Dead, Unknown).
    /// Example: /// Example: Active
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objectStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> GEOStatus_Ingest_dataMode_Enum:
        return GEOStatus_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 46, 0))
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 21
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)

def GetRootAsGEOStatus_Ingest(buf:string): return GEOStatus_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct GEOStatus_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(24)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origObjectId)
        return this
    def add_ss(ss:float):
        b_.PrependFloat64Slot(4, ss, 0.0)
        return this
    def add_sc(sc:float):
        b_.PrependFloat64Slot(5, sc, 0.0)
        return this
    def add_relativeEnergy(relativeEnergy:float):
        b_.PrependFloat64Slot(6, relativeEnergy, 0.0)
        return this
    def add_longitudeRate(longitudeRate:float):
        b_.PrependFloat64Slot(7, longitudeRate, 0.0)
        return this
    def add_longitudeMin(longitudeMin:float):
        b_.PrependFloat64Slot(8, longitudeMin, 0.0)
        return this
    def add_longitudeMax(longitudeMax:float):
        b_.PrependFloat64Slot(9, longitudeMax, 0.0)
        return this
    def add_confidenceLevel(confidenceLevel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, confidenceLevel)
        return this
    def add_planeChangeStatus(planeChangeStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, planeChangeStatus)
        return this
    def add_troughType(troughType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, troughType)
        return this
    def add_lostFlag(lostFlag:bool):
        b_.PrependBoolSlot(13, lostFlag, 0)
        return this
    def add_semiAnnualCorrFlag(semiAnnualCorrFlag:bool):
        b_.PrependBoolSlot(14, semiAnnualCorrFlag, 0)
        return this
    def add_objectStatus(objectStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, objectStatus)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, rawFileURI)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origin)
        return this
    def add_dataMode(dataMode:GEOStatus_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(21, dataMode, 0)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(22, satNo, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, origNetwork)
        return this
    def end():
        return b_.EndObject()

