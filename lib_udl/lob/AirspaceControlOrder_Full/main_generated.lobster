// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirspaceControlOrder_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirspaceControlOrder_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirspaceControlOrder_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirspaceControlOrder_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirspaceControlOrder_Full_dataMode_Enum_EXERCISE = 3

class AirspaceControlOrder_Full

/// /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
class AirspaceControlOrder_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: EXAMPLE URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
    /// Example: /// Example: DESERT WIND
    /// Constraints: Minimum length = 1, Maximum length = 64
    def opExName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The originator of this reference.
    /// Example: /// Example: USCENTCOM
    /// Constraints: Minimum length = 1, Maximum length = 36
    def originator() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-08T13:55:43.123Z
    /// Constraints: No constraints specified.
    def stopTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
    /// Example: /// Example: AFTER
    /// Constraints: Minimum length = 0, Maximum length = 8
    def stopQualifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
    /// Example: /// Example: CONTROL
    /// Constraints: Minimum length = 0, Maximum length = 32
    def opExInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The secondary supplementary nickname of the option or the alternative of the operational plan or order.
    /// Example: /// Example: ORANGE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def opExInfoAlt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
    /// Example: /// Example: SACEUR 106
    /// Constraints: Minimum length = 0, Maximum length = 36
    def planOrigNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The unique message identifier sequentially assigned by the originator.
    /// Example: /// Example: 1201003
    /// Constraints: Minimum length = 0, Maximum length = 16
    def serialNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The month in which the message originated.
    /// Example: /// Example: OCT
    /// Constraints: Minimum length = 0, Maximum length = 12
    def month() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The qualifier which caveats the message status.
    /// Example: /// Example: CHG
    /// Constraints: Minimum length = 0, Maximum length = 8
    def qualifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The serial number associated with the message qualifier.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def qualSN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Name of the area of the command for which the ACO is valid.
    /// Example: /// Example: FORT BRAGG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def areaOfValidity() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The serial number of this airspace control order.
    /// Example: /// Example: 27B
    /// Constraints: Minimum length = 0, Maximum length = 8
    def acoSerialNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
    /// Example: /// Example: EUR-T
    /// Constraints: Minimum length = 0, Maximum length = 8
    def geoDatum() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Free text information expressed in natural language.
    /// Example: /// Example: CHOKE POINTS
    /// Constraints: Minimum length = 0, Maximum length = 128
    def acoComments() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def airspaceControlOrderReferences(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def airspaceControlOrderReferences_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def airspaceControlMeansStatus(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def airspaceControlMeansStatus_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Collection of unique link 16 identifier that will be assigned to a future airspace control means.
    /// Example: /// Example: ['A2467', 'A3466', 'AA232']
    /// Constraints: No constraints specified.
    def undLnkTrk(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def undLnkTrk_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// Markings defining the source material or the original classification authority for the ACO message.
    /// Example: /// Example: ORIG:USJFCOM
    /// Constraints: Minimum length = 0, Maximum length = 64
    def classSource() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
    /// Example: /// Example: ['15C', '10C']
    /// Constraints: No constraints specified.
    def classReason(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def classReason_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
    /// Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
    /// Constraints: No constraints specified.
    def downgradeInsDate(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 52) + i * 4)
    def downgradeInsDate_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 52)
    /// Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
    /// Example: /// Example: ['X1', 'X2']
    /// Constraints: No constraints specified.
    def declassExemptionCode(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def declassExemptionCode_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirspaceControlOrder_Full_dataMode_Enum:
        return AirspaceControlOrder_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 68, 0))

def GetRootAsAirspaceControlOrder_Full(buf:string): return AirspaceControlOrder_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirspaceControlOrder_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(33)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, rawFileURI)
        return this
    def add_opExName(opExName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, opExName)
        return this
    def add_originator(originator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, originator)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, startTime)
        return this
    def add_stopTime(stopTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, stopTime)
        return this
    def add_stopQualifier(stopQualifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, stopQualifier)
        return this
    def add_opExInfo(opExInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, opExInfo)
        return this
    def add_opExInfoAlt(opExInfoAlt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, opExInfoAlt)
        return this
    def add_planOrigNum(planOrigNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, planOrigNum)
        return this
    def add_serialNum(serialNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, serialNum)
        return this
    def add_month(month:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, month)
        return this
    def add_qualifier(qualifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, qualifier)
        return this
    def add_qualSN(qualSN:int):
        b_.PrependInt32Slot(14, qualSN, 0)
        return this
    def add_areaOfValidity(areaOfValidity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, areaOfValidity)
        return this
    def add_acoSerialNum(acoSerialNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, acoSerialNum)
        return this
    def add_geoDatum(geoDatum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, geoDatum)
        return this
    def add_acoComments(acoComments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, acoComments)
        return this
    def add_airspaceControlOrderReferences(airspaceControlOrderReferences:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, airspaceControlOrderReferences)
        return this
    def add_airspaceControlMeansStatus(airspaceControlMeansStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, airspaceControlMeansStatus)
        return this
    def add_undLnkTrk(undLnkTrk:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, undLnkTrk)
        return this
    def add_classSource(classSource:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, classSource)
        return this
    def add_classReason(classReason:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, classReason)
        return this
    def add_downgradeInsDate(downgradeInsDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, downgradeInsDate)
        return this
    def add_declassExemptionCode(declassExemptionCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, declassExemptionCode)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, origNetwork)
        return this
    def add_dataMode(dataMode:AirspaceControlOrder_Full_dataMode_Enum):
        b_.PrependInt8Slot(32, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def AirspaceControlOrder_FullStartAirspaceControlOrderReferencesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlOrder_FullCreateAirspaceControlOrderReferencesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirspaceControlOrder_FullStartAirspaceControlMeansStatusVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlOrder_FullCreateAirspaceControlMeansStatusVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirspaceControlOrder_FullStartUndLnkTrkVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlOrder_FullCreateUndLnkTrkVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirspaceControlOrder_FullStartClassReasonVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlOrder_FullCreateClassReasonVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirspaceControlOrder_FullStartDowngradeInsDateVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlOrder_FullCreateDowngradeInsDateVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirspaceControlOrder_FullStartDeclassExemptionCodeVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlOrder_FullCreateDeclassExemptionCodeVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

