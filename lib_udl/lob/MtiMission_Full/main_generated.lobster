// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiMission_Full

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
class MtiMission_Full : flatbuffers.handle
    /// The mission plan id.
    /// Example: /// Example: M1-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def m1() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identification of the flight plan.
    /// Example: /// Example: M2-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def m2() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Platform type that originated the data.
    /// Example: /// Example: PLATFORM
    /// Constraints: Minimum length = 0, Maximum length = 64
    def m3() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Identification of the platform variant, modifications, etc.
    /// Example: /// Example: IDENT
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m4() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Mission origination date.
    /// Example: /// Example: 2018-01-01
    /// Constraints: No constraints specified.
    def msnRefTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)

def GetRootAsMtiMission_Full(buf:string): return MtiMission_Full { buf, flatbuffers.indirect(buf, 0) }

struct MtiMission_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_m1(m1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, m1)
        return this
    def add_m2(m2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, m2)
        return this
    def add_m3(m3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, m3)
        return this
    def add_m4(m4:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, m4)
        return this
    def add_msnRefTs(msnRefTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, msnRefTs)
        return this
    def end():
        return b_.EndObject()

