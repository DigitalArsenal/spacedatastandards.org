// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiTargetReport_Full

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiTargetReport_Full : flatbuffers.handle
    /// Sequential count of this MTI report within the dwell.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def d32_2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def d32_3() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_4() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_5() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_6() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_7() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_8() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
    /// Example: /// Example: 17
    /// Constraints: No constraints specified.
    def d32_9() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// The classification of the target (i.e. vehicle, aircraft, â€¦).
    /// Example: /// Example: vehicle
    /// Constraints: Minimum length = 0, Maximum length = 32
    def d32_10() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Estimated probability that the target classification field is correctly classified.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    def d32_11() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Standard deviation of the estimated slant range of the reported detection, in centimeters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_12() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_13() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Standard deviation of the estimated geodetic height, in meters.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_14() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_15() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d32_16() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    def d32_17() -> int:
        return flatbuffers.field_int64(buf_, pos_, 36, 0)
    /// Estimated radar cross section of the target return, in half-decibels.
    /// Example: /// Example: 98
    /// Constraints: No constraints specified.
    def d32_18() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)

def GetRootAsMtiTargetReport_Full(buf:string): return MtiTargetReport_Full { buf, flatbuffers.indirect(buf, 0) }

struct MtiTargetReport_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(18)
        return this
    def add_d32_1(d32_1:int):
        b_.PrependInt32Slot(0, d32_1, 0)
        return this
    def add_d32_2(d32_2:float):
        b_.PrependFloat64Slot(1, d32_2, 0.0)
        return this
    def add_d32_3(d32_3:float):
        b_.PrependFloat64Slot(2, d32_3, 0.0)
        return this
    def add_d32_4(d32_4:int):
        b_.PrependInt32Slot(3, d32_4, 0)
        return this
    def add_d32_5(d32_5:int):
        b_.PrependInt32Slot(4, d32_5, 0)
        return this
    def add_d32_6(d32_6:int):
        b_.PrependInt32Slot(5, d32_6, 0)
        return this
    def add_d32_7(d32_7:int):
        b_.PrependInt32Slot(6, d32_7, 0)
        return this
    def add_d32_8(d32_8:int):
        b_.PrependInt32Slot(7, d32_8, 0)
        return this
    def add_d32_9(d32_9:int):
        b_.PrependInt32Slot(8, d32_9, 0)
        return this
    def add_d32_10(d32_10:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, d32_10)
        return this
    def add_d32_11(d32_11:int):
        b_.PrependInt32Slot(10, d32_11, 0)
        return this
    def add_d32_12(d32_12:int):
        b_.PrependInt32Slot(11, d32_12, 0)
        return this
    def add_d32_13(d32_13:int):
        b_.PrependInt32Slot(12, d32_13, 0)
        return this
    def add_d32_14(d32_14:int):
        b_.PrependInt32Slot(13, d32_14, 0)
        return this
    def add_d32_15(d32_15:int):
        b_.PrependInt32Slot(14, d32_15, 0)
        return this
    def add_d32_16(d32_16:int):
        b_.PrependInt32Slot(15, d32_16, 0)
        return this
    def add_d32_17(d32_17:int):
        b_.PrependInt64Slot(16, d32_17, 0)
        return this
    def add_d32_18(d32_18:int):
        b_.PrependInt32Slot(17, d32_18, 0)
        return this
    def end():
        return b_.EndObject()

