// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Aircraft_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Aircraft_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Aircraft_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Aircraft_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Aircraft_Abridged_dataMode_Enum_EXERCISE = 3

class Aircraft_Abridged

/// /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
class Aircraft_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// ID of the parent entity for this aircraft.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: E-2C HAWKEYE
    /// Constraints: Minimum length = 1, Maximum length = 128
    def aircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The tail number of this aircraft.
    /// Example: /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Full serial number of the aircraft.
    /// Example: /// Example: 7007187
    /// Constraints: Minimum length = 0, Maximum length = 32
    def serialNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The wing or unit that owns the aircraft.
    /// Example: /// Example: 437AW
    /// Constraints: Minimum length = 0, Maximum length = 32
    def owner() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The Air Force major command (MAJCOM) overseeing the aircraft.
    /// Example: /// Example: HQACC
    /// Constraints: Minimum length = 0, Maximum length = 16
    def command() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The category of aircraft (e.g. M = Military, C = Commercial).
    /// Example: /// Example: M
    /// Constraints: Minimum length = 0, Maximum length = 1
    def category() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Military data network data transfer device ID for this aircraft.
    /// Example: /// Example: 005
    /// Constraints: Minimum length = 0, Maximum length = 16
    def dtd() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The cruise speed of the aircraft, in kilometers/hour.
    /// Example: /// Example: 915
    /// Constraints: No constraints specified.
    def cruiseSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// The maximum air speed of the aircraft, in kilometers/hour.
    /// Example: /// Example: 2655.1
    /// Constraints: No constraints specified.
    def maxSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    def minReqRunwayM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 3000
    /// Constraints: No constraints specified.
    def minReqRunwayFt() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// The nominal turnaround time for this aircraft, in minutes.
    /// Example: /// Example: 500
    /// Constraints: No constraints specified.
    def nominalTATime() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Optional notes/comments for this aircraft.
    /// Example: /// Example: Notes for this aircraft
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 64
    def dataMode() -> Aircraft_Abridged_dataMode_Enum:
        return Aircraft_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 46, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)

def GetRootAsAircraft_Abridged(buf:string): return Aircraft_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Aircraft_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(23)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idEntity)
        return this
    def add_aircraftMDS(aircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, aircraftMDS)
        return this
    def add_tailNumber(tailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, tailNumber)
        return this
    def add_serialNumber(serialNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, serialNumber)
        return this
    def add_owner(owner:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, owner)
        return this
    def add_command(command:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, command)
        return this
    def add_category(category:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, category)
        return this
    def add_dtd(dtd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, dtd)
        return this
    def add_cruiseSpeed(cruiseSpeed:float):
        b_.PrependFloat64Slot(10, cruiseSpeed, 0.0)
        return this
    def add_maxSpeed(maxSpeed:float):
        b_.PrependFloat64Slot(11, maxSpeed, 0.0)
        return this
    def add_minReqRunwayM(minReqRunwayM:int):
        b_.PrependInt32Slot(12, minReqRunwayM, 0)
        return this
    def add_minReqRunwayFt(minReqRunwayFt:int):
        b_.PrependInt32Slot(13, minReqRunwayFt, 0)
        return this
    def add_nominalTATime(nominalTATime:int):
        b_.PrependInt32Slot(14, nominalTATime, 0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origin)
        return this
    def add_dataMode(dataMode:Aircraft_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(21, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origNetwork)
        return this
    def end():
        return b_.EndObject()

