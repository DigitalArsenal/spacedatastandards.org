// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Equipment_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Equipment_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Equipment_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Equipment_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Equipment_Full_dataMode_Enum_EXERCISE = 3

class Equipment_Full

/// /// Properties and characteristics of equipment that can be associated with a site or other entity.
class Equipment_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the Parent equipment record associated with this equipment record.
    /// Example: /// Example: PARENT-EQUIPMENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idParentEquipment() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the Site Entity associated with the equipment record.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique identifier of the operating unit associated with the equipment record.
    /// Example: /// Example: UNIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOperatingUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the Equipment record from the originating system.
    /// Example: /// Example: ORIG-EQP-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altEqpId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
    /// Example: /// Example: X12345
    /// Constraints: Minimum length = 0, Maximum length = 7
    def eqpCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Uniquely identifies each item or group of equipment associated with a unit, facility or site.
    /// Example: /// Example: 001
    /// Constraints: Minimum length = 0, Maximum length = 3
    def eqpIdNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: IQ
    /// Constraints: Minimum length = 1, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 4
    def altCountryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// World Aeronautical Chart identifier for the area in which a designated place is located.
    /// Example: /// Example: 0427
    /// Constraints: Minimum length = 0, Maximum length = 4
    def wac() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Provider specific sequential number assigned to the equipment.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def seqNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
    /// Example: /// Example: AMPHIBIOUS WARFARE SHIP
    /// Constraints: Minimum length = 0, Maximum length = 54
    def nomen() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OPR
    /// Constraints: Minimum length = 0, Maximum length = 3
    def operStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: RDY
    /// Constraints: Minimum length = 0, Maximum length = 4
    def condition() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 4
    def conditionAvail() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def eval() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: NOB
    /// Constraints: Minimum length = 0, Maximum length = 5
    def fpa() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OCC
    /// Constraints: Minimum length = 0, Maximum length = 3
    def function() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def ident() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: OTHR
    /// Constraints: Minimum length = 0, Maximum length = 4
    def allegiance() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    /// Example: /// Example: HL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def altAllegiance() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: GR
    /// Constraints: Minimum length = 0, Maximum length = 9
    def locReason() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
    /// Example: /// Example: Territorial Sea
    /// Constraints: Minimum length = 0, Maximum length = 32
    def operAreaPrimary() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: JG
    /// Constraints: Minimum length = 0, Maximum length = 4
    def functPrimary() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: WGS
    /// Constraints: Minimum length = 0, Maximum length = 16
    def coordDatum() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
    /// Pos. 1-2.  Latitude Degrees     [00-90]
    /// Pos. 3-4.  Latitude Minutes     [00-59]
    /// Pos. 5-6.  Latitude Seconds     [00-59]
    /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    /// Pos. 10. Latitude Hemisphere       [NS] 
    /// Pos. 11-13. Longitude Degrees     [00-180] 
    /// Pos. 14-15. Longitude Minutes     [00-59] 
    /// Pos. 16-17. Longitude Seconds     [00-59] 
    /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    /// Pos. 21. Longitude Hemisphere     [EW]
    /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
    /// Example: /// Example: 340000000N0430000000E
    /// Constraints: Minimum length = 0, Maximum length = 21
    def coord() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    def coordDerivAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 39.019242
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -104.251659
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    def elevMsl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    def elevMslConfLvl() -> int:
        return flatbuffers.field_int32(buf_, pos_, 66, 0)
    /// Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    def elevMslDerivAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    def geoidalMslSep() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
    /// UPS - Universal Polar System
    /// UTM - Universal Transverse Mercator.
    /// Example: /// Example: UTM
    /// Constraints: Minimum length = 0, Maximum length = 3
    def milGridSys() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// 4Q (grid zone designator, GZD)
    /// FJ (the 100,000-meter square identifier)
    /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 15
    def milGrid() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Universal Transverse Mercator (UTM) grid coordinates.
    /// Pos. 1-2, UTM Zone Column   [01-60
    /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    /// Pos. 4, UTM False Easting   [0-9]
    /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    /// Pos. 10-11, UTM False Northing    [0-9][0-9]
    /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    /// Example: /// Example: 19P4390691376966
    /// Constraints: Minimum length = 0, Maximum length = 16
    def utm() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    /// Example: /// Example: AL006
    /// Constraints: Minimum length = 0, Maximum length = 5
    def airDefArea() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: IZ07
    /// Constraints: Minimum length = 0, Maximum length = 7
    def polSubdiv() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def qtyOH() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
    /// Example: /// Example: SOGPU----------
    /// Constraints: Minimum length = 0, Maximum length = 15
    def symCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
    /// 0 - Not of significant importance of the system
    /// 1 - Primary importance to system
    /// 2 - Secondary importance to system
    /// 3 - Tertiary importance to system
    /// O - Other. Explain in Remarks.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    def classRating() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
    /// A - Active
    /// I - Inactive
    /// K - Acknowledged
    /// L - Local
    /// Q - A nominated (NOM) or Data Change Request (DCR) record
    /// R - Production reduced by CMD decision
    /// W - Working Record.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    def recStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
    /// Example: /// Example: 2008-06-10
    /// Constraints: No constraints specified.
    def reviewDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Responsible Producer - Organization that is responsible for the maintenance of the record.
    /// Example: /// Example: RT
    /// Constraints: Minimum length = 0, Maximum length = 4
    def resProd() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: Provider Reference Documentation
    /// Constraints: Minimum length = 0, Maximum length = 128
    def referenceDoc() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['AIRCRAFT']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 96) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 96)
    /// Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['SRC_ID_1']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 98) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 98)
    /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def equipmentRemarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 100) + i * 4)
    def equipmentRemarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 100)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Equipment_Full_dataMode_Enum:
        return Equipment_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 114, 0))

def GetRootAsEquipment_Full(buf:string): return Equipment_Full { buf, flatbuffers.indirect(buf, 0) }

struct Equipment_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(56)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idParentEquipment(idParentEquipment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idParentEquipment)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSite)
        return this
    def add_idOperatingUnit(idOperatingUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idOperatingUnit)
        return this
    def add_altEqpId(altEqpId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, altEqpId)
        return this
    def add_eqpCode(eqpCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, eqpCode)
        return this
    def add_eqpIdNum(eqpIdNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, eqpIdNum)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, countryCode)
        return this
    def add_altCountryCode(altCountryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, altCountryCode)
        return this
    def add_wac(wac:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, wac)
        return this
    def add_seqNum(seqNum:int):
        b_.PrependInt32Slot(11, seqNum, 0)
        return this
    def add_nomen(nomen:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, nomen)
        return this
    def add_operStatus(operStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, operStatus)
        return this
    def add_condition(condition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, condition)
        return this
    def add_conditionAvail(conditionAvail:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, conditionAvail)
        return this
    def add_eval(eval:int):
        b_.PrependInt32Slot(16, eval, 0)
        return this
    def add_fpa(fpa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, fpa)
        return this
    def add_function(function:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, function)
        return this
    def add_ident(ident:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, ident)
        return this
    def add_allegiance(allegiance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, allegiance)
        return this
    def add_altAllegiance(altAllegiance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, altAllegiance)
        return this
    def add_locReason(locReason:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, locReason)
        return this
    def add_operAreaPrimary(operAreaPrimary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, operAreaPrimary)
        return this
    def add_functPrimary(functPrimary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, functPrimary)
        return this
    def add_coordDatum(coordDatum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, coordDatum)
        return this
    def add_coord(coord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, coord)
        return this
    def add_coordDerivAcc(coordDerivAcc:float):
        b_.PrependFloat64Slot(27, coordDerivAcc, 0.0)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(28, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(29, lon, 0.0)
        return this
    def add_elevMsl(elevMsl:float):
        b_.PrependFloat64Slot(30, elevMsl, 0.0)
        return this
    def add_elevMslConfLvl(elevMslConfLvl:int):
        b_.PrependInt32Slot(31, elevMslConfLvl, 0)
        return this
    def add_elevMslDerivAcc(elevMslDerivAcc:float):
        b_.PrependFloat64Slot(32, elevMslDerivAcc, 0.0)
        return this
    def add_geoidalMslSep(geoidalMslSep:float):
        b_.PrependFloat64Slot(33, geoidalMslSep, 0.0)
        return this
    def add_milGridSys(milGridSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, milGridSys)
        return this
    def add_milGrid(milGrid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, milGrid)
        return this
    def add_utm(utm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, utm)
        return this
    def add_airDefArea(airDefArea:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, airDefArea)
        return this
    def add_polSubdiv(polSubdiv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, polSubdiv)
        return this
    def add_qtyOH(qtyOH:int):
        b_.PrependInt32Slot(39, qtyOH, 0)
        return this
    def add_symCode(symCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, symCode)
        return this
    def add_classRating(classRating:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, classRating)
        return this
    def add_recStatus(recStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, recStatus)
        return this
    def add_reviewDate(reviewDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, reviewDate)
        return this
    def add_resProd(resProd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, resProd)
        return this
    def add_referenceDoc(referenceDoc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, referenceDoc)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, srcIds)
        return this
    def add_equipmentRemarks(equipmentRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, equipmentRemarks)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, origin)
        return this
    def add_dataMode(dataMode:Equipment_Full_dataMode_Enum):
        b_.PrependInt8Slot(55, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def Equipment_FullStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Equipment_FullCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Equipment_FullStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Equipment_FullCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Equipment_FullStartEquipmentRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Equipment_FullCreateEquipmentRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

