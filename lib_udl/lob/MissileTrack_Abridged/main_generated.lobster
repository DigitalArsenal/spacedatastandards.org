// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum MissileTrack_Abridged_env_Enum:
    /// Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
    MissileTrack_Abridged_env_Enum_AIR = 0
    /// On the surface of dry land.
    MissileTrack_Abridged_env_Enum_LAND = 1
    /// Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
    MissileTrack_Abridged_env_Enum_SPACE = 2
    /// On the surface of a body of water.
    MissileTrack_Abridged_env_Enum_SURFACE = 3
    /// Below the surface of a body of water.
    MissileTrack_Abridged_env_Enum_SUBSURFACE = 4
    /// Environment is not known.
    MissileTrack_Abridged_env_Enum_UNKNOWN = 5

enum MissileTrack_Abridged_objIdent_Enum:
    /// Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    MissileTrack_Abridged_objIdent_Enum_ASSUMED_FRIEND = 0
    /// Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    MissileTrack_Abridged_objIdent_Enum_FRIEND = 1
    /// Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    MissileTrack_Abridged_objIdent_Enum_HOSTILE = 2
    /// Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    MissileTrack_Abridged_objIdent_Enum_NEUTRAL = 3
    /// Track object which has not been evaluated.
    MissileTrack_Abridged_objIdent_Enum_PENDING = 4
    /// Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    MissileTrack_Abridged_objIdent_Enum_SUSPECT = 5
    /// Track object which has been evaluated and does not meet criteria for any standard identity.
    MissileTrack_Abridged_objIdent_Enum_UNKNOWN = 6

enum MissileTrack_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    MissileTrack_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    MissileTrack_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    MissileTrack_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    MissileTrack_Abridged_dataMode_Enum_EXERCISE = 3

class MissileTrack_Abridged

/// /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
class MissileTrack_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: MissileTrack_ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The type of external message from which this request originated.
    /// Example: /// Example: MSG-TYPE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def msgType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
    /// Example: /// Example: Update
    /// Constraints: Minimum length = 0, Maximum length = 32
    def msgSubType() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-04-25T08:17:01.346Z
    /// Constraints: No constraints specified.
    def msgCreateDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    ///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
    ///  LAND: On the surface of dry land.
    ///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
    ///  SURFACE: On the surface of a body of water.
    ///  SUBSURFACE: Below the surface of a body of water.
    ///  UNKNOWN: Environment is not known.
    /// Example: /// Example: AIR
    /// Constraints: Minimum length = 0, Maximum length = 16
    def env() -> MissileTrack_Abridged_env_Enum:
        return MissileTrack_Abridged_env_Enum(flatbuffers.field_int8(buf_, pos_, 14, 0))
    /// The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
    /// Example: /// Example: Ballistic
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objType() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Confidence of the object type, 0-100.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    def objTypeConf() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
    /// Example: /// Example: WEAPON
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objPlat() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    ///  PENDING: Track object which has not been evaluated.
    ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objIdent() -> MissileTrack_Abridged_objIdent_Enum:
        return MissileTrack_Abridged_objIdent_Enum(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
    /// Example: /// Example: NUCLEAR WARHEAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    def spaceAmp() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
    /// Example: /// Example: HOLDING
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objAct() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Specific type of point or track with an environment of space.
    /// Example: /// Example: SS-21_MOD_2_CRBM
    /// Constraints: Minimum length = 0, Maximum length = 32
    def spaceSpecType() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
    /// &nbsp;SRBM - Short-Range Ballistic Missile
    /// &nbsp;MRBM - Medium-Range Ballistic Missile
    /// &nbsp;IRBM - Intermediate-Range Ballistic Missile
    /// &nbsp;LRBM - Long-Range Ballistic Missile
    /// &nbsp;ICBM - Intercontinental Ballistic Missile
    /// &nbsp;SLBM - Submarine-Launched Ballistic Missile.
    /// Example: /// Example: SLBM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def acftSubType() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Track name.
    /// Example: /// Example: TRACK-NAME
    /// Constraints: Minimum length = 0, Maximum length = 48
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The call sign currently assigned to the track object.
    /// Example: /// Example: Charlie
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Indicates whether or not the missile is considered lost.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def lostTrkInd() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// Track ID within the originating system.
    /// Example: /// Example: 102288
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Track ID of the parent track, within the originating system, from which the track was developed.
    /// Example: /// Example: 102288
    /// Constraints: Minimum length = 0, Maximum length = 36
    def parentTrackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Track ID for the source of the missile-unique identifier.
    /// Example: /// Example: MUID-SRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def muidSrcTrk() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Source of the missile-unique identifier (MUID).
    /// Example: /// Example: MUID-SRC
    /// Constraints: Minimum length = 0, Maximum length = 36
    def muidSrc() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// A track may be designated as a non-alert track or an alert track.
    /// Examples include but are not limited to:
    /// &nbsp;Non-alert tracks – choose None (Blank).
    /// &nbsp;Alert tracks – enter the proper alert classification:
    /// &nbsp;HIT - High Interest Track
    /// &nbsp;TGT - Target
    /// &nbsp;SUS - Suspect Carrier
    /// &nbsp;NSP - Cleared Suspect.
    /// Example: /// Example: HIT
    /// Constraints: Minimum length = 0, Maximum length = 4
    def alert() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Missile status enumeration examples include but are not limited to:
    /// &nbsp;AT LAUNCH 
    /// &nbsp;AT OBSERVATION 
    /// &nbsp;FLYING 
    /// &nbsp;IMPACTED 
    /// &nbsp;LOST 
    /// &nbsp;STALE
    /// &nbsp;DEBRIS.
    /// Example: /// Example: AT LAUNCH
    /// Constraints: Minimum length = 0, Maximum length = 32
    def mslStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 40
    def aouRptType() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    /// &nbsp;ELLIPSE:
    /// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    /// &nbsp;&nbsp;a1 - semi-major axis in kilometers
    /// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    /// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    /// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    /// &nbsp;&nbsp;a1 - length of bearing box in kilometers
    /// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    /// &nbsp;OTHER (All other type values):
    /// &nbsp;&nbsp;brg - line of bearing in degrees true
    /// &nbsp;&nbsp;a1 - bearing error in degrees
    /// &nbsp;&nbsp;a2 - estimated range in kilometers.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    def aouRptData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def aouRptData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// The percentage of time that the estimated AoU will "cover" the true position of the track.
    /// Example: /// Example: 90.64
    /// Constraints: No constraints specified.
    def containment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    /// Example: /// Example: 0.95
    /// Constraints: No constraints specified.
    def trkConf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def trkQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// Angle of elevation/depression between observer and missile in degrees.
    /// Example: /// Example: 15.2
    /// Constraints: No constraints specified.
    def angElev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Last report type received from the sensor (for example, OBSBO = observation burnout).
    /// Example: /// Example: OBSBO
    /// Constraints: Minimum length = 0, Maximum length = 64
    def senMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Source code for source of information used to detect track.
    /// Example: /// Example: S1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def infoSource() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Indicates whether or not the missile is currently in a state of boosting.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def boosting() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// Azimuth corridor reference point latitude.
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    def polarSingLocLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Azimuth corridor reference point longitude.
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    def polarSingLocLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Indicates whether or not a track has an emergency.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def emgInd() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 74, 0))
    /// The drop-point indicator setting.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def dropPtInd() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 76, 0))
    /// Confidence level of the amplifying characteristics. Values range from 0 to 6.
    /// Example: /// Example: 6
    /// Constraints: No constraints specified.
    def spaceAmpConf() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def launchTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    def launchLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    def launchLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Missile azimuth corridor data.
    /// Example: /// Example: 12.876
    /// Constraints: No constraints specified.
    def azCorr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
    /// Example: /// Example: 30567.452
    /// Constraints: No constraints specified.
    def burnoutAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 40
    def launchAouType() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    /// &nbsp;ELLIPSE:
    /// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    /// &nbsp;&nbsp;a1 - semi-major axis in kilometers
    /// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    /// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    /// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    /// &nbsp;&nbsp;a1 - length of bearing box in kilometers
    /// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    /// &nbsp;OTHER (All other type values):
    /// &nbsp;&nbsp;brg - line of bearing in degrees true
    /// &nbsp;&nbsp;a1 - bearing error in degrees
    /// &nbsp;&nbsp;a2 - estimated range in kilometers.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def launchAouData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 92) + i * 4)
    def launchAouData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 92)
    /// Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def impactTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    def impactLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    def impactLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 40
    def impactAouType() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    /// &nbsp;ELLIPSE:
    /// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    /// &nbsp;&nbsp;a1 - semi-major axis in kilometers
    /// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    /// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    /// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    /// &nbsp;&nbsp;a1 - length of bearing box in kilometers
    /// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    /// &nbsp;OTHER (All other type values):
    /// &nbsp;&nbsp;brg - line of bearing in degrees true
    /// &nbsp;&nbsp;a1 - bearing error in degrees
    /// &nbsp;&nbsp;a2 - estimated range in kilometers.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    def impactAouData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 102) + i * 4)
    def impactAouData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 102)
    /// Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def vectors(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 104) + i * 4)
    def vectors_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 104)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Time the row was created in the database.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> MissileTrack_Abridged_dataMode_Enum:
        return MissileTrack_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 116, 0))

def GetRootAsMissileTrack_Abridged(buf:string): return MissileTrack_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct MissileTrack_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(57)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_msgType(msgType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, msgType)
        return this
    def add_msgSubType(msgSubType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, msgSubType)
        return this
    def add_msgCreateDate(msgCreateDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, msgCreateDate)
        return this
    def add_env(env:MissileTrack_Abridged_env_Enum):
        b_.PrependInt8Slot(5, env, 0)
        return this
    def add_objType(objType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, objType)
        return this
    def add_objTypeConf(objTypeConf:int):
        b_.PrependInt32Slot(7, objTypeConf, 0)
        return this
    def add_objPlat(objPlat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, objPlat)
        return this
    def add_objIdent(objIdent:MissileTrack_Abridged_objIdent_Enum):
        b_.PrependInt8Slot(9, objIdent, 0)
        return this
    def add_spaceAmp(spaceAmp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, spaceAmp)
        return this
    def add_objAct(objAct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, objAct)
        return this
    def add_spaceSpecType(spaceSpecType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, spaceSpecType)
        return this
    def add_acftSubType(acftSubType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, acftSubType)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, name)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, callSign)
        return this
    def add_lostTrkInd(lostTrkInd:bool):
        b_.PrependBoolSlot(16, lostTrkInd, 0)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, trackId)
        return this
    def add_parentTrackId(parentTrackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, parentTrackId)
        return this
    def add_muidSrcTrk(muidSrcTrk:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, muidSrcTrk)
        return this
    def add_muidSrc(muidSrc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, muidSrc)
        return this
    def add_alert(alert:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, alert)
        return this
    def add_mslStatus(mslStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, mslStatus)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, ts)
        return this
    def add_aouRptType(aouRptType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, aouRptType)
        return this
    def add_aouRptData(aouRptData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, aouRptData)
        return this
    def add_containment(containment:float):
        b_.PrependFloat64Slot(26, containment, 0.0)
        return this
    def add_trkConf(trkConf:float):
        b_.PrependFloat64Slot(27, trkConf, 0.0)
        return this
    def add_trkQual(trkQual:int):
        b_.PrependInt32Slot(28, trkQual, 0)
        return this
    def add_angElev(angElev:float):
        b_.PrependFloat64Slot(29, angElev, 0.0)
        return this
    def add_senMode(senMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, senMode)
        return this
    def add_infoSource(infoSource:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, infoSource)
        return this
    def add_boosting(boosting:bool):
        b_.PrependBoolSlot(32, boosting, 0)
        return this
    def add_polarSingLocLat(polarSingLocLat:float):
        b_.PrependFloat64Slot(33, polarSingLocLat, 0.0)
        return this
    def add_polarSingLocLon(polarSingLocLon:float):
        b_.PrependFloat64Slot(34, polarSingLocLon, 0.0)
        return this
    def add_emgInd(emgInd:bool):
        b_.PrependBoolSlot(35, emgInd, 0)
        return this
    def add_dropPtInd(dropPtInd:bool):
        b_.PrependBoolSlot(36, dropPtInd, 0)
        return this
    def add_spaceAmpConf(spaceAmpConf:int):
        b_.PrependInt32Slot(37, spaceAmpConf, 0)
        return this
    def add_launchTime(launchTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, launchTime)
        return this
    def add_launchLat(launchLat:float):
        b_.PrependFloat64Slot(39, launchLat, 0.0)
        return this
    def add_launchLon(launchLon:float):
        b_.PrependFloat64Slot(40, launchLon, 0.0)
        return this
    def add_azCorr(azCorr:float):
        b_.PrependFloat64Slot(41, azCorr, 0.0)
        return this
    def add_burnoutAlt(burnoutAlt:float):
        b_.PrependFloat64Slot(42, burnoutAlt, 0.0)
        return this
    def add_launchAouType(launchAouType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, launchAouType)
        return this
    def add_launchAouData(launchAouData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, launchAouData)
        return this
    def add_impactTime(impactTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, impactTime)
        return this
    def add_impactLat(impactLat:float):
        b_.PrependFloat64Slot(46, impactLat, 0.0)
        return this
    def add_impactLon(impactLon:float):
        b_.PrependFloat64Slot(47, impactLon, 0.0)
        return this
    def add_impactAouType(impactAouType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, impactAouType)
        return this
    def add_impactAouData(impactAouData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, impactAouData)
        return this
    def add_vectors(vectors:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, vectors)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, origNetwork)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, origin)
        return this
    def add_dataMode(dataMode:MissileTrack_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(56, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def MissileTrack_AbridgedStartAouRptDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MissileTrack_AbridgedCreateAouRptDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MissileTrack_AbridgedStartLaunchAouDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MissileTrack_AbridgedCreateLaunchAouDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MissileTrack_AbridgedStartImpactAouDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MissileTrack_AbridgedCreateImpactAouDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MissileTrack_AbridgedStartVectorsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MissileTrack_AbridgedCreateVectorsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

