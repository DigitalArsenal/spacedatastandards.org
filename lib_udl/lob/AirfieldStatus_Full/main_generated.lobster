// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirfieldStatus_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirfieldStatus_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirfieldStatus_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirfieldStatus_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirfieldStatus_Full_dataMode_Enum_EXERCISE = 3

class AirfieldStatus_Full

/// /// The airfield status contains dynamic data of an airfield's capabilities.
class AirfieldStatus_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the Airfield for which this status is referencing.
    /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Alternate airfield identifier provided by the source.
    /// Example: /// Example: AIRFIELD-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def altAirfieldId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def passengerServiceMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def fleetServiceMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    def cargoMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
    /// Example: /// Example: 9
    /// Constraints: No constraints specified.
    def fuelMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
    /// Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
    /// Constraints: No constraints specified.
    def fuelTypes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def fuelTypes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
    /// Example: /// Example: [263083.6, 286674.9, 18143.69]
    /// Constraints: No constraints specified.
    def fuelQtys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 22) + i * 4)
    def fuelQtys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 22)
    /// Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def mxMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def operatingMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// The number of aircraft that are currently on ground (COG) at the airfield.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numCOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def wideWorkingMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def wideParkingMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def narrowWorkingMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def narrowParkingMOG() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
    /// Example: /// Example: ['30k', 'AT', '60k']
    /// Constraints: No constraints specified.
    def mheTypes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def mheTypes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
    /// Example: /// Example: [1, 3, 1]
    /// Constraints: No constraints specified.
    def mheQtys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def mheQtys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// The level of medical support and capabilities available at the airfield.
    /// Example: /// Example: Large Field Hospital
    /// Constraints: Minimum length = 0, Maximum length = 64
    def medCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
    /// Example: /// Example: FAA-A
    /// Constraints: Minimum length = 0, Maximum length = 64
    def arffCat() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def gseTime() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// The number or ID of primary runway at the airfield.
    /// Example: /// Example: 35R
    /// Constraints: Minimum length = 0, Maximum length = 16
    def priRwyNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    def rwyCondReading() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def rwyFrictionFactor() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// Array of markings currently on the primary runway.
    /// Example: /// Example: ['Aiming Point', 'Threshold']
    /// Constraints: No constraints specified.
    def rwyMarkings(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def rwyMarkings_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// Description of the current status of the airfield.
    /// Example: /// Example: Status message about the airfield.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def message() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The primary frequency which the airfield is currently operating, in megahertz.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    def priFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
    /// Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
    /// Constraints: No constraints specified.
    def slotTypesReq(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def slotTypesReq_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirfieldStatus_Full_dataMode_Enum:
        return AirfieldStatus_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 78, 0))

def GetRootAsAirfieldStatus_Full(buf:string): return AirfieldStatus_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirfieldStatus_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(38)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idAirfield(idAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idAirfield)
        return this
    def add_altAirfieldId(altAirfieldId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, altAirfieldId)
        return this
    def add_passengerServiceMOG(passengerServiceMOG:int):
        b_.PrependInt32Slot(4, passengerServiceMOG, 0)
        return this
    def add_fleetServiceMOG(fleetServiceMOG:int):
        b_.PrependInt32Slot(5, fleetServiceMOG, 0)
        return this
    def add_cargoMOG(cargoMOG:int):
        b_.PrependInt32Slot(6, cargoMOG, 0)
        return this
    def add_fuelMOG(fuelMOG:int):
        b_.PrependInt32Slot(7, fuelMOG, 0)
        return this
    def add_fuelTypes(fuelTypes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, fuelTypes)
        return this
    def add_fuelQtys(fuelQtys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, fuelQtys)
        return this
    def add_mxMOG(mxMOG:int):
        b_.PrependInt32Slot(10, mxMOG, 0)
        return this
    def add_operatingMOG(operatingMOG:int):
        b_.PrependInt32Slot(11, operatingMOG, 0)
        return this
    def add_numCOG(numCOG:int):
        b_.PrependInt32Slot(12, numCOG, 0)
        return this
    def add_wideWorkingMOG(wideWorkingMOG:int):
        b_.PrependInt32Slot(13, wideWorkingMOG, 0)
        return this
    def add_wideParkingMOG(wideParkingMOG:int):
        b_.PrependInt32Slot(14, wideParkingMOG, 0)
        return this
    def add_narrowWorkingMOG(narrowWorkingMOG:int):
        b_.PrependInt32Slot(15, narrowWorkingMOG, 0)
        return this
    def add_narrowParkingMOG(narrowParkingMOG:int):
        b_.PrependInt32Slot(16, narrowParkingMOG, 0)
        return this
    def add_mheTypes(mheTypes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, mheTypes)
        return this
    def add_mheQtys(mheQtys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, mheQtys)
        return this
    def add_medCap(medCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, medCap)
        return this
    def add_arffCat(arffCat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, arffCat)
        return this
    def add_gseTime(gseTime:int):
        b_.PrependInt32Slot(21, gseTime, 0)
        return this
    def add_priRwyNum(priRwyNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, priRwyNum)
        return this
    def add_rwyCondReading(rwyCondReading:int):
        b_.PrependInt32Slot(23, rwyCondReading, 0)
        return this
    def add_rwyFrictionFactor(rwyFrictionFactor:int):
        b_.PrependInt32Slot(24, rwyFrictionFactor, 0)
        return this
    def add_rwyMarkings(rwyMarkings:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, rwyMarkings)
        return this
    def add_message(message:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, message)
        return this
    def add_priFreq(priFreq:float):
        b_.PrependFloat64Slot(27, priFreq, 0.0)
        return this
    def add_slotTypesReq(slotTypesReq:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, slotTypesReq)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origNetwork)
        return this
    def add_dataMode(dataMode:AirfieldStatus_Full_dataMode_Enum):
        b_.PrependInt8Slot(37, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def AirfieldStatus_FullStartFuelTypesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldStatus_FullCreateFuelTypesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirfieldStatus_FullStartFuelQtysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldStatus_FullCreateFuelQtysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirfieldStatus_FullStartMheTypesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldStatus_FullCreateMheTypesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirfieldStatus_FullStartMheQtysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldStatus_FullCreateMheQtysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirfieldStatus_FullStartRwyMarkingsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldStatus_FullCreateRwyMarkingsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirfieldStatus_FullStartSlotTypesReqVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldStatus_FullCreateSlotTypesReqVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

