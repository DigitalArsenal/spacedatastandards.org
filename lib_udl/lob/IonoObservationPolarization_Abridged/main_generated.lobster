// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum IonoObservationPolarization_Abridged_data_Enum:
    /// No description available.
    IonoObservationPolarization_Abridged_data_Enum_X = 0
    /// No description available.
    IonoObservationPolarization_Abridged_data_Enum_O = 1

class IonoObservationPolarization_Abridged

/// /// Multidimensional array of enums that identifies either classic/basic polarization discrimination “O” or “X” corresponding to ordinary or extraordinary polarizations, respectively. Exclude this enumeration if no classic/basic polarization discrimination is implemented. May accommodate other modes in addition to “O” and “X” with proper documentation in notes field.
class IonoObservationPolarization_Abridged : flatbuffers.handle
    /// Notes for the polarization data.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 512
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Array of integers for polarization dimensions.
    /// Example: /// Example: [1, 2]
    /// Constraints: No constraints specified.
    def dimensions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def dimensions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// Array of names for dimensions.
    /// Example: /// Example: ['NAME1', 'NAME2']
    /// Constraints: No constraints specified.
    def dimensionName(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def dimensionName_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)
    /// Array of polarization data.
    /// Example: /// Example: [[[[[[['X', 'O']]]]]]]
    /// Constraints: No constraints specified.
    def data() -> IonoObservationPolarization_Abridged_data_Enum:
        return IonoObservationPolarization_Abridged_data_Enum(flatbuffers.field_int8(buf_, pos_, 10, 0))

def GetRootAsIonoObservationPolarization_Abridged(buf:string): return IonoObservationPolarization_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationPolarization_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, notes)
        return this
    def add_dimensions(dimensions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, dimensions)
        return this
    def add_dimensionName(dimensionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, dimensionName)
        return this
    def add_data(data:IonoObservationPolarization_Abridged_data_Enum):
        b_.PrependInt8Slot(3, data, 0)
        return this
    def end():
        return b_.EndObject()

def IonoObservationPolarization_AbridgedStartDimensionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationPolarization_AbridgedCreateDimensionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationPolarization_AbridgedStartDimensionNameVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationPolarization_AbridgedCreateDimensionNameVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

