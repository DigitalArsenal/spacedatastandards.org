// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum StarCatalog_Abridged_astrometryOrigin_Enum:
    /// No description available.
    StarCatalog_Abridged_astrometryOrigin_Enum_GAIADR3 = 0
    /// No description available.
    StarCatalog_Abridged_astrometryOrigin_Enum_HIPPARCOS = 1
    /// No description available.
    StarCatalog_Abridged_astrometryOrigin_Enum_USNOBSC = 2

enum StarCatalog_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    StarCatalog_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    StarCatalog_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    StarCatalog_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    StarCatalog_Abridged_dataMode_Enum_EXERCISE = 3

class StarCatalog_Abridged

/// /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
class StarCatalog_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: STAR-CAT-DATASET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The ID of this object in the specific catalog associated with this record.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    def csId() -> int:
        return flatbuffers.field_int64(buf_, pos_, 8, 0)
    /// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    def gncCatId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// The ID of this object in the Gaia DR3 Catalog.
    /// Example: /// Example: 89012345678901
    /// Constraints: No constraints specified.
    def gaiadr3CatId() -> int:
        return flatbuffers.field_int64(buf_, pos_, 12, 0)
    /// The ID of this object in the Hipparcos Catalog.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    def hipCatId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// The version of the catalog associated with this object.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def catVersion() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
    /// Example: /// Example: 14.43
    /// Constraints: No constraints specified.
    def ra() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
    /// Example: /// Example: 509.466
    /// Constraints: No constraints specified.
    def raUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
    /// Example: /// Example: 21.8
    /// Constraints: No constraints specified.
    def dec() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
    /// Example: /// Example: 40.996
    /// Constraints: No constraints specified.
    def decUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def posUncFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 26, 0))
    /// Absolute stellar parallax of the source, in milliarcseconds.
    /// Example: /// Example: -6.8
    /// Constraints: No constraints specified.
    def parallax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Uncertainty of the stellar parallax, in milliarcseconds.
    /// Example: /// Example: 82.35
    /// Constraints: No constraints specified.
    def parallaxUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
    /// Example: /// Example: 1000.45
    /// Constraints: No constraints specified.
    def pmra() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
    /// Example: /// Example: 5.6
    /// Constraints: No constraints specified.
    def pmraUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
    /// Example: /// Example: -970.1003
    /// Constraints: No constraints specified.
    def pmdec() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Uncertainty of proper motion in declination, in milliarcseconds/year.
    /// Example: /// Example: 1.22
    /// Constraints: No constraints specified.
    def pmdecUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def pmUncFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 40, 0))
    /// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
    /// Example: /// Example: GAIADR3
    /// Constraints: Minimum length = 1, Maximum length = 16
    def astrometryOrigin() -> StarCatalog_Abridged_astrometryOrigin_Enum:
        return StarCatalog_Abridged_astrometryOrigin_Enum(flatbuffers.field_int8(buf_, pos_, 42, 0))
    /// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
    /// Example: /// Example: 2016
    /// Constraints: No constraints specified.
    def starEpoch() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
    /// Example: /// Example: 0.0046
    /// Constraints: No constraints specified.
    def gmag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 0.00292
    /// Constraints: No constraints specified.
    def gmagUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
    /// Example: /// Example: 0.04559
    /// Constraints: No constraints specified.
    def bpmag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 0.2227
    /// Constraints: No constraints specified.
    def bpmagUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Gaia DR3 optical Rp-band magnitude in the Vega scale.
    /// Example: /// Example: 8.0047
    /// Constraints: No constraints specified.
    def rpmag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 1.233
    /// Constraints: No constraints specified.
    def rpmagUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
    /// Example: /// Example: 9.515
    /// Constraints: No constraints specified.
    def jmag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 7.559
    /// Constraints: No constraints specified.
    def jmagUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
    /// Example: /// Example: 13.545
    /// Constraints: No constraints specified.
    def kmag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 0.052
    /// Constraints: No constraints specified.
    def kmagUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
    /// Example: /// Example: 12.126
    /// Constraints: No constraints specified.
    def hmag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
    /// Example: /// Example: 5.722
    /// Constraints: No constraints specified.
    def hmagUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Flag indicating that the source exhibits variable magnitude.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def varFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 70, 0))
    /// Flag indicating that this is a multiple object source.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def multFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 72, 0))
    /// The catalog ID of the nearest neighbor to this source.
    /// Example: /// Example: 2456
    /// Constraints: No constraints specified.
    def neighborId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def neighborFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 76, 0))
    /// Distance between source and nearest neighbor, in arcseconds.
    /// Example: /// Example: 201.406
    /// Constraints: No constraints specified.
    def neighborDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def shiftFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 80, 0))
    /// Photocentric shift caused by neighbors, in arcseconds.
    /// Example: /// Example: 4.548
    /// Constraints: No constraints specified.
    def shift() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Time the row was updated in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Application user who updated the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 4
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> StarCatalog_Abridged_dataMode_Enum:
        return StarCatalog_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 98, 0))

def GetRootAsStarCatalog_Abridged(buf:string): return StarCatalog_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct StarCatalog_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(48)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_csId(csId:int):
        b_.PrependInt64Slot(2, csId, 0)
        return this
    def add_gncCatId(gncCatId:int):
        b_.PrependInt32Slot(3, gncCatId, 0)
        return this
    def add_gaiadr3CatId(gaiadr3CatId:int):
        b_.PrependInt64Slot(4, gaiadr3CatId, 0)
        return this
    def add_hipCatId(hipCatId:int):
        b_.PrependInt32Slot(5, hipCatId, 0)
        return this
    def add_catVersion(catVersion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, catVersion)
        return this
    def add_ra(ra:float):
        b_.PrependFloat64Slot(7, ra, 0.0)
        return this
    def add_raUnc(raUnc:float):
        b_.PrependFloat64Slot(8, raUnc, 0.0)
        return this
    def add_dec(dec:float):
        b_.PrependFloat64Slot(9, dec, 0.0)
        return this
    def add_decUnc(decUnc:float):
        b_.PrependFloat64Slot(10, decUnc, 0.0)
        return this
    def add_posUncFlag(posUncFlag:bool):
        b_.PrependBoolSlot(11, posUncFlag, 0)
        return this
    def add_parallax(parallax:float):
        b_.PrependFloat64Slot(12, parallax, 0.0)
        return this
    def add_parallaxUnc(parallaxUnc:float):
        b_.PrependFloat64Slot(13, parallaxUnc, 0.0)
        return this
    def add_pmra(pmra:float):
        b_.PrependFloat64Slot(14, pmra, 0.0)
        return this
    def add_pmraUnc(pmraUnc:float):
        b_.PrependFloat64Slot(15, pmraUnc, 0.0)
        return this
    def add_pmdec(pmdec:float):
        b_.PrependFloat64Slot(16, pmdec, 0.0)
        return this
    def add_pmdecUnc(pmdecUnc:float):
        b_.PrependFloat64Slot(17, pmdecUnc, 0.0)
        return this
    def add_pmUncFlag(pmUncFlag:bool):
        b_.PrependBoolSlot(18, pmUncFlag, 0)
        return this
    def add_astrometryOrigin(astrometryOrigin:StarCatalog_Abridged_astrometryOrigin_Enum):
        b_.PrependInt8Slot(19, astrometryOrigin, 0)
        return this
    def add_starEpoch(starEpoch:float):
        b_.PrependFloat64Slot(20, starEpoch, 0.0)
        return this
    def add_gmag(gmag:float):
        b_.PrependFloat64Slot(21, gmag, 0.0)
        return this
    def add_gmagUnc(gmagUnc:float):
        b_.PrependFloat64Slot(22, gmagUnc, 0.0)
        return this
    def add_bpmag(bpmag:float):
        b_.PrependFloat64Slot(23, bpmag, 0.0)
        return this
    def add_bpmagUnc(bpmagUnc:float):
        b_.PrependFloat64Slot(24, bpmagUnc, 0.0)
        return this
    def add_rpmag(rpmag:float):
        b_.PrependFloat64Slot(25, rpmag, 0.0)
        return this
    def add_rpmagUnc(rpmagUnc:float):
        b_.PrependFloat64Slot(26, rpmagUnc, 0.0)
        return this
    def add_jmag(jmag:float):
        b_.PrependFloat64Slot(27, jmag, 0.0)
        return this
    def add_jmagUnc(jmagUnc:float):
        b_.PrependFloat64Slot(28, jmagUnc, 0.0)
        return this
    def add_kmag(kmag:float):
        b_.PrependFloat64Slot(29, kmag, 0.0)
        return this
    def add_kmagUnc(kmagUnc:float):
        b_.PrependFloat64Slot(30, kmagUnc, 0.0)
        return this
    def add_hmag(hmag:float):
        b_.PrependFloat64Slot(31, hmag, 0.0)
        return this
    def add_hmagUnc(hmagUnc:float):
        b_.PrependFloat64Slot(32, hmagUnc, 0.0)
        return this
    def add_varFlag(varFlag:bool):
        b_.PrependBoolSlot(33, varFlag, 0)
        return this
    def add_multFlag(multFlag:bool):
        b_.PrependBoolSlot(34, multFlag, 0)
        return this
    def add_neighborId(neighborId:int):
        b_.PrependInt32Slot(35, neighborId, 0)
        return this
    def add_neighborFlag(neighborFlag:bool):
        b_.PrependBoolSlot(36, neighborFlag, 0)
        return this
    def add_neighborDistance(neighborDistance:float):
        b_.PrependFloat64Slot(37, neighborDistance, 0.0)
        return this
    def add_shiftFlag(shiftFlag:bool):
        b_.PrependBoolSlot(38, shiftFlag, 0)
        return this
    def add_shift(shift:float):
        b_.PrependFloat64Slot(39, shift, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, origNetwork)
        return this
    def add_dataMode(dataMode:StarCatalog_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(47, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

