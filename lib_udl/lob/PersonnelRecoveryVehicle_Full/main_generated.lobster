// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class PersonnelRecoveryVehicle_Full

/// /// Information regarding the recovery vehicle.
class PersonnelRecoveryVehicle_Full : flatbuffers.handle
    /// The call sign of the recovery vehicle.
    /// Example: /// Example: FALCO
    /// Constraints: Minimum length = 0, Maximum length = 128
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The particular type of recovery vehicle to be used.
    /// Example: /// Example: C17
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Primary contact frequency of the recovery vehicle.
    /// Example: /// Example: 34.55
    /// Constraints: No constraints specified.
    def primaryFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def strength() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)

def GetRootAsPersonnelRecoveryVehicle_Full(buf:string): return PersonnelRecoveryVehicle_Full { buf, flatbuffers.indirect(buf, 0) }

struct PersonnelRecoveryVehicle_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, callSign)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, type)
        return this
    def add_primaryFreq(primaryFreq:float):
        b_.PrependFloat64Slot(2, primaryFreq, 0.0)
        return this
    def add_strength(strength:int):
        b_.PrependInt32Slot(3, strength, 0)
        return this
    def end():
        return b_.EndObject()

