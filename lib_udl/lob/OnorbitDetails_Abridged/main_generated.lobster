// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OnorbitDetails_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    OnorbitDetails_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    OnorbitDetails_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    OnorbitDetails_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    OnorbitDetails_Abridged_dataMode_Enum_EXERCISE = 3

class OnorbitDetails_Abridged

/// /// Contains details of the OnOrbit object.
class OnorbitDetails_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ONORBITDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// UUID of the parent Onorbit record.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def lastObTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Current/latest visual magnitude in M.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def vismag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Minimum visual magnitude in M.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def vismagMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Maximum visual magnitude in M.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    def vismagMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Mean visual magnitude in M.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def vismagMean() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Current/latest radar cross section in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def rcs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Minimum radar cross section in meters squared.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def rcsMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Maximum radar cross section in meters squared.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    def rcsMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Mean radar cross section in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def rcsMean() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// The total beginning of life delta V of the spacecraft, in meters per second.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    def bolDeltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Maximum delta V available for this on-orbit spacecraft, in meters per second.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxDeltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
    /// Example: /// Example: 50.1
    /// Constraints: No constraints specified.
    def deltaVUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Estimated maximum burn duration for the object, in seconds.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def estDeltaVDuration() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The number of distinct missions the spacecraft performs.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numMission() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
    /// Example: /// Example: ['Weather', 'Space Weather']
    /// Constraints: No constraints specified.
    def missionTypes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def missionTypes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// Type of the bus on the spacecraft.
    /// Example: /// Example: A2100
    /// Constraints: Minimum length = 0, Maximum length = 32
    def busType() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
    /// Example: /// Example: 90.23
    /// Constraints: No constraints specified.
    def geoSlot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// GEO drift rate, if applicable in degrees per day.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def driftRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Spacecraft dry mass (without fuel or disposables) in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def dryMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Mass of fuel and disposables at launch time in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def additionalMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def launchMassMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Nominal mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def launchMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    def launchMassMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def bolFuelMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The estimated total current mass of the spacecraft, in kilograms.
    /// Example: /// Example: 500
    /// Constraints: No constraints specified.
    def currentMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
    /// Example: /// Example: 50.1
    /// Constraints: No constraints specified.
    def totalMassUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Spacecraft deployed area of solar array in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def solarArrayArea() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def maneuverable() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 64, 0))
    /// Estimated remaining fuel for the object in kilograms.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def fuelRemaining() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Average cross sectional area in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def crossSection() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Average cross sectional area of the bus in meters squared.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def busCrossSection() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxRadius() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def colaRadius() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def adeptRadius() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// The number of sub-satellites or deployable objects on the spacecraft.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numDeployable() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
    /// Example: /// Example: ['GOES-18A', 'GOES-18B']
    /// Constraints: No constraints specified.
    def depNames(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 80) + i * 4)
    def depNames_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 80)
    /// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    /// Example: /// Example: [20, 21]
    /// Constraints: No constraints specified.
    def depEstMasses(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 82) + i * 4)
    def depEstMasses_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 82)
    /// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    /// Example: /// Example: [10, 5]
    /// Constraints: No constraints specified.
    def depMassUncs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 84) + i * 4)
    def depMassUncs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 84)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// The name of the source who last provided an observation for this idOnOrbit.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def lastObSource() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> OnorbitDetails_Abridged_dataMode_Enum:
        return OnorbitDetails_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 92, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)

def GetRootAsOnorbitDetails_Abridged(buf:string): return OnorbitDetails_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct OnorbitDetails_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(48)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idOnOrbit)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_lastObTime(lastObTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, lastObTime)
        return this
    def add_vismag(vismag:float):
        b_.PrependFloat64Slot(4, vismag, 0.0)
        return this
    def add_vismagMin(vismagMin:float):
        b_.PrependFloat64Slot(5, vismagMin, 0.0)
        return this
    def add_vismagMax(vismagMax:float):
        b_.PrependFloat64Slot(6, vismagMax, 0.0)
        return this
    def add_vismagMean(vismagMean:float):
        b_.PrependFloat64Slot(7, vismagMean, 0.0)
        return this
    def add_rcs(rcs:float):
        b_.PrependFloat64Slot(8, rcs, 0.0)
        return this
    def add_rcsMin(rcsMin:float):
        b_.PrependFloat64Slot(9, rcsMin, 0.0)
        return this
    def add_rcsMax(rcsMax:float):
        b_.PrependFloat64Slot(10, rcsMax, 0.0)
        return this
    def add_rcsMean(rcsMean:float):
        b_.PrependFloat64Slot(11, rcsMean, 0.0)
        return this
    def add_bolDeltaV(bolDeltaV:float):
        b_.PrependFloat64Slot(12, bolDeltaV, 0.0)
        return this
    def add_maxDeltaV(maxDeltaV:float):
        b_.PrependFloat64Slot(13, maxDeltaV, 0.0)
        return this
    def add_deltaVUnc(deltaVUnc:float):
        b_.PrependFloat64Slot(14, deltaVUnc, 0.0)
        return this
    def add_estDeltaVDuration(estDeltaVDuration:float):
        b_.PrependFloat64Slot(15, estDeltaVDuration, 0.0)
        return this
    def add_numMission(numMission:int):
        b_.PrependInt32Slot(16, numMission, 0)
        return this
    def add_missionTypes(missionTypes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, missionTypes)
        return this
    def add_busType(busType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, busType)
        return this
    def add_geoSlot(geoSlot:float):
        b_.PrependFloat64Slot(19, geoSlot, 0.0)
        return this
    def add_driftRate(driftRate:float):
        b_.PrependFloat64Slot(20, driftRate, 0.0)
        return this
    def add_dryMass(dryMass:float):
        b_.PrependFloat64Slot(21, dryMass, 0.0)
        return this
    def add_additionalMass(additionalMass:float):
        b_.PrependFloat64Slot(22, additionalMass, 0.0)
        return this
    def add_launchMassMin(launchMassMin:float):
        b_.PrependFloat64Slot(23, launchMassMin, 0.0)
        return this
    def add_launchMass(launchMass:float):
        b_.PrependFloat64Slot(24, launchMass, 0.0)
        return this
    def add_launchMassMax(launchMassMax:float):
        b_.PrependFloat64Slot(25, launchMassMax, 0.0)
        return this
    def add_bolFuelMass(bolFuelMass:float):
        b_.PrependFloat64Slot(26, bolFuelMass, 0.0)
        return this
    def add_currentMass(currentMass:float):
        b_.PrependFloat64Slot(27, currentMass, 0.0)
        return this
    def add_totalMassUnc(totalMassUnc:float):
        b_.PrependFloat64Slot(28, totalMassUnc, 0.0)
        return this
    def add_solarArrayArea(solarArrayArea:float):
        b_.PrependFloat64Slot(29, solarArrayArea, 0.0)
        return this
    def add_maneuverable(maneuverable:bool):
        b_.PrependBoolSlot(30, maneuverable, 0)
        return this
    def add_fuelRemaining(fuelRemaining:float):
        b_.PrependFloat64Slot(31, fuelRemaining, 0.0)
        return this
    def add_crossSection(crossSection:float):
        b_.PrependFloat64Slot(32, crossSection, 0.0)
        return this
    def add_busCrossSection(busCrossSection:float):
        b_.PrependFloat64Slot(33, busCrossSection, 0.0)
        return this
    def add_maxRadius(maxRadius:float):
        b_.PrependFloat64Slot(34, maxRadius, 0.0)
        return this
    def add_colaRadius(colaRadius:float):
        b_.PrependFloat64Slot(35, colaRadius, 0.0)
        return this
    def add_adeptRadius(adeptRadius:float):
        b_.PrependFloat64Slot(36, adeptRadius, 0.0)
        return this
    def add_numDeployable(numDeployable:int):
        b_.PrependInt32Slot(37, numDeployable, 0)
        return this
    def add_depNames(depNames:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, depNames)
        return this
    def add_depEstMasses(depEstMasses:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, depEstMasses)
        return this
    def add_depMassUncs(depMassUncs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, depMassUncs)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, origin)
        return this
    def add_lastObSource(lastObSource:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, lastObSource)
        return this
    def add_dataMode(dataMode:OnorbitDetails_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(44, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, createdBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, origNetwork)
        return this
    def end():
        return b_.EndObject()

def OnorbitDetails_AbridgedStartMissionTypesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnorbitDetails_AbridgedCreateMissionTypesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnorbitDetails_AbridgedStartDepNamesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnorbitDetails_AbridgedCreateDepNamesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnorbitDetails_AbridgedStartDepEstMassesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnorbitDetails_AbridgedCreateDepEstMassesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnorbitDetails_AbridgedStartDepMassUncsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnorbitDetails_AbridgedCreateDepMassUncsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

