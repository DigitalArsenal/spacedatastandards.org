// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class RoutePoints_Full

/// /// Points identified within the route.
class RoutePoints_Full : flatbuffers.handle
    /// Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def ptSequenceId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
    /// Example: /// Example: EP
    /// Constraints: Minimum length = 0, Maximum length = 16
    def ptTypeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
    /// Example: /// Example: ENTRY POINT
    /// Constraints: Minimum length = 0, Maximum length = 36
    def ptTypeName() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Name of a waypoint which identifies the location of the point.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def waypointName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def dafifPt() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 12, 0))
    /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def ptLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def ptLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
    /// Example: /// Example: 7.35
    /// Constraints: No constraints specified.
    def magDec() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// The length of the course from the Navigational Aid (NAVAID) in nautical miles.
    /// Example: /// Example: 100.2
    /// Constraints: No constraints specified.
    def navaidLength() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Navigational Aid (NAVAID) identification code.
    /// Example: /// Example: HTO
    /// Constraints: Minimum length = 0, Maximum length = 16
    def navaid() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: NL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 16
    def altCountryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
    /// Example: /// Example: VORTAC
    /// Constraints: Minimum length = 0, Maximum length = 12
    def navaidType() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)

def GetRootAsRoutePoints_Full(buf:string): return RoutePoints_Full { buf, flatbuffers.indirect(buf, 0) }

struct RoutePoints_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(13)
        return this
    def add_ptSequenceId(ptSequenceId:int):
        b_.PrependInt32Slot(0, ptSequenceId, 0)
        return this
    def add_ptTypeCode(ptTypeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, ptTypeCode)
        return this
    def add_ptTypeName(ptTypeName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, ptTypeName)
        return this
    def add_waypointName(waypointName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, waypointName)
        return this
    def add_dafifPt(dafifPt:bool):
        b_.PrependBoolSlot(4, dafifPt, 0)
        return this
    def add_ptLat(ptLat:float):
        b_.PrependFloat64Slot(5, ptLat, 0.0)
        return this
    def add_ptLon(ptLon:float):
        b_.PrependFloat64Slot(6, ptLon, 0.0)
        return this
    def add_magDec(magDec:float):
        b_.PrependFloat64Slot(7, magDec, 0.0)
        return this
    def add_navaidLength(navaidLength:float):
        b_.PrependFloat64Slot(8, navaidLength, 0.0)
        return this
    def add_navaid(navaid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, navaid)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, countryCode)
        return this
    def add_altCountryCode(altCountryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, altCountryCode)
        return this
    def add_navaidType(navaidType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, navaidType)
        return this
    def end():
        return b_.EndObject()

