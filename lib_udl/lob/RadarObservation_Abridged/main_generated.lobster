// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum RadarObservation_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    RadarObservation_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    RadarObservation_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    RadarObservation_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    RadarObservation_Abridged_dataMode_Enum_EXERCISE = 3

enum RadarObservation_Abridged_senReferenceFrame_Enum:
    /// No description available.
    RadarObservation_Abridged_senReferenceFrame_Enum_J2000 = 0
    /// No description available.
    RadarObservation_Abridged_senReferenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    RadarObservation_Abridged_senReferenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    RadarObservation_Abridged_senReferenceFrame_Enum_TEME = 3
    /// No description available.
    RadarObservation_Abridged_senReferenceFrame_Enum_ITRF = 4
    /// No description available.
    RadarObservation_Abridged_senReferenceFrame_Enum_GCRF = 5

class RadarObservation_Abridged

/// /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class RadarObservation_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RADAROBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def taskId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional identifier of the track to which this observation belongs.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    def obPosition() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// azimuth angle in degrees and topocentric frame.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def azimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def azimuthUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Sensor azimuth angle bias in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def azimuthBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def azimuthRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def elevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def elevationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Sensor elevation bias in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def elevationBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def elevationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Target range in km.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def range() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Range accelaration in km/s2.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def rangeAccel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def rangeAccelUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// One sigma uncertainty in the range measurement, in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def rangeUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Sensor range bias in km.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def rangeBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Rate of change of the line of sight range in km/sec.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def rangeRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// One sigma uncertainty in the range rate measurement, in kilometers/second.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def rangeRateUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Corrected doppler measurement in meters per second.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def doppler() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// One sigma uncertainty in the corrected doppler measurement, in meters/second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def dopplerUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Line of sight right ascension in degrees and J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def ra() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Line of sight declination angle in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def declination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// X position of target in km in J2000 coordinate frame.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def x() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Y position of target in km in J2000 coordinate frame.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def y() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Z position of target in km in J2000 coordinate frame.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def z() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// X velocity of target in km/sec in J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def xvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Y velocity of target in km/sec in J2000 coordinate frame.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def yvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Z velocity of target in km/sec in J2000 coordinate frame.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def zvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def senx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: /// Example: 40.23
    /// Constraints: No constraints specified.
    def seny() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    /// Example: /// Example: 35.23
    /// Constraints: No constraints specified.
    def senz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Radar cross section in meters squared for polarization principal.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def rcs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def rcsUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Radar cross section in meters squared for orthogonal polarization.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def orthogonalRcs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def orthogonalRcsUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def snr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// ID of the beam that produced this observation.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def beam() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// Sensor timing bias in seconds.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def timingBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: rawFileURI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> RadarObservation_Abridged_dataMode_Enum:
        return RadarObservation_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 106, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def senReferenceFrame() -> RadarObservation_Abridged_senReferenceFrame_Enum:
        return RadarObservation_Abridged_senReferenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 112, 0))
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: /// Example: RADAR
    /// Constraints: No constraints specified.
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)

def GetRootAsRadarObservation_Abridged(buf:string): return RadarObservation_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct RadarObservation_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(59)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, obTime)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idSensor)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(5, satNo, 0)
        return this
    def add_taskId(taskId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, taskId)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, transactionId)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, trackId)
        return this
    def add_obPosition(obPosition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, obPosition)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, origObjectId)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, origSensorId)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(12, uct, 0)
        return this
    def add_azimuth(azimuth:float):
        b_.PrependFloat64Slot(13, azimuth, 0.0)
        return this
    def add_azimuthUnc(azimuthUnc:float):
        b_.PrependFloat64Slot(14, azimuthUnc, 0.0)
        return this
    def add_azimuthBias(azimuthBias:float):
        b_.PrependFloat64Slot(15, azimuthBias, 0.0)
        return this
    def add_azimuthRate(azimuthRate:float):
        b_.PrependFloat64Slot(16, azimuthRate, 0.0)
        return this
    def add_elevation(elevation:float):
        b_.PrependFloat64Slot(17, elevation, 0.0)
        return this
    def add_elevationUnc(elevationUnc:float):
        b_.PrependFloat64Slot(18, elevationUnc, 0.0)
        return this
    def add_elevationBias(elevationBias:float):
        b_.PrependFloat64Slot(19, elevationBias, 0.0)
        return this
    def add_elevationRate(elevationRate:float):
        b_.PrependFloat64Slot(20, elevationRate, 0.0)
        return this
    def add_range(range:float):
        b_.PrependFloat64Slot(21, range, 0.0)
        return this
    def add_rangeAccel(rangeAccel:float):
        b_.PrependFloat64Slot(22, rangeAccel, 0.0)
        return this
    def add_rangeAccelUnc(rangeAccelUnc:float):
        b_.PrependFloat64Slot(23, rangeAccelUnc, 0.0)
        return this
    def add_rangeUnc(rangeUnc:float):
        b_.PrependFloat64Slot(24, rangeUnc, 0.0)
        return this
    def add_rangeBias(rangeBias:float):
        b_.PrependFloat64Slot(25, rangeBias, 0.0)
        return this
    def add_rangeRate(rangeRate:float):
        b_.PrependFloat64Slot(26, rangeRate, 0.0)
        return this
    def add_rangeRateUnc(rangeRateUnc:float):
        b_.PrependFloat64Slot(27, rangeRateUnc, 0.0)
        return this
    def add_doppler(doppler:float):
        b_.PrependFloat64Slot(28, doppler, 0.0)
        return this
    def add_dopplerUnc(dopplerUnc:float):
        b_.PrependFloat64Slot(29, dopplerUnc, 0.0)
        return this
    def add_ra(ra:float):
        b_.PrependFloat64Slot(30, ra, 0.0)
        return this
    def add_declination(declination:float):
        b_.PrependFloat64Slot(31, declination, 0.0)
        return this
    def add_x(x:float):
        b_.PrependFloat64Slot(32, x, 0.0)
        return this
    def add_y(y:float):
        b_.PrependFloat64Slot(33, y, 0.0)
        return this
    def add_z(z:float):
        b_.PrependFloat64Slot(34, z, 0.0)
        return this
    def add_xvel(xvel:float):
        b_.PrependFloat64Slot(35, xvel, 0.0)
        return this
    def add_yvel(yvel:float):
        b_.PrependFloat64Slot(36, yvel, 0.0)
        return this
    def add_zvel(zvel:float):
        b_.PrependFloat64Slot(37, zvel, 0.0)
        return this
    def add_senx(senx:float):
        b_.PrependFloat64Slot(38, senx, 0.0)
        return this
    def add_seny(seny:float):
        b_.PrependFloat64Slot(39, seny, 0.0)
        return this
    def add_senz(senz:float):
        b_.PrependFloat64Slot(40, senz, 0.0)
        return this
    def add_rcs(rcs:float):
        b_.PrependFloat64Slot(41, rcs, 0.0)
        return this
    def add_rcsUnc(rcsUnc:float):
        b_.PrependFloat64Slot(42, rcsUnc, 0.0)
        return this
    def add_orthogonalRcs(orthogonalRcs:float):
        b_.PrependFloat64Slot(43, orthogonalRcs, 0.0)
        return this
    def add_orthogonalRcsUnc(orthogonalRcsUnc:float):
        b_.PrependFloat64Slot(44, orthogonalRcsUnc, 0.0)
        return this
    def add_snr(snr:float):
        b_.PrependFloat64Slot(45, snr, 0.0)
        return this
    def add_beam(beam:float):
        b_.PrependFloat64Slot(46, beam, 0.0)
        return this
    def add_timingBias(timingBias:float):
        b_.PrependFloat64Slot(47, timingBias, 0.0)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, rawFileURI)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, origin)
        return this
    def add_dataMode(dataMode:RadarObservation_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(51, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, createdBy)
        return this
    def add_senReferenceFrame(senReferenceFrame:RadarObservation_Abridged_senReferenceFrame_Enum):
        b_.PrependInt8Slot(54, senReferenceFrame, 0)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, descriptor)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, sourceDL)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, type)
        return this
    def end():
        return b_.EndObject()

