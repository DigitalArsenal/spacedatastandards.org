// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class OpticalSOIObservation_Full

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
class OpticalSOIObservation_Full : flatbuffers.handle
    /// Observation detection start time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.888456Z
    /// Constraints: No constraints specified.
    def obStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
    /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
    /// Constraints: No constraints specified.
    def intensityTimes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def intensityTimes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def currentSpectralFilterNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Image exposure duration in seconds.
    /// Example: /// Example: 0.455
    /// Constraints: No constraints specified.
    def expDuration() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
    /// Example: /// Example: [1.1, 1.1, 1.1]
    /// Constraints: No constraints specified.
    def intensities(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 12) + i * 4)
    def intensities_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 12)
    /// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
    /// Example: /// Example: [0.32, 0.32, 0.32]
    /// Constraints: No constraints specified.
    def extinctionCoeffs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def extinctionCoeffs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
    /// Example: /// Example: [0.06, 0.06, 0.06]
    /// Constraints: No constraints specified.
    def extinctionCoeffsUnc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def extinctionCoeffsUnc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: [100625.375, 100625.375, 100625.375]
    /// Constraints: No constraints specified.
    def skyBgs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def skyBgs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: [100625.375, 100625.375, 100625.375]
    /// Constraints: No constraints specified.
    def localSkyBgs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def localSkyBgs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
    /// Example: /// Example: [0.065, 0.065, 0.065]
    /// Constraints: No constraints specified.
    def localSkyBgsUnc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 22) + i * 4)
    def localSkyBgsUnc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 22)
    /// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
    /// Example: /// Example: [6, 6, 6]
    /// Constraints: No constraints specified.
    def numDetectedStars(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def numDetectedStars_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)
    /// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
    /// Example: /// Example: [3, 3, 3]
    /// Constraints: No constraints specified.
    def numCorrelatedStars(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 26) + i * 4)
    def numCorrelatedStars_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 26)
    /// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
    /// Example: /// Example: [24.711, 24.711, 24.711]
    /// Constraints: No constraints specified.
    def zeroPoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def zeroPoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
    /// Example: /// Example: [107.4, 107.4, 107.4]
    /// Constraints: No constraints specified.
    def ras(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def ras_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
    /// Example: /// Example: [-0.45, -0.45, -0.45]
    /// Constraints: No constraints specified.
    def declinations(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def declinations_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
    /// Example: /// Example: [0, 0, 0]
    /// Constraints: No constraints specified.
    def raRates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def raRates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
    /// Example: /// Example: [0.1, 0.2, 1]
    /// Constraints: No constraints specified.
    def percentSats(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def percentSats_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)

def GetRootAsOpticalSOIObservation_Full(buf:string): return OpticalSOIObservation_Full { buf, flatbuffers.indirect(buf, 0) }

struct OpticalSOIObservation_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(17)
        return this
    def add_obStartTime(obStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, obStartTime)
        return this
    def add_intensityTimes(intensityTimes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, intensityTimes)
        return this
    def add_currentSpectralFilterNum(currentSpectralFilterNum:int):
        b_.PrependInt32Slot(2, currentSpectralFilterNum, 0)
        return this
    def add_expDuration(expDuration:float):
        b_.PrependFloat64Slot(3, expDuration, 0.0)
        return this
    def add_intensities(intensities:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, intensities)
        return this
    def add_extinctionCoeffs(extinctionCoeffs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, extinctionCoeffs)
        return this
    def add_extinctionCoeffsUnc(extinctionCoeffsUnc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, extinctionCoeffsUnc)
        return this
    def add_skyBgs(skyBgs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, skyBgs)
        return this
    def add_localSkyBgs(localSkyBgs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, localSkyBgs)
        return this
    def add_localSkyBgsUnc(localSkyBgsUnc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, localSkyBgsUnc)
        return this
    def add_numDetectedStars(numDetectedStars:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, numDetectedStars)
        return this
    def add_numCorrelatedStars(numCorrelatedStars:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, numCorrelatedStars)
        return this
    def add_zeroPoints(zeroPoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, zeroPoints)
        return this
    def add_ras(ras:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, ras)
        return this
    def add_declinations(declinations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, declinations)
        return this
    def add_raRates(raRates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, raRates)
        return this
    def add_percentSats(percentSats:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, percentSats)
        return this
    def end():
        return b_.EndObject()

def OpticalSOIObservation_FullStartIntensityTimesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateIntensityTimesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartIntensitiesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateIntensitiesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartExtinctionCoeffsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateExtinctionCoeffsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartExtinctionCoeffsUncVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateExtinctionCoeffsUncVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartSkyBgsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateSkyBgsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartLocalSkyBgsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateLocalSkyBgsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartLocalSkyBgsUncVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateLocalSkyBgsUncVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartNumDetectedStarsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateNumDetectedStarsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartNumCorrelatedStarsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateNumCorrelatedStarsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartZeroPointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateZeroPointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartRasVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateRasVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartDeclinationsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateDeclinationsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartRaRatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreateRaRatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OpticalSOIObservation_FullStartPercentSatsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OpticalSOIObservation_FullCreatePercentSatsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

