// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsParts_Full

/// /// The parts associated with this support item.
class LogisticsParts_Full : flatbuffers.handle
    /// Requested or supplied part number.
    /// Example: /// Example: MS35338-42
    /// Constraints: Minimum length = 0, Maximum length = 20
    def partNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The National Stock Number of the part being requested or supplied.
    /// Example: /// Example: 5310-00-045-3299
    /// Constraints: Minimum length = 0, Maximum length = 20
    def nationalStockNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Code for a unit of measurement.
    /// Example: /// Example: EA
    /// Constraints: Minimum length = 0, Maximum length = 2
    def measurementUnitCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
    /// Example: /// Example: 5611UU001
    /// Constraints: Minimum length = 0, Maximum length = 10
    def workUnitCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
    /// Example: /// Example: 1C-17A-4
    /// Constraints: Minimum length = 0, Maximum length = 15
    def technicalOrderText() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Technical order manual figure number for the requested / supplied part.
    /// Example: /// Example: 3
    /// Constraints: Minimum length = 0, Maximum length = 7
    def figureNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Technical order manual index number for the requested part.
    /// Example: /// Example: 4
    /// Constraints: Minimum length = 0, Maximum length = 4
    def indexNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The person who validated the request for parts.
    /// Example: /// Example: JOHN SMITH
    /// Constraints: Minimum length = 0, Maximum length = 25
    def requestVerifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The person who validated that the sourced location has, and can supply, the requested parts.
    /// Example: /// Example: JANE DOE
    /// Constraints: Minimum length = 0, Maximum length = 25
    def locationVerifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The supply document number.
    /// Example: /// Example: J223FU31908300
    /// Constraints: Minimum length = 0, Maximum length = 17
    def supplyDocumentNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The supply stocks for this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsStocks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def logisticsStocks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)

def GetRootAsLogisticsParts_Full(buf:string): return LogisticsParts_Full { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsParts_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(11)
        return this
    def add_partNumber(partNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, partNumber)
        return this
    def add_nationalStockNumber(nationalStockNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, nationalStockNumber)
        return this
    def add_measurementUnitCode(measurementUnitCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, measurementUnitCode)
        return this
    def add_workUnitCode(workUnitCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, workUnitCode)
        return this
    def add_technicalOrderText(technicalOrderText:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, technicalOrderText)
        return this
    def add_figureNumber(figureNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, figureNumber)
        return this
    def add_indexNumber(indexNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, indexNumber)
        return this
    def add_requestVerifier(requestVerifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, requestVerifier)
        return this
    def add_locationVerifier(locationVerifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, locationVerifier)
        return this
    def add_supplyDocumentNumber(supplyDocumentNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, supplyDocumentNumber)
        return this
    def add_logisticsStocks(logisticsStocks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, logisticsStocks)
        return this
    def end():
        return b_.EndObject()

def LogisticsParts_FullStartLogisticsStocksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsParts_FullCreateLogisticsStocksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

