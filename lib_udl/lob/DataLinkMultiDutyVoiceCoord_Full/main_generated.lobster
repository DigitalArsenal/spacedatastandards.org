// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DataLinkMultiDutyVoiceCoord_Full

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
class DataLinkMultiDutyVoiceCoord_Full : flatbuffers.handle
    /// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
    /// Example: /// Example: VPN
    /// Constraints: Minimum length = 0, Maximum length = 5
    def multiVoiceNetDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
    /// Example: /// Example: ST300A
    /// Constraints: Minimum length = 0, Maximum length = 8
    def multiFreqDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 1
    def multiCommPri() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    def multiTeleFreqNums(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def multiTeleFreqNums_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)

def GetRootAsDataLinkMultiDutyVoiceCoord_Full(buf:string): return DataLinkMultiDutyVoiceCoord_Full { buf, flatbuffers.indirect(buf, 0) }

struct DataLinkMultiDutyVoiceCoord_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_multiVoiceNetDes(multiVoiceNetDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, multiVoiceNetDes)
        return this
    def add_multiFreqDes(multiFreqDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, multiFreqDes)
        return this
    def add_multiCommPri(multiCommPri:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, multiCommPri)
        return this
    def add_multiTeleFreqNums(multiTeleFreqNums:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, multiTeleFreqNums)
        return this
    def end():
        return b_.EndObject()

def DataLinkMultiDutyVoiceCoord_FullStartMultiTeleFreqNumsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLinkMultiDutyVoiceCoord_FullCreateMultiTeleFreqNumsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

