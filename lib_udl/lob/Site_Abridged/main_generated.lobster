// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Site_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Site_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Site_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Site_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Site_Abridged_dataMode_Enum_EXERCISE = 3

class Site_Abridged

/// /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
class Site_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent entity. idEntity is required for Put.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the Parent Site record associated with this Site record.
    /// Example: /// Example: ID-Parent-Site
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idParentSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique identifier of the Site record from the originating system.
    /// Example: /// Example: ORIG-SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origSiteID() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the LZ record from the originating system.
    /// Example: /// Example: ORIG-LZ-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origLzId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Site number of a specific electronic site or its associated equipment.
    /// Example: /// Example: 25200
    /// Constraints: Minimum length = 0, Maximum length = 5
    def pin() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
    /// Example: /// Example: AIRBASE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
    /// Example: /// Example: MILITARY
    /// Constraints: Minimum length = 0, Maximum length = 16
    def usage() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
    /// AF - Airfield
    /// FD - Field
    /// HC - High Crop.  1 meter and over.
    /// HY - Highway
    /// LB - Lake Bed
    /// LC - Low Crop.  0-1 meters
    /// O - Other. Explain In Remarks.
    /// PD - Paddy
    /// PK - Park
    /// PS - Pasture
    /// RB - Riverbed
    /// SP - Sport Field
    /// U - Unknown
    /// Z - Inconclusive Analysis.
    /// Example: /// Example: AF
    /// Constraints: Minimum length = 0, Maximum length = 3
    def lzUsage() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The name of this site.
    /// Example: /// Example: Site Name
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: WGS
    /// Constraints: Minimum length = 0, Maximum length = 3
    def coordDatum() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
    /// Pos. 1-2.  Latitude Degrees     [00-90]
    /// Pos. 3-4.  Latitude Minutes     [00-59]
    /// Pos. 5-6.  Latitude Seconds     [00-59]
    /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    /// Pos. 10. Latitude Hemisphere       [NS] 
    /// Pos. 11-13. Longitude Degrees     [00-180] 
    /// Pos. 14-15. Longitude Minutes     [00-59] 
    /// Pos. 16-17. Longitude Seconds     [00-59] 
    /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    /// Pos. 21. Longitude Hemisphere     [EW]
    /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
    /// Example: /// Example: 340000000N0430000000E
    /// Constraints: Minimum length = 0, Maximum length = 21
    def coord() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    def coordDerivAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
    /// Example: /// Example: BB002
    /// Constraints: Minimum length = 0, Maximum length = 5
    def osuffix() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The International Air Transport Association (IATA) code of this site, if applicable.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    def iata() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
    /// Example: /// Example: ICA1
    /// Constraints: Minimum length = 0, Maximum length = 4
    def icao() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    def faa() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    /// Example: /// Example: AL006
    /// Constraints: Minimum length = 0, Maximum length = 5
    def airDefArea() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Universal Transverse Mercator (UTM) grid coordinates.
    /// Pos. 1-2, UTM Zone Column   [01-60
    /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    /// Pos. 4, UTM False Easting   [0-9]
    /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    /// Pos. 10-11, UTM False Northing    [0-9][0-9]
    /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    /// Example: /// Example: 19P4390691376966
    /// Constraints: Minimum length = 0, Maximum length = 16
    def utm() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
    /// UPS - Universal Polar System
    /// UTM - Universal Transverse Mercator.
    /// Example: /// Example: UTM
    /// Constraints: Minimum length = 0, Maximum length = 3
    def milGridSys() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// 4Q (grid zone designator, GZD)
    /// FJ (the 100,000-meter square identifier)
    /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 15
    def milGrid() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The category code that represents the associated site purpose within the target system.
    /// Example: /// Example: 20345
    /// Constraints: Minimum length = 0, Maximum length = 16
    def catCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Textual Description of Site catCode.
    /// Example: /// Example: Radar Facility, General
    /// Constraints: Minimum length = 0, Maximum length = 148
    def catText() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// World Aeronautical Chart identifier for the area in which a designated place is located.
    /// Example: /// Example: 0427
    /// Constraints: Minimum length = 0, Maximum length = 4
    def wac() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: IZO7
    /// Constraints: Minimum length = 0, Maximum length = 7
    def polSubdiv() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: E2
    /// Constraints: Minimum length = 0, Maximum length = 2
    def geoArea() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    def geoidalMslSep() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: OTHR
    /// Constraints: Minimum length = 0, Maximum length = 4
    def allegiance() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    /// Example: /// Example: HL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def altAllegiance() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
    /// 0 - Does not meet criteria above
    /// 1 - Primary importance to system
    /// 2 - Secondary importance to system
    /// 3 - Tertiary importance to system
    /// O - Other. Explain in Remarks.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    def classRating() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: EOB
    /// Constraints: Minimum length = 0, Maximum length = 5
    def fpa() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
    /// Example: /// Example: 0427RT1030
    /// Constraints: Minimum length = 0, Maximum length = 10
    def beNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The number of runways at the site, if applicable.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def runways() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// The length of the longest runway at this site, if applicable, in meters.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    def maxRunwayLength() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: RDY
    /// Constraints: Minimum length = 0, Maximum length = 4
    def condition() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 4
    def conditionAvail() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OPR
    /// Constraints: Minimum length = 0, Maximum length = 3
    def operStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def grade() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OCC
    /// Constraints: Minimum length = 0, Maximum length = 3
    def activity() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: JG
    /// Constraints: Minimum length = 0, Maximum length = 4
    def functPrimary() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: AA
    /// Constraints: Minimum length = 0, Maximum length = 4
    def msnPrimary() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: AB
    /// Constraints: Minimum length = 0, Maximum length = 4
    def msnPrimarySpec() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// A sites ability to conduct nuclear warfare. Valid Values are:
    /// A - Nuclear Ammo Or Warheads Available
    /// N - No Nuclear Offense
    /// O - Other. Explain in Remarks
    /// U - Unknown
    /// W - Nuclear Weapons Available
    /// Y - Nuclear Warfare Offensive Capability
    /// Z - Inconclusive Analysis.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    def nucCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def ident() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    def elevMsl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    def elevMslConfLvl() -> int:
        return flatbuffers.field_int32(buf_, pos_, 96, 0)
    /// Indicates the plus or minus error assessed against the method used to derive the elevation.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    def elevMslDerivAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def vegHt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: FR
    /// Constraints: Minimum length = 0, Maximum length = 4
    def vegType() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def popArea() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 104, 0))
    /// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    def popAreaProx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Optional notes/comments for the site.
    /// Example: /// Example: Example Notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Responsible Producer - Organization that is responsible for the maintenance of the record.
    /// Example: /// Example: RT
    /// Constraints: Minimum length = 0, Maximum length = 4
    def resProd() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def eval() -> int:
        return flatbuffers.field_int32(buf_, pos_, 112, 0)
    /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
    /// Example: /// Example: 2008-06-10
    /// Constraints: No constraints specified.
    def reviewDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
    /// A - Active
    /// I - Inactive
    /// K - Acknowledged
    /// L - Local
    /// Q - A nominated (NOM) or Data Change Request (DCR) record
    /// R - Production reduced by CMD decision
    /// W - Working Record.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    def recStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
    /// Example: /// Example: SOGPU----------
    /// Constraints: Minimum length = 0, Maximum length = 15
    def symCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: Provider Reference Documentation
    /// Constraints: Minimum length = 0, Maximum length = 128
    def referenceDoc() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Site_Abridged_dataMode_Enum:
        return Site_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 132, 0))

def GetRootAsSite_Abridged(buf:string): return Site_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Site_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(65)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idEntity)
        return this
    def add_idParentSite(idParentSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idParentSite)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, classificationMarking)
        return this
    def add_origSiteID(origSiteID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origSiteID)
        return this
    def add_origLzId(origLzId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, origLzId)
        return this
    def add_pin(pin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, pin)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, type)
        return this
    def add_usage(usage:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, usage)
        return this
    def add_lzUsage(lzUsage:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, lzUsage)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, name)
        return this
    def add_coordDatum(coordDatum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, coordDatum)
        return this
    def add_coord(coord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, coord)
        return this
    def add_coordDerivAcc(coordDerivAcc:float):
        b_.PrependFloat64Slot(13, coordDerivAcc, 0.0)
        return this
    def add_osuffix(osuffix:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, osuffix)
        return this
    def add_iata(iata:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, iata)
        return this
    def add_icao(icao:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, icao)
        return this
    def add_faa(faa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, faa)
        return this
    def add_airDefArea(airDefArea:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, airDefArea)
        return this
    def add_utm(utm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, utm)
        return this
    def add_milGridSys(milGridSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, milGridSys)
        return this
    def add_milGrid(milGrid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, milGrid)
        return this
    def add_catCode(catCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, catCode)
        return this
    def add_catText(catText:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, catText)
        return this
    def add_wac(wac:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, wac)
        return this
    def add_polSubdiv(polSubdiv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, polSubdiv)
        return this
    def add_geoArea(geoArea:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, geoArea)
        return this
    def add_geoidalMslSep(geoidalMslSep:float):
        b_.PrependFloat64Slot(27, geoidalMslSep, 0.0)
        return this
    def add_allegiance(allegiance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, allegiance)
        return this
    def add_altAllegiance(altAllegiance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, altAllegiance)
        return this
    def add_classRating(classRating:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, classRating)
        return this
    def add_fpa(fpa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, fpa)
        return this
    def add_beNumber(beNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, beNumber)
        return this
    def add_runways(runways:int):
        b_.PrependInt32Slot(33, runways, 0)
        return this
    def add_maxRunwayLength(maxRunwayLength:int):
        b_.PrependInt32Slot(34, maxRunwayLength, 0)
        return this
    def add_condition(condition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, condition)
        return this
    def add_conditionAvail(conditionAvail:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, conditionAvail)
        return this
    def add_operStatus(operStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, operStatus)
        return this
    def add_grade(grade:int):
        b_.PrependInt32Slot(38, grade, 0)
        return this
    def add_activity(activity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, activity)
        return this
    def add_functPrimary(functPrimary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, functPrimary)
        return this
    def add_msnPrimary(msnPrimary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, msnPrimary)
        return this
    def add_msnPrimarySpec(msnPrimarySpec:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, msnPrimarySpec)
        return this
    def add_nucCap(nucCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, nucCap)
        return this
    def add_ident(ident:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, ident)
        return this
    def add_elevMsl(elevMsl:float):
        b_.PrependFloat64Slot(45, elevMsl, 0.0)
        return this
    def add_elevMslConfLvl(elevMslConfLvl:int):
        b_.PrependInt32Slot(46, elevMslConfLvl, 0)
        return this
    def add_elevMslDerivAcc(elevMslDerivAcc:float):
        b_.PrependFloat64Slot(47, elevMslDerivAcc, 0.0)
        return this
    def add_vegHt(vegHt:float):
        b_.PrependFloat64Slot(48, vegHt, 0.0)
        return this
    def add_vegType(vegType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, vegType)
        return this
    def add_popArea(popArea:bool):
        b_.PrependBoolSlot(50, popArea, 0)
        return this
    def add_popAreaProx(popAreaProx:float):
        b_.PrependFloat64Slot(51, popAreaProx, 0.0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, notes)
        return this
    def add_resProd(resProd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, resProd)
        return this
    def add_eval(eval:int):
        b_.PrependInt32Slot(54, eval, 0)
        return this
    def add_reviewDate(reviewDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, reviewDate)
        return this
    def add_recStatus(recStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, recStatus)
        return this
    def add_symCode(symCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, symCode)
        return this
    def add_referenceDoc(referenceDoc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, referenceDoc)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, origNetwork)
        return this
    def add_dataMode(dataMode:Site_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(64, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

