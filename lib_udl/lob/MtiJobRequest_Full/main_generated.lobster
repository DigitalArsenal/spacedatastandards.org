// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiJobRequest_Full

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiJobRequest_Full : flatbuffers.handle
    /// The requestor of the sensor service.
    /// Example: /// Example: REQUESTER
    /// Constraints: Minimum length = 0, Maximum length = 10
    def r1() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier for the tasking message sent by the requesting station.
    /// Example: /// Example: IDENTIFIER
    /// Constraints: Minimum length = 0, Maximum length = 10
    def r2() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The priority of the request relative to other requests originated by the requesting station.
    /// Example: /// Example: 15
    /// Constraints: No constraints specified.
    def r3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r4() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r5() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r6() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r7() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r8() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r9() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def r11() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Identifies the radar mode requested by the requestor.
    /// Example: /// Example: MODE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def r12() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Specifies the radar range resolution requested by the requestor, expressed in centimeters.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def r13() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def r14() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def jobReqEst() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def r21() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def r22() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Specifies the revisit interval for the radar job, expressed in deciseconds.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def r23() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// the type of sensor or the platform.
    /// Example: /// Example: TYPE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def r24() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The particular variant of the sensor type.
    /// Example: /// Example: VARIANT
    /// Constraints: Minimum length = 0, Maximum length = 8
    def r25() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def r26() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 44, 0))

def GetRootAsMtiJobRequest_Full(buf:string): return MtiJobRequest_Full { buf, flatbuffers.indirect(buf, 0) }

struct MtiJobRequest_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_r1(r1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, r1)
        return this
    def add_r2(r2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, r2)
        return this
    def add_r3(r3:int):
        b_.PrependInt32Slot(2, r3, 0)
        return this
    def add_r4(r4:float):
        b_.PrependFloat64Slot(3, r4, 0.0)
        return this
    def add_r5(r5:float):
        b_.PrependFloat64Slot(4, r5, 0.0)
        return this
    def add_r6(r6:float):
        b_.PrependFloat64Slot(5, r6, 0.0)
        return this
    def add_r7(r7:float):
        b_.PrependFloat64Slot(6, r7, 0.0)
        return this
    def add_r8(r8:float):
        b_.PrependFloat64Slot(7, r8, 0.0)
        return this
    def add_r9(r9:float):
        b_.PrependFloat64Slot(8, r9, 0.0)
        return this
    def add_r10(r10:float):
        b_.PrependFloat64Slot(9, r10, 0.0)
        return this
    def add_r11(r11:float):
        b_.PrependFloat64Slot(10, r11, 0.0)
        return this
    def add_r12(r12:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, r12)
        return this
    def add_r13(r13:int):
        b_.PrependInt32Slot(12, r13, 0)
        return this
    def add_r14(r14:int):
        b_.PrependInt32Slot(13, r14, 0)
        return this
    def add_jobReqEst(jobReqEst:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, jobReqEst)
        return this
    def add_r21(r21:int):
        b_.PrependInt32Slot(15, r21, 0)
        return this
    def add_r22(r22:int):
        b_.PrependInt32Slot(16, r22, 0)
        return this
    def add_r23(r23:int):
        b_.PrependInt32Slot(17, r23, 0)
        return this
    def add_r24(r24:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, r24)
        return this
    def add_r25(r25:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, r25)
        return this
    def add_r26(r26:bool):
        b_.PrependBoolSlot(20, r26, 0)
        return this
    def end():
        return b_.EndObject()

