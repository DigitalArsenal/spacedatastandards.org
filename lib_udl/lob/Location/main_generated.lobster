// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Location_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Location_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Location_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Location_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Location_dataMode_Enum_EXERCISE = 3

class Location

/// /// Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.
class Location : flatbuffers.handle
    /// Unique identifier of the location, auto-generated by the system.
    /// Example: /// Example: LOCATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idLocation() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Location name.
    /// Example: /// Example: Example location
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 16
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Altitude of the location, in kilometers.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def altitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Location_dataMode_Enum:
        return Location_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)

def GetRootAsLocation(buf:string): return Location { buf, flatbuffers.indirect(buf, 0) }

struct LocationBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(15)
        return this
    def add_idLocation(idLocation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idLocation)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, name)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, countryCode)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(4, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(5, lon, 0.0)
        return this
    def add_altitude(altitude:float):
        b_.PrependFloat64Slot(6, altitude, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origin)
        return this
    def add_dataMode(dataMode:Location_dataMode_Enum):
        b_.PrependInt8Slot(13, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origNetwork)
        return this
    def end():
        return b_.EndObject()

