// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum POI_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    POI_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    POI_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    POI_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    POI_Ingest_dataMode_Enum_EXERCISE = 3

class POI_Ingest

/// /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
class POI_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
    /// Example: /// Example: BDA
    /// Constraints: Minimum length = 0, Maximum length = 36
    def pps() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional mission ID related to the POI.
    /// Example: /// Example: MSN-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def msnid() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Priority of the  POI target object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def pri() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
    /// Example: /// Example: TRK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trkid() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
    /// Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
    /// Constraints: No constraints specified.
    def idWeatherReport(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def idWeatherReport_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 1, Maximum length = 128
    def poiid() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Name of the POI target object.
    /// Example: /// Example: POI_NAME
    /// Constraints: Minimum length = 1, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Description of the POI target object.
    /// Example: /// Example: Description of the object
    /// Constraints: Minimum length = 0, Maximum length = 128
    def desc() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
    /// Example: /// Example: LIGHT_TANK
    /// Constraints: Minimum length = 0, Maximum length = 24
    def spec() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 16
    def ident() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
    /// Example: /// Example: SURFACE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def env() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
    /// Example: /// Example: COMBAT_VEHICLE
    /// Constraints: Minimum length = 0, Maximum length = 36
    def plat() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
    /// Example: /// Example: TRAINING
    /// Constraints: Minimum length = 0, Maximum length = 32
    def activity() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Activity/POI timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Start time of event validity (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def start() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Stale timestamp (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def stale() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: h-g-i-g-o
    /// Constraints: Minimum length = 0, Maximum length = 36
    def how() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Event type, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: a-h-G
    /// Constraints: Minimum length = 0, Maximum length = 36
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def az() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def el() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def le() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def ce() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
    /// Example: /// Example: [125.5, 85.1, 125.75]
    /// Constraints: No constraints specified.
    def elle(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def elle_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
    /// Example: /// Example: Contact Info
    /// Constraints: Minimum length = 0, Maximum length = 32
    def cntct() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def conf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// List of URLs to before/after images of this Point of Interest entity.
    /// Example: /// Example: ['URL1', 'URL2']
    /// Constraints: No constraints specified.
    def urls(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def urls_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def area() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def atext() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    def agjson() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Type of region as projected on the ground.
    /// Example: /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def atype() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def andims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def asrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> POI_Ingest_dataMode_Enum:
        return POI_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 86, 0))
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
    /// Example: /// Example: ['GROUP1', 'GROUP2']
    /// Constraints: No constraints specified.
    def groups(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 90) + i * 4)
    def groups_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 90)
    /// ID/name of the platform or entity providing the POI data.
    /// Example: /// Example: PLATFORM_NAME
    /// Constraints: Minimum length = 0, Maximum length = 64
    def asset() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 94) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 94)
    /// Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['TYPE1', 'TYPE2']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 96) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 96)
    /// Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
    /// Example: /// Example: ['ID1', 'ID2']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 98) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 98)
    /// The Basic Encyclopedia Number associated with the POI, if applicable.
    /// Example: /// Example: 0427RT1030
    /// Constraints: Minimum length = 0, Maximum length = 64
    def beNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def orientation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)

def GetRootAsPOI_Ingest(buf:string): return POI_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct POI_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(52)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_pps(pps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, pps)
        return this
    def add_msnid(msnid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, msnid)
        return this
    def add_pri(pri:int):
        b_.PrependInt32Slot(4, pri, 0)
        return this
    def add_trkid(trkid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, trkid)
        return this
    def add_idWeatherReport(idWeatherReport:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idWeatherReport)
        return this
    def add_poiid(poiid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, poiid)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, name)
        return this
    def add_desc(desc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, desc)
        return this
    def add_spec(spec:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, spec)
        return this
    def add_ident(ident:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, ident)
        return this
    def add_env(env:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, env)
        return this
    def add_plat(plat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, plat)
        return this
    def add_activity(activity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, activity)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, ts)
        return this
    def add_start(start:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, start)
        return this
    def add_stale(stale:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, stale)
        return this
    def add_how(how:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, how)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, type)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(20, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(21, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(22, alt, 0.0)
        return this
    def add_az(az:float):
        b_.PrependFloat64Slot(23, az, 0.0)
        return this
    def add_el(el:float):
        b_.PrependFloat64Slot(24, el, 0.0)
        return this
    def add_le(le:float):
        b_.PrependFloat64Slot(25, le, 0.0)
        return this
    def add_ce(ce:float):
        b_.PrependFloat64Slot(26, ce, 0.0)
        return this
    def add_elle(elle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, elle)
        return this
    def add_cntct(cntct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, cntct)
        return this
    def add_conf(conf:float):
        b_.PrependFloat64Slot(29, conf, 0.0)
        return this
    def add_urls(urls:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, urls)
        return this
    def add_area(area:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, area)
        return this
    def add_atext(atext:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, atext)
        return this
    def add_agjson(agjson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, agjson)
        return this
    def add_atype(atype:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, atype)
        return this
    def add_andims(andims:int):
        b_.PrependInt32Slot(35, andims, 0)
        return this
    def add_asrid(asrid:int):
        b_.PrependInt32Slot(36, asrid, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, source)
        return this
    def add_dataMode(dataMode:POI_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(41, dataMode, 0)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, origin)
        return this
    def add_groups(groups:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, groups)
        return this
    def add_asset(asset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, asset)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, tags)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, srcIds)
        return this
    def add_beNumber(beNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, beNumber)
        return this
    def add_orientation(orientation:float):
        b_.PrependFloat64Slot(49, orientation, 0.0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, origNetwork)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, transactionId)
        return this
    def end():
        return b_.EndObject()

def POI_IngestStartIdWeatherReportVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateIdWeatherReportVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def POI_IngestStartElleVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateElleVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def POI_IngestStartUrlsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateUrlsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def POI_IngestStartGroupsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateGroupsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def POI_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def POI_IngestStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def POI_IngestStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def POI_IngestCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

