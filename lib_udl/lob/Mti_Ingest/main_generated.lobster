// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Mti_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Mti_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Mti_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Mti_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Mti_Ingest_dataMode_Enum_EXERCISE = 3

class Mti_Ingest

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
class Mti_Ingest : flatbuffers.handle
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MTI-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Mti_Ingest_dataMode_Enum:
        return Mti_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 12, 0))
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Nationality of the platform providing the data.
    /// Example: /// Example: NATIONALITY
    /// Constraints: Minimum length = 0, Maximum length = 32
    def p3() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Control / handling marking.
    /// Example: /// Example: MARKING
    /// Constraints: Minimum length = 0, Maximum length = 128
    def p6() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Data record exercise indicator.
    /// Example: /// Example: INDICATOR
    /// Constraints: Minimum length = 0, Maximum length = 32
    def p7() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
    /// Example: /// Example: P8-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def p8() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
    /// Example: /// Example: 45
    /// Constraints: No constraints specified.
    def p9() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: 45
    /// Constraints: No constraints specified.
    def p10() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def missions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def missions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def dwells(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def dwells_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def hrrs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def hrrs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def jobDefs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def jobDefs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def freeTexts(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def freeTexts_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def platformLocs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def platformLocs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def jobRequests(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def jobRequests_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)

def GetRootAsMti_Ingest(buf:string): return Mti_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Mti_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, classificationMarking)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, origin)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, id)
        return this
    def add_dataMode(dataMode:Mti_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(4, dataMode, 0)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, createdBy)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, createdAt)
        return this
    def add_p3(p3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, p3)
        return this
    def add_p6(p6:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, p6)
        return this
    def add_p7(p7:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, p7)
        return this
    def add_p8(p8:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, p8)
        return this
    def add_p9(p9:int):
        b_.PrependInt32Slot(11, p9, 0)
        return this
    def add_p10(p10:int):
        b_.PrependInt32Slot(12, p10, 0)
        return this
    def add_missions(missions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, missions)
        return this
    def add_dwells(dwells:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, dwells)
        return this
    def add_hrrs(hrrs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, hrrs)
        return this
    def add_jobDefs(jobDefs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, jobDefs)
        return this
    def add_freeTexts(freeTexts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, freeTexts)
        return this
    def add_platformLocs(platformLocs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, platformLocs)
        return this
    def add_jobRequests(jobRequests:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, jobRequests)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origNetwork)
        return this
    def end():
        return b_.EndObject()

def Mti_IngestStartMissionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreateMissionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Mti_IngestStartDwellsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreateDwellsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Mti_IngestStartHrrsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreateHrrsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Mti_IngestStartJobDefsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreateJobDefsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Mti_IngestStartFreeTextsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreateFreeTextsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Mti_IngestStartPlatformLocsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreatePlatformLocsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Mti_IngestStartJobRequestsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Mti_IngestCreateJobRequestsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

