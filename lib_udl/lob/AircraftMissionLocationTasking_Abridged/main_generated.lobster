// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AircraftMissionLocationTasking_Abridged

/// /// Collection of aircraft mission location information for this aircraft mission tasking.
class AircraftMissionLocationTasking_Abridged : flatbuffers.handle
    /// The start time of this mission in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The end time of this mission in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
    /// Example: /// Example: KLSV
    /// Constraints: Minimum length = 0, Maximum length = 24
    def msnLocName() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The altitude for this mission represented as hundreds of feet above MSL.
    /// Example: /// Example: 210
    /// Constraints: No constraints specified.
    def alt() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// The code for the priority assigned to this mission.
    /// Example: /// Example: 1A
    /// Constraints: Minimum length = 0, Maximum length = 8
    def airMsnPri() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The radius of the circle around the location being reported in feet.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    def areaGeoRad() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// The location name for this mission.
    /// Example: /// Example: PT ALFA
    /// Constraints: Minimum length = 0, Maximum length = 36
    def msnLocPtName() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    /// Example: /// Example: 35.123
    /// Constraints: No constraints specified.
    def msnLocPtLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    /// Example: /// Example: 79.01
    /// Constraints: No constraints specified.
    def msnLocPtLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
    /// Example: /// Example: 330T-PT ALFA-50NM
    /// Constraints: Minimum length = 0, Maximum length = 36
    def msnLocPtBarT() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)

def GetRootAsAircraftMissionLocationTasking_Abridged(buf:string): return AircraftMissionLocationTasking_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct AircraftMissionLocationTasking_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(10)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, endTime)
        return this
    def add_msnLocName(msnLocName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, msnLocName)
        return this
    def add_alt(alt:int):
        b_.PrependInt32Slot(3, alt, 0)
        return this
    def add_airMsnPri(airMsnPri:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, airMsnPri)
        return this
    def add_areaGeoRad(areaGeoRad:int):
        b_.PrependInt32Slot(5, areaGeoRad, 0)
        return this
    def add_msnLocPtName(msnLocPtName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, msnLocPtName)
        return this
    def add_msnLocPtLat(msnLocPtLat:float):
        b_.PrependFloat64Slot(7, msnLocPtLat, 0.0)
        return this
    def add_msnLocPtLon(msnLocPtLon:float):
        b_.PrependFloat64Slot(8, msnLocPtLon, 0.0)
        return this
    def add_msnLocPtBarT(msnLocPtBarT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, msnLocPtBarT)
        return this
    def end():
        return b_.EndObject()

