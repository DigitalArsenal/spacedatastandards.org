// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SiteStatus_Full_instStatus_Enum:
    /// No description available.
    SiteStatus_Full_instStatus_Enum_FMC = 0
    /// No description available.
    SiteStatus_Full_instStatus_Enum_PMC = 1
    /// No description available.
    SiteStatus_Full_instStatus_Enum_NMC = 2
    /// No description available.
    SiteStatus_Full_instStatus_Enum_UNK = 3

enum SiteStatus_Full_fpcon_Enum:
    /// No description available.
    SiteStatus_Full_fpcon_Enum_NORMAL = 0
    /// No description available.
    SiteStatus_Full_fpcon_Enum_ALPHA = 1
    /// No description available.
    SiteStatus_Full_fpcon_Enum_BRAVO = 2
    /// No description available.
    SiteStatus_Full_fpcon_Enum_CHARLIE = 3
    /// No description available.
    SiteStatus_Full_fpcon_Enum_DELTA = 4

enum SiteStatus_Full_hpcon_Enum:
    /// No description available.
    SiteStatus_Full_hpcon_Enum_E0 = 0
    /// No description available.
    SiteStatus_Full_hpcon_Enum_ALPHA = 1
    /// No description available.
    SiteStatus_Full_hpcon_Enum_BRAVO = 2
    /// No description available.
    SiteStatus_Full_hpcon_Enum_CHARLIE = 3
    /// No description available.
    SiteStatus_Full_hpcon_Enum_DELTA = 4

enum SiteStatus_Full_cpcon_Enum:
    /// No description available.
    SiteStatus_Full_cpcon_Enum_E1 = 0
    /// No description available.
    SiteStatus_Full_cpcon_Enum_E2 = 1
    /// No description available.
    SiteStatus_Full_cpcon_Enum_E3 = 2
    /// No description available.
    SiteStatus_Full_cpcon_Enum_E4 = 3
    /// No description available.
    SiteStatus_Full_cpcon_Enum_E5 = 4

enum SiteStatus_Full_cat_Enum:
    /// No description available.
    SiteStatus_Full_cat_Enum_COLD = 0
    /// No description available.
    SiteStatus_Full_cat_Enum_WARM = 1
    /// No description available.
    SiteStatus_Full_cat_Enum_HOT = 2

enum SiteStatus_Full_eoc_Enum:
    /// No description available.
    SiteStatus_Full_eoc_Enum_COLD = 0
    /// No description available.
    SiteStatus_Full_eoc_Enum_WARM = 1
    /// No description available.
    SiteStatus_Full_eoc_Enum_HOT = 2

enum SiteStatus_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SiteStatus_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SiteStatus_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SiteStatus_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SiteStatus_Full_dataMode_Enum_EXERCISE = 3

class SiteStatus_Full

/// /// No description available.
class SiteStatus_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SITESTATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The ID of the site, if this status is associated with a fixed site or platform.
    /// Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
    /// Example: /// Example: ADOC
    /// Constraints: Minimum length = 0, Maximum length = 36
    def siteType() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Alternate Identifier for a mobile or transportable platform provided by source.
    /// Example: /// Example: MOBILEALT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def mobileAltId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The POI (point of interest) ID related to this platform, if available.
    /// Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
    /// Constraints: Minimum length = 0, Maximum length = 36
    def poiid() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The track ID related to this platform (if mobile or transportable), if available.
    /// Example: /// Example: PCM4923-1656174732-4-1-257
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Link-16 specific reference track number.
    /// Example: /// Example: TrkNm
    /// Constraints: Minimum length = 0, Maximum length = 5
    def trackRefL16() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
    /// Example: /// Example: Fully Operational
    /// Constraints: Minimum length = 0, Maximum length = 24
    def opsCapability() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The status of the installation.
    /// FMC - Fully Mission Capable
    ///  PMC - Partially Mission Capable
    /// NMC - Non Mission Capable
    /// UNK - Unknown.
    /// Example: /// Example: PMC
    /// Constraints: Minimum length = 0, Maximum length = 3
    def instStatus() -> SiteStatus_Full_instStatus_Enum:
        return SiteStatus_Full_instStatus_Enum(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Force Protection Condition (FPCON).
    /// NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
    /// ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
    /// BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
    /// CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
    /// DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
    /// Example: /// Example: BRAVO
    /// Constraints: Minimum length = 0, Maximum length = 7
    def fpcon() -> SiteStatus_Full_fpcon_Enum:
        return SiteStatus_Full_fpcon_Enum(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// Health Protection Condition (HPCON).
    /// 0 - Routine, no community transmission.
    /// ALPHA - Limited, community transmission beginning.
    /// BRAVO - Moderate, increased community transmission.
    /// CHARLIE - Substantial, sustained community transmission.
    /// DELTA - Severe, widespread community transmission.
    /// Example: /// Example: CHARLIE
    /// Constraints: Minimum length = 0, Maximum length = 7
    def hpcon() -> SiteStatus_Full_hpcon_Enum:
        return SiteStatus_Full_hpcon_Enum(flatbuffers.field_int8(buf_, pos_, 26, 0))
    /// Cyberspace Protection Condition (CPCON).
    /// 1 - VERY HIGH - Critical functions.
    /// 2 - HIGH - Critical and essential functions.
    /// 3 - MEDIUM - Critical, essential, and support functions.
    /// 4 - LOW - All functions.
    /// 5 - VERY LOW - All functions.
    /// Example: /// Example: 4
    /// Constraints: Minimum length = 0, Maximum length = 1
    def cpcon() -> SiteStatus_Full_cpcon_Enum:
        return SiteStatus_Full_cpcon_Enum(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// Time of report, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def reportTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
    /// Example: /// Example: Activation
    /// Constraints: Minimum length = 0, Maximum length = 24
    def timeFunction() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Description of the current weather conditions over a site.
    /// Example: /// Example: Heavy rain
    /// Constraints: Minimum length = 0, Maximum length = 512
    def weatherMessage() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def pes() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// Estimated number of hot missiles of all types remaining in weapons system inventory.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def hotInventory() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// Estimated number of cold missiles of all types remaining in weapons system inventory.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def coldInventory() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
    /// Example: /// Example: Initialization
    /// Constraints: Minimum length = 0, Maximum length = 48
    def samMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// SAM sensor radar surveillance mode (Active, Passive, Off).
    /// Example: /// Example: Active
    /// Constraints: Minimum length = 0, Maximum length = 24
    def radiateMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The primary component degrading the operational capability of the platform or system.
    /// Example: /// Example: opsImpairment
    /// Constraints: Minimum length = 0, Maximum length = 48
    def opsImpairment() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The communications component causing the platform or system to be less than fully operational.
    /// Example: /// Example: commImpairment
    /// Constraints: Minimum length = 0, Maximum length = 24
    def commImpairment() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Crisis Action Team (CAT).
    /// COLD - Not in use.
    /// WARM - Facility prepped/possible skeleton crew.
    /// HOT - Fully active.
    /// Example: /// Example: COLD
    /// Constraints: Minimum length = 0, Maximum length = 4
    def cat() -> SiteStatus_Full_cat_Enum:
        return SiteStatus_Full_cat_Enum(flatbuffers.field_int8(buf_, pos_, 50, 0))
    /// Emergency Operations Center (EOC) status.
    /// COLD - Not in use.
    /// WARM - Facility prepped/possible skeleton crew.
    /// HOT - Fully active.
    /// Example: /// Example: WARM
    /// Constraints: Minimum length = 0, Maximum length = 4
    def eoc() -> SiteStatus_Full_eoc_Enum:
        return SiteStatus_Full_eoc_Enum(flatbuffers.field_int8(buf_, pos_, 52, 0))
    /// Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
    /// Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
    /// Constraints: No constraints specified.
    def link(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def link_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
    /// Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
    /// Constraints: No constraints specified.
    def linkStatus(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def linkStatus_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)
    /// Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
    /// Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
    /// Constraints: No constraints specified.
    def radarSystem(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def radarSystem_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
    /// Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
    /// Constraints: No constraints specified.
    def radarStatus(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def radarStatus_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)
    /// Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
    /// Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
    /// Constraints: No constraints specified.
    def missile(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 62) + i * 4)
    def missile_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 62)
    /// Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
    /// Example: /// Example: [5, 10, 100]
    /// Constraints: No constraints specified.
    def missileInventory(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def missileInventory_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SiteStatus_Full_dataMode_Enum:
        return SiteStatus_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 80, 0))

def GetRootAsSiteStatus_Full(buf:string): return SiteStatus_Full { buf, flatbuffers.indirect(buf, 0) }

struct SiteStatus_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(39)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSite)
        return this
    def add_siteType(siteType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, siteType)
        return this
    def add_mobileAltId(mobileAltId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, mobileAltId)
        return this
    def add_poiid(poiid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, poiid)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, trackId)
        return this
    def add_trackRefL16(trackRefL16:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, trackRefL16)
        return this
    def add_opsCapability(opsCapability:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, opsCapability)
        return this
    def add_instStatus(instStatus:SiteStatus_Full_instStatus_Enum):
        b_.PrependInt8Slot(9, instStatus, 0)
        return this
    def add_fpcon(fpcon:SiteStatus_Full_fpcon_Enum):
        b_.PrependInt8Slot(10, fpcon, 0)
        return this
    def add_hpcon(hpcon:SiteStatus_Full_hpcon_Enum):
        b_.PrependInt8Slot(11, hpcon, 0)
        return this
    def add_cpcon(cpcon:SiteStatus_Full_cpcon_Enum):
        b_.PrependInt8Slot(12, cpcon, 0)
        return this
    def add_reportTime(reportTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, reportTime)
        return this
    def add_timeFunction(timeFunction:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, timeFunction)
        return this
    def add_weatherMessage(weatherMessage:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, weatherMessage)
        return this
    def add_pes(pes:bool):
        b_.PrependBoolSlot(16, pes, 0)
        return this
    def add_hotInventory(hotInventory:int):
        b_.PrependInt32Slot(17, hotInventory, 0)
        return this
    def add_coldInventory(coldInventory:int):
        b_.PrependInt32Slot(18, coldInventory, 0)
        return this
    def add_samMode(samMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, samMode)
        return this
    def add_radiateMode(radiateMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, radiateMode)
        return this
    def add_opsImpairment(opsImpairment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, opsImpairment)
        return this
    def add_commImpairment(commImpairment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, commImpairment)
        return this
    def add_cat(cat:SiteStatus_Full_cat_Enum):
        b_.PrependInt8Slot(23, cat, 0)
        return this
    def add_eoc(eoc:SiteStatus_Full_eoc_Enum):
        b_.PrependInt8Slot(24, eoc, 0)
        return this
    def add_link(link:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, link)
        return this
    def add_linkStatus(linkStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, linkStatus)
        return this
    def add_radarSystem(radarSystem:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, radarSystem)
        return this
    def add_radarStatus(radarStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, radarStatus)
        return this
    def add_missile(missile:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, missile)
        return this
    def add_missileInventory(missileInventory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, missileInventory)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origNetwork)
        return this
    def add_dataMode(dataMode:SiteStatus_Full_dataMode_Enum):
        b_.PrependInt8Slot(38, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def SiteStatus_FullStartLinkVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SiteStatus_FullCreateLinkVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SiteStatus_FullStartLinkStatusVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SiteStatus_FullCreateLinkStatusVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SiteStatus_FullStartRadarSystemVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SiteStatus_FullCreateRadarSystemVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SiteStatus_FullStartRadarStatusVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SiteStatus_FullCreateRadarStatusVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SiteStatus_FullStartMissileVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SiteStatus_FullCreateMissileVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SiteStatus_FullStartMissileInventoryVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SiteStatus_FullCreateMissileInventoryVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

