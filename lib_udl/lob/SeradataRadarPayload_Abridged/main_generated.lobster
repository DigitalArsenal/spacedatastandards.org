// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SeradataRadarPayload_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SeradataRadarPayload_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SeradataRadarPayload_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SeradataRadarPayload_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SeradataRadarPayload_Abridged_dataMode_Enum_EXERCISE = 3

class SeradataRadarPayload_Abridged

/// /// Details for an radar payload from  Seradata.
class SeradataRadarPayload_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATARADARPAYLOAD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: 12345
    /// Constraints: Minimum length = 1, Maximum length = 36
    def spacecraftId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// UUID of the Sensor record.
    /// Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Hosted for company/Organization Id.
    /// Example: /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def hostedForCompanyOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Manufacturer Organization Id.
    /// Example: /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Radar category, e.g. SAR, Surface Search, etc.
    /// Example: /// Example: SAR
    /// Constraints: Minimum length = 0, Maximum length = 20
    def category() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
    /// Example: /// Example: ALT
    /// Constraints: Minimum length = 0, Maximum length = 50
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: X
    /// Constraints: Minimum length = 0, Maximum length = 10
    def frequencyBand() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Frequency in giga hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def frequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Wave length in meters.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def waveLength() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Best resolution in meters.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def bestResolution() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Swath width in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def swathWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Recorder size, e.g. 256.
    /// Example: /// Example: 256
    /// Constraints: Minimum length = 0, Maximum length = 50
    def recorderSize() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Field of view of this radar in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def fieldOfView() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Field of regard of this radar in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def fieldOfRegard() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Point method for this radar, e.g. Spacecraft.
    /// Example: /// Example: Spacecraft
    /// Constraints: Minimum length = 0, Maximum length = 50
    def pointingMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Ground Station info for this payload.
    /// Example: /// Example: groundStations
    /// Constraints: Minimum length = 0, Maximum length = 128
    def groundStations() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Ground Station Locations for this payload.
    /// Example: /// Example: 51,42N-44,35E
    /// Constraints: Minimum length = 0, Maximum length = 64
    def groundStationLocations() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Transmit polarization, e.g. Lin Dual, Lin vert, etc.
    /// Example: /// Example: Lin Dual
    /// Constraints: Minimum length = 0, Maximum length = 50
    def transmitPolarization() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Receive polarization, e.g. Lin Dual, Lin vert, etc.
    /// Example: /// Example: Lin Dual
    /// Constraints: Minimum length = 0, Maximum length = 50
    def receivePolarization() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Duty cycle.
    /// Example: /// Example: dutyCycle
    /// Constraints: Minimum length = 0, Maximum length = 50
    def dutyCycle() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Partner seradata-spacecraft.
    /// Example: /// Example: partnerSpacecraft
    /// Constraints: Minimum length = 0, Maximum length = 36
    def partnerSpacecraft() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Constellation interferometric capability.
    /// Example: /// Example: constellationInterferometricCapability
    /// Constraints: Minimum length = 0, Maximum length = 50
    def constellationInterferometricCapability() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Payload notes.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Radar bandwidth in mega hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def bandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SeradataRadarPayload_Abridged_dataMode_Enum:
        return SeradataRadarPayload_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 66, 0))

def GetRootAsSeradataRadarPayload_Abridged(buf:string): return SeradataRadarPayload_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SeradataRadarPayload_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(32)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_spacecraftId(spacecraftId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, spacecraftId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSensor)
        return this
    def add_hostedForCompanyOrgId(hostedForCompanyOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, hostedForCompanyOrgId)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, manufacturerOrgId)
        return this
    def add_category(category:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, category)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, name)
        return this
    def add_frequencyBand(frequencyBand:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, frequencyBand)
        return this
    def add_frequency(frequency:float):
        b_.PrependFloat64Slot(9, frequency, 0.0)
        return this
    def add_waveLength(waveLength:float):
        b_.PrependFloat64Slot(10, waveLength, 0.0)
        return this
    def add_bestResolution(bestResolution:float):
        b_.PrependFloat64Slot(11, bestResolution, 0.0)
        return this
    def add_swathWidth(swathWidth:float):
        b_.PrependFloat64Slot(12, swathWidth, 0.0)
        return this
    def add_recorderSize(recorderSize:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, recorderSize)
        return this
    def add_fieldOfView(fieldOfView:float):
        b_.PrependFloat64Slot(14, fieldOfView, 0.0)
        return this
    def add_fieldOfRegard(fieldOfRegard:float):
        b_.PrependFloat64Slot(15, fieldOfRegard, 0.0)
        return this
    def add_pointingMethod(pointingMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, pointingMethod)
        return this
    def add_groundStations(groundStations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, groundStations)
        return this
    def add_groundStationLocations(groundStationLocations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, groundStationLocations)
        return this
    def add_transmitPolarization(transmitPolarization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, transmitPolarization)
        return this
    def add_receivePolarization(receivePolarization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, receivePolarization)
        return this
    def add_dutyCycle(dutyCycle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, dutyCycle)
        return this
    def add_partnerSpacecraft(partnerSpacecraft:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, partnerSpacecraft)
        return this
    def add_constellationInterferometricCapability(constellationInterferometricCapability:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, constellationInterferometricCapability)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, notes)
        return this
    def add_bandwidth(bandwidth:float):
        b_.PrependFloat64Slot(25, bandwidth, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, origNetwork)
        return this
    def add_dataMode(dataMode:SeradataRadarPayload_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(31, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

