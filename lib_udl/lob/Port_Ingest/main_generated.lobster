// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Port_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Port_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Port_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Port_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Port_Ingest_dataMode_Enum_EXERCISE = 3

class Port_Ingest

/// /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
class Port_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the Site Entity associated with the Port record.
    /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
    /// Example: /// Example: CAVAN
    /// Constraints: Minimum length = 0, Maximum length = 5
    def locode() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The name of this port.
    /// Example: /// Example: Vancouver
    /// Constraints: Minimum length = 0, Maximum length = 64
    def portName() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The type of harbor for this port. The harbor type refers to how a port is physically positioned.
    /// COASTAL BREAKWATER (CB)
    /// COASTAL NATURAL (CN)
    /// COASTAL TIDE GATE  (CT)
    /// LAKE OR CANAL (LC)
    /// OPEN ROADSTEAD (OR)
    /// RIVER BASIN (RB)
    /// RIVER NATURAL (RN)
    /// RIVER TIDE GATE (RT)
    /// TYPHOON HARBOR  (TH).
    /// Example: /// Example: COASTAL NATURAL
    /// Constraints: Minimum length = 0, Maximum length = 64
    def harborType() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The size of the harbor for this port measured in square kilometers.
    /// Example: /// Example: 160.1
    /// Constraints: No constraints specified.
    def harborSize() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
    /// Example: /// Example: 18.1
    /// Constraints: No constraints specified.
    def maxDraught() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Average time for a vessel at this port in hours.
    /// Example: /// Example: 41.1
    /// Constraints: No constraints specified.
    def avgDuration() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// The tide range of this port in meters.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    def tideRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
    /// Example: /// Example: EXCELLENT
    /// Constraints: Minimum length = 0, Maximum length = 36
    def shelter() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Flag indicating whether a pilot is required at this port.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def pilotReqd() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// The country where this port is located.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 64
    def dataMode() -> Port_Ingest_dataMode_Enum:
        return Port_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 44, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)

def GetRootAsPort_Ingest(buf:string): return Port_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Port_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSite)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, externalId)
        return this
    def add_locode(locode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, locode)
        return this
    def add_portName(portName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, portName)
        return this
    def add_harborType(harborType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, harborType)
        return this
    def add_harborSize(harborSize:float):
        b_.PrependFloat64Slot(7, harborSize, 0.0)
        return this
    def add_maxDraught(maxDraught:float):
        b_.PrependFloat64Slot(8, maxDraught, 0.0)
        return this
    def add_avgDuration(avgDuration:float):
        b_.PrependFloat64Slot(9, avgDuration, 0.0)
        return this
    def add_tideRange(tideRange:float):
        b_.PrependFloat64Slot(10, tideRange, 0.0)
        return this
    def add_shelter(shelter:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, shelter)
        return this
    def add_pilotReqd(pilotReqd:bool):
        b_.PrependBoolSlot(12, pilotReqd, 0)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(13, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(14, lon, 0.0)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, countryCode)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origin)
        return this
    def add_dataMode(dataMode:Port_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(20, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origNetwork)
        return this
    def end():
        return b_.EndObject()

