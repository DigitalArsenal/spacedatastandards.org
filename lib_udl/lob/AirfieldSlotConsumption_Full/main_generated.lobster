// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirfieldSlotConsumption_Full_status_Enum:
    /// No description available.
    AirfieldSlotConsumption_Full_status_Enum_REQUESTED = 0
    /// No description available.
    AirfieldSlotConsumption_Full_status_Enum_APPROVED = 1
    /// No description available.
    AirfieldSlotConsumption_Full_status_Enum_DENIED = 2
    /// No description available.
    AirfieldSlotConsumption_Full_status_Enum_BLOCKED = 3
    /// No description available.
    AirfieldSlotConsumption_Full_status_Enum_OTHER = 4

enum AirfieldSlotConsumption_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirfieldSlotConsumption_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirfieldSlotConsumption_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirfieldSlotConsumption_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirfieldSlotConsumption_Full_dataMode_Enum_EXERCISE = 3

class AirfieldSlotConsumption_Full

/// /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
class AirfieldSlotConsumption_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the airfield slot for which this slot consumption record is referencing.
    /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idAirfieldSlot() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
    /// Example: /// Example: APPROVED
    /// Constraints: Minimum length = 0, Maximum length = 9
    def status() -> AirfieldSlotConsumption_Full_status_Enum:
        return AirfieldSlotConsumption_Full_status_Enum(flatbuffers.field_int8(buf_, pos_, 10, 0))
    /// Flag indicating if the slot is occupied.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def occupied() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 12, 0))
    /// Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
    /// Example: /// Example: APRON1-230401001
    /// Constraints: Minimum length = 0, Maximum length = 64
    def consumer() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The aircraft Model Design Series designation of the aircraft occupying this slot.
    /// Example: /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    def occAircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The tail number of the aircraft occupying this slot.
    /// Example: /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    def occTailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Array of call signs of the aircraft using this slot.
    /// Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
    /// Constraints: No constraints specified.
    def callSigns(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def callSigns_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 36
    def missionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Number of aircraft using this slot for this time.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numAircraft() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-01-01T01:01:03.123Z
    /// Constraints: No constraints specified.
    def occStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The aircraft Model Design Series designation of the aircraft this slot is reserved for.
    /// Example: /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    def resAircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The tail number of the aircraft this slot is reserved for.
    /// Example: /// Example: N702JG
    /// Constraints: Minimum length = 0, Maximum length = 16
    def resTailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
    /// Example: /// Example: M
    /// Constraints: Minimum length = 0, Maximum length = 2
    def resType() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The reason the slot reservation was made.
    /// Example: /// Example: Maintenance needed
    /// Constraints: Minimum length = 0, Maximum length = 256
    def resReason() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 36
    def resMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The start of the slot window, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The end of the slot window, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def targetTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Unique identifier of the sortie arriving at the slot start time.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idArrSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Unique identifier of the sortie departing at the slot end time.
    /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idDepSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Alternate identifier of the sortie arriving at the slot start time provided by the source.
    /// Example: /// Example: ALT-SORTIE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altArrSortieId() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Alternate identifier of the sortie departing at the slot end time provided by the source.
    /// Example: /// Example: ALT-SORTIE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altDepSortieId() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Comments from the requester.
    /// Example: /// Example: Sorry for the late notice.
    /// Constraints: Minimum length = 0, Maximum length = 128
    def reqComment() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Comments from the approver.
    /// Example: /// Example: The request was denied due to inoperable fuel pumps.
    /// Constraints: Minimum length = 0, Maximum length = 128
    def appComment() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Short name of the organization requesting use of this slot.
    /// Example: /// Example: TACC
    /// Constraints: Minimum length = 0, Maximum length = 32
    def reqOrg() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
    /// Example: /// Example: CB
    /// Constraints: Minimum length = 0, Maximum length = 8
    def reqInitials() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Short name of the organization approving the use of this slot.
    /// Example: /// Example: KCHS/BOPS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def appOrg() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
    /// Example: /// Example: CB
    /// Constraints: Minimum length = 0, Maximum length = 8
    def appInitials() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirfieldSlotConsumption_Full_dataMode_Enum:
        return AirfieldSlotConsumption_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 80, 0))

def GetRootAsAirfieldSlotConsumption_Full(buf:string): return AirfieldSlotConsumption_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirfieldSlotConsumption_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(39)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idAirfieldSlot(idAirfieldSlot:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idAirfieldSlot)
        return this
    def add_status(status:AirfieldSlotConsumption_Full_status_Enum):
        b_.PrependInt8Slot(3, status, 0)
        return this
    def add_occupied(occupied:bool):
        b_.PrependBoolSlot(4, occupied, 0)
        return this
    def add_consumer(consumer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, consumer)
        return this
    def add_occAircraftMDS(occAircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, occAircraftMDS)
        return this
    def add_occTailNumber(occTailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, occTailNumber)
        return this
    def add_callSigns(callSigns:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, callSigns)
        return this
    def add_missionId(missionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, missionId)
        return this
    def add_numAircraft(numAircraft:int):
        b_.PrependInt32Slot(10, numAircraft, 0)
        return this
    def add_occStartTime(occStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, occStartTime)
        return this
    def add_resAircraftMDS(resAircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, resAircraftMDS)
        return this
    def add_resTailNumber(resTailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, resTailNumber)
        return this
    def add_resType(resType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, resType)
        return this
    def add_resReason(resReason:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, resReason)
        return this
    def add_resMissionId(resMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, resMissionId)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, endTime)
        return this
    def add_targetTime(targetTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, targetTime)
        return this
    def add_idArrSortie(idArrSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, idArrSortie)
        return this
    def add_idDepSortie(idDepSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, idDepSortie)
        return this
    def add_altArrSortieId(altArrSortieId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, altArrSortieId)
        return this
    def add_altDepSortieId(altDepSortieId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, altDepSortieId)
        return this
    def add_reqComment(reqComment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, reqComment)
        return this
    def add_appComment(appComment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, appComment)
        return this
    def add_reqOrg(reqOrg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, reqOrg)
        return this
    def add_reqInitials(reqInitials:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, reqInitials)
        return this
    def add_appOrg(appOrg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, appOrg)
        return this
    def add_appInitials(appInitials:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, appInitials)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origNetwork)
        return this
    def add_dataMode(dataMode:AirfieldSlotConsumption_Full_dataMode_Enum):
        b_.PrependInt8Slot(38, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def AirfieldSlotConsumption_FullStartCallSignsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirfieldSlotConsumption_FullCreateCallSignsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

