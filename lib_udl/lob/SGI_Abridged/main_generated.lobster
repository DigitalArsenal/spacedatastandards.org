// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SGI_Abridged_state_Enum:
    /// No description available.
    SGI_Abridged_state_Enum_I = 0
    /// No description available.
    SGI_Abridged_state_Enum_N = 1
    /// No description available.
    SGI_Abridged_state_Enum_P = 2

enum SGI_Abridged_precedence_Enum:
    /// No description available.
    SGI_Abridged_precedence_Enum_O = 0
    /// No description available.
    SGI_Abridged_precedence_Enum_P = 1
    /// No description available.
    SGI_Abridged_precedence_Enum_R = 2
    /// No description available.
    SGI_Abridged_precedence_Enum_Y = 3
    /// No description available.
    SGI_Abridged_precedence_Enum_Z = 4

enum SGI_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SGI_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SGI_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SGI_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SGI_Abridged_dataMode_Enum_EXERCISE = 3

class SGI_Abridged

/// /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
class SGI_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SGI-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def effectiveDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def sgiDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
    /// Example: /// Example: JBH09
    /// Constraints: Minimum length = 0, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    def state() -> SGI_Abridged_state_Enum:
        return SGI_Abridged_state_Enum(flatbuffers.field_int8(buf_, pos_, 14, 0))
    /// The name/location of the station that collected the geomagnetic data for this record.
    /// Example: /// Example: Boulder
    /// Constraints: Minimum length = 0, Maximum length = 24
    def stationName() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The transmitted DCA mode of the record (1-3).
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def mode() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 1
    def precedence() -> SGI_Abridged_precedence_Enum:
        return SGI_Abridged_precedence_Enum(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
    /// Example: /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    def coeffDegree(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 26) + i * 4)
    def coeffDegree_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 26)
    /// Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
    /// Example: /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    def coeffOrder(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def coeffOrder_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    def ctce(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def ctce_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    def stce(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def stce_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    def ctci(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def ctci_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    /// Example: /// Example: [1.23, 342.3, 1.32]
    /// Constraints: No constraints specified.
    def stci(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def stci_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def e10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def e54() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def s10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def s54() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def m10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def m54() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def y10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def y54() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def f10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def f54() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def f81() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def ap() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def apDuration() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def kIndex() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)
    /// The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
    /// Example: /// Example: 4.66
    /// Constraints: No constraints specified.
    def kp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def kpDuration() -> int:
        return flatbuffers.field_int32(buf_, pos_, 68, 0)
    /// The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
    /// Example: /// Example: 25
    /// Constraints: No constraints specified.
    def gamma() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// Disturbance Storm Time geomagnetic index in nT.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def dst() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// delta exospheric temperature correction in units of K.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def dtc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def rbRegionCode() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
    /// Example: /// Example: 1.02947164506
    /// Constraints: No constraints specified.
    def rbIndex() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
    /// Example: /// Example: 2.12679e-07
    /// Constraints: No constraints specified.
    def normFactor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
    /// Example: /// Example: 24
    /// Constraints: No constraints specified.
    def rbDuration() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    def analyzerAttenuation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: rawFileURI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SGI_Abridged_dataMode_Enum:
        return SGI_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 96, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)

def GetRootAsSGI_Abridged(buf:string): return SGI_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SGI_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(49)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_effectiveDate(effectiveDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, effectiveDate)
        return this
    def add_sgiDate(sgiDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, sgiDate)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, type)
        return this
    def add_state(state:SGI_Abridged_state_Enum):
        b_.PrependInt8Slot(5, state, 0)
        return this
    def add_stationName(stationName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, stationName)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origSensorId)
        return this
    def add_mode(mode:int):
        b_.PrependInt32Slot(9, mode, 0)
        return this
    def add_precedence(precedence:SGI_Abridged_precedence_Enum):
        b_.PrependInt8Slot(10, precedence, 0)
        return this
    def add_coeffDegree(coeffDegree:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, coeffDegree)
        return this
    def add_coeffOrder(coeffOrder:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, coeffOrder)
        return this
    def add_ctce(ctce:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, ctce)
        return this
    def add_stce(stce:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, stce)
        return this
    def add_ctci(ctci:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, ctci)
        return this
    def add_stci(stci:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, stci)
        return this
    def add_e10(e10:float):
        b_.PrependFloat64Slot(17, e10, 0.0)
        return this
    def add_e54(e54:float):
        b_.PrependFloat64Slot(18, e54, 0.0)
        return this
    def add_s10(s10:float):
        b_.PrependFloat64Slot(19, s10, 0.0)
        return this
    def add_s54(s54:float):
        b_.PrependFloat64Slot(20, s54, 0.0)
        return this
    def add_m10(m10:float):
        b_.PrependFloat64Slot(21, m10, 0.0)
        return this
    def add_m54(m54:float):
        b_.PrependFloat64Slot(22, m54, 0.0)
        return this
    def add_y10(y10:float):
        b_.PrependFloat64Slot(23, y10, 0.0)
        return this
    def add_y54(y54:float):
        b_.PrependFloat64Slot(24, y54, 0.0)
        return this
    def add_f10(f10:float):
        b_.PrependFloat64Slot(25, f10, 0.0)
        return this
    def add_f54(f54:float):
        b_.PrependFloat64Slot(26, f54, 0.0)
        return this
    def add_f81(f81:float):
        b_.PrependFloat64Slot(27, f81, 0.0)
        return this
    def add_ap(ap:float):
        b_.PrependFloat64Slot(28, ap, 0.0)
        return this
    def add_apDuration(apDuration:int):
        b_.PrependInt32Slot(29, apDuration, 0)
        return this
    def add_kIndex(kIndex:int):
        b_.PrependInt32Slot(30, kIndex, 0)
        return this
    def add_kp(kp:float):
        b_.PrependFloat64Slot(31, kp, 0.0)
        return this
    def add_kpDuration(kpDuration:int):
        b_.PrependInt32Slot(32, kpDuration, 0)
        return this
    def add_gamma(gamma:int):
        b_.PrependInt32Slot(33, gamma, 0)
        return this
    def add_dst(dst:float):
        b_.PrependFloat64Slot(34, dst, 0.0)
        return this
    def add_dtc(dtc:float):
        b_.PrependFloat64Slot(35, dtc, 0.0)
        return this
    def add_rbRegionCode(rbRegionCode:int):
        b_.PrependInt32Slot(36, rbRegionCode, 0)
        return this
    def add_rbIndex(rbIndex:float):
        b_.PrependFloat64Slot(37, rbIndex, 0.0)
        return this
    def add_normFactor(normFactor:float):
        b_.PrependFloat64Slot(38, normFactor, 0.0)
        return this
    def add_rbDuration(rbDuration:int):
        b_.PrependInt32Slot(39, rbDuration, 0)
        return this
    def add_analyzerAttenuation(analyzerAttenuation:float):
        b_.PrependFloat64Slot(40, analyzerAttenuation, 0.0)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, rawFileURI)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, transactionId)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, origNetwork)
        return this
    def add_dataMode(dataMode:SGI_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(46, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, createdBy)
        return this
    def end():
        return b_.EndObject()

def SGI_AbridgedStartCoeffDegreeVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SGI_AbridgedCreateCoeffDegreeVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SGI_AbridgedStartCoeffOrderVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SGI_AbridgedCreateCoeffOrderVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SGI_AbridgedStartCtceVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SGI_AbridgedCreateCtceVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SGI_AbridgedStartStceVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SGI_AbridgedCreateStceVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SGI_AbridgedStartCtciVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SGI_AbridgedCreateCtciVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SGI_AbridgedStartStciVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SGI_AbridgedCreateStciVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

