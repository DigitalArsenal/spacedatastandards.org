// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationDensityProfileQuasiParabolic_Full

/// /// Coefficients to describe profile shape as quasi-parabolic segments.
class IonoObservationDensityProfileQuasiParabolic_Full : flatbuffers.handle
    /// General description of the quasi-parabolic computation algorithm.
    /// Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
    /// Constraints: No constraints specified.
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Value of the Earth's radius, in kilometers, used for computations.
    /// Example: /// Example: 6370.1
    /// Constraints: No constraints specified.
    def earthRadius() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def quasiParabolicSegments(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def quasiParabolicSegments_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)

def GetRootAsIonoObservationDensityProfileQuasiParabolic_Full(buf:string): return IonoObservationDensityProfileQuasiParabolic_Full { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationDensityProfileQuasiParabolic_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(3)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, description)
        return this
    def add_earthRadius(earthRadius:float):
        b_.PrependFloat64Slot(1, earthRadius, 0.0)
        return this
    def add_quasiParabolicSegments(quasiParabolicSegments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, quasiParabolicSegments)
        return this
    def end():
        return b_.EndObject()

def IonoObservationDensityProfileQuasiParabolic_FullStartQuasiParabolicSegmentsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationDensityProfileQuasiParabolic_FullCreateQuasiParabolicSegmentsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

