// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum TrackSensor_Abridged_sensorFOVType_Enum:
    /// No description available.
    TrackSensor_Abridged_sensorFOVType_Enum_BUTTERFLY = 0
    /// No description available.
    TrackSensor_Abridged_sensorFOVType_Enum_CONE_ANGULAR = 1
    /// No description available.
    TrackSensor_Abridged_sensorFOVType_Enum_CONE_DISTANCE = 2
    /// No description available.
    TrackSensor_Abridged_sensorFOVType_Enum_HORIZON_TO_HORIZON = 3
    /// No description available.
    TrackSensor_Abridged_sensorFOVType_Enum_UNKNOWN = 4

class TrackSensor_Abridged

/// /// Schema for Track Sensor data.
class TrackSensor_Abridged : flatbuffers.handle
    /// The track object range from the observing sensor, in kilometers.
    /// Example: /// Example: 4023.95
    /// Constraints: No constraints specified.
    def range() -> float:
        return flatbuffers.field_float64(buf_, pos_, 4, 0.0)
    /// The observing sensor azimuth angle, in degrees and topocentric frame.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    def az() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    def sensorNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Unique name of this sensor.
    /// Example: /// Example: SENSOR_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    def sensorName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The mission number which produced this track observation.
    /// Example: /// Example: Example Mission
    /// Constraints: Minimum length = 0, Maximum length = 128
    def missionNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Minimum range measurement capability of the sensor, in kilometers.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def minRangeLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
    /// Example: /// Example: UNKNOWN
    /// Constraints: Minimum length = 0, Maximum length = 24
    def sensorFOVType() -> TrackSensor_Abridged_sensorFOVType_Enum:
        return TrackSensor_Abridged_sensorFOVType_Enum(flatbuffers.field_int8(buf_, pos_, 16, 0))

def GetRootAsTrackSensor_Abridged(buf:string): return TrackSensor_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct TrackSensor_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(7)
        return this
    def add_range(range:float):
        b_.PrependFloat64Slot(0, range, 0.0)
        return this
    def add_az(az:float):
        b_.PrependFloat64Slot(1, az, 0.0)
        return this
    def add_sensorNumber(sensorNumber:int):
        b_.PrependInt32Slot(2, sensorNumber, 0)
        return this
    def add_sensorName(sensorName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, sensorName)
        return this
    def add_missionNumber(missionNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, missionNumber)
        return this
    def add_minRangeLimit(minRangeLimit:float):
        b_.PrependFloat64Slot(5, minRangeLimit, 0.0)
        return this
    def add_sensorFOVType(sensorFOVType:TrackSensor_Abridged_sensorFOVType_Enum):
        b_.PrependInt8Slot(6, sensorFOVType, 0)
        return this
    def end():
        return b_.EndObject()

