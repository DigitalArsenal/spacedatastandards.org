// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum ISRCollectionTaskings_Abridged_type_Enum:
    /// No description available.
    ISRCollectionTaskings_Abridged_type_Enum_DELIBERATE = 0
    /// No description available.
    ISRCollectionTaskings_Abridged_type_Enum_DYNAMIC = 1
    /// No description available.
    ISRCollectionTaskings_Abridged_type_Enum_TRAINING = 2
    /// No description available.
    ISRCollectionTaskings_Abridged_type_Enum_TRANSIT = 3

enum ISRCollectionTaskings_Abridged_collectionType_Enum:
    /// No description available.
    ISRCollectionTaskings_Abridged_collectionType_Enum_SIMULTANEOUS = 0
    /// No description available.
    ISRCollectionTaskings_Abridged_collectionType_Enum_SEQUENTIAL = 1
    /// No description available.
    ISRCollectionTaskings_Abridged_collectionType_Enum_OPERATIONALLY = 2
    /// No description available.
    ISRCollectionTaskings_Abridged_collectionType_Enum_DRIVEN = 3
    /// No description available.
    ISRCollectionTaskings_Abridged_collectionType_Enum_PRIORITY = 4
    /// No description available.
    ISRCollectionTaskings_Abridged_collectionType_Enum_ORDER = 5

class ISRCollectionTaskings_Abridged

/// /// Individual taskings to complete the mission.
class ISRCollectionTaskings_Abridged : flatbuffers.handle
    /// Tasking Unique Identifier.
    /// Example: /// Example: ISRCOLLECTIONTASKINGS-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Type of tasking.
    /// Example: /// Example: Deliberate
    /// Constraints: Minimum length = 1, Maximum length = 16
    def type() -> ISRCollectionTaskings_Abridged_type_Enum:
        return ISRCollectionTaskings_Abridged_type_Enum(flatbuffers.field_int8(buf_, pos_, 6, 0))
    /// Type of collection tasked.
    /// Example: /// Example: Simultaneous
    /// Constraints: Minimum length = 1, Maximum length = 16
    def collectionType() -> ISRCollectionTaskings_Abridged_collectionType_Enum:
        return ISRCollectionTaskings_Abridged_collectionType_Enum(flatbuffers.field_int8(buf_, pos_, 8, 0))
    /// Human readable definition of this taskings Area Of Responsibility.
    /// Example: /// Example: Kandahar
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingAOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Eight line.
    /// Example: /// Example: No example provided.
    /// Constraints: Minimum length = 0, Maximum length = 256
    def eightLine() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Primary type of intelligence to be collected during the mission.
    /// Example: /// Example: Sig
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingPrimaryIntelDiscipline() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Sub category of primary intelligence to be collected.
    /// Example: /// Example: FMV
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingPrimarySubCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Type of tasking intelligence to be collected second.
    /// Example: /// Example: Intelligence_2
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingSecondaryIntelDiscipline() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Mission sub category for secondary intelligence discipline to be collected.
    /// Example: /// Example: Convoy
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingSecondarySubCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// What is the primary objective(Role) of this task.
    /// Example: /// Example: Provide Targeting of Lead Vehicle
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingRole() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Tasking operation name.
    /// Example: /// Example: OP-HONEY-BADGER
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingOperation() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Tasking Priority (1-n).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def taskingPriority() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Military Base to transmit the dissemination of this data.
    /// Example: /// Example: ENVOYS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingSupportedUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Tasking emphasis.
    /// Example: /// Example: EMPHASIS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingEmphasis() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Time of retasking, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    def taskingRetaskTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def taskingStartPointLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def taskingStartPointLong() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Tasking geographical collection area.
    /// Example: /// Example: AREA
    /// Constraints: No constraints specified.
    def taskingCollectionArea() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Joint Operations Area.
    /// Example: /// Example: AREA
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingJoa() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
    /// Example: /// Example: MATRIX
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingSyncMatrixBin() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
    /// Example: /// Example: CODE
    /// Constraints: Minimum length = 0, Maximum length = 4
    def taskingCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Region of the tasking.
    /// Example: /// Example: REGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingRegion() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Subregion of the tasking.
    /// Example: /// Example: SUBREGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    def taskingSubRegion() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Value of the Sensitive Reconnaissance Operations Track.
    /// Example: /// Example: SRO
    /// Constraints: Minimum length = 0, Maximum length = 32
    def sroTrack() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Free text field for the user to specify special instructions needed for this collection.
    /// Example: /// Example: TEXT
    /// Constraints: Minimum length = 0, Maximum length = 256
    def specialComGuidance() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def collectionPeriods() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Tasking desired collection requirements.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def taskingCollectionRequirements(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def taskingCollectionRequirements_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)

def GetRootAsISRCollectionTaskings_Abridged(buf:string): return ISRCollectionTaskings_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct ISRCollectionTaskings_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(27)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_type(type:ISRCollectionTaskings_Abridged_type_Enum):
        b_.PrependInt8Slot(1, type, 0)
        return this
    def add_collectionType(collectionType:ISRCollectionTaskings_Abridged_collectionType_Enum):
        b_.PrependInt8Slot(2, collectionType, 0)
        return this
    def add_taskingAOR(taskingAOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, taskingAOR)
        return this
    def add_eightLine(eightLine:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, eightLine)
        return this
    def add_taskingPrimaryIntelDiscipline(taskingPrimaryIntelDiscipline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, taskingPrimaryIntelDiscipline)
        return this
    def add_taskingPrimarySubCategory(taskingPrimarySubCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, taskingPrimarySubCategory)
        return this
    def add_taskingSecondaryIntelDiscipline(taskingSecondaryIntelDiscipline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, taskingSecondaryIntelDiscipline)
        return this
    def add_taskingSecondarySubCategory(taskingSecondarySubCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, taskingSecondarySubCategory)
        return this
    def add_taskingRole(taskingRole:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, taskingRole)
        return this
    def add_taskingOperation(taskingOperation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, taskingOperation)
        return this
    def add_taskingPriority(taskingPriority:float):
        b_.PrependFloat64Slot(11, taskingPriority, 0.0)
        return this
    def add_taskingSupportedUnit(taskingSupportedUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, taskingSupportedUnit)
        return this
    def add_taskingEmphasis(taskingEmphasis:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, taskingEmphasis)
        return this
    def add_taskingRetaskTime(taskingRetaskTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, taskingRetaskTime)
        return this
    def add_taskingStartPointLat(taskingStartPointLat:float):
        b_.PrependFloat64Slot(15, taskingStartPointLat, 0.0)
        return this
    def add_taskingStartPointLong(taskingStartPointLong:float):
        b_.PrependFloat64Slot(16, taskingStartPointLong, 0.0)
        return this
    def add_taskingCollectionArea(taskingCollectionArea:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, taskingCollectionArea)
        return this
    def add_taskingJoa(taskingJoa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, taskingJoa)
        return this
    def add_taskingSyncMatrixBin(taskingSyncMatrixBin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, taskingSyncMatrixBin)
        return this
    def add_taskingCountry(taskingCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, taskingCountry)
        return this
    def add_taskingRegion(taskingRegion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, taskingRegion)
        return this
    def add_taskingSubRegion(taskingSubRegion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, taskingSubRegion)
        return this
    def add_sroTrack(sroTrack:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, sroTrack)
        return this
    def add_specialComGuidance(specialComGuidance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, specialComGuidance)
        return this
    def add_collectionPeriods(collectionPeriods:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, collectionPeriods)
        return this
    def add_taskingCollectionRequirements(taskingCollectionRequirements:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, taskingCollectionRequirements)
        return this
    def end():
        return b_.EndObject()

def ISRCollectionTaskings_AbridgedStartTaskingCollectionRequirementsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollectionTaskings_AbridgedCreateTaskingCollectionRequirementsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

