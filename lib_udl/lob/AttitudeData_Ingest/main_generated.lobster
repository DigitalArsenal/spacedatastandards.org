// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AttitudeData_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AttitudeData_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AttitudeData_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AttitudeData_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AttitudeData_Ingest_dataMode_Enum_EXERCISE = 3

class AttitudeData_Ingest

/// /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
class AttitudeData_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ATTITUDEDATA-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the parent AttitudeSet associated with this record.
    /// Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
    /// Constraints: Minimum length = 1, Maximum length = 36
    def asId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the on-orbit satellite to which this attitude record applies.
    /// Example: /// Example: 41947
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Satellite/catalog number of the on-orbit object to which this attitude record applies.
    /// Example: /// Example: 41947
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: D6593
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2022-03-07T14:51:39.653043Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Label specifying type of rotational motion of target.
    /// Example: /// Example: PROSOL_MOTION
    /// Constraints: Minimum length = 0, Maximum length = 36
    def motionType() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Quaternion vector component 1.
    /// Example: /// Example: 0.0312
    /// Constraints: No constraints specified.
    def q1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Quaternion vector component 2.
    /// Example: /// Example: 0.7854
    /// Constraints: No constraints specified.
    def q2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Quaternion vector component 3.
    /// Example: /// Example: 0.3916
    /// Constraints: No constraints specified.
    def q3() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Quaternion scalar component.
    /// Example: /// Example: 0.4783
    /// Constraints: No constraints specified.
    def qc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Derivative of quaternion vector component 1.
    /// Example: /// Example: 0.0043
    /// Constraints: No constraints specified.
    def q1Dot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Derivative of quaternion vector component 2.
    /// Example: /// Example: 0.06
    /// Constraints: No constraints specified.
    def q2Dot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Derivative of quaternion vector component 3.
    /// Example: /// Example: 0.499
    /// Constraints: No constraints specified.
    def q3Dot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Derivative of quaternion scalar component.
    /// Example: /// Example: 0.011
    /// Constraints: No constraints specified.
    def qcDot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
    /// Example: /// Example: [139.753]
    /// Constraints: No constraints specified.
    def xAngle(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def xAngle_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
    /// Example: /// Example: [25.066]
    /// Constraints: No constraints specified.
    def yAngle(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def yAngle_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
    /// Example: /// Example: [-53.368]
    /// Constraints: No constraints specified.
    def zAngle(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def zAngle_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
    /// Example: /// Example: [0.105]
    /// Constraints: No constraints specified.
    def xRate(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def xRate_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
    /// Example: /// Example: [0.032]
    /// Constraints: No constraints specified.
    def yRate(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def yRate_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
    /// Example: /// Example: [0.022]
    /// Constraints: No constraints specified.
    def zRate(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def zRate_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// Precession axis right ascension (ECI J2000 frame) in degrees.
    /// Example: /// Example: -173.75
    /// Constraints: No constraints specified.
    def ra() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Precession axis declination (ECI J2000 frame) in degrees.
    /// Example: /// Example: 0.799
    /// Constraints: No constraints specified.
    def declination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Coning angle in degrees.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def coningAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Precession period in seconds.
    /// Example: /// Example: 36.1
    /// Constraints: No constraints specified.
    def precPeriod() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Spin period in seconds.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def spinPeriod() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-07-05T12:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AttitudeData_Ingest_dataMode_Enum:
        return AttitudeData_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 66, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)

def GetRootAsAttitudeData_Ingest(buf:string): return AttitudeData_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AttitudeData_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(33)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_asId(asId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, asId)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(4, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, origObjectId)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, ts)
        return this
    def add_motionType(motionType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, motionType)
        return this
    def add_q1(q1:float):
        b_.PrependFloat64Slot(8, q1, 0.0)
        return this
    def add_q2(q2:float):
        b_.PrependFloat64Slot(9, q2, 0.0)
        return this
    def add_q3(q3:float):
        b_.PrependFloat64Slot(10, q3, 0.0)
        return this
    def add_qc(qc:float):
        b_.PrependFloat64Slot(11, qc, 0.0)
        return this
    def add_q1Dot(q1Dot:float):
        b_.PrependFloat64Slot(12, q1Dot, 0.0)
        return this
    def add_q2Dot(q2Dot:float):
        b_.PrependFloat64Slot(13, q2Dot, 0.0)
        return this
    def add_q3Dot(q3Dot:float):
        b_.PrependFloat64Slot(14, q3Dot, 0.0)
        return this
    def add_qcDot(qcDot:float):
        b_.PrependFloat64Slot(15, qcDot, 0.0)
        return this
    def add_xAngle(xAngle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, xAngle)
        return this
    def add_yAngle(yAngle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, yAngle)
        return this
    def add_zAngle(zAngle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, zAngle)
        return this
    def add_xRate(xRate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, xRate)
        return this
    def add_yRate(yRate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, yRate)
        return this
    def add_zRate(zRate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, zRate)
        return this
    def add_ra(ra:float):
        b_.PrependFloat64Slot(22, ra, 0.0)
        return this
    def add_declination(declination:float):
        b_.PrependFloat64Slot(23, declination, 0.0)
        return this
    def add_coningAngle(coningAngle:float):
        b_.PrependFloat64Slot(24, coningAngle, 0.0)
        return this
    def add_precPeriod(precPeriod:float):
        b_.PrependFloat64Slot(25, precPeriod, 0.0)
        return this
    def add_spinPeriod(spinPeriod:float):
        b_.PrependFloat64Slot(26, spinPeriod, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, origin)
        return this
    def add_dataMode(dataMode:AttitudeData_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(31, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origNetwork)
        return this
    def end():
        return b_.EndObject()

def AttitudeData_IngestStartXAngleVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeData_IngestCreateXAngleVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AttitudeData_IngestStartYAngleVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeData_IngestCreateYAngleVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AttitudeData_IngestStartZAngleVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeData_IngestCreateZAngleVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AttitudeData_IngestStartXRateVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeData_IngestCreateXRateVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AttitudeData_IngestStartYRateVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeData_IngestCreateYRateVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AttitudeData_IngestStartZRateVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeData_IngestCreateZRateVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

