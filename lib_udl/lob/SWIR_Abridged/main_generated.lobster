// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SWIR_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SWIR_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SWIR_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SWIR_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SWIR_Abridged_dataMode_Enum_EXERCISE = 3

class SWIR_Abridged

/// /// Data representing observed short wave infrared (SWIR) measurements.
class SWIR_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SWIR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the target on-orbit object.
    /// Example: /// Example: 45234
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Data timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def solarPhaseAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 70.55208
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 81.18191
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Location/name of the observing sensor.
    /// Example: /// Example: AeroTel
    /// Constraints: Minimum length = 0, Maximum length = 64
    def locationName() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// User comments concerning sensor or data limitations.
    /// Example: /// Example: Example Comments
    /// Constraints: Minimum length = 0, Maximum length = 64
    def badWave() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Original object ID or Catalog Number provided by source.
    /// Example: /// Example: WildBlue-1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 25544
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SWIR_Abridged_dataMode_Enum:
        return SWIR_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)

def GetRootAsSWIR_Abridged(buf:string): return SWIR_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SWIR_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(17)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, ts)
        return this
    def add_solarPhaseAngle(solarPhaseAngle:float):
        b_.PrependFloat64Slot(4, solarPhaseAngle, 0.0)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(5, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(6, lon, 0.0)
        return this
    def add_locationName(locationName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, locationName)
        return this
    def add_badWave(badWave:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, badWave)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, origObjectId)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, origin)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(12, satNo, 0)
        return this
    def add_dataMode(dataMode:SWIR_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(13, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, origNetwork)
        return this
    def end():
        return b_.EndObject()

