// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirTaskingOrder_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirTaskingOrder_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirTaskingOrder_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirTaskingOrder_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirTaskingOrder_Full_dataMode_Enum_EXERCISE = 3

class AirTaskingOrder_Full

/// /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
class AirTaskingOrder_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
    /// Example: /// Example: DESERT WIND
    /// Constraints: Minimum length = 1, Maximum length = 64
    def opExerName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The identifier of the originator of the message.
    /// Example: /// Example: USCENTCOM
    /// Constraints: Minimum length = 0, Maximum length = 36
    def msgOriginator() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The unique message identifier sequentially assigned by the originator.
    /// Example: /// Example: ATO A
    /// Constraints: Minimum length = 0, Maximum length = 16
    def msgSN() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The month in which the message originated.
    /// Example: /// Example: OCT
    /// Constraints: Minimum length = 0, Maximum length = 16
    def msgMonth() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The qualifier which caveats the message status.
    /// Example: /// Example: CHG
    /// Constraints: Minimum length = 0, Maximum length = 8
    def msgQualifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The indicator specifying an affirmative or a negatice condition for this message.
    /// Example: /// Example: YES
    /// Constraints: Minimum length = 0, Maximum length = 8
    def ackReqInd() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
    /// Example: /// Example: INST:45TS
    /// Constraints: Minimum length = 0, Maximum length = 36
    def ackUnitInstructions() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def beginTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-10-27T12:00:00.123Z
    /// Constraints: No constraints specified.
    def endTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def genText(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def genText_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def acMsnTasking(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def acMsnTasking_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// A collection that specifies the naval flight operations for this ATO.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def navalFltOps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def navalFltOps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirTaskingOrder_Full_dataMode_Enum:
        return AirTaskingOrder_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 46, 0))

def GetRootAsAirTaskingOrder_Full(buf:string): return AirTaskingOrder_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirTaskingOrder_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, rawFileURI)
        return this
    def add_opExerName(opExerName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, opExerName)
        return this
    def add_msgOriginator(msgOriginator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, msgOriginator)
        return this
    def add_msgSN(msgSN:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, msgSN)
        return this
    def add_msgMonth(msgMonth:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, msgMonth)
        return this
    def add_msgQualifier(msgQualifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, msgQualifier)
        return this
    def add_ackReqInd(ackReqInd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, ackReqInd)
        return this
    def add_ackUnitInstructions(ackUnitInstructions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, ackUnitInstructions)
        return this
    def add_beginTs(beginTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, beginTs)
        return this
    def add_endTs(endTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, endTs)
        return this
    def add_genText(genText:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, genText)
        return this
    def add_acMsnTasking(acMsnTasking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, acMsnTasking)
        return this
    def add_navalFltOps(navalFltOps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, navalFltOps)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, source)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, sourceDL)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origNetwork)
        return this
    def add_dataMode(dataMode:AirTaskingOrder_Full_dataMode_Enum):
        b_.PrependInt8Slot(21, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def AirTaskingOrder_FullStartGenTextVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTaskingOrder_FullCreateGenTextVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirTaskingOrder_FullStartAcMsnTaskingVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTaskingOrder_FullCreateAcMsnTaskingVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirTaskingOrder_FullStartNavalFltOpsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTaskingOrder_FullCreateNavalFltOpsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

