// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DataLinkVoiceCoord_Ingest

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
class DataLinkVoiceCoord_Ingest : flatbuffers.handle
    /// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
    /// Example: /// Example: VPN
    /// Constraints: Minimum length = 0, Maximum length = 5
    def voiceNetDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
    /// Example: /// Example: ST300A
    /// Constraints: Minimum length = 0, Maximum length = 8
    def freqDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 1
    def commPri() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Array of telephone numbers or contact frequencies used for interface control for this data link message.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    def teleFreqNums(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def teleFreqNums_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)

def GetRootAsDataLinkVoiceCoord_Ingest(buf:string): return DataLinkVoiceCoord_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct DataLinkVoiceCoord_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_voiceNetDes(voiceNetDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, voiceNetDes)
        return this
    def add_freqDes(freqDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, freqDes)
        return this
    def add_commPri(commPri:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, commPri)
        return this
    def add_teleFreqNums(teleFreqNums:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, teleFreqNums)
        return this
    def end():
        return b_.EndObject()

def DataLinkVoiceCoord_IngestStartTeleFreqNumsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLinkVoiceCoord_IngestCreateTeleFreqNumsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

