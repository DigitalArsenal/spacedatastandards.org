// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EvacVitalSignData_Abridged

/// /// Information obtained for vital signs.
class EvacVitalSignData_Abridged : flatbuffers.handle
    /// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
    /// Example: /// Example: HEART RATE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def vitalSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
    /// Example: /// Example: 120
    /// Constraints: No constraints specified.
    def vitalSign1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
    /// Example: /// Example: 80
    /// Constraints: No constraints specified.
    def vitalSign2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Medical confidence factor.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def medConfFactor() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def time() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)

def GetRootAsEvacVitalSignData_Abridged(buf:string): return EvacVitalSignData_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct EvacVitalSignData_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_vitalSign(vitalSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, vitalSign)
        return this
    def add_vitalSign1(vitalSign1:float):
        b_.PrependFloat64Slot(1, vitalSign1, 0.0)
        return this
    def add_vitalSign2(vitalSign2:float):
        b_.PrependFloat64Slot(2, vitalSign2, 0.0)
        return this
    def add_medConfFactor(medConfFactor:int):
        b_.PrependInt32Slot(3, medConfFactor, 0)
        return this
    def add_time(time:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, time)
        return this
    def end():
        return b_.EndObject()

