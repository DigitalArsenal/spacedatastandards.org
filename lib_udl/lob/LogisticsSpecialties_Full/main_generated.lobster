// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsSpecialties_Full

/// /// The specialties required to implement this support item.
class LogisticsSpecialties_Full : flatbuffers.handle
    /// Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
    /// Example: /// Example: ELEN
    /// Constraints: Minimum length = 0, Maximum length = 4
    def specialty() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Skill level of the mission response team member.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def skillLevel() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// The first name of the specialist.
    /// Example: /// Example: JOHN
    /// Constraints: Minimum length = 0, Maximum length = 20
    def firstName() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The last name of the specialist.
    /// Example: /// Example: SMITH
    /// Constraints: Minimum length = 0, Maximum length = 30
    def lastName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Military service rank designation.
    /// Example: /// Example: MAJ
    /// Constraints: Minimum length = 0, Maximum length = 6
    def rankCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The last four digits of the specialist's social security number.
    /// Example: /// Example: 9999
    /// Constraints: Minimum length = 0, Maximum length = 4
    def last4Ssn() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
    /// Example: /// Example: TC
    /// Constraints: Minimum length = 0, Maximum length = 2
    def roleTypeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)

def GetRootAsLogisticsSpecialties_Full(buf:string): return LogisticsSpecialties_Full { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsSpecialties_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(7)
        return this
    def add_specialty(specialty:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, specialty)
        return this
    def add_skillLevel(skillLevel:int):
        b_.PrependInt32Slot(1, skillLevel, 0)
        return this
    def add_firstName(firstName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, firstName)
        return this
    def add_lastName(lastName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, lastName)
        return this
    def add_rankCode(rankCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, rankCode)
        return this
    def add_last4Ssn(last4Ssn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, last4Ssn)
        return this
    def add_roleTypeCode(roleTypeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, roleTypeCode)
        return this
    def end():
        return b_.EndObject()

