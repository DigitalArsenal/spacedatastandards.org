// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum GNSSObservationSet_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    GNSSObservationSet_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    GNSSObservationSet_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    GNSSObservationSet_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    GNSSObservationSet_Ingest_dataMode_Enum_EXERCISE = 3

class GNSSObservationSet_Ingest

/// /// Set of GNSSObservation data.
class GNSSObservationSet_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: GNSSObSet-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
    /// Example: /// Example: SPACEBORNE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def markerType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the primary satellite on-orbit object.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
    /// Example: /// Example: 2022-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Time, in seconds, that the receiver has been unable to compute a GNSS fix.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    def outage() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Geometric Dilution of Precision.
    /// Example: /// Example: 0.33
    /// Constraints: No constraints specified.
    def gDop() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Horizontal Dilution of Precision.
    /// Example: /// Example: 0.03
    /// Constraints: No constraints specified.
    def hDop() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Position Dilution of Precision.
    /// Example: /// Example: 0.002
    /// Constraints: No constraints specified.
    def pDop() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Time Dilution of Precision.
    /// Example: /// Example: 0.05
    /// Constraints: No constraints specified.
    def tDop() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Vertical Dilution of Precision.
    /// Example: /// Example: 0.03
    /// Constraints: No constraints specified.
    def vDop() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
    /// Example: /// Example: ES-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def esId() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
    /// Example: /// Example: RECEIVER-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def receiver() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
    /// Example: /// Example: [1.23, 3.23]
    /// Constraints: No constraints specified.
    def boresight(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def boresight_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    /// Constraints: No constraints specified.
    def quat(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def quat_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 32.021
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 125.123
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
    /// Example: /// Example: [2.03, 0.003, 0.12]
    /// Constraints: No constraints specified.
    def satVelocity(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def satVelocity_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
    /// Example: /// Example: ['ACL']
    /// Constraints: No constraints specified.
    def obsCodes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def obsCodes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def trackingStatus() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
    /// Example: /// Example: degraded
    /// Constraints: No constraints specified.
    def navigationStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// GNSS Automatic Gain Control State.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    def agcState() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['SV', 'SV']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
    /// Example: /// Example: ['SV_ID', 'SV_ID']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> GNSSObservationSet_Ingest_dataMode_Enum:
        return GNSSObservationSet_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 70, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// GNSSObservations associated with this GNSSObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def gnssObservationList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 74) + i * 4)
    def gnssObservationList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 74)

def GetRootAsGNSSObservationSet_Ingest(buf:string): return GNSSObservationSet_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct GNSSObservationSet_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(36)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_markerType(markerType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, markerType)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(4, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, origObjectId)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, ts)
        return this
    def add_outage(outage:int):
        b_.PrependInt32Slot(7, outage, 0)
        return this
    def add_gDop(gDop:float):
        b_.PrependFloat64Slot(8, gDop, 0.0)
        return this
    def add_hDop(hDop:float):
        b_.PrependFloat64Slot(9, hDop, 0.0)
        return this
    def add_pDop(pDop:float):
        b_.PrependFloat64Slot(10, pDop, 0.0)
        return this
    def add_tDop(tDop:float):
        b_.PrependFloat64Slot(11, tDop, 0.0)
        return this
    def add_vDop(vDop:float):
        b_.PrependFloat64Slot(12, vDop, 0.0)
        return this
    def add_esId(esId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, esId)
        return this
    def add_receiver(receiver:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, receiver)
        return this
    def add_boresight(boresight:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, boresight)
        return this
    def add_quat(quat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, quat)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(17, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(18, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(19, alt, 0.0)
        return this
    def add_satVelocity(satVelocity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, satVelocity)
        return this
    def add_obsCodes(obsCodes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, obsCodes)
        return this
    def add_trackingStatus(trackingStatus:int):
        b_.PrependInt32Slot(22, trackingStatus, 0)
        return this
    def add_navigationStatus(navigationStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, navigationStatus)
        return this
    def add_agcState(agcState:int):
        b_.PrependInt32Slot(24, agcState, 0)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, srcIds)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, tags)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, transactionId)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origin)
        return this
    def add_dataMode(dataMode:GNSSObservationSet_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(33, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, origNetwork)
        return this
    def add_gnssObservationList(gnssObservationList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, gnssObservationList)
        return this
    def end():
        return b_.EndObject()

def GNSSObservationSet_IngestStartBoresightVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateBoresightVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartQuatVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateQuatVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartSatVelocityVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateSatVelocityVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartObsCodesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateObsCodesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservationSet_IngestStartGnssObservationListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservationSet_IngestCreateGnssObservationListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

