// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AircraftMissionTasking_Abridged

/// /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
class AircraftMissionTasking_Abridged : flatbuffers.handle
    /// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 1, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 1, Maximum length = 1
    def taskedService() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The designator of the unit that is tasked to perform this aircraft mission tasking.
    /// Example: /// Example: AMPHIB5DIV
    /// Constraints: Minimum length = 1, Maximum length = 36
    def unitDesignator() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The tasked units location expressed as an ICAO or a place name.
    /// Example: /// Example: ICAO:KXXQ
    /// Constraints: Minimum length = 0, Maximum length = 36
    def unitLocName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// An indicator of whether a mission is or will be a residual mission.
    /// Example: /// Example: N
    /// Constraints: Minimum length = 0, Maximum length = 1
    def resMsnInd() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The AMC number assigned to identify one aircraft from another.
    /// Example: /// Example: AMC:JJXD123HA045
    /// Constraints: Minimum length = 0, Maximum length = 16
    def amcMsnNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The identifier for the composite set of missions for this operation/exercise.
    /// Example: /// Example: ZZ
    /// Constraints: Minimum length = 0, Maximum length = 8
    def pkgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
    /// Example: /// Example: MC
    /// Constraints: Minimum length = 0, Maximum length = 8
    def msnCommander() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The mission number assigned to this mission.
    /// Example: /// Example: D123HA
    /// Constraints: Minimum length = 0, Maximum length = 8
    def msnNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The code for the preferred type or designator for a tasked air mission.
    /// Example: /// Example: CAS
    /// Constraints: Minimum length = 0, Maximum length = 8
    def priMsnType() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The code for the alternative type of a tasked air mission.
    /// Example: /// Example: SEAD
    /// Constraints: Minimum length = 0, Maximum length = 8
    def secMsnType() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
    /// Example: /// Example: 30
    /// Constraints: No constraints specified.
    def alertStatus() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// The location or name specified for the departure of the tasked air mission.
    /// Example: /// Example: ICAO:KBIF
    /// Constraints: Minimum length = 0, Maximum length = 36
    def depLocName() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
    /// Example: /// Example: 32WDL123123
    /// Constraints: Minimum length = 0, Maximum length = 36
    def depLocUTM() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    /// Example: /// Example: 35.123
    /// Constraints: No constraints specified.
    def depLocLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    /// Example: /// Example: 79.2354
    /// Constraints: No constraints specified.
    def depLocLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-10-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def depTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
    /// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
    /// Constraints: No constraints specified.
    def rcvyLocName(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def rcvyLocName_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
    /// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
    /// Constraints: No constraints specified.
    def rcvyLocUTM(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def rcvyLocUTM_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    /// Example: /// Example: [48.8584, 40.7554]
    /// Constraints: No constraints specified.
    def rcvyLocLat(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def rcvyLocLat_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    /// Example: /// Example: [2.2945, -73.9866]
    /// Constraints: No constraints specified.
    def rcvyLocLon(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def rcvyLocLon_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
    /// Constraints: No constraints specified.
    def rcvyTime(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def rcvyTime_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// A collection of the individual aircraft assigned to this aircraft mission tasking.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def indACTasking(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def indACTasking_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// A collection of aircraft mission location information for this aircraft mission tasking.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def acMsnLocSeg(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def acMsnLocSeg_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)

def GetRootAsAircraftMissionTasking_Abridged(buf:string): return AircraftMissionTasking_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct AircraftMissionTasking_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(24)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, countryCode)
        return this
    def add_taskedService(taskedService:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, taskedService)
        return this
    def add_unitDesignator(unitDesignator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, unitDesignator)
        return this
    def add_unitLocName(unitLocName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, unitLocName)
        return this
    def add_resMsnInd(resMsnInd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, resMsnInd)
        return this
    def add_amcMsnNum(amcMsnNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, amcMsnNum)
        return this
    def add_pkgId(pkgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, pkgId)
        return this
    def add_msnCommander(msnCommander:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, msnCommander)
        return this
    def add_msnNum(msnNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, msnNum)
        return this
    def add_priMsnType(priMsnType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, priMsnType)
        return this
    def add_secMsnType(secMsnType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, secMsnType)
        return this
    def add_alertStatus(alertStatus:int):
        b_.PrependInt32Slot(11, alertStatus, 0)
        return this
    def add_depLocName(depLocName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, depLocName)
        return this
    def add_depLocUTM(depLocUTM:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, depLocUTM)
        return this
    def add_depLocLat(depLocLat:float):
        b_.PrependFloat64Slot(14, depLocLat, 0.0)
        return this
    def add_depLocLon(depLocLon:float):
        b_.PrependFloat64Slot(15, depLocLon, 0.0)
        return this
    def add_depTime(depTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, depTime)
        return this
    def add_rcvyLocName(rcvyLocName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, rcvyLocName)
        return this
    def add_rcvyLocUTM(rcvyLocUTM:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, rcvyLocUTM)
        return this
    def add_rcvyLocLat(rcvyLocLat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, rcvyLocLat)
        return this
    def add_rcvyLocLon(rcvyLocLon:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, rcvyLocLon)
        return this
    def add_rcvyTime(rcvyTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, rcvyTime)
        return this
    def add_indACTasking(indACTasking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, indACTasking)
        return this
    def add_acMsnLocSeg(acMsnLocSeg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, acMsnLocSeg)
        return this
    def end():
        return b_.EndObject()

def AircraftMissionTasking_AbridgedStartRcvyLocNameVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateRcvyLocNameVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftMissionTasking_AbridgedStartRcvyLocUTMVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateRcvyLocUTMVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftMissionTasking_AbridgedStartRcvyLocLatVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateRcvyLocLatVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftMissionTasking_AbridgedStartRcvyLocLonVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateRcvyLocLonVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftMissionTasking_AbridgedStartRcvyTimeVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateRcvyTimeVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftMissionTasking_AbridgedStartIndACTaskingVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateIndACTaskingVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftMissionTasking_AbridgedStartAcMsnLocSegVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftMissionTasking_AbridgedCreateAcMsnLocSegVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

