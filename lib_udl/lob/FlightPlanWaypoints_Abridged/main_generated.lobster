// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class FlightPlanWaypoints_Abridged

/// /// Collection of waypoints associated with this flight plan.
class FlightPlanWaypoints_Abridged : flatbuffers.handle
    /// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
    /// Example: /// Example: COMMENT
    /// Constraints: Minimum length = 1, Maximum length = 16
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 1, Maximum length = 32
    def waypointName() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The waypoint number on the route. Comment points do not get a waypoint number.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    def waypointNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// The flight path flown for this leg.
    /// Example: /// Example: W15
    /// Constraints: Minimum length = 0, Maximum length = 16
    def airway() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Point identifying an air refueling track/anchor or fixed track.
    /// Example: /// Example: ARIP
    /// Constraints: Minimum length = 0, Maximum length = 16
    def arpt() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// The ID of the air refueling track/anchor or fixed track.
    /// Example: /// Example: AR202
    /// Constraints: Minimum length = 0, Maximum length = 16
    def arId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Navigational Aid (NAVAID) identification code.
    /// Example: /// Example: HTO
    /// Constraints: Minimum length = 0, Maximum length = 16
    def navaid() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
    /// Example: /// Example: 83X
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tacanChannel() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
    /// Example: /// Example: 113.6
    /// Constraints: No constraints specified.
    def vorFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
    /// Example: /// Example: EXTREME
    /// Constraints: Minimum length = 0, Maximum length = 16
    def turbCat() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
    /// Example: /// Example: MODERATE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def iceCat() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
    /// Example: /// Example: MODERATE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def thunderCat() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Altitude of a level, point, or object measured in feet above mean sea level.
    /// Example: /// Example: 27000.1
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Average temperature deviation from standard day profile for this leg in degrees Celsius.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    def tempDev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The fuel degrade percentage used for this leg.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def legFuelDegrade() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// The average Mach speed for this leg.
    /// Example: /// Example: 0.74
    /// Constraints: No constraints specified.
    def legMach() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    /// Example: /// Example: 65
    /// Constraints: No constraints specified.
    def legMsnIndex() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// The percent degrade due to drag for this aircraft for this leg.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def legDragIndex() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The average calibrated airspeed (CAS) for this leg in knots.
    /// Example: /// Example: 200.1
    /// Constraints: No constraints specified.
    def avgCalAirspeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The average true airspeed (TAS) for this leg in knots.
    /// Example: /// Example: 210.1
    /// Constraints: No constraints specified.
    def avgTrueAirspeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// The average ground speed for this leg in knots.
    /// Example: /// Example: 300.1
    /// Constraints: No constraints specified.
    def avgGroundSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
    /// Example: /// Example: 357.5
    /// Constraints: No constraints specified.
    def priFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The wind direction at this specific point in degrees from true north.
    /// Example: /// Example: 165.5
    /// Constraints: No constraints specified.
    def pointWindDir() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The wind velocity at this specific point in knots.
    /// Example: /// Example: 14.4
    /// Constraints: No constraints specified.
    def pointWindSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// The average wind direction for this leg in degrees from true north.
    /// Example: /// Example: 165.5
    /// Constraints: No constraints specified.
    def avgWindDir() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The average wind speed for this leg in knots.
    /// Example: /// Example: 14.4
    /// Constraints: No constraints specified.
    def avgWindSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: -32.1
    /// Constraints: No constraints specified.
    def legWindFac() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The average drift angle for this leg in degrees from true north.
    /// Example: /// Example: -3.2
    /// Constraints: No constraints specified.
    def avgDriftAng() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
    /// Example: /// Example: 357.5
    /// Constraints: No constraints specified.
    def secFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// The magnetic course at leg midpoint in degrees from true north.
    /// Example: /// Example: 338.1
    /// Constraints: No constraints specified.
    def magCourse() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The true course at leg midpoint in degrees from true north.
    /// Example: /// Example: 328.1
    /// Constraints: No constraints specified.
    def trueCourse() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The magnetic heading at leg midpoint in degrees from true north.
    /// Example: /// Example: 212.1
    /// Constraints: No constraints specified.
    def magHeading() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
    /// Example: /// Example: 31/94
    /// Constraints: Minimum length = 0, Maximum length = 16
    def aaTacanChannel() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// The zone/leg distance flown in nautical miles.
    /// Example: /// Example: 212.1
    /// Constraints: No constraints specified.
    def zoneDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// The total distance flown to this waypoint calculated from point of departure in nautical miles.
    /// Example: /// Example: 688.1
    /// Constraints: No constraints specified.
    def totalFlownDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// The total distance remaining from this waypoint to the point of arrival in nautical miles.
    /// Example: /// Example: 1288.1
    /// Constraints: No constraints specified.
    def totalRemDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// The time to fly this zone/leg in minutes.
    /// Example: /// Example: 36.1
    /// Constraints: No constraints specified.
    def zoneTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
    /// Example: /// Example: 08:45
    /// Constraints: Minimum length = 0, Maximum length = 6
    def totalTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
    /// Example: /// Example: 01:43
    /// Constraints: Minimum length = 0, Maximum length = 6
    def totalTimeRem() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// The amount of fuel used on this zone/leg in pounds.
    /// Example: /// Example: 1120.1
    /// Constraints: No constraints specified.
    def zoneFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// The total fuel used to this waypoint from point of departure in pounds.
    /// Example: /// Example: 70431.1
    /// Constraints: No constraints specified.
    def totalUsedFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// The total fuel remaining at this waypoint in pounds.
    /// Example: /// Example: 30453.1
    /// Constraints: No constraints specified.
    def totalRemFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
    /// Example: /// Example: -30400.1
    /// Constraints: No constraints specified.
    def exchangedFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// The air distance of this leg in nautical miles.
    /// Example: /// Example: 321.1
    /// Constraints: No constraints specified.
    def airDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// The total air distance to this waypoint in nautical miles.
    /// Example: /// Example: 3251.1
    /// Constraints: No constraints specified.
    def totalAirDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// The total weight of the aircraft at this waypoint in pounds.
    /// Example: /// Example: 207123.1
    /// Constraints: No constraints specified.
    def totalWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-09-09T01:00:00.123Z
    /// Constraints: No constraints specified.
    def eta() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-09-09T01:00:00.123Z
    /// Constraints: No constraints specified.
    def ata() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// The leg fuel flow in pounds per hour.
    /// Example: /// Example: 17654.1
    /// Constraints: No constraints specified.
    def fuelFlow() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 16
    def legAlternate() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// The magnetic variation for this leg in degrees.
    /// Example: /// Example: -13.2
    /// Constraints: No constraints specified.
    def magVar() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// The day low level altitude in feet above sea level for the leg ending at this waypoint.
    /// Example: /// Example: 1500.1
    /// Constraints: No constraints specified.
    def dayLowAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// The night low level altitude in feet above sea level for the leg ending at this waypoint.
    /// Example: /// Example: 2300.1
    /// Constraints: No constraints specified.
    def nightLowAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
    /// Example: /// Example: 2450.1
    /// Constraints: No constraints specified.
    def nvgLowAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)

def GetRootAsFlightPlanWaypoints_Abridged(buf:string): return FlightPlanWaypoints_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct FlightPlanWaypoints_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(56)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, type)
        return this
    def add_waypointName(waypointName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, waypointName)
        return this
    def add_waypointNum(waypointNum:int):
        b_.PrependInt32Slot(2, waypointNum, 0)
        return this
    def add_airway(airway:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, airway)
        return this
    def add_arpt(arpt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, arpt)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(5, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(6, lon, 0.0)
        return this
    def add_arId(arId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, arId)
        return this
    def add_navaid(navaid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, navaid)
        return this
    def add_tacanChannel(tacanChannel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, tacanChannel)
        return this
    def add_vorFreq(vorFreq:float):
        b_.PrependFloat64Slot(10, vorFreq, 0.0)
        return this
    def add_turbCat(turbCat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, turbCat)
        return this
    def add_iceCat(iceCat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, iceCat)
        return this
    def add_thunderCat(thunderCat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, thunderCat)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(14, alt, 0.0)
        return this
    def add_tempDev(tempDev:float):
        b_.PrependFloat64Slot(15, tempDev, 0.0)
        return this
    def add_legFuelDegrade(legFuelDegrade:float):
        b_.PrependFloat64Slot(16, legFuelDegrade, 0.0)
        return this
    def add_legMach(legMach:float):
        b_.PrependFloat64Slot(17, legMach, 0.0)
        return this
    def add_legMsnIndex(legMsnIndex:float):
        b_.PrependFloat64Slot(18, legMsnIndex, 0.0)
        return this
    def add_legDragIndex(legDragIndex:float):
        b_.PrependFloat64Slot(19, legDragIndex, 0.0)
        return this
    def add_avgCalAirspeed(avgCalAirspeed:float):
        b_.PrependFloat64Slot(20, avgCalAirspeed, 0.0)
        return this
    def add_avgTrueAirspeed(avgTrueAirspeed:float):
        b_.PrependFloat64Slot(21, avgTrueAirspeed, 0.0)
        return this
    def add_avgGroundSpeed(avgGroundSpeed:float):
        b_.PrependFloat64Slot(22, avgGroundSpeed, 0.0)
        return this
    def add_priFreq(priFreq:float):
        b_.PrependFloat64Slot(23, priFreq, 0.0)
        return this
    def add_pointWindDir(pointWindDir:float):
        b_.PrependFloat64Slot(24, pointWindDir, 0.0)
        return this
    def add_pointWindSpeed(pointWindSpeed:float):
        b_.PrependFloat64Slot(25, pointWindSpeed, 0.0)
        return this
    def add_avgWindDir(avgWindDir:float):
        b_.PrependFloat64Slot(26, avgWindDir, 0.0)
        return this
    def add_avgWindSpeed(avgWindSpeed:float):
        b_.PrependFloat64Slot(27, avgWindSpeed, 0.0)
        return this
    def add_legWindFac(legWindFac:float):
        b_.PrependFloat64Slot(28, legWindFac, 0.0)
        return this
    def add_avgDriftAng(avgDriftAng:float):
        b_.PrependFloat64Slot(29, avgDriftAng, 0.0)
        return this
    def add_secFreq(secFreq:float):
        b_.PrependFloat64Slot(30, secFreq, 0.0)
        return this
    def add_magCourse(magCourse:float):
        b_.PrependFloat64Slot(31, magCourse, 0.0)
        return this
    def add_trueCourse(trueCourse:float):
        b_.PrependFloat64Slot(32, trueCourse, 0.0)
        return this
    def add_magHeading(magHeading:float):
        b_.PrependFloat64Slot(33, magHeading, 0.0)
        return this
    def add_aaTacanChannel(aaTacanChannel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, aaTacanChannel)
        return this
    def add_zoneDistance(zoneDistance:float):
        b_.PrependFloat64Slot(35, zoneDistance, 0.0)
        return this
    def add_totalFlownDistance(totalFlownDistance:float):
        b_.PrependFloat64Slot(36, totalFlownDistance, 0.0)
        return this
    def add_totalRemDistance(totalRemDistance:float):
        b_.PrependFloat64Slot(37, totalRemDistance, 0.0)
        return this
    def add_zoneTime(zoneTime:float):
        b_.PrependFloat64Slot(38, zoneTime, 0.0)
        return this
    def add_totalTime(totalTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, totalTime)
        return this
    def add_totalTimeRem(totalTimeRem:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, totalTimeRem)
        return this
    def add_zoneFuel(zoneFuel:float):
        b_.PrependFloat64Slot(41, zoneFuel, 0.0)
        return this
    def add_totalUsedFuel(totalUsedFuel:float):
        b_.PrependFloat64Slot(42, totalUsedFuel, 0.0)
        return this
    def add_totalRemFuel(totalRemFuel:float):
        b_.PrependFloat64Slot(43, totalRemFuel, 0.0)
        return this
    def add_exchangedFuel(exchangedFuel:float):
        b_.PrependFloat64Slot(44, exchangedFuel, 0.0)
        return this
    def add_airDistance(airDistance:float):
        b_.PrependFloat64Slot(45, airDistance, 0.0)
        return this
    def add_totalAirDistance(totalAirDistance:float):
        b_.PrependFloat64Slot(46, totalAirDistance, 0.0)
        return this
    def add_totalWeight(totalWeight:float):
        b_.PrependFloat64Slot(47, totalWeight, 0.0)
        return this
    def add_eta(eta:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, eta)
        return this
    def add_ata(ata:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, ata)
        return this
    def add_fuelFlow(fuelFlow:float):
        b_.PrependFloat64Slot(50, fuelFlow, 0.0)
        return this
    def add_legAlternate(legAlternate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, legAlternate)
        return this
    def add_magVar(magVar:float):
        b_.PrependFloat64Slot(52, magVar, 0.0)
        return this
    def add_dayLowAlt(dayLowAlt:float):
        b_.PrependFloat64Slot(53, dayLowAlt, 0.0)
        return this
    def add_nightLowAlt(nightLowAlt:float):
        b_.PrependFloat64Slot(54, nightLowAlt, 0.0)
        return this
    def add_nvgLowAlt(nvgLowAlt:float):
        b_.PrependFloat64Slot(55, nvgLowAlt, 0.0)
        return this
    def end():
        return b_.EndObject()

