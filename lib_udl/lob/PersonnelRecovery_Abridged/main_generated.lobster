// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum PersonnelRecovery_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    PersonnelRecovery_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    PersonnelRecovery_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    PersonnelRecovery_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    PersonnelRecovery_Abridged_dataMode_Enum_EXERCISE = 3

class PersonnelRecovery_Abridged

/// /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
class PersonnelRecovery_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: PERSONNEL_RECOVERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
    /// Example: /// Example: MEDICAL
    /// Constraints: Minimum length = 1, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def msgTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
    /// Example: /// Example: RECOV-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def recovId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of a weather report associated with this recovery.
    /// Example: /// Example: WEATHER_REPORT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idWeatherReport() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 75.1234
    /// Constraints: No constraints specified.
    def pickupLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 175.1234
    /// Constraints: No constraints specified.
    def pickupLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
    /// Example: /// Example: 30.1234
    /// Constraints: No constraints specified.
    def pickupAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Flag indicating the cancellation of this recovery.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def termInd() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
    /// AUTHENTICATED:  Confirmed Friend
    /// NOT AUTHENTICATED: Unconfirmed status
    /// AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
    /// NOT APPLICABLE:  Authentication not required.
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 36
    def authStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The count of persons requiring recovery.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numPersons() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
    /// Example: /// Example: CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 36
    def milClass() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def natAlliance() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def natAlliance1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
    /// Example: /// Example: NEUTRAL CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 32
    def identity() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
    /// Example: /// Example: LL PHONE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def commEq1() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
    /// Example: /// Example: LL PHONE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def commEq2() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
    /// Example: /// Example: LL PHONE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def commEq3() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Transmit voice frequency in 5Hz increments.
    /// Example: /// Example: 5.5
    /// Constraints: No constraints specified.
    def txFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
    /// Example: /// Example: 5.5
    /// Constraints: No constraints specified.
    def rxFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Number of littered personnel requiring recovery.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def numNonAmbulatory() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// Number of ambulatory personnel requiring recovery.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numAmbulatory() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// Number of injured, but ambulatory, personnel requiring recovery.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numAmbulatoryInjured() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def survivorRadio() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
    /// Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
    /// Constraints: Minimum length = 0, Maximum length = 64
    def survivorMessages() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Flag indicating whether a radio identifier is reported.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def beaconInd() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 56, 0))
    /// The call sign of the personnel to be recovered.
    /// Example: /// Example: BADGER
    /// Constraints: Minimum length = 0, Maximum length = 128
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Additional specific messages received from survivor.
    /// Example: /// Example: Additional message from survivor.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def textMsg() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Mechanism used to verify the survivors identity.
    /// Example: /// Example: PASSPORT
    /// Constraints: Minimum length = 0, Maximum length = 64
    def authMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def objectiveAreaInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def executionInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> PersonnelRecovery_Abridged_dataMode_Enum:
        return PersonnelRecovery_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 78, 0))

def GetRootAsPersonnelRecovery_Abridged(buf:string): return PersonnelRecovery_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct PersonnelRecovery_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(38)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, type)
        return this
    def add_msgTime(msgTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, msgTime)
        return this
    def add_recovId(recovId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, recovId)
        return this
    def add_idWeatherReport(idWeatherReport:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idWeatherReport)
        return this
    def add_pickupLat(pickupLat:float):
        b_.PrependFloat64Slot(6, pickupLat, 0.0)
        return this
    def add_pickupLon(pickupLon:float):
        b_.PrependFloat64Slot(7, pickupLon, 0.0)
        return this
    def add_pickupAlt(pickupAlt:float):
        b_.PrependFloat64Slot(8, pickupAlt, 0.0)
        return this
    def add_termInd(termInd:bool):
        b_.PrependBoolSlot(9, termInd, 0)
        return this
    def add_authStatus(authStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, authStatus)
        return this
    def add_numPersons(numPersons:int):
        b_.PrependInt32Slot(11, numPersons, 0)
        return this
    def add_milClass(milClass:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, milClass)
        return this
    def add_natAlliance(natAlliance:int):
        b_.PrependInt32Slot(13, natAlliance, 0)
        return this
    def add_natAlliance1(natAlliance1:int):
        b_.PrependInt32Slot(14, natAlliance1, 0)
        return this
    def add_identity(identity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, identity)
        return this
    def add_commEq1(commEq1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, commEq1)
        return this
    def add_commEq2(commEq2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, commEq2)
        return this
    def add_commEq3(commEq3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, commEq3)
        return this
    def add_txFreq(txFreq:float):
        b_.PrependFloat64Slot(19, txFreq, 0.0)
        return this
    def add_rxFreq(rxFreq:float):
        b_.PrependFloat64Slot(20, rxFreq, 0.0)
        return this
    def add_numNonAmbulatory(numNonAmbulatory:int):
        b_.PrependInt32Slot(21, numNonAmbulatory, 0)
        return this
    def add_numAmbulatory(numAmbulatory:int):
        b_.PrependInt32Slot(22, numAmbulatory, 0)
        return this
    def add_numAmbulatoryInjured(numAmbulatoryInjured:int):
        b_.PrependInt32Slot(23, numAmbulatoryInjured, 0)
        return this
    def add_survivorRadio(survivorRadio:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, survivorRadio)
        return this
    def add_survivorMessages(survivorMessages:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, survivorMessages)
        return this
    def add_beaconInd(beaconInd:bool):
        b_.PrependBoolSlot(26, beaconInd, 0)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, callSign)
        return this
    def add_textMsg(textMsg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, textMsg)
        return this
    def add_authMethod(authMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, authMethod)
        return this
    def add_objectiveAreaInfo(objectiveAreaInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, objectiveAreaInfo)
        return this
    def add_executionInfo(executionInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, executionInfo)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origNetwork)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origin)
        return this
    def add_dataMode(dataMode:PersonnelRecovery_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(37, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

