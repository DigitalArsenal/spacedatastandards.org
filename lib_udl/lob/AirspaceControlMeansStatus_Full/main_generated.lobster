// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AirspaceControlMeansStatus_Full

/// /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
class AirspaceControlMeansStatus_Full : flatbuffers.handle
    /// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
    /// Example: /// Example: ADD
    /// Constraints: Minimum length = 0, Maximum length = 8
    def cmStat() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
    /// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
    /// Constraints: No constraints specified.
    def cmStatId(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def cmStatId_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def airspaceControlMeans(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def airspaceControlMeans_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)

def GetRootAsAirspaceControlMeansStatus_Full(buf:string): return AirspaceControlMeansStatus_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirspaceControlMeansStatus_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(3)
        return this
    def add_cmStat(cmStat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, cmStat)
        return this
    def add_cmStatId(cmStatId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, cmStatId)
        return this
    def add_airspaceControlMeans(airspaceControlMeans:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, airspaceControlMeans)
        return this
    def end():
        return b_.EndObject()

def AirspaceControlMeansStatus_FullStartCmStatIdVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlMeansStatus_FullCreateCmStatIdVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirspaceControlMeansStatus_FullStartAirspaceControlMeansVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirspaceControlMeansStatus_FullCreateAirspaceControlMeansVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

