// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Organization_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Organization_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Organization_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Organization_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Organization_Ingest_dataMode_Enum_EXERCISE = 3

class Organization_Ingest

/// /// An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.
class Organization_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ORGANIZATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Organization name.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
    /// Example: /// Example: GOVERNMENT
    /// Constraints: Minimum length = 1, Maximum length = 128
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).
    /// Example: /// Example: Private company
    /// Constraints: Minimum length = 0, Maximum length = 128
    def category() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional externally provided identifier for this row.
    /// Example: /// Example: EXTERNAL-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Organization description.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def nationality() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Boolean indicating if this organization is currently active.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def active() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Organization_Ingest_dataMode_Enum:
        return Organization_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)

def GetRootAsOrganization_Ingest(buf:string): return Organization_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Organization_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(16)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, name)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, type)
        return this
    def add_category(category:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, category)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, externalId)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, description)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, countryCode)
        return this
    def add_nationality(nationality:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, nationality)
        return this
    def add_active(active:bool):
        b_.PrependBoolSlot(9, active, 0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, origin)
        return this
    def add_dataMode(dataMode:Organization_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(12, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origNetwork)
        return this
    def end():
        return b_.EndObject()

