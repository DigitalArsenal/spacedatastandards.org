// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DataLinkReferences_Abridged

/// /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
class DataLinkReferences_Abridged : flatbuffers.handle
    /// Specifies an alphabetic serial identifier a reference pertaining to the data link message.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 2
    def refSerialId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Specifies the type of document referenced.
    /// Example: /// Example: ABSTAT
    /// Constraints: Minimum length = 0, Maximum length = 56
    def refType() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The originator of this reference.
    /// Example: /// Example: CENTCOM
    /// Constraints: Minimum length = 0, Maximum length = 30
    def refOriginator() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def refTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Serial number assigned to this reference.
    /// Example: /// Example: 1402001
    /// Constraints: Minimum length = 0, Maximum length = 10
    def refSerialNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Indicates any special actions, restrictions, guidance, or information relating to this reference.
    /// Example: /// Example: NOTAL
    /// Constraints: Minimum length = 0, Maximum length = 5
    def refSpecialNotation() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
    /// Example: /// Example: ['RDU', 'C-123-92']
    /// Constraints: No constraints specified.
    def refSICs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def refSICs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)

def GetRootAsDataLinkReferences_Abridged(buf:string): return DataLinkReferences_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct DataLinkReferences_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(7)
        return this
    def add_refSerialId(refSerialId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, refSerialId)
        return this
    def add_refType(refType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, refType)
        return this
    def add_refOriginator(refOriginator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, refOriginator)
        return this
    def add_refTs(refTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, refTs)
        return this
    def add_refSerialNum(refSerialNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, refSerialNum)
        return this
    def add_refSpecialNotation(refSpecialNotation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, refSpecialNotation)
        return this
    def add_refSICs(refSICs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, refSICs)
        return this
    def end():
        return b_.EndObject()

def DataLinkReferences_AbridgedStartRefSICsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLinkReferences_AbridgedCreateRefSICsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

