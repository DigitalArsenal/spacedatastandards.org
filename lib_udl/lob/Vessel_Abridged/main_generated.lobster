// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Vessel_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Vessel_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Vessel_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Vessel_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Vessel_Abridged_dataMode_Enum_EXERCISE = 3

class Vessel_Abridged

/// /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
class Vessel_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the parent entity. idEntity is required for Put.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The original source Id for this vessel.
    /// Example: /// Example: 590b5194fc32e75dd00682ba
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altVesselId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The UDL ID of the organization that owns the vessel.
    /// Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOrganization() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
    /// Example: /// Example: DORNUM
    /// Constraints: Minimum length = 0, Maximum length = 24
    def vesselName() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
    /// Example: /// Example: Passenger
    /// Constraints: Minimum length = 0, Maximum length = 48
    def vesselType() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The common name for a group of ships with similar design, usually named for the first vessel of the class.
    /// Example: /// Example: Nimitz
    /// Constraints: Minimum length = 0, Maximum length = 64
    def vesselClass() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Further description or explanation of the vessel or type.
    /// Example: /// Example: Search and Rescue Vessel
    /// Constraints: Minimum length = 0, Maximum length = 100
    def vesselDescription() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
    /// Example: /// Example: B45524
    /// Constraints: Minimum length = 0, Maximum length = 36
    def sconum() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
    /// Example: /// Example: 9566356
    /// Constraints: No constraints specified.
    def imon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    /// Example: /// Example: 416450000
    /// Constraints: Minimum length = 0, Maximum length = 9
    def mmsi() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
    /// Example: /// Example: V2OZ
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callsign() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The flag of the subject vessel.
    /// Example: /// Example: United States
    /// Constraints: Minimum length = 0, Maximum length = 36
    def vesselFlag() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Year the vessel went into service.
    /// Example: /// Example: 2014
    /// Constraints: Minimum length = 0, Maximum length = 4
    def yearBuilt() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The shipbuilder who built this vessel.
    /// Example: /// Example: Samsung Heavy Inds - Geoje
    /// Constraints: Minimum length = 0, Maximum length = 64
    def vesselBuilder() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The status of this vessel.
    /// Example: /// Example: In Service/Commission
    /// Constraints: Minimum length = 0, Maximum length = 64
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The date this vessel was first seen.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def firstSeen() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
    /// Example: /// Example: 511.1
    /// Constraints: No constraints specified.
    def length() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
    /// Example: /// Example: 24.1
    /// Constraints: No constraints specified.
    def width() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The maximum static draught, in meters, of the vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel.
    /// Example: /// Example: 21.1
    /// Constraints: No constraints specified.
    def maxDraught() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The weight in tons, of this vessel.
    /// Example: /// Example: 3423.76
    /// Constraints: No constraints specified.
    def vslWt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// The maximum possible speed of this vessel in meters per second.
    /// Example: /// Example: 32.5
    /// Constraints: No constraints specified.
    def maxSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The stern type code (Counter, Cruiser) associated with this vessel.
    /// Example: /// Example: Cruiser
    /// Constraints: Minimum length = 0, Maximum length = 16
    def sternType() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The number of blades per shaft for this vessel.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def numBlades() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// The number of shafts on this vessel.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numShafts() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// The type of propulsion employed by this vessel.
    /// Example: /// Example: Diesel
    /// Constraints: Minimum length = 0, Maximum length = 6
    def propType() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
    /// Example: /// Example: A30081
    /// Constraints: Minimum length = 0, Maximum length = 7
    def hullNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 64
    def dataMode() -> Vessel_Abridged_dataMode_Enum:
        return Vessel_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)

def GetRootAsVessel_Abridged(buf:string): return Vessel_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Vessel_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(34)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idEntity)
        return this
    def add_altVesselId(altVesselId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, altVesselId)
        return this
    def add_idOrganization(idOrganization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idOrganization)
        return this
    def add_vesselName(vesselName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, vesselName)
        return this
    def add_vesselType(vesselType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, vesselType)
        return this
    def add_vesselClass(vesselClass:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, vesselClass)
        return this
    def add_vesselDescription(vesselDescription:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, vesselDescription)
        return this
    def add_sconum(sconum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, sconum)
        return this
    def add_imon(imon:int):
        b_.PrependInt32Slot(10, imon, 0)
        return this
    def add_mmsi(mmsi:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, mmsi)
        return this
    def add_callsign(callsign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, callsign)
        return this
    def add_vesselFlag(vesselFlag:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, vesselFlag)
        return this
    def add_yearBuilt(yearBuilt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, yearBuilt)
        return this
    def add_vesselBuilder(vesselBuilder:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, vesselBuilder)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, status)
        return this
    def add_firstSeen(firstSeen:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, firstSeen)
        return this
    def add_length(length:float):
        b_.PrependFloat64Slot(18, length, 0.0)
        return this
    def add_width(width:float):
        b_.PrependFloat64Slot(19, width, 0.0)
        return this
    def add_maxDraught(maxDraught:float):
        b_.PrependFloat64Slot(20, maxDraught, 0.0)
        return this
    def add_vslWt(vslWt:float):
        b_.PrependFloat64Slot(21, vslWt, 0.0)
        return this
    def add_maxSpeed(maxSpeed:float):
        b_.PrependFloat64Slot(22, maxSpeed, 0.0)
        return this
    def add_sternType(sternType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, sternType)
        return this
    def add_numBlades(numBlades:int):
        b_.PrependInt32Slot(24, numBlades, 0)
        return this
    def add_numShafts(numShafts:int):
        b_.PrependInt32Slot(25, numShafts, 0)
        return this
    def add_propType(propType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, propType)
        return this
    def add_hullNum(hullNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, hullNum)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, origin)
        return this
    def add_dataMode(dataMode:Vessel_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(32, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, origNetwork)
        return this
    def end():
        return b_.EndObject()

