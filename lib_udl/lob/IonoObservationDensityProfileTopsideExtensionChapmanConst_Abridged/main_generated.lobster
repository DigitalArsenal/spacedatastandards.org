// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged

/// /// Parameters of the constant-scale-height Chapman layer.
class IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged : flatbuffers.handle
    /// Description of the Chapman computation technique.
    /// Example: /// Example: Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height.
    /// Constraints: No constraints specified.
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Peak density of F2 layer, in grams per cubic centimeter.
    /// Example: /// Example: 313283.1
    /// Constraints: No constraints specified.
    def nmF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Peak height of F2 layer, in kilometers.
    /// Example: /// Example: 265.42
    /// Constraints: No constraints specified.
    def hmF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Scale height if F2 layer at the peak, in kilometers.
    /// Example: /// Example: 45.191
    /// Constraints: No constraints specified.
    def scaleF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
    /// Example: /// Example: 35.1
    /// Constraints: No constraints specified.
    def chi() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)

def GetRootAsIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(buf:string): return IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationDensityProfileTopsideExtensionChapmanConst_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, description)
        return this
    def add_nmF2(nmF2:float):
        b_.PrependFloat64Slot(1, nmF2, 0.0)
        return this
    def add_hmF2(hmF2:float):
        b_.PrependFloat64Slot(2, hmF2, 0.0)
        return this
    def add_scaleF2(scaleF2:float):
        b_.PrependFloat64Slot(3, scaleF2, 0.0)
        return this
    def add_chi(chi:float):
        b_.PrependFloat64Slot(4, chi, 0.0)
        return this
    def end():
        return b_.EndObject()

