// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum BeamContour_Full_type_Enum:
    /// No description available.
    BeamContour_Full_type_Enum_BORESIGHT = 0
    /// No description available.
    BeamContour_Full_type_Enum_CONTOUR = 1
    /// No description available.
    BeamContour_Full_type_Enum_SVC_AREA = 2

enum BeamContour_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    BeamContour_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    BeamContour_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    BeamContour_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    BeamContour_Full_dataMode_Enum_EXERCISE = 3

class BeamContour_Full

/// /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
class BeamContour_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: BEAMCONTOUR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// ID of the beam.
    /// Example: /// Example: REF-BEAM-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idBeam() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
    /// Example: /// Example: BORESIGHT
    /// Constraints: Minimum length = 1, Maximum length = 16
    def type() -> BeamContour_Full_type_Enum:
        return BeamContour_Full_type_Enum(flatbuffers.field_int8(buf_, pos_, 10, 0))
    /// The index number of this contour. The value is required if type = CONTOUR.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def contourIdx() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
    /// Example: /// Example: 17.1
    /// Constraints: No constraints specified.
    def gain() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// The region name within the service area.
    /// Example: /// Example: Example region name
    /// Constraints: Minimum length = 0, Maximum length = 24
    def regionName() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
    /// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
    /// Constraints: No constraints specified.
    def geography() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def geographyText() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    def geographyJson() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Type of region as projected.
    /// Example: /// Example: ST_Polygon
    /// Constraints: Minimum length = 0, Maximum length = 128
    def geographyType() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def geographyNdims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 4326
    /// Constraints: No constraints specified.
    def geographySrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> BeamContour_Full_dataMode_Enum:
        return BeamContour_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 44, 0))

def GetRootAsBeamContour_Full(buf:string): return BeamContour_Full { buf, flatbuffers.indirect(buf, 0) }

struct BeamContour_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idBeam(idBeam:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idBeam)
        return this
    def add_type(type:BeamContour_Full_type_Enum):
        b_.PrependInt8Slot(3, type, 0)
        return this
    def add_contourIdx(contourIdx:int):
        b_.PrependInt32Slot(4, contourIdx, 0)
        return this
    def add_gain(gain:float):
        b_.PrependFloat64Slot(5, gain, 0.0)
        return this
    def add_regionName(regionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, regionName)
        return this
    def add_geography(geography:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, geography)
        return this
    def add_geographyText(geographyText:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, geographyText)
        return this
    def add_geographyJson(geographyJson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, geographyJson)
        return this
    def add_geographyType(geographyType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, geographyType)
        return this
    def add_geographyNdims(geographyNdims:int):
        b_.PrependInt32Slot(11, geographyNdims, 0)
        return this
    def add_geographySrid(geographySrid:int):
        b_.PrependInt32Slot(12, geographySrid, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origNetwork)
        return this
    def add_dataMode(dataMode:BeamContour_Full_dataMode_Enum):
        b_.PrependInt8Slot(20, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

