// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Eop_Abridged_polarMotionState_Enum:
    /// No description available.
    Eop_Abridged_polarMotionState_Enum_I = 0
    /// No description available.
    Eop_Abridged_polarMotionState_Enum_P = 1

enum Eop_Abridged_ut1UTCState_Enum:
    /// No description available.
    Eop_Abridged_ut1UTCState_Enum_I = 0
    /// No description available.
    Eop_Abridged_ut1UTCState_Enum_P = 1

enum Eop_Abridged_nutationState_Enum:
    /// No description available.
    Eop_Abridged_nutationState_Enum_I = 0
    /// No description available.
    Eop_Abridged_nutationState_Enum_P = 1

enum Eop_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Eop_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Eop_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Eop_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Eop_Abridged_dataMode_Enum_EXERCISE = 3

class Eop_Abridged

/// /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
/// Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
/// Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
/// IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
class Eop_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EOP-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def eopDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    def polarMotionState() -> Eop_Abridged_polarMotionState_Enum:
        return Eop_Abridged_polarMotionState_Enum(flatbuffers.field_int8(buf_, pos_, 10, 0))
    /// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.182987
    /// Constraints: No constraints specified.
    def polarMotionX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Estimated uncertainty/error in polarMotionX value in arc seconds.
    /// Example: /// Example: 0.000672
    /// Constraints: No constraints specified.
    def polarMotionXUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.168775
    /// Constraints: No constraints specified.
    def polarMotionY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Estimated uncertainty/error in polarMotionY value in arc seconds.
    /// Example: /// Example: 0.000345
    /// Constraints: No constraints specified.
    def polarMotionYUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    def ut1UTCState() -> Eop_Abridged_ut1UTCState_Enum:
        return Eop_Abridged_ut1UTCState_Enum(flatbuffers.field_int8(buf_, pos_, 20, 0))
    /// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
    /// Example: /// Example: -0.1251659
    /// Constraints: No constraints specified.
    def ut1UTC() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// The estimated uncertainty/error in the ut1UTC value in seconds.
    /// Example: /// Example: 2.07e-05
    /// Constraints: No constraints specified.
    def ut1UTCUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
    /// Example: /// Example: 1.8335
    /// Constraints: No constraints specified.
    def lod() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// The estimated uncertainty/error in the lod value in seconds.
    /// Example: /// Example: 0.0201
    /// Constraints: No constraints specified.
    def lodUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
    /// Example: /// Example: I
    /// Constraints: Minimum length = 0, Maximum length = 1
    def nutationState() -> Eop_Abridged_nutationState_Enum:
        return Eop_Abridged_nutationState_Enum(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -10.437
    /// Constraints: No constraints specified.
    def dPSI() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
    /// Example: /// Example: 0.507
    /// Constraints: No constraints specified.
    def dPSIUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -0.917
    /// Constraints: No constraints specified.
    def dEpsilon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
    /// Example: /// Example: 0.165
    /// Constraints: No constraints specified.
    def dEpsilonUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
    /// Example: /// Example: -0.086
    /// Constraints: No constraints specified.
    def dX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
    /// Example: /// Example: 0.202
    /// Constraints: No constraints specified.
    def dXUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
    /// Example: /// Example: 0.13
    /// Constraints: No constraints specified.
    def dY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
    /// Example: /// Example: 0.165
    /// Constraints: No constraints specified.
    def dYUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.1824
    /// Constraints: No constraints specified.
    def polarMotionXB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    /// Example: /// Example: 0.1679
    /// Constraints: No constraints specified.
    def polarMotionYB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
    /// Example: /// Example: -0.1253
    /// Constraints: No constraints specified.
    def ut1UTCB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -9.9
    /// Constraints: No constraints specified.
    def dPSIB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
    /// Example: /// Example: -1.7
    /// Constraints: No constraints specified.
    def dEpsilonB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
    /// Example: /// Example: 0.129
    /// Constraints: No constraints specified.
    def dXB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
    /// Example: /// Example: -0.653
    /// Constraints: No constraints specified.
    def dYB() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
    /// Example: /// Example: IAU1980
    /// Constraints: Minimum length = 0, Maximum length = 10
    def precessionNutationStd() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Eop_Abridged_dataMode_Enum:
        return Eop_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 70, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)

def GetRootAsEop_Abridged(buf:string): return Eop_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Eop_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(37)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_eopDate(eopDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, eopDate)
        return this
    def add_polarMotionState(polarMotionState:Eop_Abridged_polarMotionState_Enum):
        b_.PrependInt8Slot(3, polarMotionState, 0)
        return this
    def add_polarMotionX(polarMotionX:float):
        b_.PrependFloat64Slot(4, polarMotionX, 0.0)
        return this
    def add_polarMotionXUnc(polarMotionXUnc:float):
        b_.PrependFloat64Slot(5, polarMotionXUnc, 0.0)
        return this
    def add_polarMotionY(polarMotionY:float):
        b_.PrependFloat64Slot(6, polarMotionY, 0.0)
        return this
    def add_polarMotionYUnc(polarMotionYUnc:float):
        b_.PrependFloat64Slot(7, polarMotionYUnc, 0.0)
        return this
    def add_ut1UTCState(ut1UTCState:Eop_Abridged_ut1UTCState_Enum):
        b_.PrependInt8Slot(8, ut1UTCState, 0)
        return this
    def add_ut1UTC(ut1UTC:float):
        b_.PrependFloat64Slot(9, ut1UTC, 0.0)
        return this
    def add_ut1UTCUnc(ut1UTCUnc:float):
        b_.PrependFloat64Slot(10, ut1UTCUnc, 0.0)
        return this
    def add_lod(lod:float):
        b_.PrependFloat64Slot(11, lod, 0.0)
        return this
    def add_lodUnc(lodUnc:float):
        b_.PrependFloat64Slot(12, lodUnc, 0.0)
        return this
    def add_nutationState(nutationState:Eop_Abridged_nutationState_Enum):
        b_.PrependInt8Slot(13, nutationState, 0)
        return this
    def add_dPSI(dPSI:float):
        b_.PrependFloat64Slot(14, dPSI, 0.0)
        return this
    def add_dPSIUnc(dPSIUnc:float):
        b_.PrependFloat64Slot(15, dPSIUnc, 0.0)
        return this
    def add_dEpsilon(dEpsilon:float):
        b_.PrependFloat64Slot(16, dEpsilon, 0.0)
        return this
    def add_dEpsilonUnc(dEpsilonUnc:float):
        b_.PrependFloat64Slot(17, dEpsilonUnc, 0.0)
        return this
    def add_dX(dX:float):
        b_.PrependFloat64Slot(18, dX, 0.0)
        return this
    def add_dXUnc(dXUnc:float):
        b_.PrependFloat64Slot(19, dXUnc, 0.0)
        return this
    def add_dY(dY:float):
        b_.PrependFloat64Slot(20, dY, 0.0)
        return this
    def add_dYUnc(dYUnc:float):
        b_.PrependFloat64Slot(21, dYUnc, 0.0)
        return this
    def add_polarMotionXB(polarMotionXB:float):
        b_.PrependFloat64Slot(22, polarMotionXB, 0.0)
        return this
    def add_polarMotionYB(polarMotionYB:float):
        b_.PrependFloat64Slot(23, polarMotionYB, 0.0)
        return this
    def add_ut1UTCB(ut1UTCB:float):
        b_.PrependFloat64Slot(24, ut1UTCB, 0.0)
        return this
    def add_dPSIB(dPSIB:float):
        b_.PrependFloat64Slot(25, dPSIB, 0.0)
        return this
    def add_dEpsilonB(dEpsilonB:float):
        b_.PrependFloat64Slot(26, dEpsilonB, 0.0)
        return this
    def add_dXB(dXB:float):
        b_.PrependFloat64Slot(27, dXB, 0.0)
        return this
    def add_dYB(dYB:float):
        b_.PrependFloat64Slot(28, dYB, 0.0)
        return this
    def add_precessionNutationStd(precessionNutationStd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, precessionNutationStd)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, rawFileURI)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origin)
        return this
    def add_dataMode(dataMode:Eop_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(33, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origNetwork)
        return this
    def end():
        return b_.EndObject()

