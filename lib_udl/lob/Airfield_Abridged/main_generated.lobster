// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Airfield_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Airfield_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Airfield_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Airfield_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Airfield_Abridged_dataMode_Enum_EXERCISE = 3

class Airfield_Abridged

/// /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
class Airfield_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The ID of the parent site.
    /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Alternate Airfield identifier provided by source.
    /// Example: /// Example: 45301
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altAirfieldId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The airfield's World Area Code installation number (WAC-INNR).
    /// Example: /// Example: 0409-00039
    /// Constraints: Minimum length = 0, Maximum length = 32
    def wacINNR() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Air Mobility Command (AMC) Zone availability Report identifier.
    /// Example: /// Example: 231
    /// Constraints: Minimum length = 0, Maximum length = 32
    def zarId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The International Civil Aviation Organization (ICAO) code of the airfield.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def icao() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The International Aviation Transport Association (IATA) code of the airfield.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    def iata() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The Federal Aviation Administration (FAA) location identifier of this airfield.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    def faa() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The host nation code of this airfield, used for non-DoD/FAA locations.
    /// Example: /// Example: ZPU
    /// Constraints: Minimum length = 0, Maximum length = 16
    def hostNatCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The name of the airfield.
    /// Example: /// Example: USAF Academy AFLD
    /// Constraints: Minimum length = 1, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 1, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Elevation of the airfield above mean sea level, in feet.
    /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 33.562
    /// Constraints: No constraints specified.
    def elevFt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Elevation of the airfield above mean sea level, in meters.
    /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 10.29
    /// Constraints: No constraints specified.
    def elevM() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
    /// Example: /// Example: 7.35
    /// Constraints: No constraints specified.
    def magDec() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Region where the airfield resides.
    /// Example: /// Example: North America
    /// Constraints: Minimum length = 0, Maximum length = 32
    def regionName() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Closest city to the airfield's location.
    /// Example: /// Example: Colorado Springs
    /// Constraints: Minimum length = 0, Maximum length = 64
    def city() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// State or province of the airfield's location.
    /// Example: /// Example: Colorado
    /// Constraints: Minimum length = 0, Maximum length = 32
    def state() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Air Force geographic location code of the airfield.
    /// Example: /// Example: XLSX
    /// Constraints: Minimum length = 0, Maximum length = 16
    def geoloc() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
    /// Example: /// Example: -4:30
    /// Constraints: Minimum length = 0, Maximum length = 6
    def gmtOffset() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
    /// Example: /// Example: ABCDEF
    /// Constraints: Minimum length = 0, Maximum length = 36
    def suitabilityCodes() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
    /// Example: /// Example: AMZ
    /// Constraints: Minimum length = 0, Maximum length = 36
    def miscCodes() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The number of runways at the site.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def runways() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// The length of the longest runway at this airfield in feet.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    def maxRunwayLength() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// The URL link to information about airfield.
    /// Example: /// Example: URL Link to the Airfield
    /// Constraints: Minimum length = 0, Maximum length = 256
    def infoURL() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Airfield_Abridged_dataMode_Enum:
        return Airfield_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 72, 0))

def GetRootAsAirfield_Abridged(buf:string): return Airfield_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Airfield_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(35)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSite)
        return this
    def add_altAirfieldId(altAirfieldId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, altAirfieldId)
        return this
    def add_wacINNR(wacINNR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, wacINNR)
        return this
    def add_zarId(zarId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, zarId)
        return this
    def add_icao(icao:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, icao)
        return this
    def add_iata(iata:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, iata)
        return this
    def add_faa(faa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, faa)
        return this
    def add_hostNatCode(hostNatCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, hostNatCode)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, name)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, type)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(12, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(13, lon, 0.0)
        return this
    def add_elevFt(elevFt:float):
        b_.PrependFloat64Slot(14, elevFt, 0.0)
        return this
    def add_elevM(elevM:float):
        b_.PrependFloat64Slot(15, elevM, 0.0)
        return this
    def add_magDec(magDec:float):
        b_.PrependFloat64Slot(16, magDec, 0.0)
        return this
    def add_regionName(regionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, regionName)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, countryCode)
        return this
    def add_city(city:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, city)
        return this
    def add_state(state:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, state)
        return this
    def add_geoloc(geoloc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, geoloc)
        return this
    def add_gmtOffset(gmtOffset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, gmtOffset)
        return this
    def add_suitabilityCodes(suitabilityCodes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, suitabilityCodes)
        return this
    def add_miscCodes(miscCodes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, miscCodes)
        return this
    def add_runways(runways:int):
        b_.PrependInt32Slot(25, runways, 0)
        return this
    def add_maxRunwayLength(maxRunwayLength:int):
        b_.PrependInt32Slot(26, maxRunwayLength, 0)
        return this
    def add_infoURL(infoURL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, infoURL)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, origNetwork)
        return this
    def add_dataMode(dataMode:Airfield_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(34, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

