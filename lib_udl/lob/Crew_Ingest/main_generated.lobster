// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Crew_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Crew_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Crew_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Crew_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Crew_Ingest_dataMode_Enum_EXERCISE = 3

class Crew_Ingest

/// /// Crew Services.
class Crew_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: JHJDHjhuu929o92
    /// Constraints: Minimum length = 1, Maximum length = 36
    def origCrewId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Name of the formed crew.
    /// Example: /// Example: falcon
    /// Constraints: Minimum length = 0, Maximum length = 36
    def crewName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Crew Status (e.g. APPROVED, PENDING).
    /// Example: /// Example: APPROVED
    /// Constraints: Minimum length = 0, Maximum length = 64
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the Aircraft Sortie associated with this crew record.
    /// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def legalAlertTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def legalBravoTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def alertedTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Scheduled return time, in ISO8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def returnTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Crew Flight Duty Period (FDP) eligibility type.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 32
    def fdpEligType() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Flight Duty Period (FDP) type.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 32
    def fdpType() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Crew type.
    /// Example: /// Example: AIRLAND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def crewType() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
    /// Example: /// Example: 00016ALSQ
    /// Constraints: Minimum length = 0, Maximum length = 32
    def armsCrewUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// CrewMembers Collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def crewMembers(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def crewMembers_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Crew_Ingest_dataMode_Enum:
        return Crew_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 48, 0))

def GetRootAsCrew_Ingest(buf:string): return Crew_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Crew_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(23)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_origCrewId(origCrewId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, origCrewId)
        return this
    def add_crewName(crewName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, crewName)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, status)
        return this
    def add_idSortie(idSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSortie)
        return this
    def add_legalAlertTime(legalAlertTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, legalAlertTime)
        return this
    def add_legalBravoTime(legalBravoTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, legalBravoTime)
        return this
    def add_alertedTime(alertedTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, alertedTime)
        return this
    def add_returnTime(returnTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, returnTime)
        return this
    def add_fdpEligType(fdpEligType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, fdpEligType)
        return this
    def add_fdpType(fdpType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, fdpType)
        return this
    def add_crewType(crewType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, crewType)
        return this
    def add_armsCrewUnit(armsCrewUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, armsCrewUnit)
        return this
    def add_crewMembers(crewMembers:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, crewMembers)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origNetwork)
        return this
    def add_dataMode(dataMode:Crew_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(22, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def Crew_IngestStartCrewMembersVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Crew_IngestCreateCrewMembersVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

