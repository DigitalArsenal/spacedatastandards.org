// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Stage_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Stage_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Stage_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Stage_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Stage_Ingest_dataMode_Enum_EXERCISE = 3

class Stage_Ingest

/// /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
class Stage_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: STAGE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the launch vehicle record for this stage.
    /// Example: /// Example: LAUNCHVEHICLE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idLaunchVehicle() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Identifier of the Engine record for this stage.
    /// Example: /// Example: ENGINE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idEngine() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The stage number of this launch stage.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def stageNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    /// Example: /// Example: Electrostatic Ion
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// ID of the organization that manufactures this launch stage.
    /// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The number of the specified engines on this launch stage.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numEngines() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Stage length in meters.
    /// Example: /// Example: 25.13
    /// Constraints: No constraints specified.
    def length() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Stage maximum external diameter in meters.
    /// Example: /// Example: 3.95
    /// Constraints: No constraints specified.
    def diameter() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Stage gross mass in kg.
    /// Example: /// Example: 9956.1
    /// Constraints: No constraints specified.
    def mass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Engine vernier or additional engine type.
    /// Example: /// Example: vernier
    /// Constraints: Minimum length = 0, Maximum length = 32
    def vernier() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Number of vernier or additional engines.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numVernier() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Thrust of the stage main engine at sea level in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    def mainEngineThrustSeaLevel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Thrust of the stage main engine in a vacuum in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    def mainEngineThrustVacuum() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Total thrust of the stage at sea level in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    def thrustSeaLevel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Total thrust of the stage in a vacuum in kN.
    /// Example: /// Example: 733.4
    /// Constraints: No constraints specified.
    def thrustVacuum() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Total burn time of the stage engines in seconds.
    /// Example: /// Example: 256.3
    /// Constraints: No constraints specified.
    def burnTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Number of burns for the stage engines.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numBurns() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Total burn time of the vernier or additional stage engines in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def vernierBurnTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Total number of burns of the vernier or additional stage engines.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def vernierNumBurns() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Total thrust of one of the vernier or additional engines at sea level in kN.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    def vernierThrustSeaLevel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Total thrust of one of the vernier or additional engines in a vacuum in kN.
    /// Example: /// Example: 3.2
    /// Constraints: No constraints specified.
    def vernierThrustVacuum() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Number of launch stage elements used in this stage.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numStageElements() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Boolean indicating if this launch stage is reusable.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def reusable() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 52, 0))
    /// Boolean indicating if this launch stage can be restarted.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def restartable() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 54, 0))
    /// Control thruster 1 type.
    /// Example: /// Example: controlThruster1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def controlThruster1() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Number of type control thruster 1.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numControlThruster1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Control thruster 2 type.
    /// Example: /// Example: controlThruster2
    /// Constraints: Minimum length = 0, Maximum length = 64
    def controlThruster2() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Number of type control thruster 2.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numControlThruster2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// Array of URLs of photos of the stage.
    /// Example: /// Example: ['photoURL']
    /// Constraints: No constraints specified.
    def photoURLs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def photoURLs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Description/notes of the stage.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Description/notes of the stage avionics.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def avionicsNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Stage_Ingest_dataMode_Enum:
        return Stage_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 82, 0))

def GetRootAsStage_Ingest(buf:string): return Stage_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Stage_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(40)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idLaunchVehicle(idLaunchVehicle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idLaunchVehicle)
        return this
    def add_idEngine(idEngine:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idEngine)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, classificationMarking)
        return this
    def add_stageNumber(stageNumber:int):
        b_.PrependInt32Slot(4, stageNumber, 0)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, type)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, manufacturerOrgId)
        return this
    def add_numEngines(numEngines:int):
        b_.PrependInt32Slot(7, numEngines, 0)
        return this
    def add_length(length:float):
        b_.PrependFloat64Slot(8, length, 0.0)
        return this
    def add_diameter(diameter:float):
        b_.PrependFloat64Slot(9, diameter, 0.0)
        return this
    def add_mass(mass:float):
        b_.PrependFloat64Slot(10, mass, 0.0)
        return this
    def add_vernier(vernier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, vernier)
        return this
    def add_numVernier(numVernier:int):
        b_.PrependInt32Slot(12, numVernier, 0)
        return this
    def add_mainEngineThrustSeaLevel(mainEngineThrustSeaLevel:float):
        b_.PrependFloat64Slot(13, mainEngineThrustSeaLevel, 0.0)
        return this
    def add_mainEngineThrustVacuum(mainEngineThrustVacuum:float):
        b_.PrependFloat64Slot(14, mainEngineThrustVacuum, 0.0)
        return this
    def add_thrustSeaLevel(thrustSeaLevel:float):
        b_.PrependFloat64Slot(15, thrustSeaLevel, 0.0)
        return this
    def add_thrustVacuum(thrustVacuum:float):
        b_.PrependFloat64Slot(16, thrustVacuum, 0.0)
        return this
    def add_burnTime(burnTime:float):
        b_.PrependFloat64Slot(17, burnTime, 0.0)
        return this
    def add_numBurns(numBurns:int):
        b_.PrependInt32Slot(18, numBurns, 0)
        return this
    def add_vernierBurnTime(vernierBurnTime:float):
        b_.PrependFloat64Slot(19, vernierBurnTime, 0.0)
        return this
    def add_vernierNumBurns(vernierNumBurns:int):
        b_.PrependInt32Slot(20, vernierNumBurns, 0)
        return this
    def add_vernierThrustSeaLevel(vernierThrustSeaLevel:float):
        b_.PrependFloat64Slot(21, vernierThrustSeaLevel, 0.0)
        return this
    def add_vernierThrustVacuum(vernierThrustVacuum:float):
        b_.PrependFloat64Slot(22, vernierThrustVacuum, 0.0)
        return this
    def add_numStageElements(numStageElements:int):
        b_.PrependInt32Slot(23, numStageElements, 0)
        return this
    def add_reusable(reusable:bool):
        b_.PrependBoolSlot(24, reusable, 0)
        return this
    def add_restartable(restartable:bool):
        b_.PrependBoolSlot(25, restartable, 0)
        return this
    def add_controlThruster1(controlThruster1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, controlThruster1)
        return this
    def add_numControlThruster1(numControlThruster1:int):
        b_.PrependInt32Slot(27, numControlThruster1, 0)
        return this
    def add_controlThruster2(controlThruster2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, controlThruster2)
        return this
    def add_numControlThruster2(numControlThruster2:int):
        b_.PrependInt32Slot(29, numControlThruster2, 0)
        return this
    def add_photoURLs(photoURLs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, photoURLs)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, notes)
        return this
    def add_avionicsNotes(avionicsNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, avionicsNotes)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, origNetwork)
        return this
    def add_dataMode(dataMode:Stage_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(39, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def Stage_IngestStartPhotoURLsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Stage_IngestCreatePhotoURLsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Stage_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Stage_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

