// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirLoadPlan_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirLoadPlan_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirLoadPlan_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirLoadPlan_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirLoadPlan_Abridged_dataMode_Enum_EXERCISE = 3

class AirLoadPlan_Abridged

/// /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
class AirLoadPlan_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
    /// Constraints: Minimum length = 1, Maximum length = 64
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The UDL ID of the mission this record is associated with.
    /// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The mission number of the mission supporting this load plan.
    /// Example: /// Example: AJM123456123
    /// Constraints: Minimum length = 0, Maximum length = 16
    def missionNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The UDL ID of the aircraft sortie this record is associated with.
    /// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The leg number of the mission supporting this load plan.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    def legNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// The call sign of the mission supporting this load plan.
    /// Example: /// Example: RCH1234
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The tail number of the aircraft supporting this load plan.
    /// Example: /// Example: 77187
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The Model Design Series designation of the aircraft supporting this load plan.
    /// Example: /// Example: C17A
    /// Constraints: Minimum length = 1, Maximum length = 128
    def aircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The departure International Civil Organization (ICAO) code of the departure airfield.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def depICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
    /// Example: /// Example: W99
    /// Constraints: Minimum length = 0, Maximum length = 36
    def depAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def estDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The arrival International Civil Organization (ICAO) code of the landing airfield.
    /// Example: /// Example: ETAR
    /// Constraints: Minimum length = 0, Maximum length = 4
    def arrICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
    /// Example: /// Example: W99
    /// Constraints: Minimum length = 0, Maximum length = 36
    def arrAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def estArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The number of crew members on the aircraft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def crewSize() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
    /// Example: /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def cargoConfig() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
    /// Example: /// Example: Standard
    /// Constraints: Minimum length = 0, Maximum length = 128
    def equipConfig() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
    /// Example: /// Example: ER
    /// Constraints: Minimum length = 0, Maximum length = 128
    def tankConfig() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def basicWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def basicMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// The weight of usable fuel on board the aircraft, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def fuelWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def fuelMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The estimated weight of usable fuel upon landing, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def estLandingFuelWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def estLandingFuelMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// The basic weight of the aircraft including passengers and equipment, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def operatingWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def operatingMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// The weight of the cargo on board the aircraft, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def cargoWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def cargoMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def zeroFuelWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def zeroFuelMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: /// Example: 39.5
    /// Constraints: No constraints specified.
    def zeroFuelCG() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def grossWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def grossMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: /// Example: 38.8
    /// Constraints: No constraints specified.
    def grossCG() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// The gross weight of the aircraft upon landing, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def landingWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
    /// Example: /// Example: 2500.1
    /// Constraints: No constraints specified.
    def landingMoment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
    /// Example: /// Example: 38.2
    /// Constraints: No constraints specified.
    def landingCG() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def cargoBayFSMin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    def cargoBayFSMax() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// Width of the cargo bay, in meters.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    def cargoBayWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Source of the data.
    /// Example: /// Example: source
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirLoadPlan_Abridged_dataMode_Enum:
        return AirLoadPlan_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 100, 0))

def GetRootAsAirLoadPlan_Abridged(buf:string): return AirLoadPlan_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct AirLoadPlan_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(49)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, externalId)
        return this
    def add_idMission(idMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idMission)
        return this
    def add_missionNumber(missionNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, missionNumber)
        return this
    def add_idSortie(idSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSortie)
        return this
    def add_legNum(legNum:int):
        b_.PrependInt32Slot(6, legNum, 0)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, callSign)
        return this
    def add_tailNumber(tailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, tailNumber)
        return this
    def add_aircraftMDS(aircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, aircraftMDS)
        return this
    def add_depICAO(depICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, depICAO)
        return this
    def add_depAirfield(depAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, depAirfield)
        return this
    def add_estDepTime(estDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, estDepTime)
        return this
    def add_arrICAO(arrICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, arrICAO)
        return this
    def add_arrAirfield(arrAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, arrAirfield)
        return this
    def add_estArrTime(estArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, estArrTime)
        return this
    def add_crewSize(crewSize:int):
        b_.PrependInt32Slot(16, crewSize, 0)
        return this
    def add_cargoConfig(cargoConfig:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, cargoConfig)
        return this
    def add_equipConfig(equipConfig:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, equipConfig)
        return this
    def add_tankConfig(tankConfig:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, tankConfig)
        return this
    def add_basicWeight(basicWeight:float):
        b_.PrependFloat64Slot(20, basicWeight, 0.0)
        return this
    def add_basicMoment(basicMoment:float):
        b_.PrependFloat64Slot(21, basicMoment, 0.0)
        return this
    def add_fuelWeight(fuelWeight:float):
        b_.PrependFloat64Slot(22, fuelWeight, 0.0)
        return this
    def add_fuelMoment(fuelMoment:float):
        b_.PrependFloat64Slot(23, fuelMoment, 0.0)
        return this
    def add_estLandingFuelWeight(estLandingFuelWeight:float):
        b_.PrependFloat64Slot(24, estLandingFuelWeight, 0.0)
        return this
    def add_estLandingFuelMoment(estLandingFuelMoment:float):
        b_.PrependFloat64Slot(25, estLandingFuelMoment, 0.0)
        return this
    def add_operatingWeight(operatingWeight:float):
        b_.PrependFloat64Slot(26, operatingWeight, 0.0)
        return this
    def add_operatingMoment(operatingMoment:float):
        b_.PrependFloat64Slot(27, operatingMoment, 0.0)
        return this
    def add_cargoWeight(cargoWeight:float):
        b_.PrependFloat64Slot(28, cargoWeight, 0.0)
        return this
    def add_cargoMoment(cargoMoment:float):
        b_.PrependFloat64Slot(29, cargoMoment, 0.0)
        return this
    def add_zeroFuelWeight(zeroFuelWeight:float):
        b_.PrependFloat64Slot(30, zeroFuelWeight, 0.0)
        return this
    def add_zeroFuelMoment(zeroFuelMoment:float):
        b_.PrependFloat64Slot(31, zeroFuelMoment, 0.0)
        return this
    def add_zeroFuelCG(zeroFuelCG:float):
        b_.PrependFloat64Slot(32, zeroFuelCG, 0.0)
        return this
    def add_grossWeight(grossWeight:float):
        b_.PrependFloat64Slot(33, grossWeight, 0.0)
        return this
    def add_grossMoment(grossMoment:float):
        b_.PrependFloat64Slot(34, grossMoment, 0.0)
        return this
    def add_grossCG(grossCG:float):
        b_.PrependFloat64Slot(35, grossCG, 0.0)
        return this
    def add_landingWeight(landingWeight:float):
        b_.PrependFloat64Slot(36, landingWeight, 0.0)
        return this
    def add_landingMoment(landingMoment:float):
        b_.PrependFloat64Slot(37, landingMoment, 0.0)
        return this
    def add_landingCG(landingCG:float):
        b_.PrependFloat64Slot(38, landingCG, 0.0)
        return this
    def add_cargoBayFSMin(cargoBayFSMin:int):
        b_.PrependInt32Slot(39, cargoBayFSMin, 0)
        return this
    def add_cargoBayFSMax(cargoBayFSMax:int):
        b_.PrependInt32Slot(40, cargoBayFSMax, 0)
        return this
    def add_cargoBayWidth(cargoBayWidth:float):
        b_.PrependFloat64Slot(41, cargoBayWidth, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, origNetwork)
        return this
    def add_dataMode(dataMode:AirLoadPlan_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(48, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

