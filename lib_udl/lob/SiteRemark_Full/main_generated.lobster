// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SiteRemark_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SiteRemark_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SiteRemark_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SiteRemark_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SiteRemark_Full_dataMode_Enum_EXERCISE = 3

class SiteRemark_Full

/// /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
class SiteRemark_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 5000a3ef-8e39-2551-80f1-b3cd1895fe7b
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The ID of the site to which this remark applies.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the Site Remark record from the originating system.
    /// Example: /// Example: 123456ABC
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origRmkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The name of the remark.
    /// Example: /// Example: Remark name
    /// Constraints: Minimum length = 0, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
    /// Example: /// Example: Restriction
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The text of the remark.
    /// Example: /// Example: This is a remark
    /// Constraints: Minimum length = 1, Maximum length = 1024
    def text() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The remark type identifier. 
    /// For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
    /// Example: /// Example: M
    /// Constraints: Minimum length = 0, Maximum length = 16
    def code() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SiteRemark_Full_dataMode_Enum:
        return SiteRemark_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 30, 0))

def GetRootAsSiteRemark_Full(buf:string): return SiteRemark_Full { buf, flatbuffers.indirect(buf, 0) }

struct SiteRemark_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(14)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSite)
        return this
    def add_origRmkId(origRmkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origRmkId)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, name)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, type)
        return this
    def add_text(text:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, text)
        return this
    def add_code(code:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, code)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origNetwork)
        return this
    def add_dataMode(dataMode:SiteRemark_Full_dataMode_Enum):
        b_.PrependInt8Slot(13, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

