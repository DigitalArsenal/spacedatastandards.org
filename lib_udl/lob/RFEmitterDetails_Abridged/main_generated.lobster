// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum RFEmitterDetails_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    RFEmitterDetails_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    RFEmitterDetails_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    RFEmitterDetails_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    RFEmitterDetails_Abridged_dataMode_Enum_EXERCISE = 3

class RFEmitterDetails_Abridged

/// /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
class RFEmitterDetails_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RFEMITTERDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent RF Emitter.
    /// Example: /// Example: RFEMITTER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idRFEmitter() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Designator of this RF Emitter.
    /// Example: /// Example: DESIGNATOR
    /// Constraints: Minimum length = 0, Maximum length = 128
    def designator() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Optional alternate name or alias for this RF Emitter.
    /// Example: /// Example: ALTERNATE_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    def altName() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Family of this RF Emitter type.
    /// Example: /// Example: FAMILY
    /// Constraints: Minimum length = 0, Maximum length = 128
    def family() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Name of the production facility for this RF Emitter.
    /// Example: /// Example: PRODUCTION_FACILITY
    /// Constraints: Minimum length = 0, Maximum length = 128
    def productionFacilityName() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Alternate facility name for this RF Emitter.
    /// Example: /// Example: ALTERNATE_FACILITY_NAME
    /// Constraints: Minimum length = 0, Maximum length = 128
    def alternateFacilityName() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Unique identifier of the organization which manufactures this RF Emitter.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Unique identifier of the location of the production facility for this RF Emitter.
    /// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def productionFacilityLocationId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def systemSensitivityStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
    /// Example: /// Example: 150.23
    /// Constraints: No constraints specified.
    def systemSensitivityEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Type or name of receiver.
    /// Example: /// Example: RECEIVER_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def receiverType() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Receiver sensitivity in dBm.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def receiverSensitivity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Receiver bandwidth in Mhz.
    /// Example: /// Example: 15.23
    /// Constraints: No constraints specified.
    def receiverBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Transmitter frequency in Mhz.
    /// Example: /// Example: 105.9
    /// Constraints: No constraints specified.
    def transmitterFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Transmitter bandwidth in Mhz.
    /// Example: /// Example: 0.125
    /// Constraints: No constraints specified.
    def transmitterBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Transmit power in Watts.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def transmitPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Barrage noise bandwidth in Mhz.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def barrageNoiseBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Doppler noise value in Mhz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def dopplerNoise() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Digital Form Radio Memory instantaneous bandwidth in Mhz.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def drfmInstantaneousBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Number of channels.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numChannels() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// Number of bits.
    /// Example: /// Example: 256
    /// Constraints: No constraints specified.
    def numBits() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def antennaSize(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def antennaSize_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// For parabolic/dish antennas, the diameter of the antenna in meters.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def antennaDiameter() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Notes on the RF Emitter.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Secondary notes on the RF Emitter.
    /// Example: /// Example: MORE_NOTES
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def secondaryNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Detailed description of the RF Emitter.
    /// Example: /// Example: DESCRIPTION
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Array of URLs containing additional information on this RF Emitter.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def urls(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def urls_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> RFEmitterDetails_Abridged_dataMode_Enum:
        return RFEmitterDetails_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)

def GetRootAsRFEmitterDetails_Abridged(buf:string): return RFEmitterDetails_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct RFEmitterDetails_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(35)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idRFEmitter(idRFEmitter:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idRFEmitter)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_designator(designator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, designator)
        return this
    def add_altName(altName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, altName)
        return this
    def add_family(family:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, family)
        return this
    def add_productionFacilityName(productionFacilityName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, productionFacilityName)
        return this
    def add_alternateFacilityName(alternateFacilityName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, alternateFacilityName)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, manufacturerOrgId)
        return this
    def add_productionFacilityLocationId(productionFacilityLocationId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, productionFacilityLocationId)
        return this
    def add_systemSensitivityStart(systemSensitivityStart:float):
        b_.PrependFloat64Slot(10, systemSensitivityStart, 0.0)
        return this
    def add_systemSensitivityEnd(systemSensitivityEnd:float):
        b_.PrependFloat64Slot(11, systemSensitivityEnd, 0.0)
        return this
    def add_receiverType(receiverType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, receiverType)
        return this
    def add_receiverSensitivity(receiverSensitivity:float):
        b_.PrependFloat64Slot(13, receiverSensitivity, 0.0)
        return this
    def add_receiverBandwidth(receiverBandwidth:float):
        b_.PrependFloat64Slot(14, receiverBandwidth, 0.0)
        return this
    def add_transmitterFrequency(transmitterFrequency:float):
        b_.PrependFloat64Slot(15, transmitterFrequency, 0.0)
        return this
    def add_transmitterBandwidth(transmitterBandwidth:float):
        b_.PrependFloat64Slot(16, transmitterBandwidth, 0.0)
        return this
    def add_transmitPower(transmitPower:float):
        b_.PrependFloat64Slot(17, transmitPower, 0.0)
        return this
    def add_barrageNoiseBandwidth(barrageNoiseBandwidth:float):
        b_.PrependFloat64Slot(18, barrageNoiseBandwidth, 0.0)
        return this
    def add_dopplerNoise(dopplerNoise:float):
        b_.PrependFloat64Slot(19, dopplerNoise, 0.0)
        return this
    def add_drfmInstantaneousBandwidth(drfmInstantaneousBandwidth:float):
        b_.PrependFloat64Slot(20, drfmInstantaneousBandwidth, 0.0)
        return this
    def add_numChannels(numChannels:int):
        b_.PrependInt32Slot(21, numChannels, 0)
        return this
    def add_numBits(numBits:int):
        b_.PrependInt32Slot(22, numBits, 0)
        return this
    def add_antennaSize(antennaSize:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, antennaSize)
        return this
    def add_antennaDiameter(antennaDiameter:float):
        b_.PrependFloat64Slot(24, antennaDiameter, 0.0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, notes)
        return this
    def add_secondaryNotes(secondaryNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, secondaryNotes)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, description)
        return this
    def add_urls(urls:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, urls)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, origNetwork)
        return this
    def add_dataMode(dataMode:RFEmitterDetails_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(32, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdBy)
        return this
    def end():
        return b_.EndObject()

def RFEmitterDetails_AbridgedStartAntennaSizeVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFEmitterDetails_AbridgedCreateAntennaSizeVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFEmitterDetails_AbridgedStartUrlsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFEmitterDetails_AbridgedCreateUrlsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

