// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum GroundImagery_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    GroundImagery_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    GroundImagery_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    GroundImagery_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    GroundImagery_Abridged_dataMode_Enum_EXERCISE = 3

class GroundImagery_Abridged

/// /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
class GroundImagery_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: GROUNDIMAGERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Optional ID of the sensor that produced this ground image.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Timestamp the image was captured/produced.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def imageTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Name of the image file.
    /// Example: /// Example: Example file name
    /// Constraints: Minimum length = 1, Maximum length = 128
    def filename() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: Minimum length = 0, Maximum length = 65535
    def regionText() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: Minimum length = 0, Maximum length = 65535
    def regionGeoJSON() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Type of region as projected on the ground.
    /// Example: /// Example: Polygon
    /// Constraints: Minimum length = 0, Maximum length = 64
    def regionType() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def regionNDims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 4326
    /// Constraints: No constraints specified.
    def regionSRid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
    /// Example: /// Example: SUBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def subjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Optional name/description associated with this image.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 0, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> GroundImagery_Abridged_dataMode_Enum:
        return GroundImagery_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Description and notes of the image.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Optional, field indicating type of image, NITF, PNG, etc.
    /// Example: /// Example: PNG
    /// Constraints: Minimum length = 1, Maximum length = 16
    def format() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def filesize() -> int:
        return flatbuffers.field_int64(buf_, pos_, 50, 0)
    /// MD5 value of the file. The ingest/create operation will automatically generate the value.
    /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
    /// Constraints: Minimum length = 1, Maximum length = 256
    def checksumValue() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)

def GetRootAsGroundImagery_Abridged(buf:string): return GroundImagery_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct GroundImagery_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(25)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idSensor)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_imageTime(imageTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, imageTime)
        return this
    def add_filename(filename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, filename)
        return this
    def add_regionText(regionText:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, regionText)
        return this
    def add_regionGeoJSON(regionGeoJSON:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, regionGeoJSON)
        return this
    def add_regionType(regionType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, regionType)
        return this
    def add_regionNDims(regionNDims:int):
        b_.PrependInt32Slot(8, regionNDims, 0)
        return this
    def add_regionSRid(regionSRid:int):
        b_.PrependInt32Slot(9, regionSRid, 0)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, origSensorId)
        return this
    def add_subjectId(subjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, subjectId)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, name)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, sourceDL)
        return this
    def add_dataMode(dataMode:GroundImagery_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(17, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, createdBy)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, transactionId)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, notes)
        return this
    def add_format(format:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, format)
        return this
    def add_filesize(filesize:int):
        b_.PrependInt64Slot(23, filesize, 0)
        return this
    def add_checksumValue(checksumValue:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, checksumValue)
        return this
    def end():
        return b_.EndObject()

