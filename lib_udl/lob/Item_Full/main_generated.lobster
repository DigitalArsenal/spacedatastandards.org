// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Item_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Item_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Item_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Item_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Item_Full_dataMode_Enum_EXERCISE = 3

class Item_Full

/// /// No description available.
class Item_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The UDL ID of the air load plan this item is associated with.
    /// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAirLoadPlan() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
    /// Example: /// Example: 12345ABCD
    /// Constraints: Minimum length = 1, Maximum length = 36
    def scanCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    /// Example: /// Example: bID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def scGenTool() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
    /// Example: /// Example: CARGO
    /// Constraints: Minimum length = 1, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
    /// Example: /// Example: PALLET
    /// Constraints: Minimum length = 0, Maximum length = 32
    def cargoType() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Name of the item. Applicable for equipment and cargo item types only.
    /// Example: /// Example: Product Name
    /// Constraints: Minimum length = 0, Maximum length = 100
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
    /// Example: /// Example: RMS
    /// Constraints: Minimum length = 0, Maximum length = 36
    def destination() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The departure code or location where this item has left or is leaving.
    /// Example: /// Example: CHS
    /// Constraints: Minimum length = 0, Maximum length = 36
    def departure() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The name of the unit receiving this item.
    /// Example: /// Example: 50 SBN
    /// Constraints: Minimum length = 0, Maximum length = 100
    def receivingUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The military branch receiving this item.
    /// Example: /// Example: Air Force
    /// Constraints: Minimum length = 0, Maximum length = 32
    def receivingBranch() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: /// Example: 2023-03-13
    /// Constraints: No constraints specified.
    def lastArrDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The unit line number of this item.
    /// Example: /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 16
    def uln() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Weight of the item in kilograms (if item is a passenger, include on-person bags).
    /// Example: /// Example: 5443.335
    /// Constraints: No constraints specified.
    def weight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-03-13T16:06:00.123Z
    /// Constraints: No constraints specified.
    def weightTS() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The classification code of the commodity or group of commodities.
    /// Example: /// Example: 2304116
    /// Constraints: Minimum length = 0, Maximum length = 50
    def commodityCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
    /// Example: /// Example: STCC
    /// Constraints: Minimum length = 0, Maximum length = 36
    def commoditySys() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The code denoting the type of material item.
    /// Example: /// Example: 530500234
    /// Constraints: Minimum length = 0, Maximum length = 36
    def productCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
    /// Example: /// Example: NSN
    /// Constraints: Minimum length = 0, Maximum length = 32
    def productSys() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Width of the cargo in meters. Applicable for cargo item types only.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def width() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Length of the cargo in meters. Applicable for cargo item types only.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def length() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Height of the cargo in meters. Applicable for cargo item types only.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def height() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The volume of the item, in cubic meters. Applicable for cargo item types only.
    /// Example: /// Example: 7.8902
    /// Constraints: No constraints specified.
    def volume() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Center of gravity position of the item, measured from the item's front datum, in centimeters.
    /// Example: /// Example: 112.014
    /// Constraints: No constraints specified.
    def cg() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
    /// Example: /// Example: 412.1
    /// Constraints: No constraints specified.
    def fs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    def centerlineOffset() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
    /// Example: /// Example: 4000.1
    /// Constraints: No constraints specified.
    def moment() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def airdrop() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 60, 0))
    /// Transportation Control Number of the cargo. Applicable for cargo item types only.
    /// Example: /// Example: M1358232245912XXX
    /// Constraints: Minimum length = 0, Maximum length = 17
    def tcn() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Array of UN hazard classes or division codes that apply to this item.
    /// Example: /// Example: [1.1, 1.2]
    /// Constraints: No constraints specified.
    def hazCodes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def hazCodes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Net explosive weight of the item, in kilograms.
    /// Example: /// Example: 51.437
    /// Constraints: No constraints specified.
    def netExpWt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Flag indicating this item acts as a container and contains additional items.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def container() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// Array of tracking identifiers that are contained within this item.
    /// Example: /// Example: ['2UJ8843K', '745YV1T65']
    /// Constraints: No constraints specified.
    def itemContains(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def itemContains_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numPalletPos() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// United States Distinguished Visitor Code, only applicable to people.
    /// Example: /// Example: DV-2
    /// Constraints: Minimum length = 0, Maximum length = 16
    def dvCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Optional notes or comments about this item.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
    /// Example: /// Example: ['key1', 'key2']
    /// Constraints: No constraints specified.
    def keys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 78) + i * 4)
    def keys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 78)
    /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: /// Example: ['value1', 'value2']
    /// Constraints: No constraints specified.
    def values(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 80) + i * 4)
    def values_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 80)
    /// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
    /// Example: /// Example: Alt Data Format
    /// Constraints: Minimum length = 0, Maximum length = 100
    def altDataFormat() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
    /// Example: /// Example: Accepting System
    /// Constraints: Minimum length = 0, Maximum length = 100
    def accSystem() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Additional data required to find this item in the accepting system.
    /// Example: /// Example: Accepting System Notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def accSysNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
    /// Example: /// Example: ['System key1', 'System key2']
    /// Constraints: No constraints specified.
    def accSysKeys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 88) + i * 4)
    def accSysKeys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 88)
    /// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
    /// Example: /// Example: ['System value1', 'System value2']
    /// Constraints: No constraints specified.
    def accSysValues(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 90) + i * 4)
    def accSysValues_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 90)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Item_Full_dataMode_Enum:
        return Item_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 108, 0))

def GetRootAsItem_Full(buf:string): return Item_Full { buf, flatbuffers.indirect(buf, 0) }

struct Item_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(53)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idAirLoadPlan(idAirLoadPlan:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idAirLoadPlan)
        return this
    def add_scanCode(scanCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, scanCode)
        return this
    def add_scGenTool(scGenTool:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, scGenTool)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, type)
        return this
    def add_cargoType(cargoType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, cargoType)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, name)
        return this
    def add_destination(destination:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, destination)
        return this
    def add_departure(departure:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, departure)
        return this
    def add_receivingUnit(receivingUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, receivingUnit)
        return this
    def add_receivingBranch(receivingBranch:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, receivingBranch)
        return this
    def add_lastArrDate(lastArrDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, lastArrDate)
        return this
    def add_uln(uln:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, uln)
        return this
    def add_weight(weight:float):
        b_.PrependFloat64Slot(14, weight, 0.0)
        return this
    def add_weightTS(weightTS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, weightTS)
        return this
    def add_commodityCode(commodityCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, commodityCode)
        return this
    def add_commoditySys(commoditySys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, commoditySys)
        return this
    def add_productCode(productCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, productCode)
        return this
    def add_productSys(productSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, productSys)
        return this
    def add_width(width:float):
        b_.PrependFloat64Slot(20, width, 0.0)
        return this
    def add_length(length:float):
        b_.PrependFloat64Slot(21, length, 0.0)
        return this
    def add_height(height:float):
        b_.PrependFloat64Slot(22, height, 0.0)
        return this
    def add_volume(volume:float):
        b_.PrependFloat64Slot(23, volume, 0.0)
        return this
    def add_cg(cg:float):
        b_.PrependFloat64Slot(24, cg, 0.0)
        return this
    def add_fs(fs:float):
        b_.PrependFloat64Slot(25, fs, 0.0)
        return this
    def add_centerlineOffset(centerlineOffset:float):
        b_.PrependFloat64Slot(26, centerlineOffset, 0.0)
        return this
    def add_moment(moment:float):
        b_.PrependFloat64Slot(27, moment, 0.0)
        return this
    def add_airdrop(airdrop:bool):
        b_.PrependBoolSlot(28, airdrop, 0)
        return this
    def add_tcn(tcn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, tcn)
        return this
    def add_hazCodes(hazCodes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, hazCodes)
        return this
    def add_netExpWt(netExpWt:float):
        b_.PrependFloat64Slot(31, netExpWt, 0.0)
        return this
    def add_container(container:bool):
        b_.PrependBoolSlot(32, container, 0)
        return this
    def add_itemContains(itemContains:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, itemContains)
        return this
    def add_numPalletPos(numPalletPos:int):
        b_.PrependInt32Slot(34, numPalletPos, 0)
        return this
    def add_dvCode(dvCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, dvCode)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, notes)
        return this
    def add_keys(keys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, keys)
        return this
    def add_values(values:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, values)
        return this
    def add_altDataFormat(altDataFormat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, altDataFormat)
        return this
    def add_accSystem(accSystem:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, accSystem)
        return this
    def add_accSysNotes(accSysNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, accSysNotes)
        return this
    def add_accSysKeys(accSysKeys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, accSysKeys)
        return this
    def add_accSysValues(accSysValues:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, accSysValues)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, origNetwork)
        return this
    def add_dataMode(dataMode:Item_Full_dataMode_Enum):
        b_.PrependInt8Slot(52, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def Item_FullStartHazCodesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Item_FullCreateHazCodesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Item_FullStartItemContainsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Item_FullCreateItemContainsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Item_FullStartKeysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Item_FullCreateKeysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Item_FullStartValuesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Item_FullCreateValuesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Item_FullStartAccSysKeysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Item_FullCreateAccSysKeysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Item_FullStartAccSysValuesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Item_FullCreateAccSysValuesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

