// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiDwell_Abridged

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiDwell_Abridged : flatbuffers.handle
    /// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Flag indicating the last dwell of the revisit.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def d4() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 8, 0))
    /// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d5() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    def d6() -> int:
        return flatbuffers.field_int64(buf_, pos_, 12, 0)
    /// North-South position of the sensor at the temporal center of the dwell, in degrees.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def d7() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d8() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d9() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def d10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def d11() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d12() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d13() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d14() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def d15() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Ground speed of the sensor at the time of the dwell, in millimeters per second.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d16() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Velocity of the sensor in the vertical direction, in decimeters per second.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d17() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Standard deviation of the estimate of the sensor track, in degrees.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def d18() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Standard deviation of estimate of the sensor speed, in millimeters per second.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d19() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def d20() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def d21() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Pitch angle of the platform at the time of the dwell, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d22() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Roll angle of the platform at the time of the dwell, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d23() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d24() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d25() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d26() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d27() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d28() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d29() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def d30() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def d31() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def d32(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def d32_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Dwell timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def dwellts() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)

def GetRootAsMtiDwell_Abridged(buf:string): return MtiDwell_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct MtiDwell_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(32)
        return this
    def add_d2(d2:int):
        b_.PrependInt32Slot(0, d2, 0)
        return this
    def add_d3(d3:int):
        b_.PrependInt32Slot(1, d3, 0)
        return this
    def add_d4(d4:bool):
        b_.PrependBoolSlot(2, d4, 0)
        return this
    def add_d5(d5:int):
        b_.PrependInt32Slot(3, d5, 0)
        return this
    def add_d6(d6:int):
        b_.PrependInt64Slot(4, d6, 0)
        return this
    def add_d7(d7:float):
        b_.PrependFloat64Slot(5, d7, 0.0)
        return this
    def add_d8(d8:float):
        b_.PrependFloat64Slot(6, d8, 0.0)
        return this
    def add_d9(d9:int):
        b_.PrependInt32Slot(7, d9, 0)
        return this
    def add_d10(d10:float):
        b_.PrependFloat64Slot(8, d10, 0.0)
        return this
    def add_d11(d11:float):
        b_.PrependFloat64Slot(9, d11, 0.0)
        return this
    def add_d12(d12:int):
        b_.PrependInt32Slot(10, d12, 0)
        return this
    def add_d13(d13:int):
        b_.PrependInt32Slot(11, d13, 0)
        return this
    def add_d14(d14:int):
        b_.PrependInt32Slot(12, d14, 0)
        return this
    def add_d15(d15:float):
        b_.PrependFloat64Slot(13, d15, 0.0)
        return this
    def add_d16(d16:int):
        b_.PrependInt32Slot(14, d16, 0)
        return this
    def add_d17(d17:int):
        b_.PrependInt32Slot(15, d17, 0)
        return this
    def add_d18(d18:int):
        b_.PrependInt32Slot(16, d18, 0)
        return this
    def add_d19(d19:int):
        b_.PrependInt32Slot(17, d19, 0)
        return this
    def add_d20(d20:int):
        b_.PrependInt32Slot(18, d20, 0)
        return this
    def add_d21(d21:float):
        b_.PrependFloat64Slot(19, d21, 0.0)
        return this
    def add_d22(d22:float):
        b_.PrependFloat64Slot(20, d22, 0.0)
        return this
    def add_d23(d23:float):
        b_.PrependFloat64Slot(21, d23, 0.0)
        return this
    def add_d24(d24:float):
        b_.PrependFloat64Slot(22, d24, 0.0)
        return this
    def add_d25(d25:float):
        b_.PrependFloat64Slot(23, d25, 0.0)
        return this
    def add_d26(d26:float):
        b_.PrependFloat64Slot(24, d26, 0.0)
        return this
    def add_d27(d27:float):
        b_.PrependFloat64Slot(25, d27, 0.0)
        return this
    def add_d28(d28:float):
        b_.PrependFloat64Slot(26, d28, 0.0)
        return this
    def add_d29(d29:float):
        b_.PrependFloat64Slot(27, d29, 0.0)
        return this
    def add_d30(d30:float):
        b_.PrependFloat64Slot(28, d30, 0.0)
        return this
    def add_d31(d31:int):
        b_.PrependInt32Slot(29, d31, 0)
        return this
    def add_d32(d32:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, d32)
        return this
    def add_dwellts(dwellts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, dwellts)
        return this
    def end():
        return b_.EndObject()

def MtiDwell_AbridgedStartD32Vector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MtiDwell_AbridgedCreateD32Vector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

