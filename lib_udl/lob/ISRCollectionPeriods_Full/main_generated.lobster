// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class ISRCollectionPeriods_Full

/// /// Tasking collection periods.
class ISRCollectionPeriods_Full : flatbuffers.handle
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def planned() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Actual start and stop for the collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def actual(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def actual_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)

def GetRootAsISRCollectionPeriods_Full(buf:string): return ISRCollectionPeriods_Full { buf, flatbuffers.indirect(buf, 0) }

struct ISRCollectionPeriods_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(2)
        return this
    def add_planned(planned:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, planned)
        return this
    def add_actual(actual:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, actual)
        return this
    def end():
        return b_.EndObject()

def ISRCollectionPeriods_FullStartActualVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollectionPeriods_FullCreateActualVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

