// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Maneuver_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Maneuver_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Maneuver_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Maneuver_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Maneuver_Full_dataMode_Enum_EXERCISE = 3

enum Maneuver_Full_sourcedDataTypes_Enum:
    /// No description available.
    Maneuver_Full_sourcedDataTypes_Enum_EO = 0
    /// No description available.
    Maneuver_Full_sourcedDataTypes_Enum_RADAR = 1
    /// No description available.
    Maneuver_Full_sourcedDataTypes_Enum_RF = 2
    /// No description available.
    Maneuver_Full_sourcedDataTypes_Enum_DOA = 3
    /// No description available.
    Maneuver_Full_sourcedDataTypes_Enum_ELSET = 4
    /// No description available.
    Maneuver_Full_sourcedDataTypes_Enum_SV = 5

class Maneuver_Full

/// /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
class Maneuver_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MANEUVER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
    /// Example: /// Example: 2023-11-16T04:15:00.0001Z
    /// Constraints: No constraints specified.
    def reportTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
    /// Example: /// Example: 2023-11-16T01:05:16.835689Z
    /// Constraints: No constraints specified.
    def eventStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Maneuver event end time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2023-11-16T01:09:01.350012Z
    /// Constraints: No constraints specified.
    def eventEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
    /// Example: /// Example: 600.72
    /// Constraints: No constraints specified.
    def totalBurnTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2023-11-16T03:55:51Z
    /// Constraints: No constraints specified.
    def odFitEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    /// Example: /// Example: 12
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// Uncertainty in the occurrence of this maneuver (0 - 1).
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def maneuverUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
    /// Example: /// Example: North-South Station Keeping
    /// Constraints: Minimum length = 0, Maximum length = 64
    def characterization() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
    /// Example: /// Example: 0.15
    /// Constraints: No constraints specified.
    def characterizationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
    /// Example: /// Example: EVENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def eventId() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
    /// CANCELLED:  A previously planned maneuver whose execution was cancelled.
    /// PLANNED:  A maneuver planned to take place at the eventStartTime.
    /// POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
    /// REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
    /// VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
    /// Example: /// Example: POSSIBLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
    /// Example: /// Example: 0.715998327
    /// Constraints: No constraints specified.
    def deltaPos() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    /// Example: /// Example: -0.022172844
    /// Constraints: No constraints specified.
    def deltaPosU() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    /// Example: /// Example: -0.033700154
    /// Constraints: No constraints specified.
    def deltaPosV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    /// Example: /// Example: -0.714861014
    /// Constraints: No constraints specified.
    def deltaPosW() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
    /// Example: /// Example: 0.000631505
    /// Constraints: No constraints specified.
    def deltaVel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    /// Example: /// Example: 3.50165629389647e-05
    /// Constraints: No constraints specified.
    def deltaVelU() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    /// Example: /// Example: 0.000544413
    /// Constraints: No constraints specified.
    def deltaVelV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    /// Example: /// Example: -0.000318099
    /// Constraints: No constraints specified.
    def deltaVelW() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Difference in mass before and after the maneuver, in kg.
    /// Example: /// Example: 0.15
    /// Constraints: No constraints specified.
    def deltaMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Optional identifier of the element set for the pre-maneuver orbit.
    /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    /// Constraints: Minimum length = 0, Maximum length = 36
    def preEventIdElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def preEventElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
    /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    /// Constraints: Minimum length = 0, Maximum length = 36
    def preEventIdStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def preEventStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Pre-event X component of position in ECI space, in km.
    /// Example: /// Example: 3584.432545
    /// Constraints: No constraints specified.
    def prePosX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Pre-event Y component of position in ECI space, in km.
    /// Example: /// Example: 42028.43245
    /// Constraints: No constraints specified.
    def prePosY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Pre-event Z component of position in ECI space, in km.
    /// Example: /// Example: -1.97765
    /// Constraints: No constraints specified.
    def prePosZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Pre-event X component of velocity in ECI space, in km/sec.
    /// Example: /// Example: -2.543266
    /// Constraints: No constraints specified.
    def preVelX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Pre-event Y component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.24876
    /// Constraints: No constraints specified.
    def preVelY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Pre-event Z component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.0067352
    /// Constraints: No constraints specified.
    def preVelZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    /// Example: /// Example: 4.51e-07
    /// Constraints: No constraints specified.
    def preRadiationPressCoeff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    /// Example: /// Example: 0.000437116
    /// Constraints: No constraints specified.
    def preBallisticCoeff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35802
    /// Constraints: No constraints specified.
    def preApogee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35786.5
    /// Constraints: No constraints specified.
    def prePerigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Pre-event spacecraft orbital inclination, in degrees. 0-180.
    /// Example: /// Example: 0.0336
    /// Constraints: No constraints specified.
    def preInclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Pre-event spacecraft eccentricity.
    /// Example: /// Example: 0.00017
    /// Constraints: No constraints specified.
    def preEccentricity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Pre-event spacecraft orbital period, in minutes.
    /// Example: /// Example: 1436.12
    /// Constraints: No constraints specified.
    def prePeriod() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    /// Example: /// Example: 98.3336
    /// Constraints: No constraints specified.
    def preRAAN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
    /// Example: /// Example: 42165.1
    /// Constraints: No constraints specified.
    def preSMA() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -93.12
    /// Constraints: No constraints specified.
    def preGeoLongitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    /// Example: /// Example: -0.0125
    /// Constraints: No constraints specified.
    def preDriftRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    /// Example: /// Example: 0.215
    /// Constraints: No constraints specified.
    def preSigmaU() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    /// Example: /// Example: 1.97
    /// Constraints: No constraints specified.
    def preSigmaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    /// Example: /// Example: 0.208
    /// Constraints: No constraints specified.
    def preSigmaW() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// Optional identifier of the element set for the post-maneuver orbit.
    /// Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
    /// Constraints: Minimum length = 0, Maximum length = 36
    def postEventIdElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def postEventElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
    /// Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
    /// Constraints: Minimum length = 0, Maximum length = 36
    def postEventIdStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def postEventStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Post-event X component of position in ECI space, in km.
    /// Example: /// Example: 3589.351957
    /// Constraints: No constraints specified.
    def postPosX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Post-event Y component of position in ECI space, in km.
    /// Example: /// Example: 42017.26823
    /// Constraints: No constraints specified.
    def postPosY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// Post-event Z component of position in ECI space, in km.
    /// Example: /// Example: -1.27161796
    /// Constraints: No constraints specified.
    def postPosZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Post-event X component of velocity in ECI space, in km/sec.
    /// Example: /// Example: -3.063152826
    /// Constraints: No constraints specified.
    def postVelX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 120, 0.0)
    /// Post-event Y component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.261586769
    /// Constraints: No constraints specified.
    def postVelY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// Post-event Z component of velocity in ECI space, in km/sec.
    /// Example: /// Example: 0.006842148
    /// Constraints: No constraints specified.
    def postVelZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    /// Example: /// Example: 4.51e-07
    /// Constraints: No constraints specified.
    def postRadiationPressCoeff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 126, 0.0)
    /// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    /// Example: /// Example: 0.000433209
    /// Constraints: No constraints specified.
    def postBallisticCoeff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 128, 0.0)
    /// Post-event spacecraft apogee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35800.1
    /// Constraints: No constraints specified.
    def postApogee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 130, 0.0)
    /// Post-event spacecraft perigee (measured from Earth center), in kilometers.
    /// Example: /// Example: 35787.9
    /// Constraints: No constraints specified.
    def postPerigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 132, 0.0)
    /// Post-event spacecraft orbital inclination, in degrees. 0-180.
    /// Example: /// Example: 0.0327
    /// Constraints: No constraints specified.
    def postInclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 134, 0.0)
    /// Post-event spacecraft eccentricity.
    /// Example: /// Example: 0.000164
    /// Constraints: No constraints specified.
    def postEccentricity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 136, 0.0)
    /// Post-event spacecraft orbital period, in minutes.
    /// Example: /// Example: 1436.01
    /// Constraints: No constraints specified.
    def postPeriod() -> float:
        return flatbuffers.field_float64(buf_, pos_, 138, 0.0)
    /// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    /// Example: /// Example: 98.3335
    /// Constraints: No constraints specified.
    def postRAAN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 140, 0.0)
    /// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
    /// Example: /// Example: 42164.87
    /// Constraints: No constraints specified.
    def postSMA() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -93.15
    /// Constraints: No constraints specified.
    def postGeoLongitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 144, 0.0)
    /// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    /// Example: /// Example: -0.0125
    /// Constraints: No constraints specified.
    def postDriftRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    /// Example: /// Example: 12.285
    /// Constraints: No constraints specified.
    def postSigmaU() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    /// Example: /// Example: 71.339
    /// Constraints: No constraints specified.
    def postSigmaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 150, 0.0)
    /// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    /// Example: /// Example: 12.77
    /// Constraints: No constraints specified.
    def postSigmaW() -> float:
        return flatbuffers.field_float64(buf_, pos_, 152, 0.0)
    /// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def cov(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 154) + i * 4)
    def cov_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 154)
    ///  Estimated mass of the object following the maneuver, in kg.
    /// Example: /// Example: 1844.5
    /// Constraints: No constraints specified.
    def postMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 156, 0.0)
    /// Estimated area of the object following the maneuver, in meters squared.
    /// Example: /// Example: 35.77
    /// Constraints: No constraints specified.
    def postArea() -> float:
        return flatbuffers.field_float64(buf_, pos_, 158, 0.0)
    /// Number of observations used to generate the maneuver data.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numObs() -> int:
        return flatbuffers.field_int32(buf_, pos_, 160, 0)
    /// Description and notes of the maneuver.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 164)
    /// Name of the state model used to generate the maneuver data.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 0, Maximum length = 32
    def stateModel() -> string:
        return flatbuffers.field_string(buf_, pos_, 166)
    /// Version of the state model used to generate the maneuver data.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def stateModelVersion() -> float:
        return flatbuffers.field_float64(buf_, pos_, 168, 0.0)
    /// The total number of estimated acceleration points during the maneuver.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numAccelPoints() -> int:
        return flatbuffers.field_int32(buf_, pos_, 170, 0)
    /// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
    /// Example: /// Example: [10.25, 50.56, 150.78]
    /// Constraints: No constraints specified.
    def mnvrAccelTimes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 172) + i * 4)
    def mnvrAccelTimes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 172)
    /// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
    /// Example: /// Example: [0.05, 0.1, 0.05]
    /// Constraints: No constraints specified.
    def mnvrAccels(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 174) + i * 4)
    def mnvrAccels_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 174)
    /// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
    /// Example: /// Example: [0.0005, 0.001, 0.0005]
    /// Constraints: No constraints specified.
    def mnvrAccelUncs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 176) + i * 4)
    def mnvrAccelUncs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 176)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 178)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 180)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Maneuver_Full_dataMode_Enum:
        return Maneuver_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 182, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 184)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 186)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDERTAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 188) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 188)
    /// Optional algorithm used to produce this record.
    /// Example: /// Example: Example algorithm
    /// Constraints: Minimum length = 0, Maximum length = 64
    def algorithm() -> string:
        return flatbuffers.field_string(buf_, pos_, 190)
    /// Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this maneuver. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    /// Example: /// Example: ['SOURCEDDATA-ID', 'SOURCEDDATA-ID']
    /// Constraints: No constraints specified.
    def sourcedData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 192) + i * 4)
    def sourcedData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 192)
    /// Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR, RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs of data for the positionally corresponding data types in this array (the two arrays must match in size).
    /// Example: /// Example: ['EO', 'RADAR']
    /// Constraints: No constraints specified.
    def sourcedDataTypes() -> Maneuver_Full_sourcedDataTypes_Enum:
        return Maneuver_Full_sourcedDataTypes_Enum(flatbuffers.field_int8(buf_, pos_, 194, 0))
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 196)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 198)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 200)

def GetRootAsManeuver_Full(buf:string): return Maneuver_Full { buf, flatbuffers.indirect(buf, 0) }

struct Maneuver_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(99)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(2, satNo, 0)
        return this
    def add_reportTime(reportTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, reportTime)
        return this
    def add_eventStartTime(eventStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, eventStartTime)
        return this
    def add_eventEndTime(eventEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, eventEndTime)
        return this
    def add_totalBurnTime(totalBurnTime:float):
        b_.PrependFloat64Slot(6, totalBurnTime, 0.0)
        return this
    def add_odFitEndTime(odFitEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, odFitEndTime)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, idOnOrbit)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, idSensor)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(10, uct, 0)
        return this
    def add_maneuverUnc(maneuverUnc:float):
        b_.PrependFloat64Slot(11, maneuverUnc, 0.0)
        return this
    def add_characterization(characterization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, characterization)
        return this
    def add_characterizationUnc(characterizationUnc:float):
        b_.PrependFloat64Slot(13, characterizationUnc, 0.0)
        return this
    def add_eventId(eventId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, eventId)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origObjectId)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, origSensorId)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, status)
        return this
    def add_deltaPos(deltaPos:float):
        b_.PrependFloat64Slot(18, deltaPos, 0.0)
        return this
    def add_deltaPosU(deltaPosU:float):
        b_.PrependFloat64Slot(19, deltaPosU, 0.0)
        return this
    def add_deltaPosV(deltaPosV:float):
        b_.PrependFloat64Slot(20, deltaPosV, 0.0)
        return this
    def add_deltaPosW(deltaPosW:float):
        b_.PrependFloat64Slot(21, deltaPosW, 0.0)
        return this
    def add_deltaVel(deltaVel:float):
        b_.PrependFloat64Slot(22, deltaVel, 0.0)
        return this
    def add_deltaVelU(deltaVelU:float):
        b_.PrependFloat64Slot(23, deltaVelU, 0.0)
        return this
    def add_deltaVelV(deltaVelV:float):
        b_.PrependFloat64Slot(24, deltaVelV, 0.0)
        return this
    def add_deltaVelW(deltaVelW:float):
        b_.PrependFloat64Slot(25, deltaVelW, 0.0)
        return this
    def add_deltaMass(deltaMass:float):
        b_.PrependFloat64Slot(26, deltaMass, 0.0)
        return this
    def add_preEventIdElset(preEventIdElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, preEventIdElset)
        return this
    def add_preEventElset(preEventElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, preEventElset)
        return this
    def add_preEventIdStateVector(preEventIdStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, preEventIdStateVector)
        return this
    def add_preEventStateVector(preEventStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, preEventStateVector)
        return this
    def add_prePosX(prePosX:float):
        b_.PrependFloat64Slot(31, prePosX, 0.0)
        return this
    def add_prePosY(prePosY:float):
        b_.PrependFloat64Slot(32, prePosY, 0.0)
        return this
    def add_prePosZ(prePosZ:float):
        b_.PrependFloat64Slot(33, prePosZ, 0.0)
        return this
    def add_preVelX(preVelX:float):
        b_.PrependFloat64Slot(34, preVelX, 0.0)
        return this
    def add_preVelY(preVelY:float):
        b_.PrependFloat64Slot(35, preVelY, 0.0)
        return this
    def add_preVelZ(preVelZ:float):
        b_.PrependFloat64Slot(36, preVelZ, 0.0)
        return this
    def add_preRadiationPressCoeff(preRadiationPressCoeff:float):
        b_.PrependFloat64Slot(37, preRadiationPressCoeff, 0.0)
        return this
    def add_preBallisticCoeff(preBallisticCoeff:float):
        b_.PrependFloat64Slot(38, preBallisticCoeff, 0.0)
        return this
    def add_preApogee(preApogee:float):
        b_.PrependFloat64Slot(39, preApogee, 0.0)
        return this
    def add_prePerigee(prePerigee:float):
        b_.PrependFloat64Slot(40, prePerigee, 0.0)
        return this
    def add_preInclination(preInclination:float):
        b_.PrependFloat64Slot(41, preInclination, 0.0)
        return this
    def add_preEccentricity(preEccentricity:float):
        b_.PrependFloat64Slot(42, preEccentricity, 0.0)
        return this
    def add_prePeriod(prePeriod:float):
        b_.PrependFloat64Slot(43, prePeriod, 0.0)
        return this
    def add_preRAAN(preRAAN:float):
        b_.PrependFloat64Slot(44, preRAAN, 0.0)
        return this
    def add_preSMA(preSMA:float):
        b_.PrependFloat64Slot(45, preSMA, 0.0)
        return this
    def add_preGeoLongitude(preGeoLongitude:float):
        b_.PrependFloat64Slot(46, preGeoLongitude, 0.0)
        return this
    def add_preDriftRate(preDriftRate:float):
        b_.PrependFloat64Slot(47, preDriftRate, 0.0)
        return this
    def add_preSigmaU(preSigmaU:float):
        b_.PrependFloat64Slot(48, preSigmaU, 0.0)
        return this
    def add_preSigmaV(preSigmaV:float):
        b_.PrependFloat64Slot(49, preSigmaV, 0.0)
        return this
    def add_preSigmaW(preSigmaW:float):
        b_.PrependFloat64Slot(50, preSigmaW, 0.0)
        return this
    def add_postEventIdElset(postEventIdElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, postEventIdElset)
        return this
    def add_postEventElset(postEventElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, postEventElset)
        return this
    def add_postEventIdStateVector(postEventIdStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, postEventIdStateVector)
        return this
    def add_postEventStateVector(postEventStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, postEventStateVector)
        return this
    def add_postPosX(postPosX:float):
        b_.PrependFloat64Slot(55, postPosX, 0.0)
        return this
    def add_postPosY(postPosY:float):
        b_.PrependFloat64Slot(56, postPosY, 0.0)
        return this
    def add_postPosZ(postPosZ:float):
        b_.PrependFloat64Slot(57, postPosZ, 0.0)
        return this
    def add_postVelX(postVelX:float):
        b_.PrependFloat64Slot(58, postVelX, 0.0)
        return this
    def add_postVelY(postVelY:float):
        b_.PrependFloat64Slot(59, postVelY, 0.0)
        return this
    def add_postVelZ(postVelZ:float):
        b_.PrependFloat64Slot(60, postVelZ, 0.0)
        return this
    def add_postRadiationPressCoeff(postRadiationPressCoeff:float):
        b_.PrependFloat64Slot(61, postRadiationPressCoeff, 0.0)
        return this
    def add_postBallisticCoeff(postBallisticCoeff:float):
        b_.PrependFloat64Slot(62, postBallisticCoeff, 0.0)
        return this
    def add_postApogee(postApogee:float):
        b_.PrependFloat64Slot(63, postApogee, 0.0)
        return this
    def add_postPerigee(postPerigee:float):
        b_.PrependFloat64Slot(64, postPerigee, 0.0)
        return this
    def add_postInclination(postInclination:float):
        b_.PrependFloat64Slot(65, postInclination, 0.0)
        return this
    def add_postEccentricity(postEccentricity:float):
        b_.PrependFloat64Slot(66, postEccentricity, 0.0)
        return this
    def add_postPeriod(postPeriod:float):
        b_.PrependFloat64Slot(67, postPeriod, 0.0)
        return this
    def add_postRAAN(postRAAN:float):
        b_.PrependFloat64Slot(68, postRAAN, 0.0)
        return this
    def add_postSMA(postSMA:float):
        b_.PrependFloat64Slot(69, postSMA, 0.0)
        return this
    def add_postGeoLongitude(postGeoLongitude:float):
        b_.PrependFloat64Slot(70, postGeoLongitude, 0.0)
        return this
    def add_postDriftRate(postDriftRate:float):
        b_.PrependFloat64Slot(71, postDriftRate, 0.0)
        return this
    def add_postSigmaU(postSigmaU:float):
        b_.PrependFloat64Slot(72, postSigmaU, 0.0)
        return this
    def add_postSigmaV(postSigmaV:float):
        b_.PrependFloat64Slot(73, postSigmaV, 0.0)
        return this
    def add_postSigmaW(postSigmaW:float):
        b_.PrependFloat64Slot(74, postSigmaW, 0.0)
        return this
    def add_cov(cov:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, cov)
        return this
    def add_postMass(postMass:float):
        b_.PrependFloat64Slot(76, postMass, 0.0)
        return this
    def add_postArea(postArea:float):
        b_.PrependFloat64Slot(77, postArea, 0.0)
        return this
    def add_numObs(numObs:int):
        b_.PrependInt32Slot(78, numObs, 0)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, description)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(80, descriptor)
        return this
    def add_stateModel(stateModel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(81, stateModel)
        return this
    def add_stateModelVersion(stateModelVersion:float):
        b_.PrependFloat64Slot(82, stateModelVersion, 0.0)
        return this
    def add_numAccelPoints(numAccelPoints:int):
        b_.PrependInt32Slot(83, numAccelPoints, 0)
        return this
    def add_mnvrAccelTimes(mnvrAccelTimes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(84, mnvrAccelTimes)
        return this
    def add_mnvrAccels(mnvrAccels:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(85, mnvrAccels)
        return this
    def add_mnvrAccelUncs(mnvrAccelUncs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(86, mnvrAccelUncs)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(87, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(88, origin)
        return this
    def add_dataMode(dataMode:Maneuver_Full_dataMode_Enum):
        b_.PrependInt8Slot(89, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(90, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(91, createdBy)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(92, tags)
        return this
    def add_algorithm(algorithm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(93, algorithm)
        return this
    def add_sourcedData(sourcedData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(94, sourcedData)
        return this
    def add_sourcedDataTypes(sourcedDataTypes:Maneuver_Full_sourcedDataTypes_Enum):
        b_.PrependInt8Slot(95, sourcedDataTypes, 0)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(96, onOrbit)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(97, transactionId)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(98, origNetwork)
        return this
    def end():
        return b_.EndObject()

def Maneuver_FullStartCovVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Maneuver_FullCreateCovVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Maneuver_FullStartMnvrAccelTimesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Maneuver_FullCreateMnvrAccelTimesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Maneuver_FullStartMnvrAccelsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Maneuver_FullCreateMnvrAccelsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Maneuver_FullStartMnvrAccelUncsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Maneuver_FullCreateMnvrAccelUncsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Maneuver_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Maneuver_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Maneuver_FullStartSourcedDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Maneuver_FullCreateSourcedDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

