// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsStocks_Full

/// /// The supply stocks for this support item.
class LogisticsStocks_Full : flatbuffers.handle
    /// The ICAO code for the primary location with available parts.
    /// Example: /// Example: PHIK
    /// Constraints: Minimum length = 0, Maximum length = 4
    def sourceICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The quantity of available parts needed from sourceICAO.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def quantity() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def stockCheckTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The point of contact at the sourced location.
    /// Example: /// Example: SMITH, JOHN J
    /// Constraints: Minimum length = 0, Maximum length = 68
    def stockPOC() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsLogisticsStocks_Full(buf:string): return LogisticsStocks_Full { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsStocks_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_sourceICAO(sourceICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, sourceICAO)
        return this
    def add_quantity(quantity:int):
        b_.PrependInt32Slot(1, quantity, 0)
        return this
    def add_stockCheckTime(stockCheckTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, stockCheckTime)
        return this
    def add_stockPOC(stockPOC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, stockPOC)
        return this
    def end():
        return b_.EndObject()

