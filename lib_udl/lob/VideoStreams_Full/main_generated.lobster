// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum VideoStreams_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    VideoStreams_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    VideoStreams_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    VideoStreams_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    VideoStreams_Full_dataMode_Enum_EXERCISE = 3

class VideoStreams_Full

/// /// The table captures metadata associated with the published videos in UDL.
class VideoStreams_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: VIDEOSTREAMS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Name of the video stream.
    /// Example: /// Example: name
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Description/notes associated with the video stream.
    /// Example: /// Example: description
    /// Constraints: Minimum length = 1, Maximum length = 1024
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The timestamp when the stream is available from. The unit is ISO 8601 format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The timestamp when the stream is available until. The unit is ISO 8601 format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def stopTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Video Publisher Token.
    /// Example: /// Example: tokenValue
    /// Constraints: Minimum length = 1, Maximum length = 1024
    def tokenValue() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Video Streaming Support URLs.
    /// Example: /// Example: ['videoUrls', 'videoUrls2']
    /// Constraints: No constraints specified.
    def videoUrls(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def videoUrls_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> VideoStreams_Full_dataMode_Enum:
        return VideoStreams_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)

def GetRootAsVideoStreams_Full(buf:string): return VideoStreams_Full { buf, flatbuffers.indirect(buf, 0) }

struct VideoStreams_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(16)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, name)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, description)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, startTime)
        return this
    def add_stopTime(stopTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, stopTime)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, source)
        return this
    def add_tokenValue(tokenValue:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, tokenValue)
        return this
    def add_videoUrls(videoUrls:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, videoUrls)
        return this
    def add_dataMode(dataMode:VideoStreams_Full_dataMode_Enum):
        b_.PrependInt8Slot(9, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, updatedBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origNetwork)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origin)
        return this
    def end():
        return b_.EndObject()

def VideoStreams_FullStartVideoUrlsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def VideoStreams_FullCreateVideoUrlsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

