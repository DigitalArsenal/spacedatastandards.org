// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OnorbitThrusterStatus_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    OnorbitThrusterStatus_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    OnorbitThrusterStatus_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    OnorbitThrusterStatus_Abridged_dataMode_Enum_EXERCISE = 3

class OnorbitThrusterStatus_Abridged

/// /// Status information for OnorbitThruster objects.
class OnorbitThrusterStatus_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: af103c-1f917dc-002c1bd
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
    /// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOnorbitThruster() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Identifier of this thruster.
    /// Example: /// Example: REA1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def statusTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Minimum available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def propMassMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Average available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 907.6
    /// Constraints: No constraints specified.
    def propMassAvg() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Median available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 200.1
    /// Constraints: No constraints specified.
    def propMassMedian() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Maximum available propellant mass for this thruster's type, in kilograms.
    /// Example: /// Example: 2333.3
    /// Constraints: No constraints specified.
    def propMassMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Total fuel mass available for this thruster's type, in kilograms.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def fuelMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def fuelMassUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Total delta-velocity available for this thruster's type, in meters per second.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def totalDeltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Minimum available delta-velocity for this thruster, in meters per second.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def minDeltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Estimated available delta-velocity for this thruster, in meters per second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def estDeltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Maximum available delta-velocity for this thruster, in meters per second.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def maxDeltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Maximum available thrust for this thruster, in newtons.
    /// Example: /// Example: 22.1
    /// Constraints: No constraints specified.
    def thrustMax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Specific impulse for this thruster, in seconds.
    /// Example: /// Example: 300.1
    /// Constraints: No constraints specified.
    def isp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Flag indicating if this thruster is operational.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def operational() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> OnorbitThrusterStatus_Abridged_dataMode_Enum:
        return OnorbitThrusterStatus_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 50, 0))

def GetRootAsOnorbitThrusterStatus_Abridged(buf:string): return OnorbitThrusterStatus_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct OnorbitThrusterStatus_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(24)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnorbitThruster(idOnorbitThruster:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnorbitThruster)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, name)
        return this
    def add_statusTime(statusTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, statusTime)
        return this
    def add_propMassMin(propMassMin:float):
        b_.PrependFloat64Slot(5, propMassMin, 0.0)
        return this
    def add_propMassAvg(propMassAvg:float):
        b_.PrependFloat64Slot(6, propMassAvg, 0.0)
        return this
    def add_propMassMedian(propMassMedian:float):
        b_.PrependFloat64Slot(7, propMassMedian, 0.0)
        return this
    def add_propMassMax(propMassMax:float):
        b_.PrependFloat64Slot(8, propMassMax, 0.0)
        return this
    def add_fuelMass(fuelMass:float):
        b_.PrependFloat64Slot(9, fuelMass, 0.0)
        return this
    def add_fuelMassUnc(fuelMassUnc:float):
        b_.PrependFloat64Slot(10, fuelMassUnc, 0.0)
        return this
    def add_totalDeltaV(totalDeltaV:float):
        b_.PrependFloat64Slot(11, totalDeltaV, 0.0)
        return this
    def add_minDeltaV(minDeltaV:float):
        b_.PrependFloat64Slot(12, minDeltaV, 0.0)
        return this
    def add_estDeltaV(estDeltaV:float):
        b_.PrependFloat64Slot(13, estDeltaV, 0.0)
        return this
    def add_maxDeltaV(maxDeltaV:float):
        b_.PrependFloat64Slot(14, maxDeltaV, 0.0)
        return this
    def add_thrustMax(thrustMax:float):
        b_.PrependFloat64Slot(15, thrustMax, 0.0)
        return this
    def add_isp(isp:float):
        b_.PrependFloat64Slot(16, isp, 0.0)
        return this
    def add_operational(operational:bool):
        b_.PrependBoolSlot(17, operational, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origNetwork)
        return this
    def add_dataMode(dataMode:OnorbitThrusterStatus_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(23, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

