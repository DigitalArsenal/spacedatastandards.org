// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SARObservation_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SARObservation_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SARObservation_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SARObservation_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SARObservation_Ingest_dataMode_Enum_EXERCISE = 3

class SARObservation_Ingest

/// /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class SARObservation_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SAROBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the spacecraft hosting the sensor associated with this collection.
    /// Example: /// Example: 36036
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
    /// Example: /// Example: 36036
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: 36036
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: 36036-1L
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: SMOS-1L
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: EXTERNAL-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional identifier to indicate the specific collection tasking which produced this observation.
    /// Example: /// Example: COLLECTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def collectionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Identifier of the specific detection within a collection which produced this observation.
    /// Example: /// Example: DETECTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def detectionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Collection start time in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2023-04-22T17:35:00.123456Z
    /// Constraints: No constraints specified.
    def collectionStart() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Collection end time in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2023-04-22T17:38:10.20177Z
    /// Constraints: No constraints specified.
    def collectionEnd() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2023-04-22T17:36:35.100885Z
    /// Constraints: No constraints specified.
    def centerTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The detection start time in ISO 8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2023-07-08T17:35:01.615396Z
    /// Constraints: No constraints specified.
    def detectionStart() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The detection end time in ISO 8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2023-07-08T17:35:20.77219Z
    /// Constraints: No constraints specified.
    def detectionEnd() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The duration, in seconds, of this detection.
    /// Example: /// Example: 79.156794
    /// Constraints: No constraints specified.
    def dwellTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
    /// Example: /// Example: ASCENDING
    /// Constraints: Minimum length = 0, Maximum length = 16
    def orbitState() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
    /// Example: /// Example: SPOTLIGHT
    /// Constraints: Minimum length = 1, Maximum length = 36
    def sarMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
    /// Example: /// Example: L
    /// Constraints: Minimum length = 0, Maximum length = 5
    def operatingBand() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The operating frequency, in Mhz, for the collection.
    /// Example: /// Example: 2345.6
    /// Constraints: No constraints specified.
    def operatingFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def snr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 4
    def txPolarization() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 4
    def rxPolarization() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The graze angle (also referred to as look angle) for the collection in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def grazeAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The center incidence angle in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def incidenceAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The squint angle for the collection in degrees.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def squintAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// The bandwidth frequency of the pulse in Mhz.
    /// Example: /// Example: 500.1
    /// Constraints: No constraints specified.
    def pulseBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The duration of a pulse in seconds.
    /// Example: /// Example: 1.1e-05
    /// Constraints: No constraints specified.
    def pulseDuration() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Required sweep angle for the continuous spot scene in degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def continuousSpotAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Slant distance from sensor to center point of imaging event in kilometers.
    /// Example: /// Example: 60.1
    /// Constraints: No constraints specified.
    def slantRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Specifies the closest range, in kilometers, from the flight path to target during the collection.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    def nearRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Specifies the farthest range, in kilometers, from the flight path to target during the collection.
    /// Example: /// Example: 34.1
    /// Constraints: No constraints specified.
    def farRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The length of the collection as projected on the ground in kilometers.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    def swathLength() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def area() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def atext() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    def agjson() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Type of region as projected on the ground (POLYGON, POINT, LINE).
    /// Example: /// Example: POLYGON
    /// Constraints: Minimum length = 0, Maximum length = 128
    def atype() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def andims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def asrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// The pixel spacing in the range direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def spacingRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// The pixel spacing in the azimuth direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def spacingAzimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// The number of looks in the azimuth direction.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def looksAzimuth() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// The number of looks in the range direction.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def looksRange() -> int:
        return flatbuffers.field_int32(buf_, pos_, 88, 0)
    /// The resolution in the range direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def resolutionRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// The resolution in the azimuth direction measured in meters.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def resolutionAzimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// The antenna pointing direction (LEFT, RIGHT).
    /// Example: /// Example: RIGHT
    /// Constraints: Minimum length = 0, Maximum length = 16
    def obDirection() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// The coordinate system used for the sensor velocity and target position vectors for the collection.
    /// Example: /// Example: ECEF
    /// Constraints: Minimum length = 0, Maximum length = 16
    def coordSys() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// The collection target X position in kilometers.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def targetposx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// The collection target Y position in kilometers.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def targetposy() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// The collection target Z position in kilometers.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def targetposz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// Sensor altitude during collection in kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// Sensor platform X-velocity during collection in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvelx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Sensor platform Y-velocity during collection in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvely() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// Sensor platform Z-velocity during collection in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvelz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def senlatStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def senlonStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def senlatEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def senlonEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 122) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 122)
    /// Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['ESID', 'GROUNDIMAGE']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 124) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 124)
    /// Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
    /// Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 126) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 126)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-04-22T17:51:40.854Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 132)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SARObservation_Ingest_dataMode_Enum:
        return SARObservation_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 140, 0))

def GetRootAsSARObservation_Ingest(buf:string): return SARObservation_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct SARObservation_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(69)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origObjectId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, origSensorId)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, externalId)
        return this
    def add_collectionId(collectionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, collectionId)
        return this
    def add_detectionId(detectionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, detectionId)
        return this
    def add_collectionStart(collectionStart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, collectionStart)
        return this
    def add_collectionEnd(collectionEnd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, collectionEnd)
        return this
    def add_centerTime(centerTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, centerTime)
        return this
    def add_detectionStart(detectionStart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, detectionStart)
        return this
    def add_detectionEnd(detectionEnd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, detectionEnd)
        return this
    def add_dwellTime(dwellTime:float):
        b_.PrependFloat64Slot(15, dwellTime, 0.0)
        return this
    def add_orbitState(orbitState:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, orbitState)
        return this
    def add_sarMode(sarMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, sarMode)
        return this
    def add_operatingBand(operatingBand:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, operatingBand)
        return this
    def add_operatingFreq(operatingFreq:float):
        b_.PrependFloat64Slot(19, operatingFreq, 0.0)
        return this
    def add_snr(snr:float):
        b_.PrependFloat64Slot(20, snr, 0.0)
        return this
    def add_txPolarization(txPolarization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, txPolarization)
        return this
    def add_rxPolarization(rxPolarization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, rxPolarization)
        return this
    def add_grazeAngle(grazeAngle:float):
        b_.PrependFloat64Slot(23, grazeAngle, 0.0)
        return this
    def add_incidenceAngle(incidenceAngle:float):
        b_.PrependFloat64Slot(24, incidenceAngle, 0.0)
        return this
    def add_squintAngle(squintAngle:float):
        b_.PrependFloat64Slot(25, squintAngle, 0.0)
        return this
    def add_pulseBandwidth(pulseBandwidth:float):
        b_.PrependFloat64Slot(26, pulseBandwidth, 0.0)
        return this
    def add_pulseDuration(pulseDuration:float):
        b_.PrependFloat64Slot(27, pulseDuration, 0.0)
        return this
    def add_continuousSpotAngle(continuousSpotAngle:float):
        b_.PrependFloat64Slot(28, continuousSpotAngle, 0.0)
        return this
    def add_slantRange(slantRange:float):
        b_.PrependFloat64Slot(29, slantRange, 0.0)
        return this
    def add_nearRange(nearRange:float):
        b_.PrependFloat64Slot(30, nearRange, 0.0)
        return this
    def add_farRange(farRange:float):
        b_.PrependFloat64Slot(31, farRange, 0.0)
        return this
    def add_swathLength(swathLength:float):
        b_.PrependFloat64Slot(32, swathLength, 0.0)
        return this
    def add_area(area:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, area)
        return this
    def add_atext(atext:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, atext)
        return this
    def add_agjson(agjson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, agjson)
        return this
    def add_atype(atype:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, atype)
        return this
    def add_andims(andims:int):
        b_.PrependInt32Slot(37, andims, 0)
        return this
    def add_asrid(asrid:int):
        b_.PrependInt32Slot(38, asrid, 0)
        return this
    def add_spacingRange(spacingRange:float):
        b_.PrependFloat64Slot(39, spacingRange, 0.0)
        return this
    def add_spacingAzimuth(spacingAzimuth:float):
        b_.PrependFloat64Slot(40, spacingAzimuth, 0.0)
        return this
    def add_looksAzimuth(looksAzimuth:int):
        b_.PrependInt32Slot(41, looksAzimuth, 0)
        return this
    def add_looksRange(looksRange:int):
        b_.PrependInt32Slot(42, looksRange, 0)
        return this
    def add_resolutionRange(resolutionRange:float):
        b_.PrependFloat64Slot(43, resolutionRange, 0.0)
        return this
    def add_resolutionAzimuth(resolutionAzimuth:float):
        b_.PrependFloat64Slot(44, resolutionAzimuth, 0.0)
        return this
    def add_obDirection(obDirection:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, obDirection)
        return this
    def add_coordSys(coordSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, coordSys)
        return this
    def add_targetposx(targetposx:float):
        b_.PrependFloat64Slot(47, targetposx, 0.0)
        return this
    def add_targetposy(targetposy:float):
        b_.PrependFloat64Slot(48, targetposy, 0.0)
        return this
    def add_targetposz(targetposz:float):
        b_.PrependFloat64Slot(49, targetposz, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(50, senalt, 0.0)
        return this
    def add_senvelx(senvelx:float):
        b_.PrependFloat64Slot(51, senvelx, 0.0)
        return this
    def add_senvely(senvely:float):
        b_.PrependFloat64Slot(52, senvely, 0.0)
        return this
    def add_senvelz(senvelz:float):
        b_.PrependFloat64Slot(53, senvelz, 0.0)
        return this
    def add_senlatStart(senlatStart:float):
        b_.PrependFloat64Slot(54, senlatStart, 0.0)
        return this
    def add_senlonStart(senlonStart:float):
        b_.PrependFloat64Slot(55, senlonStart, 0.0)
        return this
    def add_senlatEnd(senlatEnd:float):
        b_.PrependFloat64Slot(56, senlatEnd, 0.0)
        return this
    def add_senlonEnd(senlonEnd:float):
        b_.PrependFloat64Slot(57, senlonEnd, 0.0)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, transactionId)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, tags)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, srcIds)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, sourceDL)
        return this
    def add_dataMode(dataMode:SARObservation_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(68, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def SARObservation_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SARObservation_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SARObservation_IngestStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SARObservation_IngestCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SARObservation_IngestStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SARObservation_IngestCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

