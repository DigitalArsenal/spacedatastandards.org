// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AirTransportMissionHazMat_Ingest

/// /// Collection of Hazardous Material information associated with this Air Transport Mission.
class AirTransportMissionHazMat_Ingest : flatbuffers.handle
    /// The hazMat identifier provided by the originating source.
    /// Example: /// Example: cb6289e0f38534e01291ab6421d42724
    /// Constraints: Minimum length = 0, Maximum length = 36
    def extHazMatId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: LITHIUM METAL BATTERIES
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def itemName() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: 0181
    /// Constraints: Minimum length = 0, Maximum length = 4
    def unNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Number of pieces of hazardous cargo.
    /// Example: /// Example: 29
    /// Constraints: No constraints specified.
    def pieces() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
    /// Example: /// Example: 22.1
    /// Constraints: No constraints specified.
    def weight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Net explosive weight of the hazardous material, in kilograms.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    def netExpWt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def classDiv() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 2
    def cgc() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
    /// Example: /// Example: 4,5,7,8
    /// Constraints: Minimum length = 0, Maximum length = 100
    def cgn() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
    /// Example: /// Example: 11,12
    /// Constraints: Minimum length = 0, Maximum length = 100
    def applicableNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Itinerary number that identifies where the hazardous material is loaded.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    def onItin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
    /// Example: /// Example: LIRQ
    /// Constraints: Minimum length = 0, Maximum length = 4
    def onICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Itinerary number that identifies where the hazardous material is unloaded.
    /// Example: /// Example: 300
    /// Constraints: No constraints specified.
    def offItin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
    /// Example: /// Example: MBPV
    /// Constraints: Minimum length = 0, Maximum length = 4
    def offICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 1
    def planned() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)

def GetRootAsAirTransportMissionHazMat_Ingest(buf:string): return AirTransportMissionHazMat_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AirTransportMissionHazMat_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(15)
        return this
    def add_extHazMatId(extHazMatId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, extHazMatId)
        return this
    def add_itemName(itemName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, itemName)
        return this
    def add_unNum(unNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, unNum)
        return this
    def add_pieces(pieces:int):
        b_.PrependInt32Slot(3, pieces, 0)
        return this
    def add_weight(weight:float):
        b_.PrependFloat64Slot(4, weight, 0.0)
        return this
    def add_netExpWt(netExpWt:float):
        b_.PrependFloat64Slot(5, netExpWt, 0.0)
        return this
    def add_classDiv(classDiv:float):
        b_.PrependFloat64Slot(6, classDiv, 0.0)
        return this
    def add_cgc(cgc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, cgc)
        return this
    def add_cgn(cgn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, cgn)
        return this
    def add_applicableNotes(applicableNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, applicableNotes)
        return this
    def add_onItin(onItin:int):
        b_.PrependInt32Slot(10, onItin, 0)
        return this
    def add_onICAO(onICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, onICAO)
        return this
    def add_offItin(offItin:int):
        b_.PrependInt32Slot(12, offItin, 0)
        return this
    def add_offICAO(offICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, offICAO)
        return this
    def add_planned(planned:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, planned)
        return this
    def end():
        return b_.EndObject()

