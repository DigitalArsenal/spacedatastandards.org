// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationAntennaElementPosition_Ingest

/// /// For phased arrays, a 2D array. 1st dimension spans the dimension antenna_element (see phase or amplitude). 2nd dimension spans 3 (x, y, z) Cartesian coordinates.
class IonoObservationAntennaElementPosition_Ingest : flatbuffers.handle
    /// Array of integers of the antenna_element dimensions.
    /// Example: /// Example: [3, 4]
    /// Constraints: No constraints specified.
    def dimensions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 4) + i * 4)
    def dimensions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)
    /// Array of names for dimensions.
    /// Example: /// Example: ['NAME1', 'NAME2']
    /// Constraints: No constraints specified.
    def dimensionName(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def dimensionName_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// Array of 3-element tuples (x,y,z) in km.
    /// Example: /// Example: [[1.23, 0.123]]
    /// Constraints: No constraints specified.
    def data(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def data_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)

def GetRootAsIonoObservationAntennaElementPosition_Ingest(buf:string): return IonoObservationAntennaElementPosition_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationAntennaElementPosition_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(3)
        return this
    def add_dimensions(dimensions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, dimensions)
        return this
    def add_dimensionName(dimensionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, dimensionName)
        return this
    def add_data(data:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, data)
        return this
    def end():
        return b_.EndObject()

def IonoObservationAntennaElementPosition_IngestStartDimensionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationAntennaElementPosition_IngestCreateDimensionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationAntennaElementPosition_IngestStartDimensionNameVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationAntennaElementPosition_IngestCreateDimensionNameVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationAntennaElementPosition_IngestStartDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationAntennaElementPosition_IngestCreateDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

