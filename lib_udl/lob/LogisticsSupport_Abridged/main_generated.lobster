// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LogisticsSupport_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    LogisticsSupport_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    LogisticsSupport_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    LogisticsSupport_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    LogisticsSupport_Abridged_dataMode_Enum_EXERCISE = 3

class LogisticsSupport_Abridged

/// /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
class LogisticsSupport_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: GDSSBL012307131347070165
    /// Constraints: Minimum length = 0, Maximum length = 24
    def extSystemId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
    /// Example: /// Example: 99290
    /// Constraints: Minimum length = 0, Maximum length = 7
    def tailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: CO17A
    /// Constraints: Minimum length = 0, Maximum length = 8
    def aircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def currICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def suppICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The time this report was created, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def rptCreatedTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The time this report was closed, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def rptClosedTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def meTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def mcTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
    /// Example: /// Example: WA
    /// Constraints: Minimum length = 0, Maximum length = 9
    def logisticAction() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The identifier that represents a Logistics Master Record.
    /// Example: /// Example: L62017
    /// Constraints: Minimum length = 0, Maximum length = 6
    def logisticsRecordId() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def etic() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Logistics estimated time mission capable.
    /// Example: /// Example: 2023-07-13T13:47:00.123Z
    /// Constraints: No constraints specified.
    def etmc() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
    /// Example: /// Example: NMCMU
    /// Constraints: Minimum length = 0, Maximum length = 6
    def maintStatusCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// This is used to indicate whether a closed master record has been reopened.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def reopenFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// The organization that owns this logistics record.
    /// Example: /// Example: EXAMPLE_OWNER
    /// Constraints: Minimum length = 0, Maximum length = 250
    def owner() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Remarks associated with this LogisticsSupport record.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsRemarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def logisticsRemarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// Discrepancy information associated with this LogisticsSupport record.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsDiscrepancyInfos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def logisticsDiscrepancyInfos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsTransportationPlans(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def logisticsTransportationPlans_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Support items associated with this LogisticsSupport record.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsSupportItems(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def logisticsSupportItems_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> LogisticsSupport_Abridged_dataMode_Enum:
        return LogisticsSupport_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 62, 0))

def GetRootAsLogisticsSupport_Abridged(buf:string): return LogisticsSupport_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsSupport_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(30)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_extSystemId(extSystemId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, extSystemId)
        return this
    def add_tailNumber(tailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, tailNumber)
        return this
    def add_aircraftMDS(aircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, aircraftMDS)
        return this
    def add_currICAO(currICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, currICAO)
        return this
    def add_suppICAO(suppICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, suppICAO)
        return this
    def add_rptCreatedTime(rptCreatedTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, rptCreatedTime)
        return this
    def add_rptClosedTime(rptClosedTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, rptClosedTime)
        return this
    def add_meTime(meTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, meTime)
        return this
    def add_mcTime(mcTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, mcTime)
        return this
    def add_logisticAction(logisticAction:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, logisticAction)
        return this
    def add_logisticsRecordId(logisticsRecordId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, logisticsRecordId)
        return this
    def add_etic(etic:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, etic)
        return this
    def add_etmc(etmc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, etmc)
        return this
    def add_maintStatusCode(maintStatusCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, maintStatusCode)
        return this
    def add_reopenFlag(reopenFlag:bool):
        b_.PrependBoolSlot(16, reopenFlag, 0)
        return this
    def add_owner(owner:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, owner)
        return this
    def add_logisticsRemarks(logisticsRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, logisticsRemarks)
        return this
    def add_logisticsDiscrepancyInfos(logisticsDiscrepancyInfos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, logisticsDiscrepancyInfos)
        return this
    def add_logisticsTransportationPlans(logisticsTransportationPlans:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, logisticsTransportationPlans)
        return this
    def add_logisticsSupportItems(logisticsSupportItems:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, logisticsSupportItems)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origNetwork)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, origin)
        return this
    def add_dataMode(dataMode:LogisticsSupport_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(29, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def LogisticsSupport_AbridgedStartLogisticsRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupport_AbridgedCreateLogisticsRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LogisticsSupport_AbridgedStartLogisticsDiscrepancyInfosVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupport_AbridgedCreateLogisticsDiscrepancyInfosVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LogisticsSupport_AbridgedStartLogisticsTransportationPlansVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupport_AbridgedCreateLogisticsTransportationPlansVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LogisticsSupport_AbridgedStartLogisticsSupportItemsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupport_AbridgedCreateLogisticsSupportItemsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

