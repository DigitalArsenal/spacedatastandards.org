// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EvacHealthState_Abridged

/// /// Health state information.
class EvacHealthState_Abridged : flatbuffers.handle
    /// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
    /// Example: /// Example: COGNITIVE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
    /// Example: /// Example: BLUE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def healthStateCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Medical confidence factor.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def medConfFactor() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def time() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsEvacHealthState_Abridged(buf:string): return EvacHealthState_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct EvacHealthState_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, type)
        return this
    def add_healthStateCode(healthStateCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, healthStateCode)
        return this
    def add_medConfFactor(medConfFactor:int):
        b_.PrependInt32Slot(2, medConfFactor, 0)
        return this
    def add_time(time:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, time)
        return this
    def end():
        return b_.EndObject()

