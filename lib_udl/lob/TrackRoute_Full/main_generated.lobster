// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum TrackRoute_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    TrackRoute_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TrackRoute_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    TrackRoute_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    TrackRoute_Full_dataMode_Enum_EXERCISE = 3

class TrackRoute_Full

/// /// A track route is a prescribed route for performing training events or operations such as air refueling.
class TrackRoute_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The track route type represented by this record (ex. AIR REFUELING).
    /// Example: /// Example: AIR REFUELING
    /// Constraints: Minimum length = 1, Maximum length = 36
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: GDSSMH121004232315303094
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The principal compass direction (cardinal or ordinal) of the track route.
    /// Example: /// Example: NE
    /// Constraints: Minimum length = 0, Maximum length = 2
    def direction() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The name of the creating organization of the track route.
    /// Example: /// Example: HQPAC
    /// Constraints: Minimum length = 0, Maximum length = 250
    def creatingOrg() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Track location ID.
    /// Example: /// Example: POACHR
    /// Constraints: Minimum length = 0, Maximum length = 36
    def locationTrackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Identifier of the track.
    /// Example: /// Example: CH61A
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Name of the track.
    /// Example: /// Example: CH61 POST
    /// Constraints: Minimum length = 0, Maximum length = 50
    def trackName() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Abbreviated name of the track.
    /// Example: /// Example: CH61
    /// Constraints: Minimum length = 0, Maximum length = 16
    def shortName() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
    /// Example: /// Example: V
    /// Constraints: Minimum length = 0, Maximum length = 2
    def typeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Region code indicating where the track resides as determined by the data source.
    /// Example: /// Example: 5
    /// Constraints: Minimum length = 0, Maximum length = 36
    def regionCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Region where the track resides.
    /// Example: /// Example: North America
    /// Constraints: Minimum length = 0, Maximum length = 32
    def regionName() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The APX radar code sent and received by the aircraft for identification.
    /// Example: /// Example: 5/1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def apxBeaconCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The receiver tanker channel identifer for air refueling tracks.
    /// Example: /// Example: 31/094
    /// Constraints: Minimum length = 0, Maximum length = 36
    def receiverTankerCHCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The APN radar code sent and received by the aircraft for identification.
    /// Example: /// Example: 1-3-1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def apnSetting() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Standard Indicator Code of the air refueling track.
    /// Example: /// Example: N
    /// Constraints: Minimum length = 0, Maximum length = 36
    def sic() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-16T16:00:00.123Z
    /// Constraints: No constraints specified.
    def reviewDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-17T16:00:00.123Z
    /// Constraints: No constraints specified.
    def lastUsedDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-17T16:00:00.123Z
    /// Constraints: No constraints specified.
    def lastUpdateDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The primary UHF radio frequency used for the track route in megahertz.
    /// Example: /// Example: 357.5
    /// Constraints: No constraints specified.
    def priFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The secondary UHF radio frequency used for the track route in megahertz.
    /// Example: /// Example: 319.7
    /// Constraints: No constraints specified.
    def secFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Air Refueling Track Control Center message.
    /// Example: /// Example: OAKLAND CTR/GUAM CERAP
    /// Constraints: Minimum length = 0, Maximum length = 256
    def artccMessage() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Point of contact for the air refueling track route scheduler.
    /// Example: /// Example: 97 OSS/OSOS DSN 866-5555
    /// Constraints: Minimum length = 0, Maximum length = 256
    def schedulerOrgName() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The unit responsible for scheduling the track route.
    /// Example: /// Example: 612 AOC
    /// Constraints: Minimum length = 0, Maximum length = 32
    def schedulerOrgUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-17T16:00:00.123Z
    /// Constraints: No constraints specified.
    def effectiveDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Points identified within the route.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def routePoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def routePoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)
    /// Minimum and maximum altitude bounds for the track.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def altitudeBlocks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def altitudeBlocks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// Point of contacts for scheduling or modifying the route.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def poc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def poc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> TrackRoute_Full_dataMode_Enum:
        return TrackRoute_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 78, 0))

def GetRootAsTrackRoute_Full(buf:string): return TrackRoute_Full { buf, flatbuffers.indirect(buf, 0) }

struct TrackRoute_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(38)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, type)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, externalId)
        return this
    def add_direction(direction:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, direction)
        return this
    def add_creatingOrg(creatingOrg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, creatingOrg)
        return this
    def add_locationTrackId(locationTrackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, locationTrackId)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, trackId)
        return this
    def add_trackName(trackName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, trackName)
        return this
    def add_shortName(shortName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, shortName)
        return this
    def add_typeCode(typeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, typeCode)
        return this
    def add_regionCode(regionCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, regionCode)
        return this
    def add_regionName(regionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, regionName)
        return this
    def add_apxBeaconCode(apxBeaconCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, apxBeaconCode)
        return this
    def add_receiverTankerCHCode(receiverTankerCHCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, receiverTankerCHCode)
        return this
    def add_apnSetting(apnSetting:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, apnSetting)
        return this
    def add_sic(sic:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, sic)
        return this
    def add_reviewDate(reviewDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, reviewDate)
        return this
    def add_lastUsedDate(lastUsedDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, lastUsedDate)
        return this
    def add_lastUpdateDate(lastUpdateDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, lastUpdateDate)
        return this
    def add_priFreq(priFreq:float):
        b_.PrependFloat64Slot(20, priFreq, 0.0)
        return this
    def add_secFreq(secFreq:float):
        b_.PrependFloat64Slot(21, secFreq, 0.0)
        return this
    def add_artccMessage(artccMessage:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, artccMessage)
        return this
    def add_schedulerOrgName(schedulerOrgName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, schedulerOrgName)
        return this
    def add_schedulerOrgUnit(schedulerOrgUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, schedulerOrgUnit)
        return this
    def add_effectiveDate(effectiveDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, effectiveDate)
        return this
    def add_routePoints(routePoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, routePoints)
        return this
    def add_altitudeBlocks(altitudeBlocks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, altitudeBlocks)
        return this
    def add_poc(poc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, poc)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origNetwork)
        return this
    def add_dataMode(dataMode:TrackRoute_Full_dataMode_Enum):
        b_.PrependInt8Slot(37, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def TrackRoute_FullStartRoutePointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def TrackRoute_FullCreateRoutePointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def TrackRoute_FullStartAltitudeBlocksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def TrackRoute_FullCreateAltitudeBlocksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def TrackRoute_FullStartPocVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def TrackRoute_FullCreatePocVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

