// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiHRR_Abridged

/// /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
class MtiHRR_Abridged : flatbuffers.handle
    /// Sequential count of a revisit of the bounding area for a given job ID.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def h2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def h3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Flag to indicate the last dwell of the revisit.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def h4() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 8, 0))
    /// Sequential index of the associated MTI Report.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def h5() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def h6() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Number of Range Bins/Samples in a Range Doppler Chip.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def h7() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// Number of Doppler bins in a Range-Doppler chip.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def h8() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h9() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h10() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// 3dB range impulse response of the radar, expressed in centimeters.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def h11() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Slant Range pixel spacing after over sampling, expressed in centimeters.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def h12() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// 3dB Doppler resolution of the radar, expressed in Hertz.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def h13() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Doppler pixel spacing after over sampling, expressed in Hertz.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def h14() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Center Frequency of the radar in GHz.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def h15() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Enumeration table denoting the compression technique used.
    /// Example: /// Example: TABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def h16() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Enumeration table indicating the spectral weighting used in the range compression process.
    /// Example: /// Example: TABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def h17() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
    /// Example: /// Example: TABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def h18() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Initial power of the peak scatterer, expressed in dB.
    /// Example: /// Example: 12.23
    /// Constraints: No constraints specified.
    def h19() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// RCS of the peak scatterer, expressed in half-decibels (dB/2).
    /// Example: /// Example: 117
    /// Constraints: No constraints specified.
    def h20() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h21() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h22() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Enumeration field which designates the type of data being delivered.
    /// Example: /// Example: FIELD
    /// Constraints: Minimum length = 0, Maximum length = 32
    def h23() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Flag field to indicate the additional signal processing techniques applied to the data.
    /// Example: /// Example: FLAG
    /// Constraints: Minimum length = 0, Maximum length = 64
    def h24() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Number of pixels in the range dimension of the chip.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h27() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    def h28() -> int:
        return flatbuffers.field_int64(buf_, pos_, 52, 0)
    /// Relative velocity to skin line.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h29() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// Computed object length based upon HRR profile, in meters.
    /// Example: /// Example: 22
    /// Constraints: No constraints specified.
    def h30() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Standard deviation of estimate of the object length, expressed in meters.
    /// Example: /// Example: 55
    /// Constraints: No constraints specified.
    def h31() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Standard deviation of estimate of the object length, expressed in meters.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def h32(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def h32_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)

def GetRootAsMtiHRR_Abridged(buf:string): return MtiHRR_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct MtiHRR_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(29)
        return this
    def add_h2(h2:int):
        b_.PrependInt32Slot(0, h2, 0)
        return this
    def add_h3(h3:int):
        b_.PrependInt32Slot(1, h3, 0)
        return this
    def add_h4(h4:bool):
        b_.PrependBoolSlot(2, h4, 0)
        return this
    def add_h5(h5:int):
        b_.PrependInt32Slot(3, h5, 0)
        return this
    def add_h6(h6:int):
        b_.PrependInt32Slot(4, h6, 0)
        return this
    def add_h7(h7:int):
        b_.PrependInt32Slot(5, h7, 0)
        return this
    def add_h8(h8:int):
        b_.PrependInt32Slot(6, h8, 0)
        return this
    def add_h9(h9:int):
        b_.PrependInt32Slot(7, h9, 0)
        return this
    def add_h10(h10:int):
        b_.PrependInt32Slot(8, h10, 0)
        return this
    def add_h11(h11:float):
        b_.PrependFloat64Slot(9, h11, 0.0)
        return this
    def add_h12(h12:float):
        b_.PrependFloat64Slot(10, h12, 0.0)
        return this
    def add_h13(h13:float):
        b_.PrependFloat64Slot(11, h13, 0.0)
        return this
    def add_h14(h14:float):
        b_.PrependFloat64Slot(12, h14, 0.0)
        return this
    def add_h15(h15:float):
        b_.PrependFloat64Slot(13, h15, 0.0)
        return this
    def add_h16(h16:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, h16)
        return this
    def add_h17(h17:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, h17)
        return this
    def add_h18(h18:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, h18)
        return this
    def add_h19(h19:float):
        b_.PrependFloat64Slot(17, h19, 0.0)
        return this
    def add_h20(h20:int):
        b_.PrependInt32Slot(18, h20, 0)
        return this
    def add_h21(h21:int):
        b_.PrependInt32Slot(19, h21, 0)
        return this
    def add_h22(h22:int):
        b_.PrependInt32Slot(20, h22, 0)
        return this
    def add_h23(h23:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, h23)
        return this
    def add_h24(h24:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, h24)
        return this
    def add_h27(h27:int):
        b_.PrependInt32Slot(23, h27, 0)
        return this
    def add_h28(h28:int):
        b_.PrependInt64Slot(24, h28, 0)
        return this
    def add_h29(h29:int):
        b_.PrependInt32Slot(25, h29, 0)
        return this
    def add_h30(h30:int):
        b_.PrependInt32Slot(26, h30, 0)
        return this
    def add_h31(h31:int):
        b_.PrependInt32Slot(27, h31, 0)
        return this
    def add_h32(h32:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, h32)
        return this
    def end():
        return b_.EndObject()

def MtiHRR_AbridgedStartH32Vector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MtiHRR_AbridgedCreateH32Vector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

