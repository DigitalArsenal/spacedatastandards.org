// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class FlightPlanPoints_Full

/// /// Array of point data for this Point Group.
class FlightPlanPoints_Full : flatbuffers.handle
    /// Name of this point.
    /// Example: /// Example: CRUISE ALTITUDE ETP
    /// Constraints: Minimum length = 0, Maximum length = 36
    def pointName() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def fppLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def fppLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-09-09T01:00:00.123Z
    /// Constraints: No constraints specified.
    def fppEta() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
    /// Example: /// Example: 4250.1
    /// Constraints: No constraints specified.
    def fppReqFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)

def GetRootAsFlightPlanPoints_Full(buf:string): return FlightPlanPoints_Full { buf, flatbuffers.indirect(buf, 0) }

struct FlightPlanPoints_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_pointName(pointName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, pointName)
        return this
    def add_fppLat(fppLat:float):
        b_.PrependFloat64Slot(1, fppLat, 0.0)
        return this
    def add_fppLon(fppLon:float):
        b_.PrependFloat64Slot(2, fppLon, 0.0)
        return this
    def add_fppEta(fppEta:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, fppEta)
        return this
    def add_fppReqFuel(fppReqFuel:float):
        b_.PrependFloat64Slot(4, fppReqFuel, 0.0)
        return this
    def end():
        return b_.EndObject()

