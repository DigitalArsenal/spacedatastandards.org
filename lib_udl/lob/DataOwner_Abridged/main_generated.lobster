// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DataOwner_Abridged

/// /// Information pertaining to UDL data owners.
class DataOwner_Abridged : flatbuffers.handle
    /// The name of the data owner.
    /// Example: /// Example: Data owner name
    /// Constraints: Minimum length = 1, Maximum length = 64
    def doName() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 1, Maximum length = 32
    def ownerType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
    /// Example: /// Example: ELSET
    /// Constraints: Minimum length = 1, Maximum length = 64
    def dataType() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Organization name for the data provider.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 1, Maximum length = 64
    def provider() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 1, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the contact for this data owner.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idContact() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Description of this data owner.
    /// Example: /// Example: Description of this data owner.
    /// Constraints: No constraints specified.
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional control required to access this data type from this owner.
    /// Example: /// Example: PR-ACME-ELSETS
    /// Constraints: Minimum length = 1, Maximum length = 128
    def control() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def enabled() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Boolean indicating if the data owner is coming soon or not yet available.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def comingSoon() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)

def GetRootAsDataOwner_Abridged(buf:string): return DataOwner_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct DataOwner_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(12)
        return this
    def add_doName(doName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, doName)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_ownerType(ownerType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, ownerType)
        return this
    def add_dataType(dataType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, dataType)
        return this
    def add_provider(provider:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, provider)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, countryCode)
        return this
    def add_idContact(idContact:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idContact)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, description)
        return this
    def add_control(control:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, control)
        return this
    def add_enabled(enabled:bool):
        b_.PrependBoolSlot(9, enabled, 0)
        return this
    def add_comingSoon(comingSoon:bool):
        b_.PrependBoolSlot(10, comingSoon, 0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def end():
        return b_.EndObject()

