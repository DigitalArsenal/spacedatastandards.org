// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum WeatherData_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    WeatherData_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    WeatherData_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    WeatherData_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    WeatherData_Full_dataMode_Enum_EXERCISE = 3

class WeatherData_Full

/// /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
class WeatherData_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: WEATHER-DATA-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the sensor making the weather measurement.
    /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
    /// Example: /// Example: [116.5, 121.6]
    /// Constraints: No constraints specified.
    def sigPwrs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def sigPwrs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
    /// Example: /// Example: [58.2, 58.3]
    /// Constraints: No constraints specified.
    def noiseLvls(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def noiseLvls_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
    /// Example: /// Example: [0.3, 0.6]
    /// Constraints: No constraints specified.
    def specWidths(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def specWidths_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
    /// Example: /// Example: [16, 1]
    /// Constraints: No constraints specified.
    def firstGuessAvgs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def firstGuessAvgs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Quality control flag value, as defined by the data provider.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def qcValue() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Datetime the system files were created.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def fileCreation() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Last altitude with recorded measurements in this record, in meters.
    /// Example: /// Example: 19505.1
    /// Constraints: No constraints specified.
    def termAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Average transmitted power of the radar, in kilowatts.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def avgTxPwr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Average power of the reflected signal received by the radar, in Watts.
    /// Example: /// Example: 714.9
    /// Constraints: No constraints specified.
    def avgRefPwr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Number of sectors within the radar coverage area, each containing a number of antennas.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    def sectorNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Number of antennas across all sectors within the radar coverage area.
    /// Example: /// Example: 640
    /// Constraints: No constraints specified.
    def numElements() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
    /// Example: /// Example: [32, 30]
    /// Constraints: No constraints specified.
    def tdAvgSampleNums(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def tdAvgSampleNums_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Checksum value for the data.
    /// Example: /// Example: 133
    /// Constraints: No constraints specified.
    def checksum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
    /// Example: /// Example: [4, 3]
    /// Constraints: No constraints specified.
    def coIntegs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def coIntegs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
    /// Example: /// Example: [4, 3]
    /// Constraints: No constraints specified.
    def specAvgs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def specAvgs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
    /// Example: /// Example: [1000.3, 1000.2]
    /// Constraints: No constraints specified.
    def interpulsePeriods(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def interpulsePeriods_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
    /// Example: /// Example: [44.4, 467.3]
    /// Constraints: No constraints specified.
    def doppVels(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def doppVels_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
    /// Example: /// Example: [5, 2]
    /// Constraints: No constraints specified.
    def consRecs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def consRecs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
    /// Example: /// Example: [14.5, -16.2]
    /// Constraints: No constraints specified.
    def snrs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def snrs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
    /// Example: /// Example: 163.7
    /// Constraints: No constraints specified.
    def sigStrength() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Semi-major axis of the 50% positional confidence ellipse, in kilometers.
    /// Example: /// Example: 3.4
    /// Constraints: No constraints specified.
    def semiMajorAxis() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
    /// Example: /// Example: 0.3
    /// Constraints: No constraints specified.
    def semiMinorAxis() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
    /// Example: /// Example: 75.7
    /// Constraints: No constraints specified.
    def angleOrientation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Number of sensors used in the lightning event location solution.
    /// Example: /// Example: 9
    /// Constraints: No constraints specified.
    def lightEventNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// Array of sensor(s) that participated in the lightning event location determination.
    /// Example: /// Example: [11, 28, 190]
    /// Constraints: No constraints specified.
    def lightDetSensors(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 62) + i * 4)
    def lightDetSensors_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 62)
    /// The positional confidence of the calculated lightning event location using the chi-square statistical method.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def posConfidence() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['SENSOR', 'WEATHERREPORT']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 66) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 66)
    /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 68) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 68)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> WeatherData_Full_dataMode_Enum:
        return WeatherData_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 80, 0))

def GetRootAsWeatherData_Full(buf:string): return WeatherData_Full { buf, flatbuffers.indirect(buf, 0) }

struct WeatherData_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(39)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origSensorId)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, obTime)
        return this
    def add_sigPwrs(sigPwrs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, sigPwrs)
        return this
    def add_noiseLvls(noiseLvls:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, noiseLvls)
        return this
    def add_specWidths(specWidths:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, specWidths)
        return this
    def add_firstGuessAvgs(firstGuessAvgs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, firstGuessAvgs)
        return this
    def add_qcValue(qcValue:int):
        b_.PrependInt32Slot(9, qcValue, 0)
        return this
    def add_fileCreation(fileCreation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, fileCreation)
        return this
    def add_termAlt(termAlt:float):
        b_.PrependFloat64Slot(11, termAlt, 0.0)
        return this
    def add_avgTxPwr(avgTxPwr:float):
        b_.PrependFloat64Slot(12, avgTxPwr, 0.0)
        return this
    def add_avgRefPwr(avgRefPwr:float):
        b_.PrependFloat64Slot(13, avgRefPwr, 0.0)
        return this
    def add_sectorNum(sectorNum:int):
        b_.PrependInt32Slot(14, sectorNum, 0)
        return this
    def add_numElements(numElements:int):
        b_.PrependInt32Slot(15, numElements, 0)
        return this
    def add_tdAvgSampleNums(tdAvgSampleNums:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, tdAvgSampleNums)
        return this
    def add_checksum(checksum:int):
        b_.PrependInt32Slot(17, checksum, 0)
        return this
    def add_coIntegs(coIntegs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, coIntegs)
        return this
    def add_specAvgs(specAvgs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, specAvgs)
        return this
    def add_interpulsePeriods(interpulsePeriods:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, interpulsePeriods)
        return this
    def add_doppVels(doppVels:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, doppVels)
        return this
    def add_consRecs(consRecs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, consRecs)
        return this
    def add_snrs(snrs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, snrs)
        return this
    def add_sigStrength(sigStrength:float):
        b_.PrependFloat64Slot(24, sigStrength, 0.0)
        return this
    def add_semiMajorAxis(semiMajorAxis:float):
        b_.PrependFloat64Slot(25, semiMajorAxis, 0.0)
        return this
    def add_semiMinorAxis(semiMinorAxis:float):
        b_.PrependFloat64Slot(26, semiMinorAxis, 0.0)
        return this
    def add_angleOrientation(angleOrientation:float):
        b_.PrependFloat64Slot(27, angleOrientation, 0.0)
        return this
    def add_lightEventNum(lightEventNum:int):
        b_.PrependInt32Slot(28, lightEventNum, 0)
        return this
    def add_lightDetSensors(lightDetSensors:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, lightDetSensors)
        return this
    def add_posConfidence(posConfidence:float):
        b_.PrependFloat64Slot(30, posConfidence, 0.0)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, srcIds)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, origNetwork)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origin)
        return this
    def add_dataMode(dataMode:WeatherData_Full_dataMode_Enum):
        b_.PrependInt8Slot(38, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def WeatherData_FullStartSigPwrsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateSigPwrsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartNoiseLvlsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateNoiseLvlsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartSpecWidthsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateSpecWidthsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartFirstGuessAvgsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateFirstGuessAvgsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartTdAvgSampleNumsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateTdAvgSampleNumsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartCoIntegsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateCoIntegsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartSpecAvgsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateSpecAvgsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartInterpulsePeriodsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateInterpulsePeriodsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartDoppVelsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateDoppVelsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartConsRecsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateConsRecsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartSnrsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateSnrsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartLightDetSensorsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateLightDetSensorsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherData_FullStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherData_FullCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

