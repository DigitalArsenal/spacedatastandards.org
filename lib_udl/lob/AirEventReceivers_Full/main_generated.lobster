// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AirEventReceivers_Full

/// /// Collection of receiver aircraft associated with this Air Event.
class AirEventReceivers_Full : flatbuffers.handle
    /// The UDL ID of the aircraft sortie this receiver is associated with for this event.
    /// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idReceiverSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The UDL ID of the mission this receiver is associated with for this event.
    /// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idReceiverMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The UDL ID of the airfield this receiver is associated with for this event.
    /// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idReceiverAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalReceiverId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Coordination record identifier of this receiver.
    /// Example: /// Example: TTC601
    /// Constraints: Minimum length = 0, Maximum length = 6
    def receiverCoord() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The Model Design Series designation of this receiver.
    /// Example: /// Example: KC135R
    /// Constraints: Minimum length = 0, Maximum length = 128
    def receiverMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The Air Mobility Command (AMC) mission identifier of this receiver.
    /// Example: /// Example: 8PH000B1S052
    /// Constraints: Minimum length = 0, Maximum length = 36
    def amcReceiverMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Alternate mission identifier of this receiver provided by source.
    /// Example: /// Example: 1UN05201L121
    /// Constraints: Minimum length = 0, Maximum length = 32
    def altReceiverMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The call sign assigned to this receiver.
    /// Example: /// Example: BAKER
    /// Constraints: Minimum length = 0, Maximum length = 24
    def receiverCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The wing or unit that owns this receiver.
    /// Example: /// Example: 117ARW
    /// Constraints: Minimum length = 0, Maximum length = 256
    def receiverOwner() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The name and/or number of the point of contact for this receiver.
    /// Example: /// Example: JOHN SMITH (555)555-5555
    /// Constraints: Minimum length = 0, Maximum length = 68
    def receiverPOC() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Identifies the itinerary point of a mission that this receiver is linked to.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    def receiverLegNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Location the receiver is deployed to for an air refueling event.
    /// Example: /// Example: KOFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    def receiverDeployedICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
    /// Example: /// Example: DROGUE
    /// Constraints: Minimum length = 0, Maximum length = 6
    def receiverDeliveryMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
    /// Example: /// Example: 15000000.1
    /// Constraints: No constraints specified.
    def fuelOn() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Position of this receiver within a group of receivers in an air refueling event.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def receiverCellPosition() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Indicates the unique number by Unit ID, which identifies an air refueling event.
    /// Example: /// Example: 1018
    /// Constraints: Minimum length = 0, Maximum length = 15
    def sequenceNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
    /// Example: /// Example: AMC
    /// Constraints: Minimum length = 0, Maximum length = 3
    def recOrg() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Number of aircraft contained within one receiver coordination record for an air refueling event.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numRecAircraft() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Type of fuel being transferred to the receiver in an air refueling event.
    /// Example: /// Example: JP8
    /// Constraints: Minimum length = 0, Maximum length = 3
    def receiverFuelType() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Name of the receiver exercise associated with an air refueling event.
    /// Example: /// Example: NATO19
    /// Constraints: Minimum length = 0, Maximum length = 12
    def receiverExercise() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The package identifier for the receiver in an air refueling event.
    /// Example: /// Example: 135
    /// Constraints: Minimum length = 0, Maximum length = 3
    def packageId() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)

def GetRootAsAirEventReceivers_Full(buf:string): return AirEventReceivers_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirEventReceivers_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_idReceiverSortie(idReceiverSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idReceiverSortie)
        return this
    def add_idReceiverMission(idReceiverMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idReceiverMission)
        return this
    def add_idReceiverAirfield(idReceiverAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idReceiverAirfield)
        return this
    def add_externalReceiverId(externalReceiverId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, externalReceiverId)
        return this
    def add_receiverCoord(receiverCoord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, receiverCoord)
        return this
    def add_receiverMDS(receiverMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, receiverMDS)
        return this
    def add_amcReceiverMissionId(amcReceiverMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, amcReceiverMissionId)
        return this
    def add_altReceiverMissionId(altReceiverMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, altReceiverMissionId)
        return this
    def add_receiverCallSign(receiverCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, receiverCallSign)
        return this
    def add_receiverOwner(receiverOwner:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, receiverOwner)
        return this
    def add_receiverPOC(receiverPOC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, receiverPOC)
        return this
    def add_receiverLegNum(receiverLegNum:int):
        b_.PrependInt32Slot(11, receiverLegNum, 0)
        return this
    def add_receiverDeployedICAO(receiverDeployedICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, receiverDeployedICAO)
        return this
    def add_receiverDeliveryMethod(receiverDeliveryMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, receiverDeliveryMethod)
        return this
    def add_fuelOn(fuelOn:float):
        b_.PrependFloat64Slot(14, fuelOn, 0.0)
        return this
    def add_receiverCellPosition(receiverCellPosition:int):
        b_.PrependInt32Slot(15, receiverCellPosition, 0)
        return this
    def add_sequenceNum(sequenceNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, sequenceNum)
        return this
    def add_recOrg(recOrg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, recOrg)
        return this
    def add_numRecAircraft(numRecAircraft:int):
        b_.PrependInt32Slot(18, numRecAircraft, 0)
        return this
    def add_receiverFuelType(receiverFuelType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, receiverFuelType)
        return this
    def add_receiverExercise(receiverExercise:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, receiverExercise)
        return this
    def add_packageId(packageId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, packageId)
        return this
    def end():
        return b_.EndObject()

