// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum WeatherReport_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    WeatherReport_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    WeatherReport_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    WeatherReport_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    WeatherReport_Abridged_dataMode_Enum_EXERCISE = 3

class WeatherReport_Abridged

/// /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
class WeatherReport_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: WEATHER-REPORT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the sensor making the weather measurement.
    /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
    /// Example: /// Example: WEATHER-ID
    /// Constraints: Minimum length = 0, Maximum length = 128
    def weatherId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Identifier of the ground imagery associated for this weather over target report.
    /// Example: /// Example: GROUND-IMAGERY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idGroundImagery() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Identifier of the Site that is associated with this weather report.
    /// Example: /// Example: AIRFIELD-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Identifier of the Airfield associated with this weather report.
    /// Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
    /// Example: /// Example: KAFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    def icao() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: GDSSMB022408301601304517
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: TMDS060AD4OG03CC
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalLocationId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
    /// Example: /// Example: FORECAST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def reportType() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def forecastStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    /// Example: /// Example: 2024-01-01T18:00:00.123Z
    /// Constraints: No constraints specified.
    def forecastEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 56.12
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -156.6
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: /// Example: 123.12
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
    /// Example: /// Example: 1000.0
    /// Constraints: No constraints specified.
    def geoPotentialAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
    /// Example: /// Example: MANDATORY
    /// Constraints: Minimum length = 0, Maximum length = 16
    def dataLevel() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def atext() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    def agjson() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Type of region as projected on the ground.
    /// Example: /// Example: ST_Polygon
    /// Constraints: Minimum length = 0, Maximum length = 128
    def atype() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def andims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 4326
    /// Constraints: No constraints specified.
    def asrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// Expresses the speed of the wind in meters/second.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def windSpd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Average wind speed over a 1 minute period, in meters/second.
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    def windSpdAvg() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Expresses the max gust speed of the wind, in meters/second.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def windGust() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
    /// Example: /// Example: 13.2
    /// Constraints: No constraints specified.
    def windGust10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
    /// Example: /// Example: 3.8
    /// Constraints: No constraints specified.
    def vshear() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
    /// Example: /// Example: 3.8
    /// Constraints: No constraints specified.
    def hshear() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
    /// Example: /// Example: -0.04
    /// Constraints: No constraints specified.
    def radVel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: 4.4
    /// Constraints: No constraints specified.
    def radVelBeam1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: -0.2
    /// Constraints: No constraints specified.
    def radVelBeam2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: -0.2
    /// Constraints: No constraints specified.
    def radVelBeam3() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: 11.4
    /// Constraints: No constraints specified.
    def radVelBeam4() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    /// Example: /// Example: 4.1
    /// Constraints: No constraints specified.
    def radVelBeam5() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Direction the wind is blowing, in degrees clockwise from true north.
    /// Example: /// Example: 75.1234
    /// Constraints: No constraints specified.
    def windDir() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Average wind direction over a 1 minute period, in degrees clockwise from true north.
    /// Example: /// Example: 57.1
    /// Constraints: No constraints specified.
    def windDirAvg() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
    /// Example: /// Example: 78.4
    /// Constraints: No constraints specified.
    def windDirPeak() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
    /// Example: /// Example: 44.5
    /// Constraints: No constraints specified.
    def windDirPeak10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// The perceived temperature in degrees C.
    /// Example: /// Example: 15.6
    /// Constraints: No constraints specified.
    def windChill() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// The difference in wind direction recorded over a period of time, in degrees.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    def dirDev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Boolean describing whether or not the wind direction and/or speed is variable.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def windVar() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 90, 0))
    /// Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
    /// x&nbsp;&nbsp;&nbsp;&nbsp;1
    /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    /// The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def windCov(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 92) + i * 4)
    def windCov_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 92)
    /// Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
    /// Example: /// Example: ['OVERCAST', 'BROKEN']
    /// Constraints: No constraints specified.
    def cloudCover(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 94) + i * 4)
    def cloudCover_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 94)
    /// Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
    /// Example: /// Example: [1.2, 2.2]
    /// Constraints: No constraints specified.
    def cloudHght(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 96) + i * 4)
    def cloudHght_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 96)
    /// Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def actWeather() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def weatherDesc() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def weatherInt() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// The Raw Meteorological Aerodrome Report (METAR) string.
    /// Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
    /// Constraints: Minimum length = 0, Maximum length = 512
    def rawMETAR() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
    /// Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def rawTAF() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Altimeter set to read zero at mean sea level in kilopascals.
    /// Example: /// Example: 1234.456
    /// Constraints: No constraints specified.
    def qnh() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// Visual distance in meters.
    /// Example: /// Example: 1234.456
    /// Constraints: No constraints specified.
    def visibility() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// The measurement of air temperature in degrees C.
    /// Example: /// Example: 23.45
    /// Constraints: No constraints specified.
    def temperature() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// The measurement of soil temperature in degrees C.
    /// Example: /// Example: 22.4
    /// Constraints: No constraints specified.
    def soilTemp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// The measurement of air pressure in the atmosphere in kilopascals.
    /// Example: /// Example: 101.2
    /// Constraints: No constraints specified.
    def barPress() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// The speed at which water is being applied to a specific area in millimeters per hour.
    /// Example: /// Example: 3.4
    /// Constraints: No constraints specified.
    def precipRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// The amount of rain that has fallen in the past hour, in centimeters.
    /// Example: /// Example: 1.2
    /// Constraints: No constraints specified.
    def rainHour() -> float:
        return flatbuffers.field_float64(buf_, pos_, 120, 0.0)
    /// The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
    /// Example: /// Example: 1234.456
    /// Constraints: No constraints specified.
    def solarRad() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
    /// Example: /// Example: 234.5
    /// Constraints: No constraints specified.
    def difRad() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
    /// Example: /// Example: 56.7
    /// Constraints: No constraints specified.
    def refRad() -> float:
        return flatbuffers.field_float64(buf_, pos_, 126, 0.0)
    /// Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
    /// Example: /// Example: 12.456
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 128, 0.0)
    /// Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
    /// Example: /// Example: 123.456
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 130, 0.0)
    /// Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 132, 0.0)
    /// The temperature at which air is saturated with water vapor, in degrees C.
    /// Example: /// Example: 15.6
    /// Constraints: No constraints specified.
    def dewPoint() -> float:
        return flatbuffers.field_float64(buf_, pos_, 134, 0.0)
    /// The percentage of water vapor in the atmosphere.
    /// Example: /// Example: 34.456
    /// Constraints: No constraints specified.
    def relHumidity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 136, 0.0)
    /// An indication of how much the atmosphere refracts light.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def indexRefraction() -> float:
        return flatbuffers.field_float64(buf_, pos_, 138, 0.0)
    /// The volumetric percentage of soil water contained in a given volume of soil.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    def soilMoisture() -> float:
        return flatbuffers.field_float64(buf_, pos_, 140, 0.0)
    /// Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def surroundingWeather() -> string:
        return flatbuffers.field_string(buf_, pos_, 142)
    /// Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
    /// Example: /// Example: NO STATEMENT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def weatherAmp() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// Reports the lowest altitude at which contrails are occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    def contrailHghtLower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// Reports the highest altitude at which contrails are occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    def contrailHghtUpper() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// Reports the highest altitude at which icing or freezing rain is occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    def icingUpperLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 150, 0.0)
    /// Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
    /// Example: /// Example: 123.123
    /// Constraints: No constraints specified.
    def icingLowerLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 152, 0.0)
    /// Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
    /// MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
    /// MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
    /// THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
    /// Example: /// Example: THUNDERSTORMS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def enRouteWeather() -> string:
        return flatbuffers.field_string(buf_, pos_, 154)
    /// Flag indicating detection of a cloud-to-cloud lightning event.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def ccEvent() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 156, 0))
    /// Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['SENSOR', 'WEATHERDATA']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 158) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 158)
    /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 160) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 160)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 164)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 166)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 168)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 170)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> WeatherReport_Abridged_dataMode_Enum:
        return WeatherReport_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 172, 0))

def GetRootAsWeatherReport_Abridged(buf:string): return WeatherReport_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct WeatherReport_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(85)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origSensorId)
        return this
    def add_weatherId(weatherId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, weatherId)
        return this
    def add_idGroundImagery(idGroundImagery:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idGroundImagery)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idSite)
        return this
    def add_idAirfield(idAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idAirfield)
        return this
    def add_icao(icao:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, icao)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, externalId)
        return this
    def add_externalLocationId(externalLocationId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, externalLocationId)
        return this
    def add_reportType(reportType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, reportType)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, obTime)
        return this
    def add_forecastStartTime(forecastStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, forecastStartTime)
        return this
    def add_forecastEndTime(forecastEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, forecastEndTime)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(15, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(16, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(17, alt, 0.0)
        return this
    def add_geoPotentialAlt(geoPotentialAlt:float):
        b_.PrependFloat64Slot(18, geoPotentialAlt, 0.0)
        return this
    def add_dataLevel(dataLevel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, dataLevel)
        return this
    def add_atext(atext:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, atext)
        return this
    def add_agjson(agjson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, agjson)
        return this
    def add_atype(atype:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, atype)
        return this
    def add_andims(andims:int):
        b_.PrependInt32Slot(23, andims, 0)
        return this
    def add_asrid(asrid:int):
        b_.PrependInt32Slot(24, asrid, 0)
        return this
    def add_windSpd(windSpd:float):
        b_.PrependFloat64Slot(25, windSpd, 0.0)
        return this
    def add_windSpdAvg(windSpdAvg:float):
        b_.PrependFloat64Slot(26, windSpdAvg, 0.0)
        return this
    def add_windGust(windGust:float):
        b_.PrependFloat64Slot(27, windGust, 0.0)
        return this
    def add_windGust10(windGust10:float):
        b_.PrependFloat64Slot(28, windGust10, 0.0)
        return this
    def add_vshear(vshear:float):
        b_.PrependFloat64Slot(29, vshear, 0.0)
        return this
    def add_hshear(hshear:float):
        b_.PrependFloat64Slot(30, hshear, 0.0)
        return this
    def add_radVel(radVel:float):
        b_.PrependFloat64Slot(31, radVel, 0.0)
        return this
    def add_radVelBeam1(radVelBeam1:float):
        b_.PrependFloat64Slot(32, radVelBeam1, 0.0)
        return this
    def add_radVelBeam2(radVelBeam2:float):
        b_.PrependFloat64Slot(33, radVelBeam2, 0.0)
        return this
    def add_radVelBeam3(radVelBeam3:float):
        b_.PrependFloat64Slot(34, radVelBeam3, 0.0)
        return this
    def add_radVelBeam4(radVelBeam4:float):
        b_.PrependFloat64Slot(35, radVelBeam4, 0.0)
        return this
    def add_radVelBeam5(radVelBeam5:float):
        b_.PrependFloat64Slot(36, radVelBeam5, 0.0)
        return this
    def add_windDir(windDir:float):
        b_.PrependFloat64Slot(37, windDir, 0.0)
        return this
    def add_windDirAvg(windDirAvg:float):
        b_.PrependFloat64Slot(38, windDirAvg, 0.0)
        return this
    def add_windDirPeak(windDirPeak:float):
        b_.PrependFloat64Slot(39, windDirPeak, 0.0)
        return this
    def add_windDirPeak10(windDirPeak10:float):
        b_.PrependFloat64Slot(40, windDirPeak10, 0.0)
        return this
    def add_windChill(windChill:float):
        b_.PrependFloat64Slot(41, windChill, 0.0)
        return this
    def add_dirDev(dirDev:float):
        b_.PrependFloat64Slot(42, dirDev, 0.0)
        return this
    def add_windVar(windVar:bool):
        b_.PrependBoolSlot(43, windVar, 0)
        return this
    def add_windCov(windCov:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, windCov)
        return this
    def add_cloudCover(cloudCover:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, cloudCover)
        return this
    def add_cloudHght(cloudHght:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, cloudHght)
        return this
    def add_actWeather(actWeather:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, actWeather)
        return this
    def add_weatherDesc(weatherDesc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, weatherDesc)
        return this
    def add_weatherInt(weatherInt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, weatherInt)
        return this
    def add_rawMETAR(rawMETAR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, rawMETAR)
        return this
    def add_rawTAF(rawTAF:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, rawTAF)
        return this
    def add_qnh(qnh:float):
        b_.PrependFloat64Slot(52, qnh, 0.0)
        return this
    def add_visibility(visibility:float):
        b_.PrependFloat64Slot(53, visibility, 0.0)
        return this
    def add_temperature(temperature:float):
        b_.PrependFloat64Slot(54, temperature, 0.0)
        return this
    def add_soilTemp(soilTemp:float):
        b_.PrependFloat64Slot(55, soilTemp, 0.0)
        return this
    def add_barPress(barPress:float):
        b_.PrependFloat64Slot(56, barPress, 0.0)
        return this
    def add_precipRate(precipRate:float):
        b_.PrependFloat64Slot(57, precipRate, 0.0)
        return this
    def add_rainHour(rainHour:float):
        b_.PrependFloat64Slot(58, rainHour, 0.0)
        return this
    def add_solarRad(solarRad:float):
        b_.PrependFloat64Slot(59, solarRad, 0.0)
        return this
    def add_difRad(difRad:float):
        b_.PrependFloat64Slot(60, difRad, 0.0)
        return this
    def add_refRad(refRad:float):
        b_.PrependFloat64Slot(61, refRad, 0.0)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(62, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(63, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(64, senalt, 0.0)
        return this
    def add_dewPoint(dewPoint:float):
        b_.PrependFloat64Slot(65, dewPoint, 0.0)
        return this
    def add_relHumidity(relHumidity:float):
        b_.PrependFloat64Slot(66, relHumidity, 0.0)
        return this
    def add_indexRefraction(indexRefraction:float):
        b_.PrependFloat64Slot(67, indexRefraction, 0.0)
        return this
    def add_soilMoisture(soilMoisture:float):
        b_.PrependFloat64Slot(68, soilMoisture, 0.0)
        return this
    def add_surroundingWeather(surroundingWeather:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(69, surroundingWeather)
        return this
    def add_weatherAmp(weatherAmp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, weatherAmp)
        return this
    def add_contrailHghtLower(contrailHghtLower:float):
        b_.PrependFloat64Slot(71, contrailHghtLower, 0.0)
        return this
    def add_contrailHghtUpper(contrailHghtUpper:float):
        b_.PrependFloat64Slot(72, contrailHghtUpper, 0.0)
        return this
    def add_icingUpperLimit(icingUpperLimit:float):
        b_.PrependFloat64Slot(73, icingUpperLimit, 0.0)
        return this
    def add_icingLowerLimit(icingLowerLimit:float):
        b_.PrependFloat64Slot(74, icingLowerLimit, 0.0)
        return this
    def add_enRouteWeather(enRouteWeather:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, enRouteWeather)
        return this
    def add_ccEvent(ccEvent:bool):
        b_.PrependBoolSlot(76, ccEvent, 0)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(77, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(78, srcIds)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, origNetwork)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(80, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(81, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(82, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(83, origin)
        return this
    def add_dataMode(dataMode:WeatherReport_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(84, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def WeatherReport_AbridgedStartWindCovVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherReport_AbridgedCreateWindCovVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherReport_AbridgedStartCloudCoverVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherReport_AbridgedCreateCloudCoverVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherReport_AbridgedStartCloudHghtVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherReport_AbridgedCreateCloudHghtVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherReport_AbridgedStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherReport_AbridgedCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def WeatherReport_AbridgedStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def WeatherReport_AbridgedCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

