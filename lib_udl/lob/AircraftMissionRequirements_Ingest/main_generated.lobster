// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AircraftMissionRequirements_Ingest

/// /// Collection of Requirements associated with this Air Transport Mission.
class AircraftMissionRequirements_Ingest : flatbuffers.handle
    /// Global Decision Support System (GDSS) mission requirement identifier.
    /// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
    /// Constraints: Minimum length = 0, Maximum length = 36
    def gdssReqId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the onload itinerary location.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    def onloadId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Onload location code.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 20
    def onloadLOCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Identifier of the offload itinerary location.
    /// Example: /// Example: 300
    /// Constraints: No constraints specified.
    def offloadId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Offload location code.
    /// Example: /// Example: KHOP
    /// Constraints: Minimum length = 0, Maximum length = 20
    def offloadLOCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unit line number.
    /// Example: /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 8
    def uln() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Transportation requirement number.
    /// Example: /// Example: T01ME01
    /// Constraints: Minimum length = 0, Maximum length = 50
    def transReqNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Project name.
    /// Example: /// Example: CENTINTRA21
    /// Constraints: Minimum length = 0, Maximum length = 50
    def projName() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Identification number of the Operation Plan (OPLAN) associated with this mission.
    /// Example: /// Example: 5027
    /// Constraints: Minimum length = 0, Maximum length = 32
    def oplan() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Number of passengers associated with the mission.
    /// Example: /// Example: 44
    /// Constraints: No constraints specified.
    def numPax() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Number of litter patients tasked for the mission.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numLitter() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Number of ambulatory patients tasked for the mission.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numAmbulatory() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Number of attendants tasked for the mission.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numAttendant() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Total weight of the bulk cargo, in kilograms.
    /// Example: /// Example: 1.3
    /// Constraints: No constraints specified.
    def bulkWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Total weight of the oversized cargo, in kilograms.
    /// Example: /// Example: 1.3
    /// Constraints: No constraints specified.
    def oversizeWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Total weight of the outsize cargo, in kilograms.
    /// Example: /// Example: 1.3
    /// Constraints: No constraints specified.
    def outsizeWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Earliest available date the cargo can be picked up.
    /// Example: /// Example: 2024-01-01T16:00:00Z
    /// Constraints: No constraints specified.
    def ead() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Latest available date the cargo may be delivered.
    /// Example: /// Example: 2024-01-01T16:00:00Z
    /// Constraints: No constraints specified.
    def lad() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)

def GetRootAsAircraftMissionRequirements_Ingest(buf:string): return AircraftMissionRequirements_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AircraftMissionRequirements_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(18)
        return this
    def add_gdssReqId(gdssReqId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, gdssReqId)
        return this
    def add_onloadId(onloadId:int):
        b_.PrependInt32Slot(1, onloadId, 0)
        return this
    def add_onloadLOCode(onloadLOCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, onloadLOCode)
        return this
    def add_offloadId(offloadId:int):
        b_.PrependInt32Slot(3, offloadId, 0)
        return this
    def add_offloadLOCode(offloadLOCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, offloadLOCode)
        return this
    def add_uln(uln:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, uln)
        return this
    def add_transReqNum(transReqNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, transReqNum)
        return this
    def add_projName(projName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, projName)
        return this
    def add_oplan(oplan:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, oplan)
        return this
    def add_numPax(numPax:int):
        b_.PrependInt32Slot(9, numPax, 0)
        return this
    def add_numLitter(numLitter:int):
        b_.PrependInt32Slot(10, numLitter, 0)
        return this
    def add_numAmbulatory(numAmbulatory:int):
        b_.PrependInt32Slot(11, numAmbulatory, 0)
        return this
    def add_numAttendant(numAttendant:int):
        b_.PrependInt32Slot(12, numAttendant, 0)
        return this
    def add_bulkWeight(bulkWeight:float):
        b_.PrependFloat64Slot(13, bulkWeight, 0.0)
        return this
    def add_oversizeWeight(oversizeWeight:float):
        b_.PrependFloat64Slot(14, oversizeWeight, 0.0)
        return this
    def add_outsizeWeight(outsizeWeight:float):
        b_.PrependFloat64Slot(15, outsizeWeight, 0.0)
        return this
    def add_ead(ead:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, ead)
        return this
    def add_lad(lad:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, lad)
        return this
    def end():
        return b_.EndObject()

