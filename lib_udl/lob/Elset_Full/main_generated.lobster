// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Elset_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Elset_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Elset_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Elset_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Elset_Full_dataMode_Enum_EXERCISE = 3

enum Elset_Full_sourcedDataTypes_Enum:
    /// No description available.
    Elset_Full_sourcedDataTypes_Enum_EO = 0
    /// No description available.
    Elset_Full_sourcedDataTypes_Enum_RADAR = 1
    /// No description available.
    Elset_Full_sourcedDataTypes_Enum_RF = 2
    /// No description available.
    Elset_Full_sourcedDataTypes_Enum_DOA = 3
    /// No description available.
    Elset_Full_sourcedDataTypes_Enum_ELSET = 4
    /// No description available.
    Elset_Full_sourcedDataTypes_Enum_SV = 5

class Elset_Full

/// /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
class Elset_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ELSET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def epoch() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def meanMotion() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 16, 0))
    /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
    /// Example: /// Example: 0.333
    /// Constraints: No constraints specified.
    def eccentricity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def inclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def raan() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def argOfPerigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def meanAnomaly() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
    /// Example: /// Example: 111
    /// Constraints: No constraints specified.
    def revNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def bStar() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
    /// Example: /// Example: 0.0126
    /// Constraints: No constraints specified.
    def agom() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
    /// Example: /// Example: 0.00815
    /// Constraints: No constraints specified.
    def ballisticCoeff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def meanMotionDot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def meanMotionDDot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def semiMajorAxis() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Period of the orbit equal to inverse of mean motion, in minutes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def period() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def apogee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def perigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOrbitDetermination() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def effectiveFrom() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def effectiveUntil() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
    /// Example: /// Example: Example line1
    /// Constraints: Minimum length = 0, Maximum length = 69
    def line1() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
    /// Example: /// Example: Example line2
    /// Constraints: Minimum length = 0, Maximum length = 69
    def line2() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Elset_Full_dataMode_Enum:
        return Elset_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 74, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 76) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 76)
    /// Optional algorithm used to produce this record.
    /// Example: /// Example: Example algorithm
    /// Constraints: Minimum length = 0, Maximum length = 64
    def algorithm() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    /// Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
    /// Constraints: No constraints specified.
    def sourcedData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 80) + i * 4)
    def sourcedData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 80)
    /// Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
    /// Example: /// Example: ['RADAR', 'RF']
    /// Constraints: No constraints specified.
    def sourcedDataTypes() -> Elset_Full_sourcedDataTypes_Enum:
        return Elset_Full_sourcedDataTypes_Enum(flatbuffers.field_int8(buf_, pos_, 82, 0))
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// The ephemeris type associated with this TLE:
    /// 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
    /// 1:&nbsp;SGP
    /// 2:&nbsp;SGP4
    /// 3:&nbsp;SDP4
    /// 4:&nbsp;SGP8, also referred to as SGP4-XP
    /// 5:&nbsp;SDP8
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def ephemType() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)

def GetRootAsElset_Full(buf:string): return Elset_Full { buf, flatbuffers.indirect(buf, 0) }

struct Elset_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(44)
        return this
    def add_idElset(idElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idElset)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(2, satNo, 0)
        return this
    def add_epoch(epoch:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, epoch)
        return this
    def add_meanMotion(meanMotion:float):
        b_.PrependFloat64Slot(4, meanMotion, 0.0)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idOnOrbit)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(6, uct, 0)
        return this
    def add_eccentricity(eccentricity:float):
        b_.PrependFloat64Slot(7, eccentricity, 0.0)
        return this
    def add_inclination(inclination:float):
        b_.PrependFloat64Slot(8, inclination, 0.0)
        return this
    def add_raan(raan:float):
        b_.PrependFloat64Slot(9, raan, 0.0)
        return this
    def add_argOfPerigee(argOfPerigee:float):
        b_.PrependFloat64Slot(10, argOfPerigee, 0.0)
        return this
    def add_meanAnomaly(meanAnomaly:float):
        b_.PrependFloat64Slot(11, meanAnomaly, 0.0)
        return this
    def add_revNo(revNo:int):
        b_.PrependInt32Slot(12, revNo, 0)
        return this
    def add_bStar(bStar:float):
        b_.PrependFloat64Slot(13, bStar, 0.0)
        return this
    def add_agom(agom:float):
        b_.PrependFloat64Slot(14, agom, 0.0)
        return this
    def add_ballisticCoeff(ballisticCoeff:float):
        b_.PrependFloat64Slot(15, ballisticCoeff, 0.0)
        return this
    def add_meanMotionDot(meanMotionDot:float):
        b_.PrependFloat64Slot(16, meanMotionDot, 0.0)
        return this
    def add_meanMotionDDot(meanMotionDDot:float):
        b_.PrependFloat64Slot(17, meanMotionDDot, 0.0)
        return this
    def add_semiMajorAxis(semiMajorAxis:float):
        b_.PrependFloat64Slot(18, semiMajorAxis, 0.0)
        return this
    def add_period(period:float):
        b_.PrependFloat64Slot(19, period, 0.0)
        return this
    def add_apogee(apogee:float):
        b_.PrependFloat64Slot(20, apogee, 0.0)
        return this
    def add_perigee(perigee:float):
        b_.PrependFloat64Slot(21, perigee, 0.0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origObjectId)
        return this
    def add_idOrbitDetermination(idOrbitDetermination:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, idOrbitDetermination)
        return this
    def add_effectiveFrom(effectiveFrom:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, effectiveFrom)
        return this
    def add_effectiveUntil(effectiveUntil:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, effectiveUntil)
        return this
    def add_line1(line1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, line1)
        return this
    def add_line2(line2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, line2)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, descriptor)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, createdBy)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, rawFileURI)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origin)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, source)
        return this
    def add_dataMode(dataMode:Elset_Full_dataMode_Enum):
        b_.PrependInt8Slot(35, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, tags)
        return this
    def add_algorithm(algorithm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, algorithm)
        return this
    def add_sourcedData(sourcedData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, sourcedData)
        return this
    def add_sourcedDataTypes(sourcedDataTypes:Elset_Full_sourcedDataTypes_Enum):
        b_.PrependInt8Slot(39, sourcedDataTypes, 0)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, transactionId)
        return this
    def add_ephemType(ephemType:int):
        b_.PrependInt32Slot(41, ephemType, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, origNetwork)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, onOrbit)
        return this
    def end():
        return b_.EndObject()

def Elset_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Elset_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Elset_FullStartSourcedDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Elset_FullCreateSourcedDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

