// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsTransportationPlans_Full

/// /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
class LogisticsTransportationPlans_Full : flatbuffers.handle
    /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    /// Example: /// Example: T89002
    /// Constraints: Minimum length = 0, Maximum length = 10
    def plansNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def missionChange() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 6, 0))
    /// Defines the transporation plan as either a deployment or redeployment.
    /// Example: /// Example: DEPLOY
    /// Constraints: Minimum length = 0, Maximum length = 32
    def planDefinition() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
    /// Example: /// Example: N
    /// Constraints: Minimum length = 1, Maximum length = 1
    def statusCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
    /// Example: /// Example: SMITH, JOHN
    /// Constraints: Minimum length = 0, Maximum length = 32
    def coordinator() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
    /// Example: /// Example: TACC
    /// Constraints: Minimum length = 0, Maximum length = 10
    def coordinatorUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The origin location.
    /// Example: /// Example: KATL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def originICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-15T14:25:00.123Z
    /// Constraints: No constraints specified.
    def estDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-15T14:25:00.123Z
    /// Constraints: No constraints specified.
    def estArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Destination location ICAO.
    /// Example: /// Example: YBCS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def destinationICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The identifier that represents a Logistics Master Record.
    /// Example: /// Example: L62126
    /// Constraints: Minimum length = 0, Maximum length = 10
    def logisticMasterRecordId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Contains the tail number displayed by GDSS2.
    /// Example: /// Example: 99209
    /// Constraints: Minimum length = 0, Maximum length = 7
    def tpTailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: C17A
    /// Constraints: Minimum length = 0, Maximum length = 8
    def tpAircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The major command for the current unit.
    /// Example: /// Example: HQAMC
    /// Constraints: Minimum length = 0, Maximum length = 250
    def majcom() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    def approxArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Transportation plan duration, expressed in the format MMM:SS.
    /// Example: /// Example: 086:20
    /// Constraints: Minimum length = 0, Maximum length = 6
    def duration() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T19:37:00.123Z
    /// Constraints: No constraints specified.
    def actDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    def closedDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    def cancelledDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
    /// Example: /// Example: NMCMU
    /// Constraints: Minimum length = 0, Maximum length = 6
    def aircraftStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Transportation plan enroute stops.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def numEnrouteStops() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
    /// Example: /// Example: 9009209
    /// Constraints: Minimum length = 0, Maximum length = 30
    def serialNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The number of transloads for this Transportation Plan.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numTransLoads() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-14T20:37:00.123Z
    /// Constraints: No constraints specified.
    def lastChangedDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The transportation segments associated with this transportation plan.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsSegments(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 52) + i * 4)
    def logisticsSegments_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 52)
    /// Remarks associated with this transportation plan.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsTransportationPlansRemarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def logisticsTransportationPlansRemarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)

def GetRootAsLogisticsTransportationPlans_Full(buf:string): return LogisticsTransportationPlans_Full { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsTransportationPlans_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(26)
        return this
    def add_plansNumber(plansNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, plansNumber)
        return this
    def add_missionChange(missionChange:bool):
        b_.PrependBoolSlot(1, missionChange, 0)
        return this
    def add_planDefinition(planDefinition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, planDefinition)
        return this
    def add_statusCode(statusCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, statusCode)
        return this
    def add_coordinator(coordinator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, coordinator)
        return this
    def add_coordinatorUnit(coordinatorUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, coordinatorUnit)
        return this
    def add_originICAO(originICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, originICAO)
        return this
    def add_estDepTime(estDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, estDepTime)
        return this
    def add_estArrTime(estArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, estArrTime)
        return this
    def add_destinationICAO(destinationICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, destinationICAO)
        return this
    def add_logisticMasterRecordId(logisticMasterRecordId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, logisticMasterRecordId)
        return this
    def add_tpTailNumber(tpTailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, tpTailNumber)
        return this
    def add_tpAircraftMDS(tpAircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, tpAircraftMDS)
        return this
    def add_majcom(majcom:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, majcom)
        return this
    def add_approxArrTime(approxArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, approxArrTime)
        return this
    def add_duration(duration:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, duration)
        return this
    def add_actDepTime(actDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, actDepTime)
        return this
    def add_closedDate(closedDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, closedDate)
        return this
    def add_cancelledDate(cancelledDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, cancelledDate)
        return this
    def add_aircraftStatus(aircraftStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, aircraftStatus)
        return this
    def add_numEnrouteStops(numEnrouteStops:int):
        b_.PrependInt32Slot(20, numEnrouteStops, 0)
        return this
    def add_serialNumber(serialNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, serialNumber)
        return this
    def add_numTransLoads(numTransLoads:int):
        b_.PrependInt32Slot(22, numTransLoads, 0)
        return this
    def add_lastChangedDate(lastChangedDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, lastChangedDate)
        return this
    def add_logisticsSegments(logisticsSegments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, logisticsSegments)
        return this
    def add_logisticsTransportationPlansRemarks(logisticsTransportationPlansRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, logisticsTransportationPlansRemarks)
        return this
    def end():
        return b_.EndObject()

def LogisticsTransportationPlans_FullStartLogisticsSegmentsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsTransportationPlans_FullCreateLogisticsSegmentsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LogisticsTransportationPlans_FullStartLogisticsTransportationPlansRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsTransportationPlans_FullCreateLogisticsTransportationPlansRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

