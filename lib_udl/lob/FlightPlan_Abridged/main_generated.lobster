// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum FlightPlan_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    FlightPlan_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    FlightPlan_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    FlightPlan_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    FlightPlan_Abridged_dataMode_Enum_EXERCISE = 3

class FlightPlan_Abridged

/// /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
class FlightPlan_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
    /// Example: /// Example: AJM7939B1123
    /// Constraints: Minimum length = 0, Maximum length = 36
    def amcMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The UDL unique identifier of the aircraft sortie associated with this flight plan.
    /// Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The UDL unique identifier of the aircraft associated with this flight plan.
    /// Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAircraft() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The leg number of this flight plan.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def legNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// The UDL unique identifier of the departure airfield associated with this flight plan.
    /// Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idDepAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: KSLV
    /// Constraints: Minimum length = 1, Maximum length = 36
    def depAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The UDL unique identifier of the arrival airfield associated with this flight plan.
    /// Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idArrAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 1, Maximum length = 36
    def arrAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The source ID of the flight plan from the generating system.
    /// Example: /// Example: AFMAPP20322347140001
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def genTS() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: KC-130 HERCULES
    /// Constraints: Minimum length = 0, Maximum length = 128
    def aircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The tail number of the aircraft associated with this flight plan.
    /// Example: /// Example: 77187
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The call sign assigned to the aircraft for this flight plan.
    /// Example: /// Example: HKY629
    /// Constraints: Minimum length = 0, Maximum length = 8
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def wxValidStart() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def wxValidEnd() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2023-05-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def estDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The percent degrade due to drag for this aircraft.
    /// Example: /// Example: 16.9
    /// Constraints: No constraints specified.
    def dragIndex() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// The fuel degrade percentage used for this mission.
    /// Example: /// Example: 10.3
    /// Constraints: No constraints specified.
    def fuelDegrade() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Operating weight of the aircraft in pounds.
    /// Example: /// Example: 251830.5
    /// Constraints: No constraints specified.
    def opWeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    /// Example: /// Example: 44.1
    /// Constraints: No constraints specified.
    def msnIndex() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
    /// Example: /// Example: 180000.1
    /// Constraints: No constraints specified.
    def rampFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Fuel required to start engines and taxi to the end of the runway in pounds.
    /// Example: /// Example: 1500.1
    /// Constraints: No constraints specified.
    def taxiFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
    /// Example: /// Example: 178500.1
    /// Constraints: No constraints specified.
    def takeoffFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Fuel required from brake release to Top of Climb in pounds.
    /// Example: /// Example: 7000.1
    /// Constraints: No constraints specified.
    def climbFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Time required from brake release to Top of Climb expressed as HH:MM.
    /// Example: /// Example: 00:13
    /// Constraints: Minimum length = 0, Maximum length = 6
    def climbTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Additional fuel burned at Top of Climb in pounds.
    /// Example: /// Example: 500.1
    /// Constraints: No constraints specified.
    def holdDownFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Additional fuel burned at Top of Climb for icing in pounds.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    def tocIceFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Fuel remaining at Top of Climb in pounds.
    /// Example: /// Example: 160000.1
    /// Constraints: No constraints specified.
    def tocFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Fuel required to fly from Top of Climb to Top of Descent in pounds.
    /// Example: /// Example: 155000.1
    /// Constraints: No constraints specified.
    def enrouteFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
    /// Example: /// Example: 06:30
    /// Constraints: Minimum length = 0, Maximum length = 6
    def enrouteTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    def thunderAvoidFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Additional fuel burned at Top of Descent for icing in pounds.
    /// Example: /// Example: 2000.1
    /// Constraints: No constraints specified.
    def todIceFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Additional fuel burned at Top of Descent for the operational condition in pounds.
    /// Example: /// Example: 5000.1
    /// Constraints: No constraints specified.
    def opConditionFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Fuel remaining at Top of Descent in pounds.
    /// Example: /// Example: 32000.1
    /// Constraints: No constraints specified.
    def todFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Additional fuel burned at landing/missed approach for an early descent in pounds.
    /// Example: /// Example: 500.1
    /// Constraints: No constraints specified.
    def earlyDescentFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Additional fuel burned at landing/missed approach for icing during arrival in pounds.
    /// Example: /// Example: 1000.1
    /// Constraints: No constraints specified.
    def arrIceFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Additional fuel burned at the destination for holding in pounds.
    /// Example: /// Example: 6000.1
    /// Constraints: No constraints specified.
    def holdFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Additional time for holding at the destination expressed as HH:MM.
    /// Example: /// Example: 01:00
    /// Constraints: Minimum length = 0, Maximum length = 6
    def holdTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Fuel burned from the initial approach point to landing in pounds.
    /// Example: /// Example: 3000.1
    /// Constraints: No constraints specified.
    def appLandingFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Fuel planned to be burned during the flight in pounds.
    /// Example: /// Example: 145000.1
    /// Constraints: No constraints specified.
    def burnedFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Fuel planned to be remaining on the airplane at landing in pounds.
    /// Example: /// Example: 19000.1
    /// Constraints: No constraints specified.
    def landingFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// The minimum fuel on board required to divert in pounds.
    /// Example: /// Example: 25000.1
    /// Constraints: No constraints specified.
    def minDivertFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// Fuel required to fly to alternate landing site 1 and land in pounds.
    /// Example: /// Example: 6000.1
    /// Constraints: No constraints specified.
    def arrAlternate1Fuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// Fuel required to fly to alternate landing site 2 and land in pounds.
    /// Example: /// Example: 6000.1
    /// Constraints: No constraints specified.
    def arrAlternate2Fuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// The amount of contingency fuel in pounds.
    /// Example: /// Example: 3000.1
    /// Constraints: No constraints specified.
    def contingencyFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// The amount of reserve fuel in pounds.
    /// Example: /// Example: 10000.1
    /// Constraints: No constraints specified.
    def reserveFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
    /// Example: /// Example: 20000.1
    /// Constraints: No constraints specified.
    def depressFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// The amount of unusable fuel in pounds.
    /// Example: /// Example: 2300.1
    /// Constraints: No constraints specified.
    def unusableFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// The amount of unidentified extra fuel required to get to min landing in pounds.
    /// Example: /// Example: 5000.1
    /// Constraints: No constraints specified.
    def unidentExtraFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// The amount of identified extra fuel carried and not available in the burn plan in pounds.
    /// Example: /// Example: 5000.1
    /// Constraints: No constraints specified.
    def identExtraFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Total fuel remaining at alternate landing site 1 in pounds.
    /// Example: /// Example: 18000.1
    /// Constraints: No constraints specified.
    def remAlternate1Fuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// Total fuel remaining at alternate landing site 2 in pounds.
    /// Example: /// Example: 18000.1
    /// Constraints: No constraints specified.
    def remAlternate2Fuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// Total endurance time based on the fuel on board expressed as HH:MM.
    /// Example: /// Example: 08:45
    /// Constraints: Minimum length = 0, Maximum length = 6
    def enduranceTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Name of the planned Standard Instrument Departure (SID) procedure.
    /// Example: /// Example: RENV3B
    /// Constraints: Minimum length = 0, Maximum length = 32
    def sid() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Name of the planned Standard Terminal Arrival (STAR) procedure.
    /// Example: /// Example: ADANA
    /// Constraints: Minimum length = 0, Maximum length = 32
    def star() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
    /// Example: /// Example: Failed by FAA SAPT 184022AUG2022
    /// Constraints: Minimum length = 0, Maximum length = 128
    def gpsRAIM() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// The departure runway for this flight.
    /// Example: /// Example: 05L
    /// Constraints: Minimum length = 0, Maximum length = 8
    def depRunway() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// The arrival runway for this flight.
    /// Example: /// Example: 05L
    /// Constraints: Minimum length = 0, Maximum length = 8
    def arrRunway() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    /// Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
    /// GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
    /// ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def routeString() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
    /// Example: /// Example: ['US', 'CA', 'UK']
    /// Constraints: No constraints specified.
    def countryCodes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 126) + i * 4)
    def countryCodes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 126)
    /// The Extended Operations (ETOPS) rating used to calculate this flight plan.
    /// Example: /// Example: 85 MINUTES
    /// Constraints: Minimum length = 0, Maximum length = 16
    def etopsRating() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
    /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    /// Constraints: No constraints specified.
    def etopsAirfields(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 130) + i * 4)
    def etopsAirfields_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 130)
    /// Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
    /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    /// Constraints: No constraints specified.
    def etopsAltAirfields(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 132) + i * 4)
    def etopsAltAirfields_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 132)
    /// The Extended Operations (ETOPS) validity window for the alternate airfield.
    /// Example: /// Example: LPLA: 0317Z-0722Z
    /// Constraints: Minimum length = 0, Maximum length = 64
    def etopsValWindow() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// Remarks from the planners concerning this flight plan.
    /// Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
    /// Constraints: Minimum length = 0, Maximum length = 512
    def plannerRemark() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// Remarks about the planned cargo associated with this flight plan.
    /// Example: /// Example: Expecting 55,000 lbs. If different, call us.
    /// Constraints: Minimum length = 0, Maximum length = 512
    def cargoRemark() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: -1.1
    /// Constraints: No constraints specified.
    def windFac1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 140, 0.0)
    /// Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def windFac2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    def windFacAvg() -> float:
        return flatbuffers.field_float64(buf_, pos_, 144, 0.0)
    /// Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
    /// Example: /// Example: 16.1
    /// Constraints: No constraints specified.
    def avgTempDev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// Array of Air Traffic Control (ATC) addresses.
    /// Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
    /// Constraints: No constraints specified.
    def atcAddresses(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 148) + i * 4)
    def atcAddresses_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 148)
    /// Air Traffic Control address filing the flight plan.
    /// Example: /// Example: ETARYXYX
    /// Constraints: Minimum length = 0, Maximum length = 24
    def originator() -> string:
        return flatbuffers.field_string(buf_, pos_, 150)
    /// The number of aircraft flying this flight plan.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numAircraft() -> int:
        return flatbuffers.field_int32(buf_, pos_, 152, 0)
    /// The flight rules this flight plan is being filed under.
    /// Example: /// Example: l
    /// Constraints: Minimum length = 0, Maximum length = 8
    def flightRules() -> string:
        return flatbuffers.field_string(buf_, pos_, 154)
    /// The type of flight (MILITARY, CIVILIAN, etc).
    /// Example: /// Example: MILITARY
    /// Constraints: Minimum length = 0, Maximum length = 16
    def flightType() -> string:
        return flatbuffers.field_string(buf_, pos_, 156)
    /// A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
    /// Example: /// Example: N0305
    /// Constraints: Minimum length = 0, Maximum length = 8
    def initialCruiseSpeed() -> string:
        return flatbuffers.field_string(buf_, pos_, 158)
    /// A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
    /// Example: /// Example: F270
    /// Constraints: Minimum length = 0, Maximum length = 8
    def initialFlightLevel() -> string:
        return flatbuffers.field_string(buf_, pos_, 160)
    /// The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: EDDS
    /// Constraints: Minimum length = 0, Maximum length = 36
    def arrAlternate1() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: EDDM
    /// Constraints: Minimum length = 0, Maximum length = 36
    def arrAlternate2() -> string:
        return flatbuffers.field_string(buf_, pos_, 164)
    /// The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: LFPO
    /// Constraints: Minimum length = 0, Maximum length = 36
    def depAlternate() -> string:
        return flatbuffers.field_string(buf_, pos_, 166)
    /// The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 8
    def wakeTurbCat() -> string:
        return flatbuffers.field_string(buf_, pos_, 168)
    /// The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
    /// Example: /// Example: SDFGHIRTUWXYZ/H
    /// Constraints: Minimum length = 0, Maximum length = 36
    def equipment() -> string:
        return flatbuffers.field_string(buf_, pos_, 170)
    /// Additional remarks for air traffic control for this flight.
    /// Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
    /// Constraints: Minimum length = 0, Maximum length = 64
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 172)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 174)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 176)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 178)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 180)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 182)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 184)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> FlightPlan_Abridged_dataMode_Enum:
        return FlightPlan_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 186, 0))
    /// Collection of air refueling events occurring on this flight.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def airRefuelEvents(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 188) + i * 4)
    def airRefuelEvents_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 188)
    /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def flightPlanMessages(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 190) + i * 4)
    def flightPlanMessages_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 190)
    /// Collection of waypoints associated with this flight plan.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def flightPlanWaypoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 192) + i * 4)
    def flightPlanWaypoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 192)
    /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def flightPlanPointGroups(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 194) + i * 4)
    def flightPlanPointGroups_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 194)

def GetRootAsFlightPlan_Abridged(buf:string): return FlightPlan_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct FlightPlan_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(96)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_amcMissionId(amcMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, amcMissionId)
        return this
    def add_idSortie(idSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSortie)
        return this
    def add_idAircraft(idAircraft:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idAircraft)
        return this
    def add_legNum(legNum:int):
        b_.PrependInt32Slot(5, legNum, 0)
        return this
    def add_idDepAirfield(idDepAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idDepAirfield)
        return this
    def add_depAirfield(depAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, depAirfield)
        return this
    def add_idArrAirfield(idArrAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, idArrAirfield)
        return this
    def add_arrAirfield(arrAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, arrAirfield)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, externalId)
        return this
    def add_genTS(genTS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, genTS)
        return this
    def add_aircraftMDS(aircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, aircraftMDS)
        return this
    def add_tailNumber(tailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, tailNumber)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, callSign)
        return this
    def add_wxValidStart(wxValidStart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, wxValidStart)
        return this
    def add_wxValidEnd(wxValidEnd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, wxValidEnd)
        return this
    def add_estDepTime(estDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, estDepTime)
        return this
    def add_dragIndex(dragIndex:float):
        b_.PrependFloat64Slot(18, dragIndex, 0.0)
        return this
    def add_fuelDegrade(fuelDegrade:float):
        b_.PrependFloat64Slot(19, fuelDegrade, 0.0)
        return this
    def add_opWeight(opWeight:float):
        b_.PrependFloat64Slot(20, opWeight, 0.0)
        return this
    def add_msnIndex(msnIndex:float):
        b_.PrependFloat64Slot(21, msnIndex, 0.0)
        return this
    def add_rampFuel(rampFuel:float):
        b_.PrependFloat64Slot(22, rampFuel, 0.0)
        return this
    def add_taxiFuel(taxiFuel:float):
        b_.PrependFloat64Slot(23, taxiFuel, 0.0)
        return this
    def add_takeoffFuel(takeoffFuel:float):
        b_.PrependFloat64Slot(24, takeoffFuel, 0.0)
        return this
    def add_climbFuel(climbFuel:float):
        b_.PrependFloat64Slot(25, climbFuel, 0.0)
        return this
    def add_climbTime(climbTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, climbTime)
        return this
    def add_holdDownFuel(holdDownFuel:float):
        b_.PrependFloat64Slot(27, holdDownFuel, 0.0)
        return this
    def add_tocIceFuel(tocIceFuel:float):
        b_.PrependFloat64Slot(28, tocIceFuel, 0.0)
        return this
    def add_tocFuel(tocFuel:float):
        b_.PrependFloat64Slot(29, tocFuel, 0.0)
        return this
    def add_enrouteFuel(enrouteFuel:float):
        b_.PrependFloat64Slot(30, enrouteFuel, 0.0)
        return this
    def add_enrouteTime(enrouteTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, enrouteTime)
        return this
    def add_thunderAvoidFuel(thunderAvoidFuel:float):
        b_.PrependFloat64Slot(32, thunderAvoidFuel, 0.0)
        return this
    def add_todIceFuel(todIceFuel:float):
        b_.PrependFloat64Slot(33, todIceFuel, 0.0)
        return this
    def add_opConditionFuel(opConditionFuel:float):
        b_.PrependFloat64Slot(34, opConditionFuel, 0.0)
        return this
    def add_todFuel(todFuel:float):
        b_.PrependFloat64Slot(35, todFuel, 0.0)
        return this
    def add_earlyDescentFuel(earlyDescentFuel:float):
        b_.PrependFloat64Slot(36, earlyDescentFuel, 0.0)
        return this
    def add_arrIceFuel(arrIceFuel:float):
        b_.PrependFloat64Slot(37, arrIceFuel, 0.0)
        return this
    def add_holdFuel(holdFuel:float):
        b_.PrependFloat64Slot(38, holdFuel, 0.0)
        return this
    def add_holdTime(holdTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, holdTime)
        return this
    def add_appLandingFuel(appLandingFuel:float):
        b_.PrependFloat64Slot(40, appLandingFuel, 0.0)
        return this
    def add_burnedFuel(burnedFuel:float):
        b_.PrependFloat64Slot(41, burnedFuel, 0.0)
        return this
    def add_landingFuel(landingFuel:float):
        b_.PrependFloat64Slot(42, landingFuel, 0.0)
        return this
    def add_minDivertFuel(minDivertFuel:float):
        b_.PrependFloat64Slot(43, minDivertFuel, 0.0)
        return this
    def add_arrAlternate1Fuel(arrAlternate1Fuel:float):
        b_.PrependFloat64Slot(44, arrAlternate1Fuel, 0.0)
        return this
    def add_arrAlternate2Fuel(arrAlternate2Fuel:float):
        b_.PrependFloat64Slot(45, arrAlternate2Fuel, 0.0)
        return this
    def add_contingencyFuel(contingencyFuel:float):
        b_.PrependFloat64Slot(46, contingencyFuel, 0.0)
        return this
    def add_reserveFuel(reserveFuel:float):
        b_.PrependFloat64Slot(47, reserveFuel, 0.0)
        return this
    def add_depressFuel(depressFuel:float):
        b_.PrependFloat64Slot(48, depressFuel, 0.0)
        return this
    def add_unusableFuel(unusableFuel:float):
        b_.PrependFloat64Slot(49, unusableFuel, 0.0)
        return this
    def add_unidentExtraFuel(unidentExtraFuel:float):
        b_.PrependFloat64Slot(50, unidentExtraFuel, 0.0)
        return this
    def add_identExtraFuel(identExtraFuel:float):
        b_.PrependFloat64Slot(51, identExtraFuel, 0.0)
        return this
    def add_remAlternate1Fuel(remAlternate1Fuel:float):
        b_.PrependFloat64Slot(52, remAlternate1Fuel, 0.0)
        return this
    def add_remAlternate2Fuel(remAlternate2Fuel:float):
        b_.PrependFloat64Slot(53, remAlternate2Fuel, 0.0)
        return this
    def add_enduranceTime(enduranceTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, enduranceTime)
        return this
    def add_sid(sid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, sid)
        return this
    def add_star(star:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, star)
        return this
    def add_gpsRAIM(gpsRAIM:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, gpsRAIM)
        return this
    def add_depRunway(depRunway:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, depRunway)
        return this
    def add_arrRunway(arrRunway:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, arrRunway)
        return this
    def add_routeString(routeString:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, routeString)
        return this
    def add_countryCodes(countryCodes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, countryCodes)
        return this
    def add_etopsRating(etopsRating:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, etopsRating)
        return this
    def add_etopsAirfields(etopsAirfields:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, etopsAirfields)
        return this
    def add_etopsAltAirfields(etopsAltAirfields:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, etopsAltAirfields)
        return this
    def add_etopsValWindow(etopsValWindow:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, etopsValWindow)
        return this
    def add_plannerRemark(plannerRemark:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, plannerRemark)
        return this
    def add_cargoRemark(cargoRemark:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, cargoRemark)
        return this
    def add_windFac1(windFac1:float):
        b_.PrependFloat64Slot(68, windFac1, 0.0)
        return this
    def add_windFac2(windFac2:float):
        b_.PrependFloat64Slot(69, windFac2, 0.0)
        return this
    def add_windFacAvg(windFacAvg:float):
        b_.PrependFloat64Slot(70, windFacAvg, 0.0)
        return this
    def add_avgTempDev(avgTempDev:float):
        b_.PrependFloat64Slot(71, avgTempDev, 0.0)
        return this
    def add_atcAddresses(atcAddresses:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(72, atcAddresses)
        return this
    def add_originator(originator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(73, originator)
        return this
    def add_numAircraft(numAircraft:int):
        b_.PrependInt32Slot(74, numAircraft, 0)
        return this
    def add_flightRules(flightRules:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, flightRules)
        return this
    def add_flightType(flightType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(76, flightType)
        return this
    def add_initialCruiseSpeed(initialCruiseSpeed:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(77, initialCruiseSpeed)
        return this
    def add_initialFlightLevel(initialFlightLevel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(78, initialFlightLevel)
        return this
    def add_arrAlternate1(arrAlternate1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, arrAlternate1)
        return this
    def add_arrAlternate2(arrAlternate2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(80, arrAlternate2)
        return this
    def add_depAlternate(depAlternate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(81, depAlternate)
        return this
    def add_wakeTurbCat(wakeTurbCat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(82, wakeTurbCat)
        return this
    def add_equipment(equipment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(83, equipment)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(84, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(85, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(86, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(87, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(88, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(89, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(90, origNetwork)
        return this
    def add_dataMode(dataMode:FlightPlan_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(91, dataMode, 0)
        return this
    def add_airRefuelEvents(airRefuelEvents:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(92, airRefuelEvents)
        return this
    def add_flightPlanMessages(flightPlanMessages:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(93, flightPlanMessages)
        return this
    def add_flightPlanWaypoints(flightPlanWaypoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(94, flightPlanWaypoints)
        return this
    def add_flightPlanPointGroups(flightPlanPointGroups:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(95, flightPlanPointGroups)
        return this
    def end():
        return b_.EndObject()

def FlightPlan_AbridgedStartCountryCodesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateCountryCodesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartEtopsAirfieldsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateEtopsAirfieldsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartEtopsAltAirfieldsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateEtopsAltAirfieldsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartAtcAddressesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateAtcAddressesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartAirRefuelEventsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateAirRefuelEventsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartFlightPlanMessagesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateFlightPlanMessagesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartFlightPlanWaypointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateFlightPlanWaypointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def FlightPlan_AbridgedStartFlightPlanPointGroupsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlan_AbridgedCreateFlightPlanPointGroupsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

