// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DataLinkOps_Full

/// /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
class DataLinkOps_Full : flatbuffers.handle
    /// Name of the data link.
    /// Example: /// Example: Link-16
    /// Constraints: Minimum length = 0, Maximum length = 24
    def linkName() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def linkStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-08T13:55:43.123Z
    /// Constraints: No constraints specified.
    def linkStopTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
    /// Example: /// Example: AFTER
    /// Constraints: Minimum length = 0, Maximum length = 8
    def linkStopTimeMod() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Detailed characteristics of the data link.
    /// Example: /// Example: Link details
    /// Constraints: Minimum length = 0, Maximum length = 3000
    def linkDetails() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)

def GetRootAsDataLinkOps_Full(buf:string): return DataLinkOps_Full { buf, flatbuffers.indirect(buf, 0) }

struct DataLinkOps_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_linkName(linkName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, linkName)
        return this
    def add_linkStartTime(linkStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, linkStartTime)
        return this
    def add_linkStopTime(linkStopTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, linkStopTime)
        return this
    def add_linkStopTimeMod(linkStopTimeMod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, linkStopTimeMod)
        return this
    def add_linkDetails(linkDetails:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, linkDetails)
        return this
    def end():
        return b_.EndObject()

