// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LaunchVehicleDetails_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    LaunchVehicleDetails_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    LaunchVehicleDetails_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    LaunchVehicleDetails_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    LaunchVehicleDetails_Ingest_dataMode_Enum_EXERCISE = 3

class LaunchVehicleDetails_Ingest

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
class LaunchVehicleDetails_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the parent launch vehicle record.
    /// Example: /// Example: LAUNCHVEHICLE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idLaunchVehicle() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Vehicle variant.
    /// Example: /// Example: Example-variant
    /// Constraints: Minimum length = 0, Maximum length = 64
    def variant() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Vehicle minor variant.
    /// Example: /// Example: Example-minor-variant
    /// Constraints: Minimum length = 0, Maximum length = 64
    def minorVariant() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Vehicle category.
    /// Example: /// Example: Example-category
    /// Constraints: Minimum length = 0, Maximum length = 64
    def category() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// ID of the organization that manufactures the launch vehicle.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Vehicle launch prefix.
    /// Example: /// Example: AX011
    /// Constraints: Minimum length = 0, Maximum length = 8
    def launchPrefix() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Vehicle family.
    /// Example: /// Example: Example-family
    /// Constraints: Minimum length = 0, Maximum length = 64
    def family() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Propellant type.
    /// Example: /// Example: Nitrogen
    /// Constraints: Minimum length = 0, Maximum length = 64
    def propellant() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Oxidizer type.
    /// Example: /// Example: Bromine
    /// Constraints: Minimum length = 0, Maximum length = 64
    def oxidizer() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Vehicle length in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def length() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Vehicle diameter in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def diameter() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Vehicle total mass at launch time in kg (including all boosters).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def launchMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Maximum vehicle payload mass to GEO orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def geoPayloadMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Max vehicle payload mass to Geo-Transfer Orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoPayloadMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Max vehicle payload mass to LEO orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def leoPayloadMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def ssoPayloadMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Vehicle fairing length in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def fairingLength() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Name of the fairing.
    /// Example: /// Example: Example-fairing-name
    /// Constraints: Minimum length = 0, Maximum length = 64
    def fairingName() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Vehicle fairing maximum external diameter in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def fairingExternalDiameter() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Vehicle fairing maximum internal diameter in meters.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def fairingInternalDiameter() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Vehicle fairing mass in kg.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def fairingMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Fairing material.
    /// Example: /// Example: Example-fairing-material
    /// Constraints: Minimum length = 0, Maximum length = 64
    def fairingMaterial() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Vehicle maximum acceleration load in g.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxAccelLoad() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Vehicle maximum payload lateral frequency in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxPayloadFreqLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Vehicle maximum payload longitudinal frequency in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxPayloadFreqLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Vehicle maximum acoustic level in dB.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxAcousticLevel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Vehicle maximum acoustic level range in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxAcousticLevelRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Vehicle overall sound pressure level in dB.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def soundPressureLevel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Vehicle maximum flight shock force in g.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxFlightShockForce() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Vehicle maximum flight shock frequency in Hz.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxFlightShockFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Vehicle fairing maximum pressure change in kPa/sec.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def maxFairingPressureChange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Launch vehicle estimated launch price in US dollars.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def estLaunchPrice() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Launch vehicle typical estimated launch price in US dollars.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def estLaunchPriceTypical() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoInj3SigAccuracyApogeeTarget() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoInj3SigAccuracyApogeeMargin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoInj3SigAccuracyPerigeeTarget() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoInj3SigAccuracyPerigeeMargin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoInj3SigAccuracyInclinationTarget() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def gtoInj3SigAccuracyInclinationMargin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Launch vehicle attitude accuracy (degrees).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def attitudeAccuracy() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Launch vehicle payload separation rate in m/s.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def payloadSeparationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Launch vehicle deployment rotation rate in RPM.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def deploymentRotationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// Optional URL for additional information on the vehicle.
    /// Example: /// Example: Example URL
    /// Constraints: Minimum length = 0, Maximum length = 256
    def sourceURL() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Notes/Description of the launch vehicle.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Notes/Description of the launch vehicle fairing.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def fairingNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Notes/Description of the launch vehicle payload.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def payloadNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> LaunchVehicleDetails_Ingest_dataMode_Enum:
        return LaunchVehicleDetails_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 110, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 112) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 112)

def GetRootAsLaunchVehicleDetails_Ingest(buf:string): return LaunchVehicleDetails_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct LaunchVehicleDetails_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(55)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idLaunchVehicle(idLaunchVehicle:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idLaunchVehicle)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_variant(variant:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, variant)
        return this
    def add_minorVariant(minorVariant:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, minorVariant)
        return this
    def add_category(category:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, category)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, manufacturerOrgId)
        return this
    def add_launchPrefix(launchPrefix:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, launchPrefix)
        return this
    def add_family(family:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, family)
        return this
    def add_propellant(propellant:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, propellant)
        return this
    def add_oxidizer(oxidizer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, oxidizer)
        return this
    def add_length(length:float):
        b_.PrependFloat64Slot(11, length, 0.0)
        return this
    def add_diameter(diameter:float):
        b_.PrependFloat64Slot(12, diameter, 0.0)
        return this
    def add_launchMass(launchMass:float):
        b_.PrependFloat64Slot(13, launchMass, 0.0)
        return this
    def add_geoPayloadMass(geoPayloadMass:float):
        b_.PrependFloat64Slot(14, geoPayloadMass, 0.0)
        return this
    def add_gtoPayloadMass(gtoPayloadMass:float):
        b_.PrependFloat64Slot(15, gtoPayloadMass, 0.0)
        return this
    def add_leoPayloadMass(leoPayloadMass:float):
        b_.PrependFloat64Slot(16, leoPayloadMass, 0.0)
        return this
    def add_ssoPayloadMass(ssoPayloadMass:float):
        b_.PrependFloat64Slot(17, ssoPayloadMass, 0.0)
        return this
    def add_fairingLength(fairingLength:float):
        b_.PrependFloat64Slot(18, fairingLength, 0.0)
        return this
    def add_fairingName(fairingName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, fairingName)
        return this
    def add_fairingExternalDiameter(fairingExternalDiameter:float):
        b_.PrependFloat64Slot(20, fairingExternalDiameter, 0.0)
        return this
    def add_fairingInternalDiameter(fairingInternalDiameter:float):
        b_.PrependFloat64Slot(21, fairingInternalDiameter, 0.0)
        return this
    def add_fairingMass(fairingMass:float):
        b_.PrependFloat64Slot(22, fairingMass, 0.0)
        return this
    def add_fairingMaterial(fairingMaterial:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, fairingMaterial)
        return this
    def add_maxAccelLoad(maxAccelLoad:float):
        b_.PrependFloat64Slot(24, maxAccelLoad, 0.0)
        return this
    def add_maxPayloadFreqLat(maxPayloadFreqLat:float):
        b_.PrependFloat64Slot(25, maxPayloadFreqLat, 0.0)
        return this
    def add_maxPayloadFreqLon(maxPayloadFreqLon:float):
        b_.PrependFloat64Slot(26, maxPayloadFreqLon, 0.0)
        return this
    def add_maxAcousticLevel(maxAcousticLevel:float):
        b_.PrependFloat64Slot(27, maxAcousticLevel, 0.0)
        return this
    def add_maxAcousticLevelRange(maxAcousticLevelRange:float):
        b_.PrependFloat64Slot(28, maxAcousticLevelRange, 0.0)
        return this
    def add_soundPressureLevel(soundPressureLevel:float):
        b_.PrependFloat64Slot(29, soundPressureLevel, 0.0)
        return this
    def add_maxFlightShockForce(maxFlightShockForce:float):
        b_.PrependFloat64Slot(30, maxFlightShockForce, 0.0)
        return this
    def add_maxFlightShockFreq(maxFlightShockFreq:float):
        b_.PrependFloat64Slot(31, maxFlightShockFreq, 0.0)
        return this
    def add_maxFairingPressureChange(maxFairingPressureChange:float):
        b_.PrependFloat64Slot(32, maxFairingPressureChange, 0.0)
        return this
    def add_estLaunchPrice(estLaunchPrice:float):
        b_.PrependFloat64Slot(33, estLaunchPrice, 0.0)
        return this
    def add_estLaunchPriceTypical(estLaunchPriceTypical:float):
        b_.PrependFloat64Slot(34, estLaunchPriceTypical, 0.0)
        return this
    def add_gtoInj3SigAccuracyApogeeTarget(gtoInj3SigAccuracyApogeeTarget:float):
        b_.PrependFloat64Slot(35, gtoInj3SigAccuracyApogeeTarget, 0.0)
        return this
    def add_gtoInj3SigAccuracyApogeeMargin(gtoInj3SigAccuracyApogeeMargin:float):
        b_.PrependFloat64Slot(36, gtoInj3SigAccuracyApogeeMargin, 0.0)
        return this
    def add_gtoInj3SigAccuracyPerigeeTarget(gtoInj3SigAccuracyPerigeeTarget:float):
        b_.PrependFloat64Slot(37, gtoInj3SigAccuracyPerigeeTarget, 0.0)
        return this
    def add_gtoInj3SigAccuracyPerigeeMargin(gtoInj3SigAccuracyPerigeeMargin:float):
        b_.PrependFloat64Slot(38, gtoInj3SigAccuracyPerigeeMargin, 0.0)
        return this
    def add_gtoInj3SigAccuracyInclinationTarget(gtoInj3SigAccuracyInclinationTarget:float):
        b_.PrependFloat64Slot(39, gtoInj3SigAccuracyInclinationTarget, 0.0)
        return this
    def add_gtoInj3SigAccuracyInclinationMargin(gtoInj3SigAccuracyInclinationMargin:float):
        b_.PrependFloat64Slot(40, gtoInj3SigAccuracyInclinationMargin, 0.0)
        return this
    def add_attitudeAccuracy(attitudeAccuracy:float):
        b_.PrependFloat64Slot(41, attitudeAccuracy, 0.0)
        return this
    def add_payloadSeparationRate(payloadSeparationRate:float):
        b_.PrependFloat64Slot(42, payloadSeparationRate, 0.0)
        return this
    def add_deploymentRotationRate(deploymentRotationRate:float):
        b_.PrependFloat64Slot(43, deploymentRotationRate, 0.0)
        return this
    def add_sourceURL(sourceURL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, sourceURL)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, notes)
        return this
    def add_fairingNotes(fairingNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, fairingNotes)
        return this
    def add_payloadNotes(payloadNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, payloadNotes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, origNetwork)
        return this
    def add_dataMode(dataMode:LaunchVehicleDetails_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(53, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, tags)
        return this
    def end():
        return b_.EndObject()

def LaunchVehicleDetails_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LaunchVehicleDetails_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

