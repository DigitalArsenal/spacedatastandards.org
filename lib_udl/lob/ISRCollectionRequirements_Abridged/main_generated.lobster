// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class ISRCollectionRequirements_Abridged

/// /// Tasking desired collection requirements.
class ISRCollectionRequirements_Abridged : flatbuffers.handle
    /// Collection Requirement Unique Identifier.
    /// Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
    /// Constraints: Minimum length = 0, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Encryption hashing algorithm.
    /// Example: /// Example: HASH
    /// Constraints: Minimum length = 0, Maximum length = 128
    def hash() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Type collection this requirement applies to.
    /// Example: /// Example: COLLECTION_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Collection Requirement Unique Identifier.
    /// Example: /// Example: CRID
    /// Constraints: Minimum length = 0, Maximum length = 256
    def cridNumbers() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// 1-n priority for this collection requirement.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def priority() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Record id.
    /// Example: /// Example: RECORD-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def recordId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Reconnaissance Survey information the operator needs.
    /// Example: /// Example: SURVEY_INFO
    /// Constraints: Minimum length = 0, Maximum length = 32
    def reconSurvey() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Primary type of intelligence to be collected for this requirement.
    /// Example: /// Example: Sig
    /// Constraints: Minimum length = 0, Maximum length = 32
    def intelDiscipline() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Sub category of primary intelligence to be collected for this requirement.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def secondary() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 20, 0))
    /// Is this collection requirement an emphasized/critical requirement.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def emphasized() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Is this collection request for the Prism system?.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def isPrismCr() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// Start time for this requirement, should be within the mission time window.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    def start() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Stop time for this requirement, should be within the mission time window.
    /// Example: /// Example: 2021-01-19T01:20:01.001Z
    /// Constraints: No constraints specified.
    def stop() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Human readable name for this operation.
    /// Example: /// Example: NAME
    /// Constraints: Minimum length = 0, Maximum length = 32
    def operation() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The name of the military unit that this assigned collection requirement will support.
    /// Example: /// Example: UNIT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def supportedUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
    /// Example: /// Example: COUNTRY_CODE
    /// Constraints: Minimum length = 0, Maximum length = 4
    def country() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Region of the collection requirement.
    /// Example: /// Example: REGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    def region() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Subregion of the collection requirement.
    /// Example: /// Example: SUBREGION
    /// Constraints: Minimum length = 0, Maximum length = 32
    def subregion() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Free text field for the user to specify special instructions needed for this collection.
    /// Example: /// Example: TEXT
    /// Constraints: Minimum length = 0, Maximum length = 256
    def specialComGuidance() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def criticalTimes() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def exploitationRequirement() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Array of POI Id's for the targets being tasked.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def targetList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def targetList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)

def GetRootAsISRCollectionRequirements_Abridged(buf:string): return ISRCollectionRequirements_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct ISRCollectionRequirements_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_hash(hash:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, hash)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, type)
        return this
    def add_cridNumbers(cridNumbers:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, cridNumbers)
        return this
    def add_priority(priority:float):
        b_.PrependFloat64Slot(4, priority, 0.0)
        return this
    def add_recordId(recordId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, recordId)
        return this
    def add_reconSurvey(reconSurvey:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, reconSurvey)
        return this
    def add_intelDiscipline(intelDiscipline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, intelDiscipline)
        return this
    def add_secondary(secondary:bool):
        b_.PrependBoolSlot(8, secondary, 0)
        return this
    def add_emphasized(emphasized:bool):
        b_.PrependBoolSlot(9, emphasized, 0)
        return this
    def add_isPrismCr(isPrismCr:bool):
        b_.PrependBoolSlot(10, isPrismCr, 0)
        return this
    def add_start(start:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, start)
        return this
    def add_stop(stop:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, stop)
        return this
    def add_operation(operation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, operation)
        return this
    def add_supportedUnit(supportedUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, supportedUnit)
        return this
    def add_country(country:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, country)
        return this
    def add_region(region:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, region)
        return this
    def add_subregion(subregion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, subregion)
        return this
    def add_specialComGuidance(specialComGuidance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, specialComGuidance)
        return this
    def add_criticalTimes(criticalTimes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, criticalTimes)
        return this
    def add_exploitationRequirement(exploitationRequirement:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, exploitationRequirement)
        return this
    def add_targetList(targetList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, targetList)
        return this
    def end():
        return b_.EndObject()

def ISRCollectionRequirements_AbridgedStartTargetListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollectionRequirements_AbridgedCreateTargetListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

