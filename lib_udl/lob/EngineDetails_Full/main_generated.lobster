// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EngineDetails_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EngineDetails_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EngineDetails_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EngineDetails_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EngineDetails_Full_dataMode_Enum_EXERCISE = 3

class EngineDetails_Full

/// /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
class EngineDetails_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ENGINEDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the parent engine record.
    /// Example: /// Example: ENGINE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idEngine() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Engine type or family.
    /// Example: /// Example: ENGINE_TYPE1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def family() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    /// Example: /// Example: Pressure Fed
    /// Constraints: Minimum length = 0, Maximum length = 64
    def cycleType() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
    /// Example: /// Example: Electric
    /// Constraints: Minimum length = 0, Maximum length = 64
    def characteristicType() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Organization ID of the engine manufacturer.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Launch engine specific impulse in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def specificImpulse() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Launch engine maximum burn time in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def burnTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Engine maximum thrust at sea level in Kilo-Newtons.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def seaLevelThrust() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Engine maximum thrust in a vacuum in Kilo-Newtons.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def vacuumThrust() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Engine chamber pressure in bars.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def chamberPressure() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Engine nozzle expansion ratio.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def nozzleExpansionRatio() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Engine maximum number of firings.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def maxFirings() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
    /// Example: /// Example: Liquid
    /// Constraints: Minimum length = 0, Maximum length = 64
    def propellant() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
    /// Example: /// Example: Liquid Oxygen
    /// Constraints: Minimum length = 0, Maximum length = 64
    def oxidizer() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Notes/Description of the engine.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EngineDetails_Full_dataMode_Enum:
        return EngineDetails_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 52, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)

def GetRootAsEngineDetails_Full(buf:string): return EngineDetails_Full { buf, flatbuffers.indirect(buf, 0) }

struct EngineDetails_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(26)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idEngine(idEngine:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idEngine)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_family(family:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, family)
        return this
    def add_cycleType(cycleType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, cycleType)
        return this
    def add_characteristicType(characteristicType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, characteristicType)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, manufacturerOrgId)
        return this
    def add_specificImpulse(specificImpulse:float):
        b_.PrependFloat64Slot(7, specificImpulse, 0.0)
        return this
    def add_burnTime(burnTime:float):
        b_.PrependFloat64Slot(8, burnTime, 0.0)
        return this
    def add_seaLevelThrust(seaLevelThrust:float):
        b_.PrependFloat64Slot(9, seaLevelThrust, 0.0)
        return this
    def add_vacuumThrust(vacuumThrust:float):
        b_.PrependFloat64Slot(10, vacuumThrust, 0.0)
        return this
    def add_chamberPressure(chamberPressure:float):
        b_.PrependFloat64Slot(11, chamberPressure, 0.0)
        return this
    def add_nozzleExpansionRatio(nozzleExpansionRatio:float):
        b_.PrependFloat64Slot(12, nozzleExpansionRatio, 0.0)
        return this
    def add_maxFirings(maxFirings:int):
        b_.PrependInt32Slot(13, maxFirings, 0)
        return this
    def add_propellant(propellant:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, propellant)
        return this
    def add_oxidizer(oxidizer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, oxidizer)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, origNetwork)
        return this
    def add_dataMode(dataMode:EngineDetails_Full_dataMode_Enum):
        b_.PrependInt8Slot(24, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, tags)
        return this
    def end():
        return b_.EndObject()

def EngineDetails_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EngineDetails_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

