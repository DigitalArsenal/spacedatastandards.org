// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EffectResponse_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EffectResponse_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EffectResponse_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EffectResponse_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EffectResponse_Ingest_dataMode_Enum_EXERCISE = 3

class EffectResponse_Ingest

/// /// A response for various effects on a target.
class EffectResponse_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EFFECTRESPONSE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the EffectRequest associated with this response.
    /// Example: /// Example: EFFECTREQUEST-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEffectRequest() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The external system identifier of the associated effect request. A human readable unique id.
    /// Example: /// Example: EXTERNALREQUEST-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def externalRequestId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The type of response in this record (e.g. COA, SCORECARD, etc.).
    /// Example: /// Example: COA
    /// Constraints: Minimum length = 1, Maximum length = 24
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
    /// Example: /// Example: AIRCRAFT
    /// Constraints: Minimum length = 0, Maximum length = 64
    def actorSrcType() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The record ID, depending on the type identified in actorSrcType, of the requested asset.
    /// Example: /// Example: RC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def actorSrcId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The type of munition being fired.
    /// Example: /// Example: Dummy
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def munitionType() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Unique identifier of the munition.
    /// Example: /// Example: MUNITION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def munitionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The number of shots required to destroy target.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def shotsRequired() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// The probability of kill (0-1) of the target being destroyed.
    /// Example: /// Example: 0.7
    /// Constraints: No constraints specified.
    def probabilityOfKill() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// The collateral damage estimate (CDE) of the munition being fired.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def collateralDamageEst() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// List of actions associated with this effect response.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def actionsList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def actionsList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// List of external actions to be executed as part of this task.
    /// Example: /// Example: ['ACTION1', 'ACTION2']
    /// Constraints: No constraints specified.
    def externalActions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def externalActions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// List of COA metrics associated with this effect response.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def coaMetrics(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def coaMetrics_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// The time to overhead for the red force to be over their target, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def redTimeToOverhead() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def decisionDeadline() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The source type of the targetId identifier (POI, SITE, TRACK).
    /// Example: /// Example: POI
    /// Constraints: Minimum length = 0, Maximum length = 64
    def redTargetSrcType() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    /// Example: /// Example: REDTARGETSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def redTargetSrcId() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2021-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EffectResponse_Ingest_dataMode_Enum:
        return EffectResponse_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 50, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)

def GetRootAsEffectResponse_Ingest(buf:string): return EffectResponse_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct EffectResponse_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(25)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idEffectRequest(idEffectRequest:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idEffectRequest)
        return this
    def add_externalRequestId(externalRequestId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, externalRequestId)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, type)
        return this
    def add_actorSrcType(actorSrcType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, actorSrcType)
        return this
    def add_actorSrcId(actorSrcId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, actorSrcId)
        return this
    def add_munitionType(munitionType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, munitionType)
        return this
    def add_munitionId(munitionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, munitionId)
        return this
    def add_shotsRequired(shotsRequired:int):
        b_.PrependInt32Slot(9, shotsRequired, 0)
        return this
    def add_probabilityOfKill(probabilityOfKill:float):
        b_.PrependFloat64Slot(10, probabilityOfKill, 0.0)
        return this
    def add_collateralDamageEst(collateralDamageEst:float):
        b_.PrependFloat64Slot(11, collateralDamageEst, 0.0)
        return this
    def add_actionsList(actionsList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, actionsList)
        return this
    def add_externalActions(externalActions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, externalActions)
        return this
    def add_coaMetrics(coaMetrics:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, coaMetrics)
        return this
    def add_redTimeToOverhead(redTimeToOverhead:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, redTimeToOverhead)
        return this
    def add_decisionDeadline(decisionDeadline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, decisionDeadline)
        return this
    def add_redTargetSrcType(redTargetSrcType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, redTargetSrcType)
        return this
    def add_redTargetSrcId(redTargetSrcId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, redTargetSrcId)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, origin)
        return this
    def add_dataMode(dataMode:EffectResponse_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(23, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, origNetwork)
        return this
    def end():
        return b_.EndObject()

def EffectResponse_IngestStartActionsListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectResponse_IngestCreateActionsListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EffectResponse_IngestStartExternalActionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectResponse_IngestCreateExternalActionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EffectResponse_IngestStartCoaMetricsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectResponse_IngestCreateCoaMetricsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

