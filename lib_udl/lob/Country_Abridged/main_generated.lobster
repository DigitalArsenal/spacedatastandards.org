// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Country_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Country_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Country_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Country_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Country_Abridged_dataMode_Enum_EXERCISE = 3

class Country_Abridged

/// /// A Country may represent countries, multi-national consortiums, and international organizations.
class Country_Abridged : flatbuffers.handle
    /// The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 1, Maximum length = 4
    def code() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Country name.
    /// Example: /// Example: UNITED STATES
    /// Constraints: Minimum length = 0, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 2
    def fipsCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 3
    def iso3Code() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// 3 Digit or other alternate country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def codeAlt() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Country_Abridged_dataMode_Enum:
        return Country_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 22, 0))

def GetRootAsCountry_Abridged(buf:string): return Country_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Country_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(10)
        return this
    def add_code(code:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, code)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, name)
        return this
    def add_fipsCode(fipsCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, fipsCode)
        return this
    def add_iso3Code(iso3Code:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, iso3Code)
        return this
    def add_codeAlt(codeAlt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, codeAlt)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, source)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origNetwork)
        return this
    def add_dataMode(dataMode:Country_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(9, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

