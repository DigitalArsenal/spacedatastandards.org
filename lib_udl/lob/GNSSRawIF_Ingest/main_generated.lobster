// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum GNSSRawIF_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    GNSSRawIF_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    GNSSRawIF_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    GNSSRawIF_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    GNSSRawIF_Ingest_dataMode_Enum_EXERCISE = 3

class GNSSRawIF_Ingest

/// /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
class GNSSRawIF_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: GNSSRawIF-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the primary satellite on-orbit object.
    /// Example: /// Example: 32375
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 32375
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: L2045
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
    /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
    /// Constraints: Minimum length = 0, Maximum length = 36
    def esId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
    /// Example: /// Example: GPS1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def receiver() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
    /// Example: /// Example: [0, 1, 0]
    /// Constraints: No constraints specified.
    def boresight(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def boresight_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
    /// Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
    /// Constraints: No constraints specified.
    def quat(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def quat_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def startIndex() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2022-04-09T18:11:28.919768Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2022-04-09T18:12:28.919768Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 38.834
    /// Constraints: No constraints specified.
    def startLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -104.821
    /// Constraints: No constraints specified.
    def startLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
    /// Example: /// Example: 525.664
    /// Constraints: No constraints specified.
    def startAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 38.922
    /// Constraints: No constraints specified.
    def endLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -104.67
    /// Constraints: No constraints specified.
    def endLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
    /// Example: /// Example: 525.626
    /// Constraints: No constraints specified.
    def endAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
    /// Example: /// Example: [1227.6, 1575.4]
    /// Constraints: No constraints specified.
    def centerFreq(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def centerFreq_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
    /// Example: /// Example: [4.09, 5.87]
    /// Constraints: No constraints specified.
    def ifFreq(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def ifFreq_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// The number of samples taken per second.
    /// Example: /// Example: [8000, 9000]
    /// Constraints: No constraints specified.
    def sampleRate(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def sampleRate_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
    /// Example: /// Example: ['NONE', 'NONE']
    /// Constraints: No constraints specified.
    def postFourier(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def postFourier_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
    /// Example: /// Example: COMPLEX
    /// Constraints: Minimum length = 0, Maximum length = 10
    def sampleType() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
    /// Example: /// Example: 8
    /// Constraints: No constraints specified.
    def bitDepth() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
    /// Example: /// Example: [0.0271, 0.0016]
    /// Constraints: No constraints specified.
    def diffCodeBias(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 52) + i * 4)
    def diffCodeBias_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 52)
    /// The amount of data generated per unit time, expressed in Megabytes/minute.
    /// Example: /// Example: 0.205
    /// Constraints: No constraints specified.
    def dataRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
    /// Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
    /// Constraints: No constraints specified.
    def setId() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The number of raw IF records/files in a set.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def setLength() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def sequenceID() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
    /// Example: /// Example: somefile.hdf5
    /// Constraints: Minimum length = 0, Maximum length = 128
    def fileName() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['GNSSSET']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
    /// Example: /// Example: ['GNSSSET_ID']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 66) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 66)
    /// The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
    /// Example: /// Example: 3168895
    /// Constraints: No constraints specified.
    def fileSize() -> int:
        return flatbuffers.field_int64(buf_, pos_, 68, 0)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> GNSSRawIF_Ingest_dataMode_Enum:
        return GNSSRawIF_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 80, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)

def GetRootAsGNSSRawIF_Ingest(buf:string): return GNSSRawIF_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct GNSSRawIF_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(40)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origObjectId)
        return this
    def add_esId(esId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, esId)
        return this
    def add_receiver(receiver:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, receiver)
        return this
    def add_boresight(boresight:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, boresight)
        return this
    def add_quat(quat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, quat)
        return this
    def add_startIndex(startIndex:int):
        b_.PrependInt32Slot(9, startIndex, 0)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, endTime)
        return this
    def add_startLat(startLat:float):
        b_.PrependFloat64Slot(12, startLat, 0.0)
        return this
    def add_startLon(startLon:float):
        b_.PrependFloat64Slot(13, startLon, 0.0)
        return this
    def add_startAlt(startAlt:float):
        b_.PrependFloat64Slot(14, startAlt, 0.0)
        return this
    def add_endLat(endLat:float):
        b_.PrependFloat64Slot(15, endLat, 0.0)
        return this
    def add_endLon(endLon:float):
        b_.PrependFloat64Slot(16, endLon, 0.0)
        return this
    def add_endAlt(endAlt:float):
        b_.PrependFloat64Slot(17, endAlt, 0.0)
        return this
    def add_centerFreq(centerFreq:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, centerFreq)
        return this
    def add_ifFreq(ifFreq:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, ifFreq)
        return this
    def add_sampleRate(sampleRate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, sampleRate)
        return this
    def add_postFourier(postFourier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, postFourier)
        return this
    def add_sampleType(sampleType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, sampleType)
        return this
    def add_bitDepth(bitDepth:int):
        b_.PrependInt32Slot(23, bitDepth, 0)
        return this
    def add_diffCodeBias(diffCodeBias:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, diffCodeBias)
        return this
    def add_dataRate(dataRate:float):
        b_.PrependFloat64Slot(25, dataRate, 0.0)
        return this
    def add_setId(setId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, setId)
        return this
    def add_setLength(setLength:int):
        b_.PrependInt32Slot(27, setLength, 0)
        return this
    def add_sequenceID(sequenceID:int):
        b_.PrependInt32Slot(28, sequenceID, 0)
        return this
    def add_fileName(fileName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, fileName)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, srcIds)
        return this
    def add_fileSize(fileSize:int):
        b_.PrependInt64Slot(32, fileSize, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origin)
        return this
    def add_dataMode(dataMode:GNSSRawIF_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(38, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, origNetwork)
        return this
    def end():
        return b_.EndObject()

def GNSSRawIF_IngestStartBoresightVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateBoresightVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartQuatVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateQuatVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartCenterFreqVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateCenterFreqVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartIfFreqVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateIfFreqVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartSampleRateVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateSampleRateVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartPostFourierVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreatePostFourierVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartDiffCodeBiasVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateDiffCodeBiasVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSRawIF_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSRawIF_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

