// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class FlightPlanAirRefuelEvents_Abridged

/// /// Collection of air refueling events occurring on this flight.
class FlightPlanAirRefuelEvents_Abridged : flatbuffers.handle
    /// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    def arDegrade() -> float:
        return flatbuffers.field_float64(buf_, pos_, 4, 0.0)
    /// The number of this air refueling event within the flight plan.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def arNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
    /// Example: /// Example: 1500.1
    /// Constraints: No constraints specified.
    def arExchangedFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
    /// Example: /// Example: 143000.1
    /// Constraints: No constraints specified.
    def divertFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Fuel remaining at the air refueling exit in pounds.
    /// Example: /// Example: 160000.1
    /// Constraints: No constraints specified.
    def exitFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)

def GetRootAsFlightPlanAirRefuelEvents_Abridged(buf:string): return FlightPlanAirRefuelEvents_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct FlightPlanAirRefuelEvents_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_arDegrade(arDegrade:float):
        b_.PrependFloat64Slot(0, arDegrade, 0.0)
        return this
    def add_arNum(arNum:int):
        b_.PrependInt32Slot(1, arNum, 0)
        return this
    def add_arExchangedFuel(arExchangedFuel:float):
        b_.PrependFloat64Slot(2, arExchangedFuel, 0.0)
        return this
    def add_divertFuel(divertFuel:float):
        b_.PrependFloat64Slot(3, divertFuel, 0.0)
        return this
    def add_exitFuel(exitFuel:float):
        b_.PrependFloat64Slot(4, exitFuel, 0.0)
        return this
    def end():
        return b_.EndObject()

