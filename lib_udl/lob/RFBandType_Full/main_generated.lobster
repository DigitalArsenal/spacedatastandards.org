// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum RFBandType_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    RFBandType_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    RFBandType_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    RFBandType_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    RFBandType_Full_dataMode_Enum_EXERCISE = 3

class RFBandType_Full

/// /// This table contains descriptions for common satellite RF bands.
class RFBandType_Full : flatbuffers.handle
    /// Unique identifier for the RF band (e.g. X, K, Ku, etc).
    /// Example: /// Example: Ku
    /// Constraints: Minimum length = 1, Maximum length = 5
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Description of the band and common uses.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 1, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Approximate start of the band frequency range, in Ghz.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def startFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Approximate end of the band frequency range, in Ghz.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def endFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> RFBandType_Full_dataMode_Enum:
        return RFBandType_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 18, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)

def GetRootAsRFBandType_Full(buf:string): return RFBandType_Full { buf, flatbuffers.indirect(buf, 0) }

struct RFBandType_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(12)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, description)
        return this
    def add_startFreq(startFreq:float):
        b_.PrependFloat64Slot(3, startFreq, 0.0)
        return this
    def add_endFreq(endFreq:float):
        b_.PrependFloat64Slot(4, endFreq, 0.0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, origin)
        return this
    def add_dataMode(dataMode:RFBandType_Full_dataMode_Enum):
        b_.PrependInt8Slot(7, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, updatedBy)
        return this
    def end():
        return b_.EndObject()

