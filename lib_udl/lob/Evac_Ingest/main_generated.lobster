// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Evac_Ingest_type_Enum:
    /// No description available.
    Evac_Ingest_type_Enum_REQUEST = 0
    /// No description available.
    Evac_Ingest_type_Enum_RESPONSE = 1

enum Evac_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Evac_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Evac_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Evac_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Evac_Ingest_dataMode_Enum_EXERCISE = 3

class Evac_Ingest

/// /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
class Evac_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MEDEVACEVENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
    /// Example: /// Example: MedEvac-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def medevacId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The type of this medevac record (REQUEST, RESPONSE).
    /// Example: /// Example: REQUEST
    /// Constraints: Minimum length = 1, Maximum length = 8
    def type() -> Evac_Ingest_type_Enum:
        return Evac_Ingest_type_Enum(flatbuffers.field_int8(buf_, pos_, 10, 0))
    /// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
    /// Example: /// Example: GROUND
    /// Constraints: Minimum length = 0, Maximum length = 8
    def missionType() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of a weather report associated with this evacuation.
    /// Example: /// Example: WeatherReport-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idWeatherReport() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Number of people Killed In Action.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def numKIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Number of people Wounded In Action.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numWIA() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Number of littered personnel requiring evacuation.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def numLitter() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Number of ambulatory personnel requiring evacuation.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def numAmbulatory() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Flag indicating whether the mission requires medical personnel.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def medicReq() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// Externally provided Medevac request number (e.g. MED.1.223908).
    /// Example: /// Example: MED.1.234567
    /// Constraints: Minimum length = 0, Maximum length = 36
    def reqNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The request time, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def reqTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The call sign of this medevac requestor.
    /// Example: /// Example: Bravo
    /// Constraints: Minimum length = 0, Maximum length = 36
    def reqCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The expected pickup time, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-20T16:00:00.123Z
    /// Constraints: No constraints specified.
    def pickupTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 75.1234
    /// Constraints: No constraints specified.
    def pickupLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 175.1234
    /// Constraints: No constraints specified.
    def pickupLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
    /// Example: /// Example: 30.1234
    /// Constraints: No constraints specified.
    def pickupAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    /// Example: /// Example: 10.1234
    /// Constraints: No constraints specified.
    def ce() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
    /// Example: /// Example: 5.1234
    /// Constraints: No constraints specified.
    def le() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
    /// Example: /// Example: ROCKY
    /// Constraints: Minimum length = 0, Maximum length = 32
    def terrain() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Amplifying data for the terrain describing important obstacles in or around the zone.
    /// Example: /// Example: N/A
    /// Constraints: Minimum length = 0, Maximum length = 64
    def obstaclesRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Amplifying data for the terrain describing any notable additional terrain features.
    /// Example: /// Example: N/A
    /// Constraints: Minimum length = 0, Maximum length = 64
    def terrainRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The name of the zone.
    /// Example: /// Example: example-zone
    /// Constraints: Minimum length = 0, Maximum length = 128
    def zoneName() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
    /// Example: /// Example: ILLUMINATION
    /// Constraints: Minimum length = 0, Maximum length = 64
    def zoneMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
    /// Example: /// Example: NO ENEMY
    /// Constraints: Minimum length = 0, Maximum length = 64
    def zoneSecurity() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
    /// Example: /// Example: RED
    /// Constraints: Minimum length = 0, Maximum length = 32
    def zoneMarkingColor() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Flag indicating that the pickup site is hot and hostiles are in the area.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def zoneHot() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 58, 0))
    /// The contact frequency, in Hz, of the agency or zone controller.
    /// Example: /// Example: 3.11
    /// Constraints: No constraints specified.
    def cntctFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The call sign of the zone controller.
    /// Example: /// Example: Tango
    /// Constraints: Minimum length = 0, Maximum length = 128
    def zoneContrCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// The count of people requiring medevac.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def numCasualties() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)
    /// Additional comments for the medevac mission.
    /// Example: /// Example: Comments concerning mission
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def casualtyInfo(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 68) + i * 4)
    def casualtyInfo_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 68)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def enemyData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def enemyData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Evac_Ingest_dataMode_Enum:
        return Evac_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 82, 0))

def GetRootAsEvac_Ingest(buf:string): return Evac_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Evac_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(40)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_medevacId(medevacId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, medevacId)
        return this
    def add_type(type:Evac_Ingest_type_Enum):
        b_.PrependInt8Slot(3, type, 0)
        return this
    def add_missionType(missionType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, missionType)
        return this
    def add_idWeatherReport(idWeatherReport:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idWeatherReport)
        return this
    def add_numKIA(numKIA:int):
        b_.PrependInt32Slot(6, numKIA, 0)
        return this
    def add_numWIA(numWIA:int):
        b_.PrependInt32Slot(7, numWIA, 0)
        return this
    def add_numLitter(numLitter:int):
        b_.PrependInt32Slot(8, numLitter, 0)
        return this
    def add_numAmbulatory(numAmbulatory:int):
        b_.PrependInt32Slot(9, numAmbulatory, 0)
        return this
    def add_medicReq(medicReq:bool):
        b_.PrependBoolSlot(10, medicReq, 0)
        return this
    def add_reqNum(reqNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, reqNum)
        return this
    def add_reqTime(reqTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, reqTime)
        return this
    def add_reqCallSign(reqCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, reqCallSign)
        return this
    def add_pickupTime(pickupTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, pickupTime)
        return this
    def add_pickupLat(pickupLat:float):
        b_.PrependFloat64Slot(15, pickupLat, 0.0)
        return this
    def add_pickupLon(pickupLon:float):
        b_.PrependFloat64Slot(16, pickupLon, 0.0)
        return this
    def add_pickupAlt(pickupAlt:float):
        b_.PrependFloat64Slot(17, pickupAlt, 0.0)
        return this
    def add_ce(ce:float):
        b_.PrependFloat64Slot(18, ce, 0.0)
        return this
    def add_le(le:float):
        b_.PrependFloat64Slot(19, le, 0.0)
        return this
    def add_terrain(terrain:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, terrain)
        return this
    def add_obstaclesRemarks(obstaclesRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, obstaclesRemarks)
        return this
    def add_terrainRemarks(terrainRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, terrainRemarks)
        return this
    def add_zoneName(zoneName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, zoneName)
        return this
    def add_zoneMarking(zoneMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, zoneMarking)
        return this
    def add_zoneSecurity(zoneSecurity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, zoneSecurity)
        return this
    def add_zoneMarkingColor(zoneMarkingColor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, zoneMarkingColor)
        return this
    def add_zoneHot(zoneHot:bool):
        b_.PrependBoolSlot(27, zoneHot, 0)
        return this
    def add_cntctFreq(cntctFreq:float):
        b_.PrependFloat64Slot(28, cntctFreq, 0.0)
        return this
    def add_zoneContrCallSign(zoneContrCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, zoneContrCallSign)
        return this
    def add_numCasualties(numCasualties:int):
        b_.PrependInt32Slot(30, numCasualties, 0)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, comments)
        return this
    def add_casualtyInfo(casualtyInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, casualtyInfo)
        return this
    def add_enemyData(enemyData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, enemyData)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, origNetwork)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, origin)
        return this
    def add_dataMode(dataMode:Evac_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(39, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def Evac_IngestStartCasualtyInfoVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Evac_IngestCreateCasualtyInfoVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Evac_IngestStartEnemyDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Evac_IngestCreateEnemyDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

