// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class FlightPlanPointGroups_Abridged

/// /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
class FlightPlanPointGroups_Abridged : flatbuffers.handle
    /// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
    /// Example: /// Example: ETOPS_CF_POINT_1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def pointGroupName() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Specifies which Point Group case requires the most fuel.
    /// Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
    /// Constraints: Minimum length = 0, Maximum length = 48
    def worstFuelCase() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
    /// Example: /// Example: LPPD
    /// Constraints: Minimum length = 0, Maximum length = 5
    def lsafName() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
    /// Example: /// Example: 684.1
    /// Constraints: No constraints specified.
    def lsafDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
    /// Example: /// Example: 684.1
    /// Constraints: No constraints specified.
    def fsafDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
    /// Example: /// Example: 684.1
    /// Constraints: No constraints specified.
    def etopsDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
    /// Example: /// Example: 01:23
    /// Constraints: Minimum length = 0, Maximum length = 6
    def lsafTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
    /// Example: /// Example: 01:23
    /// Constraints: Minimum length = 0, Maximum length = 6
    def fsafTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
    /// Example: /// Example: 01:23
    /// Constraints: Minimum length = 0, Maximum length = 6
    def etopsTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
    /// Example: /// Example: 13.1
    /// Constraints: No constraints specified.
    def lsafAvgWindFactor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def fsafAvgWindFactor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def etopsAvgWindFactor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    def lsafTempDev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    def fsafTempDev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
    /// Example: /// Example: 9.1
    /// Constraints: No constraints specified.
    def etopsTempDev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
    /// Example: /// Example: 50787.1
    /// Constraints: No constraints specified.
    def lsafReqFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
    /// Example: /// Example: 50380.1
    /// Constraints: No constraints specified.
    def fsafReqFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
    /// Example: /// Example: 4412.1
    /// Constraints: No constraints specified.
    def etopsReqFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Total time from takeoff when the point is reached expressed in HH:MM format.
    /// Example: /// Example: 07:29
    /// Constraints: Minimum length = 0, Maximum length = 6
    def fromTakeoffTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Amount of planned fuel on board when the point is reached in pounds.
    /// Example: /// Example: 190319.1
    /// Constraints: No constraints specified.
    def plannedFuel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Flight level of the point at which the fuel was calculated in feet.
    /// Example: /// Example: 100.1
    /// Constraints: No constraints specified.
    def fuelCalcAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// True airspeed at which the fuel was calculated in knots.
    /// Example: /// Example: 365.1
    /// Constraints: No constraints specified.
    def fuelCalcSpd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Average fuel flow at which the fuel was calculated in pounds per hour.
    /// Example: /// Example: 19693.1
    /// Constraints: No constraints specified.
    def avgFuelFlow() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Array of point data for this Point Group.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def flightPlanPoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def flightPlanPoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)

def GetRootAsFlightPlanPointGroups_Abridged(buf:string): return FlightPlanPointGroups_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct FlightPlanPointGroups_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(24)
        return this
    def add_pointGroupName(pointGroupName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, pointGroupName)
        return this
    def add_worstFuelCase(worstFuelCase:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, worstFuelCase)
        return this
    def add_lsafName(lsafName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, lsafName)
        return this
    def add_lsafDistance(lsafDistance:float):
        b_.PrependFloat64Slot(3, lsafDistance, 0.0)
        return this
    def add_fsafDistance(fsafDistance:float):
        b_.PrependFloat64Slot(4, fsafDistance, 0.0)
        return this
    def add_etopsDistance(etopsDistance:float):
        b_.PrependFloat64Slot(5, etopsDistance, 0.0)
        return this
    def add_lsafTime(lsafTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, lsafTime)
        return this
    def add_fsafTime(fsafTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, fsafTime)
        return this
    def add_etopsTime(etopsTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, etopsTime)
        return this
    def add_lsafAvgWindFactor(lsafAvgWindFactor:float):
        b_.PrependFloat64Slot(9, lsafAvgWindFactor, 0.0)
        return this
    def add_fsafAvgWindFactor(fsafAvgWindFactor:float):
        b_.PrependFloat64Slot(10, fsafAvgWindFactor, 0.0)
        return this
    def add_etopsAvgWindFactor(etopsAvgWindFactor:float):
        b_.PrependFloat64Slot(11, etopsAvgWindFactor, 0.0)
        return this
    def add_lsafTempDev(lsafTempDev:float):
        b_.PrependFloat64Slot(12, lsafTempDev, 0.0)
        return this
    def add_fsafTempDev(fsafTempDev:float):
        b_.PrependFloat64Slot(13, fsafTempDev, 0.0)
        return this
    def add_etopsTempDev(etopsTempDev:float):
        b_.PrependFloat64Slot(14, etopsTempDev, 0.0)
        return this
    def add_lsafReqFuel(lsafReqFuel:float):
        b_.PrependFloat64Slot(15, lsafReqFuel, 0.0)
        return this
    def add_fsafReqFuel(fsafReqFuel:float):
        b_.PrependFloat64Slot(16, fsafReqFuel, 0.0)
        return this
    def add_etopsReqFuel(etopsReqFuel:float):
        b_.PrependFloat64Slot(17, etopsReqFuel, 0.0)
        return this
    def add_fromTakeoffTime(fromTakeoffTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, fromTakeoffTime)
        return this
    def add_plannedFuel(plannedFuel:float):
        b_.PrependFloat64Slot(19, plannedFuel, 0.0)
        return this
    def add_fuelCalcAlt(fuelCalcAlt:float):
        b_.PrependFloat64Slot(20, fuelCalcAlt, 0.0)
        return this
    def add_fuelCalcSpd(fuelCalcSpd:float):
        b_.PrependFloat64Slot(21, fuelCalcSpd, 0.0)
        return this
    def add_avgFuelFlow(avgFuelFlow:float):
        b_.PrependFloat64Slot(22, avgFuelFlow, 0.0)
        return this
    def add_flightPlanPoints(flightPlanPoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, flightPlanPoints)
        return this
    def end():
        return b_.EndObject()

def FlightPlanPointGroups_AbridgedStartFlightPlanPointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def FlightPlanPointGroups_AbridgedCreateFlightPlanPointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

