// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SensorPlan_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SensorPlan_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SensorPlan_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SensorPlan_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SensorPlan_Full_dataMode_Enum_EXERCISE = 3

class SensorPlan_Full

/// /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
class SensorPlan_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSORPLAN-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
    /// Example: /// Example: PLAN
    /// Constraints: Minimum length = 1, Maximum length = 12
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The type of records that comprise this parent set (COLLECT, CONTACT).
    /// Example: /// Example: COLLECT
    /// Constraints: Minimum length = 1, Maximum length = 12
    def recType() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The start time of the plan or schedule, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The end time of the plan or schedule, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Name associated with this plan or schedule.
    /// Example: /// Example: EXAMPLE NAME
    /// Constraints: Minimum length = 0, Maximum length = 24
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the requested/schedule/planned sensor associated with this request.
    /// Example: /// Example: REF-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The purpose/description of this plan or schedule.
    /// Example: /// Example: Example purpose
    /// Constraints: Minimum length = 0, Maximum length = 256
    def purpose() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The sensor or ground network associated with this plan or schedule.
    /// Example: /// Example: NETWORK
    /// Constraints: Minimum length = 0, Maximum length = 24
    def senNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def reqTotal() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// The customer for this plan or schedule.
    /// Example: /// Example: CUSTOMER
    /// Constraints: Minimum length = 0, Maximum length = 64
    def customer() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
    /// Example: /// Example: ACCEPTED
    /// Constraints: Minimum length = 0, Maximum length = 24
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SensorPlan_Full_dataMode_Enum:
        return SensorPlan_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 44, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def collectRequests(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def collectRequests_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)

def GetRootAsSensorPlan_Full(buf:string): return SensorPlan_Full { buf, flatbuffers.indirect(buf, 0) }

struct SensorPlan_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(24)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, type)
        return this
    def add_recType(recType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, recType)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, endTime)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, name)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origSensorId)
        return this
    def add_purpose(purpose:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, purpose)
        return this
    def add_senNetwork(senNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, senNetwork)
        return this
    def add_reqTotal(reqTotal:int):
        b_.PrependInt32Slot(11, reqTotal, 0)
        return this
    def add_customer(customer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, customer)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, status)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origin)
        return this
    def add_dataMode(dataMode:SensorPlan_Full_dataMode_Enum):
        b_.PrependInt8Slot(20, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origNetwork)
        return this
    def add_collectRequests(collectRequests:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, collectRequests)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, tags)
        return this
    def end():
        return b_.EndObject()

def SensorPlan_FullStartCollectRequestsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SensorPlan_FullCreateCollectRequestsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SensorPlan_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SensorPlan_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

