// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EOObservationDetails_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EOObservationDetails_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EOObservationDetails_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EOObservationDetails_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EOObservationDetails_Full_dataMode_Enum_EXERCISE = 3

class EOObservationDetails_Full

/// /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
class EOObservationDetails_Full : flatbuffers.handle
    /// Unique identifier of the parent EOObservation.
    /// Example: /// Example: EOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idEOObservation() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def predictedRa() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def predictedDeclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def predictedAzimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def predictedElevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def sunAzimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def sunElevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// The value is the number of spectral filters used.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numSpectralFilters() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: ['Keyword1', 'Keyword2']
    /// Constraints: No constraints specified.
    def spectralFilters(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def spectralFilters_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)
    /// This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def spectralZMFL(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 26) + i * 4)
    def spectralZMFL_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 26)
    /// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def spectralFilterSolarMag(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def spectralFilterSolarMag_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def zeroPoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def zeroPoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def zeroPointsUnc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def zeroPointsUnc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def extinctionCoeffs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def extinctionCoeffs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def extinctionCoeffsUnc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def extinctionCoeffsUnc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def colorCoeffs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def colorCoeffs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// The value is the number of neutral density filters used.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def numNeutralDensityFilters() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
    /// Constraints: No constraints specified.
    def neutralDensityFilterNames(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def neutralDensityFilterNames_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def neutralDensityFilterTransmissions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def neutralDensityFilterTransmissions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def neutralDensityFilterTransmissionsUnc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 46) + i * 4)
    def neutralDensityFilterTransmissionsUnc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 46)
    /// Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
    /// Example: /// Example: 234.2
    /// Constraints: No constraints specified.
    def gain() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    def ifov() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Pixel array size (width) in pixels.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def pixelArrayWidth() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// Pixel array size (height) in pixels.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    def pixelArrayHeight() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// Minimum valid pixel value, this is typically 0.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def pixelMin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
    /// Example: /// Example: 256
    /// Constraints: No constraints specified.
    def pixelMax() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def centroidRow() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def centroidColumn() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Spatial variance of image distribution in vertical direction measured in pixels squared.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def rowVariance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Spatial variance of image distribution in horizontal direction measured in pixels squared.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def columnVariance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
    /// Example: /// Example: 0.01
    /// Constraints: No constraints specified.
    def rowColCov() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
    /// Example: /// Example: [-127.153, -126.153, -125.153]
    /// Constraints: No constraints specified.
    def distFromStreakCenter(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def distFromStreakCenter_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
    /// Example: /// Example: [21.01, 21.382, 21.725]
    /// Constraints: No constraints specified.
    def surfBrightness(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 72) + i * 4)
    def surfBrightness_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 72)
    /// An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
    /// Example: /// Example: [0.165, 0.165, 0.165]
    /// Constraints: No constraints specified.
    def surfBrightnessUnc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 74) + i * 4)
    def surfBrightnessUnc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 74)
    /// Uncertainty in the times reported in UTC in seconds.
    /// Example: /// Example: 13.1
    /// Constraints: No constraints specified.
    def timesUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Operating temperature of CCD recorded during exposure or measured during calibrations in K.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def ccdTemp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    def currentSpectralFilterNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// The reference number n, in neutralDensityFilters for the currently used neutral density filter.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def currentNeutralDensityFilterNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// The number of pixels binned horizontally.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def binningHoriz() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// The number of pixels binned vertically.
    /// Example: /// Example: 14
    /// Constraints: No constraints specified.
    def binningVert() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// Number of stars used in photometric fit count.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    def pcalNumStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 88, 0)
    /// The x centroid position on the CCD of the target object in pixels.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def ccdObjPosX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// The y centroid position on the CCD of the target object in pixels.
    /// Example: /// Example: 321.4
    /// Constraints: No constraints specified.
    def ccdObjPosY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
    /// Example: /// Example: 133.2
    /// Constraints: No constraints specified.
    def ccdObjWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
    /// Example: /// Example: 4134.1
    /// Constraints: No constraints specified.
    def backgroundSignal() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def backgroundSignalUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def peakApertureCount() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// Peak Background Raw Counts is the largest pixel value used in background signal.
    /// Example: /// Example: 321
    /// Constraints: No constraints specified.
    def peakBackgroundCount() -> int:
        return flatbuffers.field_int32(buf_, pos_, 102, 0)
    /// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
    /// Example: /// Example: 13.4
    /// Constraints: No constraints specified.
    def snrEst() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def magInstrumental() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Uncertainty in the instrumental magnitude.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def magInstrumentalUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// Optical Cross Section computed in units m(2)/ster.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def opticalCrossSection() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// Uncertainty in Optical Cross Section computed in units m(2)/ster.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def opticalCrossSectionUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// Sun state vector in ECI J2000 coordinate frame in km.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def sunStatePosX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Sun state vector in ECI J2000 coordinate frame in km.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def sunStatePosY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// Sun state vector in ECI J2000 coordinate frame in km.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def sunStatePosZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Sun state vector in ECI J2000 coordinate frame in km/sec.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def sunStateVelX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 120, 0.0)
    /// Sun state vector in ECI J2000 coordinate frame in km/sec.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def sunStateVelY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// Sun state vector in ECI J2000 coordinate frame in km/sec.
    /// Example: /// Example: 123.3
    /// Constraints: No constraints specified.
    def sunStateVelZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def numCatalogStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 126, 0)
    /// Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def numDetectedStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 128, 0)
    /// Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def numCorrelatedStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 130, 0)
    /// Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def predictedRaUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 132, 0.0)
    /// Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def predictedDeclinationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 134, 0.0)
    /// Covariance (x^2) in measured Right Ascension (X) in deg^2.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def raCov() -> float:
        return flatbuffers.field_float64(buf_, pos_, 136, 0.0)
    /// Covariance (Y^2) in measured declination (Y) in deg^2.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def declinationCov() -> float:
        return flatbuffers.field_float64(buf_, pos_, 138, 0.0)
    /// Covariance (XY) in measured ra/declination (XY) in deg^2.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def raDeclinationCov() -> float:
        return flatbuffers.field_float64(buf_, pos_, 140, 0.0)
    /// World Coordinate System (WCS) X pixel origin in astrometric fit.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def acalCrPixX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// World Coordinate System (WCS) Y pixel origin in astrometric fit.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def acalCrPixY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 144, 0.0)
    /// World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def acalCrValX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def acalCrValY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// Number of stars used in astrometric fit.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def acalNumStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 150, 0)
    /// Distance from the target object to the sun during the observation in meters.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def objSunRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 152, 0.0)
    /// Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def phaseAngBisect() -> float:
        return flatbuffers.field_float64(buf_, pos_, 154, 0.0)
    /// Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def solarDiskFrac() -> float:
        return flatbuffers.field_float64(buf_, pos_, 156, 0.0)
    /// Time off element set.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def toes() -> float:
        return flatbuffers.field_float64(buf_, pos_, 158, 0.0)
    /// Degrees Off Element Set.
    /// Example: /// Example: 123.2
    /// Constraints: No constraints specified.
    def does() -> float:
        return flatbuffers.field_float64(buf_, pos_, 160, 0.0)
    /// Source of the data, will be set to EOObservation source if blank.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// , will be set to EOObservation dataMode if blank.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EOObservationDetails_Full_dataMode_Enum:
        return EOObservationDetails_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 164, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 166)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 168)

def GetRootAsEOObservationDetails_Full(buf:string): return EOObservationDetails_Full { buf, flatbuffers.indirect(buf, 0) }

struct EOObservationDetails_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(83)
        return this
    def add_idEOObservation(idEOObservation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idEOObservation)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, obTime)
        return this
    def add_predictedRa(predictedRa:float):
        b_.PrependFloat64Slot(3, predictedRa, 0.0)
        return this
    def add_predictedDeclination(predictedDeclination:float):
        b_.PrependFloat64Slot(4, predictedDeclination, 0.0)
        return this
    def add_predictedAzimuth(predictedAzimuth:float):
        b_.PrependFloat64Slot(5, predictedAzimuth, 0.0)
        return this
    def add_predictedElevation(predictedElevation:float):
        b_.PrependFloat64Slot(6, predictedElevation, 0.0)
        return this
    def add_sunAzimuth(sunAzimuth:float):
        b_.PrependFloat64Slot(7, sunAzimuth, 0.0)
        return this
    def add_sunElevation(sunElevation:float):
        b_.PrependFloat64Slot(8, sunElevation, 0.0)
        return this
    def add_numSpectralFilters(numSpectralFilters:int):
        b_.PrependInt32Slot(9, numSpectralFilters, 0)
        return this
    def add_spectralFilters(spectralFilters:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, spectralFilters)
        return this
    def add_spectralZMFL(spectralZMFL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, spectralZMFL)
        return this
    def add_spectralFilterSolarMag(spectralFilterSolarMag:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, spectralFilterSolarMag)
        return this
    def add_zeroPoints(zeroPoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, zeroPoints)
        return this
    def add_zeroPointsUnc(zeroPointsUnc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, zeroPointsUnc)
        return this
    def add_extinctionCoeffs(extinctionCoeffs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, extinctionCoeffs)
        return this
    def add_extinctionCoeffsUnc(extinctionCoeffsUnc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, extinctionCoeffsUnc)
        return this
    def add_colorCoeffs(colorCoeffs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, colorCoeffs)
        return this
    def add_numNeutralDensityFilters(numNeutralDensityFilters:int):
        b_.PrependInt32Slot(18, numNeutralDensityFilters, 0)
        return this
    def add_neutralDensityFilterNames(neutralDensityFilterNames:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, neutralDensityFilterNames)
        return this
    def add_neutralDensityFilterTransmissions(neutralDensityFilterTransmissions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, neutralDensityFilterTransmissions)
        return this
    def add_neutralDensityFilterTransmissionsUnc(neutralDensityFilterTransmissionsUnc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, neutralDensityFilterTransmissionsUnc)
        return this
    def add_gain(gain:float):
        b_.PrependFloat64Slot(22, gain, 0.0)
        return this
    def add_ifov(ifov:float):
        b_.PrependFloat64Slot(23, ifov, 0.0)
        return this
    def add_pixelArrayWidth(pixelArrayWidth:int):
        b_.PrependInt32Slot(24, pixelArrayWidth, 0)
        return this
    def add_pixelArrayHeight(pixelArrayHeight:int):
        b_.PrependInt32Slot(25, pixelArrayHeight, 0)
        return this
    def add_pixelMin(pixelMin:int):
        b_.PrependInt32Slot(26, pixelMin, 0)
        return this
    def add_pixelMax(pixelMax:int):
        b_.PrependInt32Slot(27, pixelMax, 0)
        return this
    def add_centroidRow(centroidRow:float):
        b_.PrependFloat64Slot(28, centroidRow, 0.0)
        return this
    def add_centroidColumn(centroidColumn:float):
        b_.PrependFloat64Slot(29, centroidColumn, 0.0)
        return this
    def add_rowVariance(rowVariance:float):
        b_.PrependFloat64Slot(30, rowVariance, 0.0)
        return this
    def add_columnVariance(columnVariance:float):
        b_.PrependFloat64Slot(31, columnVariance, 0.0)
        return this
    def add_rowColCov(rowColCov:float):
        b_.PrependFloat64Slot(32, rowColCov, 0.0)
        return this
    def add_distFromStreakCenter(distFromStreakCenter:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, distFromStreakCenter)
        return this
    def add_surfBrightness(surfBrightness:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, surfBrightness)
        return this
    def add_surfBrightnessUnc(surfBrightnessUnc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, surfBrightnessUnc)
        return this
    def add_timesUnc(timesUnc:float):
        b_.PrependFloat64Slot(36, timesUnc, 0.0)
        return this
    def add_ccdTemp(ccdTemp:float):
        b_.PrependFloat64Slot(37, ccdTemp, 0.0)
        return this
    def add_currentSpectralFilterNum(currentSpectralFilterNum:int):
        b_.PrependInt32Slot(38, currentSpectralFilterNum, 0)
        return this
    def add_currentNeutralDensityFilterNum(currentNeutralDensityFilterNum:int):
        b_.PrependInt32Slot(39, currentNeutralDensityFilterNum, 0)
        return this
    def add_binningHoriz(binningHoriz:int):
        b_.PrependInt32Slot(40, binningHoriz, 0)
        return this
    def add_binningVert(binningVert:int):
        b_.PrependInt32Slot(41, binningVert, 0)
        return this
    def add_pcalNumStars(pcalNumStars:int):
        b_.PrependInt32Slot(42, pcalNumStars, 0)
        return this
    def add_ccdObjPosX(ccdObjPosX:float):
        b_.PrependFloat64Slot(43, ccdObjPosX, 0.0)
        return this
    def add_ccdObjPosY(ccdObjPosY:float):
        b_.PrependFloat64Slot(44, ccdObjPosY, 0.0)
        return this
    def add_ccdObjWidth(ccdObjWidth:float):
        b_.PrependFloat64Slot(45, ccdObjWidth, 0.0)
        return this
    def add_backgroundSignal(backgroundSignal:float):
        b_.PrependFloat64Slot(46, backgroundSignal, 0.0)
        return this
    def add_backgroundSignalUnc(backgroundSignalUnc:float):
        b_.PrependFloat64Slot(47, backgroundSignalUnc, 0.0)
        return this
    def add_peakApertureCount(peakApertureCount:float):
        b_.PrependFloat64Slot(48, peakApertureCount, 0.0)
        return this
    def add_peakBackgroundCount(peakBackgroundCount:int):
        b_.PrependInt32Slot(49, peakBackgroundCount, 0)
        return this
    def add_snrEst(snrEst:float):
        b_.PrependFloat64Slot(50, snrEst, 0.0)
        return this
    def add_magInstrumental(magInstrumental:float):
        b_.PrependFloat64Slot(51, magInstrumental, 0.0)
        return this
    def add_magInstrumentalUnc(magInstrumentalUnc:float):
        b_.PrependFloat64Slot(52, magInstrumentalUnc, 0.0)
        return this
    def add_opticalCrossSection(opticalCrossSection:float):
        b_.PrependFloat64Slot(53, opticalCrossSection, 0.0)
        return this
    def add_opticalCrossSectionUnc(opticalCrossSectionUnc:float):
        b_.PrependFloat64Slot(54, opticalCrossSectionUnc, 0.0)
        return this
    def add_sunStatePosX(sunStatePosX:float):
        b_.PrependFloat64Slot(55, sunStatePosX, 0.0)
        return this
    def add_sunStatePosY(sunStatePosY:float):
        b_.PrependFloat64Slot(56, sunStatePosY, 0.0)
        return this
    def add_sunStatePosZ(sunStatePosZ:float):
        b_.PrependFloat64Slot(57, sunStatePosZ, 0.0)
        return this
    def add_sunStateVelX(sunStateVelX:float):
        b_.PrependFloat64Slot(58, sunStateVelX, 0.0)
        return this
    def add_sunStateVelY(sunStateVelY:float):
        b_.PrependFloat64Slot(59, sunStateVelY, 0.0)
        return this
    def add_sunStateVelZ(sunStateVelZ:float):
        b_.PrependFloat64Slot(60, sunStateVelZ, 0.0)
        return this
    def add_numCatalogStars(numCatalogStars:int):
        b_.PrependInt32Slot(61, numCatalogStars, 0)
        return this
    def add_numDetectedStars(numDetectedStars:int):
        b_.PrependInt32Slot(62, numDetectedStars, 0)
        return this
    def add_numCorrelatedStars(numCorrelatedStars:int):
        b_.PrependInt32Slot(63, numCorrelatedStars, 0)
        return this
    def add_predictedRaUnc(predictedRaUnc:float):
        b_.PrependFloat64Slot(64, predictedRaUnc, 0.0)
        return this
    def add_predictedDeclinationUnc(predictedDeclinationUnc:float):
        b_.PrependFloat64Slot(65, predictedDeclinationUnc, 0.0)
        return this
    def add_raCov(raCov:float):
        b_.PrependFloat64Slot(66, raCov, 0.0)
        return this
    def add_declinationCov(declinationCov:float):
        b_.PrependFloat64Slot(67, declinationCov, 0.0)
        return this
    def add_raDeclinationCov(raDeclinationCov:float):
        b_.PrependFloat64Slot(68, raDeclinationCov, 0.0)
        return this
    def add_acalCrPixX(acalCrPixX:float):
        b_.PrependFloat64Slot(69, acalCrPixX, 0.0)
        return this
    def add_acalCrPixY(acalCrPixY:float):
        b_.PrependFloat64Slot(70, acalCrPixY, 0.0)
        return this
    def add_acalCrValX(acalCrValX:float):
        b_.PrependFloat64Slot(71, acalCrValX, 0.0)
        return this
    def add_acalCrValY(acalCrValY:float):
        b_.PrependFloat64Slot(72, acalCrValY, 0.0)
        return this
    def add_acalNumStars(acalNumStars:int):
        b_.PrependInt32Slot(73, acalNumStars, 0)
        return this
    def add_objSunRange(objSunRange:float):
        b_.PrependFloat64Slot(74, objSunRange, 0.0)
        return this
    def add_phaseAngBisect(phaseAngBisect:float):
        b_.PrependFloat64Slot(75, phaseAngBisect, 0.0)
        return this
    def add_solarDiskFrac(solarDiskFrac:float):
        b_.PrependFloat64Slot(76, solarDiskFrac, 0.0)
        return this
    def add_toes(toes:float):
        b_.PrependFloat64Slot(77, toes, 0.0)
        return this
    def add_does(does:float):
        b_.PrependFloat64Slot(78, does, 0.0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, source)
        return this
    def add_dataMode(dataMode:EOObservationDetails_Full_dataMode_Enum):
        b_.PrependInt8Slot(80, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(81, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(82, createdBy)
        return this
    def end():
        return b_.EndObject()

def EOObservationDetails_FullStartSpectralFiltersVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateSpectralFiltersVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartSpectralZMFLVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateSpectralZMFLVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartSpectralFilterSolarMagVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateSpectralFilterSolarMagVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartZeroPointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateZeroPointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartZeroPointsUncVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateZeroPointsUncVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartExtinctionCoeffsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateExtinctionCoeffsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartExtinctionCoeffsUncVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateExtinctionCoeffsUncVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartColorCoeffsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateColorCoeffsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartNeutralDensityFilterNamesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateNeutralDensityFilterNamesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartNeutralDensityFilterTransmissionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateNeutralDensityFilterTransmissionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartNeutralDensityFilterTransmissionsUncVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateNeutralDensityFilterTransmissionsUncVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartDistFromStreakCenterVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateDistFromStreakCenterVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartSurfBrightnessVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateSurfBrightnessVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservationDetails_FullStartSurfBrightnessUncVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservationDetails_FullCreateSurfBrightnessUncVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

