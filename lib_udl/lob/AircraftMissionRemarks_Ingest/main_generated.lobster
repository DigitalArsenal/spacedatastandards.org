// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AircraftMissionRemarks_Ingest

/// /// Collection of Remarks associated with this Air Transport Mission.
class AircraftMissionRemarks_Ingest : flatbuffers.handle
    /// Global Decision Support System (GDSS) remark identifier.
    /// Example: /// Example: GDSSREMARK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def gdssRemarkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Remark type.
    /// Example: /// Example: MP
    /// Constraints: Minimum length = 0, Maximum length = 20
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Text of the remark.
    /// Example: /// Example: Example mission remarks.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def text() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def date() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// User who published the remark.
    /// Example: /// Example: John Doe
    /// Constraints: Minimum length = 0, Maximum length = 20
    def user() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// If the remark is sortie specific, this is the number of the sortie it applies to.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    def itineraryNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)

def GetRootAsAircraftMissionRemarks_Ingest(buf:string): return AircraftMissionRemarks_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AircraftMissionRemarks_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(6)
        return this
    def add_gdssRemarkId(gdssRemarkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, gdssRemarkId)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, type)
        return this
    def add_text(text:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, text)
        return this
    def add_date(date:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, date)
        return this
    def add_user(user:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, user)
        return this
    def add_itineraryNum(itineraryNum:int):
        b_.PrependInt32Slot(5, itineraryNum, 0)
        return this
    def end():
        return b_.EndObject()

