// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IndividualAircraftTasking_Full

/// /// Collection that specifies the naval flight operations for this ATO.
class IndividualAircraftTasking_Full : flatbuffers.handle
    /// The number of aircraft participating in this mission.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def numAcft() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
    /// Example: /// Example: F35A
    /// Constraints: Minimum length = 1, Maximum length = 36
    def acftType() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The call sign assigned to this mission aircraft.
    /// Example: /// Example: EAGLE47
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The code that indicates the ordinance mix carried on this mission aircraft.
    /// Example: /// Example: 6A2W3
    /// Constraints: Minimum length = 0, Maximum length = 48
    def priConfigCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The code for the secondary ordinance mix carried on this mission aircraft.
    /// Example: /// Example: 2S2WG
    /// Constraints: Minimum length = 0, Maximum length = 48
    def secConfigCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
    /// Example: /// Example: EE47
    /// Constraints: Minimum length = 0, Maximum length = 8
    def link16CallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The TACAN channel assigned to this mission aircraft.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def tacanChan() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
    /// Example: /// Example: 12345
    /// Constraints: No constraints specified.
    def juAddress(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def juAddress_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    /// Example: /// Example: 111
    /// Constraints: Minimum length = 0, Maximum length = 8
    def iffSifMode1Code() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    /// Example: /// Example: 20147
    /// Constraints: Minimum length = 0, Maximum length = 8
    def iffSifMode2Code() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    /// Example: /// Example: 30147
    /// Constraints: Minimum length = 0, Maximum length = 8
    def iffSifMode3Code() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)

def GetRootAsIndividualAircraftTasking_Full(buf:string): return IndividualAircraftTasking_Full { buf, flatbuffers.indirect(buf, 0) }

struct IndividualAircraftTasking_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(11)
        return this
    def add_numAcft(numAcft:int):
        b_.PrependInt32Slot(0, numAcft, 0)
        return this
    def add_acftType(acftType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, acftType)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, callSign)
        return this
    def add_priConfigCode(priConfigCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, priConfigCode)
        return this
    def add_secConfigCode(secConfigCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, secConfigCode)
        return this
    def add_link16CallSign(link16CallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, link16CallSign)
        return this
    def add_tacanChan(tacanChan:int):
        b_.PrependInt32Slot(6, tacanChan, 0)
        return this
    def add_juAddress(juAddress:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, juAddress)
        return this
    def add_iffSifMode1Code(iffSifMode1Code:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, iffSifMode1Code)
        return this
    def add_iffSifMode2Code(iffSifMode2Code:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, iffSifMode2Code)
        return this
    def add_iffSifMode3Code(iffSifMode3Code:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, iffSifMode3Code)
        return this
    def end():
        return b_.EndObject()

def IndividualAircraftTasking_FullStartJuAddressVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IndividualAircraftTasking_FullCreateJuAddressVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

