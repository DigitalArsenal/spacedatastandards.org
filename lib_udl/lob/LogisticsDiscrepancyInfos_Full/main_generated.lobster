// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsDiscrepancyInfos_Full

/// /// Discrepancy information associated with this LogisticsSupport record.
class LogisticsDiscrepancyInfos_Full : flatbuffers.handle
    /// Job Control Number of the discrepancy.
    /// Example: /// Example: 231942400
    /// Constraints: Minimum length = 0, Maximum length = 12
    def jcn() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The aircraft discrepancy description.
    /// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
    /// Constraints: Minimum length = 0, Maximum length = 680
    def discrepancyInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The job start time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T10:30:00.123Z
    /// Constraints: No constraints specified.
    def jobStTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T10:30:00.123Z
    /// Constraints: No constraints specified.
    def closureTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsLogisticsDiscrepancyInfos_Full(buf:string): return LogisticsDiscrepancyInfos_Full { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsDiscrepancyInfos_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_jcn(jcn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, jcn)
        return this
    def add_discrepancyInfo(discrepancyInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, discrepancyInfo)
        return this
    def add_jobStTime(jobStTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, jobStTime)
        return this
    def add_closureTime(closureTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, closureTime)
        return this
    def end():
        return b_.EndObject()

