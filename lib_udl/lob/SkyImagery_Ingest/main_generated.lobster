// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SkyImagery_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SkyImagery_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SkyImagery_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SkyImagery_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SkyImagery_Ingest_dataMode_Enum_EXERCISE = 3

class SkyImagery_Ingest

/// /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
class SkyImagery_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SKYIMAGERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Optional identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: 44920
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: X15-23452
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
    /// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAttitudeSet() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: 420
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Catalog number of the target on-orbit object.
    /// Example: /// Example: 25544
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: origSensorId
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: -33.283048
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 149.372549
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 14.483619321
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    /// Example: /// Example: 14.52
    /// Constraints: No constraints specified.
    def senx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    /// Example: /// Example: 32.41
    /// Constraints: No constraints specified.
    def seny() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    /// Example: /// Example: 376.12
    /// Constraints: No constraints specified.
    def senz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    /// Constraints: No constraints specified.
    def senQuat(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def senQuat_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    /// Constraints: No constraints specified.
    def senQuatDot(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def senQuatDot_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
    /// Example: /// Example: imageType
    /// Constraints: Minimum length = 1, Maximum length = 24
    def imageType() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def expStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def expEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// String that uniquely identifies the data source.
    /// Example: /// Example: imageSourceInfo
    /// Constraints: Minimum length = 0, Maximum length = 100
    def imageSourceInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The telescope pointing azimuth, in degrees, at the exposure start epoch.
    /// Example: /// Example: 146.321
    /// Constraints: No constraints specified.
    def topLeftStartAz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The telescope pointing elevation, in degrees, at the exposure start epoch.
    /// Example: /// Example: 146.321
    /// Constraints: No constraints specified.
    def topLeftStartEl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
    /// Example: /// Example: 3.7
    /// Constraints: No constraints specified.
    def topLeftStopAz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The telescope pointing elevation, in degrees, at the exposure stop epoch.
    /// Example: /// Example: 34.233
    /// Constraints: No constraints specified.
    def topLeftStopEl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The user-defined set ID of a sequence of images.
    /// Example: /// Example: imageSetId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def imageSetId() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The number of images in an image set.
    /// Example: /// Example: 9
    /// Constraints: No constraints specified.
    def imageSetLength() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// The sequence ID of an image within an image set.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def sequenceId() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Field Of View frame width, in degrees.
    /// Example: /// Example: 21.23
    /// Constraints: No constraints specified.
    def frameFOVWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Field Of View frame height, in degrees.
    /// Example: /// Example: 21.23
    /// Constraints: No constraints specified.
    def frameFOVHeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Field Of View pixel width, in degrees.
    /// Example: /// Example: 321.123
    /// Constraints: No constraints specified.
    def pixelFOVWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Field Of View pixel height, in degrees.
    /// Example: /// Example: 321.123
    /// Constraints: No constraints specified.
    def pixelFOVHeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Frame width of the image, in number of pixels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def frameWidthPixels() -> int:
        return flatbuffers.field_int32(buf_, pos_, 66, 0)
    /// Frame height of the image, in number of pixels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def frameHeightPixels() -> int:
        return flatbuffers.field_int32(buf_, pos_, 68, 0)
    /// Bit depth of the image, in number of pixels.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def pixelBitDepth() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// Reference to an annotation document associated with this image.
    /// Example: /// Example: annotationKey
    /// Constraints: Minimum length = 0, Maximum length = 128
    def annotationKey() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Reference to a calibration document associated with this image.
    /// Example: /// Example: calibrationKey
    /// Constraints: Minimum length = 0, Maximum length = 128
    def calibrationKey() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Name of the uploaded image file.
    /// Example: /// Example: filename.jpg
    /// Constraints: Minimum length = 0, Maximum length = 128
    def filename() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Size of the image file, in bytes.
    /// Example: /// Example: 371945
    /// Constraints: No constraints specified.
    def filesize() -> int:
        return flatbuffers.field_int64(buf_, pos_, 78, 0)
    /// MD5 value of the file. The ingest/create operation will automatically generate the value.
    /// Example: /// Example: checksumValue
    /// Constraints: Minimum length = 0, Maximum length = 256
    def checksumValue() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 84) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 84)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Optional name/description associated with this image.
    /// Example: /// Example: description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SkyImagery_Ingest_dataMode_Enum:
        return SkyImagery_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 96, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Collection of linked EOObservations.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def eoObservations(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 102) + i * 4)
    def eoObservations_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 102)

def GetRootAsSkyImagery_Ingest(buf:string): return SkyImagery_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct SkyImagery_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(50)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origObjectId)
        return this
    def add_idAttitudeSet(idAttitudeSet:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idAttitudeSet)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSensor)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(6, satNo, 0)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, origSensorId)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(8, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(9, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(10, senalt, 0.0)
        return this
    def add_senx(senx:float):
        b_.PrependFloat64Slot(11, senx, 0.0)
        return this
    def add_seny(seny:float):
        b_.PrependFloat64Slot(12, seny, 0.0)
        return this
    def add_senz(senz:float):
        b_.PrependFloat64Slot(13, senz, 0.0)
        return this
    def add_senQuat(senQuat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, senQuat)
        return this
    def add_senQuatDot(senQuatDot:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, senQuatDot)
        return this
    def add_imageType(imageType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, imageType)
        return this
    def add_expStartTime(expStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, expStartTime)
        return this
    def add_expEndTime(expEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, expEndTime)
        return this
    def add_imageSourceInfo(imageSourceInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, imageSourceInfo)
        return this
    def add_topLeftStartAz(topLeftStartAz:float):
        b_.PrependFloat64Slot(20, topLeftStartAz, 0.0)
        return this
    def add_topLeftStartEl(topLeftStartEl:float):
        b_.PrependFloat64Slot(21, topLeftStartEl, 0.0)
        return this
    def add_topLeftStopAz(topLeftStopAz:float):
        b_.PrependFloat64Slot(22, topLeftStopAz, 0.0)
        return this
    def add_topLeftStopEl(topLeftStopEl:float):
        b_.PrependFloat64Slot(23, topLeftStopEl, 0.0)
        return this
    def add_imageSetId(imageSetId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, imageSetId)
        return this
    def add_imageSetLength(imageSetLength:int):
        b_.PrependInt32Slot(25, imageSetLength, 0)
        return this
    def add_sequenceId(sequenceId:int):
        b_.PrependInt32Slot(26, sequenceId, 0)
        return this
    def add_frameFOVWidth(frameFOVWidth:float):
        b_.PrependFloat64Slot(27, frameFOVWidth, 0.0)
        return this
    def add_frameFOVHeight(frameFOVHeight:float):
        b_.PrependFloat64Slot(28, frameFOVHeight, 0.0)
        return this
    def add_pixelFOVWidth(pixelFOVWidth:float):
        b_.PrependFloat64Slot(29, pixelFOVWidth, 0.0)
        return this
    def add_pixelFOVHeight(pixelFOVHeight:float):
        b_.PrependFloat64Slot(30, pixelFOVHeight, 0.0)
        return this
    def add_frameWidthPixels(frameWidthPixels:int):
        b_.PrependInt32Slot(31, frameWidthPixels, 0)
        return this
    def add_frameHeightPixels(frameHeightPixels:int):
        b_.PrependInt32Slot(32, frameHeightPixels, 0)
        return this
    def add_pixelBitDepth(pixelBitDepth:int):
        b_.PrependInt32Slot(33, pixelBitDepth, 0)
        return this
    def add_annotationKey(annotationKey:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, annotationKey)
        return this
    def add_calibrationKey(calibrationKey:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, calibrationKey)
        return this
    def add_filename(filename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, filename)
        return this
    def add_filesize(filesize:int):
        b_.PrependInt64Slot(37, filesize, 0)
        return this
    def add_checksumValue(checksumValue:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, checksumValue)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, transactionId)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, tags)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, sourceDL)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, description)
        return this
    def add_dataMode(dataMode:SkyImagery_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(46, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, createdBy)
        return this
    def add_eoObservations(eoObservations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, eoObservations)
        return this
    def end():
        return b_.EndObject()

def SkyImagery_IngestStartSenQuatVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SkyImagery_IngestCreateSenQuatVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SkyImagery_IngestStartSenQuatDotVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SkyImagery_IngestCreateSenQuatDotVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SkyImagery_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SkyImagery_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SkyImagery_IngestStartEoObservationsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SkyImagery_IngestCreateEoObservationsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

