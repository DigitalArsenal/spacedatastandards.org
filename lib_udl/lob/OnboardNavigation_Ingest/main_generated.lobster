// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OnboardNavigation_Ingest_referenceFrame_Enum:
    /// No description available.
    OnboardNavigation_Ingest_referenceFrame_Enum_J2000 = 0
    /// No description available.
    OnboardNavigation_Ingest_referenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    OnboardNavigation_Ingest_referenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    OnboardNavigation_Ingest_referenceFrame_Enum_TEME = 3
    /// No description available.
    OnboardNavigation_Ingest_referenceFrame_Enum_ITRF = 4
    /// No description available.
    OnboardNavigation_Ingest_referenceFrame_Enum_GCRF = 5

enum OnboardNavigation_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    OnboardNavigation_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    OnboardNavigation_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    OnboardNavigation_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    OnboardNavigation_Ingest_dataMode_Enum_EXERCISE = 3

class OnboardNavigation_Ingest

/// /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
class OnboardNavigation_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ONBOARD-NAVIGATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the primary satellite on-orbit object.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Start time of the sensor data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-07-20T01:02:03.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// End time of the sensor data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-07-20T01:02:03.123456Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
    /// Example: /// Example: EPHEMERISSET-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def esId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The name or identifier the star catalog in use.
    /// Example: /// Example: STAR-CAT-NAME
    /// Constraints: Minimum length = 0, Maximum length = 24
    def starCatName() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The last load time of the current star catalog onboard this spacecraft.
    /// Example: /// Example: 2021-07-21T01:02:03.123Z
    /// Constraints: No constraints specified.
    def starCatLoadTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Unique identifier of the last onboard state vector.
    /// Example: /// Example: STATE-VECTOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
    /// Example: /// Example: ['2021-07-21T01:02:03.120003Z']
    /// Constraints: No constraints specified.
    def ts(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 26) + i * 4)
    def ts_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 26)
    /// The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def referenceFrame() -> OnboardNavigation_Ingest_referenceFrame_Enum:
        return OnboardNavigation_Ingest_referenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
    /// Example: /// Example: [[1.1, 2.2, 3.3]]
    /// Constraints: No constraints specified.
    def sunSensor(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def sunSensor_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
    /// Example: /// Example: [[1.1, 2.2, 3.3]]
    /// Constraints: No constraints specified.
    def mag(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def mag_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
    /// Example: /// Example: [[1.1, 2.2, 3.3]]
    /// Constraints: No constraints specified.
    def starTracker(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def starTracker_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
    /// Example: /// Example: [[1.1, 2.2, 3.3]]
    /// Constraints: No constraints specified.
    def deltaPos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def deltaPos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 36
    def dataMode() -> OnboardNavigation_Ingest_dataMode_Enum:
        return OnboardNavigation_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 48, 0))

def GetRootAsOnboardNavigation_Ingest(buf:string): return OnboardNavigation_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct OnboardNavigation_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(23)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origObjectId)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, endTime)
        return this
    def add_esId(esId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, esId)
        return this
    def add_starCatName(starCatName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, starCatName)
        return this
    def add_starCatLoadTime(starCatLoadTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, starCatLoadTime)
        return this
    def add_idStateVector(idStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, idStateVector)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, ts)
        return this
    def add_referenceFrame(referenceFrame:OnboardNavigation_Ingest_referenceFrame_Enum):
        b_.PrependInt8Slot(12, referenceFrame, 0)
        return this
    def add_sunSensor(sunSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, sunSensor)
        return this
    def add_mag(mag:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, mag)
        return this
    def add_starTracker(starTracker:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, starTracker)
        return this
    def add_deltaPos(deltaPos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, deltaPos)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origNetwork)
        return this
    def add_dataMode(dataMode:OnboardNavigation_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(22, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def OnboardNavigation_IngestStartTsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnboardNavigation_IngestCreateTsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnboardNavigation_IngestStartSunSensorVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnboardNavigation_IngestCreateSunSensorVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnboardNavigation_IngestStartMagVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnboardNavigation_IngestCreateMagVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnboardNavigation_IngestStartStarTrackerVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnboardNavigation_IngestCreateStarTrackerVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OnboardNavigation_IngestStartDeltaPosVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OnboardNavigation_IngestCreateDeltaPosVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

