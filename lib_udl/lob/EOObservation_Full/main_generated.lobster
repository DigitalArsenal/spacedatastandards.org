// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EOObservation_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EOObservation_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EOObservation_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EOObservation_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EOObservation_Full_dataMode_Enum_EXERCISE = 3

enum EOObservation_Full_referenceFrame_Enum:
    /// No description available.
    EOObservation_Full_referenceFrame_Enum_J2000 = 0
    /// No description available.
    EOObservation_Full_referenceFrame_Enum_GCRF = 1
    /// No description available.
    EOObservation_Full_referenceFrame_Enum_ITRF = 2
    /// No description available.
    EOObservation_Full_referenceFrame_Enum_TEME = 3

enum EOObservation_Full_senReferenceFrame_Enum:
    /// No description available.
    EOObservation_Full_senReferenceFrame_Enum_J2000 = 0
    /// No description available.
    EOObservation_Full_senReferenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    EOObservation_Full_senReferenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    EOObservation_Full_senReferenceFrame_Enum_TEME = 3
    /// No description available.
    EOObservation_Full_senReferenceFrame_Enum_ITRF = 4
    /// No description available.
    EOObservation_Full_senReferenceFrame_Enum_GCRF = 5

class EOObservation_Full

/// /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
class EOObservation_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def corrQuality() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the Sky Imagery.
    /// Example: /// Example: SKYIMAGERY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSkyImagery() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    /// Example: /// Example: AUTOTRACK
    /// Constraints: Minimum length = 0, Maximum length = 24
    def collectMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def taskId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional identifier of the track to which this observation belongs.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    def obPosition() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 34, 0))
    /// Line of sight azimuth angle in degrees and topocentric frame.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def azimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def azimuthUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Sensor line of sight azimuth angle bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def azimuthBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def azimuthRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def elevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// One sigma uncertainty in the line of sight elevation angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def elevationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Sensor line of sight elevation bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def elevationBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def elevationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Line of sight range in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def range() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// One sigma uncertainty in the line of sight range, in kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def rangeUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Sensor line of sight range bias in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def rangeBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Rate of change of the line of sight range in km/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def rangeRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// One sigma uncertainty in the line of sight range rate, in kilometers/second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def rangeRateUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def ra() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def raRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def raUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Sensor line of sight right ascension bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def raBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def declination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def declinationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// One sigma uncertainty in the line of sight declination angle, in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def declinationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Sensor line of sight declination angle bias in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def declinationBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losy() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// One sigma uncertainty in the line of sight pointing in micro-radians.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losxvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losyvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def loszvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// Sensor altitude at obTime (if mobile/onorbit) in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def seny() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvelx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvely() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvelz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
    /// Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
    /// Constraints: No constraints specified.
    def senQuat(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 110) + i * 4)
    def senQuat_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 110)
    /// The number of RSOs detected in the sensor field of view.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def fovCount() -> int:
        return flatbuffers.field_int32(buf_, pos_, 112, 0)
    /// Image exposure duration in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def expDuration() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def zeroptd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// Net object signature = counts / expDuration.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def netObjSig() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Net object signature uncertainty = counts uncertainty / expDuration.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def netObjSigUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 120, 0.0)
    /// Calibrated magnitude in units of magnitudes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def mag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// Uncertainty of calibrated magnitude in units of magnitudes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def magUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def magNormRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 126, 0.0)
    /// For GEO detections, the latitude in degrees north.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def geolat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 128, 0.0)
    /// For GEO detections, the longitude in degrees east.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def geolon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 130, 0.0)
    /// For GEO detections, the altitude in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def geoalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 132, 0.0)
    /// For GEO detections, the range in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def georange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 134, 0.0)
    /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def skyBkgrnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 136, 0.0)
    /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def primaryExtinction() -> float:
        return flatbuffers.field_float64(buf_, pos_, 138, 0.0)
    /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def primaryExtinctionUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 140, 0.0)
    /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def solarPhaseAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def solarEqPhaseAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 144, 0.0)
    /// Angle from the sun to the equatorial plane.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def solarDecAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// Shutter delay in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def shutterDelay() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// Sensor timing bias in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def timingBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 150, 0.0)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 152)
    /// Intensity of the target for IR observations, in kw/sr/um.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def intensity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 154, 0.0)
    /// Background intensity for IR observations, in kw/sr/um.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def bgIntensity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 156, 0.0)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: PROVIDED_DATA1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 158)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 160)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EOObservation_Full_dataMode_Enum:
        return EOObservation_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 164, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 166) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 166)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 168)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 170)
    /// This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def zeroPtdUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 172, 0.0)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def eoobservationDetails() -> string:
        return flatbuffers.field_string(buf_, pos_, 174)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 176)
    /// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def referenceFrame() -> EOObservation_Full_referenceFrame_Enum:
        return EOObservation_Full_referenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 178, 0))
    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def senReferenceFrame() -> EOObservation_Full_senReferenceFrame_Enum:
        return EOObservation_Full_senReferenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 180, 0))
    /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def umbra() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 182, 0))
    /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def penumbra() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 184, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 186)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 188)
    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: /// Example: OPTICAL
    /// Constraints: No constraints specified.
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 190)

def GetRootAsEOObservation_Full(buf:string): return EOObservation_Full { buf, flatbuffers.indirect(buf, 0) }

struct EOObservation_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(94)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, obTime)
        return this
    def add_corrQuality(corrQuality:float):
        b_.PrependFloat64Slot(3, corrQuality, 0.0)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idOnOrbit)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSensor)
        return this
    def add_idSkyImagery(idSkyImagery:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idSkyImagery)
        return this
    def add_collectMethod(collectMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, collectMethod)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(8, satNo, 0)
        return this
    def add_taskId(taskId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, taskId)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, transactionId)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, trackId)
        return this
    def add_obPosition(obPosition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, obPosition)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origObjectId)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origSensorId)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(15, uct, 0)
        return this
    def add_azimuth(azimuth:float):
        b_.PrependFloat64Slot(16, azimuth, 0.0)
        return this
    def add_azimuthUnc(azimuthUnc:float):
        b_.PrependFloat64Slot(17, azimuthUnc, 0.0)
        return this
    def add_azimuthBias(azimuthBias:float):
        b_.PrependFloat64Slot(18, azimuthBias, 0.0)
        return this
    def add_azimuthRate(azimuthRate:float):
        b_.PrependFloat64Slot(19, azimuthRate, 0.0)
        return this
    def add_elevation(elevation:float):
        b_.PrependFloat64Slot(20, elevation, 0.0)
        return this
    def add_elevationUnc(elevationUnc:float):
        b_.PrependFloat64Slot(21, elevationUnc, 0.0)
        return this
    def add_elevationBias(elevationBias:float):
        b_.PrependFloat64Slot(22, elevationBias, 0.0)
        return this
    def add_elevationRate(elevationRate:float):
        b_.PrependFloat64Slot(23, elevationRate, 0.0)
        return this
    def add_range(range:float):
        b_.PrependFloat64Slot(24, range, 0.0)
        return this
    def add_rangeUnc(rangeUnc:float):
        b_.PrependFloat64Slot(25, rangeUnc, 0.0)
        return this
    def add_rangeBias(rangeBias:float):
        b_.PrependFloat64Slot(26, rangeBias, 0.0)
        return this
    def add_rangeRate(rangeRate:float):
        b_.PrependFloat64Slot(27, rangeRate, 0.0)
        return this
    def add_rangeRateUnc(rangeRateUnc:float):
        b_.PrependFloat64Slot(28, rangeRateUnc, 0.0)
        return this
    def add_ra(ra:float):
        b_.PrependFloat64Slot(29, ra, 0.0)
        return this
    def add_raRate(raRate:float):
        b_.PrependFloat64Slot(30, raRate, 0.0)
        return this
    def add_raUnc(raUnc:float):
        b_.PrependFloat64Slot(31, raUnc, 0.0)
        return this
    def add_raBias(raBias:float):
        b_.PrependFloat64Slot(32, raBias, 0.0)
        return this
    def add_declination(declination:float):
        b_.PrependFloat64Slot(33, declination, 0.0)
        return this
    def add_declinationRate(declinationRate:float):
        b_.PrependFloat64Slot(34, declinationRate, 0.0)
        return this
    def add_declinationUnc(declinationUnc:float):
        b_.PrependFloat64Slot(35, declinationUnc, 0.0)
        return this
    def add_declinationBias(declinationBias:float):
        b_.PrependFloat64Slot(36, declinationBias, 0.0)
        return this
    def add_losx(losx:float):
        b_.PrependFloat64Slot(37, losx, 0.0)
        return this
    def add_losy(losy:float):
        b_.PrependFloat64Slot(38, losy, 0.0)
        return this
    def add_losz(losz:float):
        b_.PrependFloat64Slot(39, losz, 0.0)
        return this
    def add_losUnc(losUnc:float):
        b_.PrependFloat64Slot(40, losUnc, 0.0)
        return this
    def add_losxvel(losxvel:float):
        b_.PrependFloat64Slot(41, losxvel, 0.0)
        return this
    def add_losyvel(losyvel:float):
        b_.PrependFloat64Slot(42, losyvel, 0.0)
        return this
    def add_loszvel(loszvel:float):
        b_.PrependFloat64Slot(43, loszvel, 0.0)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(44, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(45, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(46, senalt, 0.0)
        return this
    def add_senx(senx:float):
        b_.PrependFloat64Slot(47, senx, 0.0)
        return this
    def add_seny(seny:float):
        b_.PrependFloat64Slot(48, seny, 0.0)
        return this
    def add_senz(senz:float):
        b_.PrependFloat64Slot(49, senz, 0.0)
        return this
    def add_senvelx(senvelx:float):
        b_.PrependFloat64Slot(50, senvelx, 0.0)
        return this
    def add_senvely(senvely:float):
        b_.PrependFloat64Slot(51, senvely, 0.0)
        return this
    def add_senvelz(senvelz:float):
        b_.PrependFloat64Slot(52, senvelz, 0.0)
        return this
    def add_senQuat(senQuat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, senQuat)
        return this
    def add_fovCount(fovCount:int):
        b_.PrependInt32Slot(54, fovCount, 0)
        return this
    def add_expDuration(expDuration:float):
        b_.PrependFloat64Slot(55, expDuration, 0.0)
        return this
    def add_zeroptd(zeroptd:float):
        b_.PrependFloat64Slot(56, zeroptd, 0.0)
        return this
    def add_netObjSig(netObjSig:float):
        b_.PrependFloat64Slot(57, netObjSig, 0.0)
        return this
    def add_netObjSigUnc(netObjSigUnc:float):
        b_.PrependFloat64Slot(58, netObjSigUnc, 0.0)
        return this
    def add_mag(mag:float):
        b_.PrependFloat64Slot(59, mag, 0.0)
        return this
    def add_magUnc(magUnc:float):
        b_.PrependFloat64Slot(60, magUnc, 0.0)
        return this
    def add_magNormRange(magNormRange:float):
        b_.PrependFloat64Slot(61, magNormRange, 0.0)
        return this
    def add_geolat(geolat:float):
        b_.PrependFloat64Slot(62, geolat, 0.0)
        return this
    def add_geolon(geolon:float):
        b_.PrependFloat64Slot(63, geolon, 0.0)
        return this
    def add_geoalt(geoalt:float):
        b_.PrependFloat64Slot(64, geoalt, 0.0)
        return this
    def add_georange(georange:float):
        b_.PrependFloat64Slot(65, georange, 0.0)
        return this
    def add_skyBkgrnd(skyBkgrnd:float):
        b_.PrependFloat64Slot(66, skyBkgrnd, 0.0)
        return this
    def add_primaryExtinction(primaryExtinction:float):
        b_.PrependFloat64Slot(67, primaryExtinction, 0.0)
        return this
    def add_primaryExtinctionUnc(primaryExtinctionUnc:float):
        b_.PrependFloat64Slot(68, primaryExtinctionUnc, 0.0)
        return this
    def add_solarPhaseAngle(solarPhaseAngle:float):
        b_.PrependFloat64Slot(69, solarPhaseAngle, 0.0)
        return this
    def add_solarEqPhaseAngle(solarEqPhaseAngle:float):
        b_.PrependFloat64Slot(70, solarEqPhaseAngle, 0.0)
        return this
    def add_solarDecAngle(solarDecAngle:float):
        b_.PrependFloat64Slot(71, solarDecAngle, 0.0)
        return this
    def add_shutterDelay(shutterDelay:float):
        b_.PrependFloat64Slot(72, shutterDelay, 0.0)
        return this
    def add_timingBias(timingBias:float):
        b_.PrependFloat64Slot(73, timingBias, 0.0)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(74, rawFileURI)
        return this
    def add_intensity(intensity:float):
        b_.PrependFloat64Slot(75, intensity, 0.0)
        return this
    def add_bgIntensity(bgIntensity:float):
        b_.PrependFloat64Slot(76, bgIntensity, 0.0)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(77, descriptor)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(78, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, origin)
        return this
    def add_dataMode(dataMode:EOObservation_Full_dataMode_Enum):
        b_.PrependInt8Slot(80, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(81, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(82, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(83, createdBy)
        return this
    def add_zeroPtdUnc(zeroPtdUnc:float):
        b_.PrependFloat64Slot(84, zeroPtdUnc, 0.0)
        return this
    def add_eoobservationDetails(eoobservationDetails:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(85, eoobservationDetails)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(86, onOrbit)
        return this
    def add_referenceFrame(referenceFrame:EOObservation_Full_referenceFrame_Enum):
        b_.PrependInt8Slot(87, referenceFrame, 0)
        return this
    def add_senReferenceFrame(senReferenceFrame:EOObservation_Full_senReferenceFrame_Enum):
        b_.PrependInt8Slot(88, senReferenceFrame, 0)
        return this
    def add_umbra(umbra:bool):
        b_.PrependBoolSlot(89, umbra, 0)
        return this
    def add_penumbra(penumbra:bool):
        b_.PrependBoolSlot(90, penumbra, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(91, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(92, sourceDL)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(93, type)
        return this
    def end():
        return b_.EndObject()

def EOObservation_FullStartSenQuatVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservation_FullCreateSenQuatVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EOObservation_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EOObservation_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

