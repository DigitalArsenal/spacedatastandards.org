// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationAmplitude_Full

/// /// Multi-dimensional array with the same dimensions as power plus one additional dimension antenna_element. This variable is enabled for post-process polarization or antenna array determination. Can be combined with phase to create a phasors and subsequently enable post-processing of polarization and/or antenna array determination.
class IonoObservationAmplitude_Full : flatbuffers.handle
    /// Notes for the amplitude data.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 512
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Array of integers for amplitude dimensions.
    /// Example: /// Example: [4, 5]
    /// Constraints: No constraints specified.
    def dimensions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def dimensions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// Array of names for dimensions.
    /// Example: /// Example: ['NAME1', 'NAME2']
    /// Constraints: No constraints specified.
    def dimensionName(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def dimensionName_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)
    /// Array of amplitude data.
    /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    /// Constraints: No constraints specified.
    def data(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def data_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)

def GetRootAsIonoObservationAmplitude_Full(buf:string): return IonoObservationAmplitude_Full { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationAmplitude_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, notes)
        return this
    def add_dimensions(dimensions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, dimensions)
        return this
    def add_dimensionName(dimensionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, dimensionName)
        return this
    def add_data(data:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, data)
        return this
    def end():
        return b_.EndObject()

def IonoObservationAmplitude_FullStartDimensionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationAmplitude_FullCreateDimensionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationAmplitude_FullStartDimensionNameVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationAmplitude_FullCreateDimensionNameVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationAmplitude_FullStartDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationAmplitude_FullCreateDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

