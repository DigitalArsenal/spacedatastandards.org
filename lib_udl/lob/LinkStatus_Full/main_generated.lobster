// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LinkStatus_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    LinkStatus_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    LinkStatus_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    LinkStatus_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    LinkStatus_Full_dataMode_Enum_EXERCISE = 3

class LinkStatus_Full

/// /// Captures link status.
class LinkStatus_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LINKSTATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
    /// Example: /// Example: REF-ONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit1() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
    /// Example: /// Example: REF-ONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit2() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def linkStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def linkStopTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
    /// Example: /// Example: Fornax
    /// Constraints: Minimum length = 0, Maximum length = 128
    def constellation() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The name or description of the link.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 1, Maximum length = 64
    def linkName() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The type of the link.
    /// Example: /// Example: Example link
    /// Constraints: Minimum length = 0, Maximum length = 64
    def linkType() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
    /// Example: /// Example: MIL-KA
    /// Constraints: Minimum length = 0, Maximum length = 24
    def band() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
    /// Example: /// Example: REF-BEAM1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idBeam1() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The name or description of link endpoint-1, corresponding to beam-1.
    /// Example: /// Example: Example endpoint
    /// Constraints: Minimum length = 1, Maximum length = 64
    def endPoint1Name() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def endPoint1Lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.23
    /// Constraints: No constraints specified.
    def endPoint1Lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
    /// Example: /// Example: REF-BEAM2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idBeam2() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The name or description of link endpoint-2, corresponding to beam-2.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 1, Maximum length = 64
    def endPoint2Name() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def endPoint2Lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.23
    /// Constraints: No constraints specified.
    def endPoint2Lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// The endpoint-1 to endpoint-2 data rate, in kbps.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def dataRate1To2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// The endpoint-2 to endpoint-1 data rate, in kbps.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def dataRate2To1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
    /// Example: /// Example: DEGRADED-WEATHER
    /// Constraints: Minimum length = 0, Maximum length = 24
    def linkState() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The SYSCAP mission status of the system(s) forming the link.
    /// Example: /// Example: Example status
    /// Constraints: Minimum length = 0, Maximum length = 24
    def sysCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The OPSCAP mission status of the system(s) forming the link.
    /// Example: /// Example: Example status
    /// Constraints: Minimum length = 0, Maximum length = 24
    def opsCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> LinkStatus_Full_dataMode_Enum:
        return LinkStatus_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 60, 0))
    /// Satellite/catalog number of the target on-orbit primary object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def satNo1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// Satellite/catalog number of the target on-orbit secondary object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def satNo2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)

def GetRootAsLinkStatus_Full(buf:string): return LinkStatus_Full { buf, flatbuffers.indirect(buf, 0) }

struct LinkStatus_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(31)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit1(idOnOrbit1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit1)
        return this
    def add_idOnOrbit2(idOnOrbit2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit2)
        return this
    def add_linkStartTime(linkStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, linkStartTime)
        return this
    def add_linkStopTime(linkStopTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, linkStopTime)
        return this
    def add_constellation(constellation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, constellation)
        return this
    def add_linkName(linkName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, linkName)
        return this
    def add_linkType(linkType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, linkType)
        return this
    def add_band(band:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, band)
        return this
    def add_idBeam1(idBeam1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, idBeam1)
        return this
    def add_endPoint1Name(endPoint1Name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, endPoint1Name)
        return this
    def add_endPoint1Lat(endPoint1Lat:float):
        b_.PrependFloat64Slot(12, endPoint1Lat, 0.0)
        return this
    def add_endPoint1Lon(endPoint1Lon:float):
        b_.PrependFloat64Slot(13, endPoint1Lon, 0.0)
        return this
    def add_idBeam2(idBeam2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, idBeam2)
        return this
    def add_endPoint2Name(endPoint2Name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, endPoint2Name)
        return this
    def add_endPoint2Lat(endPoint2Lat:float):
        b_.PrependFloat64Slot(16, endPoint2Lat, 0.0)
        return this
    def add_endPoint2Lon(endPoint2Lon:float):
        b_.PrependFloat64Slot(17, endPoint2Lon, 0.0)
        return this
    def add_dataRate1To2(dataRate1To2:float):
        b_.PrependFloat64Slot(18, dataRate1To2, 0.0)
        return this
    def add_dataRate2To1(dataRate2To1:float):
        b_.PrependFloat64Slot(19, dataRate2To1, 0.0)
        return this
    def add_linkState(linkState:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, linkState)
        return this
    def add_sysCap(sysCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, sysCap)
        return this
    def add_opsCap(opsCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, opsCap)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, origNetwork)
        return this
    def add_dataMode(dataMode:LinkStatus_Full_dataMode_Enum):
        b_.PrependInt8Slot(28, dataMode, 0)
        return this
    def add_satNo1(satNo1:int):
        b_.PrependInt32Slot(29, satNo1, 0)
        return this
    def add_satNo2(satNo2:int):
        b_.PrependInt32Slot(30, satNo2, 0)
        return this
    def end():
        return b_.EndObject()

