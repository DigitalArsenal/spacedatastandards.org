// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Sensor_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Sensor_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Sensor_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Sensor_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Sensor_Ingest_dataMode_Enum_EXERCISE = 3

class Sensor_Ingest

/// /// Model representation of observation data for electro-optical based sensor phenomenologies.
class Sensor_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique name of this sensor.
    /// Example: /// Example: SENSOR_NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    def sensorName() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    def sensorNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Optional short name for the sensor.
    /// Example: /// Example: SNR-1
    /// Constraints: Minimum length = 0, Maximum length = 5
    def shortName() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
    /// Example: /// Example: observations
    /// Constraints: Minimum length = 0, Maximum length = 128
    def dataControl() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
    /// Example: /// Example: AF-ID
    /// Constraints: Minimum length = 0, Maximum length = 8
    def afId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The sensor type at the site. Optional field, intended primarily for ASRs.
    /// Example: /// Example: SENSOR_TYPE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def asrType() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Sensor_Ingest_dataMode_Enum:
        return Sensor_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 26, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Optional flag indicating if the sensor is active.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def active() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def sensorcharacteristics(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def sensorcharacteristics_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Collection of SensorStats which contain statistics of a sensor.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def sensorStats(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def sensorStats_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def sensorlimitsCollection(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def sensorlimitsCollection_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def entity() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Unique identifier of the parent entity. idEntity is required for Put.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def sensorObservationType() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def sensorType() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)

def GetRootAsSensor_Ingest(buf:string): return Sensor_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Sensor_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idSensor)
        return this
    def add_sensorName(sensorName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, sensorName)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_sensorNumber(sensorNumber:int):
        b_.PrependInt32Slot(3, sensorNumber, 0)
        return this
    def add_shortName(shortName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, shortName)
        return this
    def add_dataControl(dataControl:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, dataControl)
        return this
    def add_afId(afId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, afId)
        return this
    def add_asrType(asrType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, asrType)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, origNetwork)
        return this
    def add_dataMode(dataMode:Sensor_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(11, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, createdBy)
        return this
    def add_active(active:bool):
        b_.PrependBoolSlot(14, active, 0)
        return this
    def add_sensorcharacteristics(sensorcharacteristics:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, sensorcharacteristics)
        return this
    def add_sensorStats(sensorStats:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, sensorStats)
        return this
    def add_sensorlimitsCollection(sensorlimitsCollection:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, sensorlimitsCollection)
        return this
    def add_entity(entity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, entity)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, idEntity)
        return this
    def add_sensorObservationType(sensorObservationType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, sensorObservationType)
        return this
    def add_sensorType(sensorType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, sensorType)
        return this
    def end():
        return b_.EndObject()

def Sensor_IngestStartSensorcharacteristicsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Sensor_IngestCreateSensorcharacteristicsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Sensor_IngestStartSensorStatsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Sensor_IngestCreateSensorStatsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Sensor_IngestStartSensorlimitsCollectionVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Sensor_IngestCreateSensorlimitsCollectionVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

