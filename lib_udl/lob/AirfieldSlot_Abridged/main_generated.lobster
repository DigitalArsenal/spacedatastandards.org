// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirfieldSlot_Abridged_type_Enum:
    /// No description available.
    AirfieldSlot_Abridged_type_Enum_WORKING = 0
    /// No description available.
    AirfieldSlot_Abridged_type_Enum_PARKING = 1
    /// No description available.
    AirfieldSlot_Abridged_type_Enum_TAKEOFF = 2
    /// No description available.
    AirfieldSlot_Abridged_type_Enum_LANDING = 3
    /// No description available.
    AirfieldSlot_Abridged_type_Enum_OTHER = 4

enum AirfieldSlot_Abridged_acSlotCat_Enum:
    /// No description available.
    AirfieldSlot_Abridged_acSlotCat_Enum_WIDE = 0
    /// No description available.
    AirfieldSlot_Abridged_acSlotCat_Enum_NARROW = 1
    /// No description available.
    AirfieldSlot_Abridged_acSlotCat_Enum_HELO = 2
    /// No description available.
    AirfieldSlot_Abridged_acSlotCat_Enum_ALL = 3
    /// No description available.
    AirfieldSlot_Abridged_acSlotCat_Enum_OTHER = 4

enum AirfieldSlot_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirfieldSlot_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirfieldSlot_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirfieldSlot_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirfieldSlot_Abridged_dataMode_Enum_EXERCISE = 3

class AirfieldSlot_Abridged

/// /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
class AirfieldSlot_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The name of the airfield where this slot is located.
    /// Example: /// Example: USAF Academy AFLD
    /// Constraints: Minimum length = 1, Maximum length = 64
    def airfieldName() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The International Civil Aviation Organization (ICAO) code of the airfield.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def icao() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique identifier of the Airfield for which this slot information applies.
    /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Alternate airfield identifier provided by the source.
    /// Example: /// Example: ALT-AIRFIELD-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def altAirfieldId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Name of this slot.
    /// Example: /// Example: Apron 5
    /// Constraints: Minimum length = 1, Maximum length = 32
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
    /// Example: /// Example: WORKING
    /// Constraints: Minimum length = 0, Maximum length = 7
    def type() -> AirfieldSlot_Abridged_type_Enum:
        return AirfieldSlot_Abridged_type_Enum(flatbuffers.field_int8(buf_, pos_, 18, 0))
    /// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
    /// Example: /// Example: WIDE
    /// Constraints: Minimum length = 0, Maximum length = 6
    def acSlotCat() -> AirfieldSlot_Abridged_acSlotCat_Enum:
        return AirfieldSlot_Abridged_acSlotCat_Enum(flatbuffers.field_int8(buf_, pos_, 20, 0))
    /// Number of aircraft that can fit in this slot at the same time.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def capacity() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
    /// Example: /// Example: 0000Z
    /// Constraints: Minimum length = 0, Maximum length = 5
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
    /// Example: /// Example: 2359Z
    /// Constraints: Minimum length = 0, Maximum length = 5
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def minSeparation() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Optional notes/comments for this airfield slot.
    /// Example: /// Example: Notes for an airfield slot.
    /// Constraints: Minimum length = 0, Maximum length = 128
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirfieldSlot_Abridged_dataMode_Enum:
        return AirfieldSlot_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 44, 0))

def GetRootAsAirfieldSlot_Abridged(buf:string): return AirfieldSlot_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct AirfieldSlot_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_airfieldName(airfieldName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, airfieldName)
        return this
    def add_icao(icao:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, icao)
        return this
    def add_idAirfield(idAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idAirfield)
        return this
    def add_altAirfieldId(altAirfieldId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, altAirfieldId)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, name)
        return this
    def add_type(type:AirfieldSlot_Abridged_type_Enum):
        b_.PrependInt8Slot(7, type, 0)
        return this
    def add_acSlotCat(acSlotCat:AirfieldSlot_Abridged_acSlotCat_Enum):
        b_.PrependInt8Slot(8, acSlotCat, 0)
        return this
    def add_capacity(capacity:int):
        b_.PrependInt32Slot(9, capacity, 0)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, endTime)
        return this
    def add_minSeparation(minSeparation:int):
        b_.PrependInt32Slot(12, minSeparation, 0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origNetwork)
        return this
    def add_dataMode(dataMode:AirfieldSlot_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(20, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

