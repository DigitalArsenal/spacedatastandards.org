// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationTime_Ingest

/// /// Array of times in number of seconds passed since January 1st, 1970  with the same dimensions as power.
class IonoObservationTime_Ingest : flatbuffers.handle
    /// Array of integers of the time array dimensions.
    /// Example: /// Example: [1, 2]
    /// Constraints: No constraints specified.
    def dimensions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 4) + i * 4)
    def dimensions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 4)
    /// Array of names for dimensions.
    /// Example: /// Example: ['NAME1', 'NAME2']
    /// Constraints: No constraints specified.
    def dimensionName(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def dimensionName_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// The notes indicate the scheme and accuracy.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 512
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Array of times in number of seconds passed since January 1st, 1970 with the same dimensions as power.
    /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    /// Constraints: No constraints specified.
    def data(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def data_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)

def GetRootAsIonoObservationTime_Ingest(buf:string): return IonoObservationTime_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationTime_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_dimensions(dimensions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, dimensions)
        return this
    def add_dimensionName(dimensionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, dimensionName)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, notes)
        return this
    def add_data(data:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, data)
        return this
    def end():
        return b_.EndObject()

def IonoObservationTime_IngestStartDimensionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationTime_IngestCreateDimensionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationTime_IngestStartDimensionNameVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationTime_IngestCreateDimensionNameVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationTime_IngestStartDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationTime_IngestCreateDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

