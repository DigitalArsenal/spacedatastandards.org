// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Transponder_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Transponder_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Transponder_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Transponder_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Transponder_Ingest_dataMode_Enum_EXERCISE = 3

class Transponder_Ingest

/// /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
class Transponder_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: TRANSPONDER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// ID of the parent Comm object for this transponder.
    /// Example: /// Example: REF-COMM-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idComm() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Optional name of the transponder.
    /// Example: /// Example: AA10
    /// Constraints: Minimum length = 0, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Optional external network id as provided data source.
    /// Example: /// Example: N-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def nid() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional external transponder id as provided data source.
    /// Example: /// Example: T-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def tid() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
    /// Example: /// Example: 1.53261520047876
    /// Constraints: No constraints specified.
    def ttf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
    /// Example: /// Example: 4.0
    /// Constraints: No constraints specified.
    def symbolRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def fec() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Transponder modulation, e.g. Auto, QPSK, 8PSK.
    /// Example: /// Example: Auto
    /// Constraints: Minimum length = 0, Maximum length = 10
    def modulation() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Format.
    /// Example: /// Example: format
    /// Constraints: Minimum length = 0, Maximum length = 45
    def format() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Transponder system, e.g. DVB-S, DVB-S2.
    /// Example: /// Example: DVB-S
    /// Constraints: Minimum length = 0, Maximum length = 45
    def system() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Transponder_Ingest_dataMode_Enum:
        return Transponder_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 34, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)

def GetRootAsTransponder_Ingest(buf:string): return Transponder_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Transponder_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(18)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idComm(idComm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idComm)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, name)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, classificationMarking)
        return this
    def add_nid(nid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, nid)
        return this
    def add_tid(tid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, tid)
        return this
    def add_ttf(ttf:float):
        b_.PrependFloat64Slot(6, ttf, 0.0)
        return this
    def add_symbolRate(symbolRate:float):
        b_.PrependFloat64Slot(7, symbolRate, 0.0)
        return this
    def add_fec(fec:int):
        b_.PrependInt32Slot(8, fec, 0)
        return this
    def add_modulation(modulation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, modulation)
        return this
    def add_format(format:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, format)
        return this
    def add_system(system:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, system)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origNetwork)
        return this
    def add_dataMode(dataMode:Transponder_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(15, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, createdBy)
        return this
    def end():
        return b_.EndObject()

