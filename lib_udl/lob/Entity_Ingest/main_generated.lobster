// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Entity_Ingest_type_Enum:
    /// No description available.
    Entity_Ingest_type_Enum_AIRCRAFT = 0
    /// No description available.
    Entity_Ingest_type_Enum_BUS = 1
    /// No description available.
    Entity_Ingest_type_Enum_COMM = 2
    /// No description available.
    Entity_Ingest_type_Enum_IR = 3
    /// No description available.
    Entity_Ingest_type_Enum_NAVIGATION = 4
    /// No description available.
    Entity_Ingest_type_Enum_ONORBIT = 5
    /// No description available.
    Entity_Ingest_type_Enum_RFEMITTER = 6
    /// No description available.
    Entity_Ingest_type_Enum_SCIENTIFIC = 7
    /// No description available.
    Entity_Ingest_type_Enum_SENSOR = 8
    /// No description available.
    Entity_Ingest_type_Enum_SITE = 9
    /// No description available.
    Entity_Ingest_type_Enum_VESSEL = 10

enum Entity_Ingest_ownerType_Enum:
    /// No description available.
    Entity_Ingest_ownerType_Enum_COMMERCIAL = 0
    /// No description available.
    Entity_Ingest_ownerType_Enum_GOVERNMENT = 1
    /// No description available.
    Entity_Ingest_ownerType_Enum_ACADEMIC = 2
    /// No description available.
    Entity_Ingest_ownerType_Enum_CONSORTIUM = 3
    /// No description available.
    Entity_Ingest_ownerType_Enum_OTHER = 4

enum Entity_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Entity_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Entity_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Entity_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Entity_Ingest_dataMode_Enum_EXERCISE = 3

class Entity_Ingest

/// /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
class Entity_Ingest : flatbuffers.handle
    /// Unique identifier of the record.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique entity name.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    /// Example: /// Example: ONORBIT
    /// Constraints: Minimum length = 1, Maximum length = 45
    def type() -> Entity_Ingest_type_Enum:
        return Entity_Ingest_type_Enum(flatbuffers.field_int8(buf_, pos_, 10, 0))
    /// Unique identifier of the entity location, if terrestrial/fixed.
    /// Example: /// Example: LOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idLocation() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 0, Maximum length = 32
    def ownerType() -> Entity_Ingest_ownerType_Enum:
        return Entity_Ingest_ownerType_Enum(flatbuffers.field_int8(buf_, pos_, 16, 0))
    /// Boolean indicating if this entity is taskable.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def taskable() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 18, 0))
    /// List of URLs to additional details/documents for this entity.
    /// Example: /// Example: ['URL1', 'URL2']
    /// Constraints: No constraints specified.
    def urls(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def urls_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Entity_Ingest_dataMode_Enum:
        return Entity_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def location() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Unique identifier of the associated operating unit object.
    /// Example: /// Example: OPERATINGUNIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOperatingUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)

def GetRootAsEntity_Ingest(buf:string): return Entity_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Entity_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(19)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idEntity)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, name)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_type(type:Entity_Ingest_type_Enum):
        b_.PrependInt8Slot(3, type, 0)
        return this
    def add_idLocation(idLocation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idLocation)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, countryCode)
        return this
    def add_ownerType(ownerType:Entity_Ingest_ownerType_Enum):
        b_.PrependInt8Slot(6, ownerType, 0)
        return this
    def add_taskable(taskable:bool):
        b_.PrependBoolSlot(7, taskable, 0)
        return this
    def add_urls(urls:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, urls)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origin)
        return this
    def add_dataMode(dataMode:Entity_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(13, dataMode, 0)
        return this
    def add_location(location:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, location)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, onOrbit)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, idOnOrbit)
        return this
    def add_idOperatingUnit(idOperatingUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, idOperatingUnit)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origNetwork)
        return this
    def end():
        return b_.EndObject()

def Entity_IngestStartUrlsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Entity_IngestCreateUrlsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

