// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AIS_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AIS_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AIS_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AIS_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AIS_Ingest_dataMode_Enum_EXERCISE = 3

class AIS_Ingest

/// /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
class AIS_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: AIS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the Track.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idTrack() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the vessel.
    /// Example: /// Example: VESSEL-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idVessel() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    /// Example: /// Example: 304010417
    /// Constraints: No constraints specified.
    def mmsi() -> int:
        return flatbuffers.field_int64(buf_, pos_, 12, 0)
    /// The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
    /// Example: /// Example: 9015462
    /// Constraints: No constraints specified.
    def imon() -> int:
        return flatbuffers.field_int64(buf_, pos_, 14, 0)
    /// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
    /// Example: /// Example: DORNUM
    /// Constraints: Minimum length = 0, Maximum length = 24
    def shipName() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
    /// Example: /// Example: Passenger
    /// Constraints: Minimum length = 0, Maximum length = 48
    def shipType() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
    /// Example: /// Example: Cargo
    /// Constraints: Minimum length = 0, Maximum length = 48
    def engagedIn() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
    /// Example: /// Example: Tug
    /// Constraints: Minimum length = 0, Maximum length = 48
    def specialCraft() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Freight
    /// Constraints: Minimum length = 0, Maximum length = 48
    def cargoType() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// A uniquely designated identifier for the vessel's transmitter station.
    /// Example: /// Example: V2OZ
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The flag of the subject vessel according to AIS transmission.
    /// Example: /// Example: United States
    /// Constraints: Minimum length = 0, Maximum length = 36
    def vesselFlag() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 47.758499
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -5.154223
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def posHiAccuracy() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def posHiLatency() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// The speed-over-ground reported by the vessel, in kilometers/hour.
    /// Example: /// Example: 10.5
    /// Constraints: No constraints specified.
    def speed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// The true heading reported by the vessel, in degrees.
    /// Example: /// Example: 329.1
    /// Constraints: No constraints specified.
    def trueHeading() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The course-over-ground reported by the vessel, in degrees.
    /// Example: /// Example: 157.1
    /// Constraints: No constraints specified.
    def course() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
    /// Example: /// Example: 22.1
    /// Constraints: No constraints specified.
    def rateOfTurn() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def specialManeuver() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 48, 0))
    /// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: Underway Using Engine
    /// Constraints: Minimum length = 0, Maximum length = 64
    def navStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 24
    def posDeviceType() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
    /// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
    /// Constraints: No constraints specified.
    def antennaRefDimensions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def antennaRefDimensions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
    /// Example: /// Example: 511.1
    /// Constraints: No constraints specified.
    def length() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
    /// Example: /// Example: 24.1
    /// Constraints: No constraints specified.
    def width() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// The maximum static draught, in meters, of the vessel according to the AIS transmission.
    /// Example: /// Example: 21.1
    /// Constraints: No constraints specified.
    def draught() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Further description or explanation of the vessel or type.
    /// Example: /// Example: Search and rescue vessels
    /// Constraints: Minimum length = 0, Maximum length = 100
    def shipDescription() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// The destination of the vessel according to the AIS transmission.
    /// Example: /// Example: USCLE
    /// Constraints: Minimum length = 0, Maximum length = 20
    def destination() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def destinationETA() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The US Geographic Unique Identifier of the current port hosting the vessel.
    /// Example: /// Example: 0ABC
    /// Constraints: Minimum length = 0, Maximum length = 4
    def currentPortGUID() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The UN Location Code of the current port hosting the vessel.
    /// Example: /// Example: XF013
    /// Constraints: Minimum length = 0, Maximum length = 5
    def currentPortLOCODE() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// The US Geographic Unique Identifier of the last port visited by the vessel.
    /// Example: /// Example: 0VAX
    /// Constraints: Minimum length = 0, Maximum length = 4
    def lastPortGUID() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// The UN Location Code of the last port visited by the vessel.
    /// Example: /// Example: USSKY
    /// Constraints: Minimum length = 0, Maximum length = 5
    def lastPortLOCODE() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The US Geographic Unique Identifier of the next destination port of the vessel.
    /// Example: /// Example: 0Z8Q
    /// Constraints: Minimum length = 0, Maximum length = 4
    def nextPortGUID() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// The UN  Location Code of the next destination port of the vessel.
    /// Example: /// Example: USCLE
    /// Constraints: Minimum length = 0, Maximum length = 5
    def nextPortLOCODE() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def etaCalculated() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def etaUpdated() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// The remaining distance, in kilometers, for the vessel to reach the reported destination.
    /// Example: /// Example: 150.5
    /// Constraints: No constraints specified.
    def distanceToGo() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// The distance, in kilometers, that the vessel has travelled since departing the last port.
    /// Example: /// Example: 200.3
    /// Constraints: No constraints specified.
    def distanceTravelled() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
    /// Example: /// Example: 12.1
    /// Constraints: No constraints specified.
    def avgSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
    /// Example: /// Example: 13.3
    /// Constraints: No constraints specified.
    def maxSpeed() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AIS_Ingest_dataMode_Enum:
        return AIS_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 102, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)

def GetRootAsAIS_Ingest(buf:string): return AIS_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AIS_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(51)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idTrack(idTrack:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idTrack)
        return this
    def add_idVessel(idVessel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idVessel)
        return this
    def add_mmsi(mmsi:int):
        b_.PrependInt64Slot(4, mmsi, 0)
        return this
    def add_imon(imon:int):
        b_.PrependInt64Slot(5, imon, 0)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, ts)
        return this
    def add_shipName(shipName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, shipName)
        return this
    def add_shipType(shipType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, shipType)
        return this
    def add_engagedIn(engagedIn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, engagedIn)
        return this
    def add_specialCraft(specialCraft:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, specialCraft)
        return this
    def add_cargoType(cargoType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, cargoType)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, callSign)
        return this
    def add_vesselFlag(vesselFlag:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, vesselFlag)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(14, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(15, lon, 0.0)
        return this
    def add_posHiAccuracy(posHiAccuracy:bool):
        b_.PrependBoolSlot(16, posHiAccuracy, 0)
        return this
    def add_posHiLatency(posHiLatency:bool):
        b_.PrependBoolSlot(17, posHiLatency, 0)
        return this
    def add_speed(speed:float):
        b_.PrependFloat64Slot(18, speed, 0.0)
        return this
    def add_trueHeading(trueHeading:float):
        b_.PrependFloat64Slot(19, trueHeading, 0.0)
        return this
    def add_course(course:float):
        b_.PrependFloat64Slot(20, course, 0.0)
        return this
    def add_rateOfTurn(rateOfTurn:float):
        b_.PrependFloat64Slot(21, rateOfTurn, 0.0)
        return this
    def add_specialManeuver(specialManeuver:bool):
        b_.PrependBoolSlot(22, specialManeuver, 0)
        return this
    def add_navStatus(navStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, navStatus)
        return this
    def add_posDeviceType(posDeviceType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, posDeviceType)
        return this
    def add_antennaRefDimensions(antennaRefDimensions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, antennaRefDimensions)
        return this
    def add_length(length:float):
        b_.PrependFloat64Slot(26, length, 0.0)
        return this
    def add_width(width:float):
        b_.PrependFloat64Slot(27, width, 0.0)
        return this
    def add_draught(draught:float):
        b_.PrependFloat64Slot(28, draught, 0.0)
        return this
    def add_shipDescription(shipDescription:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, shipDescription)
        return this
    def add_destination(destination:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, destination)
        return this
    def add_destinationETA(destinationETA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, destinationETA)
        return this
    def add_currentPortGUID(currentPortGUID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, currentPortGUID)
        return this
    def add_currentPortLOCODE(currentPortLOCODE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, currentPortLOCODE)
        return this
    def add_lastPortGUID(lastPortGUID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, lastPortGUID)
        return this
    def add_lastPortLOCODE(lastPortLOCODE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, lastPortLOCODE)
        return this
    def add_nextPortGUID(nextPortGUID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, nextPortGUID)
        return this
    def add_nextPortLOCODE(nextPortLOCODE:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, nextPortLOCODE)
        return this
    def add_etaCalculated(etaCalculated:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, etaCalculated)
        return this
    def add_etaUpdated(etaUpdated:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, etaUpdated)
        return this
    def add_distanceToGo(distanceToGo:float):
        b_.PrependFloat64Slot(40, distanceToGo, 0.0)
        return this
    def add_distanceTravelled(distanceTravelled:float):
        b_.PrependFloat64Slot(41, distanceTravelled, 0.0)
        return this
    def add_avgSpeed(avgSpeed:float):
        b_.PrependFloat64Slot(42, avgSpeed, 0.0)
        return this
    def add_maxSpeed(maxSpeed:float):
        b_.PrependFloat64Slot(43, maxSpeed, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, source)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, sourceDL)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, origin)
        return this
    def add_dataMode(dataMode:AIS_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(49, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, origNetwork)
        return this
    def end():
        return b_.EndObject()

def AIS_IngestStartAntennaRefDimensionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AIS_IngestCreateAntennaRefDimensionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

