// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Onorbit_Abridged_objectType_Enum:
    /// No description available.
    Onorbit_Abridged_objectType_Enum_ROCKET_BODY = 0
    /// No description available.
    Onorbit_Abridged_objectType_Enum_DEBRIS = 1
    /// No description available.
    Onorbit_Abridged_objectType_Enum_PAYLOAD = 2
    /// No description available.
    Onorbit_Abridged_objectType_Enum_PLATFORM = 3
    /// No description available.
    Onorbit_Abridged_objectType_Enum_MANNED = 4
    /// No description available.
    Onorbit_Abridged_objectType_Enum_UNKNOWN = 5

enum Onorbit_Abridged_category_Enum:
    /// No description available.
    Onorbit_Abridged_category_Enum_UNKNOWN = 0
    /// No description available.
    Onorbit_Abridged_category_Enum_ON_ORBIT = 1
    /// No description available.
    Onorbit_Abridged_category_Enum_DECAYED = 2
    /// No description available.
    Onorbit_Abridged_category_Enum_CATALOGED_WITHOUT_STATE = 3
    /// No description available.
    Onorbit_Abridged_category_Enum_LAUNCH_NOMINAL = 4
    /// No description available.
    Onorbit_Abridged_category_Enum_ANALYST_SATELLITE = 5
    /// No description available.
    Onorbit_Abridged_category_Enum_CISLUNAR = 6
    /// No description available.
    Onorbit_Abridged_category_Enum_LUNAR = 7
    /// No description available.
    Onorbit_Abridged_category_Enum_HYPERBOLIC = 8
    /// No description available.
    Onorbit_Abridged_category_Enum_HELIOCENTRIC = 9
    /// No description available.
    Onorbit_Abridged_category_Enum_INTERPLANETARY = 10
    /// No description available.
    Onorbit_Abridged_category_Enum_LAGRANGIAN = 11
    /// No description available.
    Onorbit_Abridged_category_Enum_DOCKED = 12

enum Onorbit_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Onorbit_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Onorbit_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Onorbit_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Onorbit_Abridged_dataMode_Enum_EXERCISE = 3

class Onorbit_Abridged

/// /// Model object representing on-orbit objects or satellites in the system.
class Onorbit_Abridged : flatbuffers.handle
    /// For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Common name of the on-orbit object.
    /// Example: /// Example: Example common name
    /// Constraints: Minimum length = 0, Maximum length = 128
    def commonName() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Constellation to which this satellite belongs.
    /// Example: /// Example: Big Dipper
    /// Constraints: Minimum length = 0, Maximum length = 128
    def constellation() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
    /// Example: /// Example: 2021123ABC
    /// Constraints: Minimum length = 0, Maximum length = 45
    def intlDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Date of launch.
    /// Example: /// Example: 2018-01-01
    /// Constraints: No constraints specified.
    def launchDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Date of decay.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def decayDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
    /// Example: /// Example: PAYLOAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objectType() -> Onorbit_Abridged_objectType_Enum:
        return Onorbit_Abridged_objectType_Enum(flatbuffers.field_int8(buf_, pos_, 20, 0))
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Mission number of the on-orbit object.
    /// Example: /// Example: Expedition 1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def missionNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
    /// Example: /// Example: Lunar
    /// Constraints: Minimum length = 0, Maximum length = 45
    def category() -> Onorbit_Abridged_category_Enum:
        return Onorbit_Abridged_category_Enum(flatbuffers.field_int8(buf_, pos_, 26, 0))
    /// Estimated lifetime of the on-orbit payload, if known.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def lifetimeYears() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Alternate name of the on-orbit object.
    /// Example: /// Example: Alternate Name
    /// Constraints: Minimum length = 0, Maximum length = 64
    def altName() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Onorbit_Abridged_dataMode_Enum:
        return Onorbit_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// Id of the associated launchSite entity.
    /// Example: /// Example: LAUNCHSITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def launchSiteId() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: No constraints specified.
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)

def GetRootAsOnorbit_Abridged(buf:string): return Onorbit_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Onorbit_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idOnOrbit)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(2, satNo, 0)
        return this
    def add_commonName(commonName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, commonName)
        return this
    def add_constellation(constellation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, constellation)
        return this
    def add_intlDes(intlDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, intlDes)
        return this
    def add_launchDate(launchDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, launchDate)
        return this
    def add_decayDate(decayDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, decayDate)
        return this
    def add_objectType(objectType:Onorbit_Abridged_objectType_Enum):
        b_.PrependInt8Slot(8, objectType, 0)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, origin)
        return this
    def add_missionNumber(missionNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, missionNumber)
        return this
    def add_category(category:Onorbit_Abridged_category_Enum):
        b_.PrependInt8Slot(11, category, 0)
        return this
    def add_lifetimeYears(lifetimeYears:int):
        b_.PrependInt32Slot(12, lifetimeYears, 0)
        return this
    def add_altName(altName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, altName)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, source)
        return this
    def add_dataMode(dataMode:Onorbit_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(17, dataMode, 0)
        return this
    def add_launchSiteId(launchSiteId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, launchSiteId)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, countryCode)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origNetwork)
        return this
    def end():
        return b_.EndObject()

