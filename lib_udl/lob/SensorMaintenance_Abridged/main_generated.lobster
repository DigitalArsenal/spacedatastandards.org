// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SensorMaintenance_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SensorMaintenance_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SensorMaintenance_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SensorMaintenance_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SensorMaintenance_Abridged_dataMode_Enum_EXERCISE = 3

class SensorMaintenance_Abridged

/// /// Maintenance schedule and operational status of Sensor.
class SensorMaintenance_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSORMAINTENANCE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
    /// Example: /// Example: site01
    /// Constraints: Minimum length = 1, Maximum length = 6
    def siteCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// UUID of the sensor.
    /// Example: /// Example: idSensor
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The planned outage start time in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The planned outage end time in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The minimum time required to recall this activity, expressed as ddd:hh:mm.
    /// Example: /// Example: 128:16:52
    /// Constraints: Minimum length = 0, Maximum length = 20
    def recall() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The duration of the planned outage, expressed as ddd:hh:mm.
    /// Example: /// Example: 128:16:52
    /// Constraints: Minimum length = 0, Maximum length = 20
    def duration() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    /// Example: /// Example: G
    /// Constraints: Minimum length = 0, Maximum length = 3
    def mwOpsCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    /// Example: /// Example: Y
    /// Constraints: Minimum length = 0, Maximum length = 3
    def ssOpsCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 3
    def mdOpsCap() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The sensor face(s) to which this COLT maintenance item applies, if applicable.
    /// Example: /// Example: impactedFaces
    /// Constraints: Minimum length = 0, Maximum length = 50
    def impactedFaces() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
    /// Example: /// Example: FMC
    /// Constraints: Minimum length = 0, Maximum length = 20
    def equipStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Description of the activity taking place during this outage.
    /// Example: /// Example: Activity Description
    /// Constraints: No constraints specified.
    def activity() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Remarks concerning this outage.
    /// Example: /// Example: Remarks
    /// Constraints: No constraints specified.
    def remark() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The name of the requestor.
    /// Example: /// Example: requestor
    /// Constraints: Minimum length = 0, Maximum length = 50
    def requestor() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The name of the changer, if applicable.
    /// Example: /// Example: changer
    /// Constraints: Minimum length = 0, Maximum length = 50
    def changer() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The name of the approver.
    /// Example: /// Example: approver
    /// Constraints: Minimum length = 0, Maximum length = 50
    def approver() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// COLT EOWID.
    /// Example: /// Example: eowId
    /// Constraints: Minimum length = 0, Maximum length = 20
    def eowId() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The revision number for this maintenance item.
    /// Example: /// Example: rev
    /// Constraints: Minimum length = 0, Maximum length = 5
    def rev() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The priority of this maintenance item.
    /// Example: /// Example: low
    /// Constraints: Minimum length = 0, Maximum length = 5
    def priority() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Release.
    /// Example: /// Example: rel
    /// Constraints: Minimum length = 0, Maximum length = 5
    def rel() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The internal COLT line number assigned to this item.
    /// Example: /// Example: lineNumber
    /// Constraints: Minimum length = 0, Maximum length = 20
    def lineNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The name of the resource(s) affected by this maintenance item.
    /// Example: /// Example: resource
    /// Constraints: Minimum length = 0, Maximum length = 255
    def resource_() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The date that this item became inactive in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def inactiveDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SensorMaintenance_Abridged_dataMode_Enum:
        return SensorMaintenance_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 62, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)

def GetRootAsSensorMaintenance_Abridged(buf:string): return SensorMaintenance_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SensorMaintenance_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(31)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_siteCode(siteCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, siteCode)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSensor)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, endTime)
        return this
    def add_recall(recall:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, recall)
        return this
    def add_duration(duration:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, duration)
        return this
    def add_mwOpsCap(mwOpsCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, mwOpsCap)
        return this
    def add_ssOpsCap(ssOpsCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, ssOpsCap)
        return this
    def add_mdOpsCap(mdOpsCap:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, mdOpsCap)
        return this
    def add_impactedFaces(impactedFaces:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, impactedFaces)
        return this
    def add_equipStatus(equipStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, equipStatus)
        return this
    def add_activity(activity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, activity)
        return this
    def add_remark(remark:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, remark)
        return this
    def add_requestor(requestor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, requestor)
        return this
    def add_changer(changer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, changer)
        return this
    def add_approver(approver:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, approver)
        return this
    def add_eowId(eowId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, eowId)
        return this
    def add_rev(rev:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, rev)
        return this
    def add_priority(priority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, priority)
        return this
    def add_rel(rel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, rel)
        return this
    def add_lineNumber(lineNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, lineNumber)
        return this
    def add_resource_(resource_:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, resource_)
        return this
    def add_inactiveDate(inactiveDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, inactiveDate)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, origin)
        return this
    def add_dataMode(dataMode:SensorMaintenance_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(29, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, origNetwork)
        return this
    def end():
        return b_.EndObject()

