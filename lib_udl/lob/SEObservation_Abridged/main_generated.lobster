// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class SEObservation_Abridged

/// /// A single space environment observation.
class SEObservation_Abridged : flatbuffers.handle
    /// The type of observation associated with this record.
    /// Example: /// Example: INTEGRAL FLUX
    /// Constraints: Minimum length = 1, Maximum length = 24
    def obType() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
    /// Example: /// Example: particles/cm^2/s/sr
    /// Constraints: Minimum length = 1, Maximum length = 32
    def obUoM() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: 0.487687826
    /// Constraints: No constraints specified.
    def obValue() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: C1.3
    /// Constraints: Minimum length = 0, Maximum length = 64
    def obString() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
    /// Constraints: No constraints specified.
    def obArray(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 12) + i * 4)
    def obArray_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 12)
    /// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def obBool() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 14, 0))
    /// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
    /// Example: /// Example: GOOD
    /// Constraints: Minimum length = 0, Maximum length = 16
    def obQuality() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Descriptive or additional information associated with this individual observation.
    /// Example: /// Example: Observation Description Text
    /// Constraints: Minimum length = 0, Maximum length = 512
    def obDescription() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)

def GetRootAsSEObservation_Abridged(buf:string): return SEObservation_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SEObservation_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(8)
        return this
    def add_obType(obType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, obType)
        return this
    def add_obUoM(obUoM:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, obUoM)
        return this
    def add_obValue(obValue:float):
        b_.PrependFloat64Slot(2, obValue, 0.0)
        return this
    def add_obString(obString:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, obString)
        return this
    def add_obArray(obArray:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, obArray)
        return this
    def add_obBool(obBool:bool):
        b_.PrependBoolSlot(5, obBool, 0)
        return this
    def add_obQuality(obQuality:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, obQuality)
        return this
    def add_obDescription(obDescription:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, obDescription)
        return this
    def end():
        return b_.EndObject()

def SEObservation_AbridgedStartObArrayVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SEObservation_AbridgedCreateObArrayVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

