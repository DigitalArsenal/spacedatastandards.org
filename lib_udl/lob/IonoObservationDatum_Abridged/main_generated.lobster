// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationDatum_Abridged

/// /// Array to support sparse data collections.
class IonoObservationDatum_Abridged : flatbuffers.handle
    /// Notes for the datum with details of what the data is, units, etc.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 512
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Array to support sparse data collections.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def data(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def data_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)

def GetRootAsIonoObservationDatum_Abridged(buf:string): return IonoObservationDatum_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationDatum_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(2)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, notes)
        return this
    def add_data(data:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, data)
        return this
    def end():
        return b_.EndObject()

def IonoObservationDatum_AbridgedStartDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationDatum_AbridgedCreateDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

