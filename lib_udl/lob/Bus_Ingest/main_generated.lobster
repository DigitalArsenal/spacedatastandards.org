// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Bus_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Bus_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Bus_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Bus_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Bus_Ingest_dataMode_Enum_EXERCISE = 3

class Bus_Ingest

/// /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
class Bus_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: BUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Name of this bus.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// ID of the parent entity for this bus.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Type of this bus.
    /// Example: /// Example: Example type
    /// Constraints: Minimum length = 0, Maximum length = 128
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Maximum mass at launch, lower bounds, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxLaunchMassLower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Maximum mass at launch, upper bounds, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxLaunchMassUpper() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Maximum mass on station at beginning of life, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxBOLStationMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Average mass available on this bus for payloads, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def avgPayloadMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Maximum payload mass available, in kilograms.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxPayloadMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Minimum mass of this bus without payloads or fuel, in kilograms.
    /// Example: /// Example: 2858.1
    /// Constraints: No constraints specified.
    def minDryMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Average mass of this bus without payloads or fuel, in kilograms.
    /// Example: /// Example: 2879.1
    /// Constraints: No constraints specified.
    def avgDryMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Median mass of this bus without payloads or fuel, in kilograms.
    /// Example: /// Example: 2950.1
    /// Constraints: No constraints specified.
    def medianDryMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Maximum mass of this bus without payloads or fuel, in kilograms.
    /// Example: /// Example: 2900.1
    /// Constraints: No constraints specified.
    def maxDryMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Minimum mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: /// Example: 5192.1
    /// Constraints: No constraints specified.
    def minWetMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Average mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: /// Example: 5246.1
    /// Constraints: No constraints specified.
    def avgWetMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Median mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: /// Example: 5260.1
    /// Constraints: No constraints specified.
    def medianWetMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Maximum mass of this bus with fuel, but without payloads, in kilograms.
    /// Example: /// Example: 5300.0
    /// Constraints: No constraints specified.
    def maxWetMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Maximum power at beginning of life, lower bounds, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxBOLPowerLower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Maximum power at beginning of life, upper bounds, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxBOLPowerUpper() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Maximum power at end of life, lower bounds, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxEOLPowerLower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Maximum power at end of life, upper bounds, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxEOLPowerUpper() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Average power available on this bus, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def avgSpacecraftPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Maximum power available on this bus, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxSpacecraftPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def oapSpacecraftPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Average power available on this bus for payloads, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def avgPayloadPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Maximum payload power available, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxPayloadPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def oapPayloadPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Body dimension in X direction pertaining to length, in meters.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def bodyDimensionX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Body dimension in Y direction pertaining to height, in meters.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def bodyDimensionY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Body dimension in Z direction pertaining to width, in meters.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def bodyDimensionZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// The radial dimension available on this bus for payloads, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def payloadDimensionX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The in-track dimension available on this bus for payloads, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def payloadDimensionY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The cross-track dimension available on this bus for payloads, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def payloadDimensionZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// The volume available on this bus for payloads, in cubic meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def payloadVolume() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Launch envelope dimension in X direction, in meters.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def launchEnvelopeDimensionX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Launch envelope dimension in Y direction, in meters.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def launchEnvelopeDimensionY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Launch envelope dimension in Z direction, in meters.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def launchEnvelopeDimensionZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// The number of orbit types this bus can support.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def numOrbitType() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
    /// Example: /// Example: ['LEO', 'HEO', 'GEO']
    /// Constraints: No constraints specified.
    def orbitTypes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 82) + i * 4)
    def orbitTypes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 82)
    /// Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
    /// Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def telemetryTrackingManufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Unique identifier of the organization which manufactures the main onboard computer for this bus.
    /// Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def mainComputerManufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Unique identifier of the organization which manufactures this bus.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Unique identifier of the organization which designs the bus kit.
    /// Example: /// Example: BUSKITDESIGNERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def busKitDesignerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
    /// Example: /// Example: Nanosatellite
    /// Constraints: Minimum length = 0, Maximum length = 64
    def massCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Power category of this bus (e.g. 0-1kW low power, etc).
    /// Example: /// Example: low power
    /// Constraints: Minimum length = 0, Maximum length = 64
    def powerCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Boolean indicating if this bus is generic.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def generic() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 98, 0))
    /// Notes/description of the bus.
    /// Example: /// Example: Dedicated small spacecraft bus.
    /// Constraints: Minimum length = 0, Maximum length = 128
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Attitude and Orbital Control Notes/description for the bus.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def aocsNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Bus_Ingest_dataMode_Enum:
        return Bus_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 110, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def entity() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)

def GetRootAsBus_Ingest(buf:string): return Bus_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Bus_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(57)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, name)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idEntity)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, type)
        return this
    def add_maxLaunchMassLower(maxLaunchMassLower:float):
        b_.PrependFloat64Slot(5, maxLaunchMassLower, 0.0)
        return this
    def add_maxLaunchMassUpper(maxLaunchMassUpper:float):
        b_.PrependFloat64Slot(6, maxLaunchMassUpper, 0.0)
        return this
    def add_maxBOLStationMass(maxBOLStationMass:float):
        b_.PrependFloat64Slot(7, maxBOLStationMass, 0.0)
        return this
    def add_avgPayloadMass(avgPayloadMass:float):
        b_.PrependFloat64Slot(8, avgPayloadMass, 0.0)
        return this
    def add_maxPayloadMass(maxPayloadMass:float):
        b_.PrependFloat64Slot(9, maxPayloadMass, 0.0)
        return this
    def add_minDryMass(minDryMass:float):
        b_.PrependFloat64Slot(10, minDryMass, 0.0)
        return this
    def add_avgDryMass(avgDryMass:float):
        b_.PrependFloat64Slot(11, avgDryMass, 0.0)
        return this
    def add_medianDryMass(medianDryMass:float):
        b_.PrependFloat64Slot(12, medianDryMass, 0.0)
        return this
    def add_maxDryMass(maxDryMass:float):
        b_.PrependFloat64Slot(13, maxDryMass, 0.0)
        return this
    def add_minWetMass(minWetMass:float):
        b_.PrependFloat64Slot(14, minWetMass, 0.0)
        return this
    def add_avgWetMass(avgWetMass:float):
        b_.PrependFloat64Slot(15, avgWetMass, 0.0)
        return this
    def add_medianWetMass(medianWetMass:float):
        b_.PrependFloat64Slot(16, medianWetMass, 0.0)
        return this
    def add_maxWetMass(maxWetMass:float):
        b_.PrependFloat64Slot(17, maxWetMass, 0.0)
        return this
    def add_maxBOLPowerLower(maxBOLPowerLower:float):
        b_.PrependFloat64Slot(18, maxBOLPowerLower, 0.0)
        return this
    def add_maxBOLPowerUpper(maxBOLPowerUpper:float):
        b_.PrependFloat64Slot(19, maxBOLPowerUpper, 0.0)
        return this
    def add_maxEOLPowerLower(maxEOLPowerLower:float):
        b_.PrependFloat64Slot(20, maxEOLPowerLower, 0.0)
        return this
    def add_maxEOLPowerUpper(maxEOLPowerUpper:float):
        b_.PrependFloat64Slot(21, maxEOLPowerUpper, 0.0)
        return this
    def add_avgSpacecraftPower(avgSpacecraftPower:float):
        b_.PrependFloat64Slot(22, avgSpacecraftPower, 0.0)
        return this
    def add_maxSpacecraftPower(maxSpacecraftPower:float):
        b_.PrependFloat64Slot(23, maxSpacecraftPower, 0.0)
        return this
    def add_oapSpacecraftPower(oapSpacecraftPower:float):
        b_.PrependFloat64Slot(24, oapSpacecraftPower, 0.0)
        return this
    def add_avgPayloadPower(avgPayloadPower:float):
        b_.PrependFloat64Slot(25, avgPayloadPower, 0.0)
        return this
    def add_maxPayloadPower(maxPayloadPower:float):
        b_.PrependFloat64Slot(26, maxPayloadPower, 0.0)
        return this
    def add_oapPayloadPower(oapPayloadPower:float):
        b_.PrependFloat64Slot(27, oapPayloadPower, 0.0)
        return this
    def add_bodyDimensionX(bodyDimensionX:float):
        b_.PrependFloat64Slot(28, bodyDimensionX, 0.0)
        return this
    def add_bodyDimensionY(bodyDimensionY:float):
        b_.PrependFloat64Slot(29, bodyDimensionY, 0.0)
        return this
    def add_bodyDimensionZ(bodyDimensionZ:float):
        b_.PrependFloat64Slot(30, bodyDimensionZ, 0.0)
        return this
    def add_payloadDimensionX(payloadDimensionX:float):
        b_.PrependFloat64Slot(31, payloadDimensionX, 0.0)
        return this
    def add_payloadDimensionY(payloadDimensionY:float):
        b_.PrependFloat64Slot(32, payloadDimensionY, 0.0)
        return this
    def add_payloadDimensionZ(payloadDimensionZ:float):
        b_.PrependFloat64Slot(33, payloadDimensionZ, 0.0)
        return this
    def add_payloadVolume(payloadVolume:float):
        b_.PrependFloat64Slot(34, payloadVolume, 0.0)
        return this
    def add_launchEnvelopeDimensionX(launchEnvelopeDimensionX:float):
        b_.PrependFloat64Slot(35, launchEnvelopeDimensionX, 0.0)
        return this
    def add_launchEnvelopeDimensionY(launchEnvelopeDimensionY:float):
        b_.PrependFloat64Slot(36, launchEnvelopeDimensionY, 0.0)
        return this
    def add_launchEnvelopeDimensionZ(launchEnvelopeDimensionZ:float):
        b_.PrependFloat64Slot(37, launchEnvelopeDimensionZ, 0.0)
        return this
    def add_numOrbitType(numOrbitType:int):
        b_.PrependInt32Slot(38, numOrbitType, 0)
        return this
    def add_orbitTypes(orbitTypes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, orbitTypes)
        return this
    def add_telemetryTrackingManufacturerOrgId(telemetryTrackingManufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, telemetryTrackingManufacturerOrgId)
        return this
    def add_mainComputerManufacturerOrgId(mainComputerManufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, mainComputerManufacturerOrgId)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, manufacturerOrgId)
        return this
    def add_busKitDesignerOrgId(busKitDesignerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, busKitDesignerOrgId)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, countryCode)
        return this
    def add_massCategory(massCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, massCategory)
        return this
    def add_powerCategory(powerCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, powerCategory)
        return this
    def add_generic(generic:bool):
        b_.PrependBoolSlot(47, generic, 0)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, description)
        return this
    def add_aocsNotes(aocsNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, aocsNotes)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, origNetwork)
        return this
    def add_dataMode(dataMode:Bus_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(53, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, createdBy)
        return this
    def add_entity(entity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, entity)
        return this
    def end():
        return b_.EndObject()

def Bus_IngestStartOrbitTypesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Bus_IngestCreateOrbitTypesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

