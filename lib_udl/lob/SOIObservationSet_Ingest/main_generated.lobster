// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SOIObservationSet_Ingest_type_Enum:
    /// No description available.
    SOIObservationSet_Ingest_type_Enum_OPTICAL = 0
    /// No description available.
    SOIObservationSet_Ingest_type_Enum_RADAR = 1

enum SOIObservationSet_Ingest_referenceFrame_Enum:
    /// No description available.
    SOIObservationSet_Ingest_referenceFrame_Enum_J2000 = 0
    /// No description available.
    SOIObservationSet_Ingest_referenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    SOIObservationSet_Ingest_referenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    SOIObservationSet_Ingest_referenceFrame_Enum_TEME = 3
    /// No description available.
    SOIObservationSet_Ingest_referenceFrame_Enum_ITRF = 4
    /// No description available.
    SOIObservationSet_Ingest_referenceFrame_Enum_GCRF = 5

enum SOIObservationSet_Ingest_senReferenceFrame_Enum:
    /// No description available.
    SOIObservationSet_Ingest_senReferenceFrame_Enum_J2000 = 0
    /// No description available.
    SOIObservationSet_Ingest_senReferenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    SOIObservationSet_Ingest_senReferenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    SOIObservationSet_Ingest_senReferenceFrame_Enum_TEME = 3
    /// No description available.
    SOIObservationSet_Ingest_senReferenceFrame_Enum_ITRF = 4
    /// No description available.
    SOIObservationSet_Ingest_senReferenceFrame_Enum_GCRF = 5

enum SOIObservationSet_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SOIObservationSet_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SOIObservationSet_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SOIObservationSet_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SOIObservationSet_Ingest_dataMode_Enum_EXERCISE = 3

class SOIObservationSet_Ingest

/// /// These services provide operations for posting space object idenfification observation sets.
class SOIObservationSet_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
    /// Example: /// Example: 2022-07-07T16:00:00.123Z
    /// Constraints: No constraints specified.
    def msgCreateDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// ID of the observing sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// ID of the AttitudeSet record for the observing sensor.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 0, Maximum length = 36
    def sensorAsId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Sensor altitude at startTime (if mobile/onorbit) in kilometers.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def seny() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvelx() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvely() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senvelz() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// ID of the UDL Elset of the Space Object under observation.
    /// Example: /// Example: REF-ELSET-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Observation set detection start time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Observation set detection end time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The number of observation records in the set.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numObs() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// Observation type (OPTICAL, RADAR).
    /// Example: /// Example: OPTICAL
    /// Constraints: Minimum length = 1, Maximum length = 24
    def type() -> SOIObservationSet_Ingest_type_Enum:
        return SOIObservationSet_Ingest_type_Enum(flatbuffers.field_int8(buf_, pos_, 48, 0))
    /// Polar angle of the gimbal/mount at observation set detection start time in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def polarAngleStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Polar angle of the gimbal/mount at observation set detection end time in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def polarAngleEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def referenceFrame() -> SOIObservationSet_Ingest_referenceFrame_Enum:
        return SOIObservationSet_Ingest_referenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 54, 0))
    /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def senReferenceFrame() -> SOIObservationSet_Ingest_senReferenceFrame_Enum:
        return SOIObservationSet_Ingest_senReferenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 56, 0))
    /// Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losDeclinationStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def losDeclinationEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def pointingAngleAzStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def pointingAngleAzEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def pointingAngleElStart() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def pointingAngleElEnd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Pixel array size (width) in pixels.
    /// Example: /// Example: 32
    /// Constraints: No constraints specified.
    def pixelArrayWidth() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// Pixel array size (height) in pixels.
    /// Example: /// Example: 32
    /// Constraints: No constraints specified.
    def pixelArrayHeight() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// The value is the number of spectral filters used.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numSpectralFilters() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    /// Example: /// Example: ['Keyword1', 'Keyword2']
    /// Constraints: No constraints specified.
    def spectralFilters(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 76) + i * 4)
    def spectralFilters_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 76)
    /// Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    /// Example: /// Example: RATE TRACK
    /// Constraints: Minimum length = 0, Maximum length = 32
    def collectionMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
    /// Example: /// Example: 234.2
    /// Constraints: No constraints specified.
    def gain() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// The number of pixels binned horizontally.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def binningHoriz() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// The number of pixels binned vertically.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def binningVert() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// The in-band solar magnitude at 1 A.U.
    /// Example: /// Example: -26.91
    /// Constraints: No constraints specified.
    def solarMag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// The minimum valid pixel value.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def pixelMin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 88, 0)
    /// The maximum valid pixel value.
    /// Example: /// Example: 16383
    /// Constraints: No constraints specified.
    def pixelMax() -> int:
        return flatbuffers.field_int32(buf_, pos_, 90, 0)
    /// Software Version used to Capture, Process, and Deliver the data.
    /// Example: /// Example: GSV99/17-1
    /// Constraints: Minimum length = 0, Maximum length = 70
    def softwareVersion() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Name of the target satellite.
    /// Example: /// Example: TITAN 3C TRANSTAGE R/B
    /// Constraints: Minimum length = 0, Maximum length = 70
    def satelliteName() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Name of the Star Catalog used for photometry and astrometry.
    /// Example: /// Example: SSTRC5
    /// Constraints: Minimum length = 0, Maximum length = 70
    def starCatName() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
    /// Example: /// Example: 0.327
    /// Constraints: No constraints specified.
    def corrQuality() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 100, 0))
    /// Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
    /// Example: /// Example: BOTH
    /// Constraints: Minimum length = 0, Maximum length = 16
    def validCalibrations() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
    /// Example: /// Example: ALL SKY
    /// Constraints: Minimum length = 0, Maximum length = 32
    def calibrationType() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def percentSatThreshold() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Boolean indicating if any change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def changeDetected() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 108, 0))
    /// Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def periodicityChangeDetected() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 110, 0))
    /// Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def brightnessVarianceChangeDetected() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 112, 0))
    /// Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def solarPhaseAngleBrightnessChangeDetected() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 114, 0))
    /// Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def changeConf() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def collectionDensityConf() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def periodicitySamplingConf() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
    /// Example: /// Example: MEDIUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def periodicityDetectionConf() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
    /// Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
    /// Constraints: Minimum length = 0, Maximum length = 36
    def collectionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Array of SOI Calibrations associated with this SOIObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def calibrations(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 126) + i * 4)
    def calibrations_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 126)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 128) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 128)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// OpticalSOIObservations associated with this SOIObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def opticalSOIObservationList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 132) + i * 4)
    def opticalSOIObservationList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 132)
    /// RadarSOIObservations associated with this RadarSOIObservationSet.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def radarSOIObservationList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 134) + i * 4)
    def radarSOIObservationList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 134)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 142)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 146)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SOIObservationSet_Ingest_dataMode_Enum:
        return SOIObservationSet_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 148, 0))

def GetRootAsSOIObservationSet_Ingest(buf:string): return SOIObservationSet_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct SOIObservationSet_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(73)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_msgCreateDate(msgCreateDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, msgCreateDate)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origSensorId)
        return this
    def add_sensorAsId(sensorAsId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, sensorAsId)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(7, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origObjectId)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(9, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(10, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(11, senalt, 0.0)
        return this
    def add_senx(senx:float):
        b_.PrependFloat64Slot(12, senx, 0.0)
        return this
    def add_seny(seny:float):
        b_.PrependFloat64Slot(13, seny, 0.0)
        return this
    def add_senz(senz:float):
        b_.PrependFloat64Slot(14, senz, 0.0)
        return this
    def add_senvelx(senvelx:float):
        b_.PrependFloat64Slot(15, senvelx, 0.0)
        return this
    def add_senvely(senvely:float):
        b_.PrependFloat64Slot(16, senvely, 0.0)
        return this
    def add_senvelz(senvelz:float):
        b_.PrependFloat64Slot(17, senvelz, 0.0)
        return this
    def add_idElset(idElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, idElset)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, endTime)
        return this
    def add_numObs(numObs:int):
        b_.PrependInt32Slot(21, numObs, 0)
        return this
    def add_type(type:SOIObservationSet_Ingest_type_Enum):
        b_.PrependInt8Slot(22, type, 0)
        return this
    def add_polarAngleStart(polarAngleStart:float):
        b_.PrependFloat64Slot(23, polarAngleStart, 0.0)
        return this
    def add_polarAngleEnd(polarAngleEnd:float):
        b_.PrependFloat64Slot(24, polarAngleEnd, 0.0)
        return this
    def add_referenceFrame(referenceFrame:SOIObservationSet_Ingest_referenceFrame_Enum):
        b_.PrependInt8Slot(25, referenceFrame, 0)
        return this
    def add_senReferenceFrame(senReferenceFrame:SOIObservationSet_Ingest_senReferenceFrame_Enum):
        b_.PrependInt8Slot(26, senReferenceFrame, 0)
        return this
    def add_losDeclinationStart(losDeclinationStart:float):
        b_.PrependFloat64Slot(27, losDeclinationStart, 0.0)
        return this
    def add_losDeclinationEnd(losDeclinationEnd:float):
        b_.PrependFloat64Slot(28, losDeclinationEnd, 0.0)
        return this
    def add_pointingAngleAzStart(pointingAngleAzStart:float):
        b_.PrependFloat64Slot(29, pointingAngleAzStart, 0.0)
        return this
    def add_pointingAngleAzEnd(pointingAngleAzEnd:float):
        b_.PrependFloat64Slot(30, pointingAngleAzEnd, 0.0)
        return this
    def add_pointingAngleElStart(pointingAngleElStart:float):
        b_.PrependFloat64Slot(31, pointingAngleElStart, 0.0)
        return this
    def add_pointingAngleElEnd(pointingAngleElEnd:float):
        b_.PrependFloat64Slot(32, pointingAngleElEnd, 0.0)
        return this
    def add_pixelArrayWidth(pixelArrayWidth:int):
        b_.PrependInt32Slot(33, pixelArrayWidth, 0)
        return this
    def add_pixelArrayHeight(pixelArrayHeight:int):
        b_.PrependInt32Slot(34, pixelArrayHeight, 0)
        return this
    def add_numSpectralFilters(numSpectralFilters:int):
        b_.PrependInt32Slot(35, numSpectralFilters, 0)
        return this
    def add_spectralFilters(spectralFilters:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, spectralFilters)
        return this
    def add_collectionMode(collectionMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, collectionMode)
        return this
    def add_gain(gain:float):
        b_.PrependFloat64Slot(38, gain, 0.0)
        return this
    def add_binningHoriz(binningHoriz:int):
        b_.PrependInt32Slot(39, binningHoriz, 0)
        return this
    def add_binningVert(binningVert:int):
        b_.PrependInt32Slot(40, binningVert, 0)
        return this
    def add_solarMag(solarMag:float):
        b_.PrependFloat64Slot(41, solarMag, 0.0)
        return this
    def add_pixelMin(pixelMin:int):
        b_.PrependInt32Slot(42, pixelMin, 0)
        return this
    def add_pixelMax(pixelMax:int):
        b_.PrependInt32Slot(43, pixelMax, 0)
        return this
    def add_softwareVersion(softwareVersion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, softwareVersion)
        return this
    def add_satelliteName(satelliteName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, satelliteName)
        return this
    def add_starCatName(starCatName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, starCatName)
        return this
    def add_corrQuality(corrQuality:float):
        b_.PrependFloat64Slot(47, corrQuality, 0.0)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(48, uct, 0)
        return this
    def add_validCalibrations(validCalibrations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, validCalibrations)
        return this
    def add_calibrationType(calibrationType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, calibrationType)
        return this
    def add_percentSatThreshold(percentSatThreshold:float):
        b_.PrependFloat64Slot(51, percentSatThreshold, 0.0)
        return this
    def add_changeDetected(changeDetected:bool):
        b_.PrependBoolSlot(52, changeDetected, 0)
        return this
    def add_periodicityChangeDetected(periodicityChangeDetected:bool):
        b_.PrependBoolSlot(53, periodicityChangeDetected, 0)
        return this
    def add_brightnessVarianceChangeDetected(brightnessVarianceChangeDetected:bool):
        b_.PrependBoolSlot(54, brightnessVarianceChangeDetected, 0)
        return this
    def add_solarPhaseAngleBrightnessChangeDetected(solarPhaseAngleBrightnessChangeDetected:bool):
        b_.PrependBoolSlot(55, solarPhaseAngleBrightnessChangeDetected, 0)
        return this
    def add_changeConf(changeConf:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, changeConf)
        return this
    def add_collectionDensityConf(collectionDensityConf:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, collectionDensityConf)
        return this
    def add_periodicitySamplingConf(periodicitySamplingConf:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, periodicitySamplingConf)
        return this
    def add_periodicityDetectionConf(periodicityDetectionConf:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, periodicityDetectionConf)
        return this
    def add_collectionId(collectionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, collectionId)
        return this
    def add_calibrations(calibrations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, calibrations)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, tags)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, transactionId)
        return this
    def add_opticalSOIObservationList(opticalSOIObservationList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, opticalSOIObservationList)
        return this
    def add_radarSOIObservationList(radarSOIObservationList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, radarSOIObservationList)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(69, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(71, sourceDL)
        return this
    def add_dataMode(dataMode:SOIObservationSet_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(72, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def SOIObservationSet_IngestStartSpectralFiltersVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SOIObservationSet_IngestCreateSpectralFiltersVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SOIObservationSet_IngestStartCalibrationsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SOIObservationSet_IngestCreateCalibrationsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SOIObservationSet_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SOIObservationSet_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SOIObservationSet_IngestStartOpticalSOIObservationListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SOIObservationSet_IngestCreateOpticalSOIObservationListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SOIObservationSet_IngestStartRadarSOIObservationListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SOIObservationSet_IngestCreateRadarSOIObservationListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

