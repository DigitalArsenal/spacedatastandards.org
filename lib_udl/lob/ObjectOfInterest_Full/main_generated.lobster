// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum ObjectOfInterest_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    ObjectOfInterest_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    ObjectOfInterest_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    ObjectOfInterest_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    ObjectOfInterest_Full_dataMode_Enum_EXERCISE = 3

class ObjectOfInterest_Full

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
class ObjectOfInterest_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: OBJECTOFINTEREST-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// UUID of the parent Onorbit record.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Unique name of the object of interest event.
    /// Example: /// Example: Example_name
    /// Constraints: Minimum length = 0, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Sensor tasking start time for object of interest.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def sensorTaskingStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Sensor tasking stop time for object of interest.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def sensorTaskingStopTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Priority of the object of interest as an integer (1=highest priority).
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def priority() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
    /// Example: /// Example: OPEN
    /// Constraints: Minimum length = 0, Maximum length = 16
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time of last status change of the object of interest event.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def statusDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Description of the object of interest event.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def lastObTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def missedObTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Possible delta V applications for the object of interest, in km/sec.
    /// Example: /// Example: [1.1, 2.2, 3.3]
    /// Constraints: No constraints specified.
    def deltaVs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def deltaVs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Possible delta time applications for the object of interest, in seconds.
    /// Example: /// Example: [1.1, 2.2, 3.3]
    /// Constraints: No constraints specified.
    def deltaTs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def deltaTs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def svEpoch() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Last reported x position of the object in km, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def x() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Last reported y position of the object in km, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def y() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Last reported z position of the object in km, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def z() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Last reported x velocity of the object in km/sec, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def xvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Last reported y velocity of the object in km/sec, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def yvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Last reported z velocity of the object in km/sec, in J2000 coordinates.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def zvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def elsetEpoch() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def meanMotion() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def eccentricity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def inclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def raan() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def argOfPerigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def meanAnomaly() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def revNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def bStar() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def meanMotionDot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def meanMotionDDot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def semiMajorAxis() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def period() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def apogee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def perigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
    /// Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
    /// Constraints: No constraints specified.
    def affectedObjects(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 78) + i * 4)
    def affectedObjects_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 78)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> ObjectOfInterest_Full_dataMode_Enum:
        return ObjectOfInterest_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 94, 0))
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Manifolds associated with this object of interest.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def manifolds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 98) + i * 4)
    def manifolds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 98)

def GetRootAsObjectOfInterest_Full(buf:string): return ObjectOfInterest_Full { buf, flatbuffers.indirect(buf, 0) }

struct ObjectOfInterest_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(48)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, name)
        return this
    def add_sensorTaskingStartTime(sensorTaskingStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, sensorTaskingStartTime)
        return this
    def add_sensorTaskingStopTime(sensorTaskingStopTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, sensorTaskingStopTime)
        return this
    def add_priority(priority:int):
        b_.PrependInt32Slot(7, priority, 0)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, status)
        return this
    def add_statusDate(statusDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, statusDate)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, description)
        return this
    def add_lastObTime(lastObTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, lastObTime)
        return this
    def add_missedObTime(missedObTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, missedObTime)
        return this
    def add_deltaVs(deltaVs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, deltaVs)
        return this
    def add_deltaTs(deltaTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, deltaTs)
        return this
    def add_svEpoch(svEpoch:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, svEpoch)
        return this
    def add_x(x:float):
        b_.PrependFloat64Slot(16, x, 0.0)
        return this
    def add_y(y:float):
        b_.PrependFloat64Slot(17, y, 0.0)
        return this
    def add_z(z:float):
        b_.PrependFloat64Slot(18, z, 0.0)
        return this
    def add_xvel(xvel:float):
        b_.PrependFloat64Slot(19, xvel, 0.0)
        return this
    def add_yvel(yvel:float):
        b_.PrependFloat64Slot(20, yvel, 0.0)
        return this
    def add_zvel(zvel:float):
        b_.PrependFloat64Slot(21, zvel, 0.0)
        return this
    def add_elsetEpoch(elsetEpoch:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, elsetEpoch)
        return this
    def add_meanMotion(meanMotion:float):
        b_.PrependFloat64Slot(23, meanMotion, 0.0)
        return this
    def add_eccentricity(eccentricity:float):
        b_.PrependFloat64Slot(24, eccentricity, 0.0)
        return this
    def add_inclination(inclination:float):
        b_.PrependFloat64Slot(25, inclination, 0.0)
        return this
    def add_raan(raan:float):
        b_.PrependFloat64Slot(26, raan, 0.0)
        return this
    def add_argOfPerigee(argOfPerigee:float):
        b_.PrependFloat64Slot(27, argOfPerigee, 0.0)
        return this
    def add_meanAnomaly(meanAnomaly:float):
        b_.PrependFloat64Slot(28, meanAnomaly, 0.0)
        return this
    def add_revNo(revNo:int):
        b_.PrependInt32Slot(29, revNo, 0)
        return this
    def add_bStar(bStar:float):
        b_.PrependFloat64Slot(30, bStar, 0.0)
        return this
    def add_meanMotionDot(meanMotionDot:float):
        b_.PrependFloat64Slot(31, meanMotionDot, 0.0)
        return this
    def add_meanMotionDDot(meanMotionDDot:float):
        b_.PrependFloat64Slot(32, meanMotionDDot, 0.0)
        return this
    def add_semiMajorAxis(semiMajorAxis:float):
        b_.PrependFloat64Slot(33, semiMajorAxis, 0.0)
        return this
    def add_period(period:float):
        b_.PrependFloat64Slot(34, period, 0.0)
        return this
    def add_apogee(apogee:float):
        b_.PrependFloat64Slot(35, apogee, 0.0)
        return this
    def add_perigee(perigee:float):
        b_.PrependFloat64Slot(36, perigee, 0.0)
        return this
    def add_affectedObjects(affectedObjects:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, affectedObjects)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, origNetwork)
        return this
    def add_dataMode(dataMode:ObjectOfInterest_Full_dataMode_Enum):
        b_.PrependInt8Slot(45, dataMode, 0)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, onOrbit)
        return this
    def add_manifolds(manifolds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, manifolds)
        return this
    def end():
        return b_.EndObject()

def ObjectOfInterest_FullStartDeltaVsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ObjectOfInterest_FullCreateDeltaVsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ObjectOfInterest_FullStartDeltaTsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ObjectOfInterest_FullCreateDeltaTsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ObjectOfInterest_FullStartAffectedObjectsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ObjectOfInterest_FullCreateAffectedObjectsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ObjectOfInterest_FullStartManifoldsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ObjectOfInterest_FullCreateManifoldsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

