// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AircraftStatus_Ingest_airToAirStatus_Enum:
    /// No description available.
    AircraftStatus_Ingest_airToAirStatus_Enum_OPERATIONAL = 0
    /// No description available.
    AircraftStatus_Ingest_airToAirStatus_Enum_NON_OPERATIONAL = 1
    /// No description available.
    AircraftStatus_Ingest_airToAirStatus_Enum_OFF = 2

enum AircraftStatus_Ingest_airToGroundStatus_Enum:
    /// No description available.
    AircraftStatus_Ingest_airToGroundStatus_Enum_OPERATIONAL = 0
    /// No description available.
    AircraftStatus_Ingest_airToGroundStatus_Enum_NON_OPERATIONAL = 1
    /// No description available.
    AircraftStatus_Ingest_airToGroundStatus_Enum_OFF = 2

enum AircraftStatus_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AircraftStatus_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AircraftStatus_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AircraftStatus_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AircraftStatus_Ingest_dataMode_Enum_EXERCISE = 3

class AircraftStatus_Ingest

/// /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
class AircraftStatus_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the aircraft.
    /// Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idAircraft() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Alternate Aircraft Identifier provided by source.
    /// Example: /// Example: ORIG-AIRCRAFT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altAircraftId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
    /// Example: /// Example: AVAILABLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def currentState() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// If not airborne, the unique identifier of the installation currently hosting the aircraft.
    /// Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// US Air Force geographic location code of the airfield where the aircraft is located.
    /// Example: /// Example: AJJY
    /// Constraints: Minimum length = 0, Maximum length = 16
    def geoLoc() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
    /// Example: /// Example: EGLL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def previousICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
    /// Example: /// Example: KCHS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def currentICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
    /// Example: /// Example: PHNL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def nextICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
    /// Example: /// Example: Landing
    /// Constraints: Minimum length = 0, Maximum length = 16
    def flightPhase() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def taStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def earliestTAEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
    /// Example: /// Example: ABLE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def missionReadiness() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The mass of fuel remaining on the aircraft, in kilograms.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def fuel() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Used in conjunction with the fuel field to indicate either burnable or offload fuel.
    /// Example: /// Example: Burn
    /// Constraints: Minimum length = 0, Maximum length = 8
    def fuelFunction() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Flag indicating that the aircraft is capable of making at least one gun pass.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def gunCapable() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
    /// Example: /// Example: 7.62 MM
    /// Constraints: Minimum length = 0, Maximum length = 64
    def gunRdsType() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The lower bound of the estimated number of gun rounds available.
    /// Example: /// Example: 150
    /// Constraints: No constraints specified.
    def gunRdsMin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// The upper bound of the estimated number of gun rounds available.
    /// Example: /// Example: 550
    /// Constraints: No constraints specified.
    def gunRdsMax() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
    /// Example: /// Example: OPERATIONAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    def airToAirStatus() -> AircraftStatus_Ingest_airToAirStatus_Enum:
        return AircraftStatus_Ingest_airToAirStatus_Enum(flatbuffers.field_int8(buf_, pos_, 44, 0))
    /// The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
    /// Example: /// Example: OPERATIONAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    def airToGroundStatus() -> AircraftStatus_Ingest_airToGroundStatus_Enum:
        return AircraftStatus_Ingest_airToGroundStatus_Enum(flatbuffers.field_int8(buf_, pos_, 46, 0))
    /// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
    /// Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
    /// Constraints: No constraints specified.
    def inventory(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def inventory_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
    /// Example: /// Example: [1, 2]
    /// Constraints: No constraints specified.
    def inventoryMin(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def inventoryMin_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
    /// Example: /// Example: [2, 2]
    /// Constraints: No constraints specified.
    def inventoryMax(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 52) + i * 4)
    def inventoryMax_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 52)
    /// List of unavailable systems that would normally be on this aircraft.
    /// Example: /// Example: ['CMDS', 'AOC']
    /// Constraints: No constraints specified.
    def unavailableSys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def unavailableSys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// List of additional operational systems on this aircraft beyond what is normally available.
    /// Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
    /// Constraints: No constraints specified.
    def additionalSys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def additionalSys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)
    /// Optional notes/comments concerning this aircraft status.
    /// Example: /// Example: Some notes for aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Maintenance pacing remarks assocociated with this aircraft.
    /// Example: /// Example: COM2 INOP
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def mxRemark() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// The maintenance status of the aircraft.
    /// Example: /// Example: maintenance status
    /// Constraints: Minimum length = 0, Maximum length = 24
    def maintStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Indicates the maintenance discrepancy that drives the current maintenance status.
    /// Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def maintStatusDriver() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Indicates the priority of the maintenance effort.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    def maintPriority() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
    /// Example: /// Example: A2
    /// Constraints: Minimum length = 0, Maximum length = 2
    def alphaStatusCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def maintStatusUpdate() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-09-09T16:00:00.123Z
    /// Constraints: No constraints specified.
    def lastInspectionDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Military aircraft maintenance point of contact for this aircraft.
    /// Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
    /// Constraints: Minimum length = 0, Maximum length = 32
    def maintPoc() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
    /// Example: /// Example: ALERT
    /// Constraints: Minimum length = 0, Maximum length = 24
    def groundStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
    /// Example: /// Example: CLEAR
    /// Constraints: Minimum length = 0, Maximum length = 24
    def contaminationStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
    /// Example: /// Example: DELIVERED
    /// Constraints: Minimum length = 0, Maximum length = 24
    def fuelStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// The name or ID of the external user that updated this status.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 36
    def lastUpdatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def troubleshootEtic() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def etic() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// The parking location of this aircraft.
    /// Example: /// Example: B1
    /// Constraints: Minimum length = 0, Maximum length = 24
    def parkLocation() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
    /// Example: /// Example: GDSS
    /// Constraints: Minimum length = 0, Maximum length = 24
    def parkLocationSystem() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
    /// Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idPOI() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AircraftStatus_Ingest_dataMode_Enum:
        return AircraftStatus_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 104, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)

def GetRootAsAircraftStatus_Ingest(buf:string): return AircraftStatus_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AircraftStatus_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(52)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idAircraft(idAircraft:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idAircraft)
        return this
    def add_altAircraftId(altAircraftId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, altAircraftId)
        return this
    def add_currentState(currentState:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, currentState)
        return this
    def add_idAirfield(idAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idAirfield)
        return this
    def add_geoLoc(geoLoc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, geoLoc)
        return this
    def add_previousICAO(previousICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, previousICAO)
        return this
    def add_currentICAO(currentICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, currentICAO)
        return this
    def add_nextICAO(nextICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, nextICAO)
        return this
    def add_flightPhase(flightPhase:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, flightPhase)
        return this
    def add_taStartTime(taStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, taStartTime)
        return this
    def add_earliestTAEndTime(earliestTAEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, earliestTAEndTime)
        return this
    def add_missionReadiness(missionReadiness:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, missionReadiness)
        return this
    def add_fuel(fuel:int):
        b_.PrependInt32Slot(14, fuel, 0)
        return this
    def add_fuelFunction(fuelFunction:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, fuelFunction)
        return this
    def add_gunCapable(gunCapable:bool):
        b_.PrependBoolSlot(16, gunCapable, 0)
        return this
    def add_gunRdsType(gunRdsType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, gunRdsType)
        return this
    def add_gunRdsMin(gunRdsMin:int):
        b_.PrependInt32Slot(18, gunRdsMin, 0)
        return this
    def add_gunRdsMax(gunRdsMax:int):
        b_.PrependInt32Slot(19, gunRdsMax, 0)
        return this
    def add_airToAirStatus(airToAirStatus:AircraftStatus_Ingest_airToAirStatus_Enum):
        b_.PrependInt8Slot(20, airToAirStatus, 0)
        return this
    def add_airToGroundStatus(airToGroundStatus:AircraftStatus_Ingest_airToGroundStatus_Enum):
        b_.PrependInt8Slot(21, airToGroundStatus, 0)
        return this
    def add_inventory(inventory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, inventory)
        return this
    def add_inventoryMin(inventoryMin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, inventoryMin)
        return this
    def add_inventoryMax(inventoryMax:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, inventoryMax)
        return this
    def add_unavailableSys(unavailableSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, unavailableSys)
        return this
    def add_additionalSys(additionalSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, additionalSys)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, notes)
        return this
    def add_mxRemark(mxRemark:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, mxRemark)
        return this
    def add_maintStatus(maintStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, maintStatus)
        return this
    def add_maintStatusDriver(maintStatusDriver:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, maintStatusDriver)
        return this
    def add_maintPriority(maintPriority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, maintPriority)
        return this
    def add_alphaStatusCode(alphaStatusCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, alphaStatusCode)
        return this
    def add_maintStatusUpdate(maintStatusUpdate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, maintStatusUpdate)
        return this
    def add_lastInspectionDate(lastInspectionDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, lastInspectionDate)
        return this
    def add_maintPoc(maintPoc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, maintPoc)
        return this
    def add_groundStatus(groundStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, groundStatus)
        return this
    def add_contaminationStatus(contaminationStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, contaminationStatus)
        return this
    def add_fuelStatus(fuelStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, fuelStatus)
        return this
    def add_lastUpdatedBy(lastUpdatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, lastUpdatedBy)
        return this
    def add_troubleshootEtic(troubleshootEtic:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, troubleshootEtic)
        return this
    def add_etic(etic:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, etic)
        return this
    def add_parkLocation(parkLocation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, parkLocation)
        return this
    def add_parkLocationSystem(parkLocationSystem:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, parkLocationSystem)
        return this
    def add_idPOI(idPOI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, idPOI)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, origin)
        return this
    def add_dataMode(dataMode:AircraftStatus_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(50, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, origNetwork)
        return this
    def end():
        return b_.EndObject()

def AircraftStatus_IngestStartInventoryVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftStatus_IngestCreateInventoryVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftStatus_IngestStartInventoryMinVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftStatus_IngestCreateInventoryMinVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftStatus_IngestStartInventoryMaxVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftStatus_IngestCreateInventoryMaxVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftStatus_IngestStartUnavailableSysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftStatus_IngestCreateUnavailableSysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AircraftStatus_IngestStartAdditionalSysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AircraftStatus_IngestCreateAdditionalSysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

