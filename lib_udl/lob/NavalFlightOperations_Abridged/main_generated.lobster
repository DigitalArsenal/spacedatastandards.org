// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class NavalFlightOperations_Abridged

/// /// Collection that specifies the naval flight operations for this ATO.
class NavalFlightOperations_Abridged : flatbuffers.handle
    /// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
    /// Example: /// Example: USS WASP
    /// Constraints: Minimum length = 1, Maximum length = 48
    def shipName() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def fltOpStart() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The time when flight operations end in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def fltOpStop() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
    /// Example: /// Example: ['2021-02-25T12:00:00.123Z']
    /// Constraints: No constraints specified.
    def schdLaunchRcvyTime(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def schdLaunchRcvyTime_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)

def GetRootAsNavalFlightOperations_Abridged(buf:string): return NavalFlightOperations_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct NavalFlightOperations_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_shipName(shipName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, shipName)
        return this
    def add_fltOpStart(fltOpStart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, fltOpStart)
        return this
    def add_fltOpStop(fltOpStop:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, fltOpStop)
        return this
    def add_schdLaunchRcvyTime(schdLaunchRcvyTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, schdLaunchRcvyTime)
        return this
    def end():
        return b_.EndObject()

def NavalFlightOperations_AbridgedStartSchdLaunchRcvyTimeVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def NavalFlightOperations_AbridgedCreateSchdLaunchRcvyTimeVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

