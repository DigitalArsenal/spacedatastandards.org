// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SubStatus_Abridged_type_Enum:
    /// No description available.
    SubStatus_Abridged_type_Enum_MWCAP = 0
    /// No description available.
    SubStatus_Abridged_type_Enum_SSCAP = 1
    /// No description available.
    SubStatus_Abridged_type_Enum_MDCAP = 2

enum SubStatus_Abridged_status_Enum:
    /// No description available.
    SubStatus_Abridged_status_Enum_FMC = 0
    /// No description available.
    SubStatus_Abridged_status_Enum_NMC = 1
    /// No description available.
    SubStatus_Abridged_status_Enum_PMC = 2
    /// No description available.
    SubStatus_Abridged_status_Enum_UNK = 3

enum SubStatus_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SubStatus_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SubStatus_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SubStatus_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SubStatus_Abridged_dataMode_Enum_EXERCISE = 3

class SubStatus_Abridged

/// /// Additional sub-system or capability status for the parent entity.
class SubStatus_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SUBSTATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
    /// Example: /// Example: mdCap
    /// Constraints: Minimum length = 1, Maximum length = 16
    def type() -> SubStatus_Abridged_type_Enum:
        return SubStatus_Abridged_type_Enum(flatbuffers.field_int8(buf_, pos_, 6, 0))
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Id of the parent status.
    /// Example: /// Example: REF-STATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def statusId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
    /// Example: /// Example: FMC
    /// Constraints: Minimum length = 1, Maximum length = 16
    def status() -> SubStatus_Abridged_status_Enum:
        return SubStatus_Abridged_status_Enum(flatbuffers.field_int8(buf_, pos_, 12, 0))
    /// Descriptions and/or comments associated with the sub-status.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 1, Maximum length = 4096
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: TST1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SubStatus_Abridged_dataMode_Enum:
        return SubStatus_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)

def GetRootAsSubStatus_Abridged(buf:string): return SubStatus_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SubStatus_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(12)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_type(type:SubStatus_Abridged_type_Enum):
        b_.PrependInt8Slot(1, type, 0)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_statusId(statusId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, statusId)
        return this
    def add_status(status:SubStatus_Abridged_status_Enum):
        b_.PrependInt8Slot(4, status, 0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, notes)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origNetwork)
        return this
    def add_dataMode(dataMode:SubStatus_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(9, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, createdBy)
        return this
    def end():
        return b_.EndObject()

