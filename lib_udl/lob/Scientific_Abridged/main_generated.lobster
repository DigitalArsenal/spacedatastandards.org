// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Scientific_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Scientific_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Scientific_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Scientific_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Scientific_Abridged_dataMode_Enum_EXERCISE = 3

class Scientific_Abridged

/// /// Scientific or other data from Seradata.
class Scientific_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SCIENTIFIC-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: REF-SPACECRAFT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def spacecraftId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Hosted for company/Organization Id.
    /// Example: /// Example: REF-HOSTEDFORCOMPANYORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def hostedForCompanyOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique identifier of the organization which manufactures this bus.
    /// Example: /// Example: REF-MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.
    /// Example: /// Example: Sensor
    /// Constraints: Minimum length = 0, Maximum length = 50
    def payloadCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).
    /// Example: /// Example: SEM/MAG
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Frequency band, e.g. Gamma.
    /// Example: /// Example: Gamma
    /// Constraints: Minimum length = 0, Maximum length = 50
    def frequencyBand() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Notes associated with the payload.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 256
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Scientific_Abridged_dataMode_Enum:
        return Scientific_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// ID of the parent entity for this Scientific.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)

def GetRootAsScientific_Abridged(buf:string): return Scientific_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Scientific_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(16)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_spacecraftId(spacecraftId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, spacecraftId)
        return this
    def add_hostedForCompanyOrgId(hostedForCompanyOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, hostedForCompanyOrgId)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, manufacturerOrgId)
        return this
    def add_payloadCategory(payloadCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, payloadCategory)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, name)
        return this
    def add_frequencyBand(frequencyBand:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, frequencyBand)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origNetwork)
        return this
    def add_dataMode(dataMode:Scientific_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(14, dataMode, 0)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, idEntity)
        return this
    def end():
        return b_.EndObject()

