// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Hazard_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Hazard_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Hazard_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Hazard_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Hazard_Full_dataMode_Enum_EXERCISE = 3

class Hazard_Full

/// /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
class Hazard_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: HAZARD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
    /// Example: /// Example: Chemical
    /// Constraints: Minimum length = 1, Maximum length = 32
    def detectType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The detect time, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2022-03-07T14:51:39.653Z
    /// Constraints: No constraints specified.
    def detectTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Flag indicating whether this detection is harmful to humans.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def harmful() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 12, 0))
    /// Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
    /// Example: /// Example: ['Alarm1', 'Alarm2']
    /// Constraints: No constraints specified.
    def alarms(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def alarms_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
    /// Example: /// Example: [2.7, 2.9]
    /// Constraints: No constraints specified.
    def alarmValues(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def alarmValues_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    /// Example: /// Example: ['Rad1', 'Rad2']
    /// Constraints: No constraints specified.
    def readings(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def readings_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    /// Example: /// Example: ['Gray', 'Gray']
    /// Constraints: No constraints specified.
    def readingUnits(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def readingUnits_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    /// Example: /// Example: [107.2, 124.1]
    /// Constraints: No constraints specified.
    def readingValues(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 22) + i * 4)
    def readingValues_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 22)
    /// The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
    /// Example: /// Example: 21
    /// Constraints: Minimum length = 0, Maximum length = 48
    def matType() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
    /// Example: /// Example: Nerve Agent
    /// Constraints: Minimum length = 0, Maximum length = 64
    def matClass() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The material common name associated with this detection.
    /// Example: /// Example: VX
    /// Constraints: Minimum length = 0, Maximum length = 64
    def matName() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
    /// Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
    /// Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
    /// Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
    /// Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
    /// Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def matCat() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
    /// Example: /// Example: 64-17-5
    /// Constraints: Minimum length = 0, Maximum length = 24
    def casRN() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
    /// Example: /// Example: 27129
    /// Constraints: No constraints specified.
    def ppm() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Measure of density of the material associated with this detection, in kg/m^3.
    /// Example: /// Example: 18900.2
    /// Constraints: No constraints specified.
    def density() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
    /// Example: /// Example: 1.31
    /// Constraints: No constraints specified.
    def radCtrn() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
    /// Example: /// Example: 2.5
    /// Constraints: No constraints specified.
    def gBar() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    def hBar() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The Atomic Number of the material associated with this detection.
    /// Example: /// Example: 92
    /// Constraints: No constraints specified.
    def z() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
    /// Example: /// Example: 238
    /// Constraints: No constraints specified.
    def a() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// The specific bottle ID associated with this detection.
    /// Example: /// Example: 6264
    /// Constraints: Minimum length = 0, Maximum length = 16
    def bottleId() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
    /// Example: /// Example: Skin
    /// Constraints: Minimum length = 0, Maximum length = 64
    def channel() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The known or projected hazard duration, in seconds, associated with this material detection.
    /// Example: /// Example: 14400
    /// Constraints: No constraints specified.
    def duration() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
    /// Example: /// Example: 120.1
    /// Constraints: No constraints specified.
    def activity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// The deposition measurement of the contaminant to surface area, in kg/m^2.
    /// Example: /// Example: 1.084
    /// Constraints: No constraints specified.
    def dep() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// The deposition concentration of the contaminant to surface area, in becquerels/m^2.
    /// Example: /// Example: 86.1
    /// Constraints: No constraints specified.
    def depCtrn() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Ratio of the chemical substance mass to the total mass of the mixture.
    /// Example: /// Example: 0.029
    /// Constraints: No constraints specified.
    def massFrac() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
    /// Example: /// Example: 1.12
    /// Constraints: No constraints specified.
    def dose() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// The concentration time, in (kg/sec)/m^3, associated with this material detection.
    /// Example: /// Example: 1.077
    /// Constraints: No constraints specified.
    def ctrnTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
    /// Example: /// Example: 1.0000001865
    /// Constraints: No constraints specified.
    def doseRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// ID of the Point of Interest (POI) record related to this hazard record.
    /// Example: /// Example: POI-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idPOI() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// ID of the Track record related to this hazard record.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idTrack() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Hazard_Full_dataMode_Enum:
        return Hazard_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 82, 0))

def GetRootAsHazard_Full(buf:string): return Hazard_Full { buf, flatbuffers.indirect(buf, 0) }

struct Hazard_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(40)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_detectType(detectType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, detectType)
        return this
    def add_detectTime(detectTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, detectTime)
        return this
    def add_harmful(harmful:bool):
        b_.PrependBoolSlot(4, harmful, 0)
        return this
    def add_alarms(alarms:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, alarms)
        return this
    def add_alarmValues(alarmValues:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, alarmValues)
        return this
    def add_readings(readings:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, readings)
        return this
    def add_readingUnits(readingUnits:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, readingUnits)
        return this
    def add_readingValues(readingValues:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, readingValues)
        return this
    def add_matType(matType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, matType)
        return this
    def add_matClass(matClass:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, matClass)
        return this
    def add_matName(matName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, matName)
        return this
    def add_matCat(matCat:int):
        b_.PrependInt32Slot(13, matCat, 0)
        return this
    def add_casRN(casRN:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, casRN)
        return this
    def add_ppm(ppm:int):
        b_.PrependInt32Slot(15, ppm, 0)
        return this
    def add_density(density:float):
        b_.PrependFloat64Slot(16, density, 0.0)
        return this
    def add_radCtrn(radCtrn:float):
        b_.PrependFloat64Slot(17, radCtrn, 0.0)
        return this
    def add_gBar(gBar:float):
        b_.PrependFloat64Slot(18, gBar, 0.0)
        return this
    def add_hBar(hBar:float):
        b_.PrependFloat64Slot(19, hBar, 0.0)
        return this
    def add_z(z:int):
        b_.PrependInt32Slot(20, z, 0)
        return this
    def add_a(a:int):
        b_.PrependInt32Slot(21, a, 0)
        return this
    def add_bottleId(bottleId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, bottleId)
        return this
    def add_channel(channel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, channel)
        return this
    def add_duration(duration:int):
        b_.PrependInt32Slot(24, duration, 0)
        return this
    def add_activity(activity:float):
        b_.PrependFloat64Slot(25, activity, 0.0)
        return this
    def add_dep(dep:float):
        b_.PrependFloat64Slot(26, dep, 0.0)
        return this
    def add_depCtrn(depCtrn:float):
        b_.PrependFloat64Slot(27, depCtrn, 0.0)
        return this
    def add_massFrac(massFrac:float):
        b_.PrependFloat64Slot(28, massFrac, 0.0)
        return this
    def add_dose(dose:float):
        b_.PrependFloat64Slot(29, dose, 0.0)
        return this
    def add_ctrnTime(ctrnTime:float):
        b_.PrependFloat64Slot(30, ctrnTime, 0.0)
        return this
    def add_doseRate(doseRate:float):
        b_.PrependFloat64Slot(31, doseRate, 0.0)
        return this
    def add_idPOI(idPOI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, idPOI)
        return this
    def add_idTrack(idTrack:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, idTrack)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, origNetwork)
        return this
    def add_dataMode(dataMode:Hazard_Full_dataMode_Enum):
        b_.PrependInt8Slot(39, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def Hazard_FullStartAlarmsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Hazard_FullCreateAlarmsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Hazard_FullStartAlarmValuesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Hazard_FullCreateAlarmValuesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Hazard_FullStartReadingsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Hazard_FullCreateReadingsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Hazard_FullStartReadingUnitsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Hazard_FullCreateReadingUnitsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Hazard_FullStartReadingValuesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Hazard_FullCreateReadingValuesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

