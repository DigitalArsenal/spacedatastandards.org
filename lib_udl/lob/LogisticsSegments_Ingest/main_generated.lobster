// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsSegments_Ingest

/// /// Remarks associated with this LogisticsSupport record.
class LogisticsSegments_Ingest : flatbuffers.handle
    /// Used to sequence the segments in the transportation plan.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def segmentNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 1, Maximum length = 1
    def modeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The type of mission (e.g. SAAM, CHNL, etc.).
    /// Example: /// Example: SAAM
    /// Constraints: Minimum length = 0, Maximum length = 6
    def missionType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The unique identifier of the mission to which this logistics record is assigned.
    /// Example: /// Example: EXAMPLE-UUID
    /// Constraints: Minimum length = 0, Maximum length = 32
    def idMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The GDSS mission ID for this segment.
    /// Example: /// Example: 2001101RF01202307062205
    /// Constraints: Minimum length = 0, Maximum length = 24
    def extMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The user generated identifier for an air mission subgroup.
    /// Example: /// Example: TAM308901196
    /// Constraints: Minimum length = 0, Maximum length = 12
    def missionNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Start air mission itinerary point identifier.
    /// Example: /// Example: 200
    /// Constraints: No constraints specified.
    def itin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// The identifier that represents a specific aircraft within an aircraft type.
    /// Example: /// Example: N819AX
    /// Constraints: Minimum length = 0, Maximum length = 7
    def segTailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    /// Example: /// Example: B7772E
    /// Constraints: Minimum length = 0, Maximum length = 30
    def segAircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Airport ICAO departure code.
    /// Example: /// Example: PHIK
    /// Constraints: Minimum length = 0, Maximum length = 4
    def departureICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    def segActDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Airport ICAO arrival code.
    /// Example: /// Example: YBCS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def arrivalICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    def segActArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    def segEstDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:20:00.123Z
    /// Constraints: No constraints specified.
    def segEstArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)

def GetRootAsLogisticsSegments_Ingest(buf:string): return LogisticsSegments_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsSegments_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(15)
        return this
    def add_segmentNumber(segmentNumber:int):
        b_.PrependInt32Slot(0, segmentNumber, 0)
        return this
    def add_modeCode(modeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, modeCode)
        return this
    def add_missionType(missionType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, missionType)
        return this
    def add_idMission(idMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idMission)
        return this
    def add_extMissionId(extMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, extMissionId)
        return this
    def add_missionNumber(missionNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, missionNumber)
        return this
    def add_itin(itin:int):
        b_.PrependInt32Slot(6, itin, 0)
        return this
    def add_segTailNumber(segTailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, segTailNumber)
        return this
    def add_segAircraftMDS(segAircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, segAircraftMDS)
        return this
    def add_departureICAO(departureICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, departureICAO)
        return this
    def add_segActDepTime(segActDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, segActDepTime)
        return this
    def add_arrivalICAO(arrivalICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, arrivalICAO)
        return this
    def add_segActArrTime(segActArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, segActArrTime)
        return this
    def add_segEstDepTime(segEstDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, segEstDepTime)
        return this
    def add_segEstArrTime(segEstArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, segEstArrTime)
        return this
    def end():
        return b_.EndObject()

