// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum MonoRadar_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    MonoRadar_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    MonoRadar_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    MonoRadar_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    MonoRadar_Full_dataMode_Enum_EXERCISE = 3

class MonoRadar_Full

/// /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
class MonoRadar_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MONORADAR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Test target indicator.
    /// Example: /// Example: TTI
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tti() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// ID of the radar site or station providing the data.
    /// Example: /// Example: REF-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Sensor altitude, in kilometers, at time of observation (ts).
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// System Area Code.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def sac() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// System Identification Code.
    /// Example: /// Example: 40
    /// Constraints: No constraints specified.
    def sic() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Aircraft identification from an aircraft equipped with a Mode S transponder.
    /// Example: /// Example: TGT-ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tgtid() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
    /// Example: /// Example: ADDR-ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    def addr() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
    /// Example: /// Example: CAT48
    /// Constraints: Minimum length = 1, Maximum length = 16
    def msgfmt() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
    /// Example: /// Example: BCN
    /// Constraints: Minimum length = 1, Maximum length = 16
    def msgtyp() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Flag indicating military message.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def af() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// Flag indicating FAA/Civ message.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def faa() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def spi() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 34, 0))
    /// Flag indicating whether AIMS present.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def aims() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// Flag indicating that target was detected using data from an MTI receiver.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def mti() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// Number of beacon hits received on the target.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def bcnhits() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Target detection time, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def msgts() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Measured slant range to target from the observing site, in km.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def rng() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def az() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Azimuth Change Pulse count at target detection.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def acp() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Measured height of the target, in km. (for 3D radars).
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def alt3d() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Mode-C altitude (uncorrected pressure altitude), in km.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def mc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Status of the mode-C validity bit.
    /// Example: /// Example: MCV
    /// Constraints: Minimum length = 0, Maximum length = 16
    def mcv() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Indicator that the mode-C response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def mcg() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 58, 0))
    /// Mode-1 interrogation response (mission code).
    /// Example: /// Example: MISSION_CODE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def m1() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Status of the mode-1 validity bit.
    /// Example: /// Example: M1V
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m1v() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Indicator that the mode-1 response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def m1g() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 64, 0))
    /// Mode-2 interrogation response (military identification code).
    /// Example: /// Example: MILITARY_ID_CODE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def m2() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Status of the mode-2 validity bit.
    /// Example: /// Example: M2V
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m2v() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Status of the mode-2 X-Pulse response validation.
    /// Example: /// Example: M2XV
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m2xv() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Indicator that the mode-2 response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def m2g() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 72, 0))
    /// Mode-3/A interrogation response (aircraft identification).
    /// Example: /// Example: AIRCRAFT_ID
    /// Constraints: Minimum length = 0, Maximum length = 128
    def m3a() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Status of the mode-3/A validity bit.
    /// Example: /// Example: M3AV
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m3av() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Indicator that the mode-3/A response was garbled.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def m3ag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 78, 0))
    /// Status of the mode-3 X-Pulse response validation.
    /// Example: /// Example: M3AXV
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m3axv() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Mode-4 interrogation response (Identification Friend/Foe).
    /// Example: /// Example: ID_FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 24
    def m4() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Status of the mode-4 validity bit.
    /// Example: /// Example: M4V
    /// Constraints: Minimum length = 0, Maximum length = 16
    def m4v() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Mode-4 D1 & D2 response status.
    /// Example: /// Example: STATUS
    /// Constraints: Minimum length = 0, Maximum length = 8
    def m4d1d2() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Mode-S Comm B message data.
    /// Example: /// Example: MSCOMMB
    /// Constraints: Minimum length = 0, Maximum length = 16
    def mscommb() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Flag indicating military emergency.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def milemrgcy() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 90, 0))
    /// 7500 squawk present (hijack).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def code7500() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 92, 0))
    /// 7600 squawk present (loss of comm).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def code7600() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 94, 0))
    /// 7700 squawk present (general emergency).
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def code7700() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 96, 0))
    /// Target ground speed, in meters/second.
    /// Example: /// Example: 30.23
    /// Constraints: No constraints specified.
    def grndspd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Target heading, in degrees from true North at the target position.
    /// Example: /// Example: 30.23
    /// Constraints: No constraints specified.
    def hdng() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
    /// Example: /// Example: 30
    /// Constraints: No constraints specified.
    def trknum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 102, 0)
    /// Type of sensor(s) maintaining track.
    /// Example: /// Example: RAD
    /// Constraints: Minimum length = 0, Maximum length = 16
    def rad() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Indication of Horizontal Maneuver detection.
    /// Example: /// Example: MAH
    /// Constraints: Minimum length = 0, Maximum length = 16
    def mah() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Climbing/Descending mode indicator.
    /// Example: /// Example: CDM
    /// Constraints: Minimum length = 0, Maximum length = 24
    def cdm() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Array of local 2d-cartesian [x, y] coordinates of target, in km.
    /// Example: /// Example: [1.2, 2.2]
    /// Constraints: No constraints specified.
    def cartpos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 110) + i * 4)
    def cartpos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 110)
    /// Runlength of the primary surveillance radar track, in degrees.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    def psrrl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// Runlength of the secondary surveillance radar track, in degrees.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    def ssrl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Target range delta between PSR and SSR (reference PSR-SSR), in km.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    def rngdelt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
    /// Example: /// Example: 44.23
    /// Constraints: No constraints specified.
    def azdelt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Warning/Error Conditions and Target Classification.
    /// Example: /// Example: ['WARNING', 'WARNING']
    /// Constraints: No constraints specified.
    def wectc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 120) + i * 4)
    def wectc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 120)
    /// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def mrgrpt() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 122, 0))
    /// ARTS quality.
    /// Example: /// Example: QUALITY
    /// Constraints: Minimum length = 0, Maximum length = 64
    def artsqual() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Track eligibility flag.
    /// Example: /// Example: ELIGIBILITY
    /// Constraints: Minimum length = 0, Maximum length = 24
    def trkelig() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// Target confidence.
    /// Example: /// Example: CONFIDENCE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def tgtconf() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Target correlation flag.
    /// Example: /// Example: CORRELATION
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tgtcorr() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
    /// Example: /// Example: 0.4
    /// Constraints: No constraints specified.
    def tis() -> float:
        return flatbuffers.field_float64(buf_, pos_, 132, 0.0)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 134) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 134)
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> MonoRadar_Full_dataMode_Enum:
        return MonoRadar_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 142, 0))
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 146)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 148)

def GetRootAsMonoRadar_Full(buf:string): return MonoRadar_Full { buf, flatbuffers.indirect(buf, 0) }

struct MonoRadar_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(73)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_tti(tti:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, tti)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSensor)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(4, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(5, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(6, senalt, 0.0)
        return this
    def add_sac(sac:int):
        b_.PrependInt32Slot(7, sac, 0)
        return this
    def add_sic(sic:int):
        b_.PrependInt32Slot(8, sic, 0)
        return this
    def add_tgtid(tgtid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, tgtid)
        return this
    def add_addr(addr:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, addr)
        return this
    def add_msgfmt(msgfmt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, msgfmt)
        return this
    def add_msgtyp(msgtyp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, msgtyp)
        return this
    def add_af(af:bool):
        b_.PrependBoolSlot(13, af, 0)
        return this
    def add_faa(faa:bool):
        b_.PrependBoolSlot(14, faa, 0)
        return this
    def add_spi(spi:bool):
        b_.PrependBoolSlot(15, spi, 0)
        return this
    def add_aims(aims:bool):
        b_.PrependBoolSlot(16, aims, 0)
        return this
    def add_mti(mti:bool):
        b_.PrependBoolSlot(17, mti, 0)
        return this
    def add_bcnhits(bcnhits:int):
        b_.PrependInt32Slot(18, bcnhits, 0)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, ts)
        return this
    def add_msgts(msgts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, msgts)
        return this
    def add_rng(rng:float):
        b_.PrependFloat64Slot(21, rng, 0.0)
        return this
    def add_az(az:float):
        b_.PrependFloat64Slot(22, az, 0.0)
        return this
    def add_acp(acp:int):
        b_.PrependInt32Slot(23, acp, 0)
        return this
    def add_alt3d(alt3d:float):
        b_.PrependFloat64Slot(24, alt3d, 0.0)
        return this
    def add_mc(mc:float):
        b_.PrependFloat64Slot(25, mc, 0.0)
        return this
    def add_mcv(mcv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, mcv)
        return this
    def add_mcg(mcg:bool):
        b_.PrependBoolSlot(27, mcg, 0)
        return this
    def add_m1(m1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, m1)
        return this
    def add_m1v(m1v:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, m1v)
        return this
    def add_m1g(m1g:bool):
        b_.PrependBoolSlot(30, m1g, 0)
        return this
    def add_m2(m2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, m2)
        return this
    def add_m2v(m2v:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, m2v)
        return this
    def add_m2xv(m2xv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, m2xv)
        return this
    def add_m2g(m2g:bool):
        b_.PrependBoolSlot(34, m2g, 0)
        return this
    def add_m3a(m3a:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, m3a)
        return this
    def add_m3av(m3av:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, m3av)
        return this
    def add_m3ag(m3ag:bool):
        b_.PrependBoolSlot(37, m3ag, 0)
        return this
    def add_m3axv(m3axv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, m3axv)
        return this
    def add_m4(m4:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, m4)
        return this
    def add_m4v(m4v:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, m4v)
        return this
    def add_m4d1d2(m4d1d2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, m4d1d2)
        return this
    def add_mscommb(mscommb:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, mscommb)
        return this
    def add_milemrgcy(milemrgcy:bool):
        b_.PrependBoolSlot(43, milemrgcy, 0)
        return this
    def add_code7500(code7500:bool):
        b_.PrependBoolSlot(44, code7500, 0)
        return this
    def add_code7600(code7600:bool):
        b_.PrependBoolSlot(45, code7600, 0)
        return this
    def add_code7700(code7700:bool):
        b_.PrependBoolSlot(46, code7700, 0)
        return this
    def add_grndspd(grndspd:float):
        b_.PrependFloat64Slot(47, grndspd, 0.0)
        return this
    def add_hdng(hdng:float):
        b_.PrependFloat64Slot(48, hdng, 0.0)
        return this
    def add_trknum(trknum:int):
        b_.PrependInt32Slot(49, trknum, 0)
        return this
    def add_rad(rad:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, rad)
        return this
    def add_mah(mah:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, mah)
        return this
    def add_cdm(cdm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, cdm)
        return this
    def add_cartpos(cartpos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, cartpos)
        return this
    def add_psrrl(psrrl:float):
        b_.PrependFloat64Slot(54, psrrl, 0.0)
        return this
    def add_ssrl(ssrl:float):
        b_.PrependFloat64Slot(55, ssrl, 0.0)
        return this
    def add_rngdelt(rngdelt:float):
        b_.PrependFloat64Slot(56, rngdelt, 0.0)
        return this
    def add_azdelt(azdelt:float):
        b_.PrependFloat64Slot(57, azdelt, 0.0)
        return this
    def add_wectc(wectc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, wectc)
        return this
    def add_mrgrpt(mrgrpt:bool):
        b_.PrependBoolSlot(59, mrgrpt, 0)
        return this
    def add_artsqual(artsqual:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, artsqual)
        return this
    def add_trkelig(trkelig:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, trkelig)
        return this
    def add_tgtconf(tgtconf:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, tgtconf)
        return this
    def add_tgtcorr(tgtcorr:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, tgtcorr)
        return this
    def add_tis(tis:float):
        b_.PrependFloat64Slot(64, tis, 0.0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, tags)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, origSensorId)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, origin)
        return this
    def add_dataMode(dataMode:MonoRadar_Full_dataMode_Enum):
        b_.PrependInt8Slot(69, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(71, createdBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(72, origNetwork)
        return this
    def end():
        return b_.EndObject()

def MonoRadar_FullStartCartposVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MonoRadar_FullCreateCartposVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MonoRadar_FullStartWectcVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MonoRadar_FullCreateWectcVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def MonoRadar_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def MonoRadar_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

