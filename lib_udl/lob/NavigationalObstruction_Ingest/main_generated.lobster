// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum NavigationalObstruction_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    NavigationalObstruction_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    NavigationalObstruction_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    NavigationalObstruction_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    NavigationalObstruction_Ingest_dataMode_Enum_EXERCISE = 3

class NavigationalObstruction_Ingest

/// /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
class NavigationalObstruction_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
    /// Example: /// Example: 2024-06-13
    /// Constraints: No constraints specified.
    def cycleDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of obstacle (e.g. P for point, V for vector, L for line).
    /// Example: /// Example: V
    /// Constraints: Minimum length = 1, Maximum length = 1
    def obstacleType() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The ID of this obstacle.
    /// Example: /// Example: 359655
    /// Constraints: Minimum length = 1, Maximum length = 32
    def obstacleId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: OU812
    /// Constraints: Minimum length = 0, Maximum length = 32
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The original ID for this obstacle.
    /// Example: /// Example: L0000002289
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
    /// Example: /// Example: 23
    /// Constraints: Minimum length = 0, Maximum length = 4
    def provinceCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 46.757211
    /// Constraints: No constraints specified.
    def pointLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -67.759494
    /// Constraints: No constraints specified.
    def pointLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -122.197891
    /// Constraints: No constraints specified.
    def lineNELon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 49.000584
    /// Constraints: No constraints specified.
    def lineNELat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -122.722946
    /// Constraints: No constraints specified.
    def lineSWLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 48.507027
    /// Constraints: No constraints specified.
    def lineSWLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// ID of the starting point of a line segment.
    /// Example: /// Example: 359655
    /// Constraints: No constraints specified.
    def segStartPoint() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// ID of the end point of a line segment.
    /// Example: /// Example: 359655
    /// Constraints: No constraints specified.
    def segEndPoint() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Identifies the sequence number of a line segment.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def segNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
    /// Example: /// Example: AT040
    /// Constraints: Minimum length = 0, Maximum length = 5
    def facc() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Identifying code for the type of this point obstacle.
    /// Example: /// Example: 540
    /// Constraints: Minimum length = 0, Maximum length = 4
    def featureCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Identifying code for the type of this point obstacle.
    /// Example: /// Example: 540
    /// Constraints: Minimum length = 0, Maximum length = 4
    def featureType() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Type name of point obstacle.
    /// Example: /// Example: PYLON
    /// Constraints: Minimum length = 0, Maximum length = 64
    def featureName() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
    /// Example: /// Example: Powerline Pylon, General
    /// Constraints: Minimum length = 0, Maximum length = 64
    def featureDescription() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
    /// Example: /// Example: 262
    /// Constraints: Minimum length = 0, Maximum length = 4
    def wac() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// This obstacle's World Area Code installation number (WAC-INNR).
    /// Example: /// Example: 0409-00039
    /// Constraints: Minimum length = 0, Maximum length = 32
    def wacINNR() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
    /// Example: /// Example: S
    /// Constraints: Minimum length = 0, Maximum length = 1
    def multObs() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Indicates the number of obstructions associated with a feature.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numObs() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
    /// Example: /// Example: WGS-84
    /// Constraints: Minimum length = 0, Maximum length = 8
    def horizDatumCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// The height Above Ground Level (AGL) of the point obstacle in feet.
    /// Example: /// Example: 314.1
    /// Constraints: No constraints specified.
    def heightAGL() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
    /// Example: /// Example: 30.1
    /// Constraints: No constraints specified.
    def heightAGLAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
    /// Example: /// Example: 1154.1
    /// Constraints: No constraints specified.
    def heightMSL() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
    /// Example: /// Example: 34.1
    /// Constraints: No constraints specified.
    def heightMSLAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The elevation at the point obstacle's location in feet.
    /// Example: /// Example: 840.1
    /// Constraints: No constraints specified.
    def elevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The difference between the assigned elevation of this point and its true elevation, in feet.
    /// Example: /// Example: 17.1
    /// Constraints: No constraints specified.
    def elevationAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
    /// Example: /// Example: 8.1
    /// Constraints: No constraints specified.
    def horizAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
    /// Example: /// Example: 0
    /// Constraints: Minimum length = 0, Maximum length = 1
    def quality() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
    /// Example: /// Example: U
    /// Constraints: Minimum length = 0, Maximum length = 1
    def lightingCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// The surface material composition code of this point obstacle.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 0, Maximum length = 1
    def surfaceMatCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def directivityCode() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// Method used to confirm the existence of this obstacle.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def validationCode() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
    /// Example: /// Example: V
    /// Constraints: Minimum length = 0, Maximum length = 1
    def transactionCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Code denoting the action, review, or process that updated this obstacle.
    /// Example: /// Example: OT
    /// Constraints: Minimum length = 0, Maximum length = 4
    def processCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Indicates if this obstacle record is Active (A) or Deleted (D).
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    def actDelCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Name of the agency that produced this obstruction data set.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 0, Maximum length = 128
    def producer() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// The organization that entered obstacle data other than the producer.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 0, Maximum length = 64
    def derivingOrg() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// The organization that deleted this obstacle record.
    /// Example: /// Example: ACME
    /// Constraints: Minimum length = 0, Maximum length = 64
    def deletingOrg() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 2016-04-01
    /// Constraints: No constraints specified.
    def sourceDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 2020-02-26
    /// Constraints: No constraints specified.
    def revDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 1991-03-28
    /// Constraints: No constraints specified.
    def initRecordDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
    /// Example: /// Example: ['key1', 'key2']
    /// Constraints: No constraints specified.
    def keys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 102) + i * 4)
    def keys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 102)
    /// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: /// Example: ['value1', 'value2']
    /// Constraints: No constraints specified.
    def values(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 104) + i * 4)
    def values_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 104)
    /// Remarks regarding this obstacle.
    /// Example: /// Example: Obstacle remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    def obstacleRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: /// Example: 2024-07-11
    /// Constraints: No constraints specified.
    def nextCycleDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
    /// Example: /// Example: 2024-04-23
    /// Constraints: No constraints specified.
    def baselineCutoffDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    /// Example: /// Example: 2024-05-21
    /// Constraints: No constraints specified.
    def cutoffDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
    /// Example: /// Example: 2406
    /// Constraints: No constraints specified.
    def airacCycle() -> int:
        return flatbuffers.field_int32(buf_, pos_, 114, 0)
    /// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
    /// Example: /// Example: 2405
    /// Constraints: No constraints specified.
    def baseAiracCycle() -> int:
        return flatbuffers.field_int32(buf_, pos_, 116, 0)
    /// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def ownerCountryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 99.1
    /// Constraints: No constraints specified.
    def boundNELon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 120, 0.0)
    /// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 29.1
    /// Constraints: No constraints specified.
    def boundNELat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -144.1
    /// Constraints: No constraints specified.
    def boundSWLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: -44.1
    /// Constraints: No constraints specified.
    def boundSWLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 126, 0.0)
    /// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
    /// Example: /// Example: 20.1
    /// Constraints: No constraints specified.
    def minHeightAGL() -> float:
        return flatbuffers.field_float64(buf_, pos_, 128, 0.0)
    /// The number of point features associated with this obstruction data set.
    /// Example: /// Example: 21830590
    /// Constraints: No constraints specified.
    def numPoints() -> int:
        return flatbuffers.field_int32(buf_, pos_, 130, 0)
    /// The number of line features associated with this obstruction data set.
    /// Example: /// Example: 45993
    /// Constraints: No constraints specified.
    def numLines() -> int:
        return flatbuffers.field_int32(buf_, pos_, 132, 0)
    /// Remarks concerning this obstruction's data set.
    /// Example: /// Example: Data set remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    def dataSetRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// The name of the point file associated with this obstruction data set.
    /// Example: /// Example: points.txt
    /// Constraints: Minimum length = 0, Maximum length = 256
    def pointsFilename() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// The name of the line file associated with this obstruction data set.
    /// Example: /// Example: lines.txt
    /// Constraints: Minimum length = 0, Maximum length = 256
    def linesFilename() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// The name of the vector file associated with this obstruction data set.
    /// Example: /// Example: vectors.txt
    /// Constraints: Minimum length = 0, Maximum length = 256
    def vectorsFilename() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 142)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 146)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 148)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 150)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 152)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 154)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> NavigationalObstruction_Ingest_dataMode_Enum:
        return NavigationalObstruction_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 156, 0))

def GetRootAsNavigationalObstruction_Ingest(buf:string): return NavigationalObstruction_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct NavigationalObstruction_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(77)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_cycleDate(cycleDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, cycleDate)
        return this
    def add_obstacleType(obstacleType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, obstacleType)
        return this
    def add_obstacleId(obstacleId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, obstacleId)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, externalId)
        return this
    def add_origId(origId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, origId)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, countryCode)
        return this
    def add_provinceCode(provinceCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, provinceCode)
        return this
    def add_pointLat(pointLat:float):
        b_.PrependFloat64Slot(9, pointLat, 0.0)
        return this
    def add_pointLon(pointLon:float):
        b_.PrependFloat64Slot(10, pointLon, 0.0)
        return this
    def add_lineNELon(lineNELon:float):
        b_.PrependFloat64Slot(11, lineNELon, 0.0)
        return this
    def add_lineNELat(lineNELat:float):
        b_.PrependFloat64Slot(12, lineNELat, 0.0)
        return this
    def add_lineSWLon(lineSWLon:float):
        b_.PrependFloat64Slot(13, lineSWLon, 0.0)
        return this
    def add_lineSWLat(lineSWLat:float):
        b_.PrependFloat64Slot(14, lineSWLat, 0.0)
        return this
    def add_segStartPoint(segStartPoint:int):
        b_.PrependInt32Slot(15, segStartPoint, 0)
        return this
    def add_segEndPoint(segEndPoint:int):
        b_.PrependInt32Slot(16, segEndPoint, 0)
        return this
    def add_segNum(segNum:int):
        b_.PrependInt32Slot(17, segNum, 0)
        return this
    def add_facc(facc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, facc)
        return this
    def add_featureCode(featureCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, featureCode)
        return this
    def add_featureType(featureType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, featureType)
        return this
    def add_featureName(featureName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, featureName)
        return this
    def add_featureDescription(featureDescription:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, featureDescription)
        return this
    def add_wac(wac:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, wac)
        return this
    def add_wacINNR(wacINNR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, wacINNR)
        return this
    def add_multObs(multObs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, multObs)
        return this
    def add_numObs(numObs:int):
        b_.PrependInt32Slot(26, numObs, 0)
        return this
    def add_horizDatumCode(horizDatumCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, horizDatumCode)
        return this
    def add_heightAGL(heightAGL:float):
        b_.PrependFloat64Slot(28, heightAGL, 0.0)
        return this
    def add_heightAGLAcc(heightAGLAcc:float):
        b_.PrependFloat64Slot(29, heightAGLAcc, 0.0)
        return this
    def add_heightMSL(heightMSL:float):
        b_.PrependFloat64Slot(30, heightMSL, 0.0)
        return this
    def add_heightMSLAcc(heightMSLAcc:float):
        b_.PrependFloat64Slot(31, heightMSLAcc, 0.0)
        return this
    def add_elevation(elevation:float):
        b_.PrependFloat64Slot(32, elevation, 0.0)
        return this
    def add_elevationAcc(elevationAcc:float):
        b_.PrependFloat64Slot(33, elevationAcc, 0.0)
        return this
    def add_horizAcc(horizAcc:float):
        b_.PrependFloat64Slot(34, horizAcc, 0.0)
        return this
    def add_quality(quality:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, quality)
        return this
    def add_lightingCode(lightingCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, lightingCode)
        return this
    def add_surfaceMatCode(surfaceMatCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, surfaceMatCode)
        return this
    def add_directivityCode(directivityCode:int):
        b_.PrependInt32Slot(38, directivityCode, 0)
        return this
    def add_validationCode(validationCode:int):
        b_.PrependInt32Slot(39, validationCode, 0)
        return this
    def add_transactionCode(transactionCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, transactionCode)
        return this
    def add_processCode(processCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, processCode)
        return this
    def add_actDelCode(actDelCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, actDelCode)
        return this
    def add_producer(producer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, producer)
        return this
    def add_derivingOrg(derivingOrg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, derivingOrg)
        return this
    def add_deletingOrg(deletingOrg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, deletingOrg)
        return this
    def add_sourceDate(sourceDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, sourceDate)
        return this
    def add_revDate(revDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, revDate)
        return this
    def add_initRecordDate(initRecordDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, initRecordDate)
        return this
    def add_keys(keys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, keys)
        return this
    def add_values(values:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, values)
        return this
    def add_obstacleRemarks(obstacleRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, obstacleRemarks)
        return this
    def add_nextCycleDate(nextCycleDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, nextCycleDate)
        return this
    def add_baselineCutoffDate(baselineCutoffDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, baselineCutoffDate)
        return this
    def add_cutoffDate(cutoffDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, cutoffDate)
        return this
    def add_airacCycle(airacCycle:int):
        b_.PrependInt32Slot(55, airacCycle, 0)
        return this
    def add_baseAiracCycle(baseAiracCycle:int):
        b_.PrependInt32Slot(56, baseAiracCycle, 0)
        return this
    def add_ownerCountryCode(ownerCountryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, ownerCountryCode)
        return this
    def add_boundNELon(boundNELon:float):
        b_.PrependFloat64Slot(58, boundNELon, 0.0)
        return this
    def add_boundNELat(boundNELat:float):
        b_.PrependFloat64Slot(59, boundNELat, 0.0)
        return this
    def add_boundSWLon(boundSWLon:float):
        b_.PrependFloat64Slot(60, boundSWLon, 0.0)
        return this
    def add_boundSWLat(boundSWLat:float):
        b_.PrependFloat64Slot(61, boundSWLat, 0.0)
        return this
    def add_minHeightAGL(minHeightAGL:float):
        b_.PrependFloat64Slot(62, minHeightAGL, 0.0)
        return this
    def add_numPoints(numPoints:int):
        b_.PrependInt32Slot(63, numPoints, 0)
        return this
    def add_numLines(numLines:int):
        b_.PrependInt32Slot(64, numLines, 0)
        return this
    def add_dataSetRemarks(dataSetRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, dataSetRemarks)
        return this
    def add_pointsFilename(pointsFilename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, pointsFilename)
        return this
    def add_linesFilename(linesFilename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, linesFilename)
        return this
    def add_vectorsFilename(vectorsFilename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, vectorsFilename)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(69, rawFileURI)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(71, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(72, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(73, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(74, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, origNetwork)
        return this
    def add_dataMode(dataMode:NavigationalObstruction_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(76, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def NavigationalObstruction_IngestStartKeysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def NavigationalObstruction_IngestCreateKeysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def NavigationalObstruction_IngestStartValuesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def NavigationalObstruction_IngestCreateValuesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

