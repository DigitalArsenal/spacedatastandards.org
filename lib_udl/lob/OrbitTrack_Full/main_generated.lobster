// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OrbitTrack_Full_objIdent_Enum:
    /// Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    OrbitTrack_Full_objIdent_Enum_ASSUMED_FRIEND = 0
    /// Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    OrbitTrack_Full_objIdent_Enum_FRIEND = 1
    /// Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    OrbitTrack_Full_objIdent_Enum_HOSTILE = 2
    /// Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    OrbitTrack_Full_objIdent_Enum_NEUTRAL = 3
    /// Track object which has not been evaluated.
    OrbitTrack_Full_objIdent_Enum_PENDING = 4
    /// Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    OrbitTrack_Full_objIdent_Enum_SUSPECT = 5
    /// Track object which has been evaluated and does not meet criteria for any standard identity.
    OrbitTrack_Full_objIdent_Enum_UNKNOWN = 6

enum OrbitTrack_Full_objectType_Enum:
    /// No description available.
    OrbitTrack_Full_objectType_Enum_DEBRIS = 0
    /// No description available.
    OrbitTrack_Full_objectType_Enum_MANNED = 1
    /// No description available.
    OrbitTrack_Full_objectType_Enum_PAYLOAD = 2
    /// No description available.
    OrbitTrack_Full_objectType_Enum_PLATFORM = 3
    /// No description available.
    OrbitTrack_Full_objectType_Enum_ROCKET_BODY = 4
    /// No description available.
    OrbitTrack_Full_objectType_Enum_UNKNOWN = 5

enum OrbitTrack_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    OrbitTrack_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    OrbitTrack_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    OrbitTrack_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    OrbitTrack_Full_dataMode_Enum_EXERCISE = 3

class OrbitTrack_Full

/// /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
class OrbitTrack_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: ORBIT_TRACK_ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: 32375
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 37375
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: L2045
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the Elset associated with this object.
    /// Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idElset() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Track timestamp in ISO8601 UTC format, with microsecond precision.
    /// Example: /// Example: 2021-02-25T12:00:00.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 19.88550102
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 46.74596844
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Track point altitude relative to WGS-84 ellipsoid, in meters.
    /// Example: /// Example: 585.71
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Radio frequency of the track, measured in megahertz (MHz).
    /// Example: /// Example: 1.5273
    /// Constraints: No constraints specified.
    def rdfRF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// International radio call sign assigned to the track. This is an 8-character alphanumeric code.
    /// Example: /// Example: Charlie
    /// Constraints: Minimum length = 0, Maximum length = 8
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Report number received from the reporting source for this track.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 32
    def rptNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    ///  PENDING: Track object which has not been evaluated.
    ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objIdent() -> OrbitTrack_Full_objIdent_Enum:
        return OrbitTrack_Full_objIdent_Enum(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
    ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
    ///  KILO: Friendly high-value object.
    ///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
    ///  ZOMBIE: Suspect track, object, or entity of special interest.
    /// Example: /// Example: JOKER
    /// Constraints: Minimum length = 0, Maximum length = 32
    def identAmp() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Status of the satellite.
    /// Example: /// Example: INACTIVE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def satStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
    /// Example: /// Example: PAYLOAD
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objectType() -> OrbitTrack_Full_objectType_Enum:
        return OrbitTrack_Full_objectType_Enum(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 8
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
    /// Example: /// Example: 0.5868
    /// Constraints: No constraints specified.
    def decay() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// One-line Charlie elements set.
    /// Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
    /// Constraints: Minimum length = 0, Maximum length = 100
    def charlieLine() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
    /// Example: /// Example: ELLIPSE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def aouType() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
    /// ELLIPSE:
    ///    brg - orientation in degrees of the ellipse
    ///    a1 - semi-major axis in meters
    ///    a2 - semi-minor axis in meters
    /// BEARING (BEARING BOX or MTST BEARING BOX):
    ///    brg - orientation in degrees of the bearing box 
    ///    a1 - length of bearing box in meters 
    ///    a2 - half-width of bearing box in meters 
    /// OTHER (All other type values):
    ///    brg - line of bearing in degrees true 
    ///    a1 - bearing error in degrees 
    ///    a2 - estimated range in meters.
    /// Example: /// Example: [34.3, 26.5, 1.2]
    /// Constraints: No constraints specified.
    def aouData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def aouData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// Track object speed, in km/sec.
    /// Example: /// Example: 15.03443
    /// Constraints: No constraints specified.
    def spd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
    /// Example: /// Example: 15.2
    /// Constraints: No constraints specified.
    def angElev() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
    /// Example: /// Example: 90
    /// Constraints: No constraints specified.
    def cntnmnt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Source cross-reference code for the command that originated the track report.
    /// Example: /// Example: XE
    /// Constraints: Minimum length = 0, Maximum length = 8
    def xref() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
    /// Example: /// Example: FHKX
    /// Constraints: Minimum length = 0, Maximum length = 32
    def chXRef() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Free-form remarks entered for the satellite.
    /// Example: /// Example: A note regarding this spacecraft
    /// Constraints: Minimum length = 0, Maximum length = 256
    def amplification() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
    /// Example: /// Example: ID Mode
    /// Constraints: Minimum length = 0, Maximum length = 64
    def iff() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def reinforced() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 64, 0))
    /// Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def reduced() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 66, 0))
    /// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def hq() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def dummy() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 70, 0))
    /// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def taskForce() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 72, 0))
    /// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def feint() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 74, 0))
    /// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def installation() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 76, 0))
    /// The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
    /// Example: /// Example: SPACE
    /// Constraints: Minimum length = 0, Maximum length = 10
    def vehType() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    /// Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// TrackSensor Collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def trackSensors(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 82) + i * 4)
    def trackSensors_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 82)
    /// Time the row was created in the database.
    /// Example: /// Example: 2021-02-25T12:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> OrbitTrack_Full_dataMode_Enum:
        return OrbitTrack_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 92, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)

def GetRootAsOrbitTrack_Full(buf:string): return OrbitTrack_Full { buf, flatbuffers.indirect(buf, 0) }

struct OrbitTrack_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(46)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, onOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, origObjectId)
        return this
    def add_idElset(idElset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idElset)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, ts)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(8, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(9, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(10, alt, 0.0)
        return this
    def add_rdfRF(rdfRF:float):
        b_.PrependFloat64Slot(11, rdfRF, 0.0)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, callSign)
        return this
    def add_rptNum(rptNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, rptNum)
        return this
    def add_objIdent(objIdent:OrbitTrack_Full_objIdent_Enum):
        b_.PrependInt8Slot(14, objIdent, 0)
        return this
    def add_identAmp(identAmp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, identAmp)
        return this
    def add_satStatus(satStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, satStatus)
        return this
    def add_objectType(objectType:OrbitTrack_Full_objectType_Enum):
        b_.PrependInt8Slot(17, objectType, 0)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, countryCode)
        return this
    def add_decay(decay:float):
        b_.PrependFloat64Slot(19, decay, 0.0)
        return this
    def add_charlieLine(charlieLine:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, charlieLine)
        return this
    def add_aouType(aouType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, aouType)
        return this
    def add_aouData(aouData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, aouData)
        return this
    def add_spd(spd:float):
        b_.PrependFloat64Slot(23, spd, 0.0)
        return this
    def add_angElev(angElev:float):
        b_.PrependFloat64Slot(24, angElev, 0.0)
        return this
    def add_cntnmnt(cntnmnt:float):
        b_.PrependFloat64Slot(25, cntnmnt, 0.0)
        return this
    def add_xref(xref:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, xref)
        return this
    def add_chXRef(chXRef:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, chXRef)
        return this
    def add_amplification(amplification:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, amplification)
        return this
    def add_iff(iff:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, iff)
        return this
    def add_reinforced(reinforced:bool):
        b_.PrependBoolSlot(30, reinforced, 0)
        return this
    def add_reduced(reduced:bool):
        b_.PrependBoolSlot(31, reduced, 0)
        return this
    def add_hq(hq:bool):
        b_.PrependBoolSlot(32, hq, 0)
        return this
    def add_dummy(dummy:bool):
        b_.PrependBoolSlot(33, dummy, 0)
        return this
    def add_taskForce(taskForce:bool):
        b_.PrependBoolSlot(34, taskForce, 0)
        return this
    def add_feint(feint:bool):
        b_.PrependBoolSlot(35, feint, 0)
        return this
    def add_installation(installation:bool):
        b_.PrependBoolSlot(36, installation, 0)
        return this
    def add_vehType(vehType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, vehType)
        return this
    def add_trkId(trkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, trkId)
        return this
    def add_trackSensors(trackSensors:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, trackSensors)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, origin)
        return this
    def add_dataMode(dataMode:OrbitTrack_Full_dataMode_Enum):
        b_.PrependInt8Slot(44, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, origNetwork)
        return this
    def end():
        return b_.EndObject()

def OrbitTrack_FullStartAouDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OrbitTrack_FullCreateAouDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def OrbitTrack_FullStartTrackSensorsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OrbitTrack_FullCreateTrackSensorsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

