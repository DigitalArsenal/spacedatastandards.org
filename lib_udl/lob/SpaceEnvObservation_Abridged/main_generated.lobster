// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SpaceEnvObservation_Abridged_senReferenceFrame_Enum:
    /// No description available.
    SpaceEnvObservation_Abridged_senReferenceFrame_Enum_J2000 = 0
    /// No description available.
    SpaceEnvObservation_Abridged_senReferenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    SpaceEnvObservation_Abridged_senReferenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    SpaceEnvObservation_Abridged_senReferenceFrame_Enum_TEME = 3
    /// No description available.
    SpaceEnvObservation_Abridged_senReferenceFrame_Enum_ITRF = 4
    /// No description available.
    SpaceEnvObservation_Abridged_senReferenceFrame_Enum_GCRF = 5

enum SpaceEnvObservation_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SpaceEnvObservation_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SpaceEnvObservation_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SpaceEnvObservation_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SpaceEnvObservation_Abridged_dataMode_Enum_EXERCISE = 3

class SpaceEnvObservation_Abridged

/// /// SpaceEnvObservation data.
class SpaceEnvObservation_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The type of message associated with this record.
    /// Example: /// Example: SODM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def msgType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The external system which generated the message, if applicable.
    /// Example: /// Example: System Name
    /// Constraints: Minimum length = 0, Maximum length = 64
    def genSystem() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
    /// Example: /// Example: ECP
    /// Constraints: Minimum length = 0, Maximum length = 64
    def dataType() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-02-10T19:48:09.934Z
    /// Constraints: No constraints specified.
    def genTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Flag indicating that this record contains forecast data.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def forecast() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 18, 0))
    /// Flag indicating that this record contains derived data.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def derived() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 20, 0))
    /// Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
    /// Example: /// Example: 41866
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
    /// Example: /// Example: 41866
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: 41866
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: ECP-1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ECP-1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
    /// Example: /// Example: ONORBIT
    /// Constraints: Minimum length = 0, Maximum length = 64
    def observatoryType() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The name of the observatory from which this data was collected.
    /// Example: /// Example: GOES-16
    /// Constraints: Minimum length = 0, Maximum length = 128
    def observatoryName() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Additional notes concerning the observatory.
    /// Example: /// Example: Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def observatoryNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
    /// Example: /// Example: MAGNETOMETER
    /// Constraints: Minimum length = 0, Maximum length = 64
    def instrumentType() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 38.8339
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -104.8214
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
    /// Example: /// Example: 35785.3732
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def senReferenceFrame() -> SpaceEnvObservation_Abridged_senReferenceFrame_Enum:
        return SpaceEnvObservation_Abridged_senReferenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 46, 0))
    /// Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
    /// Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
    /// Constraints: No constraints specified.
    def senPos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def senPos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
    /// Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
    /// Constraints: No constraints specified.
    def senVel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def senVel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// The sensor measurement type of the observation data contained in this record.
    /// Example: /// Example: ENERGETIC PARTICLES
    /// Constraints: Minimum length = 0, Maximum length = 64
    def measType() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The energy level bin of the sensor associated with this measurement.
    /// Example: /// Example: 0500-700 keV
    /// Constraints: Minimum length = 0, Maximum length = 64
    def senEnergyLevel() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
    /// Example: /// Example: ECPOBSET-478125
    /// Constraints: Minimum length = 0, Maximum length = 36
    def obSetId() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
    /// Example: /// Example: PROTON
    /// Constraints: Minimum length = 0, Maximum length = 24
    def particleType() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-06-07T14:17:39.653Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// A collection of individual space environment observations.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def seoList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 62) + i * 4)
    def seoList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 62)
    /// The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
    /// Example: /// Example: GOOD
    /// Constraints: Minimum length = 0, Maximum length = 16
    def quality() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Descriptive or additional information associated with this observation record.
    /// Example: /// Example: Observation Data Description Text
    /// Constraints: Minimum length = 0, Maximum length = 512
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: energetic charged particle
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['SPACEENVOB', 'SGI']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 72) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 72)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SpaceEnvObservation_Abridged_dataMode_Enum:
        return SpaceEnvObservation_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 82, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)

def GetRootAsSpaceEnvObservation_Abridged(buf:string): return SpaceEnvObservation_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SpaceEnvObservation_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(41)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_msgType(msgType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, msgType)
        return this
    def add_genSystem(genSystem:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, genSystem)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, externalId)
        return this
    def add_dataType(dataType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, dataType)
        return this
    def add_genTime(genTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, genTime)
        return this
    def add_forecast(forecast:bool):
        b_.PrependBoolSlot(7, forecast, 0)
        return this
    def add_derived(derived:bool):
        b_.PrependBoolSlot(8, derived, 0)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(10, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, origObjectId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origSensorId)
        return this
    def add_observatoryType(observatoryType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, observatoryType)
        return this
    def add_observatoryName(observatoryName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, observatoryName)
        return this
    def add_observatoryNotes(observatoryNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, observatoryNotes)
        return this
    def add_instrumentType(instrumentType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, instrumentType)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(18, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(19, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(20, alt, 0.0)
        return this
    def add_senReferenceFrame(senReferenceFrame:SpaceEnvObservation_Abridged_senReferenceFrame_Enum):
        b_.PrependInt8Slot(21, senReferenceFrame, 0)
        return this
    def add_senPos(senPos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, senPos)
        return this
    def add_senVel(senVel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, senVel)
        return this
    def add_measType(measType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, measType)
        return this
    def add_senEnergyLevel(senEnergyLevel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, senEnergyLevel)
        return this
    def add_obSetId(obSetId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, obSetId)
        return this
    def add_particleType(particleType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, particleType)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, obTime)
        return this
    def add_seoList(seoList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, seoList)
        return this
    def add_quality(quality:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, quality)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, description)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, descriptor)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, srcIds)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, origin)
        return this
    def add_dataMode(dataMode:SpaceEnvObservation_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(39, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, origNetwork)
        return this
    def end():
        return b_.EndObject()

def SpaceEnvObservation_AbridgedStartSenPosVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpaceEnvObservation_AbridgedCreateSenPosVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SpaceEnvObservation_AbridgedStartSenVelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpaceEnvObservation_AbridgedCreateSenVelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SpaceEnvObservation_AbridgedStartSeoListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpaceEnvObservation_AbridgedCreateSeoListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SpaceEnvObservation_AbridgedStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpaceEnvObservation_AbridgedCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def SpaceEnvObservation_AbridgedStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def SpaceEnvObservation_AbridgedCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

