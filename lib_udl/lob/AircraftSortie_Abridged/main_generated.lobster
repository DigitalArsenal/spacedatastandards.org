// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AircraftSortie_Abridged_paperStatus_Enum:
    /// No description available.
    AircraftSortie_Abridged_paperStatus_Enum_PUBLISHED = 0
    /// No description available.
    AircraftSortie_Abridged_paperStatus_Enum_DELETED = 1
    /// No description available.
    AircraftSortie_Abridged_paperStatus_Enum_UPDATED = 2
    /// No description available.
    AircraftSortie_Abridged_paperStatus_Enum_READ = 3

enum AircraftSortie_Abridged_pprStatus_Enum:
    /// No description available.
    AircraftSortie_Abridged_pprStatus_Enum_NOT_REQUIRED = 0
    /// No description available.
    AircraftSortie_Abridged_pprStatus_Enum_REQUIRED_NOT_REQUESTED = 1
    /// No description available.
    AircraftSortie_Abridged_pprStatus_Enum_GRANTED = 2
    /// No description available.
    AircraftSortie_Abridged_pprStatus_Enum_PENDING = 3

enum AircraftSortie_Abridged_rvnReq_Enum:
    /// No description available.
    AircraftSortie_Abridged_rvnReq_Enum_N = 0
    /// No description available.
    AircraftSortie_Abridged_rvnReq_Enum_R = 1
    /// No description available.
    AircraftSortie_Abridged_rvnReq_Enum_C6 = 2
    /// No description available.
    AircraftSortie_Abridged_rvnReq_Enum_R6 = 3

enum AircraftSortie_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AircraftSortie_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AircraftSortie_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AircraftSortie_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AircraftSortie_Abridged_dataMode_Enum_EXERCISE = 3

class AircraftSortie_Abridged

/// /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
class AircraftSortie_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: AIRCRAFTSORTIE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The sortie identifier provided by the originating source.
    /// Example: /// Example: A0640
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origSortieId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the aircraft.
    /// Example: /// Example: REF-AIRCRAFT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAircraft() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Alternate Aircraft Identifier provided by source.
    /// Example: /// Example: ALT-AIRCRAFT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def aircraftAltId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The tail number of the aircraft assigned to this sortie.
    /// Example: /// Example: Tail_1
    /// Constraints: Minimum length = 0, Maximum length = 16
    def tailNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The aircraft Model Design Series designation assigned to this sortie.
    /// Example: /// Example: C017A
    /// Constraints: Minimum length = 0, Maximum length = 36
    def aircraftMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
    /// Example: /// Example: AE123C
    /// Constraints: Minimum length = 0, Maximum length = 16
    def aircraftADSB() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    /// Example: /// Example: 2021-01-01
    /// Constraints: No constraints specified.
    def sortieDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The external system line number of this sortie.
    /// Example: /// Example: 99
    /// Constraints: No constraints specified.
    def lineNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// The unique identifier of the mission to which this sortie is assigned.
    /// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The mission ID according to the source system.
    /// Example: /// Example: ABLE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def missionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The Air Mobility Command (AMC) mission number of the sortie.
    /// Example: /// Example: AJM512571333
    /// Constraints: Minimum length = 0, Maximum length = 36
    def amcMsnNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The type of mission (e.g. SAAM, CHNL, etc.).
    /// Example: /// Example: SAAM
    /// Constraints: Minimum length = 0, Maximum length = 36
    def amcMsnType() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The call sign assigned to the aircraft on this sortie.
    /// Example: /// Example: BAKER
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Joint Chiefs of Staff priority of this sortie.
    /// Example: /// Example: 1A3
    /// Constraints: Minimum length = 0, Maximum length = 3
    def jcsPriority() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The planned primary Standard Conventional Load of the aircraft for this sortie.
    /// Example: /// Example: ABC
    /// Constraints: Minimum length = 0, Maximum length = 24
    def primarySCL() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The planned secondary Standard Conventional Load of the aircraft for this sortie.
    /// Example: /// Example: ABC
    /// Constraints: Minimum length = 0, Maximum length = 24
    def secondarySCL() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Aircraft configuration required for the mission.
    /// Example: /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 8
    def reqConfig() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
    /// Example: /// Example: C-1
    /// Constraints: Minimum length = 0, Maximum length = 8
    def cargoConfig() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Mass of fuel required for this leg of the sortie, in kilograms.
    /// Example: /// Example: 20000.1
    /// Constraints: No constraints specified.
    def fuelReq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Liquid oxygen required on the aircraft for the crew compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    def oxyReqCrew() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    def oxyOnCrew() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Liquid oxygen required on the aircraft for the troop compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    def oxyReqPax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
    /// Example: /// Example: 12.3
    /// Constraints: No constraints specified.
    def oxyOnPax() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The Alert Status code.
    /// Example: /// Example: C1
    /// Constraints: Minimum length = 0, Maximum length = 24
    def alertStatusCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// The amount of time allowed between launch order and takeoff, in seconds.
    /// Example: /// Example: 22
    /// Constraints: No constraints specified.
    def alertStatus() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// The current state of this sortie.
    /// Example: /// Example: Park
    /// Constraints: Minimum length = 0, Maximum length = 32
    def currentState() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// The itinerary identifier of the departure location.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def depItinerary() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// The departure International Civil Aviation Organization (ICAO) of this sortie.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def depICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// The departure International Aviation Transport Association (IATA) code of this sortie.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    def depIATA() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// The departure Federal Aviation Administration (FAA) code of this sortie.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    def depFAA() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def plannedDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def estDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// The actual departure time, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def actualDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T00:55:01.123Z
    /// Constraints: No constraints specified.
    def estBlockOutTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T00:55:01.123Z
    /// Constraints: No constraints specified.
    def actualBlockOutTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Purpose code at the departure location of this sortie.
    /// Example: /// Example: P
    /// Constraints: Minimum length = 0, Maximum length = 10
    def depPurposeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The itinerary identifier of the arrival location.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    def arrItinerary() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// The arrival International Civil Aviation Organization (ICAO) of this sortie.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 4
    def arrICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// The arrival International Aviation Transport Association (IATA) code of this sortie.
    /// Example: /// Example: AAA
    /// Constraints: Minimum length = 0, Maximum length = 3
    def arrIATA() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// The arrival Federal Aviation Administration (FAA) code of this sortie.
    /// Example: /// Example: FAA1
    /// Constraints: Minimum length = 0, Maximum length = 5
    def arrFAA() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def plannedArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def estArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def actualArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:06:01.123Z
    /// Constraints: No constraints specified.
    def estBlockInTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-01T01:06:01.123Z
    /// Constraints: No constraints specified.
    def actualBlockInTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Purpose code at the arrival location of this sortie.
    /// Example: /// Example: O
    /// Constraints: Minimum length = 0, Maximum length = 10
    def arrPurposeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2021-01-03T01:01:01.123Z
    /// Constraints: No constraints specified.
    def dhd() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Reason the aircraft must return to home station by its due home date.
    /// Example: /// Example: Due for maintenance
    /// Constraints: Minimum length = 0, Maximum length = 32
    def dhdReason() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Aircraft event text.
    /// Example: /// Example: Example event
    /// Constraints: Minimum length = 0, Maximum length = 128
    def aircraftEvent() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
    /// Example: /// Example: OPS
    /// Constraints: Minimum length = 0, Maximum length = 16
    def soe() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// The leg number of this sortie.
    /// Example: /// Example: 14
    /// Constraints: No constraints specified.
    def legNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 108, 0)
    /// The planned flight time for this sortie, in minutes.
    /// Example: /// Example: 104.5
    /// Constraints: No constraints specified.
    def flightTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// Scheduled ground time, in minutes.
    /// Example: /// Example: 387.8
    /// Constraints: No constraints specified.
    def gndTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// The version number of the crew paper.
    /// Example: /// Example: 1.1
    /// Constraints: Minimum length = 0, Maximum length = 16
    def papersVersion() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// Name of the uploaded PDF.
    /// Example: /// Example: ExampleFileName
    /// Constraints: Minimum length = 0, Maximum length = 512
    def filename() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Size of the supporting PDF, in bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def filesize() -> int:
        return flatbuffers.field_int32(buf_, pos_, 120, 0)
    /// The status of the supporting document.
    /// Example: /// Example: PUBLISHED
    /// Constraints: Minimum length = 0, Maximum length = 9
    def paperStatus() -> AircraftSortie_Abridged_paperStatus_Enum:
        return AircraftSortie_Abridged_paperStatus_Enum(flatbuffers.field_int8(buf_, pos_, 122, 0))
    /// The prior permission required (PPR) status.
    /// Example: /// Example: PENDING
    /// Constraints: Minimum length = 0, Maximum length = 22
    def pprStatus() -> AircraftSortie_Abridged_pprStatus_Enum:
        return AircraftSortie_Abridged_pprStatus_Enum(flatbuffers.field_int8(buf_, pos_, 124, 0))
    /// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
    /// Example: /// Example: 2024-09-09T01:01:01.123Z
    /// Constraints: No constraints specified.
    def missionUpdate() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// The primary delay code.
    /// Example: /// Example: 500
    /// Constraints: Minimum length = 0, Maximum length = 10
    def delayCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// The last name of the aircraft commander.
    /// Example: /// Example: Smith
    /// Constraints: Minimum length = 0, Maximum length = 36
    def commanderName() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
    /// Example: /// Example: 7198675309
    /// Constraints: Minimum length = 0, Maximum length = 45
    def fmDeskNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 132)
    /// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
    /// Example: /// Example: Smith
    /// Constraints: Minimum length = 0, Maximum length = 64
    def fmName() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 2
    def rvnReq() -> AircraftSortie_Abridged_rvnReq_Enum:
        return AircraftSortie_Abridged_rvnReq_Enum(flatbuffers.field_int8(buf_, pos_, 136, 0))
    /// The number of passengers tasked for this sortie.
    /// Example: /// Example: 17
    /// Constraints: No constraints specified.
    def passengers() -> int:
        return flatbuffers.field_int32(buf_, pos_, 138, 0)
    /// The POI parking location.
    /// Example: /// Example: KCOS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def parkingLoc() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// Remarks concerning the sortie objective.
    /// Example: /// Example: Some objective remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    def objectiveRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 142)
    /// Remarks concerning the aircraft.
    /// Example: /// Example: Some remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    def aircraftRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// Remarks concerning the schedule.
    /// Example: /// Example: Some schedule remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    def scheduleRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 146)
    /// Remarks concerning the results of this sortie.
    /// Example: /// Example: Some remark about aircraft A
    /// Constraints: Minimum length = 0, Maximum length = 512
    def resultRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 148)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 150)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 152)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 154)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 156)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 158)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AircraftSortie_Abridged_dataMode_Enum:
        return AircraftSortie_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 160, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)

def GetRootAsAircraftSortie_Abridged(buf:string): return AircraftSortie_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct AircraftSortie_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(80)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_origSortieId(origSortieId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, origSortieId)
        return this
    def add_idAircraft(idAircraft:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idAircraft)
        return this
    def add_aircraftAltId(aircraftAltId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, aircraftAltId)
        return this
    def add_tailNumber(tailNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, tailNumber)
        return this
    def add_aircraftMDS(aircraftMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, aircraftMDS)
        return this
    def add_aircraftADSB(aircraftADSB:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, aircraftADSB)
        return this
    def add_sortieDate(sortieDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, sortieDate)
        return this
    def add_lineNumber(lineNumber:int):
        b_.PrependInt32Slot(9, lineNumber, 0)
        return this
    def add_idMission(idMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, idMission)
        return this
    def add_missionId(missionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, missionId)
        return this
    def add_amcMsnNum(amcMsnNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, amcMsnNum)
        return this
    def add_amcMsnType(amcMsnType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, amcMsnType)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, callSign)
        return this
    def add_jcsPriority(jcsPriority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, jcsPriority)
        return this
    def add_primarySCL(primarySCL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, primarySCL)
        return this
    def add_secondarySCL(secondarySCL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, secondarySCL)
        return this
    def add_reqConfig(reqConfig:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, reqConfig)
        return this
    def add_cargoConfig(cargoConfig:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, cargoConfig)
        return this
    def add_fuelReq(fuelReq:float):
        b_.PrependFloat64Slot(20, fuelReq, 0.0)
        return this
    def add_oxyReqCrew(oxyReqCrew:float):
        b_.PrependFloat64Slot(21, oxyReqCrew, 0.0)
        return this
    def add_oxyOnCrew(oxyOnCrew:float):
        b_.PrependFloat64Slot(22, oxyOnCrew, 0.0)
        return this
    def add_oxyReqPax(oxyReqPax:float):
        b_.PrependFloat64Slot(23, oxyReqPax, 0.0)
        return this
    def add_oxyOnPax(oxyOnPax:float):
        b_.PrependFloat64Slot(24, oxyOnPax, 0.0)
        return this
    def add_alertStatusCode(alertStatusCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, alertStatusCode)
        return this
    def add_alertStatus(alertStatus:int):
        b_.PrependInt32Slot(26, alertStatus, 0)
        return this
    def add_currentState(currentState:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, currentState)
        return this
    def add_depItinerary(depItinerary:int):
        b_.PrependInt32Slot(28, depItinerary, 0)
        return this
    def add_depICAO(depICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, depICAO)
        return this
    def add_depIATA(depIATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, depIATA)
        return this
    def add_depFAA(depFAA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, depFAA)
        return this
    def add_plannedDepTime(plannedDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, plannedDepTime)
        return this
    def add_estDepTime(estDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, estDepTime)
        return this
    def add_actualDepTime(actualDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, actualDepTime)
        return this
    def add_estBlockOutTime(estBlockOutTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, estBlockOutTime)
        return this
    def add_actualBlockOutTime(actualBlockOutTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, actualBlockOutTime)
        return this
    def add_depPurposeCode(depPurposeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, depPurposeCode)
        return this
    def add_arrItinerary(arrItinerary:int):
        b_.PrependInt32Slot(38, arrItinerary, 0)
        return this
    def add_arrICAO(arrICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, arrICAO)
        return this
    def add_arrIATA(arrIATA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, arrIATA)
        return this
    def add_arrFAA(arrFAA:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, arrFAA)
        return this
    def add_plannedArrTime(plannedArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, plannedArrTime)
        return this
    def add_estArrTime(estArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, estArrTime)
        return this
    def add_actualArrTime(actualArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, actualArrTime)
        return this
    def add_estBlockInTime(estBlockInTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, estBlockInTime)
        return this
    def add_actualBlockInTime(actualBlockInTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, actualBlockInTime)
        return this
    def add_arrPurposeCode(arrPurposeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, arrPurposeCode)
        return this
    def add_dhd(dhd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, dhd)
        return this
    def add_dhdReason(dhdReason:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, dhdReason)
        return this
    def add_aircraftEvent(aircraftEvent:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, aircraftEvent)
        return this
    def add_soe(soe:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, soe)
        return this
    def add_legNum(legNum:int):
        b_.PrependInt32Slot(52, legNum, 0)
        return this
    def add_flightTime(flightTime:float):
        b_.PrependFloat64Slot(53, flightTime, 0.0)
        return this
    def add_gndTime(gndTime:float):
        b_.PrependFloat64Slot(54, gndTime, 0.0)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, rawFileURI)
        return this
    def add_papersVersion(papersVersion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, papersVersion)
        return this
    def add_filename(filename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, filename)
        return this
    def add_filesize(filesize:int):
        b_.PrependInt32Slot(58, filesize, 0)
        return this
    def add_paperStatus(paperStatus:AircraftSortie_Abridged_paperStatus_Enum):
        b_.PrependInt8Slot(59, paperStatus, 0)
        return this
    def add_pprStatus(pprStatus:AircraftSortie_Abridged_pprStatus_Enum):
        b_.PrependInt8Slot(60, pprStatus, 0)
        return this
    def add_missionUpdate(missionUpdate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, missionUpdate)
        return this
    def add_delayCode(delayCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, delayCode)
        return this
    def add_commanderName(commanderName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, commanderName)
        return this
    def add_fmDeskNum(fmDeskNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, fmDeskNum)
        return this
    def add_fmName(fmName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, fmName)
        return this
    def add_rvnReq(rvnReq:AircraftSortie_Abridged_rvnReq_Enum):
        b_.PrependInt8Slot(66, rvnReq, 0)
        return this
    def add_passengers(passengers:int):
        b_.PrependInt32Slot(67, passengers, 0)
        return this
    def add_parkingLoc(parkingLoc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, parkingLoc)
        return this
    def add_objectiveRemarks(objectiveRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(69, objectiveRemarks)
        return this
    def add_aircraftRemarks(aircraftRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, aircraftRemarks)
        return this
    def add_scheduleRemarks(scheduleRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(71, scheduleRemarks)
        return this
    def add_resultRemarks(resultRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(72, resultRemarks)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(73, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(74, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(76, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(77, origin)
        return this
    def add_dataMode(dataMode:AircraftSortie_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(78, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, origNetwork)
        return this
    def end():
        return b_.EndObject()

