// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Conjunction_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Conjunction_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Conjunction_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Conjunction_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Conjunction_Abridged_dataMode_Enum_EXERCISE = 3

class Conjunction_Abridged

/// /// Stores the results of a particular Conjunction Assessment (CA) run.
class Conjunction_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: CONJUNCTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the primary satellite on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit1() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the secondary satellite on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit2() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
    /// Example: /// Example: CONJUNCTION
    /// Constraints: Minimum length = 0, Maximum length = 24
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Time of closest approach (TCA) in UTC.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def tca() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Distance between objects at Time of Closest Approach (TCA) in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def missDistance() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def collisionProb() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// The method that was used to calculate the collision probability, ex. FOSTER-1992.
    /// Example: /// Example: FOSTER-1992
    /// Constraints: Minimum length = 0, Maximum length = 32
    def collisionProbMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The filename of the primary (object1) ephemeris used in the screening, if applicable.
    /// Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
    /// Constraints: Minimum length = 0, Maximum length = 64
    def ephemName1() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
    /// Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
    /// Constraints: Minimum length = 0, Maximum length = 36
    def esId1() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The filename of the secondary (object2) ephemeris used in the screening, if applicable.
    /// Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
    /// Constraints: Minimum length = 0, Maximum length = 64
    def ephemName2() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
    /// Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
    /// Constraints: Minimum length = 0, Maximum length = 36
    def esId2() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Distance between objects along Radial Vector at Time of Closest Approach in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relPosR() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Distance between objects along Tangential Vector in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relPosT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Distance between objects along Normal vector in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relPosN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relVelMag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relVelR() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Closing velocity between objects along Tangential Vector in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relVelT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Closing velocity between objects along Normal Vector in meters/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def relVelN() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The start time in UTC of the screening period for the conjunction assessment.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def screenEntryTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The stop time in UTC of the screening period for the conjunction assessment.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def screenExitTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def screenVolumeX() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def screenVolumeY() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def screenVolumeZ() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// The shape (BOX, ELLIPSOID) of the screening volume.
    /// Example: /// Example: ELLIPSOID
    /// Constraints: Minimum length = 0, Maximum length = 12
    def volShape() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:02:01.123456Z
    /// Constraints: No constraints specified.
    def volEntryTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2021-01-01T01:02:28.123456Z
    /// Constraints: No constraints specified.
    def volExitTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Penetration Level Sigma.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def penetrationLevelSigma() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
    /// Example: /// Example: REF-STATEVECTOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idStateVector1() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Time of last positive metric observation of the primary satellite.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def lastObTime1() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.016386
    /// Constraints: No constraints specified.
    def cdAoM1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    /// Example: /// Example: 0.013814
    /// Constraints: No constraints specified.
    def crAoM1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.033814
    /// Constraints: No constraints specified.
    def thrustAccel1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
    /// Example: /// Example: REF-STATEVECTOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idStateVector2() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Time of last positive metric observation of the secondary satellite.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def lastObTime2() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.016386
    /// Constraints: No constraints specified.
    def cdAoM2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    /// Example: /// Example: 0.013814
    /// Constraints: No constraints specified.
    def crAoM2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    /// Example: /// Example: 0.033814
    /// Constraints: No constraints specified.
    def thrustAccel2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Additional notes from data providers.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Commander's critical information requirements notes.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 128
    def ccir() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Emergency comments.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def concernNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Flag indicating if State department was notified.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def stateDeptNotified() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 88, 0))
    /// Flag indicating if owner was contacted.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def ownerContacted() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 90, 0))
    /// Link to filename associated with JMS record.
    /// Example: /// Example: Example link
    /// Constraints: Minimum length = 0, Maximum length = 64
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Spacecraft name(s) for which the Collision message is provided.
    /// Example: /// Example: Message for space craft A
    /// Constraints: Minimum length = 0, Maximum length = 64
    def messageFor() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// JMS provided message ID link.
    /// Example: /// Example: MESSAGE-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def messageId() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uvwWarn() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 98, 0))
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def smallRelVelWarning() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 100, 0))
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def largeRelPosWarning() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 102, 0))
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def smallCovWarning() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 104, 0))
    /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def largeCovWarning() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 106, 0))
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def originator() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def eventId() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: sample_descriptor here
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Conjunction_Abridged_dataMode_Enum:
        return Conjunction_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 120, 0))
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def stateVector1() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def stateVector2() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Satellite/catalog number of the target on-orbit primary object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def satNo1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 130, 0)
    /// Satellite/catalog number of the target on-orbit secondary object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def satNo2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 132, 0)
    /// Optional place holder for an OnOrbit ID that does not exist in UDL.
    /// Example: /// Example: ORIGONORBIT1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origIdOnOrbit1() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// Optional place holder for an OnOrbit ID that does not exist in UDL.
    /// Example: /// Example: ORIGONORBIT2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origIdOnOrbit2() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)

def GetRootAsConjunction_Abridged(buf:string): return Conjunction_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Conjunction_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(68)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit1(idOnOrbit1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit1)
        return this
    def add_idOnOrbit2(idOnOrbit2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit2)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, type)
        return this
    def add_tca(tca:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, tca)
        return this
    def add_missDistance(missDistance:float):
        b_.PrependFloat64Slot(6, missDistance, 0.0)
        return this
    def add_collisionProb(collisionProb:float):
        b_.PrependFloat64Slot(7, collisionProb, 0.0)
        return this
    def add_collisionProbMethod(collisionProbMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, collisionProbMethod)
        return this
    def add_ephemName1(ephemName1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, ephemName1)
        return this
    def add_esId1(esId1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, esId1)
        return this
    def add_ephemName2(ephemName2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, ephemName2)
        return this
    def add_esId2(esId2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, esId2)
        return this
    def add_relPosR(relPosR:float):
        b_.PrependFloat64Slot(13, relPosR, 0.0)
        return this
    def add_relPosT(relPosT:float):
        b_.PrependFloat64Slot(14, relPosT, 0.0)
        return this
    def add_relPosN(relPosN:float):
        b_.PrependFloat64Slot(15, relPosN, 0.0)
        return this
    def add_relVelMag(relVelMag:float):
        b_.PrependFloat64Slot(16, relVelMag, 0.0)
        return this
    def add_relVelR(relVelR:float):
        b_.PrependFloat64Slot(17, relVelR, 0.0)
        return this
    def add_relVelT(relVelT:float):
        b_.PrependFloat64Slot(18, relVelT, 0.0)
        return this
    def add_relVelN(relVelN:float):
        b_.PrependFloat64Slot(19, relVelN, 0.0)
        return this
    def add_screenEntryTime(screenEntryTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, screenEntryTime)
        return this
    def add_screenExitTime(screenExitTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, screenExitTime)
        return this
    def add_screenVolumeX(screenVolumeX:float):
        b_.PrependFloat64Slot(22, screenVolumeX, 0.0)
        return this
    def add_screenVolumeY(screenVolumeY:float):
        b_.PrependFloat64Slot(23, screenVolumeY, 0.0)
        return this
    def add_screenVolumeZ(screenVolumeZ:float):
        b_.PrependFloat64Slot(24, screenVolumeZ, 0.0)
        return this
    def add_volShape(volShape:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, volShape)
        return this
    def add_volEntryTime(volEntryTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, volEntryTime)
        return this
    def add_volExitTime(volExitTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, volExitTime)
        return this
    def add_penetrationLevelSigma(penetrationLevelSigma:float):
        b_.PrependFloat64Slot(28, penetrationLevelSigma, 0.0)
        return this
    def add_idStateVector1(idStateVector1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, idStateVector1)
        return this
    def add_lastObTime1(lastObTime1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, lastObTime1)
        return this
    def add_cdAoM1(cdAoM1:float):
        b_.PrependFloat64Slot(31, cdAoM1, 0.0)
        return this
    def add_crAoM1(crAoM1:float):
        b_.PrependFloat64Slot(32, crAoM1, 0.0)
        return this
    def add_thrustAccel1(thrustAccel1:float):
        b_.PrependFloat64Slot(33, thrustAccel1, 0.0)
        return this
    def add_idStateVector2(idStateVector2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, idStateVector2)
        return this
    def add_lastObTime2(lastObTime2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, lastObTime2)
        return this
    def add_cdAoM2(cdAoM2:float):
        b_.PrependFloat64Slot(36, cdAoM2, 0.0)
        return this
    def add_crAoM2(crAoM2:float):
        b_.PrependFloat64Slot(37, crAoM2, 0.0)
        return this
    def add_thrustAccel2(thrustAccel2:float):
        b_.PrependFloat64Slot(38, thrustAccel2, 0.0)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, comments)
        return this
    def add_ccir(ccir:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, ccir)
        return this
    def add_concernNotes(concernNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, concernNotes)
        return this
    def add_stateDeptNotified(stateDeptNotified:bool):
        b_.PrependBoolSlot(42, stateDeptNotified, 0)
        return this
    def add_ownerContacted(ownerContacted:bool):
        b_.PrependBoolSlot(43, ownerContacted, 0)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, rawFileURI)
        return this
    def add_messageFor(messageFor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, messageFor)
        return this
    def add_messageId(messageId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, messageId)
        return this
    def add_uvwWarn(uvwWarn:bool):
        b_.PrependBoolSlot(47, uvwWarn, 0)
        return this
    def add_smallRelVelWarning(smallRelVelWarning:bool):
        b_.PrependBoolSlot(48, smallRelVelWarning, 0)
        return this
    def add_largeRelPosWarning(largeRelPosWarning:bool):
        b_.PrependBoolSlot(49, largeRelPosWarning, 0)
        return this
    def add_smallCovWarning(smallCovWarning:bool):
        b_.PrependBoolSlot(50, smallCovWarning, 0)
        return this
    def add_largeCovWarning(largeCovWarning:bool):
        b_.PrependBoolSlot(51, largeCovWarning, 0)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, transactionId)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, origin)
        return this
    def add_originator(originator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, originator)
        return this
    def add_eventId(eventId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, eventId)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, descriptor)
        return this
    def add_dataMode(dataMode:Conjunction_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(58, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, createdBy)
        return this
    def add_stateVector1(stateVector1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, stateVector1)
        return this
    def add_stateVector2(stateVector2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, stateVector2)
        return this
    def add_satNo1(satNo1:int):
        b_.PrependInt32Slot(63, satNo1, 0)
        return this
    def add_satNo2(satNo2:int):
        b_.PrependInt32Slot(64, satNo2, 0)
        return this
    def add_origIdOnOrbit1(origIdOnOrbit1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, origIdOnOrbit1)
        return this
    def add_origIdOnOrbit2(origIdOnOrbit2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, origIdOnOrbit2)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, origNetwork)
        return this
    def end():
        return b_.EndObject()

