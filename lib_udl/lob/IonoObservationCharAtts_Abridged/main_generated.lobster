// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationCharAtts_Abridged

/// /// Characteristic attributes of a IonoObservation.
class IonoObservationCharAtts_Abridged : flatbuffers.handle
    /// Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
    /// Example: /// Example: 04
    /// Constraints: Minimum length = 0, Maximum length = 3
    def ursiID() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
    /// Example: /// Example: hprimeF2
    /// Constraints: Minimum length = 0, Maximum length = 16
    def charName() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
    /// Example: /// Example: 1.26
    /// Constraints: No constraints specified.
    def lowerBound() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
    /// Example: /// Example: 2.57
    /// Constraints: No constraints specified.
    def upperBound() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
    /// Example: /// Example: T
    /// Constraints: No constraints specified.
    def q() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
    /// Example: /// Example: K
    /// Constraints: No constraints specified.
    def d() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Name of the climate model.
    /// Example: /// Example: IRI
    /// Constraints: Minimum length = 0, Maximum length = 64
    def climateModelName() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// List of options for the climate model.
    /// Example: /// Example: ['URSI-88', 'No storm']
    /// Constraints: No constraints specified.
    def climateModelOptions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def climateModelOptions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// Input parameters for the climate model.
    /// Example: /// Example: ['ISSN1 88.1', 'Option 2']
    /// Constraints: No constraints specified.
    def climateModelInputParams(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def climateModelInputParams_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
    /// Example: /// Example: 1sigma
    /// Constraints: No constraints specified.
    def uncertaintyBoundType() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)

def GetRootAsIonoObservationCharAtts_Abridged(buf:string): return IonoObservationCharAtts_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationCharAtts_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(10)
        return this
    def add_ursiID(ursiID:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, ursiID)
        return this
    def add_charName(charName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, charName)
        return this
    def add_lowerBound(lowerBound:float):
        b_.PrependFloat64Slot(2, lowerBound, 0.0)
        return this
    def add_upperBound(upperBound:float):
        b_.PrependFloat64Slot(3, upperBound, 0.0)
        return this
    def add_q(q:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, q)
        return this
    def add_d(d:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, d)
        return this
    def add_climateModelName(climateModelName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, climateModelName)
        return this
    def add_climateModelOptions(climateModelOptions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, climateModelOptions)
        return this
    def add_climateModelInputParams(climateModelInputParams:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, climateModelInputParams)
        return this
    def add_uncertaintyBoundType(uncertaintyBoundType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, uncertaintyBoundType)
        return this
    def end():
        return b_.EndObject()

def IonoObservationCharAtts_AbridgedStartClimateModelOptionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationCharAtts_AbridgedCreateClimateModelOptionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationCharAtts_AbridgedStartClimateModelInputParamsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationCharAtts_AbridgedCreateClimateModelInputParamsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

