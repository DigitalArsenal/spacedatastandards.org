// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EvacCasualtyInfo_Ingest

/// /// Identity and medical information on the patient to be evacuated.
class EvacCasualtyInfo_Ingest : flatbuffers.handle
    /// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
    /// Example: /// Example: ROUTINE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def priority() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
    /// Example: /// Example: GROUND
    /// Constraints: Minimum length = 0, Maximum length = 64
    def evacType() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
    /// Example: /// Example: DENTAL
    /// Constraints: Minimum length = 0, Maximum length = 32
    def casualtyType() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
    /// Example: /// Example: FACE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def bodyPart() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
    /// Example: /// Example: NONE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def contamType() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
    /// Example: /// Example: ['OXYGEN', 'HOIST']
    /// Constraints: No constraints specified.
    def specMedEquip(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def specMedEquip_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Optional casualty key.
    /// Example: /// Example: casualty-007
    /// Constraints: Minimum length = 0, Maximum length = 36
    def casualtyKey() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
    /// Example: /// Example: US CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 32
    def patientStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
    /// Example: /// Example: FRIEND CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 32
    def patientIdentity() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The country code indicating the citizenship of the patient.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def nationality() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
    /// Example: /// Example: CIVILIAN
    /// Constraints: Minimum length = 0, Maximum length = 16
    def payGrade() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The patient common or legal name.
    /// Example: /// Example: John Smith
    /// Constraints: Minimum length = 0, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The patient age, in years.
    /// Example: /// Example: 35
    /// Constraints: No constraints specified.
    def age() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// The patient sex (MALE, FEMALE).
    /// Example: /// Example: MALE
    /// Constraints: Minimum length = 0, Maximum length = 8
    def gender() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Last 4 characters of the patient social security code, or equivalent.
    /// Example: /// Example: 1234
    /// Constraints: Minimum length = 0, Maximum length = 4
    def last4SSN() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
    /// Example: /// Example: O NEG
    /// Constraints: Minimum length = 0, Maximum length = 6
    def bloodType() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
    /// Example: /// Example: CIV
    /// Constraints: Minimum length = 0, Maximum length = 32
    def service() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The call sign of this patient.
    /// Example: /// Example: SHARK
    /// Constraints: Minimum length = 0, Maximum length = 128
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The career field of this patient.
    /// Example: /// Example: Healthcare
    /// Constraints: Minimum length = 0, Maximum length = 128
    def occSpeciality() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [-33.123, 150.33, 0.24]
    /// Constraints: No constraints specified.
    def burialLocation(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def burialLocation_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    /// Example: /// Example: [12.44, 122.55, 0.98]
    /// Constraints: No constraints specified.
    def collectionPoint(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def collectionPoint_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Unique identifier for the patient care provider.
    /// Example: /// Example: CARE_PROVIDER-1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def careProviderUrn() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
    /// Example: /// Example: EVACUATE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def dispositionType() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
    /// Example: /// Example: EVACUATE WOUNDED
    /// Constraints: Minimum length = 0, Maximum length = 32
    def disposition() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
    /// Example: /// Example: DEVICE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def reportGen() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def reportTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Additional comments on the  patient's casualty information.
    /// Example: /// Example: Comments relating to this casualty info.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Medical condition causation information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def etiology(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def etiology_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// Treatment information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def treatment(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def treatment_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)
    /// Information obtained for vital signs.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def vitalSignData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 62) + i * 4)
    def vitalSignData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 62)
    /// Health state information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def healthState(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def healthState_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Health condition information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def condition(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 66) + i * 4)
    def condition_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 66)
    /// Medication specifics.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def medication(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 68) + i * 4)
    def medication_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 68)
    /// Injury specifics.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def injury(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def injury_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Allergy information.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def allergy(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 72) + i * 4)
    def allergy_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 72)

def GetRootAsEvacCasualtyInfo_Ingest(buf:string): return EvacCasualtyInfo_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct EvacCasualtyInfo_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(35)
        return this
    def add_priority(priority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, priority)
        return this
    def add_evacType(evacType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, evacType)
        return this
    def add_casualtyType(casualtyType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, casualtyType)
        return this
    def add_bodyPart(bodyPart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, bodyPart)
        return this
    def add_contamType(contamType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, contamType)
        return this
    def add_specMedEquip(specMedEquip:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, specMedEquip)
        return this
    def add_casualtyKey(casualtyKey:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, casualtyKey)
        return this
    def add_patientStatus(patientStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, patientStatus)
        return this
    def add_patientIdentity(patientIdentity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, patientIdentity)
        return this
    def add_nationality(nationality:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, nationality)
        return this
    def add_payGrade(payGrade:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, payGrade)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, name)
        return this
    def add_age(age:int):
        b_.PrependInt32Slot(12, age, 0)
        return this
    def add_gender(gender:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, gender)
        return this
    def add_last4SSN(last4SSN:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, last4SSN)
        return this
    def add_bloodType(bloodType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, bloodType)
        return this
    def add_service(service:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, service)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, callSign)
        return this
    def add_occSpeciality(occSpeciality:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, occSpeciality)
        return this
    def add_burialLocation(burialLocation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, burialLocation)
        return this
    def add_collectionPoint(collectionPoint:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, collectionPoint)
        return this
    def add_careProviderUrn(careProviderUrn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, careProviderUrn)
        return this
    def add_dispositionType(dispositionType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, dispositionType)
        return this
    def add_disposition(disposition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, disposition)
        return this
    def add_reportGen(reportGen:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, reportGen)
        return this
    def add_reportTime(reportTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, reportTime)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, comments)
        return this
    def add_etiology(etiology:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, etiology)
        return this
    def add_treatment(treatment:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, treatment)
        return this
    def add_vitalSignData(vitalSignData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, vitalSignData)
        return this
    def add_healthState(healthState:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, healthState)
        return this
    def add_condition(condition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, condition)
        return this
    def add_medication(medication:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, medication)
        return this
    def add_injury(injury:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, injury)
        return this
    def add_allergy(allergy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, allergy)
        return this
    def end():
        return b_.EndObject()

def EvacCasualtyInfo_IngestStartSpecMedEquipVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateSpecMedEquipVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartBurialLocationVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateBurialLocationVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartCollectionPointVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateCollectionPointVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartEtiologyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateEtiologyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartTreatmentVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateTreatmentVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartVitalSignDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateVitalSignDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartHealthStateVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateHealthStateVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartConditionVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateConditionVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartMedicationVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateMedicationVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartInjuryVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateInjuryVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EvacCasualtyInfo_IngestStartAllergyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EvacCasualtyInfo_IngestCreateAllergyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

