// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Sensorcharacteristics_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Sensorcharacteristics_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Sensorcharacteristics_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Sensorcharacteristics_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Sensorcharacteristics_Ingest_dataMode_Enum_EXERCISE = 3

class Sensorcharacteristics_Ingest

/// /// Model representation of characteristics and capabilities of a sensor.
class Sensorcharacteristics_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SENSORCHARACTERISTICS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Azimuth rate acquisition limit (rad/min).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def azimuthRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Elevation rate acquisition limit (rad/min).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def elevationRateGeolm() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Minimum range measurement capability of the sensor (km).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def minRangeLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def maxRangeLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def leftClockAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def rightClockAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// The angle of the center of a phased array sensor.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def boresight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// The number of degrees off of the boresight for the sensor (degrees).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def boresightOffAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Negative Range-rate/relative velocity limit (km/sec).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def negativeRangeRateLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Positive Range-rate/relative velocity limit (km/sec).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def positiveRangeRateLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Absolute magnitude acquisition limit for optical sensors.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def magnitudeLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def trackAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def minSignalNoiseRatio() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
    /// Example: /// Example: 3.1
    /// Constraints: No constraints specified.
    def fanBeamWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Maximum taskable range of the sensor (km).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def taskableRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Maximum observable sensor range (km).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def maxObservableRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Radio frequency (if sensor is RF).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def radioFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Radar frequency of the sensor (if a radar sensor).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def radarFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Radar transmit power in Watts.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def transmitPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Horizontal field of view.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def hFOV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Vertical field of view.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def vFOV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Horizontal pixel resolution.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    def hResPixels() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// Vertical pixel resolution.
    /// Example: /// Example: 1000
    /// Constraints: No constraints specified.
    def vResPixels() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Sensor band.
    /// Example: /// Example: BAND
    /// Constraints: Minimum length = 0, Maximum length = 36
    def band() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Max deviation angle of the sensor in degrees.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def maxDeviationAngle() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Optical sensor camera aperture.
    /// Example: /// Example: 2.23
    /// Constraints: No constraints specified.
    def aperture() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Leftmost GEO belt longitude limit for this sensor (if applicable).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def leftGeoBeltLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Rightmost GEO belt longitude limit for this sensor (if applicable).
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def rightGeoBeltLimit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def asrScanRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
    /// Example: /// Example: 1.4
    /// Constraints: No constraints specified.
    def k() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// For radar based sensors, the focal point elevation of the radar at the site, in meters.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def focalPoint() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// For tower sensors, the physical height of the sensor tower, in meters.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def towerHeight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def trueNorthCorrector() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// Angle between magnetic north and true north at the sensor site, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def magDec() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def z1MinRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def z2MinRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def z1MaxRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    /// Example: /// Example: 50.23
    /// Constraints: No constraints specified.
    def z2MaxRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// For radar based sensors, radar maximum unambiguous range, in km.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def radarMUR() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def probFalseAlarm() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def prf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def radarPulseWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// For radar based sensors, number of integrated pulses in a transmit cycle.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def numIntegratedPulses() -> int:
        return flatbuffers.field_int32(buf_, pos_, 96, 0)
    /// Antenna true tilt, in degrees.
    /// Example: /// Example: 20.23
    /// Constraints: No constraints specified.
    def trueTilt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Message data format transmitted by the sensor digitizer.
    /// Example: /// Example: DATA_FORMAT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def radarMessageFormat() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
    /// Example: /// Example: 3.5
    /// Constraints: No constraints specified.
    def systemNoiseTemperature() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Sensorcharacteristics_Ingest_dataMode_Enum:
        return Sensorcharacteristics_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 106, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)

def GetRootAsSensorcharacteristics_Ingest(buf:string): return Sensorcharacteristics_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Sensorcharacteristics_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(54)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idSensor)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origNetwork)
        return this
    def add_azimuthRate(azimuthRate:float):
        b_.PrependFloat64Slot(4, azimuthRate, 0.0)
        return this
    def add_elevationRateGeolm(elevationRateGeolm:float):
        b_.PrependFloat64Slot(5, elevationRateGeolm, 0.0)
        return this
    def add_minRangeLimit(minRangeLimit:float):
        b_.PrependFloat64Slot(6, minRangeLimit, 0.0)
        return this
    def add_maxRangeLimit(maxRangeLimit:float):
        b_.PrependFloat64Slot(7, maxRangeLimit, 0.0)
        return this
    def add_leftClockAngle(leftClockAngle:float):
        b_.PrependFloat64Slot(8, leftClockAngle, 0.0)
        return this
    def add_rightClockAngle(rightClockAngle:float):
        b_.PrependFloat64Slot(9, rightClockAngle, 0.0)
        return this
    def add_boresight(boresight:float):
        b_.PrependFloat64Slot(10, boresight, 0.0)
        return this
    def add_boresightOffAngle(boresightOffAngle:float):
        b_.PrependFloat64Slot(11, boresightOffAngle, 0.0)
        return this
    def add_negativeRangeRateLimit(negativeRangeRateLimit:float):
        b_.PrependFloat64Slot(12, negativeRangeRateLimit, 0.0)
        return this
    def add_positiveRangeRateLimit(positiveRangeRateLimit:float):
        b_.PrependFloat64Slot(13, positiveRangeRateLimit, 0.0)
        return this
    def add_magnitudeLimit(magnitudeLimit:float):
        b_.PrependFloat64Slot(14, magnitudeLimit, 0.0)
        return this
    def add_trackAngle(trackAngle:float):
        b_.PrependFloat64Slot(15, trackAngle, 0.0)
        return this
    def add_minSignalNoiseRatio(minSignalNoiseRatio:float):
        b_.PrependFloat64Slot(16, minSignalNoiseRatio, 0.0)
        return this
    def add_fanBeamWidth(fanBeamWidth:float):
        b_.PrependFloat64Slot(17, fanBeamWidth, 0.0)
        return this
    def add_taskableRange(taskableRange:float):
        b_.PrependFloat64Slot(18, taskableRange, 0.0)
        return this
    def add_maxObservableRange(maxObservableRange:float):
        b_.PrependFloat64Slot(19, maxObservableRange, 0.0)
        return this
    def add_radioFrequency(radioFrequency:float):
        b_.PrependFloat64Slot(20, radioFrequency, 0.0)
        return this
    def add_radarFrequency(radarFrequency:float):
        b_.PrependFloat64Slot(21, radarFrequency, 0.0)
        return this
    def add_transmitPower(transmitPower:float):
        b_.PrependFloat64Slot(22, transmitPower, 0.0)
        return this
    def add_hFOV(hFOV:float):
        b_.PrependFloat64Slot(23, hFOV, 0.0)
        return this
    def add_vFOV(vFOV:float):
        b_.PrependFloat64Slot(24, vFOV, 0.0)
        return this
    def add_hResPixels(hResPixels:int):
        b_.PrependInt32Slot(25, hResPixels, 0)
        return this
    def add_vResPixels(vResPixels:int):
        b_.PrependInt32Slot(26, vResPixels, 0)
        return this
    def add_band(band:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, band)
        return this
    def add_maxDeviationAngle(maxDeviationAngle:float):
        b_.PrependFloat64Slot(28, maxDeviationAngle, 0.0)
        return this
    def add_aperture(aperture:float):
        b_.PrependFloat64Slot(29, aperture, 0.0)
        return this
    def add_leftGeoBeltLimit(leftGeoBeltLimit:float):
        b_.PrependFloat64Slot(30, leftGeoBeltLimit, 0.0)
        return this
    def add_rightGeoBeltLimit(rightGeoBeltLimit:float):
        b_.PrependFloat64Slot(31, rightGeoBeltLimit, 0.0)
        return this
    def add_asrScanRate(asrScanRate:float):
        b_.PrependFloat64Slot(32, asrScanRate, 0.0)
        return this
    def add_k(k:float):
        b_.PrependFloat64Slot(33, k, 0.0)
        return this
    def add_focalPoint(focalPoint:float):
        b_.PrependFloat64Slot(34, focalPoint, 0.0)
        return this
    def add_towerHeight(towerHeight:float):
        b_.PrependFloat64Slot(35, towerHeight, 0.0)
        return this
    def add_trueNorthCorrector(trueNorthCorrector:int):
        b_.PrependInt32Slot(36, trueNorthCorrector, 0)
        return this
    def add_magDec(magDec:float):
        b_.PrependFloat64Slot(37, magDec, 0.0)
        return this
    def add_z1MinRange(z1MinRange:float):
        b_.PrependFloat64Slot(38, z1MinRange, 0.0)
        return this
    def add_z2MinRange(z2MinRange:float):
        b_.PrependFloat64Slot(39, z2MinRange, 0.0)
        return this
    def add_z1MaxRange(z1MaxRange:float):
        b_.PrependFloat64Slot(40, z1MaxRange, 0.0)
        return this
    def add_z2MaxRange(z2MaxRange:float):
        b_.PrependFloat64Slot(41, z2MaxRange, 0.0)
        return this
    def add_radarMUR(radarMUR:float):
        b_.PrependFloat64Slot(42, radarMUR, 0.0)
        return this
    def add_probFalseAlarm(probFalseAlarm:float):
        b_.PrependFloat64Slot(43, probFalseAlarm, 0.0)
        return this
    def add_prf(prf:float):
        b_.PrependFloat64Slot(44, prf, 0.0)
        return this
    def add_radarPulseWidth(radarPulseWidth:float):
        b_.PrependFloat64Slot(45, radarPulseWidth, 0.0)
        return this
    def add_numIntegratedPulses(numIntegratedPulses:int):
        b_.PrependInt32Slot(46, numIntegratedPulses, 0)
        return this
    def add_trueTilt(trueTilt:float):
        b_.PrependFloat64Slot(47, trueTilt, 0.0)
        return this
    def add_radarMessageFormat(radarMessageFormat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, radarMessageFormat)
        return this
    def add_systemNoiseTemperature(systemNoiseTemperature:float):
        b_.PrependFloat64Slot(49, systemNoiseTemperature, 0.0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, source)
        return this
    def add_dataMode(dataMode:Sensorcharacteristics_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(51, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, createdBy)
        return this
    def end():
        return b_.EndObject()

