// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AircraftStatusRemark_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AircraftStatusRemark_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AircraftStatusRemark_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AircraftStatusRemark_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AircraftStatusRemark_Full_dataMode_Enum_EXERCISE = 3

class AircraftStatusRemark_Full

/// /// Properties and characteristics of a remark that is associated with an aircraft status.
class AircraftStatusRemark_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The ID of the Aircraft Status to which this remark applies.
    /// Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idAircraftStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the Aircraft Status Remark record from the originating system.
    /// Example: /// Example: GDSSBL022307131714250077
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altRmkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The name of the remark.
    /// Example: /// Example: DISCREPANCY - 202297501
    /// Constraints: Minimum length = 0, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The text of the remark.
    /// Example: /// Example: Remark text
    /// Constraints: Minimum length = 1, Maximum length = 1024
    def text() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T15:00:00.123Z
    /// Constraints: No constraints specified.
    def timestamp() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The name or ID of the external user that updated this remark in the originating system.
    /// Example: /// Example: JOHN SMITH
    /// Constraints: Minimum length = 0, Maximum length = 36
    def lastUpdatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def lastUpdatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AircraftStatusRemark_Full_dataMode_Enum:
        return AircraftStatusRemark_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 38, 0))

def GetRootAsAircraftStatusRemark_Full(buf:string): return AircraftStatusRemark_Full { buf, flatbuffers.indirect(buf, 0) }

struct AircraftStatusRemark_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(18)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idAircraftStatus(idAircraftStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idAircraftStatus)
        return this
    def add_altRmkId(altRmkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, altRmkId)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, name)
        return this
    def add_text(text:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, text)
        return this
    def add_timestamp(timestamp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, timestamp)
        return this
    def add_lastUpdatedBy(lastUpdatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, lastUpdatedBy)
        return this
    def add_lastUpdatedAt(lastUpdatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, lastUpdatedAt)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, origNetwork)
        return this
    def add_dataMode(dataMode:AircraftStatusRemark_Full_dataMode_Enum):
        b_.PrependInt8Slot(17, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

