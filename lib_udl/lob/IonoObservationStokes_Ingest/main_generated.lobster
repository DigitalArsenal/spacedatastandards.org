// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationStokes_Ingest

/// /// Multi-dimensional array with the same dimensions as power plus one additional dimension spanning an S dimension for S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3). It is advised to describe the antenna type, antenna configuration, and Stokes coordinate system as a notes to the variable.
class IonoObservationStokes_Ingest : flatbuffers.handle
    /// Notes for the stokes data.
    /// Example: /// Example: NOTES
    /// Constraints: Minimum length = 0, Maximum length = 512
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Array of integers of the stoke array dimensions.
    /// Example: /// Example: [2, 3]
    /// Constraints: No constraints specified.
    def dimensions(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def dimensions_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// Array of names for dimensions.
    /// Example: /// Example: ['NAMES1', 'NAMES2']
    /// Constraints: No constraints specified.
    def dimensionName(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def dimensionName_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)
    /// Array of received stokes data.
    /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    /// Constraints: No constraints specified.
    def data(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def data_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)
    /// S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).
    /// Example: /// Example: [1.0, 2.0]
    /// Constraints: No constraints specified.
    def s(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 12) + i * 4)
    def s_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 12)

def GetRootAsIonoObservationStokes_Ingest(buf:string): return IonoObservationStokes_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationStokes_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, notes)
        return this
    def add_dimensions(dimensions:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, dimensions)
        return this
    def add_dimensionName(dimensionName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, dimensionName)
        return this
    def add_data(data:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, data)
        return this
    def add_s(s:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, s)
        return this
    def end():
        return b_.EndObject()

def IonoObservationStokes_IngestStartDimensionsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationStokes_IngestCreateDimensionsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationStokes_IngestStartDimensionNameVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationStokes_IngestCreateDimensionNameVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationStokes_IngestStartDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationStokes_IngestCreateDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservationStokes_IngestStartSVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservationStokes_IngestCreateSVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

