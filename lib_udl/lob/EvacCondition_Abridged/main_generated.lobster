// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EvacCondition_Abridged

/// /// The group path from transmitter to receiver.
class EvacCondition_Abridged : flatbuffers.handle
    /// Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
    /// Example: /// Example: ACTIVITY LOW
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    /// Example: /// Example: ANKLE LEFT FRONT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def bodyPart() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def time() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Additional comments on the patient's condition.
    /// Example: /// Example: Comments on the patient's condition.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsEvacCondition_Abridged(buf:string): return EvacCondition_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct EvacCondition_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, type)
        return this
    def add_bodyPart(bodyPart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, bodyPart)
        return this
    def add_time(time:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, time)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, comments)
        return this
    def end():
        return b_.EndObject()

