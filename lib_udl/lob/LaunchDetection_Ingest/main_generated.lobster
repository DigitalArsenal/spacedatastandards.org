// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LaunchDetection_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    LaunchDetection_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    LaunchDetection_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    LaunchDetection_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    LaunchDetection_Ingest_dataMode_Enum_EXERCISE = 3

class LaunchDetection_Ingest

/// /// Data to analyze launch detections.
class LaunchDetection_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LAUNCHDETECTION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Time of Launch.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def launchTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of message for the data.
    /// Example: /// Example: Example-Msg-Type
    /// Constraints: Minimum length = 1, Maximum length = 16
    def messageType() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def launchLatitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def launchLongitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Angle measured clockwise from North for the launch heading (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def launchAzimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Orbit Right Ascension of Ascending Node (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def raan() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Orbit Inclination (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def inclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Time of observation.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def observationTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def observationLatitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Longitude of launch vehicle at observation time (in Degrees).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def observationLongitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Altitude of launch vehicle at observation time (in KM).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def observationAltitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Flag indicating multiple observers were used.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def stereoFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def highZenithAzimuth() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Integer indicating how messages should be sequenced for a specific event.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def sequenceNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Id to be able to correlate different messages to a specific event.
    /// Example: /// Example: EVENT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def eventId() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> LaunchDetection_Ingest_dataMode_Enum:
        return LaunchDetection_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 48, 0))
    /// Time the row was created in the database.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Read-only time the row was updated in the database, set automatically by the system on update.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)

def GetRootAsLaunchDetection_Ingest(buf:string): return LaunchDetection_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct LaunchDetection_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(27)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_launchTime(launchTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, launchTime)
        return this
    def add_messageType(messageType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, messageType)
        return this
    def add_launchLatitude(launchLatitude:float):
        b_.PrependFloat64Slot(4, launchLatitude, 0.0)
        return this
    def add_launchLongitude(launchLongitude:float):
        b_.PrependFloat64Slot(5, launchLongitude, 0.0)
        return this
    def add_launchAzimuth(launchAzimuth:float):
        b_.PrependFloat64Slot(6, launchAzimuth, 0.0)
        return this
    def add_raan(raan:float):
        b_.PrependFloat64Slot(7, raan, 0.0)
        return this
    def add_inclination(inclination:float):
        b_.PrependFloat64Slot(8, inclination, 0.0)
        return this
    def add_observationTime(observationTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, observationTime)
        return this
    def add_observationLatitude(observationLatitude:float):
        b_.PrependFloat64Slot(10, observationLatitude, 0.0)
        return this
    def add_observationLongitude(observationLongitude:float):
        b_.PrependFloat64Slot(11, observationLongitude, 0.0)
        return this
    def add_observationAltitude(observationAltitude:float):
        b_.PrependFloat64Slot(12, observationAltitude, 0.0)
        return this
    def add_stereoFlag(stereoFlag:bool):
        b_.PrependBoolSlot(13, stereoFlag, 0)
        return this
    def add_highZenithAzimuth(highZenithAzimuth:bool):
        b_.PrependBoolSlot(14, highZenithAzimuth, 0)
        return this
    def add_sequenceNumber(sequenceNumber:int):
        b_.PrependInt32Slot(15, sequenceNumber, 0)
        return this
    def add_eventId(eventId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, eventId)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origin)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, descriptor)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, tags)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origNetwork)
        return this
    def add_dataMode(dataMode:LaunchDetection_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(22, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, updatedBy)
        return this
    def end():
        return b_.EndObject()

def LaunchDetection_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LaunchDetection_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

