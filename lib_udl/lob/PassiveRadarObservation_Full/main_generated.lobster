// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum PassiveRadarObservation_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    PassiveRadarObservation_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    PassiveRadarObservation_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    PassiveRadarObservation_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    PassiveRadarObservation_Full_dataMode_Enum_EXERCISE = 3

class PassiveRadarObservation_Full

/// /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
class PassiveRadarObservation_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2023-01-24T23:35:26.518152Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    /// Example: /// Example: 40699
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 40699
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    /// Example: /// Example: OCULUSA
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    /// Example: /// Example: RED_CLIFFS_3ABCRN
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idRFEmitter() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    /// Example: /// Example: OculusRef1
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensorRefReceiver() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Optional external observation identifier provided by the source.
    /// Example: /// Example: 26892
    /// Constraints: Minimum length = 0, Maximum length = 36
    def extObservationId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def taskId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Unique identifier of a track that represents a tracklet for this observation.
    /// Example: /// Example: 12212
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    /// Example: /// Example: FIRST
    /// Constraints: Minimum length = 0, Maximum length = 8
    def obPosition() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Line of sight azimuth angle in degrees and topocentric frame.
    /// Example: /// Example: 134.5
    /// Constraints: No constraints specified.
    def azimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def azimuthUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Sensor azimuth angle bias in degrees.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def azimuthBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Rate of change of the line of sight azimuth in degrees per second.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def azimuthRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Line of sight elevation in degrees and topocentric frame.
    /// Example: /// Example: 76.1
    /// Constraints: No constraints specified.
    def elevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def elevationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Sensor elevation bias in degrees.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def elevationBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Rate of change of the line of sight elevation in degrees per second.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def elevationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
    /// Example: /// Example: 0.00505820232809312
    /// Constraints: No constraints specified.
    def delay() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// One sigma uncertainty in the delay measurement, in seconds.
    /// Example: /// Example: 3.1e-06
    /// Constraints: No constraints specified.
    def delayUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Delay bias in seconds.
    /// Example: /// Example: 1.23e-06
    /// Constraints: No constraints specified.
    def delayBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
    /// Example: /// Example: 754.8212
    /// Constraints: No constraints specified.
    def bistaticRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// One sigma uncertainty in bistatic range in kilometers.
    /// Example: /// Example: 5.1
    /// Constraints: No constraints specified.
    def bistaticRangeUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Sensor bistatic range bias in kilometers.
    /// Example: /// Example: 2.34
    /// Constraints: No constraints specified.
    def bistaticRangeBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Rate of change of the bistatic path in kilometers/sec.
    /// Example: /// Example: -0.30222
    /// Constraints: No constraints specified.
    def bistaticRangeRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
    /// Example: /// Example: 0.123
    /// Constraints: No constraints specified.
    def bistaticRangeRateUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Bistatic range acceleration in kilometers/sec^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def bistaticRangeAccel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def bistaticRangeAccelUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Doppler measurement in hertz.
    /// Example: /// Example: -101.781641000597
    /// Constraints: No constraints specified.
    def doppler() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// One sigma uncertainty in the Doppler measurement in hertz.
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    def dopplerUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// Coning angle in degrees.
    /// Example: /// Example: 60.1
    /// Constraints: No constraints specified.
    def coning() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// One sigma uncertainty in the coning angle measurement, in degrees.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def coningUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
    /// Example: /// Example: 0.00592856674135648
    /// Constraints: No constraints specified.
    def tof() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// One sigma uncertainty in time of flight in seconds.
    /// Example: /// Example: 3.1e-06
    /// Constraints: No constraints specified.
    def tofUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// The Time of Flight (TOF) bias in seconds.
    /// Example: /// Example: 1.23e-06
    /// Constraints: No constraints specified.
    def tofBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// The target Acceleration measurement in kilometers/sec^2 for this observation.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def accel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
    /// Example: /// Example: 0.1
    /// Constraints: No constraints specified.
    def accelUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Line of sight right ascension in degrees and J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def ra() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Line of sight declination angle in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def declination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: -35.1181763996856
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 139.613567052763
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
    /// Example: /// Example: 478.056378
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// X velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def xvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Y velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: /// Example: 3.21
    /// Constraints: No constraints specified.
    def yvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// Z velocity of target in kilometers/sec in J2000 coordinate frame.
    /// Example: /// Example: 3.12
    /// Constraints: No constraints specified.
    def zvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// Radar cross section in meters squared for polarization principal.
    /// Example: /// Example: 100.23
    /// Constraints: No constraints specified.
    def rcs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def rcsUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Radar cross section in meters squared for orthogonal polarization.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def orthogonalRcs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def orthogonalRcsUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 17.292053
    /// Constraints: No constraints specified.
    def snr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// Sensor timing bias in seconds.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def timingBias() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 116) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 116)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 132)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> PassiveRadarObservation_Full_dataMode_Enum:
        return PassiveRadarObservation_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 134, 0))
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    /// Example: /// Example: RADAR
    /// Constraints: No constraints specified.
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)

def GetRootAsPassiveRadarObservation_Full(buf:string): return PassiveRadarObservation_Full { buf, flatbuffers.indirect(buf, 0) }

struct PassiveRadarObservation_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(68)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, obTime)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(4, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, origObjectId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, origSensorId)
        return this
    def add_idRFEmitter(idRFEmitter:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, idRFEmitter)
        return this
    def add_idSensorRefReceiver(idSensorRefReceiver:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, idSensorRefReceiver)
        return this
    def add_extObservationId(extObservationId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, extObservationId)
        return this
    def add_taskId(taskId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, taskId)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, trackId)
        return this
    def add_obPosition(obPosition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, obPosition)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(14, uct, 0)
        return this
    def add_azimuth(azimuth:float):
        b_.PrependFloat64Slot(15, azimuth, 0.0)
        return this
    def add_azimuthUnc(azimuthUnc:float):
        b_.PrependFloat64Slot(16, azimuthUnc, 0.0)
        return this
    def add_azimuthBias(azimuthBias:float):
        b_.PrependFloat64Slot(17, azimuthBias, 0.0)
        return this
    def add_azimuthRate(azimuthRate:float):
        b_.PrependFloat64Slot(18, azimuthRate, 0.0)
        return this
    def add_elevation(elevation:float):
        b_.PrependFloat64Slot(19, elevation, 0.0)
        return this
    def add_elevationUnc(elevationUnc:float):
        b_.PrependFloat64Slot(20, elevationUnc, 0.0)
        return this
    def add_elevationBias(elevationBias:float):
        b_.PrependFloat64Slot(21, elevationBias, 0.0)
        return this
    def add_elevationRate(elevationRate:float):
        b_.PrependFloat64Slot(22, elevationRate, 0.0)
        return this
    def add_delay(delay:float):
        b_.PrependFloat64Slot(23, delay, 0.0)
        return this
    def add_delayUnc(delayUnc:float):
        b_.PrependFloat64Slot(24, delayUnc, 0.0)
        return this
    def add_delayBias(delayBias:float):
        b_.PrependFloat64Slot(25, delayBias, 0.0)
        return this
    def add_bistaticRange(bistaticRange:float):
        b_.PrependFloat64Slot(26, bistaticRange, 0.0)
        return this
    def add_bistaticRangeUnc(bistaticRangeUnc:float):
        b_.PrependFloat64Slot(27, bistaticRangeUnc, 0.0)
        return this
    def add_bistaticRangeBias(bistaticRangeBias:float):
        b_.PrependFloat64Slot(28, bistaticRangeBias, 0.0)
        return this
    def add_bistaticRangeRate(bistaticRangeRate:float):
        b_.PrependFloat64Slot(29, bistaticRangeRate, 0.0)
        return this
    def add_bistaticRangeRateUnc(bistaticRangeRateUnc:float):
        b_.PrependFloat64Slot(30, bistaticRangeRateUnc, 0.0)
        return this
    def add_bistaticRangeAccel(bistaticRangeAccel:float):
        b_.PrependFloat64Slot(31, bistaticRangeAccel, 0.0)
        return this
    def add_bistaticRangeAccelUnc(bistaticRangeAccelUnc:float):
        b_.PrependFloat64Slot(32, bistaticRangeAccelUnc, 0.0)
        return this
    def add_doppler(doppler:float):
        b_.PrependFloat64Slot(33, doppler, 0.0)
        return this
    def add_dopplerUnc(dopplerUnc:float):
        b_.PrependFloat64Slot(34, dopplerUnc, 0.0)
        return this
    def add_coning(coning:float):
        b_.PrependFloat64Slot(35, coning, 0.0)
        return this
    def add_coningUnc(coningUnc:float):
        b_.PrependFloat64Slot(36, coningUnc, 0.0)
        return this
    def add_tof(tof:float):
        b_.PrependFloat64Slot(37, tof, 0.0)
        return this
    def add_tofUnc(tofUnc:float):
        b_.PrependFloat64Slot(38, tofUnc, 0.0)
        return this
    def add_tofBias(tofBias:float):
        b_.PrependFloat64Slot(39, tofBias, 0.0)
        return this
    def add_accel(accel:float):
        b_.PrependFloat64Slot(40, accel, 0.0)
        return this
    def add_accelUnc(accelUnc:float):
        b_.PrependFloat64Slot(41, accelUnc, 0.0)
        return this
    def add_ra(ra:float):
        b_.PrependFloat64Slot(42, ra, 0.0)
        return this
    def add_declination(declination:float):
        b_.PrependFloat64Slot(43, declination, 0.0)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(44, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(45, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(46, alt, 0.0)
        return this
    def add_xvel(xvel:float):
        b_.PrependFloat64Slot(47, xvel, 0.0)
        return this
    def add_yvel(yvel:float):
        b_.PrependFloat64Slot(48, yvel, 0.0)
        return this
    def add_zvel(zvel:float):
        b_.PrependFloat64Slot(49, zvel, 0.0)
        return this
    def add_rcs(rcs:float):
        b_.PrependFloat64Slot(50, rcs, 0.0)
        return this
    def add_rcsUnc(rcsUnc:float):
        b_.PrependFloat64Slot(51, rcsUnc, 0.0)
        return this
    def add_orthogonalRcs(orthogonalRcs:float):
        b_.PrependFloat64Slot(52, orthogonalRcs, 0.0)
        return this
    def add_orthogonalRcsUnc(orthogonalRcsUnc:float):
        b_.PrependFloat64Slot(53, orthogonalRcsUnc, 0.0)
        return this
    def add_snr(snr:float):
        b_.PrependFloat64Slot(54, snr, 0.0)
        return this
    def add_timingBias(timingBias:float):
        b_.PrependFloat64Slot(55, timingBias, 0.0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, tags)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, transactionId)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, descriptor)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, sourceDL)
        return this
    def add_dataMode(dataMode:PassiveRadarObservation_Full_dataMode_Enum):
        b_.PrependInt8Slot(65, dataMode, 0)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, onOrbit)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, type)
        return this
    def end():
        return b_.EndObject()

def PassiveRadarObservation_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def PassiveRadarObservation_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

