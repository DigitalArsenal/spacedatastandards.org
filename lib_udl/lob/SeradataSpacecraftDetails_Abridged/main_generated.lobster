// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SeradataSpacecraftDetails_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SeradataSpacecraftDetails_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SeradataSpacecraftDetails_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SeradataSpacecraftDetails_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SeradataSpacecraftDetails_Abridged_dataMode_Enum_EXERCISE = 3

class SeradataSpacecraftDetails_Abridged

/// /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
class SeradataSpacecraftDetails_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATASPACECRAFTDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// UUID of the parent Onorbit record, if available.
    /// Example: /// Example: 503
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Spacecraft name.
    /// Example: /// Example: name
    /// Constraints: Minimum length = 1, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Description associated with the spacecraft.
    /// Example: /// Example: description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Seradata international number.
    /// Example: /// Example: number
    /// Constraints: Minimum length = 0, Maximum length = 16
    def intlNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Seradata sector (e.g. Commercial, Military, Civil/Other).
    /// Example: /// Example: Commercial
    /// Constraints: Minimum length = 0, Maximum length = 16
    def sector() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Apogee in km.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def apogee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Perigee in km.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def perigee() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Spacecraft period in minutes.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def period() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Seradata provided inclination in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def inclination() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// UUID of the prime manufacturer organization, if available.
    /// Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
    /// Constraints: Minimum length = 0, Maximum length = 36
    def primeManufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
    /// Example: /// Example: 3-Axis
    /// Constraints: Minimum length = 0, Maximum length = 32
    def stabilizer() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Spacecraft design life in days.
    /// Example: /// Example: 231
    /// Constraints: No constraints specified.
    def designLife() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Spacecraft expected life in days.
    /// Example: /// Example: 231
    /// Constraints: No constraints specified.
    def expectedLife() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Boolean indicating if the spacecraft was insured at launch.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def insuredAtLaunch() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 34, 0))
    /// Mass at launch in kg.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def launchMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Mass dry in kg.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def dryMass() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// NORAD satellite number if available.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def catalogNumber() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Mass dry in kg.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def totalPayloadPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Spacecraft constellation.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 64
    def constellation() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Spacecraft orbit category (e.g GEO, LEO, etc).
    /// Example: /// Example: GEO
    /// Constraints: Minimum length = 0, Maximum length = 64
    def orbitCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
    /// Example: /// Example: Geostationary
    /// Constraints: Minimum length = 0, Maximum length = 64
    def orbitSubCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Cost of launch in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def launchCost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Boolean indicating if the spacecraft launch cost is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def launchCostEstimated() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 52, 0))
    /// Boolean indicating if the spacecraft cost is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def costEstimated() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 54, 0))
    /// Cost of spacecraft at new in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def newCost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Combined cost of spacecraft at new in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def combinedNewCost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// Boolean indicating if the spacecraft combined new cost is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def combinedCostEstimated() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 60, 0))
    /// Insured value of spacecraft at launch in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def insuredValueAtLaunch() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Boolean indicating if the spacecraft insured value at launch is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def insuredValueLaunchEstimated() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 64, 0))
    /// Annual insured depreciaion factor as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def annualInsuredDepreciationFactor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def annualInsuredDepreciationFactorEstimated() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// Insurance premium at launch in M USD.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def insurancePremiumAtLaunch() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def insurancePremiumAtLaunchEstimated() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 72, 0))
    /// Number of humans carried on spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numHumans() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Cubesat dispenser type.
    /// Example: /// Example: cubesatDispenserType
    /// Constraints: Minimum length = 0, Maximum length = 64
    def cubesatDispenserType() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
    /// Example: /// Example: 2500 - 3500kg  - Large Satellite
    /// Constraints: Minimum length = 0, Maximum length = 64
    def massCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Seradata launch ID.
    /// Example: /// Example: 11573
    /// Constraints: Minimum length = 0, Maximum length = 32
    def launchId() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Seradata launch ID.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 36
    def launchVehicleId() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Seradata launch vehicle family.
    /// Example: /// Example: launchProviderFlightNumber
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchProviderFlightNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Launch Site Name.
    /// Example: /// Example: launchSiteName
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchSiteName() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Seradata Launch Site ID.
    /// Example: /// Example: 28
    /// Constraints: Minimum length = 0, Maximum length = 32
    def launchSiteId() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Seradata launch country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 32
    def launchCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// Seradata launch provider.
    /// Example: /// Example: launchProvider
    /// Constraints: Minimum length = 0, Maximum length = 128
    def launchProvider() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// Seradata launch provider country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 32
    def launchProviderCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Boolean indicating if the launch was commercial.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def commercialLaunch() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 96, 0))
    /// Seradata launch type (e.g. Launched, Future, etc).
    /// Example: /// Example: Future
    /// Constraints: Minimum length = 0, Maximum length = 32
    def launchType() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
    /// Example: /// Example: Expendable
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchCharacteristic() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Seradata launch number.
    /// Example: /// Example: FN040
    /// Constraints: Minimum length = 0, Maximum length = 16
    def launchNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Launch date.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def launchDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Seradata remarks on launch date.
    /// Example: /// Example: launchDateRemarks
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchDateRemarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Youtube link of launch.
    /// Example: /// Example: youtubeLaunchLink
    /// Constraints: Minimum length = 0, Maximum length = 32
    def youtubeLaunchLink() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
    /// Example: /// Example: Inactive - Retired
    /// Constraints: Minimum length = 0, Maximum length = 64
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// Spacecraft owner name.
    /// Example: /// Example: owner
    /// Constraints: Minimum length = 0, Maximum length = 128
    def owner() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Spacecraft owner country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    def ownerCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Spacecraft operator name.
    /// Example: /// Example: operator
    /// Constraints: Minimum length = 0, Maximum length = 128
    def operator() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// Spacecraft operator country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    def operatorCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Boolean indicating if the spacecraft was leased.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def leased() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 120, 0))
    /// Spacecraft order date.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def orderDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Total capability lost as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def capabilityLost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// Total capacity lost as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def capacityLost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 126, 0.0)
    /// Spacecraft primary mission and group.
    /// Example: /// Example: primaryMissionGroup
    /// Constraints: Minimum length = 0, Maximum length = 64
    def primaryMissionGroup() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Spacecraft additional missions and groups.
    /// Example: /// Example: additionalMissionsGroups
    /// Constraints: Minimum length = 0, Maximum length = 256
    def additionalMissionsGroups() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Number of insurance claims for this spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def totalClaims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 132, 0)
    /// Number of injuries related to this spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def totalInjuries() -> int:
        return flatbuffers.field_int32(buf_, pos_, 134, 0)
    /// Number of fatalities related to this spacecraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def totalFatalities() -> int:
        return flatbuffers.field_int32(buf_, pos_, 136, 0)
    /// Spacecraft name at launch.
    /// Example: /// Example: nameAtLaunch
    /// Constraints: Minimum length = 0, Maximum length = 64
    def nameAtLaunch() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Spacecraft Bus ID.
    /// Example: /// Example: BUS-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def busId() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// Current age in years.
    /// Example: /// Example: 5.898630136986301
    /// Constraints: No constraints specified.
    def currentAge() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// Spacecraft life lost as a percent fraction.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def lifeLost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 144, 0.0)
    /// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: -8.23
    /// Constraints: No constraints specified.
    def geoPosition() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// Spacecraft total insurance losses as a fraction.
    /// Example: /// Example: 0.393
    /// Constraints: No constraints specified.
    def insuranceLossesTotal() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// Spacecraft launch arranger.
    /// Example: /// Example: launchArranger
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchArranger() -> string:
        return flatbuffers.field_string(buf_, pos_, 150)
    /// Spacecraft launch arranger country.
    /// Example: /// Example: USA
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchArrangerCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 152)
    /// Spacecraft serial number.
    /// Example: /// Example: serialNumber
    /// Constraints: Minimum length = 0, Maximum length = 64
    def serialNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 154)
    /// Spacecraft program name.
    /// Example: /// Example: programName
    /// Constraints: Minimum length = 0, Maximum length = 64
    def programName() -> string:
        return flatbuffers.field_string(buf_, pos_, 156)
    /// Spacecraft reused hull name.
    /// Example: /// Example: reusedHullName
    /// Constraints: Minimum length = 0, Maximum length = 64
    def reusedHullName() -> string:
        return flatbuffers.field_string(buf_, pos_, 158)
    /// Spacecraft date of observation.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def dateOfObservation() -> string:
        return flatbuffers.field_string(buf_, pos_, 160)
    /// Spacecraft latest latitude in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 162, 0.0)
    /// Spacecraft latest longitude in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 164, 0.0)
    /// Spacecraft latest altitude in km.
    /// Example: /// Example: 36036.6330576414
    /// Constraints: No constraints specified.
    def altitude() -> float:
        return flatbuffers.field_float64(buf_, pos_, 166, 0.0)
    /// Spacecraft collision risk 1mm sqm latest.
    /// Example: /// Example: 1.33
    /// Constraints: No constraints specified.
    def collisionRiskMM() -> float:
        return flatbuffers.field_float64(buf_, pos_, 168, 0.0)
    /// Spacecraft collision risk 1cm sqm latest.
    /// Example: /// Example: 1.43
    /// Constraints: No constraints specified.
    def collisionRiskCM() -> float:
        return flatbuffers.field_float64(buf_, pos_, 170, 0.0)
    /// Spacecraft quantity.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def quantity() -> int:
        return flatbuffers.field_int32(buf_, pos_, 172, 0)
    /// Spacecraft reusable flights.
    /// Example: /// Example: reusableFlights
    /// Constraints: Minimum length = 0, Maximum length = 64
    def reusableFlights() -> string:
        return flatbuffers.field_string(buf_, pos_, 174)
    /// Notes on the spacecraft.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 176)
    /// Insurance notes for the spacecraft.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def insuranceNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 178)
    /// Insurance notes for the spacecraft.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def launchNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 180)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 182)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 184)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 186)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SeradataSpacecraftDetails_Abridged_dataMode_Enum:
        return SeradataSpacecraftDetails_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 188, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 190)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 192)

def GetRootAsSeradataSpacecraftDetails_Abridged(buf:string): return SeradataSpacecraftDetails_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SeradataSpacecraftDetails_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(95)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idOnOrbit)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, name)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, description)
        return this
    def add_intlNumber(intlNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, intlNumber)
        return this
    def add_sector(sector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, sector)
        return this
    def add_apogee(apogee:float):
        b_.PrependFloat64Slot(7, apogee, 0.0)
        return this
    def add_perigee(perigee:float):
        b_.PrependFloat64Slot(8, perigee, 0.0)
        return this
    def add_period(period:float):
        b_.PrependFloat64Slot(9, period, 0.0)
        return this
    def add_inclination(inclination:float):
        b_.PrependFloat64Slot(10, inclination, 0.0)
        return this
    def add_primeManufacturerOrgId(primeManufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, primeManufacturerOrgId)
        return this
    def add_stabilizer(stabilizer:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, stabilizer)
        return this
    def add_designLife(designLife:int):
        b_.PrependInt32Slot(13, designLife, 0)
        return this
    def add_expectedLife(expectedLife:int):
        b_.PrependInt32Slot(14, expectedLife, 0)
        return this
    def add_insuredAtLaunch(insuredAtLaunch:bool):
        b_.PrependBoolSlot(15, insuredAtLaunch, 0)
        return this
    def add_launchMass(launchMass:float):
        b_.PrependFloat64Slot(16, launchMass, 0.0)
        return this
    def add_dryMass(dryMass:float):
        b_.PrependFloat64Slot(17, dryMass, 0.0)
        return this
    def add_catalogNumber(catalogNumber:int):
        b_.PrependInt32Slot(18, catalogNumber, 0)
        return this
    def add_totalPayloadPower(totalPayloadPower:float):
        b_.PrependFloat64Slot(19, totalPayloadPower, 0.0)
        return this
    def add_constellation(constellation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, constellation)
        return this
    def add_orbitCategory(orbitCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, orbitCategory)
        return this
    def add_orbitSubCategory(orbitSubCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, orbitSubCategory)
        return this
    def add_launchCost(launchCost:float):
        b_.PrependFloat64Slot(23, launchCost, 0.0)
        return this
    def add_launchCostEstimated(launchCostEstimated:bool):
        b_.PrependBoolSlot(24, launchCostEstimated, 0)
        return this
    def add_costEstimated(costEstimated:bool):
        b_.PrependBoolSlot(25, costEstimated, 0)
        return this
    def add_newCost(newCost:float):
        b_.PrependFloat64Slot(26, newCost, 0.0)
        return this
    def add_combinedNewCost(combinedNewCost:float):
        b_.PrependFloat64Slot(27, combinedNewCost, 0.0)
        return this
    def add_combinedCostEstimated(combinedCostEstimated:bool):
        b_.PrependBoolSlot(28, combinedCostEstimated, 0)
        return this
    def add_insuredValueAtLaunch(insuredValueAtLaunch:float):
        b_.PrependFloat64Slot(29, insuredValueAtLaunch, 0.0)
        return this
    def add_insuredValueLaunchEstimated(insuredValueLaunchEstimated:bool):
        b_.PrependBoolSlot(30, insuredValueLaunchEstimated, 0)
        return this
    def add_annualInsuredDepreciationFactor(annualInsuredDepreciationFactor:float):
        b_.PrependFloat64Slot(31, annualInsuredDepreciationFactor, 0.0)
        return this
    def add_annualInsuredDepreciationFactorEstimated(annualInsuredDepreciationFactorEstimated:bool):
        b_.PrependBoolSlot(32, annualInsuredDepreciationFactorEstimated, 0)
        return this
    def add_insurancePremiumAtLaunch(insurancePremiumAtLaunch:float):
        b_.PrependFloat64Slot(33, insurancePremiumAtLaunch, 0.0)
        return this
    def add_insurancePremiumAtLaunchEstimated(insurancePremiumAtLaunchEstimated:bool):
        b_.PrependBoolSlot(34, insurancePremiumAtLaunchEstimated, 0)
        return this
    def add_numHumans(numHumans:int):
        b_.PrependInt32Slot(35, numHumans, 0)
        return this
    def add_cubesatDispenserType(cubesatDispenserType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, cubesatDispenserType)
        return this
    def add_massCategory(massCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, massCategory)
        return this
    def add_launchId(launchId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, launchId)
        return this
    def add_launchVehicleId(launchVehicleId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, launchVehicleId)
        return this
    def add_launchProviderFlightNumber(launchProviderFlightNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, launchProviderFlightNumber)
        return this
    def add_launchSiteName(launchSiteName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, launchSiteName)
        return this
    def add_launchSiteId(launchSiteId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, launchSiteId)
        return this
    def add_launchCountry(launchCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, launchCountry)
        return this
    def add_launchProvider(launchProvider:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, launchProvider)
        return this
    def add_launchProviderCountry(launchProviderCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, launchProviderCountry)
        return this
    def add_commercialLaunch(commercialLaunch:bool):
        b_.PrependBoolSlot(46, commercialLaunch, 0)
        return this
    def add_launchType(launchType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, launchType)
        return this
    def add_launchCharacteristic(launchCharacteristic:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, launchCharacteristic)
        return this
    def add_launchNumber(launchNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, launchNumber)
        return this
    def add_launchDate(launchDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, launchDate)
        return this
    def add_launchDateRemarks(launchDateRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, launchDateRemarks)
        return this
    def add_youtubeLaunchLink(youtubeLaunchLink:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, youtubeLaunchLink)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, status)
        return this
    def add_owner(owner:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, owner)
        return this
    def add_ownerCountry(ownerCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, ownerCountry)
        return this
    def add_operator(operator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, operator)
        return this
    def add_operatorCountry(operatorCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, operatorCountry)
        return this
    def add_leased(leased:bool):
        b_.PrependBoolSlot(58, leased, 0)
        return this
    def add_orderDate(orderDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, orderDate)
        return this
    def add_capabilityLost(capabilityLost:float):
        b_.PrependFloat64Slot(60, capabilityLost, 0.0)
        return this
    def add_capacityLost(capacityLost:float):
        b_.PrependFloat64Slot(61, capacityLost, 0.0)
        return this
    def add_primaryMissionGroup(primaryMissionGroup:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, primaryMissionGroup)
        return this
    def add_additionalMissionsGroups(additionalMissionsGroups:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, additionalMissionsGroups)
        return this
    def add_totalClaims(totalClaims:int):
        b_.PrependInt32Slot(64, totalClaims, 0)
        return this
    def add_totalInjuries(totalInjuries:int):
        b_.PrependInt32Slot(65, totalInjuries, 0)
        return this
    def add_totalFatalities(totalFatalities:int):
        b_.PrependInt32Slot(66, totalFatalities, 0)
        return this
    def add_nameAtLaunch(nameAtLaunch:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, nameAtLaunch)
        return this
    def add_busId(busId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, busId)
        return this
    def add_currentAge(currentAge:float):
        b_.PrependFloat64Slot(69, currentAge, 0.0)
        return this
    def add_lifeLost(lifeLost:float):
        b_.PrependFloat64Slot(70, lifeLost, 0.0)
        return this
    def add_geoPosition(geoPosition:float):
        b_.PrependFloat64Slot(71, geoPosition, 0.0)
        return this
    def add_insuranceLossesTotal(insuranceLossesTotal:float):
        b_.PrependFloat64Slot(72, insuranceLossesTotal, 0.0)
        return this
    def add_launchArranger(launchArranger:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(73, launchArranger)
        return this
    def add_launchArrangerCountry(launchArrangerCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(74, launchArrangerCountry)
        return this
    def add_serialNumber(serialNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(75, serialNumber)
        return this
    def add_programName(programName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(76, programName)
        return this
    def add_reusedHullName(reusedHullName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(77, reusedHullName)
        return this
    def add_dateOfObservation(dateOfObservation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(78, dateOfObservation)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(79, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(80, lon, 0.0)
        return this
    def add_altitude(altitude:float):
        b_.PrependFloat64Slot(81, altitude, 0.0)
        return this
    def add_collisionRiskMM(collisionRiskMM:float):
        b_.PrependFloat64Slot(82, collisionRiskMM, 0.0)
        return this
    def add_collisionRiskCM(collisionRiskCM:float):
        b_.PrependFloat64Slot(83, collisionRiskCM, 0.0)
        return this
    def add_quantity(quantity:int):
        b_.PrependInt32Slot(84, quantity, 0)
        return this
    def add_reusableFlights(reusableFlights:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(85, reusableFlights)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(86, notes)
        return this
    def add_insuranceNotes(insuranceNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(87, insuranceNotes)
        return this
    def add_launchNotes(launchNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(88, launchNotes)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(89, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(90, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(91, origNetwork)
        return this
    def add_dataMode(dataMode:SeradataSpacecraftDetails_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(92, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(93, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(94, createdBy)
        return this
    def end():
        return b_.EndObject()

