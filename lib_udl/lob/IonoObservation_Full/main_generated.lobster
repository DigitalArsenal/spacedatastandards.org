// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum IonoObservation_Full_transmitSensorType_Enum:
    /// No description available.
    IonoObservation_Full_transmitSensorType_Enum_MOBILE = 0
    /// No description available.
    IonoObservation_Full_transmitSensorType_Enum_STATIC = 1

enum IonoObservation_Full_receiveSensorType_Enum:
    /// No description available.
    IonoObservation_Full_receiveSensorType_Enum_MOBILE = 0
    /// No description available.
    IonoObservation_Full_receiveSensorType_Enum_STATIC = 1

enum IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum:
    /// No description available.
    IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum_J2000 = 0
    /// No description available.
    IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum_ECR_ECEF = 1
    /// No description available.
    IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum_TEME = 2
    /// No description available.
    IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum_GCRF = 3
    /// No description available.
    IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum_WGS84__GEODETIC_LAT__LONG__ALT_ = 4
    /// No description available.
    IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum_GEOCENTRIC__LAT__LONG__RADII_ = 5

enum IonoObservation_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    IonoObservation_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    IonoObservation_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    IonoObservation_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    IonoObservation_Full_dataMode_Enum_EXERCISE = 3

class IonoObservation_Full

/// /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
class IonoObservation_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: IONOOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Ionosonde hardware type or data collection type together with possible additional descriptors.
    /// Example: /// Example: Example hardware type
    /// Constraints: Minimum length = 1, Maximum length = 64
    def system() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Name of the algorithm used for the electron density profile.
    /// Example: /// Example: NH
    /// Constraints: Minimum length = 0, Maximum length = 64
    def neProfileName() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Version of the algorithm used for the electron density profile.
    /// Example: /// Example: 4.32
    /// Constraints: No constraints specified.
    def neProfileVersion() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def scalerInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def densityProfile() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// URSI code for station or stations producing the ionosonde.
    /// Example: /// Example: STATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 64
    def stationId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Sounding Start time in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def startTimeUTC() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Names of settings.
    /// Example: /// Example: Example settings
    /// Constraints: Minimum length = 1, Maximum length = 1024
    def systemInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def systemNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
    /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
    /// Constraints: No constraints specified.
    def transmitCoordinates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def transmitCoordinates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Enums: Mobile, Static.
    /// Example: /// Example: Mobile
    /// Constraints: Minimum length = 0, Maximum length = 16
    def transmitSensorType() -> IonoObservation_Full_transmitSensorType_Enum:
        return IonoObservation_Full_transmitSensorType_Enum(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
    /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
    /// Constraints: No constraints specified.
    def receiveCoordinates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def receiveCoordinates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Enums: Mobile, Static.
    /// Example: /// Example: Mobile
    /// Constraints: Minimum length = 0, Maximum length = 16
    def receiveSensorType() -> IonoObservation_Full_receiveSensorType_Enum:
        return IonoObservation_Full_receiveSensorType_Enum(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def antennaElementPosition() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 32
    def antennaElementPositionCoordinateSystem() -> IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum:
        return IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum(flatbuffers.field_int8(buf_, pos_, 40, 0))
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def power() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def range() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def frequency() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def polarization() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def azimuth() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def elevation() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Array of restricted frequencies.
    /// Example: /// Example: [12.5, 34.5, 45.3]
    /// Constraints: No constraints specified.
    def restrictedFrequency(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def restrictedFrequency_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// Notes for the restrictedFrequency data.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def restrictedFrequencyNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def doppler() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def time() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def stokes() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def amplitude() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def phase() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
    /// Example: /// Example: 6.75
    /// Constraints: No constraints specified.
    def foF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
    /// Example: /// Example: 8.2
    /// Constraints: No constraints specified.
    def foF1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
    /// Example: /// Example: 4.5
    /// Constraints: No constraints specified.
    def fxF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
    /// Example: /// Example: 4.2
    /// Constraints: No constraints specified.
    def fxF1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// MUF(D)/foF2.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def md() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Lowest usable frequency.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def luf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Maximum Usable Frequency for ground distance D in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def mufd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
    /// Example: /// Example: 2.025
    /// Constraints: No constraints specified.
    def fmin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
    /// Example: /// Example: 2.35
    /// Constraints: No constraints specified.
    def foEs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Minimum frequency of F layer echoes in MHz. URSI ID: 80.
    /// Example: /// Example: 2.7
    /// Constraints: No constraints specified.
    def fminF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Minimum frequency of E layer echoes in MHz. URSI ID: 81.
    /// Example: /// Example: 2.025
    /// Constraints: No constraints specified.
    def fminE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def foE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def fxE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
    /// Example: /// Example: 7.525
    /// Constraints: No constraints specified.
    def fxI() -> float:
        return flatbuffers.field_float64(buf_, pos_, 94, 0.0)
    /// The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
    /// Example: /// Example: 238.5
    /// Constraints: No constraints specified.
    def hprimeF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 96, 0.0)
    /// The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
    /// Example: /// Example: 238.5
    /// Constraints: No constraints specified.
    def hprimeF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
    /// Example: /// Example: 230.1
    /// Constraints: No constraints specified.
    def hprimeF1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
    /// Example: /// Example: 98.47
    /// Constraints: No constraints specified.
    def hprimeE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// The minimum height of the trace used to give foEs in km. URSI ID: 34.
    /// Example: /// Example: 95
    /// Constraints: No constraints specified.
    def hprimeEs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// Peak height of E-layer in km. URSI ID: 90.
    /// Example: /// Example: 91.744
    /// Constraints: No constraints specified.
    def zmE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Parabolic E layer semi-thickness in km. URSI ID: 83.
    /// Example: /// Example: 1.722
    /// Constraints: No constraints specified.
    def yE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// Average range spread of F layer in km. URSI ID: 84.
    /// Example: /// Example: 1.83
    /// Constraints: No constraints specified.
    def qf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// Average range spread of E layer in km. URSI ID: 85.
    /// Example: /// Example: 0.95
    /// Constraints: No constraints specified.
    def qe() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// Lowering of F trace to the leading edge in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def downF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Lowering of E trace to the leading edge in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def downE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// Lowering of Es trace to the leading edge in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def downEs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
    /// Example: /// Example: 0.075
    /// Constraints: No constraints specified.
    def ff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 120, 0.0)
    /// Frequency spread beyond foE in MHz. URSI ID: 87.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def fe() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// Distance for MUF calculation in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def d() -> float:
        return flatbuffers.field_float64(buf_, pos_, 124, 0.0)
    /// MUF/OblFactor in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def fmuf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 126, 0.0)
    /// Virtual height at MUF/OblFactor frequency in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def hprimefMUF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 128, 0.0)
    /// Adjustment to the scaled foF2 during profile inversion in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def deltafoF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 130, 0.0)
    /// Predicted value of foE in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def foEp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 132, 0.0)
    /// The frequency at which hprimeF is measured in MHz. URSI ID: 61.
    /// Example: /// Example: 2.5
    /// Constraints: No constraints specified.
    def fhprimeF() -> float:
        return flatbuffers.field_float64(buf_, pos_, 134, 0.0)
    /// The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
    /// Example: /// Example: 2.5
    /// Constraints: No constraints specified.
    def fhprimeF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 136, 0.0)
    /// Predicted value of foF1 in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def foF1p() -> float:
        return flatbuffers.field_float64(buf_, pos_, 138, 0.0)
    /// Predicted value of foF2 in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def foF2p() -> float:
        return flatbuffers.field_float64(buf_, pos_, 140, 0.0)
    /// True height of the F2 peak in km. URSI ID: AE.
    /// Example: /// Example: 240.498
    /// Constraints: No constraints specified.
    def hmF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// True height of the F1 peak in km. URSI ID: BE.
    /// Example: /// Example: 230.128
    /// Constraints: No constraints specified.
    def hmF1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 144, 0.0)
    /// True height of the E peak in km. URSI ID: CE.
    /// Example: /// Example: 215.643
    /// Constraints: No constraints specified.
    def hmE() -> float:
        return flatbuffers.field_float64(buf_, pos_, 146, 0.0)
    /// True height at half peak electron density in the F2 layer in km. URSI ID: 93.
    /// Example: /// Example: 240.498
    /// Constraints: No constraints specified.
    def zhalfNm() -> float:
        return flatbuffers.field_float64(buf_, pos_, 148, 0.0)
    /// Minimum frequency of Es layer in MHz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def fminEs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 150, 0.0)
    /// Parabolic F2 layer semi-thickness in km. URSI ID: 94.
    /// Example: /// Example: 62.178
    /// Constraints: No constraints specified.
    def yF2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 152, 0.0)
    /// Parabolic F1 layer semi-thickness in km. URSI ID: 95.
    /// Example: /// Example: 55.645
    /// Constraints: No constraints specified.
    def yF1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 154, 0.0)
    /// Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
    /// Example: /// Example: 24.673
    /// Constraints: No constraints specified.
    def tec() -> float:
        return flatbuffers.field_float64(buf_, pos_, 156, 0.0)
    /// Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
    /// Example: /// Example: 35.613
    /// Constraints: No constraints specified.
    def scaleHeightF2Peak() -> float:
        return flatbuffers.field_float64(buf_, pos_, 158, 0.0)
    /// IRI thickness parameter in km. URSI ID: D0.
    /// Example: /// Example: 68.07
    /// Constraints: No constraints specified.
    def b0() -> float:
        return flatbuffers.field_float64(buf_, pos_, 160, 0.0)
    /// IRI profile shape parameter. URSI ID: D1.
    /// Example: /// Example: 1.87
    /// Constraints: No constraints specified.
    def b1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 162, 0.0)
    /// IRI profile shape parameter, F1 layer. URSI ID: D2.
    /// Example: /// Example: 1.94
    /// Constraints: No constraints specified.
    def d1() -> float:
        return flatbuffers.field_float64(buf_, pos_, 164, 0.0)
    /// Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
    /// Example: /// Example: 45.764
    /// Constraints: No constraints specified.
    def foEa() -> float:
        return flatbuffers.field_float64(buf_, pos_, 166, 0.0)
    /// Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
    /// Example: /// Example: 102.6
    /// Constraints: No constraints specified.
    def hprimeEa() -> float:
        return flatbuffers.field_float64(buf_, pos_, 168, 0.0)
    /// Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
    /// Example: /// Example: 87.21
    /// Constraints: No constraints specified.
    def foP() -> float:
        return flatbuffers.field_float64(buf_, pos_, 170, 0.0)
    /// Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
    /// Example: /// Example: 89.45
    /// Constraints: No constraints specified.
    def hprimeP() -> float:
        return flatbuffers.field_float64(buf_, pos_, 172, 0.0)
    /// The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
    /// Example: /// Example: 34.867
    /// Constraints: No constraints specified.
    def fbEs() -> float:
        return flatbuffers.field_float64(buf_, pos_, 174, 0.0)
    /// Characterization of the shape of Es trace. URSI ID: 36.
    /// Example: /// Example: Auroral
    /// Constraints: Minimum length = 0, Maximum length = 25
    def typeEs() -> string:
        return flatbuffers.field_string(buf_, pos_, 176)
    /// List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
    /// Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def charAtts(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 178) + i * 4)
    def charAtts_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 178)
    /// Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def height(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 180) + i * 4)
    def height_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 180)
    /// Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def plasmaFrequency(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 182) + i * 4)
    def plasmaFrequency_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 182)
    /// Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
    /// Example: /// Example: [0.8, 0.2, 0.5]
    /// Constraints: No constraints specified.
    def plasmaFrequencyUncertainty(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 184) + i * 4)
    def plasmaFrequencyUncertainty_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 184)
    /// Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def electronDensity(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 186) + i * 4)
    def electronDensity_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 186)
    /// Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
    /// Example: /// Example: [0.8, 0.2, 0.5]
    /// Constraints: No constraints specified.
    def electronDensityUncertainty(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 188) + i * 4)
    def electronDensityUncertainty_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 188)
    /// Array of Legacy Artist Flags.
    /// Example: /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    def artistFlags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 190) + i * 4)
    def artistFlags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 190)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def traceGeneric() -> string:
        return flatbuffers.field_string(buf_, pos_, 192)
    /// Array of speed in m/s at which the disturbance travels through the ionosphere.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def tidPhaseSpeeds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 194) + i * 4)
    def tidPhaseSpeeds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 194)
    /// Array of degrees clockwise from true North of the TID.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def tidAzimuth(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 196) + i * 4)
    def tidAzimuth_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 196)
    /// Array of 1/frequency of the TID wave.
    /// Example: /// Example: [1.1, 2.1, 3.1]
    /// Constraints: No constraints specified.
    def tidPeriods(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 198) + i * 4)
    def tidPeriods_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 198)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def datum() -> string:
        return flatbuffers.field_string(buf_, pos_, 200)
    /// Equipment location.
    /// Example: /// Example: Millstone Hill
    /// Constraints: Minimum length = 0, Maximum length = 512
    def platformName() -> string:
        return flatbuffers.field_string(buf_, pos_, 202)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 204)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 206)
    /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 208)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 210)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 212)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 214)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> IonoObservation_Full_dataMode_Enum:
        return IonoObservation_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 216, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 218)

def GetRootAsIonoObservation_Full(buf:string): return IonoObservation_Full { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservation_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(108)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origSensorId)
        return this
    def add_system(system:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, system)
        return this
    def add_neProfileName(neProfileName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, neProfileName)
        return this
    def add_neProfileVersion(neProfileVersion:float):
        b_.PrependFloat64Slot(6, neProfileVersion, 0.0)
        return this
    def add_scalerInfo(scalerInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, scalerInfo)
        return this
    def add_densityProfile(densityProfile:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, densityProfile)
        return this
    def add_stationId(stationId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, stationId)
        return this
    def add_startTimeUTC(startTimeUTC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, startTimeUTC)
        return this
    def add_systemInfo(systemInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, systemInfo)
        return this
    def add_systemNotes(systemNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, systemNotes)
        return this
    def add_transmitCoordinates(transmitCoordinates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, transmitCoordinates)
        return this
    def add_transmitSensorType(transmitSensorType:IonoObservation_Full_transmitSensorType_Enum):
        b_.PrependInt8Slot(14, transmitSensorType, 0)
        return this
    def add_receiveCoordinates(receiveCoordinates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, receiveCoordinates)
        return this
    def add_receiveSensorType(receiveSensorType:IonoObservation_Full_receiveSensorType_Enum):
        b_.PrependInt8Slot(16, receiveSensorType, 0)
        return this
    def add_antennaElementPosition(antennaElementPosition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, antennaElementPosition)
        return this
    def add_antennaElementPositionCoordinateSystem(antennaElementPositionCoordinateSystem:IonoObservation_Full_antennaElementPositionCoordinateSystem_Enum):
        b_.PrependInt8Slot(18, antennaElementPositionCoordinateSystem, 0)
        return this
    def add_power(power:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, power)
        return this
    def add_range(range:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, range)
        return this
    def add_frequency(frequency:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, frequency)
        return this
    def add_polarization(polarization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, polarization)
        return this
    def add_azimuth(azimuth:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, azimuth)
        return this
    def add_elevation(elevation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, elevation)
        return this
    def add_restrictedFrequency(restrictedFrequency:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, restrictedFrequency)
        return this
    def add_restrictedFrequencyNotes(restrictedFrequencyNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, restrictedFrequencyNotes)
        return this
    def add_doppler(doppler:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, doppler)
        return this
    def add_time(time:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, time)
        return this
    def add_stokes(stokes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, stokes)
        return this
    def add_amplitude(amplitude:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, amplitude)
        return this
    def add_phase(phase:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, phase)
        return this
    def add_foF2(foF2:float):
        b_.PrependFloat64Slot(32, foF2, 0.0)
        return this
    def add_foF1(foF1:float):
        b_.PrependFloat64Slot(33, foF1, 0.0)
        return this
    def add_fxF2(fxF2:float):
        b_.PrependFloat64Slot(34, fxF2, 0.0)
        return this
    def add_fxF1(fxF1:float):
        b_.PrependFloat64Slot(35, fxF1, 0.0)
        return this
    def add_md(md:float):
        b_.PrependFloat64Slot(36, md, 0.0)
        return this
    def add_luf(luf:float):
        b_.PrependFloat64Slot(37, luf, 0.0)
        return this
    def add_mufd(mufd:float):
        b_.PrependFloat64Slot(38, mufd, 0.0)
        return this
    def add_fmin(fmin:float):
        b_.PrependFloat64Slot(39, fmin, 0.0)
        return this
    def add_foEs(foEs:float):
        b_.PrependFloat64Slot(40, foEs, 0.0)
        return this
    def add_fminF(fminF:float):
        b_.PrependFloat64Slot(41, fminF, 0.0)
        return this
    def add_fminE(fminE:float):
        b_.PrependFloat64Slot(42, fminE, 0.0)
        return this
    def add_foE(foE:float):
        b_.PrependFloat64Slot(43, foE, 0.0)
        return this
    def add_fxE(fxE:float):
        b_.PrependFloat64Slot(44, fxE, 0.0)
        return this
    def add_fxI(fxI:float):
        b_.PrependFloat64Slot(45, fxI, 0.0)
        return this
    def add_hprimeF(hprimeF:float):
        b_.PrependFloat64Slot(46, hprimeF, 0.0)
        return this
    def add_hprimeF2(hprimeF2:float):
        b_.PrependFloat64Slot(47, hprimeF2, 0.0)
        return this
    def add_hprimeF1(hprimeF1:float):
        b_.PrependFloat64Slot(48, hprimeF1, 0.0)
        return this
    def add_hprimeE(hprimeE:float):
        b_.PrependFloat64Slot(49, hprimeE, 0.0)
        return this
    def add_hprimeEs(hprimeEs:float):
        b_.PrependFloat64Slot(50, hprimeEs, 0.0)
        return this
    def add_zmE(zmE:float):
        b_.PrependFloat64Slot(51, zmE, 0.0)
        return this
    def add_yE(yE:float):
        b_.PrependFloat64Slot(52, yE, 0.0)
        return this
    def add_qf(qf:float):
        b_.PrependFloat64Slot(53, qf, 0.0)
        return this
    def add_qe(qe:float):
        b_.PrependFloat64Slot(54, qe, 0.0)
        return this
    def add_downF(downF:float):
        b_.PrependFloat64Slot(55, downF, 0.0)
        return this
    def add_downE(downE:float):
        b_.PrependFloat64Slot(56, downE, 0.0)
        return this
    def add_downEs(downEs:float):
        b_.PrependFloat64Slot(57, downEs, 0.0)
        return this
    def add_ff(ff:float):
        b_.PrependFloat64Slot(58, ff, 0.0)
        return this
    def add_fe(fe:float):
        b_.PrependFloat64Slot(59, fe, 0.0)
        return this
    def add_d(d:float):
        b_.PrependFloat64Slot(60, d, 0.0)
        return this
    def add_fmuf(fmuf:float):
        b_.PrependFloat64Slot(61, fmuf, 0.0)
        return this
    def add_hprimefMUF(hprimefMUF:float):
        b_.PrependFloat64Slot(62, hprimefMUF, 0.0)
        return this
    def add_deltafoF2(deltafoF2:float):
        b_.PrependFloat64Slot(63, deltafoF2, 0.0)
        return this
    def add_foEp(foEp:float):
        b_.PrependFloat64Slot(64, foEp, 0.0)
        return this
    def add_fhprimeF(fhprimeF:float):
        b_.PrependFloat64Slot(65, fhprimeF, 0.0)
        return this
    def add_fhprimeF2(fhprimeF2:float):
        b_.PrependFloat64Slot(66, fhprimeF2, 0.0)
        return this
    def add_foF1p(foF1p:float):
        b_.PrependFloat64Slot(67, foF1p, 0.0)
        return this
    def add_foF2p(foF2p:float):
        b_.PrependFloat64Slot(68, foF2p, 0.0)
        return this
    def add_hmF2(hmF2:float):
        b_.PrependFloat64Slot(69, hmF2, 0.0)
        return this
    def add_hmF1(hmF1:float):
        b_.PrependFloat64Slot(70, hmF1, 0.0)
        return this
    def add_hmE(hmE:float):
        b_.PrependFloat64Slot(71, hmE, 0.0)
        return this
    def add_zhalfNm(zhalfNm:float):
        b_.PrependFloat64Slot(72, zhalfNm, 0.0)
        return this
    def add_fminEs(fminEs:float):
        b_.PrependFloat64Slot(73, fminEs, 0.0)
        return this
    def add_yF2(yF2:float):
        b_.PrependFloat64Slot(74, yF2, 0.0)
        return this
    def add_yF1(yF1:float):
        b_.PrependFloat64Slot(75, yF1, 0.0)
        return this
    def add_tec(tec:float):
        b_.PrependFloat64Slot(76, tec, 0.0)
        return this
    def add_scaleHeightF2Peak(scaleHeightF2Peak:float):
        b_.PrependFloat64Slot(77, scaleHeightF2Peak, 0.0)
        return this
    def add_b0(b0:float):
        b_.PrependFloat64Slot(78, b0, 0.0)
        return this
    def add_b1(b1:float):
        b_.PrependFloat64Slot(79, b1, 0.0)
        return this
    def add_d1(d1:float):
        b_.PrependFloat64Slot(80, d1, 0.0)
        return this
    def add_foEa(foEa:float):
        b_.PrependFloat64Slot(81, foEa, 0.0)
        return this
    def add_hprimeEa(hprimeEa:float):
        b_.PrependFloat64Slot(82, hprimeEa, 0.0)
        return this
    def add_foP(foP:float):
        b_.PrependFloat64Slot(83, foP, 0.0)
        return this
    def add_hprimeP(hprimeP:float):
        b_.PrependFloat64Slot(84, hprimeP, 0.0)
        return this
    def add_fbEs(fbEs:float):
        b_.PrependFloat64Slot(85, fbEs, 0.0)
        return this
    def add_typeEs(typeEs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(86, typeEs)
        return this
    def add_charAtts(charAtts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(87, charAtts)
        return this
    def add_height(height:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(88, height)
        return this
    def add_plasmaFrequency(plasmaFrequency:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(89, plasmaFrequency)
        return this
    def add_plasmaFrequencyUncertainty(plasmaFrequencyUncertainty:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(90, plasmaFrequencyUncertainty)
        return this
    def add_electronDensity(electronDensity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(91, electronDensity)
        return this
    def add_electronDensityUncertainty(electronDensityUncertainty:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(92, electronDensityUncertainty)
        return this
    def add_artistFlags(artistFlags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(93, artistFlags)
        return this
    def add_traceGeneric(traceGeneric:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(94, traceGeneric)
        return this
    def add_tidPhaseSpeeds(tidPhaseSpeeds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(95, tidPhaseSpeeds)
        return this
    def add_tidAzimuth(tidAzimuth:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(96, tidAzimuth)
        return this
    def add_tidPeriods(tidPeriods:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(97, tidPeriods)
        return this
    def add_datum(datum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(98, datum)
        return this
    def add_platformName(platformName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(99, platformName)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(100, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(101, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(102, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(103, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(104, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(105, origin)
        return this
    def add_dataMode(dataMode:IonoObservation_Full_dataMode_Enum):
        b_.PrependInt8Slot(106, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(107, origNetwork)
        return this
    def end():
        return b_.EndObject()

def IonoObservation_FullStartTransmitCoordinatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateTransmitCoordinatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartReceiveCoordinatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateReceiveCoordinatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartRestrictedFrequencyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateRestrictedFrequencyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartCharAttsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateCharAttsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartHeightVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateHeightVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartPlasmaFrequencyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreatePlasmaFrequencyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartPlasmaFrequencyUncertaintyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreatePlasmaFrequencyUncertaintyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartElectronDensityVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateElectronDensityVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartElectronDensityUncertaintyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateElectronDensityUncertaintyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartArtistFlagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateArtistFlagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartTidPhaseSpeedsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateTidPhaseSpeedsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartTidAzimuthVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateTidAzimuthVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def IonoObservation_FullStartTidPeriodsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def IonoObservation_FullCreateTidPeriodsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

