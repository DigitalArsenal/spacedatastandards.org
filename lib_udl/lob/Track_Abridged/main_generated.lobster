// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Track_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Track_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Track_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Track_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Track_Abridged_dataMode_Enum_EXERCISE = 3

class Track_Abridged

/// /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
class Track_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
    /// Example: /// Example: Contact Info
    /// Constraints: Minimum length = 0, Maximum length = 64
    def cntct() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Message Timestamp.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def msgTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Mission ID related to the track.
    /// Example: /// Example: msnId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def msnId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 64
    def assetNat() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
    /// Example: /// Example: asset
    /// Constraints: Minimum length = 0, Maximum length = 32
    def asset() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Id/name of sensor providing the track data.
    /// Example: /// Example: sen
    /// Constraints: Minimum length = 0, Maximum length = 32
    def sen() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Sensor quality.
    /// Example: /// Example: senQual
    /// Constraints: Minimum length = 0, Maximum length = 32
    def senQual() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    /// Example: /// Example: trkId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
    /// Example: /// Example: trkNum
    /// Constraints: Minimum length = 0, Maximum length = 32
    def trkNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
    /// Example: /// Example: INITIATING
    /// Constraints: Minimum length = 0, Maximum length = 32
    def trkStat() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
    /// Example: /// Example: NATO
    /// Constraints: Minimum length = 0, Maximum length = 64
    def objNat() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The UID or designation of the tracked object.
    /// Example: /// Example: objId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def objId() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
    /// Example: /// Example: WATERCRAFT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objType() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
    /// Example: /// Example: LIGHT_TANK
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objSpec() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
    /// Example: /// Example: COMBAT_VEHICLE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objPlat() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
    /// Example: /// Example: HOLDING
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objAct() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
    /// AIS: Derived from an automated identification system source.
    /// BFT: Derived from a blue force tracking source.
    /// BIOMETRICS: Derived from a biometrics source.
    /// COMINT: Derived from a communications intelligence source.
    /// DOPPLER: Derived from a radar doppler source.
    /// ELINT: Derived from an electronics intelligence source.
    /// HRR: Derived from a radar high range resolution source.
    /// HUMINT: Derived from a human intelligence source.
    /// IMAGE: Derived from a still or motion imagery source.
    /// MASINT: Derived from a measurement and signals intelligence source.
    /// MIXED: Derived from a combination of two or more sources.
    /// OSINT: Derived from an open source intelligence source.
    /// OTHER: Derived from other types of unspecified sources.
    /// Example: /// Example: MASINT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def modType() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// UUID of the track item object, applies to STANAG-4676 messages.
    /// Example: /// Example: trkItmId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trkItmId() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Track timestamp in ISO8601 UTC format.
    /// Example: /// Example: 2021-06-07T14:17:39.653Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Value indicating track quality (not standardized).
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def trkQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
    /// Example: /// Example: MEASURED
    /// Constraints: No constraints specified.
    def trkPtType() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def objIdent() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Track object identity credibility.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def identCred() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Track object identity reliability.
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def identRel() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// KILO: Friendly high-value object.
    /// TRAVELLER: Suspect land or surface track following a recognized traffic route.
    /// ZOMBIE: Suspect track, object, or entity of special interest.
    /// Example: /// Example: ZOMBIE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def identAmp() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    /// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
    /// LAND: On the surface of dry land.
    /// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
    /// SURFACE: On the surface of a body of water.
    /// SUBSURFACE: Below the surface of a body of water.
    /// UNKNOWN: Environment is not known.
    /// Example: /// Example: LAND
    /// Constraints: Minimum length = 0, Maximum length = 16
    def env() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Track environment confidence estimate (not standardized).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def envConf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def trkConf() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def ecefPos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 68) + i * 4)
    def ecefPos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 68)
    /// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def ecefVel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def ecefVel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def ecefAcc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 72) + i * 4)
    def ecefAcc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 72)
    /// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Track object spd, in meters/sec.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def spd() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// The track object heading, in degrees clockwise from true North at the object location.
    /// Example: /// Example: 19.7
    /// Constraints: No constraints specified.
    def hdng() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
    /// Example: /// Example: 88.37
    /// Constraints: No constraints specified.
    def course() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def lco(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 86) + i * 4)
    def lco_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 86)
    /// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def lcs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 88) + i * 4)
    def lcs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 88)
    /// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def lcPos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 90) + i * 4)
    def lcPos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 90)
    /// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def lcVel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 92) + i * 4)
    def lcVel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 92)
    /// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def lcAcc(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 94) + i * 4)
    def lcAcc_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 94)
    /// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def eNUVel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 96) + i * 4)
    def eNUVel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 96)
    /// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def eNUPos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 98) + i * 4)
    def eNUPos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 98)
    /// Covariance matrix, in meter and second based units, for the defined cartesian system.
    /// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
    /// x&nbsp;&nbsp;&nbsp;&nbsp;1
    /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
    /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
    /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
    /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
    /// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    /// Example: /// Example: [1.1, 2.2, 3.3]
    /// Constraints: No constraints specified.
    def cov(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 100) + i * 4)
    def cov_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 100)
    /// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
    /// Example: /// Example: [1.23, 2.34, 3.45]
    /// Constraints: No constraints specified.
    def errEllp(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 102) + i * 4)
    def errEllp_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 102)
    /// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['MTI', 'POI']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 104) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 104)
    /// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
    /// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 106) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 106)
    /// The call sign currently assigned to this track object.
    /// Example: /// Example: callSign
    /// Constraints: Minimum length = 0, Maximum length = 24
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Flag indicating that this track is fused from multiple sensor sources.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def multiSource() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 110, 0))
    /// The J-series message type, if this track is derived from a J-series message.
    /// Example: /// Example: J12.5
    /// Constraints: Minimum length = 0, Maximum length = 5
    def jSeries() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
    /// Example: /// Example: 14
    /// Constraints: No constraints specified.
    def strength() -> int:
        return flatbuffers.field_int32(buf_, pos_, 114, 0)
    /// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    def m1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 116, 0)
    /// Mode-1 validity status.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def m1v() -> int:
        return flatbuffers.field_int32(buf_, pos_, 118, 0)
    /// Mode-2 interrogation response (military identification code).
    /// Example: /// Example: 1234
    /// Constraints: No constraints specified.
    def m2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 120, 0)
    /// Mode-2 validity status.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def m2v() -> int:
        return flatbuffers.field_int32(buf_, pos_, 122, 0)
    /// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
    /// Example: /// Example: 2636
    /// Constraints: No constraints specified.
    def m3a() -> int:
        return flatbuffers.field_int32(buf_, pos_, 124, 0)
    /// Mode-3/A validity status.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def m3av() -> int:
        return flatbuffers.field_int32(buf_, pos_, 126, 0)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 128) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 128)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 132)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Track_Abridged_dataMode_Enum:
        return Track_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 136, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)

def GetRootAsTrack_Abridged(buf:string): return Track_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Track_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(68)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_cntct(cntct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, cntct)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, createdBy)
        return this
    def add_msgTs(msgTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, msgTs)
        return this
    def add_msnId(msnId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, msnId)
        return this
    def add_assetNat(assetNat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, assetNat)
        return this
    def add_asset(asset:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, asset)
        return this
    def add_sen(sen:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, sen)
        return this
    def add_senQual(senQual:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, senQual)
        return this
    def add_trkId(trkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, trkId)
        return this
    def add_trkNum(trkNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, trkNum)
        return this
    def add_trkStat(trkStat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, trkStat)
        return this
    def add_objNat(objNat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, objNat)
        return this
    def add_objId(objId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, objId)
        return this
    def add_objType(objType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, objType)
        return this
    def add_objSpec(objSpec:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, objSpec)
        return this
    def add_objPlat(objPlat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, objPlat)
        return this
    def add_objAct(objAct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, objAct)
        return this
    def add_modType(modType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, modType)
        return this
    def add_trkItmId(trkItmId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, trkItmId)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, ts)
        return this
    def add_trkQual(trkQual:int):
        b_.PrependInt32Slot(23, trkQual, 0)
        return this
    def add_trkPtType(trkPtType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, trkPtType)
        return this
    def add_objIdent(objIdent:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, objIdent)
        return this
    def add_identCred(identCred:int):
        b_.PrependInt32Slot(26, identCred, 0)
        return this
    def add_identRel(identRel:int):
        b_.PrependInt32Slot(27, identRel, 0)
        return this
    def add_identAmp(identAmp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, identAmp)
        return this
    def add_env(env:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, env)
        return this
    def add_envConf(envConf:float):
        b_.PrependFloat64Slot(30, envConf, 0.0)
        return this
    def add_trkConf(trkConf:float):
        b_.PrependFloat64Slot(31, trkConf, 0.0)
        return this
    def add_ecefPos(ecefPos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, ecefPos)
        return this
    def add_ecefVel(ecefVel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, ecefVel)
        return this
    def add_ecefAcc(ecefAcc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, ecefAcc)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(35, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(36, lon, 0.0)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(37, alt, 0.0)
        return this
    def add_spd(spd:float):
        b_.PrependFloat64Slot(38, spd, 0.0)
        return this
    def add_hdng(hdng:float):
        b_.PrependFloat64Slot(39, hdng, 0.0)
        return this
    def add_course(course:float):
        b_.PrependFloat64Slot(40, course, 0.0)
        return this
    def add_lco(lco:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, lco)
        return this
    def add_lcs(lcs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, lcs)
        return this
    def add_lcPos(lcPos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, lcPos)
        return this
    def add_lcVel(lcVel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, lcVel)
        return this
    def add_lcAcc(lcAcc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, lcAcc)
        return this
    def add_eNUVel(eNUVel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, eNUVel)
        return this
    def add_eNUPos(eNUPos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, eNUPos)
        return this
    def add_cov(cov:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, cov)
        return this
    def add_errEllp(errEllp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, errEllp)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, srcIds)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, callSign)
        return this
    def add_multiSource(multiSource:bool):
        b_.PrependBoolSlot(53, multiSource, 0)
        return this
    def add_jSeries(jSeries:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, jSeries)
        return this
    def add_strength(strength:int):
        b_.PrependInt32Slot(55, strength, 0)
        return this
    def add_m1(m1:int):
        b_.PrependInt32Slot(56, m1, 0)
        return this
    def add_m1v(m1v:int):
        b_.PrependInt32Slot(57, m1v, 0)
        return this
    def add_m2(m2:int):
        b_.PrependInt32Slot(58, m2, 0)
        return this
    def add_m2v(m2v:int):
        b_.PrependInt32Slot(59, m2v, 0)
        return this
    def add_m3a(m3a:int):
        b_.PrependInt32Slot(60, m3a, 0)
        return this
    def add_m3av(m3av:int):
        b_.PrependInt32Slot(61, m3av, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, tags)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, origin)
        return this
    def add_dataMode(dataMode:Track_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(66, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, origNetwork)
        return this
    def end():
        return b_.EndObject()

def Track_AbridgedStartEcefPosVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateEcefPosVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartEcefVelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateEcefVelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartEcefAccVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateEcefAccVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartLcoVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateLcoVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartLcsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateLcsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartLcPosVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateLcPosVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartLcVelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateLcVelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartLcAccVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateLcAccVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartENUVelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateENUVelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartENUPosVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateENUPosVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartCovVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateCovVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartErrEllpVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateErrEllpVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def Track_AbridgedStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Track_AbridgedCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

