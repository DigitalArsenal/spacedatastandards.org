// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class LogisticsSupportItems_Abridged

/// /// Support items associated with this LogisticsSupport record.
class LogisticsSupportItems_Abridged : flatbuffers.handle
    /// The type of recovery request needed. Contact the source provider for details.
    /// Example: /// Example: E
    /// Constraints: Minimum length = 1, Maximum length = 1
    def recoveryRequestTypeCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The request or record number for this item type (Equipent, Part, or MRT).
    /// Example: /// Example: 89208
    /// Constraints: Minimum length = 0, Maximum length = 5
    def requestNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def quantity() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// The technical order name of the part ordered.
    /// Example: /// Example: HOIST ADAPTER KIT
    /// Constraints: Minimum length = 0, Maximum length = 150
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
    /// Example: /// Example: FB44273196X501XXX
    /// Constraints: Minimum length = 0, Maximum length = 17
    def shipmentUnitId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
    /// Example: /// Example: X400LA31949108
    /// Constraints: Minimum length = 0, Maximum length = 17
    def redeployShipmentUnitId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
    /// Example: /// Example: 231942400
    /// Constraints: Minimum length = 0, Maximum length = 12
    def jobControlNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
    /// Example: /// Example: PHIK
    /// Constraints: Minimum length = 0, Maximum length = 4
    def sourceICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    /// Example: /// Example: T89003
    /// Constraints: Minimum length = 0, Maximum length = 10
    def deployPlanNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    /// Example: /// Example: T89003
    /// Constraints: Minimum length = 0, Maximum length = 10
    def redeployPlanNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// This element indicates whether or not the supplied item is contained within another item.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def cannibalized() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
    /// Example: /// Example: SMITH, JOHN J
    /// Constraints: Minimum length = 0, Maximum length = 68
    def siPOC() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The time the item is ready, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:04:00.123Z
    /// Constraints: No constraints specified.
    def readyTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The time the item is received, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:04:00.123Z
    /// Constraints: No constraints specified.
    def receivedTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// This element indicates if the supplied item is characterized as additional support.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def resupportFlag() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-07-17T19:04:00.123Z
    /// Constraints: No constraints specified.
    def itemLastChangedDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The parts associated with this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsParts(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def logisticsParts_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// The specialties required to implement this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsSpecialties(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def logisticsSpecialties_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// Remarks associated with this support item.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def logisticsRemarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def logisticsRemarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)

def GetRootAsLogisticsSupportItems_Abridged(buf:string): return LogisticsSupportItems_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct LogisticsSupportItems_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(19)
        return this
    def add_recoveryRequestTypeCode(recoveryRequestTypeCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, recoveryRequestTypeCode)
        return this
    def add_requestNumber(requestNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, requestNumber)
        return this
    def add_quantity(quantity:int):
        b_.PrependInt32Slot(2, quantity, 0)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, description)
        return this
    def add_shipmentUnitId(shipmentUnitId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, shipmentUnitId)
        return this
    def add_redeployShipmentUnitId(redeployShipmentUnitId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, redeployShipmentUnitId)
        return this
    def add_jobControlNumber(jobControlNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, jobControlNumber)
        return this
    def add_sourceICAO(sourceICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, sourceICAO)
        return this
    def add_deployPlanNumber(deployPlanNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, deployPlanNumber)
        return this
    def add_redeployPlanNumber(redeployPlanNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, redeployPlanNumber)
        return this
    def add_cannibalized(cannibalized:bool):
        b_.PrependBoolSlot(10, cannibalized, 0)
        return this
    def add_siPOC(siPOC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, siPOC)
        return this
    def add_readyTime(readyTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, readyTime)
        return this
    def add_receivedTime(receivedTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, receivedTime)
        return this
    def add_resupportFlag(resupportFlag:bool):
        b_.PrependBoolSlot(14, resupportFlag, 0)
        return this
    def add_itemLastChangedDate(itemLastChangedDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, itemLastChangedDate)
        return this
    def add_logisticsParts(logisticsParts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, logisticsParts)
        return this
    def add_logisticsSpecialties(logisticsSpecialties:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, logisticsSpecialties)
        return this
    def add_logisticsRemarks(logisticsRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, logisticsRemarks)
        return this
    def end():
        return b_.EndObject()

def LogisticsSupportItems_AbridgedStartLogisticsPartsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupportItems_AbridgedCreateLogisticsPartsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LogisticsSupportItems_AbridgedStartLogisticsSpecialtiesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupportItems_AbridgedCreateLogisticsSpecialtiesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LogisticsSupportItems_AbridgedStartLogisticsRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LogisticsSupportItems_AbridgedCreateLogisticsRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

