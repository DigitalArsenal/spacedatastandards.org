// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class SOICalibration_Full

/// /// Schema for SOI Calibration data.
class SOICalibration_Full : flatbuffers.handle
    /// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    def calExtinctionCoeff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 4, 0.0)
    /// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    /// Example: /// Example: 30086.25
    /// Constraints: No constraints specified.
    def calSkyBg() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def calBgIntensity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
    /// Example: /// Example: 19.23664587
    /// Constraints: No constraints specified.
    def calSpectralFilterSolarMag() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
    /// Example: /// Example: 25.15682157
    /// Constraints: No constraints specified.
    def calZeroPoint() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def calNumDetectedStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)
    /// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def calNumCorrelatedStars() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
    /// Example: /// Example: 0.06474939
    /// Constraints: No constraints specified.
    def calExtinctionCoeffUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
    /// Example: /// Example: 0.19708838
    /// Constraints: No constraints specified.
    def calExtinctionCoeffMaxUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
    /// Example: /// Example: 2023-01-02T16:00:00.123Z
    /// Constraints: No constraints specified.
    def calTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Type of calibration (e.g. PRE, MID, POST).
    /// Example: /// Example: PRE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def calType() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)

def GetRootAsSOICalibration_Full(buf:string): return SOICalibration_Full { buf, flatbuffers.indirect(buf, 0) }

struct SOICalibration_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(11)
        return this
    def add_calExtinctionCoeff(calExtinctionCoeff:float):
        b_.PrependFloat64Slot(0, calExtinctionCoeff, 0.0)
        return this
    def add_calSkyBg(calSkyBg:float):
        b_.PrependFloat64Slot(1, calSkyBg, 0.0)
        return this
    def add_calBgIntensity(calBgIntensity:float):
        b_.PrependFloat64Slot(2, calBgIntensity, 0.0)
        return this
    def add_calSpectralFilterSolarMag(calSpectralFilterSolarMag:float):
        b_.PrependFloat64Slot(3, calSpectralFilterSolarMag, 0.0)
        return this
    def add_calZeroPoint(calZeroPoint:float):
        b_.PrependFloat64Slot(4, calZeroPoint, 0.0)
        return this
    def add_calNumDetectedStars(calNumDetectedStars:int):
        b_.PrependInt32Slot(5, calNumDetectedStars, 0)
        return this
    def add_calNumCorrelatedStars(calNumCorrelatedStars:int):
        b_.PrependInt32Slot(6, calNumCorrelatedStars, 0)
        return this
    def add_calExtinctionCoeffUnc(calExtinctionCoeffUnc:float):
        b_.PrependFloat64Slot(7, calExtinctionCoeffUnc, 0.0)
        return this
    def add_calExtinctionCoeffMaxUnc(calExtinctionCoeffMaxUnc:float):
        b_.PrependFloat64Slot(8, calExtinctionCoeffMaxUnc, 0.0)
        return this
    def add_calTime(calTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, calTime)
        return this
    def add_calType(calType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, calType)
        return this
    def end():
        return b_.EndObject()

