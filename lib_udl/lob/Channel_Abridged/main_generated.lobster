// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Channel_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Channel_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Channel_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Channel_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Channel_Abridged_dataMode_Enum_EXERCISE = 3

class Channel_Abridged

/// /// Channel information on a particular transponder.
class Channel_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: CHANNEL-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// ID of the parent transponder object for this Channel.
    /// Example: /// Example: REF-TRANSPONDER-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idTransponder() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Channel name.
    /// Example: /// Example: Example name
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Channel type.
    /// Example: /// Example: Example type
    /// Constraints: Minimum length = 0, Maximum length = 45
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Identifier of the particular beam for this channel.
    /// Example: /// Example: REF-BEAM-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idBeam() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
    /// Example: /// Example: B8VD
    /// Constraints: Minimum length = 0, Maximum length = 36
    def beamName() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// ID of the RF Band object for this channel.
    /// Example: /// Example: REF-RFBAND-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idRFBand() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Channel encryption.
    /// Example: /// Example: Example encryption
    /// Constraints: Minimum length = 0, Maximum length = 45
    def encryption() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Pkg.
    /// Example: /// Example: Example pkg
    /// Constraints: Minimum length = 0, Maximum length = 45
    def pkg() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Res.
    /// Example: /// Example: Example res
    /// Constraints: Minimum length = 0, Maximum length = 45
    def res() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Channel compression.
    /// Example: /// Example: Example compression
    /// Constraints: Minimum length = 0, Maximum length = 45
    def compression() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Channel vPid.
    /// Example: /// Example: VP-ID
    /// Constraints: Minimum length = 0, Maximum length = 45
    def vpid() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Channel aPid.
    /// Example: /// Example: AP-ID
    /// Constraints: Minimum length = 0, Maximum length = 45
    def apid() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// SID.
    /// Example: /// Example: S-ID
    /// Constraints: Minimum length = 0, Maximum length = 45
    def sid() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Owner.
    /// Example: /// Example: example_owner
    /// Constraints: Minimum length = 0, Maximum length = 128
    def owner() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Source of the data.
    /// Example: /// Example: system.source
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: example_origin
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Channel_Abridged_dataMode_Enum:
        return Channel_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 42, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)

def GetRootAsChannel_Abridged(buf:string): return Channel_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct Channel_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idTransponder(idTransponder:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idTransponder)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, name)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, type)
        return this
    def add_idBeam(idBeam:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idBeam)
        return this
    def add_beamName(beamName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, beamName)
        return this
    def add_idRFBand(idRFBand:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idRFBand)
        return this
    def add_encryption(encryption:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, encryption)
        return this
    def add_pkg(pkg:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, pkg)
        return this
    def add_res(res:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, res)
        return this
    def add_compression(compression:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, compression)
        return this
    def add_vpid(vpid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, vpid)
        return this
    def add_apid(apid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, apid)
        return this
    def add_sid(sid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, sid)
        return this
    def add_owner(owner:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, owner)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origNetwork)
        return this
    def add_dataMode(dataMode:Channel_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(19, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, createdBy)
        return this
    def end():
        return b_.EndObject()

