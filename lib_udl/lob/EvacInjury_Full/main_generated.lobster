// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EvacInjury_Full

/// /// Injury specifics.
class EvacInjury_Full : flatbuffers.handle
    /// Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
    /// Example: /// Example: ABRASION
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    /// Example: /// Example: ARM LEFT FRONT
    /// Constraints: Minimum length = 0, Maximum length = 32
    def bodyPart() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The time of the injury, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-10-15T16:00:00.123Z
    /// Constraints: No constraints specified.
    def time() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Additional comments on the patient's injury information.
    /// Example: /// Example: Comments on the patient's injury.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsEvacInjury_Full(buf:string): return EvacInjury_Full { buf, flatbuffers.indirect(buf, 0) }

struct EvacInjury_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, type)
        return this
    def add_bodyPart(bodyPart:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, bodyPart)
        return this
    def add_time(time:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, time)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, comments)
        return this
    def end():
        return b_.EndObject()

