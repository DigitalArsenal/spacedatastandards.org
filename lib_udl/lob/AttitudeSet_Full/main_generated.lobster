// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AttitudeSet_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AttitudeSet_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AttitudeSet_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AttitudeSet_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AttitudeSet_Full_dataMode_Enum_EXERCISE = 3

class AttitudeSet_Full

/// /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
class AttitudeSet_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ATTITUDESET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the on-orbit satellite to which this attitude set applies.
    /// Example: /// Example: 41947
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/catalog number of the on-orbit object to which this attitude set applies.
    /// Example: /// Example: 41947
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: D6593
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The type of attitude message or messages associated with this set.
    /// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
    /// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
    /// Example: /// Example: AEM
    /// Constraints: Minimum length = 1, Maximum length = 3
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
    /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
    /// Constraints: Minimum length = 0, Maximum length = 36
    def esId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
    /// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
    /// Constraints: No constraints specified.
    def asRef(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def asRef_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
    /// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
    /// Example: /// Example: 2022-07-07T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
    /// Example: /// Example: 2022-07-07T18:00:00.654321Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
    /// Example: /// Example: SCBODY
    /// Constraints: Minimum length = 1, Maximum length = 36
    def frame1() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 1, Maximum length = 36
    def frame2() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Number of attitude records contained in this set.
    /// Example: /// Example: 120
    /// Constraints: No constraints specified.
    def numPoints() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
    /// Example: /// Example: 60
    /// Constraints: No constraints specified.
    def stepSize() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Initial precession angle (ECI J2000 frame) in degrees.
    /// Example: /// Example: 30.5
    /// Constraints: No constraints specified.
    def precAngleInit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Initial spin angle (ECI J2000 frame) in degrees.
    /// Example: /// Example: 25.5
    /// Constraints: No constraints specified.
    def spinAngleInit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
    /// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
    /// Example: /// Example: 123
    /// Constraints: Minimum length = 0, Maximum length = 3
    def eulerRotSeq() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Collection of attitude data associated with this Attitude Set.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def attitudeList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def attitudeList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Recommended interpolation method for estimating attitude ephemeris data.
    /// Example: /// Example: LINEAR
    /// Constraints: Minimum length = 0, Maximum length = 16
    def interpolator() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Recommended polynomial interpolation degree.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def interpolatorDegree() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// Optional notes/comments for this attitude set.
    /// Example: /// Example: Notes for this attitude set
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-07-05T12:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AttitudeSet_Full_dataMode_Enum:
        return AttitudeSet_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 58, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def onOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)

def GetRootAsAttitudeSet_Full(buf:string): return AttitudeSet_Full { buf, flatbuffers.indirect(buf, 0) }

struct AttitudeSet_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(30)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origObjectId)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, type)
        return this
    def add_esId(esId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, esId)
        return this
    def add_asRef(asRef:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, asRef)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, origSensorId)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, endTime)
        return this
    def add_frame1(frame1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, frame1)
        return this
    def add_frame2(frame2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, frame2)
        return this
    def add_numPoints(numPoints:int):
        b_.PrependInt32Slot(14, numPoints, 0)
        return this
    def add_stepSize(stepSize:int):
        b_.PrependInt32Slot(15, stepSize, 0)
        return this
    def add_precAngleInit(precAngleInit:float):
        b_.PrependFloat64Slot(16, precAngleInit, 0.0)
        return this
    def add_spinAngleInit(spinAngleInit:float):
        b_.PrependFloat64Slot(17, spinAngleInit, 0.0)
        return this
    def add_eulerRotSeq(eulerRotSeq:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, eulerRotSeq)
        return this
    def add_attitudeList(attitudeList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, attitudeList)
        return this
    def add_interpolator(interpolator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, interpolator)
        return this
    def add_interpolatorDegree(interpolatorDegree:int):
        b_.PrependInt32Slot(21, interpolatorDegree, 0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, origin)
        return this
    def add_dataMode(dataMode:AttitudeSet_Full_dataMode_Enum):
        b_.PrependInt8Slot(27, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, origNetwork)
        return this
    def add_onOrbit(onOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, onOrbit)
        return this
    def end():
        return b_.EndObject()

def AttitudeSet_FullStartAsRefVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeSet_FullCreateAsRefVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AttitudeSet_FullStartAttitudeListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AttitudeSet_FullCreateAttitudeListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

