// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class ISRCollectionPlanned_Ingest

/// /// Planned start and stop for the collection.
class ISRCollectionPlanned_Ingest : flatbuffers.handle
    /// Start time of collection, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    def start() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Stop time of collection, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    def stop() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Additional start and stop for the collection.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def additional(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def additional_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)

def GetRootAsISRCollectionPlanned_Ingest(buf:string): return ISRCollectionPlanned_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct ISRCollectionPlanned_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(3)
        return this
    def add_start(start:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, start)
        return this
    def add_stop(stop:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, stop)
        return this
    def add_additional(additional:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, additional)
        return this
    def end():
        return b_.EndObject()

def ISRCollectionPlanned_IngestStartAdditionalVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollectionPlanned_IngestCreateAdditionalVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

