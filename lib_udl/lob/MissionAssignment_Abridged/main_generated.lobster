// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum MissionAssignment_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    MissionAssignment_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    MissionAssignment_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    MissionAssignment_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    MissionAssignment_Abridged_dataMode_Enum_EXERCISE = 3

class MissionAssignment_Abridged

/// /// Platform mission assignment data.
class MissionAssignment_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MISSIONASSIGNMENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The track ID that the status is referencing, addressee.
    /// Example: /// Example: TRK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trkId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The timestamp of the mission data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:01:01.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The mission assignment discrete value.
    /// Example: /// Example: MAD
    /// Constraints: Minimum length = 1, Maximum length = 16
    def mad() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Receipt/Compliance, values from TABLE B-9.
    /// Example: /// Example: RC-123
    /// Constraints: Minimum length = 0, Maximum length = 16
    def rc() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Recurrence rate, receipt/compliance.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def rr() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Track number objective.
    /// Example: /// Example: TRACK_NUMBER
    /// Constraints: No constraints specified.
    def tno() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Threat warning environment.
    /// Example: /// Example: THREAT_WARNING
    /// Constraints: Minimum length = 0, Maximum length = 16
    def twenv() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Origin of index number.
    /// Example: /// Example: ORIGIN
    /// Constraints: Minimum length = 0, Maximum length = 16
    def orginx() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Environment.
    /// Example: /// Example: ENV
    /// Constraints: Minimum length = 0, Maximum length = 16
    def env() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Strength.
    /// Example: /// Example: STRENGTH
    /// Constraints: Minimum length = 0, Maximum length = 16
    def sz() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Index number.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def index() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def c1associateddmpis() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
    /// Example: /// Example: C2SPC
    /// Constraints: No constraints specified.
    def c2spc() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
    /// Example: /// Example: C2AIR
    /// Constraints: No constraints specified.
    def c2air() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
    /// Example: /// Example: C2SUR
    /// Constraints: No constraints specified.
    def c2sur() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
    /// Example: /// Example: C2LND
    /// Constraints: No constraints specified.
    def c2lnd() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// TARGET DATA CONTINUATION WORD - identity.
    /// Example: /// Example: C2ID
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c2id() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
    /// Example: /// Example: C2IDAMP
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c2idamplifyingdescriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def c2alt() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def c2crs() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def c2spd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// TARGET DATA CONTINUATION WORD - special interest indicator.
    /// Example: /// Example: C2SPECIAL
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c2specialinterestindicator() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// TARGET DATA CONTINUATION WORD - exercise indicator.
    /// Example: /// Example: C2EXERCISE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c2exerciseindicator() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// TARGET DATA CONTINUATION WORD - method of fire.
    /// Example: /// Example: MOF
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c2exercisemof() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def c3lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def c3lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def c3elv() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// TARGET DATA CONTINUATION WORD - point type 1.
    /// Example: /// Example: C3PTL
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c3ptl() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// TARGET DATA CONTINUATION WORD - point number.
    /// Example: /// Example: C3PTNUM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c3ptnum() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
    /// Example: /// Example: C4TGT
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c4tgt() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// SURFACE ATTACK CONTINUATION WORD - target defenses.
    /// Example: /// Example: C4DEF
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c4def() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c4runin() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def c4egress() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def c4numberofstores() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// SURFACE ATTACK CONTINUATION WORD - type of stores.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def c4typeofstores() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// SURFACE ATTACK CONTINUATION WORD - time discrete.
    /// Example: /// Example: C4TIMED
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c4timediscrete() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// SURFACE ATTACK CONTINUATION WORD - hour.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def c4tm() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// SURFACE ATTACK CONTINUATION WORD - minute.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c4colon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c4mod() -> int:
        return flatbuffers.field_int32(buf_, pos_, 88, 0)
    /// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5haeadj() -> int:
        return flatbuffers.field_int32(buf_, pos_, 90, 0)
    /// CONTINUATION WORD - time window.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5tw() -> int:
        return flatbuffers.field_int32(buf_, pos_, 92, 0)
    /// CONTINUATION WORD - target bearing.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5tgtbrng() -> int:
        return flatbuffers.field_int32(buf_, pos_, 94, 0)
    /// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5latlsb() -> int:
        return flatbuffers.field_int32(buf_, pos_, 96, 0)
    /// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5lonlsb() -> int:
        return flatbuffers.field_int32(buf_, pos_, 98, 0)
    /// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5elevationlsbs() -> int:
        return flatbuffers.field_int32(buf_, pos_, 100, 0)
    /// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c5colon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 102, 0)
    /// TARGETING CONTINUATION WORD - laser illuminator code.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c6laser() -> int:
        return flatbuffers.field_int32(buf_, pos_, 104, 0)
    /// TARGETING CONTINUATION WORD - index number, related, 0=NS.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c6intel() -> int:
        return flatbuffers.field_int32(buf_, pos_, 106, 0)
    /// TARGETING CONTINUATION WORD - track number, related to 3.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def c6tnr3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 108, 0)
    /// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
    /// Example: /// Example: C6DSPCT
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c6dspct() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// TARGETING CONTINUATION WORD - designator/seeker pulse code.
    /// Example: /// Example: C6DSPC
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c6dspc() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
    /// Example: /// Example: C6FPLPM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c6fplpm() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// TARGETING CONTINUATION WORD - long pulse mode.
    /// Example: /// Example: C6LONGPM
    /// Constraints: Minimum length = 0, Maximum length = 16
    def c6longpm() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// THIRD PARTY CONTINUATION WORD  - track number, index originator.
    /// Example: /// Example: C7TNOR
    /// Constraints: No constraints specified.
    def c7tnor() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// THIRD PARTY CONTINUATION WORD  - index number, third party.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def c7in3p() -> int:
        return flatbuffers.field_int32(buf_, pos_, 120, 0)
    /// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def c7elang2() -> float:
        return flatbuffers.field_float64(buf_, pos_, 122, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> MissionAssignment_Abridged_dataMode_Enum:
        return MissionAssignment_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 132, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)

def GetRootAsMissionAssignment_Abridged(buf:string): return MissionAssignment_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct MissionAssignment_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(66)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_trkId(trkId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, trkId)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, ts)
        return this
    def add_mad(mad:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, mad)
        return this
    def add_rc(rc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, rc)
        return this
    def add_rr(rr:int):
        b_.PrependInt32Slot(6, rr, 0)
        return this
    def add_tno(tno:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, tno)
        return this
    def add_twenv(twenv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, twenv)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(9, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(10, lon, 0.0)
        return this
    def add_orginx(orginx:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, orginx)
        return this
    def add_env(env:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, env)
        return this
    def add_sz(sz:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, sz)
        return this
    def add_index(index:int):
        b_.PrependInt32Slot(14, index, 0)
        return this
    def add_c1associateddmpis(c1associateddmpis:int):
        b_.PrependInt32Slot(15, c1associateddmpis, 0)
        return this
    def add_c2spc(c2spc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, c2spc)
        return this
    def add_c2air(c2air:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, c2air)
        return this
    def add_c2sur(c2sur:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, c2sur)
        return this
    def add_c2lnd(c2lnd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, c2lnd)
        return this
    def add_c2id(c2id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, c2id)
        return this
    def add_c2idamplifyingdescriptor(c2idamplifyingdescriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, c2idamplifyingdescriptor)
        return this
    def add_c2alt(c2alt:int):
        b_.PrependInt32Slot(22, c2alt, 0)
        return this
    def add_c2crs(c2crs:int):
        b_.PrependInt32Slot(23, c2crs, 0)
        return this
    def add_c2spd(c2spd:int):
        b_.PrependInt32Slot(24, c2spd, 0)
        return this
    def add_c2specialinterestindicator(c2specialinterestindicator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, c2specialinterestindicator)
        return this
    def add_c2exerciseindicator(c2exerciseindicator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, c2exerciseindicator)
        return this
    def add_c2exercisemof(c2exercisemof:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, c2exercisemof)
        return this
    def add_c3lat(c3lat:float):
        b_.PrependFloat64Slot(28, c3lat, 0.0)
        return this
    def add_c3lon(c3lon:float):
        b_.PrependFloat64Slot(29, c3lon, 0.0)
        return this
    def add_c3elv(c3elv:float):
        b_.PrependFloat64Slot(30, c3elv, 0.0)
        return this
    def add_c3ptl(c3ptl:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, c3ptl)
        return this
    def add_c3ptnum(c3ptnum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, c3ptnum)
        return this
    def add_c4tgt(c4tgt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, c4tgt)
        return this
    def add_c4def(c4def:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, c4def)
        return this
    def add_c4runin(c4runin:int):
        b_.PrependInt32Slot(35, c4runin, 0)
        return this
    def add_c4egress(c4egress:int):
        b_.PrependInt32Slot(36, c4egress, 0)
        return this
    def add_c4numberofstores(c4numberofstores:int):
        b_.PrependInt32Slot(37, c4numberofstores, 0)
        return this
    def add_c4typeofstores(c4typeofstores:int):
        b_.PrependInt32Slot(38, c4typeofstores, 0)
        return this
    def add_c4timediscrete(c4timediscrete:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, c4timediscrete)
        return this
    def add_c4tm(c4tm:int):
        b_.PrependInt32Slot(40, c4tm, 0)
        return this
    def add_c4colon(c4colon:int):
        b_.PrependInt32Slot(41, c4colon, 0)
        return this
    def add_c4mod(c4mod:int):
        b_.PrependInt32Slot(42, c4mod, 0)
        return this
    def add_c5haeadj(c5haeadj:int):
        b_.PrependInt32Slot(43, c5haeadj, 0)
        return this
    def add_c5tw(c5tw:int):
        b_.PrependInt32Slot(44, c5tw, 0)
        return this
    def add_c5tgtbrng(c5tgtbrng:int):
        b_.PrependInt32Slot(45, c5tgtbrng, 0)
        return this
    def add_c5latlsb(c5latlsb:int):
        b_.PrependInt32Slot(46, c5latlsb, 0)
        return this
    def add_c5lonlsb(c5lonlsb:int):
        b_.PrependInt32Slot(47, c5lonlsb, 0)
        return this
    def add_c5elevationlsbs(c5elevationlsbs:int):
        b_.PrependInt32Slot(48, c5elevationlsbs, 0)
        return this
    def add_c5colon(c5colon:int):
        b_.PrependInt32Slot(49, c5colon, 0)
        return this
    def add_c6laser(c6laser:int):
        b_.PrependInt32Slot(50, c6laser, 0)
        return this
    def add_c6intel(c6intel:int):
        b_.PrependInt32Slot(51, c6intel, 0)
        return this
    def add_c6tnr3(c6tnr3:int):
        b_.PrependInt32Slot(52, c6tnr3, 0)
        return this
    def add_c6dspct(c6dspct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, c6dspct)
        return this
    def add_c6dspc(c6dspc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, c6dspc)
        return this
    def add_c6fplpm(c6fplpm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, c6fplpm)
        return this
    def add_c6longpm(c6longpm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, c6longpm)
        return this
    def add_c7tnor(c7tnor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, c7tnor)
        return this
    def add_c7in3p(c7in3p:int):
        b_.PrependInt32Slot(58, c7in3p, 0)
        return this
    def add_c7elang2(c7elang2:float):
        b_.PrependFloat64Slot(59, c7elang2, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, origin)
        return this
    def add_dataMode(dataMode:MissionAssignment_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(64, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, origNetwork)
        return this
    def end():
        return b_.EndObject()

