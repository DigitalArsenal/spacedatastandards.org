// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Manifold_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Manifold_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Manifold_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Manifold_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Manifold_Full_dataMode_Enum_EXERCISE = 3

class Manifold_Full

/// /// A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.
class Manifold_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: MANIFOLD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// ID of the parent object of interest.
    /// Example: /// Example: OBJECTOFINTEREST-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idObjectOfInterest() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.
    /// Example: /// Example: PENDING
    /// Constraints: Minimum length = 0, Maximum length = 64
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Weight or probability of this manifold for prioritization purposes, between 0 and 1.
    /// Example: /// Example: 0.3
    /// Constraints: No constraints specified.
    def weight() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Applied delta V for this manifold's calculations, in km/sec.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def deltaV() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Applied delta V duration for this manifold's calculations in seconds.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def deltaT() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Read-only time the row was updated in the database, set automatically by the system on update.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Manifold_Full_dataMode_Enum:
        return Manifold_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 30, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)

def GetRootAsManifold_Full(buf:string): return Manifold_Full { buf, flatbuffers.indirect(buf, 0) }

struct Manifold_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(15)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idObjectOfInterest(idObjectOfInterest:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idObjectOfInterest)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, status)
        return this
    def add_weight(weight:float):
        b_.PrependFloat64Slot(4, weight, 0.0)
        return this
    def add_deltaV(deltaV:float):
        b_.PrependFloat64Slot(5, deltaV, 0.0)
        return this
    def add_deltaT(deltaT:float):
        b_.PrependFloat64Slot(6, deltaT, 0.0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origin)
        return this
    def add_dataMode(dataMode:Manifold_Full_dataMode_Enum):
        b_.PrependInt8Slot(13, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origNetwork)
        return this
    def end():
        return b_.EndObject()

