// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LaunchEvent_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    LaunchEvent_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    LaunchEvent_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    LaunchEvent_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    LaunchEvent_Abridged_dataMode_Enum_EXERCISE = 3

class LaunchEvent_Abridged

/// /// Information on known launch events.
class LaunchEvent_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LAUNCHEVENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: REF-ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Optional target-id, if missing in UDL.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The sources or SCG references from which the classification of this data is derived.
    /// Example: /// Example: Example source
    /// Constraints: Minimum length = 0, Maximum length = 128
    def derivedFrom() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The declassification date of this data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:02.123Z
    /// Constraints: No constraints specified.
    def declassificationDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Declassification string of this data.
    /// Example: /// Example: Example Declassification
    /// Constraints: Minimum length = 0, Maximum length = 256
    def declassificationString() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Timestamp of the originating message in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T00:00:00.123Z
    /// Constraints: No constraints specified.
    def msgCreateDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The DISOB launch Failure Code, if applicable.
    /// Example: /// Example: Example failure code
    /// Constraints: Minimum length = 0, Maximum length = 100
    def launchFailureCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The launch date, in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T00:00:00.123Z
    /// Constraints: No constraints specified.
    def launchDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The Basic Encyclopedia Number, if applicable.
    /// Example: /// Example: ENC-123
    /// Constraints: Minimum length = 0, Maximum length = 10
    def beNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The OSuffix, if applicable.
    /// Example: /// Example: oSuffix
    /// Constraints: Minimum length = 0, Maximum length = 10
    def oSuffix() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The Launch facility name.
    /// Example: /// Example: Example launch facility name
    /// Constraints: Minimum length = 0, Maximum length = 100
    def launchFacilityName() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> LaunchEvent_Abridged_dataMode_Enum:
        return LaunchEvent_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)

def GetRootAsLaunchEvent_Abridged(buf:string): return LaunchEvent_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct LaunchEvent_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(20)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idOnOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, origObjectId)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, classificationMarking)
        return this
    def add_derivedFrom(derivedFrom:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, derivedFrom)
        return this
    def add_declassificationDate(declassificationDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, declassificationDate)
        return this
    def add_declassificationString(declassificationString:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, declassificationString)
        return this
    def add_msgCreateDate(msgCreateDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, msgCreateDate)
        return this
    def add_launchFailureCode(launchFailureCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, launchFailureCode)
        return this
    def add_launchDate(launchDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, launchDate)
        return this
    def add_beNumber(beNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, beNumber)
        return this
    def add_oSuffix(oSuffix:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, oSuffix)
        return this
    def add_launchFacilityName(launchFacilityName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, launchFacilityName)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdBy)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origin)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, source)
        return this
    def add_dataMode(dataMode:LaunchEvent_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(17, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origNetwork)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(19, satNo, 0)
        return this
    def end():
        return b_.EndObject()

