// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EventEvolution_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EventEvolution_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EventEvolution_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EventEvolution_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EventEvolution_Full_dataMode_Enum_EXERCISE = 3

class EventEvolution_Full

/// /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
class EventEvolution_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EVENT_EVOL_ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
    /// Example: /// Example: EVENT_ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def eventId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
    /// Example: /// Example: PROTEST
    /// Constraints: Minimum length = 0, Maximum length = 128
    def category() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Summary or description of the activity or event.
    /// Example: /// Example: Example summary of the event.
    /// Constraints: Minimum length = 1, Maximum length = 4096
    def summary() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-12-02T16:00:00.123Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-12-03T16:00:00.123Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
    /// Example: /// Example: UNKNOWN
    /// Constraints: Minimum length = 0, Maximum length = 24
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
    /// Example: /// Example: Colorado
    /// Constraints: Minimum length = 0, Maximum length = 128
    def geoAdminLevel1() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
    /// Example: /// Example: El Paso County
    /// Constraints: Minimum length = 0, Maximum length = 128
    def geoAdminLevel2() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
    /// Example: /// Example: Colorado Springs
    /// Constraints: Minimum length = 0, Maximum length = 128
    def geoAdminLevel3() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def redact() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    /// Example: /// Example: ['AIS', 'CONJUNCTION']
    /// Constraints: No constraints specified.
    def srcTyps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def srcTyps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    /// Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
    /// Constraints: No constraints specified.
    def srcIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def srcIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
    /// Example: /// Example: Description of relationship between srcTyps and srcIds
    /// Constraints: Minimum length = 0, Maximum length = 2056
    def dataDescription() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def area() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def atext() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    def agjson() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Type of region as projected on the ground.
    /// Example: /// Example: POLYGON
    /// Constraints: Minimum length = 0, Maximum length = 128
    def atype() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def andims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 4326
    /// Constraints: No constraints specified.
    def asrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// List of URLs to before/after images of this point of interest entity.
    /// Example: /// Example: ['URL1', 'URL2']
    /// Constraints: No constraints specified.
    def url(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 48) + i * 4)
    def url_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 48)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2021-12-02T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EventEvolution_Full_dataMode_Enum:
        return EventEvolution_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 62, 0))

def GetRootAsEventEvolution_Full(buf:string): return EventEvolution_Full { buf, flatbuffers.indirect(buf, 0) }

struct EventEvolution_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(30)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_eventId(eventId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, eventId)
        return this
    def add_category(category:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, category)
        return this
    def add_summary(summary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, summary)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, endTime)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, status)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, countryCode)
        return this
    def add_geoAdminLevel1(geoAdminLevel1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, geoAdminLevel1)
        return this
    def add_geoAdminLevel2(geoAdminLevel2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, geoAdminLevel2)
        return this
    def add_geoAdminLevel3(geoAdminLevel3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, geoAdminLevel3)
        return this
    def add_redact(redact:bool):
        b_.PrependBoolSlot(12, redact, 0)
        return this
    def add_srcTyps(srcTyps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, srcTyps)
        return this
    def add_srcIds(srcIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, srcIds)
        return this
    def add_dataDescription(dataDescription:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, dataDescription)
        return this
    def add_area(area:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, area)
        return this
    def add_atext(atext:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, atext)
        return this
    def add_agjson(agjson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, agjson)
        return this
    def add_atype(atype:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, atype)
        return this
    def add_andims(andims:int):
        b_.PrependInt32Slot(20, andims, 0)
        return this
    def add_asrid(asrid:int):
        b_.PrependInt32Slot(21, asrid, 0)
        return this
    def add_url(url:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, url)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, origNetwork)
        return this
    def add_dataMode(dataMode:EventEvolution_Full_dataMode_Enum):
        b_.PrependInt8Slot(29, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def EventEvolution_FullStartSrcTypsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EventEvolution_FullCreateSrcTypsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EventEvolution_FullStartSrcIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EventEvolution_FullCreateSrcIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EventEvolution_FullStartUrlVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EventEvolution_FullCreateUrlVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EventEvolution_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EventEvolution_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

