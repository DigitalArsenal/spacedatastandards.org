// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiHRRScatterer_Full

/// /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
class MtiHRRScatterer_Full : flatbuffers.handle
    /// Scatterer’s power magnitude.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h32_1() -> int:
        return flatbuffers.field_int32(buf_, pos_, 4, 0)
    /// Scatterer’s complex phase, in degrees.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h32_2() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h32_3() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def h32_4() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)

def GetRootAsMtiHRRScatterer_Full(buf:string): return MtiHRRScatterer_Full { buf, flatbuffers.indirect(buf, 0) }

struct MtiHRRScatterer_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_h32_1(h32_1:int):
        b_.PrependInt32Slot(0, h32_1, 0)
        return this
    def add_h32_2(h32_2:int):
        b_.PrependInt32Slot(1, h32_2, 0)
        return this
    def add_h32_3(h32_3:int):
        b_.PrependInt32Slot(2, h32_3, 0)
        return this
    def add_h32_4(h32_4:int):
        b_.PrependInt32Slot(3, h32_4, 0)
        return this
    def end():
        return b_.EndObject()

