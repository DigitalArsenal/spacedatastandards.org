// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum ISRCollection_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    ISRCollection_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    ISRCollection_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    ISRCollection_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    ISRCollection_Full_dataMode_Enum_EXERCISE = 3

class ISRCollection_Full

/// /// ISR Collection data.
class ISRCollection_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ISRCOLLECTION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Version of the IDEX software the request came from for compatibility.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def idexVersion() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// Human readable Mission Name.
    /// Example: /// Example: Example mission name
    /// Constraints: Minimum length = 0, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Mission Identifier.
    /// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Designation of mission Area Of Responsibility.
    /// Example: /// Example: Kandahar
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionAOR() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Primary type of intelligence to be collected during the mission.
    /// Example: /// Example: Sig
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionPrimaryIntelDiscipline() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Sub category of primary intelligence to be collected.
    /// Example: /// Example: FMV
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionPrimarySubCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Type of intelligence to be collected second.
    /// Example: /// Example: Intelligence_2
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionSecondaryIntelDiscipline() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Mission sub category for secondary intelligence discipline to be collected.
    /// Example: /// Example: Convoy
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionSecondarySubCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// What is the primary objective(Role) of this mission.
    /// Example: /// Example: Targeting of Lead Vehicle
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionRole() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Mission operation name.
    /// Example: /// Example: OP-HONEY-BADGER
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionOperation() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Mission Priority (1-n).
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def missionPriority() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Name of the Supporting unit/Location that is performing this mission.
    /// Example: /// Example: ENVOYS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionSupportedUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Text version of what we are emphasizing in this mission.
    /// Example: /// Example: Mission emphasis
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionEmphasis() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def missionStartPointLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.23
    /// Constraints: No constraints specified.
    def missionStartPointLong() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Mission geographical collection area.
    /// Example: /// Example: Example collection area
    /// Constraints: Minimum length = 0, Maximum length = 512
    def missionCollectionArea() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Joint Operations Area.
    /// Example: /// Example: Operation area
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionJoa() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
    /// Example: /// Example: MATRIX
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionSyncMatrixBin() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
    /// Example: /// Example: US
    /// Constraints: Minimum length = 0, Maximum length = 4
    def missionCountry() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Region of the mission.
    /// Example: /// Example: Example Region
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionRegion() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Subregion of the mission.
    /// Example: /// Example: Example Subregion
    /// Constraints: Minimum length = 0, Maximum length = 32
    def missionSubRegion() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Mission desired collection requirements.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def collectionRequirements(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def collectionRequirements_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Object for data dissemination.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def transit(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 52) + i * 4)
    def transit_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 52)
    /// Individual taskings to complete the mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def taskings(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 54) + i * 4)
    def taskings_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 54)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2021-01-19T01:01:15.001Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> ISRCollection_Full_dataMode_Enum:
        return ISRCollection_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)

def GetRootAsISRCollection_Full(buf:string): return ISRCollection_Full { buf, flatbuffers.indirect(buf, 0) }

struct ISRCollection_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(34)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idexVersion(idexVersion:int):
        b_.PrependInt32Slot(2, idexVersion, 0)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, name)
        return this
    def add_missionId(missionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, missionId)
        return this
    def add_missionAOR(missionAOR:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, missionAOR)
        return this
    def add_missionPrimaryIntelDiscipline(missionPrimaryIntelDiscipline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, missionPrimaryIntelDiscipline)
        return this
    def add_missionPrimarySubCategory(missionPrimarySubCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, missionPrimarySubCategory)
        return this
    def add_missionSecondaryIntelDiscipline(missionSecondaryIntelDiscipline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, missionSecondaryIntelDiscipline)
        return this
    def add_missionSecondarySubCategory(missionSecondarySubCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, missionSecondarySubCategory)
        return this
    def add_missionRole(missionRole:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, missionRole)
        return this
    def add_missionOperation(missionOperation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, missionOperation)
        return this
    def add_missionPriority(missionPriority:int):
        b_.PrependInt32Slot(12, missionPriority, 0)
        return this
    def add_missionSupportedUnit(missionSupportedUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, missionSupportedUnit)
        return this
    def add_missionEmphasis(missionEmphasis:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, missionEmphasis)
        return this
    def add_missionStartPointLat(missionStartPointLat:float):
        b_.PrependFloat64Slot(15, missionStartPointLat, 0.0)
        return this
    def add_missionStartPointLong(missionStartPointLong:float):
        b_.PrependFloat64Slot(16, missionStartPointLong, 0.0)
        return this
    def add_missionCollectionArea(missionCollectionArea:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, missionCollectionArea)
        return this
    def add_missionJoa(missionJoa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, missionJoa)
        return this
    def add_missionSyncMatrixBin(missionSyncMatrixBin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, missionSyncMatrixBin)
        return this
    def add_missionCountry(missionCountry:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, missionCountry)
        return this
    def add_missionRegion(missionRegion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, missionRegion)
        return this
    def add_missionSubRegion(missionSubRegion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, missionSubRegion)
        return this
    def add_collectionRequirements(collectionRequirements:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, collectionRequirements)
        return this
    def add_transit(transit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, transit)
        return this
    def add_taskings(taskings:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, taskings)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, origin)
        return this
    def add_dataMode(dataMode:ISRCollection_Full_dataMode_Enum):
        b_.PrependInt8Slot(32, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, origNetwork)
        return this
    def end():
        return b_.EndObject()

def ISRCollection_FullStartCollectionRequirementsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollection_FullCreateCollectionRequirementsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ISRCollection_FullStartTransitVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollection_FullCreateTransitVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ISRCollection_FullStartTaskingsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ISRCollection_FullCreateTaskingsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

