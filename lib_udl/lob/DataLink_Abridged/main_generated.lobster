// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum DataLink_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    DataLink_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    DataLink_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    DataLink_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    DataLink_Abridged_dataMode_Enum_EXERCISE = 3

class DataLink_Abridged

/// /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
class DataLink_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
    /// Example: /// Example: DESERT WIND
    /// Constraints: Minimum length = 1, Maximum length = 64
    def opExName() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The identifier of the originator of this message.
    /// Example: /// Example: USCENTCOM
    /// Constraints: Minimum length = 1, Maximum length = 36
    def originator() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
    /// Example: /// Example: 2024-01-08T13:55:43.123Z
    /// Constraints: No constraints specified.
    def stopTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
    /// Example: /// Example: AFTER
    /// Constraints: Minimum length = 0, Maximum length = 8
    def stopTimeMod() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
    /// Example: /// Example: SACEUR 106
    /// Constraints: Minimum length = 0, Maximum length = 36
    def planOrigNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
    /// Example: /// Example: CONTROL
    /// Constraints: Minimum length = 0, Maximum length = 32
    def opExInfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The secondary nickname of the option or the alternative of the operational plan or order.
    /// Example: /// Example: ORANGE
    /// Constraints: Minimum length = 0, Maximum length = 24
    def opExInfoAlt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The unique message identifier assigned by the originator.
    /// Example: /// Example: 1201003
    /// Constraints: Minimum length = 0, Maximum length = 16
    def serialNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The month in which this message originated.
    /// Example: /// Example: OCT
    /// Constraints: Minimum length = 0, Maximum length = 12
    def month() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
    /// Example: /// Example: CHG
    /// Constraints: Minimum length = 0, Maximum length = 8
    def qualifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The serial number associated with the message qualifier.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def qualSN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def references(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def references_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// The identifier for this data link message cancellation.
    /// Example: /// Example: ABSTAT
    /// Constraints: Minimum length = 0, Maximum length = 20
    def canxId() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The originator of this data link message cancellation.
    /// Example: /// Example: 505 AOC
    /// Constraints: Minimum length = 0, Maximum length = 30
    def canxOriginator() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def canxTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Serial number assigned to this data link message cancellation.
    /// Example: /// Example: ABC1234567
    /// Constraints: Minimum length = 0, Maximum length = 10
    def canxSerialNum() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
    /// Example: /// Example: PASEP
    /// Constraints: Minimum length = 0, Maximum length = 5
    def canxSpecialNotation() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
    /// Example: /// Example: ['RDU', 'X234BS']
    /// Constraints: No constraints specified.
    def canxSICs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def canxSICs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// The name of the point of contact for this data link message.
    /// Example: /// Example: F. BURNS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def pocName() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// The rank or position of the point of contact for this data link message in a military or civilian organization.
    /// Example: /// Example: MAJ
    /// Constraints: Minimum length = 0, Maximum length = 16
    def pocRank() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The unit identifier or call sign of the point of contact for this data link message.
    /// Example: /// Example: 4077 MASH
    /// Constraints: Minimum length = 0, Maximum length = 38
    def pocCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The location name of the point of contact for this data link message.
    /// Example: /// Example: CAMP SWAMPY
    /// Constraints: Minimum length = 0, Maximum length = 20
    def pocLocName() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def pocLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def pocLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
    /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    /// Constraints: No constraints specified.
    def pocNums(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def pocNums_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// The code for the point of reference from which the coordinates and networks are computed.
    /// Example: /// Example: EUR-T
    /// Constraints: Minimum length = 0, Maximum length = 5
    def geoDatum() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def refPoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 62) + i * 4)
    def refPoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 62)
    /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def voiceCoord(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def voiceCoord_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
    /// Example: /// Example: MAN
    /// Constraints: Minimum length = 0, Maximum length = 4
    def sysDefaultCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
    /// Example: /// Example: 2.1
    /// Constraints: No constraints specified.
    def winSizeMult() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
    /// Example: /// Example: 1.25
    /// Constraints: No constraints specified.
    def winSizeMin() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
    /// Example: /// Example: 6
    /// Constraints: No constraints specified.
    def minTrackQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def maxTrackQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def resTrackQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
    /// Example: /// Example: 60
    /// Constraints: No constraints specified.
    def courseDiff() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    def speedDiff() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    def altDiff() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def minGeoPosQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def maxGeoPosQual() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
    /// Example: /// Example: 1.7
    /// Constraints: No constraints specified.
    def decorrWinMult() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def consecDecorr() -> int:
        return flatbuffers.field_int32(buf_, pos_, 90, 0)
    /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def multiDuty(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 92) + i * 4)
    def multiDuty_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 92)
    /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def ops(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 94) + i * 4)
    def ops_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 94)
    /// Designator of the unit for Joint Range Extension (JRE).
    /// Example: /// Example: CVN-72
    /// Constraints: Minimum length = 0, Maximum length = 30
    def jreUnitDes() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
    /// Example: /// Example: CHARLIE ONE
    /// Constraints: Minimum length = 0, Maximum length = 38
    def jreCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Link-16 octal track number assigned as the primary JTIDS unit address.
    /// Example: /// Example: 71777
    /// Constraints: No constraints specified.
    def jrePriAdd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 100, 0)
    /// Link-16 octal track number assigned as the secondary JTIDS unit address.
    /// Example: /// Example: 77771
    /// Constraints: No constraints specified.
    def jreSecAdd() -> int:
        return flatbuffers.field_int32(buf_, pos_, 102, 0)
    /// Joint Range Extension (JRE) unit details.
    /// Example: /// Example: JRE details
    /// Constraints: Minimum length = 0, Maximum length = 3000
    def jreDetails() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def specTracks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 106) + i * 4)
    def specTracks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 106)
    /// Array of non-link specific data unit designators.
    /// Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
    /// Constraints: No constraints specified.
    def nonLinkUnitDes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 108) + i * 4)
    def nonLinkUnitDes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 108)
    /// Array of Link-16 octal track numbers used as the lower limit of a track block.
    /// Example: /// Example: [1234, 2345]
    /// Constraints: No constraints specified.
    def trackNumBlockLLs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 110) + i * 4)
    def trackNumBlockLLs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 110)
    /// Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
    /// Example: /// Example: ['0200-0300', '0400-4412']
    /// Constraints: No constraints specified.
    def trackNumBlocks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 112) + i * 4)
    def trackNumBlocks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 112)
    /// Data link management code word.
    /// Example: /// Example: VICTOR
    /// Constraints: Minimum length = 0, Maximum length = 15
    def mgmtCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Data link management code word meaning.
    /// Example: /// Example: ORBIT AT POINT BRAVO
    /// Constraints: Minimum length = 0, Maximum length = 50
    def mgmtCodeMeaning() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def ackReq() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 118, 0))
    /// Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
    /// Example: /// Example: ['AOC EXT 2345', '317 AW']
    /// Constraints: No constraints specified.
    def ackInstUnits(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 120) + i * 4)
    def ackInstUnits_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 120)
    /// Markings that define the source material or the original classification authority for this data link message.
    /// Example: /// Example: USJFCOM EXORD SOLID WASTE 98
    /// Constraints: Minimum length = 0, Maximum length = 55
    def classSource() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Array of codes that indicate the reasons material is classified.
    /// Example: /// Example: ['15C', '15D']
    /// Constraints: No constraints specified.
    def classReasons(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 124) + i * 4)
    def classReasons_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 124)
    /// Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
    /// Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
    /// Constraints: No constraints specified.
    def decInstDates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 126) + i * 4)
    def decInstDates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 126)
    /// Array of codes that provide justification for exemption from automatic downgrading or declassification.
    /// Example: /// Example: ['X1', 'X2']
    /// Constraints: No constraints specified.
    def decExemptCodes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 128) + i * 4)
    def decExemptCodes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 128)
    /// Collection of remarks associated with this data link message.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def remarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 130) + i * 4)
    def remarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 130)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 132)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 134)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 136)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 142)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 146)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 148)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> DataLink_Abridged_dataMode_Enum:
        return DataLink_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 150, 0))

def GetRootAsDataLink_Abridged(buf:string): return DataLink_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct DataLink_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(74)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_opExName(opExName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, opExName)
        return this
    def add_originator(originator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, originator)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, startTime)
        return this
    def add_stopTime(stopTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, stopTime)
        return this
    def add_stopTimeMod(stopTimeMod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, stopTimeMod)
        return this
    def add_planOrigNum(planOrigNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, planOrigNum)
        return this
    def add_opExInfo(opExInfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, opExInfo)
        return this
    def add_opExInfoAlt(opExInfoAlt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, opExInfoAlt)
        return this
    def add_serialNum(serialNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, serialNum)
        return this
    def add_month(month:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, month)
        return this
    def add_qualifier(qualifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, qualifier)
        return this
    def add_qualSN(qualSN:int):
        b_.PrependInt32Slot(13, qualSN, 0)
        return this
    def add_references(references:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, references)
        return this
    def add_canxId(canxId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, canxId)
        return this
    def add_canxOriginator(canxOriginator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, canxOriginator)
        return this
    def add_canxTs(canxTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, canxTs)
        return this
    def add_canxSerialNum(canxSerialNum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, canxSerialNum)
        return this
    def add_canxSpecialNotation(canxSpecialNotation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, canxSpecialNotation)
        return this
    def add_canxSICs(canxSICs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, canxSICs)
        return this
    def add_pocName(pocName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, pocName)
        return this
    def add_pocRank(pocRank:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, pocRank)
        return this
    def add_pocCallSign(pocCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, pocCallSign)
        return this
    def add_pocLocName(pocLocName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, pocLocName)
        return this
    def add_pocLat(pocLat:float):
        b_.PrependFloat64Slot(25, pocLat, 0.0)
        return this
    def add_pocLon(pocLon:float):
        b_.PrependFloat64Slot(26, pocLon, 0.0)
        return this
    def add_pocNums(pocNums:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, pocNums)
        return this
    def add_geoDatum(geoDatum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, geoDatum)
        return this
    def add_refPoints(refPoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, refPoints)
        return this
    def add_voiceCoord(voiceCoord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, voiceCoord)
        return this
    def add_sysDefaultCode(sysDefaultCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, sysDefaultCode)
        return this
    def add_winSizeMult(winSizeMult:float):
        b_.PrependFloat64Slot(32, winSizeMult, 0.0)
        return this
    def add_winSizeMin(winSizeMin:float):
        b_.PrependFloat64Slot(33, winSizeMin, 0.0)
        return this
    def add_minTrackQual(minTrackQual:int):
        b_.PrependInt32Slot(34, minTrackQual, 0)
        return this
    def add_maxTrackQual(maxTrackQual:int):
        b_.PrependInt32Slot(35, maxTrackQual, 0)
        return this
    def add_resTrackQual(resTrackQual:int):
        b_.PrependInt32Slot(36, resTrackQual, 0)
        return this
    def add_courseDiff(courseDiff:int):
        b_.PrependInt32Slot(37, courseDiff, 0)
        return this
    def add_speedDiff(speedDiff:int):
        b_.PrependInt32Slot(38, speedDiff, 0)
        return this
    def add_altDiff(altDiff:int):
        b_.PrependInt32Slot(39, altDiff, 0)
        return this
    def add_minGeoPosQual(minGeoPosQual:int):
        b_.PrependInt32Slot(40, minGeoPosQual, 0)
        return this
    def add_maxGeoPosQual(maxGeoPosQual:int):
        b_.PrependInt32Slot(41, maxGeoPosQual, 0)
        return this
    def add_decorrWinMult(decorrWinMult:float):
        b_.PrependFloat64Slot(42, decorrWinMult, 0.0)
        return this
    def add_consecDecorr(consecDecorr:int):
        b_.PrependInt32Slot(43, consecDecorr, 0)
        return this
    def add_multiDuty(multiDuty:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, multiDuty)
        return this
    def add_ops(ops:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, ops)
        return this
    def add_jreUnitDes(jreUnitDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, jreUnitDes)
        return this
    def add_jreCallSign(jreCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, jreCallSign)
        return this
    def add_jrePriAdd(jrePriAdd:int):
        b_.PrependInt32Slot(48, jrePriAdd, 0)
        return this
    def add_jreSecAdd(jreSecAdd:int):
        b_.PrependInt32Slot(49, jreSecAdd, 0)
        return this
    def add_jreDetails(jreDetails:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, jreDetails)
        return this
    def add_specTracks(specTracks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, specTracks)
        return this
    def add_nonLinkUnitDes(nonLinkUnitDes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, nonLinkUnitDes)
        return this
    def add_trackNumBlockLLs(trackNumBlockLLs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, trackNumBlockLLs)
        return this
    def add_trackNumBlocks(trackNumBlocks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, trackNumBlocks)
        return this
    def add_mgmtCode(mgmtCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, mgmtCode)
        return this
    def add_mgmtCodeMeaning(mgmtCodeMeaning:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, mgmtCodeMeaning)
        return this
    def add_ackReq(ackReq:bool):
        b_.PrependBoolSlot(57, ackReq, 0)
        return this
    def add_ackInstUnits(ackInstUnits:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, ackInstUnits)
        return this
    def add_classSource(classSource:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, classSource)
        return this
    def add_classReasons(classReasons:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, classReasons)
        return this
    def add_decInstDates(decInstDates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, decInstDates)
        return this
    def add_decExemptCodes(decExemptCodes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, decExemptCodes)
        return this
    def add_remarks(remarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, remarks)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, rawFileURI)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(65, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(69, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(71, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(72, origNetwork)
        return this
    def add_dataMode(dataMode:DataLink_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(73, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def DataLink_AbridgedStartReferencesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateReferencesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartCanxSICsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateCanxSICsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartPocNumsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreatePocNumsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartRefPointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateRefPointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartVoiceCoordVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateVoiceCoordVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartMultiDutyVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateMultiDutyVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartOpsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateOpsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartSpecTracksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateSpecTracksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartNonLinkUnitDesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateNonLinkUnitDesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartTrackNumBlockLLsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateTrackNumBlockLLsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartTrackNumBlocksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateTrackNumBlocksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartAckInstUnitsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateAckInstUnitsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartClassReasonsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateClassReasonsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartDecInstDatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateDecInstDatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartDecExemptCodesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateDecExemptCodesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DataLink_AbridgedStartRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DataLink_AbridgedCreateRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

