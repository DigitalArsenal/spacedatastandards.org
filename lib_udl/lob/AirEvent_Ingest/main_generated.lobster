// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirEvent_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirEvent_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirEvent_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirEvent_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirEvent_Ingest_dataMode_Enum_EXERCISE = 3

class AirEvent_Ingest

/// /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
class AirEvent_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
    /// Example: /// Example: FUEL TRANSFER
    /// Constraints: Minimum length = 1, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The UDL unique identifier of the sortie associated with this air event.
    /// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The UDL unique identifier of the mission associated with this air event.
    /// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: MB014313032022407540
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalAirEventId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Identifies the Itinerary point of a sortie where an air event occurs.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    def legNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
    /// Example: /// Example: 901EW
    /// Constraints: Minimum length = 0, Maximum length = 32
    def location() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 36
    def arrPurpose() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def plannedArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:59:48.123Z
    /// Constraints: No constraints specified.
    def estArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:00:03.123Z
    /// Constraints: No constraints specified.
    def actualArrTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
    /// Example: /// Example: Q
    /// Constraints: Minimum length = 0, Maximum length = 36
    def depPurpose() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:15:43.123Z
    /// Constraints: No constraints specified.
    def plannedDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:19:48.123Z
    /// Constraints: No constraints specified.
    def estDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-07T14:17:03.123Z
    /// Constraints: No constraints specified.
    def actualDepTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalARTrackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Identifier of the air refueling track, if applicable.
    /// Example: /// Example: CH61
    /// Constraints: Minimum length = 0, Maximum length = 15
    def arTrackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Name of the air refueling track, if applicable.
    /// Example: /// Example: CH61 POST
    /// Constraints: Minimum length = 0, Maximum length = 50
    def arTrackName() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2024-01-07T13:55:43.123Z
    /// Constraints: No constraints specified.
    def rzct() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
    /// Example: /// Example: 2024-01-07T15:11:27.123Z
    /// Constraints: No constraints specified.
    def arct() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Altitude of this air event, in feet.
    /// Example: /// Example: 28000.1
    /// Constraints: No constraints specified.
    def baseAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Priority of this air event.
    /// Example: /// Example: 1A2
    /// Constraints: Minimum length = 0, Maximum length = 3
    def priority() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Length of time the receiver unit has requested for an air event, in hours.
    /// Example: /// Example: 1.5
    /// Constraints: No constraints specified.
    def trackTime() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
    /// Example: /// Example: R
    /// Constraints: Minimum length = 0, Maximum length = 2
    def statusCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
    /// Example: /// Example: AN
    /// Constraints: Minimum length = 0, Maximum length = 20
    def rzPoint() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
    /// Example: /// Example: PP
    /// Constraints: Minimum length = 0, Maximum length = 3
    def rzType() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
    /// Example: /// Example: V
    /// Constraints: Minimum length = 0, Maximum length = 2
    def arEventType() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// The number of tankers requested for an air refueling event.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numTankers() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def revTrack() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 62, 0))
    /// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def shortTrack() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 64, 0))
    /// Flag indicating that this air refueling event has been cancelled.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def cancelled() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 66, 0))
    /// Collection of tanker aircraft associated with this Air Event.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def tankers(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 68) + i * 4)
    def tankers_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 68)
    /// Collection of receiver aircraft associated with this Air Event.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def receivers(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def receivers_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Collection of remarks associated with this Air Event.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def remarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 72) + i * 4)
    def remarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 72)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirEvent_Ingest_dataMode_Enum:
        return AirEvent_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 90, 0))

def GetRootAsAirEvent_Ingest(buf:string): return AirEvent_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct AirEvent_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(44)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, type)
        return this
    def add_idSortie(idSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSortie)
        return this
    def add_idMission(idMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idMission)
        return this
    def add_externalAirEventId(externalAirEventId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, externalAirEventId)
        return this
    def add_legNum(legNum:int):
        b_.PrependInt32Slot(6, legNum, 0)
        return this
    def add_location(location:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, location)
        return this
    def add_arrPurpose(arrPurpose:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, arrPurpose)
        return this
    def add_plannedArrTime(plannedArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, plannedArrTime)
        return this
    def add_estArrTime(estArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, estArrTime)
        return this
    def add_actualArrTime(actualArrTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, actualArrTime)
        return this
    def add_depPurpose(depPurpose:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, depPurpose)
        return this
    def add_plannedDepTime(plannedDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, plannedDepTime)
        return this
    def add_estDepTime(estDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, estDepTime)
        return this
    def add_actualDepTime(actualDepTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, actualDepTime)
        return this
    def add_externalARTrackId(externalARTrackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, externalARTrackId)
        return this
    def add_arTrackId(arTrackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, arTrackId)
        return this
    def add_arTrackName(arTrackName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, arTrackName)
        return this
    def add_rzct(rzct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, rzct)
        return this
    def add_arct(arct:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, arct)
        return this
    def add_baseAlt(baseAlt:float):
        b_.PrependFloat64Slot(21, baseAlt, 0.0)
        return this
    def add_priority(priority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, priority)
        return this
    def add_trackTime(trackTime:float):
        b_.PrependFloat64Slot(23, trackTime, 0.0)
        return this
    def add_statusCode(statusCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, statusCode)
        return this
    def add_rzPoint(rzPoint:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, rzPoint)
        return this
    def add_rzType(rzType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, rzType)
        return this
    def add_arEventType(arEventType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, arEventType)
        return this
    def add_numTankers(numTankers:int):
        b_.PrependInt32Slot(28, numTankers, 0)
        return this
    def add_revTrack(revTrack:bool):
        b_.PrependBoolSlot(29, revTrack, 0)
        return this
    def add_shortTrack(shortTrack:bool):
        b_.PrependBoolSlot(30, shortTrack, 0)
        return this
    def add_cancelled(cancelled:bool):
        b_.PrependBoolSlot(31, cancelled, 0)
        return this
    def add_tankers(tankers:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, tankers)
        return this
    def add_receivers(receivers:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, receivers)
        return this
    def add_remarks(remarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, remarks)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, origNetwork)
        return this
    def add_dataMode(dataMode:AirEvent_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(43, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def AirEvent_IngestStartTankersVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirEvent_IngestCreateTankersVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirEvent_IngestStartReceiversVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirEvent_IngestCreateReceiversVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirEvent_IngestStartRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirEvent_IngestCreateRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

