// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class RadarSOIObservation_Ingest

/// /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
class RadarSOIObservation_Ingest : flatbuffers.handle
    /// Observation detection start time in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.888456Z
    /// Constraints: No constraints specified.
    def obStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Array of the times of validity in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
    /// Constraints: No constraints specified.
    def tovs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 6) + i * 4)
    def tovs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 6)
    /// Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
    /// Example: /// Example: [0.006, 0.006, 0.006]
    /// Constraints: No constraints specified.
    def rspaces(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 8) + i * 4)
    def rspaces_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 8)
    /// Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
    /// Example: /// Example: [0.006, 0.006, 0.006]
    /// Constraints: No constraints specified.
    def xspaces(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def xspaces_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)
    /// Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
    /// Example: /// Example: [5644.27, 5644.27, 5644.27]
    /// Constraints: No constraints specified.
    def doppler2XRs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 12) + i * 4)
    def doppler2XRs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 12)
    /// Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
    /// Example: /// Example: [0.005, 0.005, 0.005]
    /// Constraints: No constraints specified.
    def deltaTimes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def deltaTimes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
    /// Example: /// Example: [4.278, 4.278, 4.278]
    /// Constraints: No constraints specified.
    def aspectAngles(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 16) + i * 4)
    def aspectAngles_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 16)
    /// Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
    /// Example: /// Example: [0.166, 0.166, 0.166]
    /// Constraints: No constraints specified.
    def projAngVels(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 18) + i * 4)
    def projAngVels_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 18)
    /// Optional id of assumed StateVector of object being observed.
    /// Example: /// Example: 99a0de63-b38f-4d81-b057
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Optional id of assumed AttitudeSet of object being observed.
    /// Example: /// Example: 99a0de63-b38f-4d81-b057
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idAttitudeSet() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
    /// Example: /// Example: [877.938, 877.938, 877.938]
    /// Constraints: No constraints specified.
    def ranges(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def ranges_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)
    /// Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
    /// Example: /// Example: [278.27, 278.27, 278.27]
    /// Constraints: No constraints specified.
    def azimuths(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 26) + i * 4)
    def azimuths_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 26)
    /// Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
    /// Example: /// Example: [70.85, 70.85, 70.85]
    /// Constraints: No constraints specified.
    def elevations(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def elevations_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
    /// Example: /// Example: [0.317, 0.317, 0.317]
    /// Constraints: No constraints specified.
    def rangeRates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def rangeRates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
    /// Example: /// Example: [-1.481, -1.481, -1.481]
    /// Constraints: No constraints specified.
    def azimuthRates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def azimuthRates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
    /// Example: /// Example: [-0.074, -0.074, -0.074]
    /// Constraints: No constraints specified.
    def elevationRates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def elevationRates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
    /// Example: /// Example: [45.23, 45.23, 45.23]
    /// Constraints: No constraints specified.
    def azimuthBiases(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 36) + i * 4)
    def azimuthBiases_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 36)
    /// Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
    /// Example: /// Example: [1.23, 1.23, 1.23]
    /// Constraints: No constraints specified.
    def elevationBiases(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def elevationBiases_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)
    /// Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
    /// Example: /// Example: [1.23, 1.23, 1.23]
    /// Constraints: No constraints specified.
    def rangeBiases(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 40) + i * 4)
    def rangeBiases_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 40)
    /// Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
    /// Example: /// Example: [8.594, 8.594, 8.594]
    /// Constraints: No constraints specified.
    def integrationAngles(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 42) + i * 4)
    def integrationAngles_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 42)
    /// Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
    /// Example: /// Example: [11.301, 11.301, 11.301]
    /// Constraints: No constraints specified.
    def crossRangeRes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 44) + i * 4)
    def crossRangeRes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 44)
    /// Beta angle (between target and radar-image frame z axis) in degrees.
    /// Example: /// Example: -89.97
    /// Constraints: No constraints specified.
    def beta() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
    /// Example: /// Example: 103.04
    /// Constraints: No constraints specified.
    def kappa() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
    /// Example: /// Example: [33.1, 33.1, 33.1]
    /// Constraints: No constraints specified.
    def peakAmplitudes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 50) + i * 4)
    def peakAmplitudes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 50)
    /// Radar center frequency of the radar in hertz.
    /// Example: /// Example: 160047.0625
    /// Constraints: No constraints specified.
    def centerFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Bandwidth of radar pulse in hertz.
    /// Example: /// Example: 24094.12
    /// Constraints: No constraints specified.
    def pulseBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
    /// Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
    /// Constraints: No constraints specified.
    def xpos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 56) + i * 4)
    def xpos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 56)
    /// Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
    /// Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
    /// Constraints: No constraints specified.
    def ypos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 58) + i * 4)
    def ypos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 58)
    /// Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
    /// Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
    /// Constraints: No constraints specified.
    def zpos(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 60) + i * 4)
    def zpos_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 60)
    /// Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
    /// Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
    /// Constraints: No constraints specified.
    def xvel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 62) + i * 4)
    def xvel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 62)
    /// Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
    /// Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
    /// Constraints: No constraints specified.
    def yvel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 64) + i * 4)
    def yvel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 64)
    /// Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
    /// Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
    /// Constraints: No constraints specified.
    def zvel(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 66) + i * 4)
    def zvel_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 66)

def GetRootAsRadarSOIObservation_Ingest(buf:string): return RadarSOIObservation_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct RadarSOIObservation_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(32)
        return this
    def add_obStartTime(obStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, obStartTime)
        return this
    def add_tovs(tovs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, tovs)
        return this
    def add_rspaces(rspaces:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, rspaces)
        return this
    def add_xspaces(xspaces:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, xspaces)
        return this
    def add_doppler2XRs(doppler2XRs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, doppler2XRs)
        return this
    def add_deltaTimes(deltaTimes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, deltaTimes)
        return this
    def add_aspectAngles(aspectAngles:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, aspectAngles)
        return this
    def add_projAngVels(projAngVels:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, projAngVels)
        return this
    def add_idStateVector(idStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, idStateVector)
        return this
    def add_idAttitudeSet(idAttitudeSet:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, idAttitudeSet)
        return this
    def add_ranges(ranges:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, ranges)
        return this
    def add_azimuths(azimuths:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, azimuths)
        return this
    def add_elevations(elevations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, elevations)
        return this
    def add_rangeRates(rangeRates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, rangeRates)
        return this
    def add_azimuthRates(azimuthRates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, azimuthRates)
        return this
    def add_elevationRates(elevationRates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, elevationRates)
        return this
    def add_azimuthBiases(azimuthBiases:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, azimuthBiases)
        return this
    def add_elevationBiases(elevationBiases:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, elevationBiases)
        return this
    def add_rangeBiases(rangeBiases:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, rangeBiases)
        return this
    def add_integrationAngles(integrationAngles:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, integrationAngles)
        return this
    def add_crossRangeRes(crossRangeRes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, crossRangeRes)
        return this
    def add_beta(beta:float):
        b_.PrependFloat64Slot(21, beta, 0.0)
        return this
    def add_kappa(kappa:float):
        b_.PrependFloat64Slot(22, kappa, 0.0)
        return this
    def add_peakAmplitudes(peakAmplitudes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, peakAmplitudes)
        return this
    def add_centerFrequency(centerFrequency:float):
        b_.PrependFloat64Slot(24, centerFrequency, 0.0)
        return this
    def add_pulseBandwidth(pulseBandwidth:float):
        b_.PrependFloat64Slot(25, pulseBandwidth, 0.0)
        return this
    def add_xpos(xpos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, xpos)
        return this
    def add_ypos(ypos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, ypos)
        return this
    def add_zpos(zpos:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, zpos)
        return this
    def add_xvel(xvel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, xvel)
        return this
    def add_yvel(yvel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, yvel)
        return this
    def add_zvel(zvel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, zvel)
        return this
    def end():
        return b_.EndObject()

def RadarSOIObservation_IngestStartTovsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateTovsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartRspacesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateRspacesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartXspacesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateXspacesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartDoppler2XRsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateDoppler2XRsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartDeltaTimesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateDeltaTimesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartAspectAnglesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateAspectAnglesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartProjAngVelsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateProjAngVelsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartRangesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateRangesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartAzimuthsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateAzimuthsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartElevationsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateElevationsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartRangeRatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateRangeRatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartAzimuthRatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateAzimuthRatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartElevationRatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateElevationRatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartAzimuthBiasesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateAzimuthBiasesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartElevationBiasesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateElevationBiasesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartRangeBiasesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateRangeBiasesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartIntegrationAnglesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateIntegrationAnglesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartCrossRangeResVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateCrossRangeResVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartPeakAmplitudesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreatePeakAmplitudesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartXposVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateXposVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartYposVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateYposVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartZposVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateZposVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartXvelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateXvelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartYvelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateYvelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RadarSOIObservation_IngestStartZvelVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RadarSOIObservation_IngestCreateZvelVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

