// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EffectRequest_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EffectRequest_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EffectRequest_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EffectRequest_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EffectRequest_Abridged_dataMode_Enum_EXERCISE = 3

class EffectRequest_Abridged

/// /// A request for various effects on a target.
class EffectRequest_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EFFECTREQUEST-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The extenal system identifier of this request. A human readable unique id.
    /// Example: /// Example: EXTERNALREQUEST-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalRequestId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
    /// Example: /// Example: ['COVER', 'DECEIVE']
    /// Constraints: No constraints specified.
    def effectList(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def effectList_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)
    /// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
    /// Example: /// Example: CREATED
    /// Constraints: Minimum length = 0, Maximum length = 24
    def state() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Specific descriptive instantiation of the effect, e.g., playbook to be used.
    /// Example: /// Example: Example Notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def context() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The time the effect should start, in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The time the effect should end, in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
    /// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
    /// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
    /// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
    /// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
    /// Example: /// Example: NoLaterThan
    /// Constraints: Minimum length = 0, Maximum length = 24
    def deadlineType() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The source type of the targetId identifier (POI, TRACK).
    /// Example: /// Example: POI
    /// Constraints: Minimum length = 0, Maximum length = 24
    def targetSrcType() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    /// Example: /// Example: TARGETSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def targetSrcId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The priority (LOW, MEDIUM, HIGH) of this request.
    /// Example: /// Example: LOW
    /// Constraints: Minimum length = 0, Maximum length = 24
    def priority() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The type or class of the preference model used to evaluate this offer.
    /// Example: /// Example: Preference model
    /// Constraints: Minimum length = 0, Maximum length = 256
    def modelClass() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
    /// Example: /// Example: ['COST', 'RISK']
    /// Constraints: No constraints specified.
    def metricTypes(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def metricTypes_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
    /// Example: /// Example: [0.5, 0.6]
    /// Constraints: No constraints specified.
    def metricWeights(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def metricWeights_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EffectRequest_Abridged_dataMode_Enum:
        return EffectRequest_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 42, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)

def GetRootAsEffectRequest_Abridged(buf:string): return EffectRequest_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct EffectRequest_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_externalRequestId(externalRequestId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, externalRequestId)
        return this
    def add_effectList(effectList:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, effectList)
        return this
    def add_state(state:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, state)
        return this
    def add_context(context:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, context)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, endTime)
        return this
    def add_deadlineType(deadlineType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, deadlineType)
        return this
    def add_targetSrcType(targetSrcType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, targetSrcType)
        return this
    def add_targetSrcId(targetSrcId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, targetSrcId)
        return this
    def add_priority(priority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, priority)
        return this
    def add_modelClass(modelClass:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, modelClass)
        return this
    def add_metricTypes(metricTypes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, metricTypes)
        return this
    def add_metricWeights(metricWeights:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, metricWeights)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, origin)
        return this
    def add_dataMode(dataMode:EffectRequest_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(19, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origNetwork)
        return this
    def end():
        return b_.EndObject()

def EffectRequest_AbridgedStartEffectListVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectRequest_AbridgedCreateEffectListVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EffectRequest_AbridgedStartMetricTypesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectRequest_AbridgedCreateMetricTypesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def EffectRequest_AbridgedStartMetricWeightsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectRequest_AbridgedCreateMetricWeightsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

