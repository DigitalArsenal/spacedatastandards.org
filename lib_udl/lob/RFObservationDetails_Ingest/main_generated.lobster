// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum RFObservationDetails_Ingest_polarityType_Enum:
    /// No description available.
    RFObservationDetails_Ingest_polarityType_Enum_H = 0
    /// No description available.
    RFObservationDetails_Ingest_polarityType_Enum_V = 1
    /// No description available.
    RFObservationDetails_Ingest_polarityType_Enum_R = 2
    /// No description available.
    RFObservationDetails_Ingest_polarityType_Enum_L = 3

enum RFObservationDetails_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    RFObservationDetails_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    RFObservationDetails_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    RFObservationDetails_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    RFObservationDetails_Ingest_dataMode_Enum_EXERCISE = 3

class RFObservationDetails_Ingest

/// /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
class RFObservationDetails_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: RFOBSERVATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
    /// Example: /// Example: RF
    /// Constraints: Minimum length = 1, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 32258
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def taskId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Optional identifier of the track to which this observation belongs.
    /// Example: /// Example: TRACK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def trackId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIG-OBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIG-SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// Optional identifier provided by observation source to indicate the transponder used for this measurement.
    /// Example: /// Example: TRANSPONDER-A
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transponder() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// azimuth angle in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def azimuth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// One sigma uncertainty in the azimuth angle measurement, in degrees.
    /// Example: /// Example: 2.1
    /// Constraints: No constraints specified.
    def azimuthUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Rate of change of the azimuth in degrees per second.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def azimuthRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// elevation in degrees and J2000 coordinate frame.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def elevation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// One sigma uncertainty in the elevation angle measurement, in degrees.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def elevationUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Rate of change of the elevation in degrees per second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def elevationRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Target range in km.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def range() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// One sigma uncertainty in the range measurement, in kilometers.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def rangeUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Rate of change of the range in km/sec.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def rangeRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// One sigma uncertainty in the range rate measurement, in kilometers/second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def rangeRateUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Target track or apparent range in km.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def trackRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.2
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 80.3
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// ELINT notation.
    /// Example: /// Example: Ex. ELINT
    /// Constraints: Minimum length = 0, Maximum length = 10
    def elnot() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Center carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def frequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Nominal or expected center carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def nominalFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Start carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def startFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 66, 0.0)
    /// End carrier frequency in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def endFrequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 68, 0.0)
    /// Measured power of the center carrier frequency in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def relativeCarrierPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 70, 0.0)
    /// Measured spectrum analyzer power of the center carrier frequency in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def spectrumAnalyzerPower() -> float:
        return flatbuffers.field_float64(buf_, pos_, 72, 0.0)
    /// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def relativeNoiseFloor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 74, 0.0)
    /// Reference signal level, in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def referenceLevel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 76, 0.0)
    /// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def pgri() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// Confidence in the signal and its measurements and characterization.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def confidence() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// True if the signal is incoming, false if outgoing.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def incoming() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 82, 0))
    /// Switch Point of the RFObservation record.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def switchPoint() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def baudRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 86, 0.0)
    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def snr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// Nominal or expected signal to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def nominalSnr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// The antenna pointing dependent polarizer angle, in degrees.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def polarity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 92, 0.0)
    /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    /// Example: /// Example: H
    /// Constraints: Minimum length = 0, Maximum length = 16
    def polarityType() -> RFObservationDetails_Ingest_polarityType_Enum:
        return RFObservationDetails_Ingest_polarityType_Enum(flatbuffers.field_int8(buf_, pos_, 94, 0))
    /// Channel of the RFObservation record.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def channel() -> int:
        return flatbuffers.field_int32(buf_, pos_, 96, 0)
    /// Measured carrier power over noise (dBW/Hz).
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def powerOverNoise() -> float:
        return flatbuffers.field_float64(buf_, pos_, 98, 0.0)
    /// Expected carrier power over noise (dBW/Hz).
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def nominalPowerOverNoise() -> float:
        return flatbuffers.field_float64(buf_, pos_, 100, 0.0)
    /// Measured bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def bandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 102, 0.0)
    /// Expected bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def nominalBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 104, 0.0)
    /// Resolution bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def resolutionBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 106, 0.0)
    /// Video bandwidth in Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def videoBandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 108, 0.0)
    /// Measured Equivalent Isotopically Radiated Power in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def eirp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 110, 0.0)
    /// Expected Equivalent Isotopically Radiated Power in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def nominalEirp() -> float:
        return flatbuffers.field_float64(buf_, pos_, 112, 0.0)
    /// Minimum measured PSD value of the trace in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def minPSD() -> float:
        return flatbuffers.field_float64(buf_, pos_, 114, 0.0)
    /// Maximum measured PSD value of the trace in dBW.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def maxPSD() -> float:
        return flatbuffers.field_float64(buf_, pos_, 116, 0.0)
    /// Frequency Shift of the RFObservation record.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def frequencyShift() -> float:
        return flatbuffers.field_float64(buf_, pos_, 118, 0.0)
    /// Peak of the RFObservation record.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def peak() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 120, 0))
    /// Antenna name of the RFObservation record.
    /// Example: /// Example: Antenna1
    /// Constraints: Minimum length = 0, Maximum length = 64
    def antennaName() -> string:
        return flatbuffers.field_string(buf_, pos_, 122)
    /// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
    /// Example: /// Example: DETECTED
    /// Constraints: Minimum length = 0, Maximum length = 32
    def detectionStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 124)
    /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    /// Example: /// Example: SURVEY
    /// Constraints: Minimum length = 0, Maximum length = 32
    def collectionMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 126)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: Example URI
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 128)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 130)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 132)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> RFObservationDetails_Ingest_dataMode_Enum:
        return RFObservationDetails_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 134, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 136) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 136)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 138)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 140)
    /// Noise power density, in dBW-Hz.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def noisePwrDensity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 142, 0.0)
    /// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
    /// Example: /// Example: DVB-S2
    /// Constraints: Minimum length = 0, Maximum length = 10
    def carrierStandard() -> string:
        return flatbuffers.field_string(buf_, pos_, 144)
    /// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
    /// Example: /// Example: Auto
    /// Constraints: Minimum length = 0, Maximum length = 10
    def modulation() -> string:
        return flatbuffers.field_string(buf_, pos_, 146)
    /// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def innerCodingRate() -> int:
        return flatbuffers.field_int32(buf_, pos_, 148, 0)
    /// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    /// Example: /// Example: 4
    /// Constraints: No constraints specified.
    def outerCodingRate() -> int:
        return flatbuffers.field_int32(buf_, pos_, 150, 0)
    /// Transmit pulse shaping filter typ (e.g. RRC).
    /// Example: /// Example: RRC
    /// Constraints: Minimum length = 0, Maximum length = 10
    def transmitFilterType() -> string:
        return flatbuffers.field_string(buf_, pos_, 152)
    /// Transmit pulse shaping filter roll-off value.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def transmitFilterRollOff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 154, 0.0)
    /// Symbol to noise ratio, in dB.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def symbolToNoiseRatio() -> float:
        return flatbuffers.field_float64(buf_, pos_, 156, 0.0)
    /// The ratio of bit errors per number of received bits.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def bitErrorRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 158, 0.0)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 160)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 162)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 164)
    /// Optional URL containing additional information on this observation.
    /// Example: /// Example: https://some-url
    /// Constraints: Minimum length = 0, Maximum length = 2048
    def url() -> string:
        return flatbuffers.field_string(buf_, pos_, 166)
    /// Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def frequencies(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 168) + i * 4)
    def frequencies_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 168)
    /// Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def powers(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 170) + i * 4)
    def powers_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 170)
    /// Array of signal to noise ratios of the signals, in dB.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def snrs(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 172) + i * 4)
    def snrs_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 172)
    /// Array of measurement confidences.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def confidences(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 174) + i * 4)
    def confidences_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 174)
    /// Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
    /// Example: /// Example: ['DETECTED']
    /// Constraints: No constraints specified.
    def detectionStatuses(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 176) + i * 4)
    def detectionStatuses_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 176)
    /// Array of chipRates.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def chipRates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 178) + i * 4)
    def chipRates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 178)
    /// Array of code taps.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def codeTaps(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 180) + i * 4)
    def codeTaps_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 180)
    /// Array of code fills.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def codeFills(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 182) + i * 4)
    def codeFills_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 182)
    /// Array of code lengths.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def codeLengths(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 184) + i * 4)
    def codeLengths_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 184)
    /// Array of pnOrder.
    /// Example: /// Example: [1, 2]
    /// Constraints: No constraints specified.
    def pnOrders(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 186) + i * 4)
    def pnOrders_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 186)
    /// Array of optional source provided identifiers of the measurements/signals.
    /// Example: /// Example: ['ID1', 'ID2']
    /// Constraints: No constraints specified.
    def signalIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 188) + i * 4)
    def signalIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 188)
    /// Array of measured signal baud rates.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def baudRates(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 190) + i * 4)
    def baudRates_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 190)
    /// Array of optional source provided telemetry identifiers of the measurements/signals.
    /// Example: /// Example: ['ID1', 'ID2']
    /// Constraints: No constraints specified.
    def telemetryIds(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 192) + i * 4)
    def telemetryIds_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 192)
    /// Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def constellationXPoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 194) + i * 4)
    def constellationXPoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 194)
    /// Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
    /// Example: /// Example: [1.1, 2.2]
    /// Constraints: No constraints specified.
    def constellationYPoints(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 196) + i * 4)
    def constellationYPoints_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 196)

def GetRootAsRFObservationDetails_Ingest(buf:string): return RFObservationDetails_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct RFObservationDetails_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(97)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, obTime)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idSensor)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, type)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(6, satNo, 0)
        return this
    def add_taskId(taskId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, taskId)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, transactionId)
        return this
    def add_trackId(trackId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, trackId)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, origObjectId)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, origSensorId)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(12, uct, 0)
        return this
    def add_transponder(transponder:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, transponder)
        return this
    def add_azimuth(azimuth:float):
        b_.PrependFloat64Slot(14, azimuth, 0.0)
        return this
    def add_azimuthUnc(azimuthUnc:float):
        b_.PrependFloat64Slot(15, azimuthUnc, 0.0)
        return this
    def add_azimuthRate(azimuthRate:float):
        b_.PrependFloat64Slot(16, azimuthRate, 0.0)
        return this
    def add_elevation(elevation:float):
        b_.PrependFloat64Slot(17, elevation, 0.0)
        return this
    def add_elevationUnc(elevationUnc:float):
        b_.PrependFloat64Slot(18, elevationUnc, 0.0)
        return this
    def add_elevationRate(elevationRate:float):
        b_.PrependFloat64Slot(19, elevationRate, 0.0)
        return this
    def add_range(range:float):
        b_.PrependFloat64Slot(20, range, 0.0)
        return this
    def add_rangeUnc(rangeUnc:float):
        b_.PrependFloat64Slot(21, rangeUnc, 0.0)
        return this
    def add_rangeRate(rangeRate:float):
        b_.PrependFloat64Slot(22, rangeRate, 0.0)
        return this
    def add_rangeRateUnc(rangeRateUnc:float):
        b_.PrependFloat64Slot(23, rangeRateUnc, 0.0)
        return this
    def add_trackRange(trackRange:float):
        b_.PrependFloat64Slot(24, trackRange, 0.0)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(25, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(26, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(27, senalt, 0.0)
        return this
    def add_elnot(elnot:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, elnot)
        return this
    def add_frequency(frequency:float):
        b_.PrependFloat64Slot(29, frequency, 0.0)
        return this
    def add_nominalFrequency(nominalFrequency:float):
        b_.PrependFloat64Slot(30, nominalFrequency, 0.0)
        return this
    def add_startFrequency(startFrequency:float):
        b_.PrependFloat64Slot(31, startFrequency, 0.0)
        return this
    def add_endFrequency(endFrequency:float):
        b_.PrependFloat64Slot(32, endFrequency, 0.0)
        return this
    def add_relativeCarrierPower(relativeCarrierPower:float):
        b_.PrependFloat64Slot(33, relativeCarrierPower, 0.0)
        return this
    def add_spectrumAnalyzerPower(spectrumAnalyzerPower:float):
        b_.PrependFloat64Slot(34, spectrumAnalyzerPower, 0.0)
        return this
    def add_relativeNoiseFloor(relativeNoiseFloor:float):
        b_.PrependFloat64Slot(35, relativeNoiseFloor, 0.0)
        return this
    def add_referenceLevel(referenceLevel:float):
        b_.PrependFloat64Slot(36, referenceLevel, 0.0)
        return this
    def add_pgri(pgri:float):
        b_.PrependFloat64Slot(37, pgri, 0.0)
        return this
    def add_confidence(confidence:float):
        b_.PrependFloat64Slot(38, confidence, 0.0)
        return this
    def add_incoming(incoming:bool):
        b_.PrependBoolSlot(39, incoming, 0)
        return this
    def add_switchPoint(switchPoint:int):
        b_.PrependInt32Slot(40, switchPoint, 0)
        return this
    def add_baudRate(baudRate:float):
        b_.PrependFloat64Slot(41, baudRate, 0.0)
        return this
    def add_snr(snr:float):
        b_.PrependFloat64Slot(42, snr, 0.0)
        return this
    def add_nominalSnr(nominalSnr:float):
        b_.PrependFloat64Slot(43, nominalSnr, 0.0)
        return this
    def add_polarity(polarity:float):
        b_.PrependFloat64Slot(44, polarity, 0.0)
        return this
    def add_polarityType(polarityType:RFObservationDetails_Ingest_polarityType_Enum):
        b_.PrependInt8Slot(45, polarityType, 0)
        return this
    def add_channel(channel:int):
        b_.PrependInt32Slot(46, channel, 0)
        return this
    def add_powerOverNoise(powerOverNoise:float):
        b_.PrependFloat64Slot(47, powerOverNoise, 0.0)
        return this
    def add_nominalPowerOverNoise(nominalPowerOverNoise:float):
        b_.PrependFloat64Slot(48, nominalPowerOverNoise, 0.0)
        return this
    def add_bandwidth(bandwidth:float):
        b_.PrependFloat64Slot(49, bandwidth, 0.0)
        return this
    def add_nominalBandwidth(nominalBandwidth:float):
        b_.PrependFloat64Slot(50, nominalBandwidth, 0.0)
        return this
    def add_resolutionBandwidth(resolutionBandwidth:float):
        b_.PrependFloat64Slot(51, resolutionBandwidth, 0.0)
        return this
    def add_videoBandwidth(videoBandwidth:float):
        b_.PrependFloat64Slot(52, videoBandwidth, 0.0)
        return this
    def add_eirp(eirp:float):
        b_.PrependFloat64Slot(53, eirp, 0.0)
        return this
    def add_nominalEirp(nominalEirp:float):
        b_.PrependFloat64Slot(54, nominalEirp, 0.0)
        return this
    def add_minPSD(minPSD:float):
        b_.PrependFloat64Slot(55, minPSD, 0.0)
        return this
    def add_maxPSD(maxPSD:float):
        b_.PrependFloat64Slot(56, maxPSD, 0.0)
        return this
    def add_frequencyShift(frequencyShift:float):
        b_.PrependFloat64Slot(57, frequencyShift, 0.0)
        return this
    def add_peak(peak:bool):
        b_.PrependBoolSlot(58, peak, 0)
        return this
    def add_antennaName(antennaName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(59, antennaName)
        return this
    def add_detectionStatus(detectionStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(60, detectionStatus)
        return this
    def add_collectionMode(collectionMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(61, collectionMode)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(62, rawFileURI)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(63, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(64, origin)
        return this
    def add_dataMode(dataMode:RFObservationDetails_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(65, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(66, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(67, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(68, createdBy)
        return this
    def add_noisePwrDensity(noisePwrDensity:float):
        b_.PrependFloat64Slot(69, noisePwrDensity, 0.0)
        return this
    def add_carrierStandard(carrierStandard:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(70, carrierStandard)
        return this
    def add_modulation(modulation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(71, modulation)
        return this
    def add_innerCodingRate(innerCodingRate:int):
        b_.PrependInt32Slot(72, innerCodingRate, 0)
        return this
    def add_outerCodingRate(outerCodingRate:int):
        b_.PrependInt32Slot(73, outerCodingRate, 0)
        return this
    def add_transmitFilterType(transmitFilterType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(74, transmitFilterType)
        return this
    def add_transmitFilterRollOff(transmitFilterRollOff:float):
        b_.PrependFloat64Slot(75, transmitFilterRollOff, 0.0)
        return this
    def add_symbolToNoiseRatio(symbolToNoiseRatio:float):
        b_.PrependFloat64Slot(76, symbolToNoiseRatio, 0.0)
        return this
    def add_bitErrorRate(bitErrorRate:float):
        b_.PrependFloat64Slot(77, bitErrorRate, 0.0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(78, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(79, sourceDL)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(80, descriptor)
        return this
    def add_url(url:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(81, url)
        return this
    def add_frequencies(frequencies:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(82, frequencies)
        return this
    def add_powers(powers:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(83, powers)
        return this
    def add_snrs(snrs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(84, snrs)
        return this
    def add_confidences(confidences:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(85, confidences)
        return this
    def add_detectionStatuses(detectionStatuses:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(86, detectionStatuses)
        return this
    def add_chipRates(chipRates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(87, chipRates)
        return this
    def add_codeTaps(codeTaps:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(88, codeTaps)
        return this
    def add_codeFills(codeFills:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(89, codeFills)
        return this
    def add_codeLengths(codeLengths:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(90, codeLengths)
        return this
    def add_pnOrders(pnOrders:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(91, pnOrders)
        return this
    def add_signalIds(signalIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(92, signalIds)
        return this
    def add_baudRates(baudRates:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(93, baudRates)
        return this
    def add_telemetryIds(telemetryIds:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(94, telemetryIds)
        return this
    def add_constellationXPoints(constellationXPoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(95, constellationXPoints)
        return this
    def add_constellationYPoints(constellationYPoints:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(96, constellationYPoints)
        return this
    def end():
        return b_.EndObject()

def RFObservationDetails_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartFrequenciesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateFrequenciesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartPowersVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreatePowersVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartSnrsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateSnrsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartConfidencesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateConfidencesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartDetectionStatusesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateDetectionStatusesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartChipRatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateChipRatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartCodeTapsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateCodeTapsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartCodeFillsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateCodeFillsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartCodeLengthsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateCodeLengthsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartPnOrdersVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreatePnOrdersVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartSignalIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateSignalIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartBaudRatesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateBaudRatesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartTelemetryIdsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateTelemetryIdsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartConstellationXPointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateConstellationXPointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def RFObservationDetails_IngestStartConstellationYPointsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFObservationDetails_IngestCreateConstellationYPointsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

