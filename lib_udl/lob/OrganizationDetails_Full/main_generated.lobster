// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OrganizationDetails_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    OrganizationDetails_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    OrganizationDetails_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    OrganizationDetails_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    OrganizationDetails_Full_dataMode_Enum_EXERCISE = 3

class OrganizationDetails_Full

/// /// Model representation of additional detailed organization data as collected by a particular source.
class OrganizationDetails_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ORGANIZATIONDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent organization.
    /// Example: /// Example: ORGANIZATION-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOrganization() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Organization details name.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Listed contact email address for the organization.
    /// Example: /// Example: some_organization@organization.com
    /// Constraints: Minimum length = 0, Maximum length = 320
    def email() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Street number of the organization.
    /// Example: /// Example: 123 Main Street
    /// Constraints: Minimum length = 0, Maximum length = 120
    def address1() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Field for additional organization address information such as PO Box and unit number.
    /// Example: /// Example: Apt 4B
    /// Constraints: Minimum length = 0, Maximum length = 120
    def address2() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Contains the third line of address information for an organization.
    /// Example: /// Example: Colorado Springs CO, 80903
    /// Constraints: Minimum length = 0, Maximum length = 120
    def address3() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
    /// Example: /// Example: Colorado
    /// Constraints: Minimum length = 0, Maximum length = 120
    def geoAdminLevel1() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
    /// Example: /// Example: El Paso County
    /// Constraints: Minimum length = 0, Maximum length = 120
    def geoAdminLevel2() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
    /// Example: /// Example: Colorado Springs
    /// Constraints: Minimum length = 0, Maximum length = 120
    def geoAdminLevel3() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
    /// Example: /// Example: 80903
    /// Constraints: Minimum length = 0, Maximum length = 32
    def postalCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Organization description.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Former organization ID (if this organization previously existed as another organization).
    /// Example: /// Example: FORMERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def formerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Parent organization ID of this organization if it is a child organization.
    /// Example: /// Example: PARENTORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def parentOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def financialYearEndDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def revenue() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def profit() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def ebitda() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Total number of FTEs in this organization.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def ftes() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// Designated broker for this organization.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    def broker() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// For organizations of type CORPORATION, the name of the Chief Executive Officer.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    def ceo() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// For organizations of type CORPORATION, the name of the Chief Financial Officer.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    def cfo() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// For organizations of type CORPORATION, the name of the Chief Technology Officer.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    def cto() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// The name of the risk manager for the organization.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 128
    def riskManager() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Mass ranking for this organization.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def massRanking() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// Revenue ranking for this organization.
    /// Example: /// Example: 123
    /// Constraints: No constraints specified.
    def revenueRanking() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// For organizations of type CORPORATION, notes on company financials.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def financialNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Notes on the services provided by the organization.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def servicesNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Satellite fleet planning notes for this organization.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def fleetPlanNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> OrganizationDetails_Full_dataMode_Enum:
        return OrganizationDetails_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 70) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 70)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)

def GetRootAsOrganizationDetails_Full(buf:string): return OrganizationDetails_Full { buf, flatbuffers.indirect(buf, 0) }

struct OrganizationDetails_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(39)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idOrganization(idOrganization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idOrganization)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, name)
        return this
    def add_email(email:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, email)
        return this
    def add_address1(address1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, address1)
        return this
    def add_address2(address2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, address2)
        return this
    def add_address3(address3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, address3)
        return this
    def add_geoAdminLevel1(geoAdminLevel1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, geoAdminLevel1)
        return this
    def add_geoAdminLevel2(geoAdminLevel2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, geoAdminLevel2)
        return this
    def add_geoAdminLevel3(geoAdminLevel3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, geoAdminLevel3)
        return this
    def add_postalCode(postalCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, postalCode)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, description)
        return this
    def add_formerOrgId(formerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, formerOrgId)
        return this
    def add_parentOrgId(parentOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, parentOrgId)
        return this
    def add_financialYearEndDate(financialYearEndDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, financialYearEndDate)
        return this
    def add_revenue(revenue:float):
        b_.PrependFloat64Slot(16, revenue, 0.0)
        return this
    def add_profit(profit:float):
        b_.PrependFloat64Slot(17, profit, 0.0)
        return this
    def add_ebitda(ebitda:float):
        b_.PrependFloat64Slot(18, ebitda, 0.0)
        return this
    def add_ftes(ftes:int):
        b_.PrependInt32Slot(19, ftes, 0)
        return this
    def add_broker(broker:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, broker)
        return this
    def add_ceo(ceo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, ceo)
        return this
    def add_cfo(cfo:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, cfo)
        return this
    def add_cto(cto:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, cto)
        return this
    def add_riskManager(riskManager:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, riskManager)
        return this
    def add_massRanking(massRanking:int):
        b_.PrependInt32Slot(25, massRanking, 0)
        return this
    def add_revenueRanking(revenueRanking:int):
        b_.PrependInt32Slot(26, revenueRanking, 0)
        return this
    def add_financialNotes(financialNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, financialNotes)
        return this
    def add_servicesNotes(servicesNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, servicesNotes)
        return this
    def add_fleetPlanNotes(fleetPlanNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, fleetPlanNotes)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, origin)
        return this
    def add_dataMode(dataMode:OrganizationDetails_Full_dataMode_Enum):
        b_.PrependInt8Slot(32, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, updatedBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, origNetwork)
        return this
    def end():
        return b_.EndObject()

def OrganizationDetails_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def OrganizationDetails_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

