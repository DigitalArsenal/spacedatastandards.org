// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum TAIUTC_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    TAIUTC_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    TAIUTC_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    TAIUTC_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    TAIUTC_Full_dataMode_Enum_EXERCISE = 3

class TAIUTC_Full

/// /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
/// Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
/// The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
class TAIUTC_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: TAIUTC-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Effective date/time for the leap second adjustment.
    /// Example: /// Example: 2017-01-01T00:00:00.123Z
    /// Constraints: No constraints specified.
    def adjustmentDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
    /// Example: /// Example: 1.422818
    /// Constraints: No constraints specified.
    def taiUTC() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Multiplication factor of the leap second adjustment.
    /// Example: /// Example: 0.001296
    /// Constraints: No constraints specified.
    def multiplicationFactor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> TAIUTC_Full_dataMode_Enum:
        return TAIUTC_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 22, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)

def GetRootAsTAIUTC_Full(buf:string): return TAIUTC_Full { buf, flatbuffers.indirect(buf, 0) }

struct TAIUTC_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(14)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_adjustmentDate(adjustmentDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, adjustmentDate)
        return this
    def add_taiUTC(taiUTC:float):
        b_.PrependFloat64Slot(3, taiUTC, 0.0)
        return this
    def add_multiplicationFactor(multiplicationFactor:float):
        b_.PrependFloat64Slot(4, multiplicationFactor, 0.0)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, rawFileURI)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origNetwork)
        return this
    def add_dataMode(dataMode:TAIUTC_Full_dataMode_Enum):
        b_.PrependInt8Slot(9, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, updatedBy)
        return this
    def end():
        return b_.EndObject()

