// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EffectResponseActionsList_Abridged

/// /// List of actions associated with this effect response.
class EffectResponseActionsList_Abridged : flatbuffers.handle
    /// A summary string describing different aspects of the action.
    /// Example: /// Example: Example summary
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def summary() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of this action.
    /// Example: /// Example: ACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def actionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The desired start time of this task, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def actionStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The desired end time of this task, in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def actionEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The start time of the asset TOT (time over target), in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def totStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The end time of the asset TOT (time over target), in ISO8601 UTC format.
    /// Example: /// Example: 2021-01-01T00:00:00.123456Z
    /// Constraints: No constraints specified.
    def totEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
    /// Example: /// Example: AIRCRAFT
    /// Constraints: Minimum length = 0, Maximum length = 64
    def actionActorSrcType() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
    /// Example: /// Example: ACTIONACTORSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def actionActorSrcId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The type of munition or sensor used by this asset/actor.
    /// Example: /// Example: SENSOR1
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def effector() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The source type of the targetId identifier (POI, TRACK).
    /// Example: /// Example: POI
    /// Constraints: Minimum length = 0, Maximum length = 64
    def targetSrcType() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    /// Example: /// Example: TARGETSRC-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def targetSrcId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def actorInterceptLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 180.1
    /// Constraints: No constraints specified.
    def actorInterceptLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def actorInterceptAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def weaponInterceptLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 180.1
    /// Constraints: No constraints specified.
    def weaponInterceptLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The WGS-84 altitude of the weapon destination location, in meters.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def weaponInterceptAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// List of metrics associated with this action.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def actionMetrics(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 38) + i * 4)
    def actionMetrics_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 38)

def GetRootAsEffectResponseActionsList_Abridged(buf:string): return EffectResponseActionsList_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct EffectResponseActionsList_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(18)
        return this
    def add_summary(summary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, summary)
        return this
    def add_actionId(actionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, actionId)
        return this
    def add_actionStartTime(actionStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, actionStartTime)
        return this
    def add_actionEndTime(actionEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, actionEndTime)
        return this
    def add_totStartTime(totStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, totStartTime)
        return this
    def add_totEndTime(totEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, totEndTime)
        return this
    def add_actionActorSrcType(actionActorSrcType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, actionActorSrcType)
        return this
    def add_actionActorSrcId(actionActorSrcId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, actionActorSrcId)
        return this
    def add_effector(effector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, effector)
        return this
    def add_targetSrcType(targetSrcType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, targetSrcType)
        return this
    def add_targetSrcId(targetSrcId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, targetSrcId)
        return this
    def add_actorInterceptLat(actorInterceptLat:float):
        b_.PrependFloat64Slot(11, actorInterceptLat, 0.0)
        return this
    def add_actorInterceptLon(actorInterceptLon:float):
        b_.PrependFloat64Slot(12, actorInterceptLon, 0.0)
        return this
    def add_actorInterceptAlt(actorInterceptAlt:float):
        b_.PrependFloat64Slot(13, actorInterceptAlt, 0.0)
        return this
    def add_weaponInterceptLat(weaponInterceptLat:float):
        b_.PrependFloat64Slot(14, weaponInterceptLat, 0.0)
        return this
    def add_weaponInterceptLon(weaponInterceptLon:float):
        b_.PrependFloat64Slot(15, weaponInterceptLon, 0.0)
        return this
    def add_weaponInterceptAlt(weaponInterceptAlt:float):
        b_.PrependFloat64Slot(16, weaponInterceptAlt, 0.0)
        return this
    def add_actionMetrics(actionMetrics:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, actionMetrics)
        return this
    def end():
        return b_.EndObject()

def EffectResponseActionsList_AbridgedStartActionMetricsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EffectResponseActionsList_AbridgedCreateActionMetricsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

