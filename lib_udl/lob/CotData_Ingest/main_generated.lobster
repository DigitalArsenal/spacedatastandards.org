// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class CotData_Ingest

/// /// Schema for the CotData to post.
class CotData_Ingest : flatbuffers.handle
    /// Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
    /// Example: /// Example: POI-ID
    /// Constraints: No constraints specified.
    def senderUid() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: h-e
    /// Constraints: No constraints specified.
    def how() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def ce() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def le() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Stale timestamp (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def stale() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Start time of event validity (optional), in ISO8601 UTC format.
    /// Example: /// Example: 2020-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def start() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Event type, in CoT object heirarchy notation (optional, CoT).
    /// Example: /// Example: a-h-G
    /// Constraints: No constraints specified.
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Point height above ellipsoid (WGS-84), in meters.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def cotPositionData() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def cotChatData() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Optional list of call signs to send message to directly.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def callSigns(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 28) + i * 4)
    def callSigns_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 28)
    /// Optional list of TAK user ids to send message to directly.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def uids(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def uids_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def groups(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def groups_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)

def GetRootAsCotData_Ingest(buf:string): return CotData_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct CotData_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(15)
        return this
    def add_senderUid(senderUid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, senderUid)
        return this
    def add_how(how:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, how)
        return this
    def add_ce(ce:float):
        b_.PrependFloat64Slot(2, ce, 0.0)
        return this
    def add_le(le:float):
        b_.PrependFloat64Slot(3, le, 0.0)
        return this
    def add_stale(stale:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, stale)
        return this
    def add_start(start:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, start)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(6, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(7, lon, 0.0)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, type)
        return this
    def add_alt(alt:float):
        b_.PrependFloat64Slot(9, alt, 0.0)
        return this
    def add_cotPositionData(cotPositionData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, cotPositionData)
        return this
    def add_cotChatData(cotChatData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, cotChatData)
        return this
    def add_callSigns(callSigns:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, callSigns)
        return this
    def add_uids(uids:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, uids)
        return this
    def add_groups(groups:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, groups)
        return this
    def end():
        return b_.EndObject()

def CotData_IngestStartCallSignsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def CotData_IngestCreateCallSignsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def CotData_IngestStartUidsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def CotData_IngestCreateUidsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def CotData_IngestStartGroupsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def CotData_IngestCreateGroupsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

