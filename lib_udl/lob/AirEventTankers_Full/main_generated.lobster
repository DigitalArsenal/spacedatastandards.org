// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class AirEventTankers_Full

/// /// Collection of tanker aircraft associated with this Air Event.
class AirEventTankers_Full : flatbuffers.handle
    /// The UDL ID of the aircraft sortie this tanker is associated with for this event.
    /// Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idTankerSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The UDL ID of the mission this tanker is associated with for this event.
    /// Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idTankerMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The UDL ID of the airfield this tanker is associated with for this event.
    /// Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idTankerAirfield() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalTankerId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Coordination record identifier of this tanker.
    /// Example: /// Example: TTC601
    /// Constraints: Minimum length = 0, Maximum length = 6
    def tankerCoord() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The Model Design Series designation of this tanker.
    /// Example: /// Example: KC135R
    /// Constraints: Minimum length = 0, Maximum length = 128
    def tankerMDS() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The Air Mobility Command (AMC) mission identifier of this tanker.
    /// Example: /// Example: 8PH000B1S052
    /// Constraints: Minimum length = 0, Maximum length = 36
    def amcTankerMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Alternate mission identifier of this tanker provided by source.
    /// Example: /// Example: 1UN05201L121
    /// Constraints: Minimum length = 0, Maximum length = 32
    def altTankerMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The call sign assigned to this tanker.
    /// Example: /// Example: BAKER
    /// Constraints: Minimum length = 0, Maximum length = 24
    def tankerCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The wing or unit that owns this tanker.
    /// Example: /// Example: 117ARW
    /// Constraints: Minimum length = 0, Maximum length = 256
    def tankerOwner() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The name and/or number of the point of contact for this tanker.
    /// Example: /// Example: JOHN SMITH (555)555-5555
    /// Constraints: Minimum length = 0, Maximum length = 68
    def tankerPOC() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Identifies the itinerary point of a mission that this tanker is linked to.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    def tankerLegNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// Location the tanker has been deployed to in preparation for an air refueling event.
    /// Example: /// Example: KOFF
    /// Constraints: Minimum length = 0, Maximum length = 4
    def tankerDeployedICAO() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
    /// Example: /// Example: DROGUE
    /// Constraints: Minimum length = 0, Maximum length = 6
    def tankerDeliveryMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
    /// Example: /// Example: 15000000.1
    /// Constraints: No constraints specified.
    def fuelOff() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Position of this tanker within a group of tankers in an air refueling event.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def tankerCellPosition() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Type of fuel being transferred from the tanker in an air refueling event.
    /// Example: /// Example: JP8
    /// Constraints: Minimum length = 0, Maximum length = 3
    def tankerFuelType() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Flag indicating that this tanker is flying a dual role mission in an air refueling event.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def dualRole() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 38, 0))

def GetRootAsAirEventTankers_Full(buf:string): return AirEventTankers_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirEventTankers_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(18)
        return this
    def add_idTankerSortie(idTankerSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idTankerSortie)
        return this
    def add_idTankerMission(idTankerMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idTankerMission)
        return this
    def add_idTankerAirfield(idTankerAirfield:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idTankerAirfield)
        return this
    def add_externalTankerId(externalTankerId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, externalTankerId)
        return this
    def add_tankerCoord(tankerCoord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, tankerCoord)
        return this
    def add_tankerMDS(tankerMDS:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, tankerMDS)
        return this
    def add_amcTankerMissionId(amcTankerMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, amcTankerMissionId)
        return this
    def add_altTankerMissionId(altTankerMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, altTankerMissionId)
        return this
    def add_tankerCallSign(tankerCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, tankerCallSign)
        return this
    def add_tankerOwner(tankerOwner:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, tankerOwner)
        return this
    def add_tankerPOC(tankerPOC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, tankerPOC)
        return this
    def add_tankerLegNum(tankerLegNum:int):
        b_.PrependInt32Slot(11, tankerLegNum, 0)
        return this
    def add_tankerDeployedICAO(tankerDeployedICAO:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, tankerDeployedICAO)
        return this
    def add_tankerDeliveryMethod(tankerDeliveryMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, tankerDeliveryMethod)
        return this
    def add_fuelOff(fuelOff:float):
        b_.PrependFloat64Slot(14, fuelOff, 0.0)
        return this
    def add_tankerCellPosition(tankerCellPosition:int):
        b_.PrependInt32Slot(15, tankerCellPosition, 0)
        return this
    def add_tankerFuelType(tankerFuelType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, tankerFuelType)
        return this
    def add_dualRole(dualRole:bool):
        b_.PrependBoolSlot(17, dualRole, 0)
        return this
    def end():
        return b_.EndObject()

