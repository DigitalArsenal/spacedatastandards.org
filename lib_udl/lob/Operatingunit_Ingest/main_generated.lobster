// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Operatingunit_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Operatingunit_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Operatingunit_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Operatingunit_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Operatingunit_Ingest_dataMode_Enum_EXERCISE = 3

class Operatingunit_Ingest

/// /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
class Operatingunit_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: OPERATINGUNIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOperatingUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the operating unit record from the originating system.
    /// Example: /// Example: 32100000000021
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altOperatingUnitId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Name of the operating unit.
    /// Example: /// Example: SOME_NAME
    /// Constraints: Minimum length = 1, Maximum length = 128
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Description of the operating unit.
    /// Example: /// Example: Description of unit
    /// Constraints: Minimum length = 0, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the location record for this operating unit.
    /// Example: /// Example: LOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idLocation() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the contact for this operating unit.
    /// Example: /// Example: CONTACT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idContact() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the organization record for this operating unit.
    /// Example: /// Example: ORGANIZATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOrganization() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
    /// Example: /// Example: AZXAZ12345
    /// Constraints: Minimum length = 0, Maximum length = 10
    def unitIdentifier() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: IQ
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 4
    def altCountryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// World Aeronautical Chart identifier for the area in which a designated operating unit is located.
    /// Example: /// Example: 0427
    /// Constraints: Minimum length = 0, Maximum length = 4
    def wac() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: OPR
    /// Constraints: Minimum length = 0, Maximum length = 3
    def operStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: RDY
    /// Constraints: Minimum length = 0, Maximum length = 4
    def condition() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 4
    def conditionAvail() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    /// Example: /// Example: 7
    /// Constraints: No constraints specified.
    def eval() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: EOB
    /// Constraints: Minimum length = 0, Maximum length = 5
    def fpa() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
    /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
    /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    /// PENDING: Track object which has not been evaluated.
    /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    /// Example: /// Example: FRIEND
    /// Constraints: Minimum length = 0, Maximum length = 32
    def ident() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: OTHR
    /// Constraints: Minimum length = 0, Maximum length = 4
    def allegiance() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    /// Example: /// Example: HL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def altAllegiance() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Location name for the coordinates.
    /// Example: /// Example: LOCATION_NAME
    /// Constraints: Minimum length = 0, Maximum length = 54
    def locName() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: GR
    /// Constraints: Minimum length = 0, Maximum length = 9
    def locReason() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: NV
    /// Constraints: Minimum length = 0, Maximum length = 4
    def force() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
    /// Example: /// Example: FORCE-NAME
    /// Constraints: Minimum length = 0, Maximum length = 54
    def forceName() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: MIL
    /// Constraints: Minimum length = 0, Maximum length = 3
    def functRole() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: W6
    /// Constraints: Minimum length = 0, Maximum length = 4
    def msnPrimary() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: QK
    /// Constraints: Minimum length = 0, Maximum length = 4
    def msnPrimarySpecialty() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def masterUnit() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 58, 0))
    /// This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def stylizedUnit() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 60, 0))
    /// Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: 5
    /// Constraints: Minimum length = 0, Maximum length = 1
    def divCat() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: SHIP
    /// Constraints: Minimum length = 0, Maximum length = 4
    def echelon() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: 68
    /// Constraints: Minimum length = 0, Maximum length = 2
    def echelonTier() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    def fleetId() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: ND
    /// Constraints: Minimum length = 0, Maximum length = 2
    def deployStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// The country code of the observed flag flown.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 4
    def flagFlown() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: WGS
    /// Constraints: Minimum length = 0, Maximum length = 16
    def coordDatum() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
    /// Pos. 1-2.  Latitude Degrees     [00-90]
    /// Pos. 3-4.  Latitude Minutes     [00-59]
    /// Pos. 5-6.  Latitude Seconds     [00-59]
    /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    /// Pos. 10. Latitude Hemisphere       [NS] 
    /// Pos. 11-13. Longitude Degrees     [00-180] 
    /// Pos. 14-15. Longitude Minutes     [00-59] 
    /// Pos. 16-17. Longitude Seconds     [00-59] 
    /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    /// Pos. 21. Longitude Hemisphere     [EW]
    /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
    /// Example: /// Example: 340000000N0430000000E
    /// Constraints: Minimum length = 0, Maximum length = 21
    def coord() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
    /// Example: /// Example: 12.345
    /// Constraints: No constraints specified.
    def coordDerivAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 78, 0.0)
    /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 80, 0.0)
    /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 82, 0.0)
    /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
    /// Example: /// Example: 123.45
    /// Constraints: No constraints specified.
    def elevMsl() -> float:
        return flatbuffers.field_float64(buf_, pos_, 84, 0.0)
    /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    def elevMslConfLvl() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// Indicates the plus or minus error assessed against the method used to derive the elevation.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    def elevMslDerivAcc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 88, 0.0)
    /// The distance between Mean Sea Level and a referenced ellipsoid.
    /// Example: /// Example: 12.34
    /// Constraints: No constraints specified.
    def geoidalMslSep() -> float:
        return flatbuffers.field_float64(buf_, pos_, 90, 0.0)
    /// "Indicates the grid system used in the development of the milGrid coordinates. Values are:
    /// UPS - Universal Polar System
    /// UTM - Universal Transverse Mercator".
    /// Example: /// Example: UTM
    /// Constraints: Minimum length = 0, Maximum length = 3
    def milGridSys() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    /// 4Q (grid zone designator, GZD)
    /// FJ (the 100,000-meter square identifier)
    /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    /// Example: /// Example: 4QFJ12345678
    /// Constraints: Minimum length = 0, Maximum length = 15
    def milGrid() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// Universal Transverse Mercator (UTM) grid coordinates.
    /// Pos. 1-2, UTM Zone Column   [01-60
    /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    /// Pos. 4, UTM False Easting   [0-9]
    /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    /// Pos. 10-11, UTM False Northing    [0-9][0-9]
    /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    /// Example: /// Example: 19P4390691376966
    /// Constraints: Minimum length = 0, Maximum length = 16
    def utm() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    /// Example: /// Example: AL006
    /// Constraints: Minimum length = 0, Maximum length = 5
    def airDefArea() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: IZ07
    /// Constraints: Minimum length = 0, Maximum length = 7
    def polSubdiv() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
    /// Example: /// Example: SOGPU----------
    /// Constraints: Minimum length = 0, Maximum length = 15
    def symCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
    /// 0 - Does not meet criteria above
    /// 1 - Primary importance to system
    /// 2 - Secondary importance to system
    /// 3 - Tertiary importance to system
    /// O - Other. Explain in Remarks.
    /// Example: /// Example: 1
    /// Constraints: Minimum length = 0, Maximum length = 1
    def classRating() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
    /// A - Active
    /// I - Inactive
    /// K - Acknowledged
    /// L - Local
    /// Q - A nominated (NOM) or Data Change Request (DCR) record
    /// R - Production reduced by CMD decision
    /// W - Working Record.
    /// Example: /// Example: A
    /// Constraints: Minimum length = 0, Maximum length = 1
    def recStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
    /// Example: /// Example: 2008-06-10
    /// Constraints: No constraints specified.
    def reviewDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// Responsible Producer - Organization that is responsible for the maintenance of the record.
    /// Example: /// Example: RT
    /// Constraints: Minimum length = 0, Maximum length = 4
    def resProd() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)
    /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    /// Example: /// Example: Provider Reference Documentation
    /// Constraints: Minimum length = 0, Maximum length = 128
    def referenceDoc() -> string:
        return flatbuffers.field_string(buf_, pos_, 112)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 114)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 116)
    /// Source of the data.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 118)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 120)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Operatingunit_Ingest_dataMode_Enum:
        return Operatingunit_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 122, 0))

def GetRootAsOperatingunit_Ingest(buf:string): return Operatingunit_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Operatingunit_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(60)
        return this
    def add_idOperatingUnit(idOperatingUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idOperatingUnit)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_altOperatingUnitId(altOperatingUnitId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, altOperatingUnitId)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, name)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, description)
        return this
    def add_idLocation(idLocation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idLocation)
        return this
    def add_idContact(idContact:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idContact)
        return this
    def add_idOrganization(idOrganization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idOrganization)
        return this
    def add_unitIdentifier(unitIdentifier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, unitIdentifier)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, countryCode)
        return this
    def add_altCountryCode(altCountryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, altCountryCode)
        return this
    def add_wac(wac:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, wac)
        return this
    def add_operStatus(operStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, operStatus)
        return this
    def add_condition(condition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, condition)
        return this
    def add_conditionAvail(conditionAvail:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, conditionAvail)
        return this
    def add_eval(eval:int):
        b_.PrependInt32Slot(15, eval, 0)
        return this
    def add_fpa(fpa:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, fpa)
        return this
    def add_ident(ident:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, ident)
        return this
    def add_allegiance(allegiance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, allegiance)
        return this
    def add_altAllegiance(altAllegiance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, altAllegiance)
        return this
    def add_locName(locName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, locName)
        return this
    def add_locReason(locReason:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, locReason)
        return this
    def add_force(force:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, force)
        return this
    def add_forceName(forceName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, forceName)
        return this
    def add_functRole(functRole:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, functRole)
        return this
    def add_msnPrimary(msnPrimary:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, msnPrimary)
        return this
    def add_msnPrimarySpecialty(msnPrimarySpecialty:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, msnPrimarySpecialty)
        return this
    def add_masterUnit(masterUnit:bool):
        b_.PrependBoolSlot(27, masterUnit, 0)
        return this
    def add_stylizedUnit(stylizedUnit:bool):
        b_.PrependBoolSlot(28, stylizedUnit, 0)
        return this
    def add_divCat(divCat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, divCat)
        return this
    def add_echelon(echelon:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, echelon)
        return this
    def add_echelonTier(echelonTier:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, echelonTier)
        return this
    def add_fleetId(fleetId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, fleetId)
        return this
    def add_deployStatus(deployStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, deployStatus)
        return this
    def add_flagFlown(flagFlown:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, flagFlown)
        return this
    def add_coordDatum(coordDatum:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, coordDatum)
        return this
    def add_coord(coord:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, coord)
        return this
    def add_coordDerivAcc(coordDerivAcc:float):
        b_.PrependFloat64Slot(37, coordDerivAcc, 0.0)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(38, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(39, lon, 0.0)
        return this
    def add_elevMsl(elevMsl:float):
        b_.PrependFloat64Slot(40, elevMsl, 0.0)
        return this
    def add_elevMslConfLvl(elevMslConfLvl:int):
        b_.PrependInt32Slot(41, elevMslConfLvl, 0)
        return this
    def add_elevMslDerivAcc(elevMslDerivAcc:float):
        b_.PrependFloat64Slot(42, elevMslDerivAcc, 0.0)
        return this
    def add_geoidalMslSep(geoidalMslSep:float):
        b_.PrependFloat64Slot(43, geoidalMslSep, 0.0)
        return this
    def add_milGridSys(milGridSys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, milGridSys)
        return this
    def add_milGrid(milGrid:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, milGrid)
        return this
    def add_utm(utm:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, utm)
        return this
    def add_airDefArea(airDefArea:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, airDefArea)
        return this
    def add_polSubdiv(polSubdiv:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, polSubdiv)
        return this
    def add_symCode(symCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, symCode)
        return this
    def add_classRating(classRating:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, classRating)
        return this
    def add_recStatus(recStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, recStatus)
        return this
    def add_reviewDate(reviewDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, reviewDate)
        return this
    def add_resProd(resProd:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, resProd)
        return this
    def add_referenceDoc(referenceDoc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(54, referenceDoc)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(55, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(56, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(57, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(58, origin)
        return this
    def add_dataMode(dataMode:Operatingunit_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(59, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

