// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SeradataSigIntPayload_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SeradataSigIntPayload_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SeradataSigIntPayload_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SeradataSigIntPayload_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SeradataSigIntPayload_Full_dataMode_Enum_EXERCISE = 3

class SeradataSigIntPayload_Full

/// /// Details for an sigint payload from  Seradata.
class SeradataSigIntPayload_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATASIGINTPAYLOAD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: spacecraftId
    /// Constraints: Minimum length = 1, Maximum length = 36
    def spacecraftId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// UUID of the Sensor record.
    /// Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Hosted for company/Organization Id.
    /// Example: /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def hostedForCompanyOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Manufacturer Organization Id.
    /// Example: /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// SIGINT Payload type, e.g. Comint, Elint, etc.
    /// Example: /// Example: Comint
    /// Constraints: Minimum length = 0, Maximum length = 50
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Swath Width in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def swathWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Ground Station info for this payload.
    /// Example: /// Example: groundStations
    /// Constraints: Minimum length = 0, Maximum length = 128
    def groundStations() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Ground Station Locations for this payload.
    /// Example: /// Example: groundStationLocations
    /// Constraints: Minimum length = 0, Maximum length = 64
    def groundStationLocations() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Frequency coverage for this payload.
    /// Example: /// Example: 1.1 to 3.3
    /// Constraints: Minimum length = 0, Maximum length = 50
    def frequencyCoverage() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Positional Accuracy for this payload.
    /// Example: /// Example: positionalAccuracy
    /// Constraints: Minimum length = 0, Maximum length = 50
    def positionalAccuracy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Intercept parameters.
    /// Example: /// Example: interceptParameters
    /// Constraints: Minimum length = 0, Maximum length = 50
    def interceptParameters() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Sensor name from Seradata.
    /// Example: /// Example: Sensor Name
    /// Constraints: Minimum length = 0, Maximum length = 50
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Payload notes.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SeradataSigIntPayload_Full_dataMode_Enum:
        return SeradataSigIntPayload_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 48, 0))

def GetRootAsSeradataSigIntPayload_Full(buf:string): return SeradataSigIntPayload_Full { buf, flatbuffers.indirect(buf, 0) }

struct SeradataSigIntPayload_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(23)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_spacecraftId(spacecraftId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, spacecraftId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSensor)
        return this
    def add_hostedForCompanyOrgId(hostedForCompanyOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, hostedForCompanyOrgId)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, manufacturerOrgId)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, type)
        return this
    def add_swathWidth(swathWidth:float):
        b_.PrependFloat64Slot(7, swathWidth, 0.0)
        return this
    def add_groundStations(groundStations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, groundStations)
        return this
    def add_groundStationLocations(groundStationLocations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, groundStationLocations)
        return this
    def add_frequencyCoverage(frequencyCoverage:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, frequencyCoverage)
        return this
    def add_positionalAccuracy(positionalAccuracy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, positionalAccuracy)
        return this
    def add_interceptParameters(interceptParameters:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, interceptParameters)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, name)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, origNetwork)
        return this
    def add_dataMode(dataMode:SeradataSigIntPayload_Full_dataMode_Enum):
        b_.PrependInt8Slot(22, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

