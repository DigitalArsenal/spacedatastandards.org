// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum ItemTracking_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    ItemTracking_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    ItemTracking_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    ItemTracking_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    ItemTracking_Abridged_dataMode_Enum_EXERCISE = 3

class ItemTracking_Abridged

/// /// No description available.
class ItemTracking_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
    /// Example: /// Example: ABC1234
    /// Constraints: Minimum length = 1, Maximum length = 36
    def scanCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    /// Example: /// Example: bID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def scGenTool() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The ID of the scanner or input device.
    /// Example: /// Example: 2051M
    /// Constraints: Minimum length = 1, Maximum length = 36
    def scannerId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2023-03-21T14:22:00.123Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The UDL ID of the item this record is associated with.
    /// Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idItem() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
    /// Example: /// Example: CARGO
    /// Constraints: Minimum length = 0, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// WGS84 latitude where the item was scanned, in degrees.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// WGS84 longitude where the item was scanned, in degrees.
    /// Example: /// Example: 179.1
    /// Constraints: No constraints specified.
    def lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
    /// Example: /// Example: TRANSIT
    /// Constraints: Minimum length = 0, Maximum length = 64
    def scanType() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The United States distinguished visitor code of the person scanned, only applicable to people.
    /// Example: /// Example: DV-4
    /// Constraints: Minimum length = 0, Maximum length = 16
    def dvCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Optional notes or comments about the tracking data.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Array of keys that may be associated with this tracked item.
    /// Example: /// Example: ['tapeColor', 'hazmat']
    /// Constraints: No constraints specified.
    def keys(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def keys_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    /// Example: /// Example: ['yellow', 'false']
    /// Constraints: No constraints specified.
    def values(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 32) + i * 4)
    def values_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 32)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2023-03-21T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> ItemTracking_Abridged_dataMode_Enum:
        return ItemTracking_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 46, 0))

def GetRootAsItemTracking_Abridged(buf:string): return ItemTracking_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct ItemTracking_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(22)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_scanCode(scanCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, scanCode)
        return this
    def add_scGenTool(scGenTool:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, scGenTool)
        return this
    def add_scannerId(scannerId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, scannerId)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, ts)
        return this
    def add_idItem(idItem:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, idItem)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, type)
        return this
    def add_lat(lat:float):
        b_.PrependFloat64Slot(8, lat, 0.0)
        return this
    def add_lon(lon:float):
        b_.PrependFloat64Slot(9, lon, 0.0)
        return this
    def add_scanType(scanType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, scanType)
        return this
    def add_dvCode(dvCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, dvCode)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, notes)
        return this
    def add_keys(keys:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, keys)
        return this
    def add_values(values:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, values)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, createdBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origNetwork)
        return this
    def add_dataMode(dataMode:ItemTracking_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(21, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def ItemTracking_AbridgedStartKeysVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ItemTracking_AbridgedCreateKeysVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def ItemTracking_AbridgedStartValuesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ItemTracking_AbridgedCreateValuesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

