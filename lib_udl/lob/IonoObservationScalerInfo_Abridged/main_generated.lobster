// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class IonoObservationScalerInfo_Abridged

/// /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
class IonoObservationScalerInfo_Abridged : flatbuffers.handle
    /// Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
    /// Example: /// Example: MANUAL
    /// Constraints: Minimum length = 0, Maximum length = 9
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Scaler name.
    /// Example: /// Example: ARTIST-4
    /// Constraints: Minimum length = 0, Maximum length = 20
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Scaler organization.
    /// Example: /// Example: UML
    /// Constraints: Minimum length = 0, Maximum length = 64
    def organization() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Scaler version.
    /// Example: /// Example: 500200.1
    /// Constraints: No constraints specified.
    def version() -> float:
        return flatbuffers.field_float64(buf_, pos_, 10, 0.0)
    /// Scaler confidence score.
    /// Example: /// Example: 75
    /// Constraints: No constraints specified.
    def confidenceScore() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// Scaler confidence level.
    /// Example: /// Example: 11
    /// Constraints: No constraints specified.
    def confidenceLevel() -> int:
        return flatbuffers.field_int32(buf_, pos_, 14, 0)

def GetRootAsIonoObservationScalerInfo_Abridged(buf:string): return IonoObservationScalerInfo_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct IonoObservationScalerInfo_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(6)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, type)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, name)
        return this
    def add_organization(organization:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, organization)
        return this
    def add_version(version:float):
        b_.PrependFloat64Slot(3, version, 0.0)
        return this
    def add_confidenceScore(confidenceScore:int):
        b_.PrependInt32Slot(4, confidenceScore, 0)
        return this
    def add_confidenceLevel(confidenceLevel:int):
        b_.PrependInt32Slot(5, confidenceLevel, 0)
        return this
    def end():
        return b_.EndObject()

