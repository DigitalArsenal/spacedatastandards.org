// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class GNSSObservation_Ingest

/// /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
class GNSSObservation_Ingest : flatbuffers.handle
    /// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
    /// G - GPS (NN = PRN)
    /// R - GLONASS (NN = Slot Number)
    /// S - SBAS Payload (NN = PRN-100)
    /// E - Galileo (NN = PRN)
    /// C - BeiDou (NN = PRN)
    /// J - QZSS (NN = PRN - 1923)
    /// I - IRNSS (NN = PRN)
    /// Example: /// Example: GEJ
    /// Constraints: Minimum length = 0, Maximum length = 6
    def gnssSatId() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
    /// Example: /// Example: 0
    /// Constraints: No constraints specified.
    def trackingStatus() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// GNSS Automatic Gain Control State.
    /// Example: /// Example: 20
    /// Constraints: No constraints specified.
    def agcState() -> int:
        return flatbuffers.field_int32(buf_, pos_, 8, 0)
    /// The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
    /// Example: /// Example: ['S1C', 'C1C', 'C1D']
    /// Constraints: No constraints specified.
    def obsCodeSet(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 10) + i * 4)
    def obsCodeSet_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 10)
    /// Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
    /// Example: /// Example: [42.1, 1000.0, 0.9]
    /// Constraints: No constraints specified.
    def ob(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 12) + i * 4)
    def ob_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 12)

def GetRootAsGNSSObservation_Ingest(buf:string): return GNSSObservation_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct GNSSObservation_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(5)
        return this
    def add_gnssSatId(gnssSatId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, gnssSatId)
        return this
    def add_trackingStatus(trackingStatus:int):
        b_.PrependInt32Slot(1, trackingStatus, 0)
        return this
    def add_agcState(agcState:int):
        b_.PrependInt32Slot(2, agcState, 0)
        return this
    def add_obsCodeSet(obsCodeSet:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, obsCodeSet)
        return this
    def add_ob(ob:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, ob)
        return this
    def end():
        return b_.EndObject()

def GNSSObservation_IngestStartObsCodeSetVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservation_IngestCreateObsCodeSetVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def GNSSObservation_IngestStartObVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def GNSSObservation_IngestCreateObVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

