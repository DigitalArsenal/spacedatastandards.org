// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum ECPSDR_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    ECPSDR_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    ECPSDR_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    ECPSDR_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    ECPSDR_Ingest_dataMode_Enum_EXERCISE = 3

class ECPSDR_Ingest

/// /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
class ECPSDR_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ECPSDR-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the on-orbit satellite hosting the sensor.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Satellite/catalog number of the on-orbit satellite hosting the sensor.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the reporting sensor.
    /// Example: /// Example: SENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The type of data associated with this record (STANDARD, TRANSIENT).
    /// Example: /// Example: STANDARD
    /// Constraints: Minimum length = 1, Maximum length = 12
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def msgTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def retransmit() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 24, 0))
    /// The sensor mode associated with this measurements (NORMAL, TEST).
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 0, Maximum length = 12
    def senMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def dosBias() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def asl5VCurrMon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 30, 0)
    /// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def dsl5VCurrMon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Power supply temperature monitor.  This is sensor status telemetry.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def psTempMon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def cdsPlateVMon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def cdsRefVMon() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// Unitless sensor mounting plate temperature.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def mpTemp() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def vRef() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// Photodiode 1 signal level.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def pd1SigLev() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Photodiode 2 signal level.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def pd2SigLev() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// Number of ESD triggers, low byte of 2-byte counter.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def esdTrigCountL() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// Number of ESD triggers, high byte of 2-byte counter.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def esdTrigCountH() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def lowLetL() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def lowLetM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet1L() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet1M() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet2L() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet2M() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet3L() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)
    /// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet3M() -> int:
        return flatbuffers.field_int32(buf_, pos_, 66, 0)
    /// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet4L() -> int:
        return flatbuffers.field_int32(buf_, pos_, 68, 0)
    /// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def medLet4M() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def hiLetL() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def hiLetM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def surfDosL() -> int:
        return flatbuffers.field_int32(buf_, pos_, 76, 0)
    /// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def surfDosM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 78, 0)
    /// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def surfDosH() -> int:
        return flatbuffers.field_int32(buf_, pos_, 80, 0)
    /// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def surfDosChargeL() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def surfDosChargeH() -> int:
        return flatbuffers.field_int32(buf_, pos_, 84, 0)
    /// Surface dosimeter status byte.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def surfDosStat() -> int:
        return flatbuffers.field_int32(buf_, pos_, 86, 0)
    /// CDS throttle number of seconds between CDS transient capture readouts.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def cdsThrottle() -> int:
        return flatbuffers.field_int32(buf_, pos_, 88, 0)
    /// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def cdsThreshold() -> int:
        return flatbuffers.field_int32(buf_, pos_, 90, 0)
    /// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
    /// Example: /// Example: 12
    /// Constraints: No constraints specified.
    def checksum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 92, 0)
    /// Array of 144 digitized samples of ESD waveform for transient packets.
    /// Example: /// Example: [1, 2, 3]
    /// Constraints: No constraints specified.
    def transientData(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 94) + i * 4)
    def transientData_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 94)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> ECPSDR_Ingest_dataMode_Enum:
        return ECPSDR_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 106, 0))

def GetRootAsECPSDR_Ingest(buf:string): return ECPSDR_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct ECPSDR_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(52)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(3, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, origObjectId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSensor)
        return this
    def add_origSensorId(origSensorId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, origSensorId)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, type)
        return this
    def add_msgTime(msgTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, msgTime)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, obTime)
        return this
    def add_retransmit(retransmit:bool):
        b_.PrependBoolSlot(10, retransmit, 0)
        return this
    def add_senMode(senMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, senMode)
        return this
    def add_dosBias(dosBias:int):
        b_.PrependInt32Slot(12, dosBias, 0)
        return this
    def add_asl5VCurrMon(asl5VCurrMon:int):
        b_.PrependInt32Slot(13, asl5VCurrMon, 0)
        return this
    def add_dsl5VCurrMon(dsl5VCurrMon:int):
        b_.PrependInt32Slot(14, dsl5VCurrMon, 0)
        return this
    def add_psTempMon(psTempMon:int):
        b_.PrependInt32Slot(15, psTempMon, 0)
        return this
    def add_cdsPlateVMon(cdsPlateVMon:int):
        b_.PrependInt32Slot(16, cdsPlateVMon, 0)
        return this
    def add_cdsRefVMon(cdsRefVMon:int):
        b_.PrependInt32Slot(17, cdsRefVMon, 0)
        return this
    def add_mpTemp(mpTemp:int):
        b_.PrependInt32Slot(18, mpTemp, 0)
        return this
    def add_vRef(vRef:int):
        b_.PrependInt32Slot(19, vRef, 0)
        return this
    def add_pd1SigLev(pd1SigLev:int):
        b_.PrependInt32Slot(20, pd1SigLev, 0)
        return this
    def add_pd2SigLev(pd2SigLev:int):
        b_.PrependInt32Slot(21, pd2SigLev, 0)
        return this
    def add_esdTrigCountL(esdTrigCountL:int):
        b_.PrependInt32Slot(22, esdTrigCountL, 0)
        return this
    def add_esdTrigCountH(esdTrigCountH:int):
        b_.PrependInt32Slot(23, esdTrigCountH, 0)
        return this
    def add_lowLetL(lowLetL:int):
        b_.PrependInt32Slot(24, lowLetL, 0)
        return this
    def add_lowLetM(lowLetM:int):
        b_.PrependInt32Slot(25, lowLetM, 0)
        return this
    def add_medLet1L(medLet1L:int):
        b_.PrependInt32Slot(26, medLet1L, 0)
        return this
    def add_medLet1M(medLet1M:int):
        b_.PrependInt32Slot(27, medLet1M, 0)
        return this
    def add_medLet2L(medLet2L:int):
        b_.PrependInt32Slot(28, medLet2L, 0)
        return this
    def add_medLet2M(medLet2M:int):
        b_.PrependInt32Slot(29, medLet2M, 0)
        return this
    def add_medLet3L(medLet3L:int):
        b_.PrependInt32Slot(30, medLet3L, 0)
        return this
    def add_medLet3M(medLet3M:int):
        b_.PrependInt32Slot(31, medLet3M, 0)
        return this
    def add_medLet4L(medLet4L:int):
        b_.PrependInt32Slot(32, medLet4L, 0)
        return this
    def add_medLet4M(medLet4M:int):
        b_.PrependInt32Slot(33, medLet4M, 0)
        return this
    def add_hiLetL(hiLetL:int):
        b_.PrependInt32Slot(34, hiLetL, 0)
        return this
    def add_hiLetM(hiLetM:int):
        b_.PrependInt32Slot(35, hiLetM, 0)
        return this
    def add_surfDosL(surfDosL:int):
        b_.PrependInt32Slot(36, surfDosL, 0)
        return this
    def add_surfDosM(surfDosM:int):
        b_.PrependInt32Slot(37, surfDosM, 0)
        return this
    def add_surfDosH(surfDosH:int):
        b_.PrependInt32Slot(38, surfDosH, 0)
        return this
    def add_surfDosChargeL(surfDosChargeL:int):
        b_.PrependInt32Slot(39, surfDosChargeL, 0)
        return this
    def add_surfDosChargeH(surfDosChargeH:int):
        b_.PrependInt32Slot(40, surfDosChargeH, 0)
        return this
    def add_surfDosStat(surfDosStat:int):
        b_.PrependInt32Slot(41, surfDosStat, 0)
        return this
    def add_cdsThrottle(cdsThrottle:int):
        b_.PrependInt32Slot(42, cdsThrottle, 0)
        return this
    def add_cdsThreshold(cdsThreshold:int):
        b_.PrependInt32Slot(43, cdsThreshold, 0)
        return this
    def add_checksum(checksum:int):
        b_.PrependInt32Slot(44, checksum, 0)
        return this
    def add_transientData(transientData:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, transientData)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, origNetwork)
        return this
    def add_dataMode(dataMode:ECPSDR_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(51, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def ECPSDR_IngestStartTransientDataVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def ECPSDR_IngestCreateTransientDataVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

