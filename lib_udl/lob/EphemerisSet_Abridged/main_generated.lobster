// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum EphemerisSet_Abridged_referenceFrame_Enum:
    /// No description available.
    EphemerisSet_Abridged_referenceFrame_Enum_J2000 = 0
    /// No description available.
    EphemerisSet_Abridged_referenceFrame_Enum_EFG_TDR = 1
    /// No description available.
    EphemerisSet_Abridged_referenceFrame_Enum_ECR_ECEF = 2
    /// No description available.
    EphemerisSet_Abridged_referenceFrame_Enum_TEME = 3
    /// No description available.
    EphemerisSet_Abridged_referenceFrame_Enum_ITRF = 4
    /// No description available.
    EphemerisSet_Abridged_referenceFrame_Enum_GCRF = 5

enum EphemerisSet_Abridged_covReferenceFrame_Enum:
    /// No description available.
    EphemerisSet_Abridged_covReferenceFrame_Enum_J2000 = 0
    /// No description available.
    EphemerisSet_Abridged_covReferenceFrame_Enum_UVW = 1

enum EphemerisSet_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    EphemerisSet_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    EphemerisSet_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    EphemerisSet_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    EphemerisSet_Abridged_dataMode_Enum_EXERCISE = 3

class EphemerisSet_Abridged

/// /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
class EphemerisSet_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EPHEMERISSET-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the primary satellite on-orbit object.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Start time/first time point of the ephemeris, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def pointStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:10:00.123456Z
    /// Constraints: No constraints specified.
    def usableStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// End time/last time point of the ephemeris, in ISO 8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def pointEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
    /// Example: /// Example: 2018-01-01T20:50:00.123456Z
    /// Constraints: No constraints specified.
    def usableEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Ephemeris step size, in seconds.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def stepSize() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Number of points contained in the ephemeris.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numPoints() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
    /// Example: /// Example: LAUNCH
    /// Constraints: Minimum length = 1, Maximum length = 24
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
    /// Example: /// Example: PROPAGATED
    /// Constraints: Minimum length = 0, Maximum length = 24
    def pedigree() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
    /// Example: /// Example: ANALYST
    /// Constraints: Minimum length = 1, Maximum length = 24
    def category() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// ID of the State Vector used to generate the ephemeris.
    /// Example: /// Example: STATEVECTOR-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idStateVector() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def hasMnvr() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
    /// Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
    /// Constraints: No constraints specified.
    def idManeuvers(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def idManeuvers_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// Boolean indicating whether covariance data is provided with the ephemeris.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def hasCov() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 36, 0))
    /// Boolean indicating whether acceleration data is provided with the ephemeris.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def hasAccel() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
    /// Example: /// Example: Earth
    /// Constraints: Minimum length = 0, Maximum length = 32
    def centBody() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
    /// Example: /// Example: COWELL
    /// Constraints: Minimum length = 0, Maximum length = 24
    def integrator() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
    /// Example: /// Example: GEM-T3
    /// Constraints: Minimum length = 0, Maximum length = 32
    def geopotentialModel() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
    /// Example: /// Example: JAC70
    /// Constraints: Minimum length = 0, Maximum length = 32
    def dragModel() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Boolean indicating use of lunar/solar data in ephemeris generation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def lunarSolar() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 48, 0))
    /// Boolean indicating use of solid earth tide data in ephemeris generation.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def solidEarthTides() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 50, 0))
    /// First derivative of ballistic coefficient (m^2/kg-s).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def bDot() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def edr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// The recommended interpolation method for the ephemeris data.
    /// Example: /// Example: LINEAR
    /// Constraints: Minimum length = 0, Maximum length = 16
    def interpolation() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The recommended interpolation degree for the ephemeris data.
    /// Example: /// Example: 5
    /// Constraints: No constraints specified.
    def interpolationDegree() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
    /// Example: /// Example: Example file name
    /// Constraints: Minimum length = 0, Maximum length = 128
    def filename() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Additional source provided comments associated with the ephemeris.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def comments() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def referenceFrame() -> EphemerisSet_Abridged_referenceFrame_Enum:
        return EphemerisSet_Abridged_referenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 68, 0))
    /// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
    /// Example: /// Example: J2000
    /// Constraints: Minimum length = 0, Maximum length = 24
    def covReferenceFrame() -> EphemerisSet_Abridged_covReferenceFrame_Enum:
        return EphemerisSet_Abridged_covReferenceFrame_Enum(flatbuffers.field_int8(buf_, pos_, 70, 0))
    /// Time the row was created in the database, in UTC.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Application user who created the row in the database.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> EphemerisSet_Abridged_dataMode_Enum:
        return EphemerisSet_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 80, 0))
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 2
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 82, 0)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)

def GetRootAsEphemerisSet_Abridged(buf:string): return EphemerisSet_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct EphemerisSet_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(42)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idOnOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, origObjectId)
        return this
    def add_pointStartTime(pointStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, pointStartTime)
        return this
    def add_usableStartTime(usableStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, usableStartTime)
        return this
    def add_pointEndTime(pointEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, pointEndTime)
        return this
    def add_usableEndTime(usableEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, usableEndTime)
        return this
    def add_stepSize(stepSize:int):
        b_.PrependInt32Slot(8, stepSize, 0)
        return this
    def add_numPoints(numPoints:int):
        b_.PrependInt32Slot(9, numPoints, 0)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, type)
        return this
    def add_pedigree(pedigree:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, pedigree)
        return this
    def add_category(category:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, category)
        return this
    def add_idStateVector(idStateVector:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, idStateVector)
        return this
    def add_hasMnvr(hasMnvr:bool):
        b_.PrependBoolSlot(14, hasMnvr, 0)
        return this
    def add_idManeuvers(idManeuvers:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, idManeuvers)
        return this
    def add_hasCov(hasCov:bool):
        b_.PrependBoolSlot(16, hasCov, 0)
        return this
    def add_hasAccel(hasAccel:bool):
        b_.PrependBoolSlot(17, hasAccel, 0)
        return this
    def add_centBody(centBody:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, centBody)
        return this
    def add_integrator(integrator:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, integrator)
        return this
    def add_geopotentialModel(geopotentialModel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, geopotentialModel)
        return this
    def add_dragModel(dragModel:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, dragModel)
        return this
    def add_lunarSolar(lunarSolar:bool):
        b_.PrependBoolSlot(22, lunarSolar, 0)
        return this
    def add_solidEarthTides(solidEarthTides:bool):
        b_.PrependBoolSlot(23, solidEarthTides, 0)
        return this
    def add_bDot(bDot:float):
        b_.PrependFloat64Slot(24, bDot, 0.0)
        return this
    def add_edr(edr:float):
        b_.PrependFloat64Slot(25, edr, 0.0)
        return this
    def add_interpolation(interpolation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, interpolation)
        return this
    def add_interpolationDegree(interpolationDegree:int):
        b_.PrependInt32Slot(27, interpolationDegree, 0)
        return this
    def add_filename(filename:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, filename)
        return this
    def add_comments(comments:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, comments)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, description)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, descriptor)
        return this
    def add_referenceFrame(referenceFrame:EphemerisSet_Abridged_referenceFrame_Enum):
        b_.PrependInt8Slot(32, referenceFrame, 0)
        return this
    def add_covReferenceFrame(covReferenceFrame:EphemerisSet_Abridged_covReferenceFrame_Enum):
        b_.PrependInt8Slot(33, covReferenceFrame, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, origin)
        return this
    def add_dataMode(dataMode:EphemerisSet_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(38, dataMode, 0)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(39, satNo, 0)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, transactionId)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, origNetwork)
        return this
    def end():
        return b_.EndObject()

def EphemerisSet_AbridgedStartIdManeuversVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def EphemerisSet_AbridgedCreateIdManeuversVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

