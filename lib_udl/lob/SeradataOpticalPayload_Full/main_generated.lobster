// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SeradataOpticalPayload_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SeradataOpticalPayload_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SeradataOpticalPayload_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SeradataOpticalPayload_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SeradataOpticalPayload_Full_dataMode_Enum_EXERCISE = 3

class SeradataOpticalPayload_Full

/// /// Details for an optical payload from  Seradata.
class SeradataOpticalPayload_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SERADATAOPTICALPAYLOAD-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    /// Example: /// Example: spacecraftId
    /// Constraints: Minimum length = 1, Maximum length = 36
    def spacecraftId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// UUID of the Sensor record.
    /// Example: /// Example: idSensor
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Hosted for company/Organization Id.
    /// Example: /// Example: hostedForCompanyOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def hostedForCompanyOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Manufacturer Organization Id.
    /// Example: /// Example: manufacturerOrgId
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
    /// Example: /// Example: Infrared
    /// Constraints: Minimum length = 0, Maximum length = 50
    def imagingPayloadCategory() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
    /// Example: /// Example: TOURNESOL
    /// Constraints: Minimum length = 0, Maximum length = 50
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
    /// Example: /// Example: Green
    /// Constraints: Minimum length = 0, Maximum length = 20
    def spectralBand() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Frequency limit for this payload, e.g. 0.51 - 0.59.
    /// Example: /// Example: 0.51
    /// Constraints: Minimum length = 0, Maximum length = 50
    def spectralFrequencyLimits() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Number of film return canisters.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def numberOfFilmReturnCanisters() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// Best resolution.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def bestResolution() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Swath width in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def swathWidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Recorder size.
    /// Example: /// Example: 1024
    /// Constraints: Minimum length = 0, Maximum length = 50
    def recorderSize() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Field of view of this radar in kilometers.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def fieldOfView() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Field of regard of this radar in degrees.
    /// Example: /// Example: 1.23
    /// Constraints: No constraints specified.
    def fieldOfRegard() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Point method for this radar, e.g. Spacecraft.
    /// Example: /// Example: Spacecraft
    /// Constraints: Minimum length = 0, Maximum length = 50
    def pointingMethod() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Ground Station info for this payload.
    /// Example: /// Example: groundStations
    /// Constraints: Minimum length = 0, Maximum length = 256
    def groundStations() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Ground Station Locations for this payload.
    /// Example: /// Example: groundStationLocations
    /// Constraints: Minimum length = 0, Maximum length = 128
    def groundStationLocations() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Payload notes.
    /// Example: /// Example: Sample Notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SeradataOpticalPayload_Full_dataMode_Enum:
        return SeradataOpticalPayload_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 58, 0))

def GetRootAsSeradataOpticalPayload_Full(buf:string): return SeradataOpticalPayload_Full { buf, flatbuffers.indirect(buf, 0) }

struct SeradataOpticalPayload_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(28)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_spacecraftId(spacecraftId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, spacecraftId)
        return this
    def add_idSensor(idSensor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idSensor)
        return this
    def add_hostedForCompanyOrgId(hostedForCompanyOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, hostedForCompanyOrgId)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, manufacturerOrgId)
        return this
    def add_imagingPayloadCategory(imagingPayloadCategory:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, imagingPayloadCategory)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, name)
        return this
    def add_spectralBand(spectralBand:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, spectralBand)
        return this
    def add_spectralFrequencyLimits(spectralFrequencyLimits:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, spectralFrequencyLimits)
        return this
    def add_numberOfFilmReturnCanisters(numberOfFilmReturnCanisters:int):
        b_.PrependInt32Slot(10, numberOfFilmReturnCanisters, 0)
        return this
    def add_bestResolution(bestResolution:float):
        b_.PrependFloat64Slot(11, bestResolution, 0.0)
        return this
    def add_swathWidth(swathWidth:float):
        b_.PrependFloat64Slot(12, swathWidth, 0.0)
        return this
    def add_recorderSize(recorderSize:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, recorderSize)
        return this
    def add_fieldOfView(fieldOfView:float):
        b_.PrependFloat64Slot(14, fieldOfView, 0.0)
        return this
    def add_fieldOfRegard(fieldOfRegard:float):
        b_.PrependFloat64Slot(15, fieldOfRegard, 0.0)
        return this
    def add_pointingMethod(pointingMethod:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, pointingMethod)
        return this
    def add_groundStations(groundStations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, groundStations)
        return this
    def add_groundStationLocations(groundStationLocations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, groundStationLocations)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, origNetwork)
        return this
    def add_dataMode(dataMode:SeradataOpticalPayload_Full_dataMode_Enum):
        b_.PrependInt8Slot(27, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

