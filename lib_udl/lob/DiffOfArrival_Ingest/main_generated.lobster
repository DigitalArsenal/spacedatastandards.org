// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum DiffOfArrival_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    DiffOfArrival_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    DiffOfArrival_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    DiffOfArrival_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    DiffOfArrival_Ingest_dataMode_Enum_EXERCISE = 3

class DiffOfArrival_Ingest

/// /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
class DiffOfArrival_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: DIFFOFARRIVAL-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Ob detection time in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def obTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Unique identifier of the target on-orbit object, if correlated.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Sensor ID of the primary/1st sensor used for this measurement.
    /// Example: /// Example: SENSOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor1() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Sensor ID of the secondary/2nd sensor used for this measurement.
    /// Example: /// Example: SENSOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSensor2() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Catalog number of the target on-orbit object.
    /// Example: /// Example: 25544
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Optional identifier to indicate the specific tasking which produced this observation.
    /// Example: /// Example: TASK-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def taskId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR1-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId1() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    /// Example: /// Example: ORIGSENSOR2-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origSensorId2() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def uct() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 26, 0))
    /// The signal arrival delay relative to sensor 1 in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def sensor1Delay() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// The signal arrival delay relative to sensor 2 in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def sensor2Delay() -> float:
        return flatbuffers.field_float64(buf_, pos_, 30, 0.0)
    /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 45.1
    /// Constraints: No constraints specified.
    def senlat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 120.1
    /// Constraints: No constraints specified.
    def senlon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def senalt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def sen2lat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def sen2lon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def sen2alt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// Center frequency of the collect in Hz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def frequency() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Bandwidth of the signal in Hz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def bandwidth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def deltaRange() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// One sigma uncertainty in delta range, in km.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def deltaRangeUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def deltaRangeRate() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// One sigma uncertainty in the delta range rate, in km/sec.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def deltaRangeRateUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Signal to noise ratio, in dB.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def snr() -> float:
        return flatbuffers.field_float64(buf_, pos_, 56, 0.0)
    /// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def tdoa() -> float:
        return flatbuffers.field_float64(buf_, pos_, 58, 0.0)
    /// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def tdoaUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def fdoa() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def fdoaUnc() -> float:
        return flatbuffers.field_float64(buf_, pos_, 64, 0.0)
    /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    /// Example: /// Example: SURVEY
    /// Constraints: Minimum length = 0, Maximum length = 32
    def collectionMode() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    /// Example: /// Example: No example provided.
    /// Constraints: Minimum length = 0, Maximum length = 256
    def rawFileURI() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> DiffOfArrival_Ingest_dataMode_Enum:
        return DiffOfArrival_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 72, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 74) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 74)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Optional source-provided and searchable metadata or descriptor of the data.
    /// Example: /// Example: Example descriptor
    /// Constraints: Minimum length = 0, Maximum length = 64
    def descriptor() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    /// Example: /// Example: TRANSACTION-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def transactionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)

def GetRootAsDiffOfArrival_Ingest(buf:string): return DiffOfArrival_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct DiffOfArrival_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(43)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_obTime(obTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, obTime)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idOnOrbit)
        return this
    def add_idSensor1(idSensor1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idSensor1)
        return this
    def add_idSensor2(idSensor2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idSensor2)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(6, satNo, 0)
        return this
    def add_taskId(taskId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, taskId)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, origObjectId)
        return this
    def add_origSensorId1(origSensorId1:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, origSensorId1)
        return this
    def add_origSensorId2(origSensorId2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, origSensorId2)
        return this
    def add_uct(uct:bool):
        b_.PrependBoolSlot(11, uct, 0)
        return this
    def add_sensor1Delay(sensor1Delay:float):
        b_.PrependFloat64Slot(12, sensor1Delay, 0.0)
        return this
    def add_sensor2Delay(sensor2Delay:float):
        b_.PrependFloat64Slot(13, sensor2Delay, 0.0)
        return this
    def add_senlat(senlat:float):
        b_.PrependFloat64Slot(14, senlat, 0.0)
        return this
    def add_senlon(senlon:float):
        b_.PrependFloat64Slot(15, senlon, 0.0)
        return this
    def add_senalt(senalt:float):
        b_.PrependFloat64Slot(16, senalt, 0.0)
        return this
    def add_sen2lat(sen2lat:float):
        b_.PrependFloat64Slot(17, sen2lat, 0.0)
        return this
    def add_sen2lon(sen2lon:float):
        b_.PrependFloat64Slot(18, sen2lon, 0.0)
        return this
    def add_sen2alt(sen2alt:float):
        b_.PrependFloat64Slot(19, sen2alt, 0.0)
        return this
    def add_frequency(frequency:float):
        b_.PrependFloat64Slot(20, frequency, 0.0)
        return this
    def add_bandwidth(bandwidth:float):
        b_.PrependFloat64Slot(21, bandwidth, 0.0)
        return this
    def add_deltaRange(deltaRange:float):
        b_.PrependFloat64Slot(22, deltaRange, 0.0)
        return this
    def add_deltaRangeUnc(deltaRangeUnc:float):
        b_.PrependFloat64Slot(23, deltaRangeUnc, 0.0)
        return this
    def add_deltaRangeRate(deltaRangeRate:float):
        b_.PrependFloat64Slot(24, deltaRangeRate, 0.0)
        return this
    def add_deltaRangeRateUnc(deltaRangeRateUnc:float):
        b_.PrependFloat64Slot(25, deltaRangeRateUnc, 0.0)
        return this
    def add_snr(snr:float):
        b_.PrependFloat64Slot(26, snr, 0.0)
        return this
    def add_tdoa(tdoa:float):
        b_.PrependFloat64Slot(27, tdoa, 0.0)
        return this
    def add_tdoaUnc(tdoaUnc:float):
        b_.PrependFloat64Slot(28, tdoaUnc, 0.0)
        return this
    def add_fdoa(fdoa:float):
        b_.PrependFloat64Slot(29, fdoa, 0.0)
        return this
    def add_fdoaUnc(fdoaUnc:float):
        b_.PrependFloat64Slot(30, fdoaUnc, 0.0)
        return this
    def add_collectionMode(collectionMode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, collectionMode)
        return this
    def add_rawFileURI(rawFileURI:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, rawFileURI)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, source)
        return this
    def add_dataMode(dataMode:DiffOfArrival_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(34, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, tags)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, origin)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, createdBy)
        return this
    def add_descriptor(descriptor:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, descriptor)
        return this
    def add_transactionId(transactionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, transactionId)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, sourceDL)
        return this
    def end():
        return b_.EndObject()

def DiffOfArrival_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DiffOfArrival_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

