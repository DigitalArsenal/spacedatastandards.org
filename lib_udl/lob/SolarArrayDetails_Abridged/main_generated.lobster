// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum SolarArrayDetails_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    SolarArrayDetails_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    SolarArrayDetails_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    SolarArrayDetails_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    SolarArrayDetails_Abridged_dataMode_Enum_EXERCISE = 3

class SolarArrayDetails_Abridged

/// /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
class SolarArrayDetails_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: SOLARARRAYDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Unique identifier of the parent SolarArray.
    /// Example: /// Example: SOLARARRAY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idSolarArray() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of solar array (e.g. U Shaped).
    /// Example: /// Example: U Shaped
    /// Constraints: Minimum length = 0, Maximum length = 64
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Solar array technology (e.g. Ga-As).
    /// Example: /// Example: Ga-As
    /// Constraints: Minimum length = 0, Maximum length = 64
    def technology() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Solar array junction technology (e.g. Triple).
    /// Example: /// Example: Triple
    /// Constraints: Minimum length = 0, Maximum length = 64
    def junctionTechnology() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Unique identifier of the organization that manufactures the solar array.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Solar Array span in meters.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def span() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Solar Array area in square meters.
    /// Example: /// Example: 123.4
    /// Constraints: No constraints specified.
    def area() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Solar array description/notes.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 2147483647
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> SolarArrayDetails_Abridged_dataMode_Enum:
        return SolarArrayDetails_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 34, 0))

def GetRootAsSolarArrayDetails_Abridged(buf:string): return SolarArrayDetails_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct SolarArrayDetails_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(16)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idSolarArray(idSolarArray:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idSolarArray)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, type)
        return this
    def add_technology(technology:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, technology)
        return this
    def add_junctionTechnology(junctionTechnology:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, junctionTechnology)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, manufacturerOrgId)
        return this
    def add_span(span:float):
        b_.PrependFloat64Slot(7, span, 0.0)
        return this
    def add_area(area:float):
        b_.PrependFloat64Slot(8, area, 0.0)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, description)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, origNetwork)
        return this
    def add_dataMode(dataMode:SolarArrayDetails_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(15, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

