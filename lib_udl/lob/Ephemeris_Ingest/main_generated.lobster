// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Ephemeris_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Ephemeris_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Ephemeris_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Ephemeris_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Ephemeris_Ingest_dataMode_Enum_EXERCISE = 3

class Ephemeris_Ingest

/// /// An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).
class Ephemeris_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: EPHEMERIS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.
    /// Example: /// Example: ES-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def esId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Time associated with the Ephemeris Point, in ISO8601 UTC format.
    /// Example: /// Example: 2018-01-01T16:00:00.123456Z
    /// Constraints: No constraints specified.
    def ts() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def xpos() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def ypos() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def zpos() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    /// Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def xvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def yvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def zvel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def xaccel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def yaccel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    /// Example: /// Example: 1.1
    /// Constraints: No constraints specified.
    def zaccel() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.
    /// The array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
    /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
    /// x&nbsp;&nbsp;&nbsp;&nbsp;1
    /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
    /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
    /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
    /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
    /// The array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def cov(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 30) + i * 4)
    def cov_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 30)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Ephemeris_Ingest_dataMode_Enum:
        return Ephemeris_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 38, 0))
    /// Unique identifier of the on-orbit satellite object.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)

def GetRootAsEphemeris_Ingest(buf:string): return Ephemeris_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Ephemeris_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(21)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_esId(esId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, esId)
        return this
    def add_ts(ts:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, ts)
        return this
    def add_xpos(xpos:float):
        b_.PrependFloat64Slot(4, xpos, 0.0)
        return this
    def add_ypos(ypos:float):
        b_.PrependFloat64Slot(5, ypos, 0.0)
        return this
    def add_zpos(zpos:float):
        b_.PrependFloat64Slot(6, zpos, 0.0)
        return this
    def add_xvel(xvel:float):
        b_.PrependFloat64Slot(7, xvel, 0.0)
        return this
    def add_yvel(yvel:float):
        b_.PrependFloat64Slot(8, yvel, 0.0)
        return this
    def add_zvel(zvel:float):
        b_.PrependFloat64Slot(9, zvel, 0.0)
        return this
    def add_xaccel(xaccel:float):
        b_.PrependFloat64Slot(10, xaccel, 0.0)
        return this
    def add_yaccel(yaccel:float):
        b_.PrependFloat64Slot(11, yaccel, 0.0)
        return this
    def add_zaccel(zaccel:float):
        b_.PrependFloat64Slot(12, zaccel, 0.0)
        return this
    def add_cov(cov:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, cov)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, source)
        return this
    def add_dataMode(dataMode:Ephemeris_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(17, dataMode, 0)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, idOnOrbit)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, origObjectId)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, origin)
        return this
    def end():
        return b_.EndObject()

def Ephemeris_IngestStartCovVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Ephemeris_IngestCreateCovVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

