// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum RFGeoLocation_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    RFGeoLocation_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    RFGeoLocation_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    RFGeoLocation_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    RFGeoLocation_Ingest_dataMode_Enum_EXERCISE = 3

class RFGeoLocation_Ingest

/// /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
class RFGeoLocation_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The order identifier for this RF Geo Location data set.
    /// Example: /// Example: 155240
    /// Constraints: Minimum length = 1, Maximum length = 36
    def orderId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T23:06:18.123456Z
    /// Constraints: No constraints specified.
    def createdTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T21:16:58.123456Z
    /// Constraints: No constraints specified.
    def receivedTs() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T21:12:12.123456Z
    /// Constraints: No constraints specified.
    def startTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
    /// Example: /// Example: 2024-05-31T21:16:15.123456Z
    /// Constraints: No constraints specified.
    def endTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
    /// Example: /// Example: HawkEye360-7
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Satellite/catalog number of the target on-orbit object.
    /// Example: /// Example: 101
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// The name of the satellite constellation.
    /// Example: /// Example: HawkEye360
    /// Constraints: Minimum length = 0, Maximum length = 36
    def constellation() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// The name of the signal of interest.
    /// Example: /// Example: GPS
    /// Constraints: Minimum length = 0, Maximum length = 36
    def signalOfInterest() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    /// Example: /// Example: RFEMITTER-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idRFEmitter() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
    /// Example: /// Example: ORIGRFEMITTER-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origRFEmitterId() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The count of single-burst observations used for this geolocation observation.
    /// Example: /// Example: 17
    /// Constraints: No constraints specified.
    def numBursts() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// The minimum detected frequency in megahertz.
    /// Example: /// Example: 1575.42
    /// Constraints: No constraints specified.
    def minFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 34, 0.0)
    /// The maximum detected frequency in megahertz.
    /// Example: /// Example: 1575.42
    /// Constraints: No constraints specified.
    def maxFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 36, 0.0)
    /// The detected signal frequency in megahertz.
    /// Example: /// Example: 1575.42
    /// Constraints: No constraints specified.
    def centerFreq() -> float:
        return flatbuffers.field_float64(buf_, pos_, 38, 0.0)
    /// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
    /// Example: /// Example: 41.172
    /// Constraints: No constraints specified.
    def detectLat() -> float:
        return flatbuffers.field_float64(buf_, pos_, 40, 0.0)
    /// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    /// Example: /// Example: 37.019
    /// Constraints: No constraints specified.
    def detectLon() -> float:
        return flatbuffers.field_float64(buf_, pos_, 42, 0.0)
    /// The altitude relative to WGS-84 ellipsoid, in meters.
    /// Example: /// Example: 123.456
    /// Constraints: No constraints specified.
    def detectAlt() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
    /// Example: /// Example: 9435.896
    /// Constraints: No constraints specified.
    def confSemiMajor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
    /// Example: /// Example: 2751.929
    /// Constraints: No constraints specified.
    def confSemiMinor() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
    /// Example: /// Example: 89.852
    /// Constraints: No constraints specified.
    def confOrientation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
    /// Example: /// Example: 81577480.056
    /// Constraints: No constraints specified.
    def confArea() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Type of region as projected on the ground.
    /// Example: /// Example: MultiPolygon
    /// Constraints: Minimum length = 0, Maximum length = 128
    def atype() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    /// Constraints: No constraints specified.
    def agjson() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def atext() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
    /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    /// Constraints: No constraints specified.
    def area() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Number of dimensions of the geometry depicted by region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def andims() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// Geographical spatial_ref_sys for region.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def asrid() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)
    /// Optional external identifier referencing the entity used in the calculation of the geolocation.
    /// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
    /// Constraints: Minimum length = 0, Maximum length = 36
    def passGroupId() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// The RFGeo algorithm type and version used in geolocation calculations.
    /// Example: /// Example: v1.0-3-gps_nb_3ball
    /// Constraints: Minimum length = 0, Maximum length = 36
    def algVersion() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 780180925
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalId() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['TAG1', 'TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 72) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 72)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 78)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> RFGeoLocation_Ingest_dataMode_Enum:
        return RFGeoLocation_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 86, 0))

def GetRootAsRFGeoLocation_Ingest(buf:string): return RFGeoLocation_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct RFGeoLocation_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(42)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_orderId(orderId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, orderId)
        return this
    def add_createdTs(createdTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, createdTs)
        return this
    def add_receivedTs(receivedTs:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, receivedTs)
        return this
    def add_startTime(startTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, startTime)
        return this
    def add_endTime(endTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, endTime)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(8, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, origObjectId)
        return this
    def add_constellation(constellation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, constellation)
        return this
    def add_signalOfInterest(signalOfInterest:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, signalOfInterest)
        return this
    def add_idRFEmitter(idRFEmitter:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, idRFEmitter)
        return this
    def add_origRFEmitterId(origRFEmitterId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origRFEmitterId)
        return this
    def add_numBursts(numBursts:int):
        b_.PrependInt32Slot(14, numBursts, 0)
        return this
    def add_minFreq(minFreq:float):
        b_.PrependFloat64Slot(15, minFreq, 0.0)
        return this
    def add_maxFreq(maxFreq:float):
        b_.PrependFloat64Slot(16, maxFreq, 0.0)
        return this
    def add_centerFreq(centerFreq:float):
        b_.PrependFloat64Slot(17, centerFreq, 0.0)
        return this
    def add_detectLat(detectLat:float):
        b_.PrependFloat64Slot(18, detectLat, 0.0)
        return this
    def add_detectLon(detectLon:float):
        b_.PrependFloat64Slot(19, detectLon, 0.0)
        return this
    def add_detectAlt(detectAlt:float):
        b_.PrependFloat64Slot(20, detectAlt, 0.0)
        return this
    def add_confSemiMajor(confSemiMajor:float):
        b_.PrependFloat64Slot(21, confSemiMajor, 0.0)
        return this
    def add_confSemiMinor(confSemiMinor:float):
        b_.PrependFloat64Slot(22, confSemiMinor, 0.0)
        return this
    def add_confOrientation(confOrientation:float):
        b_.PrependFloat64Slot(23, confOrientation, 0.0)
        return this
    def add_confArea(confArea:float):
        b_.PrependFloat64Slot(24, confArea, 0.0)
        return this
    def add_atype(atype:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, atype)
        return this
    def add_agjson(agjson:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, agjson)
        return this
    def add_atext(atext:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, atext)
        return this
    def add_area(area:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, area)
        return this
    def add_andims(andims:int):
        b_.PrependInt32Slot(29, andims, 0)
        return this
    def add_asrid(asrid:int):
        b_.PrependInt32Slot(30, asrid, 0)
        return this
    def add_passGroupId(passGroupId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, passGroupId)
        return this
    def add_algVersion(algVersion:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, algVersion)
        return this
    def add_externalId(externalId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, externalId)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, tags)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, origNetwork)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, sourceDL)
        return this
    def add_dataMode(dataMode:RFGeoLocation_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(41, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def RFGeoLocation_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def RFGeoLocation_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

