// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum AirTransportMission_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    AirTransportMission_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    AirTransportMission_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    AirTransportMission_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    AirTransportMission_Full_dataMode_Enum_EXERCISE = 3

class AirTransportMission_Full

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
class AirTransportMission_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The mission identifier provided by the originating source.
    /// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
    /// Constraints: Minimum length = 0, Maximum length = 36
    def origMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
    /// Example: /// Example: AJM7939B1123
    /// Constraints: Minimum length = 0, Maximum length = 36
    def amcMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Global Decision Support System (GDSS) mission unique identifier.
    /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    /// Constraints: Minimum length = 0, Maximum length = 36
    def gdssMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
    /// Constraints: Minimum length = 0, Maximum length = 36
    def prevMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: AJM7939B1122
    /// Constraints: Minimum length = 0, Maximum length = 36
    def prevAMCMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
    /// Constraints: Minimum length = 0, Maximum length = 36
    def nextMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    /// Example: /// Example: AJM7939B1124
    /// Constraints: Minimum length = 0, Maximum length = 36
    def nextAMCMissionId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// A description of this mission's objective.
    /// Example: /// Example: Deliver water to island X.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def objective() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
    /// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def purpose() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Highest Joint Chiefs of Staff priority of this mission.
    /// Example: /// Example: 1A3
    /// Constraints: Minimum length = 3, Maximum length = 3
    def jcsPriority() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Flag indicating this is a close watch mission.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def cw() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 28, 0))
    /// The type of mission (e.g. SAAM, CHNL, etc.).
    /// Example: /// Example: SAAM
    /// Constraints: Minimum length = 0, Maximum length = 32
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
    /// Example: /// Example: KFAY
    /// Constraints: Minimum length = 4, Maximum length = 4
    def firstPickUp() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
    /// Example: /// Example: PGUA
    /// Constraints: Minimum length = 4, Maximum length = 4
    def lastDropOff() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Mission alias.
    /// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
    /// Constraints: Minimum length = 0, Maximum length = 48
    def alias() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The call sign for this mission.
    /// Example: /// Example: RCH123
    /// Constraints: Minimum length = 0, Maximum length = 32
    def callSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// The name of the operation that this mission supports.
    /// Example: /// Example: Golden Eye
    /// Constraints: Minimum length = 0, Maximum length = 100
    def operation() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Numbered Air Force (NAF) organization that owns the mission.
    /// Example: /// Example: 18AF
    /// Constraints: Minimum length = 0, Maximum length = 100
    def naf() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// The unit the mission is allocated to.
    /// Example: /// Example: 437 AEW
    /// Constraints: Minimum length = 0, Maximum length = 256
    def allocatedUnit() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
    /// Example: /// Example: MIXED
    /// Constraints: Minimum length = 0, Maximum length = 32
    def loadCategoryType() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Current state of the mission.
    /// Example: /// Example: EXECUTION
    /// Constraints: Minimum length = 0, Maximum length = 32
    def state() -> string:
        return flatbuffers.field_string(buf_, pos_, 48)
    /// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
    /// Example: /// Example: -90.12
    /// Constraints: No constraints specified.
    def sourceSysDeviation() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
    /// Example: /// Example: 1083034
    /// Constraints: Minimum length = 0, Maximum length = 64
    def apacsId() -> string:
        return flatbuffers.field_string(buf_, pos_, 52)
    /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    /// Example: /// Example: G2-182402-AB
    /// Constraints: Minimum length = 0, Maximum length = 256
    def dipWorksheetName() -> string:
        return flatbuffers.field_string(buf_, pos_, 54)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 60)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 62)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 36
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> AirTransportMission_Full_dataMode_Enum:
        return AirTransportMission_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 70, 0))
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def requirements(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 74) + i * 4)
    def requirements_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 74)
    /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def remarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 76) + i * 4)
    def remarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 76)
    /// Collection of Hazardous Material information associated with this Air Transport Mission.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def hazMat(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 78) + i * 4)
    def hazMat_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 78)
    /// The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def aircraftSorties(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 80) + i * 4)
    def aircraftSorties_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 80)

def GetRootAsAirTransportMission_Full(buf:string): return AirTransportMission_Full { buf, flatbuffers.indirect(buf, 0) }

struct AirTransportMission_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(39)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_origMissionId(origMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, origMissionId)
        return this
    def add_amcMissionId(amcMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, amcMissionId)
        return this
    def add_gdssMissionId(gdssMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, gdssMissionId)
        return this
    def add_prevMissionId(prevMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, prevMissionId)
        return this
    def add_prevAMCMissionId(prevAMCMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, prevAMCMissionId)
        return this
    def add_nextMissionId(nextMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, nextMissionId)
        return this
    def add_nextAMCMissionId(nextAMCMissionId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, nextAMCMissionId)
        return this
    def add_objective(objective:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, objective)
        return this
    def add_purpose(purpose:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, purpose)
        return this
    def add_jcsPriority(jcsPriority:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, jcsPriority)
        return this
    def add_cw(cw:bool):
        b_.PrependBoolSlot(12, cw, 0)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, type)
        return this
    def add_firstPickUp(firstPickUp:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, firstPickUp)
        return this
    def add_lastDropOff(lastDropOff:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, lastDropOff)
        return this
    def add_alias(alias:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, alias)
        return this
    def add_callSign(callSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, callSign)
        return this
    def add_operation(operation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, operation)
        return this
    def add_naf(naf:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, naf)
        return this
    def add_allocatedUnit(allocatedUnit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, allocatedUnit)
        return this
    def add_loadCategoryType(loadCategoryType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, loadCategoryType)
        return this
    def add_state(state:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(22, state)
        return this
    def add_sourceSysDeviation(sourceSysDeviation:float):
        b_.PrependFloat64Slot(23, sourceSysDeviation, 0.0)
        return this
    def add_apacsId(apacsId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(24, apacsId)
        return this
    def add_dipWorksheetName(dipWorksheetName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(25, dipWorksheetName)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(28, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(29, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, origin)
        return this
    def add_dataMode(dataMode:AirTransportMission_Full_dataMode_Enum):
        b_.PrependInt8Slot(33, dataMode, 0)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, origNetwork)
        return this
    def add_requirements(requirements:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, requirements)
        return this
    def add_remarks(remarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, remarks)
        return this
    def add_hazMat(hazMat:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(37, hazMat)
        return this
    def add_aircraftSorties(aircraftSorties:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, aircraftSorties)
        return this
    def end():
        return b_.EndObject()

def AirTransportMission_FullStartRequirementsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTransportMission_FullCreateRequirementsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirTransportMission_FullStartRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTransportMission_FullCreateRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirTransportMission_FullStartHazMatVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTransportMission_FullCreateHazMatVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def AirTransportMission_FullStartAircraftSortiesVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def AirTransportMission_FullCreateAircraftSortiesVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

