// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class DiplomaticClearanceDetails_Ingest

/// /// Collection of diplomatic clearance details.
class DiplomaticClearanceDetails_Ingest : flatbuffers.handle
    /// Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
    /// Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSortie() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifies the Itinerary point of a sortie where an air event occurs.
    /// Example: /// Example: 825
    /// Constraints: No constraints specified.
    def legNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 6, 0)
    /// The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    /// Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
    /// Constraints: Minimum length = 0, Maximum length = 4000
    def routeString() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def validStartTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def validEndTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Identifier of this diplomatic clearance issued by the host country.
    /// Example: /// Example: MFMW225662GHQ
    /// Constraints: Minimum length = 0, Maximum length = 32
    def clearanceId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalClearanceId() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The call sign of the sortie cleared with this diplomatic clearance.
    /// Example: /// Example: FALCN09
    /// Constraints: Minimum length = 0, Maximum length = 24
    def clearedCallSign() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def sequenceNum() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    /// Example: /// Example: NL
    /// Constraints: Minimum length = 0, Maximum length = 4
    def countryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    /// Example: /// Example: IZ
    /// Constraints: Minimum length = 0, Maximum length = 16
    def altCountryCode() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Name of the country issuing this diplomatic clearance.
    /// Example: /// Example: NETHERLANDS
    /// Constraints: Minimum length = 0, Maximum length = 50
    def countryName() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Description of when this diplomatic clearance is valid.
    /// Example: /// Example: CY2023
    /// Constraints: Minimum length = 0, Maximum length = 256
    def validDesc() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Remarks concerning the valid diplomatic clearance window.
    /// Example: /// Example: Period remarks
    /// Constraints: Minimum length = 0, Maximum length = 256
    def windowRemark() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The navigation point name where the aircraft must enter the country.
    /// Example: /// Example: LOMOS
    /// Constraints: Minimum length = 0, Maximum length = 38
    def entryPoint() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def entryNET() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The navigation point name where the aircraft must exit the country.
    /// Example: /// Example: BUDOP
    /// Constraints: Minimum length = 0, Maximum length = 38
    def exitPoint() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def exitNLT() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Flag indicating whether the clearance request requires ICAO specific information.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def reqICAO() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 40, 0))
    /// The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
    /// Example: /// Example: O
    /// Constraints: Minimum length = 0, Maximum length = 1
    def action() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Indicates the current status of the diplomatic clearance request.
    /// Example: /// Example: IN WORK
    /// Constraints: Minimum length = 0, Maximum length = 16
    def status() -> string:
        return flatbuffers.field_string(buf_, pos_, 44)
    /// The diplomatic clearance profile name used within clearance management systems.
    /// Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
    /// Constraints: Minimum length = 0, Maximum length = 100
    def profile() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Flag indicating whether entry/exit points are required for clearances.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def reqPoint() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 48, 0))
    /// Remarks concerning this diplomatic clearance.
    /// Example: /// Example: Clearance remarks
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def clearanceRemark() -> string:
        return flatbuffers.field_string(buf_, pos_, 50)

def GetRootAsDiplomaticClearanceDetails_Ingest(buf:string): return DiplomaticClearanceDetails_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct DiplomaticClearanceDetails_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(24)
        return this
    def add_idSortie(idSortie:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, idSortie)
        return this
    def add_legNum(legNum:int):
        b_.PrependInt32Slot(1, legNum, 0)
        return this
    def add_routeString(routeString:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, routeString)
        return this
    def add_validStartTime(validStartTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, validStartTime)
        return this
    def add_validEndTime(validEndTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, validEndTime)
        return this
    def add_clearanceId(clearanceId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, clearanceId)
        return this
    def add_externalClearanceId(externalClearanceId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, externalClearanceId)
        return this
    def add_clearedCallSign(clearedCallSign:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, clearedCallSign)
        return this
    def add_sequenceNum(sequenceNum:int):
        b_.PrependInt32Slot(8, sequenceNum, 0)
        return this
    def add_countryCode(countryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, countryCode)
        return this
    def add_altCountryCode(altCountryCode:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, altCountryCode)
        return this
    def add_countryName(countryName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, countryName)
        return this
    def add_validDesc(validDesc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, validDesc)
        return this
    def add_windowRemark(windowRemark:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, windowRemark)
        return this
    def add_entryPoint(entryPoint:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, entryPoint)
        return this
    def add_entryNET(entryNET:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, entryNET)
        return this
    def add_exitPoint(exitPoint:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, exitPoint)
        return this
    def add_exitNLT(exitNLT:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, exitNLT)
        return this
    def add_reqICAO(reqICAO:bool):
        b_.PrependBoolSlot(18, reqICAO, 0)
        return this
    def add_action(action:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, action)
        return this
    def add_status(status:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(20, status)
        return this
    def add_profile(profile:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, profile)
        return this
    def add_reqPoint(reqPoint:bool):
        b_.PrependBoolSlot(22, reqPoint, 0)
        return this
    def add_clearanceRemark(clearanceRemark:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(23, clearanceRemark)
        return this
    def end():
        return b_.EndObject()

