// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum OnorbitEvent_Abridged_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    OnorbitEvent_Abridged_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    OnorbitEvent_Abridged_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    OnorbitEvent_Abridged_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    OnorbitEvent_Abridged_dataMode_Enum_EXERCISE = 3

class OnorbitEvent_Abridged

/// /// No description available.
class OnorbitEvent_Abridged : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: ONORBITEVENT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The sources or SCG references from which the classification of this data is derived.
    /// Example: /// Example: DERIVED_SOURCE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def derivedFrom() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The declassification date of this data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:02.123Z
    /// Constraints: No constraints specified.
    def declassificationDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Declassification string of this data.
    /// Example: /// Example: DECLASS_STRING
    /// Constraints: Minimum length = 0, Maximum length = 256
    def declassificationString() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the on-orbit object for this event.
    /// Example: /// Example: ONORBIT-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idOnOrbit() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Satellite/Catalog number of the target on-orbit object.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def satNo() -> int:
        return flatbuffers.field_int32(buf_, pos_, 16, 0)
    /// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
    /// Example: /// Example: ORIGOBJECT-ID
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origObjectId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def eventTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Notes/remarks on the validity/accuracy of the eventTime.
    /// Example: /// Example: Notes on validity
    /// Constraints: Minimum length = 0, Maximum length = 128
    def eventTimeNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
    /// Example: /// Example: OPERATORORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def operatorOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
    /// Example: /// Example: OWNERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def ownerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Unique identifier of the organization which leases this on-orbit spacecraft.
    /// Example: /// Example: LESSEEORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def lesseeOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
    /// Example: /// Example: OPERATEDONBEHALFOFORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def operatedOnBehalfOfOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// GEO position longitude at event time if applicable. Negative values are west.
    /// Example: /// Example: 45.23
    /// Constraints: No constraints specified.
    def geoPosition() -> float:
        return flatbuffers.field_float64(buf_, pos_, 32, 0.0)
    /// GEO plane slot of the spacecraft at event time.
    /// Example: /// Example: example_slot
    /// Constraints: Minimum length = 0, Maximum length = 16
    def planeSlot() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// GEO slot plane number/designator of the spacecraft at event time.
    /// Example: /// Example: PL_1
    /// Constraints: Minimum length = 0, Maximum length = 4
    def planeNumber() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
    /// Example: /// Example: Stable
    /// Constraints: Minimum length = 0, Maximum length = 128
    def positionStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Maximum validity time of the event.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def untilTime() -> string:
        return flatbuffers.field_string(buf_, pos_, 40)
    /// Date time of official loss of the spacecraft.
    /// Example: /// Example: 2021-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def officialLossDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 42)
    /// Net amount of the insurance claim for the event, in USD.
    /// Example: /// Example: 10000.23
    /// Constraints: No constraints specified.
    def netAmount() -> float:
        return flatbuffers.field_float64(buf_, pos_, 44, 0.0)
    /// Underlying cause of the event.
    /// Example: /// Example: CAUSE_EXAMPLE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def underlyingCause() -> string:
        return flatbuffers.field_string(buf_, pos_, 46)
    /// Spacecraft capability loss incurred, as a fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def capabilityLoss() -> float:
        return flatbuffers.field_float64(buf_, pos_, 48, 0.0)
    /// Spacecraft capacity loss incurred, as a fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def capacityLoss() -> float:
        return flatbuffers.field_float64(buf_, pos_, 50, 0.0)
    /// Insurance loss incurred, as a fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def insuranceLoss() -> float:
        return flatbuffers.field_float64(buf_, pos_, 52, 0.0)
    /// Insurance loss incurred by 3rd party insurance, in USD.
    /// Example: /// Example: 10000.23
    /// Constraints: No constraints specified.
    def thirdPartyInsuranceLoss() -> float:
        return flatbuffers.field_float64(buf_, pos_, 54, 0.0)
    /// Number of humans injured in the event.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def injured() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// Number of humans killed in the event.
    /// Example: /// Example: 23
    /// Constraints: No constraints specified.
    def killed() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// Spacecraft life lost due to the event as a percent/fraction of 1.
    /// Example: /// Example: 0.5
    /// Constraints: No constraints specified.
    def lifeLost() -> float:
        return flatbuffers.field_float64(buf_, pos_, 60, 0.0)
    /// Spacecraft age at the event in years.
    /// Example: /// Example: 5.23
    /// Constraints: No constraints specified.
    def ageAtEvent() -> float:
        return flatbuffers.field_float64(buf_, pos_, 62, 0.0)
    /// Achieved phase of flight prior to the event.
    /// Example: /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    def achievedFlightPhase() -> string:
        return flatbuffers.field_string(buf_, pos_, 64)
    /// Phase of flight during which the event occurred.
    /// Example: /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    def occurrenceFlightPhase() -> string:
        return flatbuffers.field_string(buf_, pos_, 66)
    /// Faulty stage of flight for the event.
    /// Example: /// Example: Phase 2
    /// Constraints: Minimum length = 0, Maximum length = 64
    def stageAtFault() -> string:
        return flatbuffers.field_string(buf_, pos_, 68)
    /// Equipment on the spacecraft which caused the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    def equipmentAtFault() -> string:
        return flatbuffers.field_string(buf_, pos_, 70)
    /// Type of the equipment on the spacecraft which caused the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    def equipmentTypeAtFault() -> string:
        return flatbuffers.field_string(buf_, pos_, 72)
    /// Specific part of the equipment on the spacecraft which caused the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    def equipmentPartAtFault() -> string:
        return flatbuffers.field_string(buf_, pos_, 74)
    /// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
    /// Example: /// Example: Example Equipment
    /// Constraints: Minimum length = 0, Maximum length = 64
    def consequentialEquipmentFailure() -> string:
        return flatbuffers.field_string(buf_, pos_, 76)
    /// Boolean indicating if the spacecraft is inclined.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def inclined() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 78, 0))
    /// Notes/description of the event.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 80)
    /// Additional remarks on the event description.
    /// Example: /// Example: Example remarks
    /// Constraints: Minimum length = 0, Maximum length = 512
    def remarks() -> string:
        return flatbuffers.field_string(buf_, pos_, 82)
    /// Additional insurance notes if the event is an official loss.
    /// Example: /// Example: Insurance notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def insuranceLossNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 84)
    /// Notes on capability loss at the time of event.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def capabilityLossNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 86)
    /// Additional insurance notes on coverages at the time of event.
    /// Example: /// Example: Insurance notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def insuranceCarriedNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 88)
    /// Additional notes on the equipment causing the event/loss.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 512
    def equipmentCausingLossNotes() -> string:
        return flatbuffers.field_string(buf_, pos_, 90)
    /// The type of on-orbit event being reported.
    /// Example: /// Example: Type1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def eventType() -> string:
        return flatbuffers.field_string(buf_, pos_, 92)
    /// The result of the reported event.
    /// Example: /// Example: Example results
    /// Constraints: Minimum length = 0, Maximum length = 128
    def eventResult() -> string:
        return flatbuffers.field_string(buf_, pos_, 94)
    /// The status of the on-orbit object.
    /// Example: /// Example: Status1
    /// Constraints: Minimum length = 0, Maximum length = 128
    def objectStatus() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Description of the satellite orbital position or regime.
    /// Example: /// Example: Example description
    /// Constraints: Minimum length = 0, Maximum length = 128
    def satellitePosition() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> OnorbitEvent_Abridged_dataMode_Enum:
        return OnorbitEvent_Abridged_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 104, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 106)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 108)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 110)

def GetRootAsOnorbitEvent_Abridged(buf:string): return OnorbitEvent_Abridged { buf, flatbuffers.indirect(buf, 0) }

struct OnorbitEvent_AbridgedBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(54)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_derivedFrom(derivedFrom:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, derivedFrom)
        return this
    def add_declassificationDate(declassificationDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, declassificationDate)
        return this
    def add_declassificationString(declassificationString:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, declassificationString)
        return this
    def add_idOnOrbit(idOnOrbit:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idOnOrbit)
        return this
    def add_satNo(satNo:int):
        b_.PrependInt32Slot(6, satNo, 0)
        return this
    def add_origObjectId(origObjectId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, origObjectId)
        return this
    def add_eventTime(eventTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, eventTime)
        return this
    def add_eventTimeNotes(eventTimeNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, eventTimeNotes)
        return this
    def add_operatorOrgId(operatorOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, operatorOrgId)
        return this
    def add_ownerOrgId(ownerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, ownerOrgId)
        return this
    def add_lesseeOrgId(lesseeOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, lesseeOrgId)
        return this
    def add_operatedOnBehalfOfOrgId(operatedOnBehalfOfOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, operatedOnBehalfOfOrgId)
        return this
    def add_geoPosition(geoPosition:float):
        b_.PrependFloat64Slot(14, geoPosition, 0.0)
        return this
    def add_planeSlot(planeSlot:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, planeSlot)
        return this
    def add_planeNumber(planeNumber:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, planeNumber)
        return this
    def add_positionStatus(positionStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, positionStatus)
        return this
    def add_untilTime(untilTime:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(18, untilTime)
        return this
    def add_officialLossDate(officialLossDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(19, officialLossDate)
        return this
    def add_netAmount(netAmount:float):
        b_.PrependFloat64Slot(20, netAmount, 0.0)
        return this
    def add_underlyingCause(underlyingCause:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(21, underlyingCause)
        return this
    def add_capabilityLoss(capabilityLoss:float):
        b_.PrependFloat64Slot(22, capabilityLoss, 0.0)
        return this
    def add_capacityLoss(capacityLoss:float):
        b_.PrependFloat64Slot(23, capacityLoss, 0.0)
        return this
    def add_insuranceLoss(insuranceLoss:float):
        b_.PrependFloat64Slot(24, insuranceLoss, 0.0)
        return this
    def add_thirdPartyInsuranceLoss(thirdPartyInsuranceLoss:float):
        b_.PrependFloat64Slot(25, thirdPartyInsuranceLoss, 0.0)
        return this
    def add_injured(injured:int):
        b_.PrependInt32Slot(26, injured, 0)
        return this
    def add_killed(killed:int):
        b_.PrependInt32Slot(27, killed, 0)
        return this
    def add_lifeLost(lifeLost:float):
        b_.PrependFloat64Slot(28, lifeLost, 0.0)
        return this
    def add_ageAtEvent(ageAtEvent:float):
        b_.PrependFloat64Slot(29, ageAtEvent, 0.0)
        return this
    def add_achievedFlightPhase(achievedFlightPhase:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(30, achievedFlightPhase)
        return this
    def add_occurrenceFlightPhase(occurrenceFlightPhase:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(31, occurrenceFlightPhase)
        return this
    def add_stageAtFault(stageAtFault:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(32, stageAtFault)
        return this
    def add_equipmentAtFault(equipmentAtFault:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(33, equipmentAtFault)
        return this
    def add_equipmentTypeAtFault(equipmentTypeAtFault:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(34, equipmentTypeAtFault)
        return this
    def add_equipmentPartAtFault(equipmentPartAtFault:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(35, equipmentPartAtFault)
        return this
    def add_consequentialEquipmentFailure(consequentialEquipmentFailure:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(36, consequentialEquipmentFailure)
        return this
    def add_inclined(inclined:bool):
        b_.PrependBoolSlot(37, inclined, 0)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(38, description)
        return this
    def add_remarks(remarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(39, remarks)
        return this
    def add_insuranceLossNotes(insuranceLossNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(40, insuranceLossNotes)
        return this
    def add_capabilityLossNotes(capabilityLossNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(41, capabilityLossNotes)
        return this
    def add_insuranceCarriedNotes(insuranceCarriedNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(42, insuranceCarriedNotes)
        return this
    def add_equipmentCausingLossNotes(equipmentCausingLossNotes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(43, equipmentCausingLossNotes)
        return this
    def add_eventType(eventType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(44, eventType)
        return this
    def add_eventResult(eventResult:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(45, eventResult)
        return this
    def add_objectStatus(objectStatus:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, objectStatus)
        return this
    def add_satellitePosition(satellitePosition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, satellitePosition)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, origin)
        return this
    def add_dataMode(dataMode:OnorbitEvent_Abridged_dataMode_Enum):
        b_.PrependInt8Slot(50, dataMode, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(51, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(52, createdBy)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(53, origNetwork)
        return this
    def end():
        return b_.EndObject()

