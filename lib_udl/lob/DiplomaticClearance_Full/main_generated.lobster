// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum DiplomaticClearance_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    DiplomaticClearance_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    DiplomaticClearance_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    DiplomaticClearance_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    DiplomaticClearance_Full_dataMode_Enum_EXERCISE = 3

class DiplomaticClearance_Full

/// /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
class DiplomaticClearance_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
    /// Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Unique identifier of the Mission associated with this diplomatic clearance record.
    /// Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idMission() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    /// Example: /// Example: 990ae849089e3d6cad69655324176bb6
    /// Constraints: Minimum length = 0, Maximum length = 36
    def externalWorksheetId() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    /// Example: /// Example: G2-939911-AC
    /// Constraints: Minimum length = 0, Maximum length = 256
    def dipWorksheetName() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def firstDepDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
    /// Example: /// Example: 2024-01-01T01:01:01.123Z
    /// Constraints: No constraints specified.
    def docDeadline() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
    /// Example: /// Example: 1083034
    /// Constraints: Minimum length = 0, Maximum length = 40
    def apacsId() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Collection of diplomatic clearance details.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def diplomaticClearanceDetails(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 20) + i * 4)
    def diplomaticClearanceDetails_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 20)
    /// Collection of diplomatic clearance remarks.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def diplomaticClearanceRemarks(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 22) + i * 4)
    def diplomaticClearanceRemarks_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 22)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Time the row was updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    /// Example: /// Example: AXE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def sourceDL() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 0, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 38)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> DiplomaticClearance_Full_dataMode_Enum:
        return DiplomaticClearance_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 40, 0))

def GetRootAsDiplomaticClearance_Full(buf:string): return DiplomaticClearance_Full { buf, flatbuffers.indirect(buf, 0) }

struct DiplomaticClearance_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(19)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_idMission(idMission:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, idMission)
        return this
    def add_externalWorksheetId(externalWorksheetId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, externalWorksheetId)
        return this
    def add_dipWorksheetName(dipWorksheetName:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, dipWorksheetName)
        return this
    def add_firstDepDate(firstDepDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, firstDepDate)
        return this
    def add_docDeadline(docDeadline:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, docDeadline)
        return this
    def add_apacsId(apacsId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, apacsId)
        return this
    def add_diplomaticClearanceDetails(diplomaticClearanceDetails:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, diplomaticClearanceDetails)
        return this
    def add_diplomaticClearanceRemarks(diplomaticClearanceRemarks:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, diplomaticClearanceRemarks)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, updatedBy)
        return this
    def add_sourceDL(sourceDL:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, sourceDL)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(17, origNetwork)
        return this
    def add_dataMode(dataMode:DiplomaticClearance_Full_dataMode_Enum):
        b_.PrependInt8Slot(18, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

def DiplomaticClearance_FullStartDiplomaticClearanceDetailsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DiplomaticClearance_FullCreateDiplomaticClearanceDetailsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def DiplomaticClearance_FullStartDiplomaticClearanceRemarksVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def DiplomaticClearance_FullCreateDiplomaticClearanceRemarksVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

