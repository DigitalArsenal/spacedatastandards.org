// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class MtiJobDefinition_Full

/// /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
class MtiJobDefinition_Full : flatbuffers.handle
    /// A platform assigned number identifying the specific request or task to which the specific dwell pertains.
    /// Example: /// Example: 1234567890
    /// Constraints: No constraints specified.
    def j1() -> int:
        return flatbuffers.field_int64(buf_, pos_, 4, 0)
    /// The type of sensor or the platform.
    /// Example: /// Example: TYPE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def j2() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Identifier of the particular variant of the sensor type.
    /// Example: /// Example: J3-ID
    /// Constraints: Minimum length = 0, Maximum length = 8
    def j3() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
    /// Example: /// Example: 3
    /// Constraints: No constraints specified.
    def j4() -> int:
        return flatbuffers.field_int32(buf_, pos_, 10, 0)
    /// Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
    /// Example: /// Example: 1
    /// Constraints: No constraints specified.
    def j5() -> int:
        return flatbuffers.field_int32(buf_, pos_, 12, 0)
    /// North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j6() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    ///  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j7() -> float:
        return flatbuffers.field_float64(buf_, pos_, 16, 0.0)
    ///  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j8() -> float:
        return flatbuffers.field_float64(buf_, pos_, 18, 0.0)
    /// East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j9() -> float:
        return flatbuffers.field_float64(buf_, pos_, 20, 0.0)
    /// North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j10() -> float:
        return flatbuffers.field_float64(buf_, pos_, 22, 0.0)
    /// East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j11() -> float:
        return flatbuffers.field_float64(buf_, pos_, 24, 0.0)
    /// North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j12() -> float:
        return flatbuffers.field_float64(buf_, pos_, 26, 0.0)
    /// East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j13() -> float:
        return flatbuffers.field_float64(buf_, pos_, 28, 0.0)
    /// Mode in which the radar will operate for the given job ID.
    /// Example: /// Example: MODE
    /// Constraints: Minimum length = 0, Maximum length = 32
    def j14() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def j15() -> int:
        return flatbuffers.field_int32(buf_, pos_, 32, 0)
    /// Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def j16() -> int:
        return flatbuffers.field_int32(buf_, pos_, 34, 0)
    /// Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def j17() -> int:
        return flatbuffers.field_int32(buf_, pos_, 36, 0)
    /// Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
    /// Example: /// Example: 100
    /// Constraints: No constraints specified.
    def j18() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// Standard deviation of the estimate of sensor track heading, expressed in degrees.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j19() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j20() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j21() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
    /// Example: /// Example: 10.23
    /// Constraints: No constraints specified.
    def j22() -> float:
        return flatbuffers.field_float64(buf_, pos_, 46, 0.0)
    /// Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j23() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j24() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j25() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// The expected density of False Alarms (FA), expressed as the negative of the decibel value.
    /// Example: /// Example: 10
    /// Constraints: No constraints specified.
    def j26() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// The terrain elevation model used for developing the target reports.
    /// Example: /// Example: MODEL
    /// Constraints: Minimum length = 0, Maximum length = 64
    def j27() -> string:
        return flatbuffers.field_string(buf_, pos_, 56)
    /// The geoid model used for developing the target reports.
    /// Example: /// Example: MODEL
    /// Constraints: Minimum length = 0, Maximum length = 64
    def j28() -> string:
        return flatbuffers.field_string(buf_, pos_, 58)

def GetRootAsMtiJobDefinition_Full(buf:string): return MtiJobDefinition_Full { buf, flatbuffers.indirect(buf, 0) }

struct MtiJobDefinition_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(28)
        return this
    def add_j1(j1:int):
        b_.PrependInt64Slot(0, j1, 0)
        return this
    def add_j2(j2:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, j2)
        return this
    def add_j3(j3:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, j3)
        return this
    def add_j4(j4:int):
        b_.PrependInt32Slot(3, j4, 0)
        return this
    def add_j5(j5:int):
        b_.PrependInt32Slot(4, j5, 0)
        return this
    def add_j6(j6:float):
        b_.PrependFloat64Slot(5, j6, 0.0)
        return this
    def add_j7(j7:float):
        b_.PrependFloat64Slot(6, j7, 0.0)
        return this
    def add_j8(j8:float):
        b_.PrependFloat64Slot(7, j8, 0.0)
        return this
    def add_j9(j9:float):
        b_.PrependFloat64Slot(8, j9, 0.0)
        return this
    def add_j10(j10:float):
        b_.PrependFloat64Slot(9, j10, 0.0)
        return this
    def add_j11(j11:float):
        b_.PrependFloat64Slot(10, j11, 0.0)
        return this
    def add_j12(j12:float):
        b_.PrependFloat64Slot(11, j12, 0.0)
        return this
    def add_j13(j13:float):
        b_.PrependFloat64Slot(12, j13, 0.0)
        return this
    def add_j14(j14:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, j14)
        return this
    def add_j15(j15:int):
        b_.PrependInt32Slot(14, j15, 0)
        return this
    def add_j16(j16:int):
        b_.PrependInt32Slot(15, j16, 0)
        return this
    def add_j17(j17:int):
        b_.PrependInt32Slot(16, j17, 0)
        return this
    def add_j18(j18:int):
        b_.PrependInt32Slot(17, j18, 0)
        return this
    def add_j19(j19:int):
        b_.PrependInt32Slot(18, j19, 0)
        return this
    def add_j20(j20:int):
        b_.PrependInt32Slot(19, j20, 0)
        return this
    def add_j21(j21:int):
        b_.PrependInt32Slot(20, j21, 0)
        return this
    def add_j22(j22:float):
        b_.PrependFloat64Slot(21, j22, 0.0)
        return this
    def add_j23(j23:int):
        b_.PrependInt32Slot(22, j23, 0)
        return this
    def add_j24(j24:int):
        b_.PrependInt32Slot(23, j24, 0)
        return this
    def add_j25(j25:int):
        b_.PrependInt32Slot(24, j25, 0)
        return this
    def add_j26(j26:int):
        b_.PrependInt32Slot(25, j26, 0)
        return this
    def add_j27(j27:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(26, j27)
        return this
    def add_j28(j28:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(27, j28)
        return this
    def end():
        return b_.EndObject()

