// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Surface_Ingest_dataMode_Enum:
    /// No description available.
    Surface_Ingest_dataMode_Enum_REAL = 0
    /// No description available.
    Surface_Ingest_dataMode_Enum_TEST = 1
    /// No description available.
    Surface_Ingest_dataMode_Enum_SIMULATED = 2
    /// No description available.
    Surface_Ingest_dataMode_Enum_EXERCISE = 3

class Surface_Ingest

/// /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
class Surface_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The surface name or identifier.
    /// Example: /// Example: West lot
    /// Constraints: Minimum length = 1, Maximum length = 64
    def name() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
    /// Example: /// Example: PARKING
    /// Constraints: Minimum length = 1, Maximum length = 7
    def type() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// The ID of the site where this surface is located.
    /// Example: /// Example: SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Alternate site identifier provided by the source.
    /// Example: /// Example: ORIG-SITE-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def altSiteId() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Flag indicating this is the primary runway.  Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def primary() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 16, 0))
    /// The length of the surface type, in feet.  Applicable for runway and parking surface types.
    /// Example: /// Example: 1500
    /// Constraints: No constraints specified.
    def lengthFt() -> int:
        return flatbuffers.field_int32(buf_, pos_, 18, 0)
    /// The landing distance available for the runway, in feet.  Applicable for runway surface types only.
    /// Example: /// Example: 475
    /// Constraints: No constraints specified.
    def ldaFt() -> int:
        return flatbuffers.field_int32(buf_, pos_, 20, 0)
    /// The width of the surface type, in feet.
    /// Example: /// Example: 220
    /// Constraints: No constraints specified.
    def widthFt() -> int:
        return flatbuffers.field_int32(buf_, pos_, 22, 0)
    /// The length of the surface type, in meters.  Applicable for runway and parking surface types.
    /// Example: /// Example: 457
    /// Constraints: No constraints specified.
    def lengthM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 24, 0)
    /// The landing distance available for the runway, in meters.  Applicable for runway surface types only.
    /// Example: /// Example: 145
    /// Constraints: No constraints specified.
    def ldaM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 26, 0)
    /// The width of the surface type, in meters.
    /// Example: /// Example: 67
    /// Constraints: No constraints specified.
    def widthM() -> int:
        return flatbuffers.field_int32(buf_, pos_, 28, 0)
    /// The surface material (e.g. Asphalt, Concrete, Dirt).
    /// Example: /// Example: Concrete
    /// Constraints: Minimum length = 0, Maximum length = 16
    def material() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
    /// Example: /// Example: GOOD
    /// Constraints: Minimum length = 0, Maximum length = 16
    def condition() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Raw weight bearing capacity value or pavement strength.
    /// Example: /// Example: LCN 42
    /// Constraints: Minimum length = 0, Maximum length = 16
    def rawWBC() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// Pavement classification number (PCN) and tire pressure code.
    /// Example: /// Example: 73RBWT
    /// Constraints: Minimum length = 0, Maximum length = 16
    def pcn() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)
    /// Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
    /// Example: /// Example: 50
    /// Constraints: No constraints specified.
    def lcn() -> int:
        return flatbuffers.field_int32(buf_, pos_, 38, 0)
    /// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 143
    /// Constraints: No constraints specified.
    def sWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 40, 0)
    /// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 188
    /// Constraints: No constraints specified.
    def tWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 42, 0)
    /// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 195
    /// Constraints: No constraints specified.
    def stWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 44, 0)
    /// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 414
    /// Constraints: No constraints specified.
    def ttWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 46, 0)
    /// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 416
    /// Constraints: No constraints specified.
    def ddWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 48, 0)
    /// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 603
    /// Constraints: No constraints specified.
    def sbttWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 50, 0)
    /// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 870
    /// Constraints: No constraints specified.
    def tdtWtkip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 52, 0)
    /// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 622
    /// Constraints: No constraints specified.
    def trtWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 54, 0)
    /// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 833
    /// Constraints: No constraints specified.
    def ddtWtKip() -> int:
        return flatbuffers.field_int32(buf_, pos_, 56, 0)
    /// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 636
    /// Constraints: No constraints specified.
    def sWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 58, 0)
    /// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 836
    /// Constraints: No constraints specified.
    def tWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 60, 0)
    /// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 867
    /// Constraints: No constraints specified.
    def stWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 62, 0)
    /// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 1842
    /// Constraints: No constraints specified.
    def ttWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 64, 0)
    /// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 1850
    /// Constraints: No constraints specified.
    def ddWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 66, 0)
    /// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 2682
    /// Constraints: No constraints specified.
    def sbttWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 68, 0)
    /// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 3870
    /// Constraints: No constraints specified.
    def tdtWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 70, 0)
    /// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 2767
    /// Constraints: No constraints specified.
    def trtWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 72, 0)
    /// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    /// Example: /// Example: 3705
    /// Constraints: No constraints specified.
    def ddtWtKN() -> int:
        return flatbuffers.field_int32(buf_, pos_, 74, 0)
    /// Flag indicating the surface has lighting.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lighting() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 76, 0))
    /// Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
    /// Example: /// Example: False
    /// Constraints: No constraints specified.
    def lightsUNKN() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 78, 0))
    /// Flag indicating the runway has approach lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsAPRCH() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 80, 0))
    /// Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsVASI() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 82, 0))
    /// Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsPAPI() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 84, 0))
    /// Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsOLS() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 86, 0))
    /// Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsREIL() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 88, 0))
    /// Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsTDZL() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 90, 0))
    /// Flag indicating the runway has centerline lights. Applicable for runway surface types only.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def lightsCL() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 92, 0))
    /// Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
    /// Example: /// Example: True
    /// Constraints: No constraints specified.
    def obstacle() -> bool:
        return bool(flatbuffers.field_int8(buf_, pos_, 94, 0))
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2022-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 96)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 98)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 100)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 102)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: OPS1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 104)
    /// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Surface_Ingest_dataMode_Enum:
        return Surface_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 106, 0))

def GetRootAsSurface_Ingest(buf:string): return Surface_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Surface_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(52)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_name(name:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, name)
        return this
    def add_type(type:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, type)
        return this
    def add_idSite(idSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, idSite)
        return this
    def add_altSiteId(altSiteId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, altSiteId)
        return this
    def add_primary(primary:bool):
        b_.PrependBoolSlot(6, primary, 0)
        return this
    def add_lengthFt(lengthFt:int):
        b_.PrependInt32Slot(7, lengthFt, 0)
        return this
    def add_ldaFt(ldaFt:int):
        b_.PrependInt32Slot(8, ldaFt, 0)
        return this
    def add_widthFt(widthFt:int):
        b_.PrependInt32Slot(9, widthFt, 0)
        return this
    def add_lengthM(lengthM:int):
        b_.PrependInt32Slot(10, lengthM, 0)
        return this
    def add_ldaM(ldaM:int):
        b_.PrependInt32Slot(11, ldaM, 0)
        return this
    def add_widthM(widthM:int):
        b_.PrependInt32Slot(12, widthM, 0)
        return this
    def add_material(material:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, material)
        return this
    def add_condition(condition:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, condition)
        return this
    def add_rawWBC(rawWBC:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, rawWBC)
        return this
    def add_pcn(pcn:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, pcn)
        return this
    def add_lcn(lcn:int):
        b_.PrependInt32Slot(17, lcn, 0)
        return this
    def add_sWtKip(sWtKip:int):
        b_.PrependInt32Slot(18, sWtKip, 0)
        return this
    def add_tWtKip(tWtKip:int):
        b_.PrependInt32Slot(19, tWtKip, 0)
        return this
    def add_stWtKip(stWtKip:int):
        b_.PrependInt32Slot(20, stWtKip, 0)
        return this
    def add_ttWtKip(ttWtKip:int):
        b_.PrependInt32Slot(21, ttWtKip, 0)
        return this
    def add_ddWtKip(ddWtKip:int):
        b_.PrependInt32Slot(22, ddWtKip, 0)
        return this
    def add_sbttWtKip(sbttWtKip:int):
        b_.PrependInt32Slot(23, sbttWtKip, 0)
        return this
    def add_tdtWtkip(tdtWtkip:int):
        b_.PrependInt32Slot(24, tdtWtkip, 0)
        return this
    def add_trtWtKip(trtWtKip:int):
        b_.PrependInt32Slot(25, trtWtKip, 0)
        return this
    def add_ddtWtKip(ddtWtKip:int):
        b_.PrependInt32Slot(26, ddtWtKip, 0)
        return this
    def add_sWtKN(sWtKN:int):
        b_.PrependInt32Slot(27, sWtKN, 0)
        return this
    def add_tWtKN(tWtKN:int):
        b_.PrependInt32Slot(28, tWtKN, 0)
        return this
    def add_stWtKN(stWtKN:int):
        b_.PrependInt32Slot(29, stWtKN, 0)
        return this
    def add_ttWtKN(ttWtKN:int):
        b_.PrependInt32Slot(30, ttWtKN, 0)
        return this
    def add_ddWtKN(ddWtKN:int):
        b_.PrependInt32Slot(31, ddWtKN, 0)
        return this
    def add_sbttWtKN(sbttWtKN:int):
        b_.PrependInt32Slot(32, sbttWtKN, 0)
        return this
    def add_tdtWtKN(tdtWtKN:int):
        b_.PrependInt32Slot(33, tdtWtKN, 0)
        return this
    def add_trtWtKN(trtWtKN:int):
        b_.PrependInt32Slot(34, trtWtKN, 0)
        return this
    def add_ddtWtKN(ddtWtKN:int):
        b_.PrependInt32Slot(35, ddtWtKN, 0)
        return this
    def add_lighting(lighting:bool):
        b_.PrependBoolSlot(36, lighting, 0)
        return this
    def add_lightsUNKN(lightsUNKN:bool):
        b_.PrependBoolSlot(37, lightsUNKN, 0)
        return this
    def add_lightsAPRCH(lightsAPRCH:bool):
        b_.PrependBoolSlot(38, lightsAPRCH, 0)
        return this
    def add_lightsVASI(lightsVASI:bool):
        b_.PrependBoolSlot(39, lightsVASI, 0)
        return this
    def add_lightsPAPI(lightsPAPI:bool):
        b_.PrependBoolSlot(40, lightsPAPI, 0)
        return this
    def add_lightsOLS(lightsOLS:bool):
        b_.PrependBoolSlot(41, lightsOLS, 0)
        return this
    def add_lightsREIL(lightsREIL:bool):
        b_.PrependBoolSlot(42, lightsREIL, 0)
        return this
    def add_lightsTDZL(lightsTDZL:bool):
        b_.PrependBoolSlot(43, lightsTDZL, 0)
        return this
    def add_lightsCL(lightsCL:bool):
        b_.PrependBoolSlot(44, lightsCL, 0)
        return this
    def add_obstacle(obstacle:bool):
        b_.PrependBoolSlot(45, obstacle, 0)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(46, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(47, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(48, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(49, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(50, origNetwork)
        return this
    def add_dataMode(dataMode:Surface_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(51, dataMode, 0)
        return this
    def end():
        return b_.EndObject()

