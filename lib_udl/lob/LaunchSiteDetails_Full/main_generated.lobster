// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum LaunchSiteDetails_Full_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    LaunchSiteDetails_Full_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    LaunchSiteDetails_Full_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    LaunchSiteDetails_Full_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    LaunchSiteDetails_Full_dataMode_Enum_EXERCISE = 3

class LaunchSiteDetails_Full

/// /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
class LaunchSiteDetails_Full : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: LAUNCHSITEDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the parent launch site record.
    /// Example: /// Example: LAUNCHSITE-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idLaunchSite() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
    /// Example: /// Example: LOCATION-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def idLocation() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
    /// Example: /// Example: Example-group-name
    /// Constraints: Minimum length = 0, Maximum length = 64
    def launchGroup() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
    /// Example: /// Example: [10.23, 10.23, 12.23, 14.23]
    /// Constraints: No constraints specified.
    def availableInclinations(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 14) + i * 4)
    def availableInclinations_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 14)
    /// Notes/description of the launch site.
    /// Example: /// Example: Example notes
    /// Constraints: Minimum length = 0, Maximum length = 256
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time the row was last updated in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def updatedAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who updated the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 0, Maximum length = 64
    def updatedBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> LaunchSiteDetails_Full_dataMode_Enum:
        return LaunchSiteDetails_Full_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def location() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)

def GetRootAsLaunchSiteDetails_Full(buf:string): return LaunchSiteDetails_Full { buf, flatbuffers.indirect(buf, 0) }

struct LaunchSiteDetails_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(17)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idLaunchSite(idLaunchSite:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idLaunchSite)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_idLocation(idLocation:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, idLocation)
        return this
    def add_launchGroup(launchGroup:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, launchGroup)
        return this
    def add_availableInclinations(availableInclinations:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, availableInclinations)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, description)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, createdBy)
        return this
    def add_updatedAt(updatedAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, updatedAt)
        return this
    def add_updatedBy(updatedBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, updatedBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origNetwork)
        return this
    def add_dataMode(dataMode:LaunchSiteDetails_Full_dataMode_Enum):
        b_.PrependInt8Slot(14, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, tags)
        return this
    def add_location(location:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, location)
        return this
    def end():
        return b_.EndObject()

def LaunchSiteDetails_FullStartAvailableInclinationsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LaunchSiteDetails_FullCreateAvailableInclinationsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

def LaunchSiteDetails_FullStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def LaunchSiteDetails_FullCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

