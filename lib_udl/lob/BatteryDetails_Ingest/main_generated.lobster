// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum BatteryDetails_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    BatteryDetails_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    BatteryDetails_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    BatteryDetails_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    BatteryDetails_Ingest_dataMode_Enum_EXERCISE = 3

class BatteryDetails_Ingest

/// /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
class BatteryDetails_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: BATTERYDETAILS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Identifier of the parent battery type record.
    /// Example: /// Example: BATTERY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idBattery() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
    /// Example: /// Example: Ni-Cd
    /// Constraints: Minimum length = 0, Maximum length = 32
    def technology() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Battery capacity in Ah.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def capacity() -> float:
        return flatbuffers.field_float64(buf_, pos_, 12, 0.0)
    /// Depth of discharge as a percentage/fraction.
    /// Example: /// Example: 0.2
    /// Constraints: No constraints specified.
    def dischargeDepth() -> float:
        return flatbuffers.field_float64(buf_, pos_, 14, 0.0)
    /// Battery model number or name.
    /// Example: /// Example: 11212
    /// Constraints: Minimum length = 0, Maximum length = 128
    def model() -> string:
        return flatbuffers.field_string(buf_, pos_, 16)
    /// Battery description/notes.
    /// Example: /// Example: example notes
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def description() -> string:
        return flatbuffers.field_string(buf_, pos_, 18)
    /// ID of the organization that manufactures the battery.
    /// Example: /// Example: MANUFACTURERORG-ID
    /// Constraints: Minimum length = 0, Maximum length = 36
    def manufacturerOrgId() -> string:
        return flatbuffers.field_string(buf_, pos_, 20)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 24)
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 26)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: ORIG
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> BatteryDetails_Ingest_dataMode_Enum:
        return BatteryDetails_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 32, 0))
    /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    /// Constraints: No constraints specified.
    def tags(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 34) + i * 4)
    def tags_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 34)

def GetRootAsBatteryDetails_Ingest(buf:string): return BatteryDetails_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct BatteryDetails_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(16)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_idBattery(idBattery:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, idBattery)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, classificationMarking)
        return this
    def add_technology(technology:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, technology)
        return this
    def add_capacity(capacity:float):
        b_.PrependFloat64Slot(4, capacity, 0.0)
        return this
    def add_dischargeDepth(dischargeDepth:float):
        b_.PrependFloat64Slot(5, dischargeDepth, 0.0)
        return this
    def add_model(model:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(6, model)
        return this
    def add_description(description:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(7, description)
        return this
    def add_manufacturerOrgId(manufacturerOrgId:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(8, manufacturerOrgId)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, createdBy)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(11, source)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, origNetwork)
        return this
    def add_dataMode(dataMode:BatteryDetails_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(14, dataMode, 0)
        return this
    def add_tags(tags:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, tags)
        return this
    def end():
        return b_.EndObject()

def BatteryDetails_IngestStartTagsVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def BatteryDetails_IngestCreateTagsVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

