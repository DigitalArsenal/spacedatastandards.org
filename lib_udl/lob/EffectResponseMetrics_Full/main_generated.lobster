// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class EffectResponseMetrics_Full

/// /// List of COA metrics associated with this effect response.
class EffectResponseMetrics_Full : flatbuffers.handle
    /// The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
    /// Example: /// Example: GoalAchievement
    /// Constraints: Minimum length = 0, Maximum length = 64
    def metricType() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// The metric score specific to its domain.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def domainValue() -> float:
        return flatbuffers.field_float64(buf_, pos_, 6, 0.0)
    /// The metric score adjusted to be relative and comparable to other domains.
    /// Example: /// Example: 10.1
    /// Constraints: No constraints specified.
    def relativeValue() -> float:
        return flatbuffers.field_float64(buf_, pos_, 8, 0.0)
    /// The metric that was used to score this task.
    /// Example: /// Example: Example metric
    /// Constraints: Minimum length = 0, Maximum length = 1024
    def provenance() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)

def GetRootAsEffectResponseMetrics_Full(buf:string): return EffectResponseMetrics_Full { buf, flatbuffers.indirect(buf, 0) }

struct EffectResponseMetrics_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(4)
        return this
    def add_metricType(metricType:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, metricType)
        return this
    def add_domainValue(domainValue:float):
        b_.PrependFloat64Slot(1, domainValue, 0.0)
        return this
    def add_relativeValue(relativeValue:float):
        b_.PrependFloat64Slot(2, relativeValue, 0.0)
        return this
    def add_provenance(provenance:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, provenance)
        return this
    def end():
        return b_.EndObject()

