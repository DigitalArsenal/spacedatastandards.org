// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

class ISRCollectionExploitationRequirement_Full

/// /// What it is that is trying to be exploited.
class ISRCollectionExploitationRequirement_Full : flatbuffers.handle
    /// Exploitation requirement id.
    /// Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
    /// Constraints: Minimum length = 0, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Amplifying data for the exploitation requirement.
    /// Example: /// Example: AMPLIFICATION
    /// Constraints: Minimum length = 0, Maximum length = 256
    def amplification() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The reporting criteria of the collection requirement.
    /// Example: /// Example: CRITERIA
    /// Constraints: Minimum length = 0, Maximum length = 32
    def reportingCriteria() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// List of e-mails to disseminate collection verification information.
    /// Example: /// Example: EMAILS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def dissemination() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Essential Elements of Information.
    /// Example: /// Example: ESSENTIAL_ELEMENTS
    /// Constraints: Minimum length = 0, Maximum length = 32
    def eei() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def poc() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)

def GetRootAsISRCollectionExploitationRequirement_Full(buf:string): return ISRCollectionExploitationRequirement_Full { buf, flatbuffers.indirect(buf, 0) }

struct ISRCollectionExploitationRequirement_FullBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(6)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_amplification(amplification:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, amplification)
        return this
    def add_reportingCriteria(reportingCriteria:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, reportingCriteria)
        return this
    def add_dissemination(dissemination:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, dissemination)
        return this
    def add_eei(eei:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, eei)
        return this
    def add_poc(poc:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, poc)
        return this
    def end():
        return b_.EndObject()

