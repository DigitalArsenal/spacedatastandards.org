// automatically generated by the FlatBuffers compiler, do not modify
import flatbuffers

enum Status_Ingest_state_Enum:
    /// No description available.
    Status_Ingest_state_Enum_UNKNOWN = 0
    /// No description available.
    Status_Ingest_state_Enum_DEAD = 1
    /// No description available.
    Status_Ingest_state_Enum_ACTIVE = 2
    /// No description available.
    Status_Ingest_state_Enum_RF_ACTIVE = 3
    /// No description available.
    Status_Ingest_state_Enum_STANDBY = 4

enum Status_Ingest_sysCap_Enum:
    /// No description available.
    Status_Ingest_sysCap_Enum_FMC = 0
    /// No description available.
    Status_Ingest_sysCap_Enum_NMC = 1
    /// No description available.
    Status_Ingest_sysCap_Enum_PMC = 2
    /// No description available.
    Status_Ingest_sysCap_Enum_UNK = 3

enum Status_Ingest_opsCap_Enum:
    /// No description available.
    Status_Ingest_opsCap_Enum_FMC = 0
    /// No description available.
    Status_Ingest_opsCap_Enum_NMC = 1
    /// No description available.
    Status_Ingest_opsCap_Enum_PMC = 2
    /// No description available.
    Status_Ingest_opsCap_Enum_UNK = 3

enum Status_Ingest_dataMode_Enum:
    /// Data collected or produced that pertains to real-world objects, events, and analysis.
    Status_Ingest_dataMode_Enum_REAL = 0
    /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    Status_Ingest_dataMode_Enum_TEST = 1
    /// Synthetic data generated by a model to mimic real-world datasets.
    Status_Ingest_dataMode_Enum_SIMULATED = 2
    /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
    Status_Ingest_dataMode_Enum_EXERCISE = 3

class Status_Ingest

/// /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
class Status_Ingest : flatbuffers.handle
    /// Unique identifier of the record, auto-generated by the system.
    /// Example: /// Example: STATUS-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def id() -> string:
        return flatbuffers.field_string(buf_, pos_, 4)
    /// Classification marking of the data in IC/CAPCO Portion-marked format.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 1, Maximum length = 128
    def classificationMarking() -> string:
        return flatbuffers.field_string(buf_, pos_, 6)
    /// The sources or SCG references from which the classification of this data is derived.
    /// Example: /// Example: SOME_SOURCE
    /// Constraints: Minimum length = 0, Maximum length = 128
    def derivedFrom() -> string:
        return flatbuffers.field_string(buf_, pos_, 8)
    /// The declassification date of this data, in ISO 8601 UTC format.
    /// Example: /// Example: 2021-01-01T01:02:02.123Z
    /// Constraints: No constraints specified.
    def declassificationDate() -> string:
        return flatbuffers.field_string(buf_, pos_, 10)
    /// Declassification string of this data.
    /// Example: /// Example: U
    /// Constraints: Minimum length = 0, Maximum length = 256
    def declassificationString() -> string:
        return flatbuffers.field_string(buf_, pos_, 12)
    /// Unique identifier of the parent entity.
    /// Example: /// Example: ENTITY-ID
    /// Constraints: Minimum length = 1, Maximum length = 36
    def idEntity() -> string:
        return flatbuffers.field_string(buf_, pos_, 14)
    /// Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
    /// Example: /// Example: ACTIVE
    /// Constraints: Minimum length = 0, Maximum length = 16
    def state() -> Status_Ingest_state_Enum:
        return Status_Ingest_state_Enum(flatbuffers.field_int8(buf_, pos_, 16, 0))
    /// System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
    /// Example: /// Example: FMC
    /// Constraints: Minimum length = 0, Maximum length = 3
    def sysCap() -> Status_Ingest_sysCap_Enum:
        return Status_Ingest_sysCap_Enum(flatbuffers.field_int8(buf_, pos_, 18, 0))
    /// Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
    /// Example: /// Example: FMC
    /// Constraints: Minimum length = 0, Maximum length = 3
    def opsCap() -> Status_Ingest_opsCap_Enum:
        return Status_Ingest_opsCap_Enum(flatbuffers.field_int8(buf_, pos_, 20, 0))
    /// Source of the data.
    /// Example: /// Example: Bluestaq
    /// Constraints: Minimum length = 1, Maximum length = 64
    def source() -> string:
        return flatbuffers.field_string(buf_, pos_, 22)
    /// No description provided.
    /// Example: /// Example: No example provided.
    /// Constraints: No constraints specified.
    def subStatusCollection(i:int) -> string:
        return flatbuffers.string(buf_, buf_.flatbuffers.field_vector(pos_, 24) + i * 4)
    def subStatusCollection_length() -> int:
        return flatbuffers.field_vector_len(buf_, pos_, 24)
    /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    /// Example: /// Example: TEST
    /// Constraints: Minimum length = 1, Maximum length = 32
    def dataMode() -> Status_Ingest_dataMode_Enum:
        return Status_Ingest_dataMode_Enum(flatbuffers.field_int8(buf_, pos_, 26, 0))
    /// Comments describing the status creation and or updates to an entity.
    /// Example: /// Example: Example Notes
    /// Constraints: No constraints specified.
    def notes() -> string:
        return flatbuffers.field_string(buf_, pos_, 28)
    /// Time the row was created in the database, auto-populated by the system.
    /// Example: /// Example: 2018-01-01T16:00:00.123Z
    /// Constraints: No constraints specified.
    def createdAt() -> string:
        return flatbuffers.field_string(buf_, pos_, 30)
    /// Application user who created the row in the database, auto-populated by the system.
    /// Example: /// Example: some.user
    /// Constraints: Minimum length = 1, Maximum length = 64
    def createdBy() -> string:
        return flatbuffers.field_string(buf_, pos_, 32)
    /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    /// Example: /// Example: THIRD_PARTY_DATASOURCE
    /// Constraints: Minimum length = 0, Maximum length = 64
    def origin() -> string:
        return flatbuffers.field_string(buf_, pos_, 34)
    /// The originating source network on which this record was created, auto-populated by the system.
    /// Example: /// Example: TST1
    /// Constraints: Minimum length = 1, Maximum length = 32
    def origNetwork() -> string:
        return flatbuffers.field_string(buf_, pos_, 36)

def GetRootAsStatus_Ingest(buf:string): return Status_Ingest { buf, flatbuffers.indirect(buf, 0) }

struct Status_IngestBuilder:
    b_:flatbuffers.builder
    def start():
        b_.StartObject(17)
        return this
    def add_id(id:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(0, id)
        return this
    def add_classificationMarking(classificationMarking:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(1, classificationMarking)
        return this
    def add_derivedFrom(derivedFrom:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(2, derivedFrom)
        return this
    def add_declassificationDate(declassificationDate:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(3, declassificationDate)
        return this
    def add_declassificationString(declassificationString:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(4, declassificationString)
        return this
    def add_idEntity(idEntity:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(5, idEntity)
        return this
    def add_state(state:Status_Ingest_state_Enum):
        b_.PrependInt8Slot(6, state, 0)
        return this
    def add_sysCap(sysCap:Status_Ingest_sysCap_Enum):
        b_.PrependInt8Slot(7, sysCap, 0)
        return this
    def add_opsCap(opsCap:Status_Ingest_opsCap_Enum):
        b_.PrependInt8Slot(8, opsCap, 0)
        return this
    def add_source(source:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(9, source)
        return this
    def add_subStatusCollection(subStatusCollection:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(10, subStatusCollection)
        return this
    def add_dataMode(dataMode:Status_Ingest_dataMode_Enum):
        b_.PrependInt8Slot(11, dataMode, 0)
        return this
    def add_notes(notes:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(12, notes)
        return this
    def add_createdAt(createdAt:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(13, createdAt)
        return this
    def add_createdBy(createdBy:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(14, createdBy)
        return this
    def add_origin(origin:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(15, origin)
        return this
    def add_origNetwork(origNetwork:flatbuffers.offset):
        b_.PrependUOffsetTRelativeSlot(16, origNetwork)
        return this
    def end():
        return b_.EndObject()

def Status_IngestStartSubStatusCollectionVector(b_:flatbuffers.builder, n_:int):
    b_.StartVector(4, n_, 4)
def Status_IngestCreateSubStatusCollectionVector(b_:flatbuffers.builder, v_:[flatbuffers.offset]):
    b_.StartVector(4, v_.length, 4)
    reverse(v_) e_: b_.PrependUOffsetTRelative(e_)
    return b_.EndVector(v_.length)

