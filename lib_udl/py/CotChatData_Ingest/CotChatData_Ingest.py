# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for the CotChatData to post.
class CotChatData_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CotChatData_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCotChatData_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CotChatData_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x54\x43", size_prefixed=size_prefixed)

    # CotChatData_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Chat room name to send chat message to.
    # Example: /// Example: All Chat Rooms
    # Constraints: No constraints specified.
    # CotChatData_Ingest
    def ChatRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Callsign of chat sender.
    # Example: /// Example: Pebble
    # Constraints: No constraints specified.
    # CotChatData_Ingest
    def ChatSenderCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Contents of a chat message.
    # Example: /// Example: Mission is go
    # Constraints: No constraints specified.
    # CotChatData_Ingest
    def ChatMsg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CotChatData_IngestStart(builder):
    builder.StartObject(3)

def Start(builder):
    CotChatData_IngestStart(builder)

def CotChatData_IngestAddChatRoom(builder, chatRoom):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chatRoom), 0)

def AddChatRoom(builder, chatRoom):
    CotChatData_IngestAddChatRoom(builder, chatRoom)

def CotChatData_IngestAddChatSenderCallSign(builder, chatSenderCallSign):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(chatSenderCallSign), 0)

def AddChatSenderCallSign(builder, chatSenderCallSign):
    CotChatData_IngestAddChatSenderCallSign(builder, chatSenderCallSign)

def CotChatData_IngestAddChatMsg(builder, chatMsg):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(chatMsg), 0)

def AddChatMsg(builder, chatMsg):
    CotChatData_IngestAddChatMsg(builder, chatMsg)

def CotChatData_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return CotChatData_IngestEnd(builder)


class CotChatData_IngestT(object):

    # CotChatData_IngestT
    def __init__(self):
        self.chatRoom = None  # type: str
        self.chatSenderCallSign = None  # type: str
        self.chatMsg = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cotChatDataIngest = CotChatData_Ingest()
        cotChatDataIngest.Init(buf, pos)
        return cls.InitFromObj(cotChatDataIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cotChatDataIngest):
        x = CotChatData_IngestT()
        x._UnPack(cotChatDataIngest)
        return x

    # CotChatData_IngestT
    def _UnPack(self, cotChatDataIngest):
        if cotChatDataIngest is None:
            return
        self.chatRoom = cotChatDataIngest.ChatRoom()
        self.chatSenderCallSign = cotChatDataIngest.ChatSenderCallSign()
        self.chatMsg = cotChatDataIngest.ChatMsg()

    # CotChatData_IngestT
    def Pack(self, builder):
        if self.chatRoom is not None:
            chatRoom = builder.CreateString(self.chatRoom)
        if self.chatSenderCallSign is not None:
            chatSenderCallSign = builder.CreateString(self.chatSenderCallSign)
        if self.chatMsg is not None:
            chatMsg = builder.CreateString(self.chatMsg)
        CotChatData_IngestStart(builder)
        if self.chatRoom is not None:
            CotChatData_IngestAddChatRoom(builder, chatRoom)
        if self.chatSenderCallSign is not None:
            CotChatData_IngestAddChatSenderCallSign(builder, chatSenderCallSign)
        if self.chatMsg is not None:
            CotChatData_IngestAddChatMsg(builder, chatMsg)
        cotChatDataIngest = CotChatData_IngestEnd(builder)
        return cotChatDataIngest
