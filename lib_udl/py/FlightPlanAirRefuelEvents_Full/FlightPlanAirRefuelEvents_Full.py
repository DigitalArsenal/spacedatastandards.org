# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of air refueling events occurring on this flight.
class FlightPlanAirRefuelEvents_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlanAirRefuelEvents_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlanAirRefuelEvents_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlanAirRefuelEvents_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlanAirRefuelEvents_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Additional degrade for air refueling, cumulative with fuelDegrade field percent.
    # Example: /// Example: 3.1
    # Constraints: No constraints specified.
    # FlightPlanAirRefuelEvents_Full
    def ArDegrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of this air refueling event within the flight plan.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # FlightPlanAirRefuelEvents_Full
    def ArNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
    # Example: /// Example: 1500.1
    # Constraints: No constraints specified.
    # FlightPlanAirRefuelEvents_Full
    def ArExchangedFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
    # Example: /// Example: 143000.1
    # Constraints: No constraints specified.
    # FlightPlanAirRefuelEvents_Full
    def DivertFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel remaining at the air refueling exit in pounds.
    # Example: /// Example: 160000.1
    # Constraints: No constraints specified.
    # FlightPlanAirRefuelEvents_Full
    def ExitFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def FlightPlanAirRefuelEvents_FullStart(builder):
    builder.StartObject(5)

def Start(builder):
    FlightPlanAirRefuelEvents_FullStart(builder)

def FlightPlanAirRefuelEvents_FullAddArDegrade(builder, arDegrade):
    builder.PrependFloat64Slot(0, arDegrade, 0.0)

def AddArDegrade(builder, arDegrade):
    FlightPlanAirRefuelEvents_FullAddArDegrade(builder, arDegrade)

def FlightPlanAirRefuelEvents_FullAddArNum(builder, arNum):
    builder.PrependInt32Slot(1, arNum, 0)

def AddArNum(builder, arNum):
    FlightPlanAirRefuelEvents_FullAddArNum(builder, arNum)

def FlightPlanAirRefuelEvents_FullAddArExchangedFuel(builder, arExchangedFuel):
    builder.PrependFloat64Slot(2, arExchangedFuel, 0.0)

def AddArExchangedFuel(builder, arExchangedFuel):
    FlightPlanAirRefuelEvents_FullAddArExchangedFuel(builder, arExchangedFuel)

def FlightPlanAirRefuelEvents_FullAddDivertFuel(builder, divertFuel):
    builder.PrependFloat64Slot(3, divertFuel, 0.0)

def AddDivertFuel(builder, divertFuel):
    FlightPlanAirRefuelEvents_FullAddDivertFuel(builder, divertFuel)

def FlightPlanAirRefuelEvents_FullAddExitFuel(builder, exitFuel):
    builder.PrependFloat64Slot(4, exitFuel, 0.0)

def AddExitFuel(builder, exitFuel):
    FlightPlanAirRefuelEvents_FullAddExitFuel(builder, exitFuel)

def FlightPlanAirRefuelEvents_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlanAirRefuelEvents_FullEnd(builder)


class FlightPlanAirRefuelEvents_FullT(object):

    # FlightPlanAirRefuelEvents_FullT
    def __init__(self):
        self.arDegrade = 0.0  # type: float
        self.arNum = 0  # type: int
        self.arExchangedFuel = 0.0  # type: float
        self.divertFuel = 0.0  # type: float
        self.exitFuel = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanAirRefuelEventsFull = FlightPlanAirRefuelEvents_Full()
        flightPlanAirRefuelEventsFull.Init(buf, pos)
        return cls.InitFromObj(flightPlanAirRefuelEventsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanAirRefuelEventsFull):
        x = FlightPlanAirRefuelEvents_FullT()
        x._UnPack(flightPlanAirRefuelEventsFull)
        return x

    # FlightPlanAirRefuelEvents_FullT
    def _UnPack(self, flightPlanAirRefuelEventsFull):
        if flightPlanAirRefuelEventsFull is None:
            return
        self.arDegrade = flightPlanAirRefuelEventsFull.ArDegrade()
        self.arNum = flightPlanAirRefuelEventsFull.ArNum()
        self.arExchangedFuel = flightPlanAirRefuelEventsFull.ArExchangedFuel()
        self.divertFuel = flightPlanAirRefuelEventsFull.DivertFuel()
        self.exitFuel = flightPlanAirRefuelEventsFull.ExitFuel()

    # FlightPlanAirRefuelEvents_FullT
    def Pack(self, builder):
        FlightPlanAirRefuelEvents_FullStart(builder)
        FlightPlanAirRefuelEvents_FullAddArDegrade(builder, self.arDegrade)
        FlightPlanAirRefuelEvents_FullAddArNum(builder, self.arNum)
        FlightPlanAirRefuelEvents_FullAddArExchangedFuel(builder, self.arExchangedFuel)
        FlightPlanAirRefuelEvents_FullAddDivertFuel(builder, self.divertFuel)
        FlightPlanAirRefuelEvents_FullAddExitFuel(builder, self.exitFuel)
        flightPlanAirRefuelEventsFull = FlightPlanAirRefuelEvents_FullEnd(builder)
        return flightPlanAirRefuelEventsFull
