# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
class Transponder_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Transponder_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransponder_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Transponder_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x52\x41\x4E", size_prefixed=size_prefixed)

    # Transponder_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: TRANSPONDER-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Transponder_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the parent Comm object for this transponder.
    # Example: /// Example: REF-COMM-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Transponder_Abridged
    def IdComm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional name of the transponder.
    # Example: /// Example: AA10
    # Constraints: Minimum length = 0, Maximum length = 128
    # Transponder_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Transponder_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional external network id as provided data source.
    # Example: /// Example: N-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Transponder_Abridged
    def Nid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional external transponder id as provided data source.
    # Example: /// Example: T-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Transponder_Abridged
    def Tid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
    # Example: /// Example: 1.53261520047876
    # Constraints: No constraints specified.
    # Transponder_Abridged
    def Ttf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
    # Example: /// Example: 4.0
    # Constraints: No constraints specified.
    # Transponder_Abridged
    def SymbolRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # Transponder_Abridged
    def Fec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Transponder modulation, e.g. Auto, QPSK, 8PSK.
    # Example: /// Example: Auto
    # Constraints: Minimum length = 0, Maximum length = 10
    # Transponder_Abridged
    def Modulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Format.
    # Example: /// Example: format
    # Constraints: Minimum length = 0, Maximum length = 45
    # Transponder_Abridged
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transponder system, e.g. DVB-S, DVB-S2.
    # Example: /// Example: DVB-S
    # Constraints: Minimum length = 0, Maximum length = 45
    # Transponder_Abridged
    def System(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Transponder_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Transponder_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Transponder_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Transponder_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Transponder_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Transponder_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Transponder_AbridgedStart(builder):
    builder.StartObject(18)

def Start(builder):
    Transponder_AbridgedStart(builder)

def Transponder_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Transponder_AbridgedAddId(builder, id)

def Transponder_AbridgedAddIdComm(builder, idComm):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idComm), 0)

def AddIdComm(builder, idComm):
    Transponder_AbridgedAddIdComm(builder, idComm)

def Transponder_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Transponder_AbridgedAddName(builder, name)

def Transponder_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Transponder_AbridgedAddClassificationMarking(builder, classificationMarking)

def Transponder_AbridgedAddNid(builder, nid):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(nid), 0)

def AddNid(builder, nid):
    Transponder_AbridgedAddNid(builder, nid)

def Transponder_AbridgedAddTid(builder, tid):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tid), 0)

def AddTid(builder, tid):
    Transponder_AbridgedAddTid(builder, tid)

def Transponder_AbridgedAddTtf(builder, ttf):
    builder.PrependFloat64Slot(6, ttf, 0.0)

def AddTtf(builder, ttf):
    Transponder_AbridgedAddTtf(builder, ttf)

def Transponder_AbridgedAddSymbolRate(builder, symbolRate):
    builder.PrependFloat64Slot(7, symbolRate, 0.0)

def AddSymbolRate(builder, symbolRate):
    Transponder_AbridgedAddSymbolRate(builder, symbolRate)

def Transponder_AbridgedAddFec(builder, fec):
    builder.PrependInt32Slot(8, fec, 0)

def AddFec(builder, fec):
    Transponder_AbridgedAddFec(builder, fec)

def Transponder_AbridgedAddModulation(builder, modulation):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(modulation), 0)

def AddModulation(builder, modulation):
    Transponder_AbridgedAddModulation(builder, modulation)

def Transponder_AbridgedAddFormat(builder, format):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(format), 0)

def AddFormat(builder, format):
    Transponder_AbridgedAddFormat(builder, format)

def Transponder_AbridgedAddSystem(builder, system):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(system), 0)

def AddSystem(builder, system):
    Transponder_AbridgedAddSystem(builder, system)

def Transponder_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Transponder_AbridgedAddSource(builder, source)

def Transponder_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Transponder_AbridgedAddOrigin(builder, origin)

def Transponder_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Transponder_AbridgedAddOrigNetwork(builder, origNetwork)

def Transponder_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(15, dataMode, 0)

def AddDataMode(builder, dataMode):
    Transponder_AbridgedAddDataMode(builder, dataMode)

def Transponder_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Transponder_AbridgedAddCreatedAt(builder, createdAt)

def Transponder_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Transponder_AbridgedAddCreatedBy(builder, createdBy)

def Transponder_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Transponder_AbridgedEnd(builder)


class Transponder_AbridgedT(object):

    # Transponder_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idComm = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.nid = None  # type: str
        self.tid = None  # type: str
        self.ttf = 0.0  # type: float
        self.symbolRate = 0.0  # type: float
        self.fec = 0  # type: int
        self.modulation = None  # type: str
        self.format = None  # type: str
        self.system = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        transponderAbridged = Transponder_Abridged()
        transponderAbridged.Init(buf, pos)
        return cls.InitFromObj(transponderAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, transponderAbridged):
        x = Transponder_AbridgedT()
        x._UnPack(transponderAbridged)
        return x

    # Transponder_AbridgedT
    def _UnPack(self, transponderAbridged):
        if transponderAbridged is None:
            return
        self.id = transponderAbridged.Id()
        self.idComm = transponderAbridged.IdComm()
        self.name = transponderAbridged.Name()
        self.classificationMarking = transponderAbridged.ClassificationMarking()
        self.nid = transponderAbridged.Nid()
        self.tid = transponderAbridged.Tid()
        self.ttf = transponderAbridged.Ttf()
        self.symbolRate = transponderAbridged.SymbolRate()
        self.fec = transponderAbridged.Fec()
        self.modulation = transponderAbridged.Modulation()
        self.format = transponderAbridged.Format()
        self.system = transponderAbridged.System()
        self.source = transponderAbridged.Source()
        self.origin = transponderAbridged.Origin()
        self.origNetwork = transponderAbridged.OrigNetwork()
        self.dataMode = transponderAbridged.DataMode()
        self.createdAt = transponderAbridged.CreatedAt()
        self.createdBy = transponderAbridged.CreatedBy()

    # Transponder_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idComm is not None:
            idComm = builder.CreateString(self.idComm)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.nid is not None:
            nid = builder.CreateString(self.nid)
        if self.tid is not None:
            tid = builder.CreateString(self.tid)
        if self.modulation is not None:
            modulation = builder.CreateString(self.modulation)
        if self.format is not None:
            format = builder.CreateString(self.format)
        if self.system is not None:
            system = builder.CreateString(self.system)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        Transponder_AbridgedStart(builder)
        if self.id is not None:
            Transponder_AbridgedAddId(builder, id)
        if self.idComm is not None:
            Transponder_AbridgedAddIdComm(builder, idComm)
        if self.name is not None:
            Transponder_AbridgedAddName(builder, name)
        if self.classificationMarking is not None:
            Transponder_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.nid is not None:
            Transponder_AbridgedAddNid(builder, nid)
        if self.tid is not None:
            Transponder_AbridgedAddTid(builder, tid)
        Transponder_AbridgedAddTtf(builder, self.ttf)
        Transponder_AbridgedAddSymbolRate(builder, self.symbolRate)
        Transponder_AbridgedAddFec(builder, self.fec)
        if self.modulation is not None:
            Transponder_AbridgedAddModulation(builder, modulation)
        if self.format is not None:
            Transponder_AbridgedAddFormat(builder, format)
        if self.system is not None:
            Transponder_AbridgedAddSystem(builder, system)
        if self.source is not None:
            Transponder_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Transponder_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Transponder_AbridgedAddOrigNetwork(builder, origNetwork)
        Transponder_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Transponder_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Transponder_AbridgedAddCreatedBy(builder, createdBy)
        transponderAbridged = Transponder_AbridgedEnd(builder)
        return transponderAbridged
