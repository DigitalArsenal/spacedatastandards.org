# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
class LogisticsSupport_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsSupport_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsSupport_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsSupport_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsSupport_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LogisticsSupport_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LogisticsSupport_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: GDSSBL012307131347070165
    # Constraints: Minimum length = 0, Maximum length = 24
    # LogisticsSupport_Full
    def ExtSystemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
    # Example: /// Example: 99290
    # Constraints: Minimum length = 0, Maximum length = 7
    # LogisticsSupport_Full
    def TailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    # Example: /// Example: CO17A
    # Constraints: Minimum length = 0, Maximum length = 8
    # LogisticsSupport_Full
    def AircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSupport_Full
    def CurrIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSupport_Full
    def SuppIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time this report was created, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def RptCreatedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time this report was closed, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def RptClosedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def MeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def McTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
    # Example: /// Example: WA
    # Constraints: Minimum length = 0, Maximum length = 9
    # LogisticsSupport_Full
    def LogisticAction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The identifier that represents a Logistics Master Record.
    # Example: /// Example: L62017
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsSupport_Full
    def LogisticsRecordId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def Etic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Logistics estimated time mission capable.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def Etmc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
    # Example: /// Example: NMCMU
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsSupport_Full
    def MaintStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This is used to indicate whether a closed master record has been reopened.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def ReopenFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The organization that owns this logistics record.
    # Example: /// Example: EXAMPLE_OWNER
    # Constraints: Minimum length = 0, Maximum length = 250
    # LogisticsSupport_Full
    def Owner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks associated with this LogisticsSupport record.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def LogisticsRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Full
    def LogisticsRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Full
    def LogisticsRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Discrepancy information associated with this LogisticsSupport record.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def LogisticsDiscrepancyInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Full
    def LogisticsDiscrepancyInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Full
    def LogisticsDiscrepancyInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def LogisticsTransportationPlans(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Full
    def LogisticsTransportationPlansLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Full
    def LogisticsTransportationPlansIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Support items associated with this LogisticsSupport record.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def LogisticsSupportItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Full
    def LogisticsSupportItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Full
    def LogisticsSupportItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # LogisticsSupport_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LogisticsSupport_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LogisticsSupport_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # LogisticsSupport_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LogisticsSupport_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LogisticsSupport_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def LogisticsSupport_FullStart(builder):
    builder.StartObject(30)

def Start(builder):
    LogisticsSupport_FullStart(builder)

def LogisticsSupport_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LogisticsSupport_FullAddId(builder, id)

def LogisticsSupport_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LogisticsSupport_FullAddClassificationMarking(builder, classificationMarking)

def LogisticsSupport_FullAddExtSystemId(builder, extSystemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(extSystemId), 0)

def AddExtSystemId(builder, extSystemId):
    LogisticsSupport_FullAddExtSystemId(builder, extSystemId)

def LogisticsSupport_FullAddTailNumber(builder, tailNumber):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tailNumber), 0)

def AddTailNumber(builder, tailNumber):
    LogisticsSupport_FullAddTailNumber(builder, tailNumber)

def LogisticsSupport_FullAddAircraftMds(builder, aircraftMds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftMds), 0)

def AddAircraftMds(builder, aircraftMds):
    LogisticsSupport_FullAddAircraftMds(builder, aircraftMds)

def LogisticsSupport_FullAddCurrIcao(builder, currIcao):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(currIcao), 0)

def AddCurrIcao(builder, currIcao):
    LogisticsSupport_FullAddCurrIcao(builder, currIcao)

def LogisticsSupport_FullAddSuppIcao(builder, suppIcao):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(suppIcao), 0)

def AddSuppIcao(builder, suppIcao):
    LogisticsSupport_FullAddSuppIcao(builder, suppIcao)

def LogisticsSupport_FullAddRptCreatedTime(builder, rptCreatedTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rptCreatedTime), 0)

def AddRptCreatedTime(builder, rptCreatedTime):
    LogisticsSupport_FullAddRptCreatedTime(builder, rptCreatedTime)

def LogisticsSupport_FullAddRptClosedTime(builder, rptClosedTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rptClosedTime), 0)

def AddRptClosedTime(builder, rptClosedTime):
    LogisticsSupport_FullAddRptClosedTime(builder, rptClosedTime)

def LogisticsSupport_FullAddMeTime(builder, meTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(meTime), 0)

def AddMeTime(builder, meTime):
    LogisticsSupport_FullAddMeTime(builder, meTime)

def LogisticsSupport_FullAddMcTime(builder, mcTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(mcTime), 0)

def AddMcTime(builder, mcTime):
    LogisticsSupport_FullAddMcTime(builder, mcTime)

def LogisticsSupport_FullAddLogisticAction(builder, logisticAction):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(logisticAction), 0)

def AddLogisticAction(builder, logisticAction):
    LogisticsSupport_FullAddLogisticAction(builder, logisticAction)

def LogisticsSupport_FullAddLogisticsRecordId(builder, logisticsRecordId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsRecordId), 0)

def AddLogisticsRecordId(builder, logisticsRecordId):
    LogisticsSupport_FullAddLogisticsRecordId(builder, logisticsRecordId)

def LogisticsSupport_FullAddEtic(builder, etic):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(etic), 0)

def AddEtic(builder, etic):
    LogisticsSupport_FullAddEtic(builder, etic)

def LogisticsSupport_FullAddEtmc(builder, etmc):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(etmc), 0)

def AddEtmc(builder, etmc):
    LogisticsSupport_FullAddEtmc(builder, etmc)

def LogisticsSupport_FullAddMaintStatusCode(builder, maintStatusCode):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(maintStatusCode), 0)

def AddMaintStatusCode(builder, maintStatusCode):
    LogisticsSupport_FullAddMaintStatusCode(builder, maintStatusCode)

def LogisticsSupport_FullAddReopenFlag(builder, reopenFlag):
    builder.PrependBoolSlot(16, reopenFlag, 0)

def AddReopenFlag(builder, reopenFlag):
    LogisticsSupport_FullAddReopenFlag(builder, reopenFlag)

def LogisticsSupport_FullAddOwner(builder, owner):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(owner), 0)

def AddOwner(builder, owner):
    LogisticsSupport_FullAddOwner(builder, owner)

def LogisticsSupport_FullAddLogisticsRemarks(builder, logisticsRemarks):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsRemarks), 0)

def AddLogisticsRemarks(builder, logisticsRemarks):
    LogisticsSupport_FullAddLogisticsRemarks(builder, logisticsRemarks)

def LogisticsSupport_FullStartLogisticsRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsRemarksVector(builder, numElems):
    return LogisticsSupport_FullStartLogisticsRemarksVector(builder, numElems)

def LogisticsSupport_FullAddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsDiscrepancyInfos), 0)

def AddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos):
    LogisticsSupport_FullAddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos)

def LogisticsSupport_FullStartLogisticsDiscrepancyInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsDiscrepancyInfosVector(builder, numElems):
    return LogisticsSupport_FullStartLogisticsDiscrepancyInfosVector(builder, numElems)

def LogisticsSupport_FullAddLogisticsTransportationPlans(builder, logisticsTransportationPlans):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsTransportationPlans), 0)

def AddLogisticsTransportationPlans(builder, logisticsTransportationPlans):
    LogisticsSupport_FullAddLogisticsTransportationPlans(builder, logisticsTransportationPlans)

def LogisticsSupport_FullStartLogisticsTransportationPlansVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsTransportationPlansVector(builder, numElems):
    return LogisticsSupport_FullStartLogisticsTransportationPlansVector(builder, numElems)

def LogisticsSupport_FullAddLogisticsSupportItems(builder, logisticsSupportItems):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsSupportItems), 0)

def AddLogisticsSupportItems(builder, logisticsSupportItems):
    LogisticsSupport_FullAddLogisticsSupportItems(builder, logisticsSupportItems)

def LogisticsSupport_FullStartLogisticsSupportItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsSupportItemsVector(builder, numElems):
    return LogisticsSupport_FullStartLogisticsSupportItemsVector(builder, numElems)

def LogisticsSupport_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LogisticsSupport_FullAddOrigNetwork(builder, origNetwork)

def LogisticsSupport_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LogisticsSupport_FullAddCreatedAt(builder, createdAt)

def LogisticsSupport_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LogisticsSupport_FullAddCreatedBy(builder, createdBy)

def LogisticsSupport_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    LogisticsSupport_FullAddUpdatedAt(builder, updatedAt)

def LogisticsSupport_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    LogisticsSupport_FullAddUpdatedBy(builder, updatedBy)

def LogisticsSupport_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LogisticsSupport_FullAddSource(builder, source)

def LogisticsSupport_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LogisticsSupport_FullAddOrigin(builder, origin)

def LogisticsSupport_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(29, dataMode, 0)

def AddDataMode(builder, dataMode):
    LogisticsSupport_FullAddDataMode(builder, dataMode)

def LogisticsSupport_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsSupport_FullEnd(builder)

try:
    from typing import List
except:
    pass

class LogisticsSupport_FullT(object):

    # LogisticsSupport_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.extSystemId = None  # type: str
        self.tailNumber = None  # type: str
        self.aircraftMds = None  # type: str
        self.currIcao = None  # type: str
        self.suppIcao = None  # type: str
        self.rptCreatedTime = None  # type: str
        self.rptClosedTime = None  # type: str
        self.meTime = None  # type: str
        self.mcTime = None  # type: str
        self.logisticAction = None  # type: str
        self.logisticsRecordId = None  # type: str
        self.etic = None  # type: str
        self.etmc = None  # type: str
        self.maintStatusCode = None  # type: str
        self.reopenFlag = False  # type: bool
        self.owner = None  # type: str
        self.logisticsRemarks = None  # type: List[str]
        self.logisticsDiscrepancyInfos = None  # type: List[str]
        self.logisticsTransportationPlans = None  # type: List[str]
        self.logisticsSupportItems = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsSupportFull = LogisticsSupport_Full()
        logisticsSupportFull.Init(buf, pos)
        return cls.InitFromObj(logisticsSupportFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsSupportFull):
        x = LogisticsSupport_FullT()
        x._UnPack(logisticsSupportFull)
        return x

    # LogisticsSupport_FullT
    def _UnPack(self, logisticsSupportFull):
        if logisticsSupportFull is None:
            return
        self.id = logisticsSupportFull.Id()
        self.classificationMarking = logisticsSupportFull.ClassificationMarking()
        self.extSystemId = logisticsSupportFull.ExtSystemId()
        self.tailNumber = logisticsSupportFull.TailNumber()
        self.aircraftMds = logisticsSupportFull.AircraftMds()
        self.currIcao = logisticsSupportFull.CurrIcao()
        self.suppIcao = logisticsSupportFull.SuppIcao()
        self.rptCreatedTime = logisticsSupportFull.RptCreatedTime()
        self.rptClosedTime = logisticsSupportFull.RptClosedTime()
        self.meTime = logisticsSupportFull.MeTime()
        self.mcTime = logisticsSupportFull.McTime()
        self.logisticAction = logisticsSupportFull.LogisticAction()
        self.logisticsRecordId = logisticsSupportFull.LogisticsRecordId()
        self.etic = logisticsSupportFull.Etic()
        self.etmc = logisticsSupportFull.Etmc()
        self.maintStatusCode = logisticsSupportFull.MaintStatusCode()
        self.reopenFlag = logisticsSupportFull.ReopenFlag()
        self.owner = logisticsSupportFull.Owner()
        if not logisticsSupportFull.LogisticsRemarksIsNone():
            self.logisticsRemarks = []
            for i in range(logisticsSupportFull.LogisticsRemarksLength()):
                self.logisticsRemarks.append(logisticsSupportFull.LogisticsRemarks(i))
        if not logisticsSupportFull.LogisticsDiscrepancyInfosIsNone():
            self.logisticsDiscrepancyInfos = []
            for i in range(logisticsSupportFull.LogisticsDiscrepancyInfosLength()):
                self.logisticsDiscrepancyInfos.append(logisticsSupportFull.LogisticsDiscrepancyInfos(i))
        if not logisticsSupportFull.LogisticsTransportationPlansIsNone():
            self.logisticsTransportationPlans = []
            for i in range(logisticsSupportFull.LogisticsTransportationPlansLength()):
                self.logisticsTransportationPlans.append(logisticsSupportFull.LogisticsTransportationPlans(i))
        if not logisticsSupportFull.LogisticsSupportItemsIsNone():
            self.logisticsSupportItems = []
            for i in range(logisticsSupportFull.LogisticsSupportItemsLength()):
                self.logisticsSupportItems.append(logisticsSupportFull.LogisticsSupportItems(i))
        self.origNetwork = logisticsSupportFull.OrigNetwork()
        self.createdAt = logisticsSupportFull.CreatedAt()
        self.createdBy = logisticsSupportFull.CreatedBy()
        self.updatedAt = logisticsSupportFull.UpdatedAt()
        self.updatedBy = logisticsSupportFull.UpdatedBy()
        self.source = logisticsSupportFull.Source()
        self.origin = logisticsSupportFull.Origin()
        self.dataMode = logisticsSupportFull.DataMode()

    # LogisticsSupport_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.extSystemId is not None:
            extSystemId = builder.CreateString(self.extSystemId)
        if self.tailNumber is not None:
            tailNumber = builder.CreateString(self.tailNumber)
        if self.aircraftMds is not None:
            aircraftMds = builder.CreateString(self.aircraftMds)
        if self.currIcao is not None:
            currIcao = builder.CreateString(self.currIcao)
        if self.suppIcao is not None:
            suppIcao = builder.CreateString(self.suppIcao)
        if self.rptCreatedTime is not None:
            rptCreatedTime = builder.CreateString(self.rptCreatedTime)
        if self.rptClosedTime is not None:
            rptClosedTime = builder.CreateString(self.rptClosedTime)
        if self.meTime is not None:
            meTime = builder.CreateString(self.meTime)
        if self.mcTime is not None:
            mcTime = builder.CreateString(self.mcTime)
        if self.logisticAction is not None:
            logisticAction = builder.CreateString(self.logisticAction)
        if self.logisticsRecordId is not None:
            logisticsRecordId = builder.CreateString(self.logisticsRecordId)
        if self.etic is not None:
            etic = builder.CreateString(self.etic)
        if self.etmc is not None:
            etmc = builder.CreateString(self.etmc)
        if self.maintStatusCode is not None:
            maintStatusCode = builder.CreateString(self.maintStatusCode)
        if self.owner is not None:
            owner = builder.CreateString(self.owner)
        if self.logisticsRemarks is not None:
            logisticsRemarkslist = []
            for i in range(len(self.logisticsRemarks)):
                logisticsRemarkslist.append(builder.CreateString(self.logisticsRemarks[i]))
            LogisticsSupport_FullStartLogisticsRemarksVector(builder, len(self.logisticsRemarks))
            for i in reversed(range(len(self.logisticsRemarks))):
                builder.PrependUOffsetTRelative(logisticsRemarkslist[i])
            logisticsRemarks = builder.EndVector()
        if self.logisticsDiscrepancyInfos is not None:
            logisticsDiscrepancyInfoslist = []
            for i in range(len(self.logisticsDiscrepancyInfos)):
                logisticsDiscrepancyInfoslist.append(builder.CreateString(self.logisticsDiscrepancyInfos[i]))
            LogisticsSupport_FullStartLogisticsDiscrepancyInfosVector(builder, len(self.logisticsDiscrepancyInfos))
            for i in reversed(range(len(self.logisticsDiscrepancyInfos))):
                builder.PrependUOffsetTRelative(logisticsDiscrepancyInfoslist[i])
            logisticsDiscrepancyInfos = builder.EndVector()
        if self.logisticsTransportationPlans is not None:
            logisticsTransportationPlanslist = []
            for i in range(len(self.logisticsTransportationPlans)):
                logisticsTransportationPlanslist.append(builder.CreateString(self.logisticsTransportationPlans[i]))
            LogisticsSupport_FullStartLogisticsTransportationPlansVector(builder, len(self.logisticsTransportationPlans))
            for i in reversed(range(len(self.logisticsTransportationPlans))):
                builder.PrependUOffsetTRelative(logisticsTransportationPlanslist[i])
            logisticsTransportationPlans = builder.EndVector()
        if self.logisticsSupportItems is not None:
            logisticsSupportItemslist = []
            for i in range(len(self.logisticsSupportItems)):
                logisticsSupportItemslist.append(builder.CreateString(self.logisticsSupportItems[i]))
            LogisticsSupport_FullStartLogisticsSupportItemsVector(builder, len(self.logisticsSupportItems))
            for i in reversed(range(len(self.logisticsSupportItems))):
                builder.PrependUOffsetTRelative(logisticsSupportItemslist[i])
            logisticsSupportItems = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        LogisticsSupport_FullStart(builder)
        if self.id is not None:
            LogisticsSupport_FullAddId(builder, id)
        if self.classificationMarking is not None:
            LogisticsSupport_FullAddClassificationMarking(builder, classificationMarking)
        if self.extSystemId is not None:
            LogisticsSupport_FullAddExtSystemId(builder, extSystemId)
        if self.tailNumber is not None:
            LogisticsSupport_FullAddTailNumber(builder, tailNumber)
        if self.aircraftMds is not None:
            LogisticsSupport_FullAddAircraftMds(builder, aircraftMds)
        if self.currIcao is not None:
            LogisticsSupport_FullAddCurrIcao(builder, currIcao)
        if self.suppIcao is not None:
            LogisticsSupport_FullAddSuppIcao(builder, suppIcao)
        if self.rptCreatedTime is not None:
            LogisticsSupport_FullAddRptCreatedTime(builder, rptCreatedTime)
        if self.rptClosedTime is not None:
            LogisticsSupport_FullAddRptClosedTime(builder, rptClosedTime)
        if self.meTime is not None:
            LogisticsSupport_FullAddMeTime(builder, meTime)
        if self.mcTime is not None:
            LogisticsSupport_FullAddMcTime(builder, mcTime)
        if self.logisticAction is not None:
            LogisticsSupport_FullAddLogisticAction(builder, logisticAction)
        if self.logisticsRecordId is not None:
            LogisticsSupport_FullAddLogisticsRecordId(builder, logisticsRecordId)
        if self.etic is not None:
            LogisticsSupport_FullAddEtic(builder, etic)
        if self.etmc is not None:
            LogisticsSupport_FullAddEtmc(builder, etmc)
        if self.maintStatusCode is not None:
            LogisticsSupport_FullAddMaintStatusCode(builder, maintStatusCode)
        LogisticsSupport_FullAddReopenFlag(builder, self.reopenFlag)
        if self.owner is not None:
            LogisticsSupport_FullAddOwner(builder, owner)
        if self.logisticsRemarks is not None:
            LogisticsSupport_FullAddLogisticsRemarks(builder, logisticsRemarks)
        if self.logisticsDiscrepancyInfos is not None:
            LogisticsSupport_FullAddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos)
        if self.logisticsTransportationPlans is not None:
            LogisticsSupport_FullAddLogisticsTransportationPlans(builder, logisticsTransportationPlans)
        if self.logisticsSupportItems is not None:
            LogisticsSupport_FullAddLogisticsSupportItems(builder, logisticsSupportItems)
        if self.origNetwork is not None:
            LogisticsSupport_FullAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            LogisticsSupport_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LogisticsSupport_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            LogisticsSupport_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            LogisticsSupport_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            LogisticsSupport_FullAddSource(builder, source)
        if self.origin is not None:
            LogisticsSupport_FullAddOrigin(builder, origin)
        LogisticsSupport_FullAddDataMode(builder, self.dataMode)
        logisticsSupportFull = LogisticsSupport_FullEnd(builder)
        return logisticsSupportFull
