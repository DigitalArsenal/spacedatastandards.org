# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// ISR Collection data.
class ISRCollection_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollection_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollection_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollection_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollection_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ISRCOLLECTION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # ISRCollection_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # ISRCollection_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version of the IDEX software the request came from for compatibility.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def IdexVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Human readable Mission Name.
    # Example: /// Example: Example mission name
    # Constraints: Minimum length = 0, Maximum length = 128
    # ISRCollection_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission Identifier.
    # Example: /// Example: myTask-2020-04-23T00:00:00.000Z
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designation of mission Area Of Responsibility.
    # Example: /// Example: Kandahar
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionAor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Primary type of intelligence to be collected during the mission.
    # Example: /// Example: Sig
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionPrimaryIntelDiscipline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sub category of primary intelligence to be collected.
    # Example: /// Example: FMV
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionPrimarySubCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of intelligence to be collected second.
    # Example: /// Example: Intelligence_2
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionSecondaryIntelDiscipline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission sub category for secondary intelligence discipline to be collected.
    # Example: /// Example: Convoy
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionSecondarySubCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # What is the primary objective(Role) of this mission.
    # Example: /// Example: Targeting of Lead Vehicle
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission operation name.
    # Example: /// Example: OP-HONEY-BADGER
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionOperation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission Priority (1-n).
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def MissionPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Name of the Supporting unit/Location that is performing this mission.
    # Example: /// Example: ENVOYS
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionSupportedUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text version of what we are emphasizing in this mission.
    # Example: /// Example: Mission emphasis
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionEmphasis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def MissionStartPointLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 80.23
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def MissionStartPointLong(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mission geographical collection area.
    # Example: /// Example: Example collection area
    # Constraints: Minimum length = 0, Maximum length = 512
    # ISRCollection_Full
    def MissionCollectionArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Joint Operations Area.
    # Example: /// Example: Operation area
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionJoa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A synchronization matrix is used to organize the logistics synchronization process during a mission.
    # Example: /// Example: MATRIX
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionSyncMatrixBin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # ISRCollection_Full
    def MissionCountry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Region of the mission.
    # Example: /// Example: Example Region
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionRegion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subregion of the mission.
    # Example: /// Example: Example Subregion
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollection_Full
    def MissionSubRegion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission desired collection requirements.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def CollectionRequirements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollection_Full
    def CollectionRequirementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollection_Full
    def CollectionRequirementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Object for data dissemination.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def Transit(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollection_Full
    def TransitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollection_Full
    def TransitIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Individual taskings to complete the mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def Taskings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollection_Full
    def TaskingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollection_Full
    def TaskingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # ISRCollection_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # ISRCollection_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # ISRCollection_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # ISRCollection_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # ISRCollection_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # ISRCollection_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # ISRCollection_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ISRCollection_FullStart(builder):
    builder.StartObject(34)

def Start(builder):
    ISRCollection_FullStart(builder)

def ISRCollection_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ISRCollection_FullAddId(builder, id)

def ISRCollection_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    ISRCollection_FullAddClassificationMarking(builder, classificationMarking)

def ISRCollection_FullAddIdexVersion(builder, idexVersion):
    builder.PrependInt32Slot(2, idexVersion, 0)

def AddIdexVersion(builder, idexVersion):
    ISRCollection_FullAddIdexVersion(builder, idexVersion)

def ISRCollection_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ISRCollection_FullAddName(builder, name)

def ISRCollection_FullAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def AddMissionId(builder, missionId):
    ISRCollection_FullAddMissionId(builder, missionId)

def ISRCollection_FullAddMissionAor(builder, missionAor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(missionAor), 0)

def AddMissionAor(builder, missionAor):
    ISRCollection_FullAddMissionAor(builder, missionAor)

def ISRCollection_FullAddMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDiscipline):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionPrimaryIntelDiscipline), 0)

def AddMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDiscipline):
    ISRCollection_FullAddMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDiscipline)

def ISRCollection_FullAddMissionPrimarySubCategory(builder, missionPrimarySubCategory):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(missionPrimarySubCategory), 0)

def AddMissionPrimarySubCategory(builder, missionPrimarySubCategory):
    ISRCollection_FullAddMissionPrimarySubCategory(builder, missionPrimarySubCategory)

def ISRCollection_FullAddMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDiscipline):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionSecondaryIntelDiscipline), 0)

def AddMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDiscipline):
    ISRCollection_FullAddMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDiscipline)

def ISRCollection_FullAddMissionSecondarySubCategory(builder, missionSecondarySubCategory):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(missionSecondarySubCategory), 0)

def AddMissionSecondarySubCategory(builder, missionSecondarySubCategory):
    ISRCollection_FullAddMissionSecondarySubCategory(builder, missionSecondarySubCategory)

def ISRCollection_FullAddMissionRole(builder, missionRole):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(missionRole), 0)

def AddMissionRole(builder, missionRole):
    ISRCollection_FullAddMissionRole(builder, missionRole)

def ISRCollection_FullAddMissionOperation(builder, missionOperation):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(missionOperation), 0)

def AddMissionOperation(builder, missionOperation):
    ISRCollection_FullAddMissionOperation(builder, missionOperation)

def ISRCollection_FullAddMissionPriority(builder, missionPriority):
    builder.PrependInt32Slot(12, missionPriority, 0)

def AddMissionPriority(builder, missionPriority):
    ISRCollection_FullAddMissionPriority(builder, missionPriority)

def ISRCollection_FullAddMissionSupportedUnit(builder, missionSupportedUnit):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(missionSupportedUnit), 0)

def AddMissionSupportedUnit(builder, missionSupportedUnit):
    ISRCollection_FullAddMissionSupportedUnit(builder, missionSupportedUnit)

def ISRCollection_FullAddMissionEmphasis(builder, missionEmphasis):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(missionEmphasis), 0)

def AddMissionEmphasis(builder, missionEmphasis):
    ISRCollection_FullAddMissionEmphasis(builder, missionEmphasis)

def ISRCollection_FullAddMissionStartPointLat(builder, missionStartPointLat):
    builder.PrependFloat64Slot(15, missionStartPointLat, 0.0)

def AddMissionStartPointLat(builder, missionStartPointLat):
    ISRCollection_FullAddMissionStartPointLat(builder, missionStartPointLat)

def ISRCollection_FullAddMissionStartPointLong(builder, missionStartPointLong):
    builder.PrependFloat64Slot(16, missionStartPointLong, 0.0)

def AddMissionStartPointLong(builder, missionStartPointLong):
    ISRCollection_FullAddMissionStartPointLong(builder, missionStartPointLong)

def ISRCollection_FullAddMissionCollectionArea(builder, missionCollectionArea):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(missionCollectionArea), 0)

def AddMissionCollectionArea(builder, missionCollectionArea):
    ISRCollection_FullAddMissionCollectionArea(builder, missionCollectionArea)

def ISRCollection_FullAddMissionJoa(builder, missionJoa):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(missionJoa), 0)

def AddMissionJoa(builder, missionJoa):
    ISRCollection_FullAddMissionJoa(builder, missionJoa)

def ISRCollection_FullAddMissionSyncMatrixBin(builder, missionSyncMatrixBin):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(missionSyncMatrixBin), 0)

def AddMissionSyncMatrixBin(builder, missionSyncMatrixBin):
    ISRCollection_FullAddMissionSyncMatrixBin(builder, missionSyncMatrixBin)

def ISRCollection_FullAddMissionCountry(builder, missionCountry):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(missionCountry), 0)

def AddMissionCountry(builder, missionCountry):
    ISRCollection_FullAddMissionCountry(builder, missionCountry)

def ISRCollection_FullAddMissionRegion(builder, missionRegion):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(missionRegion), 0)

def AddMissionRegion(builder, missionRegion):
    ISRCollection_FullAddMissionRegion(builder, missionRegion)

def ISRCollection_FullAddMissionSubRegion(builder, missionSubRegion):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(missionSubRegion), 0)

def AddMissionSubRegion(builder, missionSubRegion):
    ISRCollection_FullAddMissionSubRegion(builder, missionSubRegion)

def ISRCollection_FullAddCollectionRequirements(builder, collectionRequirements):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(collectionRequirements), 0)

def AddCollectionRequirements(builder, collectionRequirements):
    ISRCollection_FullAddCollectionRequirements(builder, collectionRequirements)

def ISRCollection_FullStartCollectionRequirementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCollectionRequirementsVector(builder, numElems):
    return ISRCollection_FullStartCollectionRequirementsVector(builder, numElems)

def ISRCollection_FullAddTransit(builder, transit):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(transit), 0)

def AddTransit(builder, transit):
    ISRCollection_FullAddTransit(builder, transit)

def ISRCollection_FullStartTransitVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTransitVector(builder, numElems):
    return ISRCollection_FullStartTransitVector(builder, numElems)

def ISRCollection_FullAddTaskings(builder, taskings):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(taskings), 0)

def AddTaskings(builder, taskings):
    ISRCollection_FullAddTaskings(builder, taskings)

def ISRCollection_FullStartTaskingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTaskingsVector(builder, numElems):
    return ISRCollection_FullStartTaskingsVector(builder, numElems)

def ISRCollection_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    ISRCollection_FullAddCreatedAt(builder, createdAt)

def ISRCollection_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    ISRCollection_FullAddCreatedBy(builder, createdBy)

def ISRCollection_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    ISRCollection_FullAddUpdatedAt(builder, updatedAt)

def ISRCollection_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    ISRCollection_FullAddUpdatedBy(builder, updatedBy)

def ISRCollection_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    ISRCollection_FullAddSource(builder, source)

def ISRCollection_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    ISRCollection_FullAddOrigin(builder, origin)

def ISRCollection_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(32, dataMode, 0)

def AddDataMode(builder, dataMode):
    ISRCollection_FullAddDataMode(builder, dataMode)

def ISRCollection_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    ISRCollection_FullAddOrigNetwork(builder, origNetwork)

def ISRCollection_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollection_FullEnd(builder)

try:
    from typing import List
except:
    pass

class ISRCollection_FullT(object):

    # ISRCollection_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idexVersion = 0  # type: int
        self.name = None  # type: str
        self.missionId = None  # type: str
        self.missionAor = None  # type: str
        self.missionPrimaryIntelDiscipline = None  # type: str
        self.missionPrimarySubCategory = None  # type: str
        self.missionSecondaryIntelDiscipline = None  # type: str
        self.missionSecondarySubCategory = None  # type: str
        self.missionRole = None  # type: str
        self.missionOperation = None  # type: str
        self.missionPriority = 0  # type: int
        self.missionSupportedUnit = None  # type: str
        self.missionEmphasis = None  # type: str
        self.missionStartPointLat = 0.0  # type: float
        self.missionStartPointLong = 0.0  # type: float
        self.missionCollectionArea = None  # type: str
        self.missionJoa = None  # type: str
        self.missionSyncMatrixBin = None  # type: str
        self.missionCountry = None  # type: str
        self.missionRegion = None  # type: str
        self.missionSubRegion = None  # type: str
        self.collectionRequirements = None  # type: List[str]
        self.transit = None  # type: List[str]
        self.taskings = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionFull = ISRCollection_Full()
        isrcollectionFull.Init(buf, pos)
        return cls.InitFromObj(isrcollectionFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionFull):
        x = ISRCollection_FullT()
        x._UnPack(isrcollectionFull)
        return x

    # ISRCollection_FullT
    def _UnPack(self, isrcollectionFull):
        if isrcollectionFull is None:
            return
        self.id = isrcollectionFull.Id()
        self.classificationMarking = isrcollectionFull.ClassificationMarking()
        self.idexVersion = isrcollectionFull.IdexVersion()
        self.name = isrcollectionFull.Name()
        self.missionId = isrcollectionFull.MissionId()
        self.missionAor = isrcollectionFull.MissionAor()
        self.missionPrimaryIntelDiscipline = isrcollectionFull.MissionPrimaryIntelDiscipline()
        self.missionPrimarySubCategory = isrcollectionFull.MissionPrimarySubCategory()
        self.missionSecondaryIntelDiscipline = isrcollectionFull.MissionSecondaryIntelDiscipline()
        self.missionSecondarySubCategory = isrcollectionFull.MissionSecondarySubCategory()
        self.missionRole = isrcollectionFull.MissionRole()
        self.missionOperation = isrcollectionFull.MissionOperation()
        self.missionPriority = isrcollectionFull.MissionPriority()
        self.missionSupportedUnit = isrcollectionFull.MissionSupportedUnit()
        self.missionEmphasis = isrcollectionFull.MissionEmphasis()
        self.missionStartPointLat = isrcollectionFull.MissionStartPointLat()
        self.missionStartPointLong = isrcollectionFull.MissionStartPointLong()
        self.missionCollectionArea = isrcollectionFull.MissionCollectionArea()
        self.missionJoa = isrcollectionFull.MissionJoa()
        self.missionSyncMatrixBin = isrcollectionFull.MissionSyncMatrixBin()
        self.missionCountry = isrcollectionFull.MissionCountry()
        self.missionRegion = isrcollectionFull.MissionRegion()
        self.missionSubRegion = isrcollectionFull.MissionSubRegion()
        if not isrcollectionFull.CollectionRequirementsIsNone():
            self.collectionRequirements = []
            for i in range(isrcollectionFull.CollectionRequirementsLength()):
                self.collectionRequirements.append(isrcollectionFull.CollectionRequirements(i))
        if not isrcollectionFull.TransitIsNone():
            self.transit = []
            for i in range(isrcollectionFull.TransitLength()):
                self.transit.append(isrcollectionFull.Transit(i))
        if not isrcollectionFull.TaskingsIsNone():
            self.taskings = []
            for i in range(isrcollectionFull.TaskingsLength()):
                self.taskings.append(isrcollectionFull.Taskings(i))
        self.createdAt = isrcollectionFull.CreatedAt()
        self.createdBy = isrcollectionFull.CreatedBy()
        self.updatedAt = isrcollectionFull.UpdatedAt()
        self.updatedBy = isrcollectionFull.UpdatedBy()
        self.source = isrcollectionFull.Source()
        self.origin = isrcollectionFull.Origin()
        self.dataMode = isrcollectionFull.DataMode()
        self.origNetwork = isrcollectionFull.OrigNetwork()

    # ISRCollection_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.missionId is not None:
            missionId = builder.CreateString(self.missionId)
        if self.missionAor is not None:
            missionAor = builder.CreateString(self.missionAor)
        if self.missionPrimaryIntelDiscipline is not None:
            missionPrimaryIntelDiscipline = builder.CreateString(self.missionPrimaryIntelDiscipline)
        if self.missionPrimarySubCategory is not None:
            missionPrimarySubCategory = builder.CreateString(self.missionPrimarySubCategory)
        if self.missionSecondaryIntelDiscipline is not None:
            missionSecondaryIntelDiscipline = builder.CreateString(self.missionSecondaryIntelDiscipline)
        if self.missionSecondarySubCategory is not None:
            missionSecondarySubCategory = builder.CreateString(self.missionSecondarySubCategory)
        if self.missionRole is not None:
            missionRole = builder.CreateString(self.missionRole)
        if self.missionOperation is not None:
            missionOperation = builder.CreateString(self.missionOperation)
        if self.missionSupportedUnit is not None:
            missionSupportedUnit = builder.CreateString(self.missionSupportedUnit)
        if self.missionEmphasis is not None:
            missionEmphasis = builder.CreateString(self.missionEmphasis)
        if self.missionCollectionArea is not None:
            missionCollectionArea = builder.CreateString(self.missionCollectionArea)
        if self.missionJoa is not None:
            missionJoa = builder.CreateString(self.missionJoa)
        if self.missionSyncMatrixBin is not None:
            missionSyncMatrixBin = builder.CreateString(self.missionSyncMatrixBin)
        if self.missionCountry is not None:
            missionCountry = builder.CreateString(self.missionCountry)
        if self.missionRegion is not None:
            missionRegion = builder.CreateString(self.missionRegion)
        if self.missionSubRegion is not None:
            missionSubRegion = builder.CreateString(self.missionSubRegion)
        if self.collectionRequirements is not None:
            collectionRequirementslist = []
            for i in range(len(self.collectionRequirements)):
                collectionRequirementslist.append(builder.CreateString(self.collectionRequirements[i]))
            ISRCollection_FullStartCollectionRequirementsVector(builder, len(self.collectionRequirements))
            for i in reversed(range(len(self.collectionRequirements))):
                builder.PrependUOffsetTRelative(collectionRequirementslist[i])
            collectionRequirements = builder.EndVector()
        if self.transit is not None:
            transitlist = []
            for i in range(len(self.transit)):
                transitlist.append(builder.CreateString(self.transit[i]))
            ISRCollection_FullStartTransitVector(builder, len(self.transit))
            for i in reversed(range(len(self.transit))):
                builder.PrependUOffsetTRelative(transitlist[i])
            transit = builder.EndVector()
        if self.taskings is not None:
            taskingslist = []
            for i in range(len(self.taskings)):
                taskingslist.append(builder.CreateString(self.taskings[i]))
            ISRCollection_FullStartTaskingsVector(builder, len(self.taskings))
            for i in reversed(range(len(self.taskings))):
                builder.PrependUOffsetTRelative(taskingslist[i])
            taskings = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        ISRCollection_FullStart(builder)
        if self.id is not None:
            ISRCollection_FullAddId(builder, id)
        if self.classificationMarking is not None:
            ISRCollection_FullAddClassificationMarking(builder, classificationMarking)
        ISRCollection_FullAddIdexVersion(builder, self.idexVersion)
        if self.name is not None:
            ISRCollection_FullAddName(builder, name)
        if self.missionId is not None:
            ISRCollection_FullAddMissionId(builder, missionId)
        if self.missionAor is not None:
            ISRCollection_FullAddMissionAor(builder, missionAor)
        if self.missionPrimaryIntelDiscipline is not None:
            ISRCollection_FullAddMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDiscipline)
        if self.missionPrimarySubCategory is not None:
            ISRCollection_FullAddMissionPrimarySubCategory(builder, missionPrimarySubCategory)
        if self.missionSecondaryIntelDiscipline is not None:
            ISRCollection_FullAddMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDiscipline)
        if self.missionSecondarySubCategory is not None:
            ISRCollection_FullAddMissionSecondarySubCategory(builder, missionSecondarySubCategory)
        if self.missionRole is not None:
            ISRCollection_FullAddMissionRole(builder, missionRole)
        if self.missionOperation is not None:
            ISRCollection_FullAddMissionOperation(builder, missionOperation)
        ISRCollection_FullAddMissionPriority(builder, self.missionPriority)
        if self.missionSupportedUnit is not None:
            ISRCollection_FullAddMissionSupportedUnit(builder, missionSupportedUnit)
        if self.missionEmphasis is not None:
            ISRCollection_FullAddMissionEmphasis(builder, missionEmphasis)
        ISRCollection_FullAddMissionStartPointLat(builder, self.missionStartPointLat)
        ISRCollection_FullAddMissionStartPointLong(builder, self.missionStartPointLong)
        if self.missionCollectionArea is not None:
            ISRCollection_FullAddMissionCollectionArea(builder, missionCollectionArea)
        if self.missionJoa is not None:
            ISRCollection_FullAddMissionJoa(builder, missionJoa)
        if self.missionSyncMatrixBin is not None:
            ISRCollection_FullAddMissionSyncMatrixBin(builder, missionSyncMatrixBin)
        if self.missionCountry is not None:
            ISRCollection_FullAddMissionCountry(builder, missionCountry)
        if self.missionRegion is not None:
            ISRCollection_FullAddMissionRegion(builder, missionRegion)
        if self.missionSubRegion is not None:
            ISRCollection_FullAddMissionSubRegion(builder, missionSubRegion)
        if self.collectionRequirements is not None:
            ISRCollection_FullAddCollectionRequirements(builder, collectionRequirements)
        if self.transit is not None:
            ISRCollection_FullAddTransit(builder, transit)
        if self.taskings is not None:
            ISRCollection_FullAddTaskings(builder, taskings)
        if self.createdAt is not None:
            ISRCollection_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            ISRCollection_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            ISRCollection_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            ISRCollection_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            ISRCollection_FullAddSource(builder, source)
        if self.origin is not None:
            ISRCollection_FullAddOrigin(builder, origin)
        ISRCollection_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            ISRCollection_FullAddOrigNetwork(builder, origNetwork)
        isrcollectionFull = ISRCollection_FullEnd(builder)
        return isrcollectionFull
