# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
class CollectResponse_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CollectResponse_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCollectResponse_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CollectResponse_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x4C\x4C", size_prefixed=size_prefixed)

    # CollectResponse_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: COLLECTRESPONSE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # CollectResponse_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # CollectResponse_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the request associated with this response.
    # Example: /// Example: REF-REQUEST-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # CollectResponse_Abridged
    def IdRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object associated with this response.
    # Example: /// Example: REF-ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 101
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional task ID associated with the request/response.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent plan or schedule associated with the request/response.
    # Example: /// Example: REF-PLAN-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def IdPlan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
    # Example: /// Example: EXTERNAL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
    # ACCEPTED: The collect or contact request has been received and accepted.
    # CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
    # COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
    # COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
    # DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
    # FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
    # PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
    # PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
    # REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
    # SCHEDULED: The request was received and has been scheduled for execution.
    # Example: /// Example: ACCEPTED
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual start time of the collect or contact, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def ActualStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual end time of the collect or contact, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T18:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def ActualEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Proposed alternative start time, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def AltStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Proposed alternative end time, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T18:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def AltEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Error code associated with this request/response.
    # Example: /// Example: ERROR CODE
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def ErrCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
    # Example: /// Example: ['DOA', 'DWELL']
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CollectResponse_Abridged
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CollectResponse_Abridged
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
    # Example: /// Example: ['DOA_ID', 'DWELL_ID']
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CollectResponse_Abridged
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CollectResponse_Abridged
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Notes or comments associated with this response.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # CollectResponse_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # CollectResponse_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # CollectResponse_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # CollectResponse_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # CollectResponse_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # CollectResponse_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: REF-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectResponse_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # CollectResponse_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # CollectResponse_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def CollectResponse_AbridgedStart(builder):
    builder.StartObject(26)

def Start(builder):
    CollectResponse_AbridgedStart(builder)

def CollectResponse_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    CollectResponse_AbridgedAddId(builder, id)

def CollectResponse_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    CollectResponse_AbridgedAddClassificationMarking(builder, classificationMarking)

def CollectResponse_AbridgedAddIdRequest(builder, idRequest):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idRequest), 0)

def AddIdRequest(builder, idRequest):
    CollectResponse_AbridgedAddIdRequest(builder, idRequest)

def CollectResponse_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    CollectResponse_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def CollectResponse_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    CollectResponse_AbridgedAddOrigObjectId(builder, origObjectId)

def CollectResponse_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(5, satNo, 0)

def AddSatNo(builder, satNo):
    CollectResponse_AbridgedAddSatNo(builder, satNo)

def CollectResponse_AbridgedAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    CollectResponse_AbridgedAddTaskId(builder, taskId)

def CollectResponse_AbridgedAddIdPlan(builder, idPlan):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idPlan), 0)

def AddIdPlan(builder, idPlan):
    CollectResponse_AbridgedAddIdPlan(builder, idPlan)

def CollectResponse_AbridgedAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    CollectResponse_AbridgedAddExternalId(builder, externalId)

def CollectResponse_AbridgedAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    CollectResponse_AbridgedAddStatus(builder, status)

def CollectResponse_AbridgedAddActualStartTime(builder, actualStartTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(actualStartTime), 0)

def AddActualStartTime(builder, actualStartTime):
    CollectResponse_AbridgedAddActualStartTime(builder, actualStartTime)

def CollectResponse_AbridgedAddActualEndTime(builder, actualEndTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(actualEndTime), 0)

def AddActualEndTime(builder, actualEndTime):
    CollectResponse_AbridgedAddActualEndTime(builder, actualEndTime)

def CollectResponse_AbridgedAddAltStartTime(builder, altStartTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(altStartTime), 0)

def AddAltStartTime(builder, altStartTime):
    CollectResponse_AbridgedAddAltStartTime(builder, altStartTime)

def CollectResponse_AbridgedAddAltEndTime(builder, altEndTime):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(altEndTime), 0)

def AddAltEndTime(builder, altEndTime):
    CollectResponse_AbridgedAddAltEndTime(builder, altEndTime)

def CollectResponse_AbridgedAddErrCode(builder, errCode):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(errCode), 0)

def AddErrCode(builder, errCode):
    CollectResponse_AbridgedAddErrCode(builder, errCode)

def CollectResponse_AbridgedAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    CollectResponse_AbridgedAddSrcTyps(builder, srcTyps)

def CollectResponse_AbridgedStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return CollectResponse_AbridgedStartSrcTypsVector(builder, numElems)

def CollectResponse_AbridgedAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    CollectResponse_AbridgedAddSrcIds(builder, srcIds)

def CollectResponse_AbridgedStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return CollectResponse_AbridgedStartSrcIdsVector(builder, numElems)

def CollectResponse_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    CollectResponse_AbridgedAddNotes(builder, notes)

def CollectResponse_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    CollectResponse_AbridgedAddCreatedAt(builder, createdAt)

def CollectResponse_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    CollectResponse_AbridgedAddCreatedBy(builder, createdBy)

def CollectResponse_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    CollectResponse_AbridgedAddSource(builder, source)

def CollectResponse_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    CollectResponse_AbridgedAddOrigin(builder, origin)

def CollectResponse_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    CollectResponse_AbridgedAddOrigNetwork(builder, origNetwork)

def CollectResponse_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    CollectResponse_AbridgedAddIdSensor(builder, idSensor)

def CollectResponse_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    CollectResponse_AbridgedAddOrigSensorId(builder, origSensorId)

def CollectResponse_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(25, dataMode, 0)

def AddDataMode(builder, dataMode):
    CollectResponse_AbridgedAddDataMode(builder, dataMode)

def CollectResponse_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return CollectResponse_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class CollectResponse_AbridgedT(object):

    # CollectResponse_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idRequest = None  # type: str
        self.idOnOrbit = None  # type: str
        self.origObjectId = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.idPlan = None  # type: str
        self.externalId = None  # type: str
        self.status = None  # type: str
        self.actualStartTime = None  # type: str
        self.actualEndTime = None  # type: str
        self.altStartTime = None  # type: str
        self.altEndTime = None  # type: str
        self.errCode = None  # type: str
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        collectResponseAbridged = CollectResponse_Abridged()
        collectResponseAbridged.Init(buf, pos)
        return cls.InitFromObj(collectResponseAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, collectResponseAbridged):
        x = CollectResponse_AbridgedT()
        x._UnPack(collectResponseAbridged)
        return x

    # CollectResponse_AbridgedT
    def _UnPack(self, collectResponseAbridged):
        if collectResponseAbridged is None:
            return
        self.id = collectResponseAbridged.Id()
        self.classificationMarking = collectResponseAbridged.ClassificationMarking()
        self.idRequest = collectResponseAbridged.IdRequest()
        self.idOnOrbit = collectResponseAbridged.IdOnOrbit()
        self.origObjectId = collectResponseAbridged.OrigObjectId()
        self.satNo = collectResponseAbridged.SatNo()
        self.taskId = collectResponseAbridged.TaskId()
        self.idPlan = collectResponseAbridged.IdPlan()
        self.externalId = collectResponseAbridged.ExternalId()
        self.status = collectResponseAbridged.Status()
        self.actualStartTime = collectResponseAbridged.ActualStartTime()
        self.actualEndTime = collectResponseAbridged.ActualEndTime()
        self.altStartTime = collectResponseAbridged.AltStartTime()
        self.altEndTime = collectResponseAbridged.AltEndTime()
        self.errCode = collectResponseAbridged.ErrCode()
        if not collectResponseAbridged.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(collectResponseAbridged.SrcTypsLength()):
                self.srcTyps.append(collectResponseAbridged.SrcTyps(i))
        if not collectResponseAbridged.SrcIdsIsNone():
            self.srcIds = []
            for i in range(collectResponseAbridged.SrcIdsLength()):
                self.srcIds.append(collectResponseAbridged.SrcIds(i))
        self.notes = collectResponseAbridged.Notes()
        self.createdAt = collectResponseAbridged.CreatedAt()
        self.createdBy = collectResponseAbridged.CreatedBy()
        self.source = collectResponseAbridged.Source()
        self.origin = collectResponseAbridged.Origin()
        self.origNetwork = collectResponseAbridged.OrigNetwork()
        self.idSensor = collectResponseAbridged.IdSensor()
        self.origSensorId = collectResponseAbridged.OrigSensorId()
        self.dataMode = collectResponseAbridged.DataMode()

    # CollectResponse_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idRequest is not None:
            idRequest = builder.CreateString(self.idRequest)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.idPlan is not None:
            idPlan = builder.CreateString(self.idPlan)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.actualStartTime is not None:
            actualStartTime = builder.CreateString(self.actualStartTime)
        if self.actualEndTime is not None:
            actualEndTime = builder.CreateString(self.actualEndTime)
        if self.altStartTime is not None:
            altStartTime = builder.CreateString(self.altStartTime)
        if self.altEndTime is not None:
            altEndTime = builder.CreateString(self.altEndTime)
        if self.errCode is not None:
            errCode = builder.CreateString(self.errCode)
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            CollectResponse_AbridgedStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            CollectResponse_AbridgedStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        CollectResponse_AbridgedStart(builder)
        if self.id is not None:
            CollectResponse_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            CollectResponse_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idRequest is not None:
            CollectResponse_AbridgedAddIdRequest(builder, idRequest)
        if self.idOnOrbit is not None:
            CollectResponse_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.origObjectId is not None:
            CollectResponse_AbridgedAddOrigObjectId(builder, origObjectId)
        CollectResponse_AbridgedAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            CollectResponse_AbridgedAddTaskId(builder, taskId)
        if self.idPlan is not None:
            CollectResponse_AbridgedAddIdPlan(builder, idPlan)
        if self.externalId is not None:
            CollectResponse_AbridgedAddExternalId(builder, externalId)
        if self.status is not None:
            CollectResponse_AbridgedAddStatus(builder, status)
        if self.actualStartTime is not None:
            CollectResponse_AbridgedAddActualStartTime(builder, actualStartTime)
        if self.actualEndTime is not None:
            CollectResponse_AbridgedAddActualEndTime(builder, actualEndTime)
        if self.altStartTime is not None:
            CollectResponse_AbridgedAddAltStartTime(builder, altStartTime)
        if self.altEndTime is not None:
            CollectResponse_AbridgedAddAltEndTime(builder, altEndTime)
        if self.errCode is not None:
            CollectResponse_AbridgedAddErrCode(builder, errCode)
        if self.srcTyps is not None:
            CollectResponse_AbridgedAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            CollectResponse_AbridgedAddSrcIds(builder, srcIds)
        if self.notes is not None:
            CollectResponse_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            CollectResponse_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            CollectResponse_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            CollectResponse_AbridgedAddSource(builder, source)
        if self.origin is not None:
            CollectResponse_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            CollectResponse_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.idSensor is not None:
            CollectResponse_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            CollectResponse_AbridgedAddOrigSensorId(builder, origSensorId)
        CollectResponse_AbridgedAddDataMode(builder, self.dataMode)
        collectResponseAbridged = CollectResponse_AbridgedEnd(builder)
        return collectResponseAbridged
