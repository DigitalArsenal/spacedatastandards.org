# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Minimum and maximum altitude bounds for the track.
class AltitudeBlocks_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AltitudeBlocks_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAltitudeBlocks_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AltitudeBlocks_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x4C\x54\x49", size_prefixed=size_prefixed)

    # AltitudeBlocks_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sequencing field for the altitude block.
    # Example: /// Example: A1
    # Constraints: Minimum length = 0, Maximum length = 24
    # AltitudeBlocks_Ingest
    def AltitudeSequenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Lowest altitude of the track route altitude block above mean sea level in feet.
    # Example: /// Example: 27000.1
    # Constraints: No constraints specified.
    # AltitudeBlocks_Ingest
    def LowerAltitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Highest altitude of the track route altitude block above mean sea level in feet.
    # Example: /// Example: 27200.5
    # Constraints: No constraints specified.
    # AltitudeBlocks_Ingest
    def UpperAltitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AltitudeBlocks_IngestStart(builder):
    builder.StartObject(3)

def Start(builder):
    AltitudeBlocks_IngestStart(builder)

def AltitudeBlocks_IngestAddAltitudeSequenceId(builder, altitudeSequenceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(altitudeSequenceId), 0)

def AddAltitudeSequenceId(builder, altitudeSequenceId):
    AltitudeBlocks_IngestAddAltitudeSequenceId(builder, altitudeSequenceId)

def AltitudeBlocks_IngestAddLowerAltitude(builder, lowerAltitude):
    builder.PrependFloat64Slot(1, lowerAltitude, 0.0)

def AddLowerAltitude(builder, lowerAltitude):
    AltitudeBlocks_IngestAddLowerAltitude(builder, lowerAltitude)

def AltitudeBlocks_IngestAddUpperAltitude(builder, upperAltitude):
    builder.PrependFloat64Slot(2, upperAltitude, 0.0)

def AddUpperAltitude(builder, upperAltitude):
    AltitudeBlocks_IngestAddUpperAltitude(builder, upperAltitude)

def AltitudeBlocks_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AltitudeBlocks_IngestEnd(builder)


class AltitudeBlocks_IngestT(object):

    # AltitudeBlocks_IngestT
    def __init__(self):
        self.altitudeSequenceId = None  # type: str
        self.lowerAltitude = 0.0  # type: float
        self.upperAltitude = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        altitudeBlocksIngest = AltitudeBlocks_Ingest()
        altitudeBlocksIngest.Init(buf, pos)
        return cls.InitFromObj(altitudeBlocksIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, altitudeBlocksIngest):
        x = AltitudeBlocks_IngestT()
        x._UnPack(altitudeBlocksIngest)
        return x

    # AltitudeBlocks_IngestT
    def _UnPack(self, altitudeBlocksIngest):
        if altitudeBlocksIngest is None:
            return
        self.altitudeSequenceId = altitudeBlocksIngest.AltitudeSequenceId()
        self.lowerAltitude = altitudeBlocksIngest.LowerAltitude()
        self.upperAltitude = altitudeBlocksIngest.UpperAltitude()

    # AltitudeBlocks_IngestT
    def Pack(self, builder):
        if self.altitudeSequenceId is not None:
            altitudeSequenceId = builder.CreateString(self.altitudeSequenceId)
        AltitudeBlocks_IngestStart(builder)
        if self.altitudeSequenceId is not None:
            AltitudeBlocks_IngestAddAltitudeSequenceId(builder, altitudeSequenceId)
        AltitudeBlocks_IngestAddLowerAltitude(builder, self.lowerAltitude)
        AltitudeBlocks_IngestAddUpperAltitude(builder, self.upperAltitude)
        altitudeBlocksIngest = AltitudeBlocks_IngestEnd(builder)
        return altitudeBlocksIngest
