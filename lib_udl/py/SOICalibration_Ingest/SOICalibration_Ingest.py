# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for SOI Calibration data.
class SOICalibration_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SOICalibration_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSOICalibration_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SOICalibration_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4F\x49\x43", size_prefixed=size_prefixed)

    # SOICalibration_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
    # Example: /// Example: 0.2
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalExtinctionCoeff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    # Example: /// Example: 30086.25
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalSkyBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalBgIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
    # Example: /// Example: 19.23664587
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalSpectralFilterSolarMag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
    # Example: /// Example: 25.15682157
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalZeroPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalNumDetectedStars(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalNumCorrelatedStars(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
    # Example: /// Example: 0.06474939
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalExtinctionCoeffUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
    # Example: /// Example: 0.19708838
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalExtinctionCoeffMaxUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Start time of calibration in ISO 8601 UTC time, with millisecond precision.
    # Example: /// Example: 2023-01-02T16:00:00.123Z
    # Constraints: No constraints specified.
    # SOICalibration_Ingest
    def CalTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of calibration (e.g. PRE, MID, POST).
    # Example: /// Example: PRE
    # Constraints: Minimum length = 0, Maximum length = 24
    # SOICalibration_Ingest
    def CalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SOICalibration_IngestStart(builder):
    builder.StartObject(11)

def Start(builder):
    SOICalibration_IngestStart(builder)

def SOICalibration_IngestAddCalExtinctionCoeff(builder, calExtinctionCoeff):
    builder.PrependFloat64Slot(0, calExtinctionCoeff, 0.0)

def AddCalExtinctionCoeff(builder, calExtinctionCoeff):
    SOICalibration_IngestAddCalExtinctionCoeff(builder, calExtinctionCoeff)

def SOICalibration_IngestAddCalSkyBg(builder, calSkyBg):
    builder.PrependFloat64Slot(1, calSkyBg, 0.0)

def AddCalSkyBg(builder, calSkyBg):
    SOICalibration_IngestAddCalSkyBg(builder, calSkyBg)

def SOICalibration_IngestAddCalBgIntensity(builder, calBgIntensity):
    builder.PrependFloat64Slot(2, calBgIntensity, 0.0)

def AddCalBgIntensity(builder, calBgIntensity):
    SOICalibration_IngestAddCalBgIntensity(builder, calBgIntensity)

def SOICalibration_IngestAddCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag):
    builder.PrependFloat64Slot(3, calSpectralFilterSolarMag, 0.0)

def AddCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag):
    SOICalibration_IngestAddCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag)

def SOICalibration_IngestAddCalZeroPoint(builder, calZeroPoint):
    builder.PrependFloat64Slot(4, calZeroPoint, 0.0)

def AddCalZeroPoint(builder, calZeroPoint):
    SOICalibration_IngestAddCalZeroPoint(builder, calZeroPoint)

def SOICalibration_IngestAddCalNumDetectedStars(builder, calNumDetectedStars):
    builder.PrependInt32Slot(5, calNumDetectedStars, 0)

def AddCalNumDetectedStars(builder, calNumDetectedStars):
    SOICalibration_IngestAddCalNumDetectedStars(builder, calNumDetectedStars)

def SOICalibration_IngestAddCalNumCorrelatedStars(builder, calNumCorrelatedStars):
    builder.PrependInt32Slot(6, calNumCorrelatedStars, 0)

def AddCalNumCorrelatedStars(builder, calNumCorrelatedStars):
    SOICalibration_IngestAddCalNumCorrelatedStars(builder, calNumCorrelatedStars)

def SOICalibration_IngestAddCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc):
    builder.PrependFloat64Slot(7, calExtinctionCoeffUnc, 0.0)

def AddCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc):
    SOICalibration_IngestAddCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc)

def SOICalibration_IngestAddCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc):
    builder.PrependFloat64Slot(8, calExtinctionCoeffMaxUnc, 0.0)

def AddCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc):
    SOICalibration_IngestAddCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc)

def SOICalibration_IngestAddCalTime(builder, calTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(calTime), 0)

def AddCalTime(builder, calTime):
    SOICalibration_IngestAddCalTime(builder, calTime)

def SOICalibration_IngestAddCalType(builder, calType):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(calType), 0)

def AddCalType(builder, calType):
    SOICalibration_IngestAddCalType(builder, calType)

def SOICalibration_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SOICalibration_IngestEnd(builder)


class SOICalibration_IngestT(object):

    # SOICalibration_IngestT
    def __init__(self):
        self.calExtinctionCoeff = 0.0  # type: float
        self.calSkyBg = 0.0  # type: float
        self.calBgIntensity = 0.0  # type: float
        self.calSpectralFilterSolarMag = 0.0  # type: float
        self.calZeroPoint = 0.0  # type: float
        self.calNumDetectedStars = 0  # type: int
        self.calNumCorrelatedStars = 0  # type: int
        self.calExtinctionCoeffUnc = 0.0  # type: float
        self.calExtinctionCoeffMaxUnc = 0.0  # type: float
        self.calTime = None  # type: str
        self.calType = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        soicalibrationIngest = SOICalibration_Ingest()
        soicalibrationIngest.Init(buf, pos)
        return cls.InitFromObj(soicalibrationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, soicalibrationIngest):
        x = SOICalibration_IngestT()
        x._UnPack(soicalibrationIngest)
        return x

    # SOICalibration_IngestT
    def _UnPack(self, soicalibrationIngest):
        if soicalibrationIngest is None:
            return
        self.calExtinctionCoeff = soicalibrationIngest.CalExtinctionCoeff()
        self.calSkyBg = soicalibrationIngest.CalSkyBg()
        self.calBgIntensity = soicalibrationIngest.CalBgIntensity()
        self.calSpectralFilterSolarMag = soicalibrationIngest.CalSpectralFilterSolarMag()
        self.calZeroPoint = soicalibrationIngest.CalZeroPoint()
        self.calNumDetectedStars = soicalibrationIngest.CalNumDetectedStars()
        self.calNumCorrelatedStars = soicalibrationIngest.CalNumCorrelatedStars()
        self.calExtinctionCoeffUnc = soicalibrationIngest.CalExtinctionCoeffUnc()
        self.calExtinctionCoeffMaxUnc = soicalibrationIngest.CalExtinctionCoeffMaxUnc()
        self.calTime = soicalibrationIngest.CalTime()
        self.calType = soicalibrationIngest.CalType()

    # SOICalibration_IngestT
    def Pack(self, builder):
        if self.calTime is not None:
            calTime = builder.CreateString(self.calTime)
        if self.calType is not None:
            calType = builder.CreateString(self.calType)
        SOICalibration_IngestStart(builder)
        SOICalibration_IngestAddCalExtinctionCoeff(builder, self.calExtinctionCoeff)
        SOICalibration_IngestAddCalSkyBg(builder, self.calSkyBg)
        SOICalibration_IngestAddCalBgIntensity(builder, self.calBgIntensity)
        SOICalibration_IngestAddCalSpectralFilterSolarMag(builder, self.calSpectralFilterSolarMag)
        SOICalibration_IngestAddCalZeroPoint(builder, self.calZeroPoint)
        SOICalibration_IngestAddCalNumDetectedStars(builder, self.calNumDetectedStars)
        SOICalibration_IngestAddCalNumCorrelatedStars(builder, self.calNumCorrelatedStars)
        SOICalibration_IngestAddCalExtinctionCoeffUnc(builder, self.calExtinctionCoeffUnc)
        SOICalibration_IngestAddCalExtinctionCoeffMaxUnc(builder, self.calExtinctionCoeffMaxUnc)
        if self.calTime is not None:
            SOICalibration_IngestAddCalTime(builder, calTime)
        if self.calType is not None:
            SOICalibration_IngestAddCalType(builder, calType)
        soicalibrationIngest = SOICalibration_IngestEnd(builder)
        return soicalibrationIngest
