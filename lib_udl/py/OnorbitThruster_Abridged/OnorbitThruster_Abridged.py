# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class OnorbitThruster_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitThruster_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitThruster_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitThruster_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitThruster_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITTHRUSTER-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitThruster_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the on-orbit object.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitThruster_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the Engine.
    # Example: /// Example: ENGINE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitThruster_Abridged
    def IdEngine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitThruster_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).
    # Example: /// Example: Hydrazine REA
    # Constraints: Minimum length = 0, Maximum length = 32
    # OnorbitThruster_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of engines/thrusters on the spacecraft of the type identified by idEngine.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # OnorbitThruster_Abridged
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitThruster_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitThruster_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitThruster_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitThruster_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitThruster_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OnorbitThruster_Abridged
    def Engine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitThruster_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitThruster_AbridgedStart(builder):
    builder.StartObject(13)

def Start(builder):
    OnorbitThruster_AbridgedStart(builder)

def OnorbitThruster_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitThruster_AbridgedAddId(builder, id)

def OnorbitThruster_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitThruster_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def OnorbitThruster_AbridgedAddIdEngine(builder, idEngine):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idEngine), 0)

def AddIdEngine(builder, idEngine):
    OnorbitThruster_AbridgedAddIdEngine(builder, idEngine)

def OnorbitThruster_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitThruster_AbridgedAddClassificationMarking(builder, classificationMarking)

def OnorbitThruster_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    OnorbitThruster_AbridgedAddType(builder, type)

def OnorbitThruster_AbridgedAddQuantity(builder, quantity):
    builder.PrependInt32Slot(5, quantity, 0)

def AddQuantity(builder, quantity):
    OnorbitThruster_AbridgedAddQuantity(builder, quantity)

def OnorbitThruster_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitThruster_AbridgedAddCreatedAt(builder, createdAt)

def OnorbitThruster_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitThruster_AbridgedAddCreatedBy(builder, createdBy)

def OnorbitThruster_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitThruster_AbridgedAddSource(builder, source)

def OnorbitThruster_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitThruster_AbridgedAddOrigin(builder, origin)

def OnorbitThruster_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(10, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitThruster_AbridgedAddDataMode(builder, dataMode)

def OnorbitThruster_AbridgedAddEngine(builder, engine):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(engine), 0)

def AddEngine(builder, engine):
    OnorbitThruster_AbridgedAddEngine(builder, engine)

def OnorbitThruster_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitThruster_AbridgedAddOrigNetwork(builder, origNetwork)

def OnorbitThruster_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitThruster_AbridgedEnd(builder)


class OnorbitThruster_AbridgedT(object):

    # OnorbitThruster_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idEngine = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.quantity = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.engine = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitThrusterAbridged = OnorbitThruster_Abridged()
        onorbitThrusterAbridged.Init(buf, pos)
        return cls.InitFromObj(onorbitThrusterAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitThrusterAbridged):
        x = OnorbitThruster_AbridgedT()
        x._UnPack(onorbitThrusterAbridged)
        return x

    # OnorbitThruster_AbridgedT
    def _UnPack(self, onorbitThrusterAbridged):
        if onorbitThrusterAbridged is None:
            return
        self.id = onorbitThrusterAbridged.Id()
        self.idOnOrbit = onorbitThrusterAbridged.IdOnOrbit()
        self.idEngine = onorbitThrusterAbridged.IdEngine()
        self.classificationMarking = onorbitThrusterAbridged.ClassificationMarking()
        self.type = onorbitThrusterAbridged.Type()
        self.quantity = onorbitThrusterAbridged.Quantity()
        self.createdAt = onorbitThrusterAbridged.CreatedAt()
        self.createdBy = onorbitThrusterAbridged.CreatedBy()
        self.source = onorbitThrusterAbridged.Source()
        self.origin = onorbitThrusterAbridged.Origin()
        self.dataMode = onorbitThrusterAbridged.DataMode()
        self.engine = onorbitThrusterAbridged.Engine()
        self.origNetwork = onorbitThrusterAbridged.OrigNetwork()

    # OnorbitThruster_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idEngine is not None:
            idEngine = builder.CreateString(self.idEngine)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.engine is not None:
            engine = builder.CreateString(self.engine)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitThruster_AbridgedStart(builder)
        if self.id is not None:
            OnorbitThruster_AbridgedAddId(builder, id)
        if self.idOnOrbit is not None:
            OnorbitThruster_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.idEngine is not None:
            OnorbitThruster_AbridgedAddIdEngine(builder, idEngine)
        if self.classificationMarking is not None:
            OnorbitThruster_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            OnorbitThruster_AbridgedAddType(builder, type)
        OnorbitThruster_AbridgedAddQuantity(builder, self.quantity)
        if self.createdAt is not None:
            OnorbitThruster_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitThruster_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            OnorbitThruster_AbridgedAddSource(builder, source)
        if self.origin is not None:
            OnorbitThruster_AbridgedAddOrigin(builder, origin)
        OnorbitThruster_AbridgedAddDataMode(builder, self.dataMode)
        if self.engine is not None:
            OnorbitThruster_AbridgedAddEngine(builder, engine)
        if self.origNetwork is not None:
            OnorbitThruster_AbridgedAddOrigNetwork(builder, origNetwork)
        onorbitThrusterAbridged = OnorbitThruster_AbridgedEnd(builder)
        return onorbitThrusterAbridged
