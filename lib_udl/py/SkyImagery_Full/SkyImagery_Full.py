# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
class SkyImagery_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SkyImagery_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSkyImagery_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SkyImagery_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4B\x59\x49", size_prefixed=size_prefixed)

    # SkyImagery_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SKYIMAGERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SkyImagery_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SkyImagery_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the target on-orbit object, if correlated.
    # Example: /// Example: 44920
    # Constraints: Minimum length = 0, Maximum length = 36
    # SkyImagery_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: X15-23452
    # Constraints: Minimum length = 0, Maximum length = 64
    # SkyImagery_Full
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the AttitudeSet data record describing the orientation of an object body.
    # Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
    # Constraints: Minimum length = 0, Maximum length = 36
    # SkyImagery_Full
    def IdAttitudeSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: 420
    # Constraints: Minimum length = 0, Maximum length = 36
    # SkyImagery_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog number of the target on-orbit object.
    # Example: /// Example: 25544
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: origSensorId
    # Constraints: Minimum length = 0, Maximum length = 64
    # SkyImagery_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: -33.283048
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 149.372549
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
    # Example: /// Example: 14.483619321
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    # Example: /// Example: 14.52
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Senx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    # Example: /// Example: 32.41
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Seny(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
    # Example: /// Example: 376.12
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Senz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    # Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def SenQuat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SkyImagery_Full
    def SenQuatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SkyImagery_Full
    def SenQuatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
    # Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def SenQuatDot(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SkyImagery_Full
    def SenQuatDotLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SkyImagery_Full
    def SenQuatDotIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
    # Example: /// Example: imageType
    # Constraints: Minimum length = 1, Maximum length = 24
    # SkyImagery_Full
    def ImageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def ExpStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # End time of the exposure, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def ExpEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # String that uniquely identifies the data source.
    # Example: /// Example: imageSourceInfo
    # Constraints: Minimum length = 0, Maximum length = 100
    # SkyImagery_Full
    def ImageSourceInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The telescope pointing azimuth, in degrees, at the exposure start epoch.
    # Example: /// Example: 146.321
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def TopLeftStartAz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The telescope pointing elevation, in degrees, at the exposure start epoch.
    # Example: /// Example: 146.321
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def TopLeftStartEl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The telescope pointing azimuth, in degrees, at the exposure stop epoch.
    # Example: /// Example: 3.7
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def TopLeftStopAz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The telescope pointing elevation, in degrees, at the exposure stop epoch.
    # Example: /// Example: 34.233
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def TopLeftStopEl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The user-defined set ID of a sequence of images.
    # Example: /// Example: imageSetId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SkyImagery_Full
    def ImageSetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of images in an image set.
    # Example: /// Example: 9
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def ImageSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The sequence ID of an image within an image set.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def SequenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Field Of View frame width, in degrees.
    # Example: /// Example: 21.23
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def FrameFovwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Field Of View frame height, in degrees.
    # Example: /// Example: 21.23
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def FrameFovheight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Field Of View pixel width, in degrees.
    # Example: /// Example: 321.123
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def PixelFovwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Field Of View pixel height, in degrees.
    # Example: /// Example: 321.123
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def PixelFovheight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frame width of the image, in number of pixels.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def FrameWidthPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Frame height of the image, in number of pixels.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def FrameHeightPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Bit depth of the image, in number of pixels.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def PixelBitDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Reference to an annotation document associated with this image.
    # Example: /// Example: annotationKey
    # Constraints: Minimum length = 0, Maximum length = 128
    # SkyImagery_Full
    def AnnotationKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference to a calibration document associated with this image.
    # Example: /// Example: calibrationKey
    # Constraints: Minimum length = 0, Maximum length = 128
    # SkyImagery_Full
    def CalibrationKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the uploaded image file.
    # Example: /// Example: filename.jpg
    # Constraints: Minimum length = 0, Maximum length = 128
    # SkyImagery_Full
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Size of the image file, in bytes.
    # Example: /// Example: 371945
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Filesize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MD5 value of the file. The ingest/create operation will automatically generate the value.
    # Example: /// Example: checksumValue
    # Constraints: Minimum length = 0, Maximum length = 256
    # SkyImagery_Full
    def ChecksumValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
    # Constraints: Minimum length = 0, Maximum length = 64
    # SkyImagery_Full
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SkyImagery_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SkyImagery_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SkyImagery_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SkyImagery_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SkyImagery_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SkyImagery_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional name/description associated with this image.
    # Example: /// Example: description
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SkyImagery_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SkyImagery_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SkyImagery_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection of linked EOObservations.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SkyImagery_Full
    def EoObservations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SkyImagery_Full
    def EoObservationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SkyImagery_Full
    def EoObservationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        return o == 0

def SkyImagery_FullStart(builder):
    builder.StartObject(51)

def Start(builder):
    SkyImagery_FullStart(builder)

def SkyImagery_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SkyImagery_FullAddId(builder, id)

def SkyImagery_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SkyImagery_FullAddClassificationMarking(builder, classificationMarking)

def SkyImagery_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    SkyImagery_FullAddIdOnOrbit(builder, idOnOrbit)

def SkyImagery_FullAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    SkyImagery_FullAddOnOrbit(builder, onOrbit)

def SkyImagery_FullAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    SkyImagery_FullAddOrigObjectId(builder, origObjectId)

def SkyImagery_FullAddIdAttitudeSet(builder, idAttitudeSet):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idAttitudeSet), 0)

def AddIdAttitudeSet(builder, idAttitudeSet):
    SkyImagery_FullAddIdAttitudeSet(builder, idAttitudeSet)

def SkyImagery_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SkyImagery_FullAddIdSensor(builder, idSensor)

def SkyImagery_FullAddSatNo(builder, satNo):
    builder.PrependInt32Slot(7, satNo, 0)

def AddSatNo(builder, satNo):
    SkyImagery_FullAddSatNo(builder, satNo)

def SkyImagery_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SkyImagery_FullAddOrigSensorId(builder, origSensorId)

def SkyImagery_FullAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(9, senlat, 0.0)

def AddSenlat(builder, senlat):
    SkyImagery_FullAddSenlat(builder, senlat)

def SkyImagery_FullAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(10, senlon, 0.0)

def AddSenlon(builder, senlon):
    SkyImagery_FullAddSenlon(builder, senlon)

def SkyImagery_FullAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(11, senalt, 0.0)

def AddSenalt(builder, senalt):
    SkyImagery_FullAddSenalt(builder, senalt)

def SkyImagery_FullAddSenx(builder, senx):
    builder.PrependFloat64Slot(12, senx, 0.0)

def AddSenx(builder, senx):
    SkyImagery_FullAddSenx(builder, senx)

def SkyImagery_FullAddSeny(builder, seny):
    builder.PrependFloat64Slot(13, seny, 0.0)

def AddSeny(builder, seny):
    SkyImagery_FullAddSeny(builder, seny)

def SkyImagery_FullAddSenz(builder, senz):
    builder.PrependFloat64Slot(14, senz, 0.0)

def AddSenz(builder, senz):
    SkyImagery_FullAddSenz(builder, senz)

def SkyImagery_FullAddSenQuat(builder, senQuat):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(senQuat), 0)

def AddSenQuat(builder, senQuat):
    SkyImagery_FullAddSenQuat(builder, senQuat)

def SkyImagery_FullStartSenQuatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSenQuatVector(builder, numElems):
    return SkyImagery_FullStartSenQuatVector(builder, numElems)

def SkyImagery_FullAddSenQuatDot(builder, senQuatDot):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(senQuatDot), 0)

def AddSenQuatDot(builder, senQuatDot):
    SkyImagery_FullAddSenQuatDot(builder, senQuatDot)

def SkyImagery_FullStartSenQuatDotVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSenQuatDotVector(builder, numElems):
    return SkyImagery_FullStartSenQuatDotVector(builder, numElems)

def SkyImagery_FullAddImageType(builder, imageType):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(imageType), 0)

def AddImageType(builder, imageType):
    SkyImagery_FullAddImageType(builder, imageType)

def SkyImagery_FullAddExpStartTime(builder, expStartTime):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(expStartTime), 0)

def AddExpStartTime(builder, expStartTime):
    SkyImagery_FullAddExpStartTime(builder, expStartTime)

def SkyImagery_FullAddExpEndTime(builder, expEndTime):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(expEndTime), 0)

def AddExpEndTime(builder, expEndTime):
    SkyImagery_FullAddExpEndTime(builder, expEndTime)

def SkyImagery_FullAddImageSourceInfo(builder, imageSourceInfo):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(imageSourceInfo), 0)

def AddImageSourceInfo(builder, imageSourceInfo):
    SkyImagery_FullAddImageSourceInfo(builder, imageSourceInfo)

def SkyImagery_FullAddTopLeftStartAz(builder, topLeftStartAz):
    builder.PrependFloat64Slot(21, topLeftStartAz, 0.0)

def AddTopLeftStartAz(builder, topLeftStartAz):
    SkyImagery_FullAddTopLeftStartAz(builder, topLeftStartAz)

def SkyImagery_FullAddTopLeftStartEl(builder, topLeftStartEl):
    builder.PrependFloat64Slot(22, topLeftStartEl, 0.0)

def AddTopLeftStartEl(builder, topLeftStartEl):
    SkyImagery_FullAddTopLeftStartEl(builder, topLeftStartEl)

def SkyImagery_FullAddTopLeftStopAz(builder, topLeftStopAz):
    builder.PrependFloat64Slot(23, topLeftStopAz, 0.0)

def AddTopLeftStopAz(builder, topLeftStopAz):
    SkyImagery_FullAddTopLeftStopAz(builder, topLeftStopAz)

def SkyImagery_FullAddTopLeftStopEl(builder, topLeftStopEl):
    builder.PrependFloat64Slot(24, topLeftStopEl, 0.0)

def AddTopLeftStopEl(builder, topLeftStopEl):
    SkyImagery_FullAddTopLeftStopEl(builder, topLeftStopEl)

def SkyImagery_FullAddImageSetId(builder, imageSetId):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(imageSetId), 0)

def AddImageSetId(builder, imageSetId):
    SkyImagery_FullAddImageSetId(builder, imageSetId)

def SkyImagery_FullAddImageSetLength(builder, imageSetLength):
    builder.PrependInt32Slot(26, imageSetLength, 0)

def AddImageSetLength(builder, imageSetLength):
    SkyImagery_FullAddImageSetLength(builder, imageSetLength)

def SkyImagery_FullAddSequenceId(builder, sequenceId):
    builder.PrependInt32Slot(27, sequenceId, 0)

def AddSequenceId(builder, sequenceId):
    SkyImagery_FullAddSequenceId(builder, sequenceId)

def SkyImagery_FullAddFrameFovwidth(builder, frameFovwidth):
    builder.PrependFloat64Slot(28, frameFovwidth, 0.0)

def AddFrameFovwidth(builder, frameFovwidth):
    SkyImagery_FullAddFrameFovwidth(builder, frameFovwidth)

def SkyImagery_FullAddFrameFovheight(builder, frameFovheight):
    builder.PrependFloat64Slot(29, frameFovheight, 0.0)

def AddFrameFovheight(builder, frameFovheight):
    SkyImagery_FullAddFrameFovheight(builder, frameFovheight)

def SkyImagery_FullAddPixelFovwidth(builder, pixelFovwidth):
    builder.PrependFloat64Slot(30, pixelFovwidth, 0.0)

def AddPixelFovwidth(builder, pixelFovwidth):
    SkyImagery_FullAddPixelFovwidth(builder, pixelFovwidth)

def SkyImagery_FullAddPixelFovheight(builder, pixelFovheight):
    builder.PrependFloat64Slot(31, pixelFovheight, 0.0)

def AddPixelFovheight(builder, pixelFovheight):
    SkyImagery_FullAddPixelFovheight(builder, pixelFovheight)

def SkyImagery_FullAddFrameWidthPixels(builder, frameWidthPixels):
    builder.PrependInt32Slot(32, frameWidthPixels, 0)

def AddFrameWidthPixels(builder, frameWidthPixels):
    SkyImagery_FullAddFrameWidthPixels(builder, frameWidthPixels)

def SkyImagery_FullAddFrameHeightPixels(builder, frameHeightPixels):
    builder.PrependInt32Slot(33, frameHeightPixels, 0)

def AddFrameHeightPixels(builder, frameHeightPixels):
    SkyImagery_FullAddFrameHeightPixels(builder, frameHeightPixels)

def SkyImagery_FullAddPixelBitDepth(builder, pixelBitDepth):
    builder.PrependInt32Slot(34, pixelBitDepth, 0)

def AddPixelBitDepth(builder, pixelBitDepth):
    SkyImagery_FullAddPixelBitDepth(builder, pixelBitDepth)

def SkyImagery_FullAddAnnotationKey(builder, annotationKey):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(annotationKey), 0)

def AddAnnotationKey(builder, annotationKey):
    SkyImagery_FullAddAnnotationKey(builder, annotationKey)

def SkyImagery_FullAddCalibrationKey(builder, calibrationKey):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(calibrationKey), 0)

def AddCalibrationKey(builder, calibrationKey):
    SkyImagery_FullAddCalibrationKey(builder, calibrationKey)

def SkyImagery_FullAddFilename(builder, filename):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)

def AddFilename(builder, filename):
    SkyImagery_FullAddFilename(builder, filename)

def SkyImagery_FullAddFilesize(builder, filesize):
    builder.PrependInt64Slot(38, filesize, 0)

def AddFilesize(builder, filesize):
    SkyImagery_FullAddFilesize(builder, filesize)

def SkyImagery_FullAddChecksumValue(builder, checksumValue):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(checksumValue), 0)

def AddChecksumValue(builder, checksumValue):
    SkyImagery_FullAddChecksumValue(builder, checksumValue)

def SkyImagery_FullAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    SkyImagery_FullAddTransactionId(builder, transactionId)

def SkyImagery_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    SkyImagery_FullAddTags(builder, tags)

def SkyImagery_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return SkyImagery_FullStartTagsVector(builder, numElems)

def SkyImagery_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SkyImagery_FullAddSource(builder, source)

def SkyImagery_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SkyImagery_FullAddOrigin(builder, origin)

def SkyImagery_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SkyImagery_FullAddOrigNetwork(builder, origNetwork)

def SkyImagery_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    SkyImagery_FullAddSourceDl(builder, sourceDl)

def SkyImagery_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    SkyImagery_FullAddDescription(builder, description)

def SkyImagery_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(47, dataMode, 0)

def AddDataMode(builder, dataMode):
    SkyImagery_FullAddDataMode(builder, dataMode)

def SkyImagery_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SkyImagery_FullAddCreatedAt(builder, createdAt)

def SkyImagery_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SkyImagery_FullAddCreatedBy(builder, createdBy)

def SkyImagery_FullAddEoObservations(builder, eoObservations):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(eoObservations), 0)

def AddEoObservations(builder, eoObservations):
    SkyImagery_FullAddEoObservations(builder, eoObservations)

def SkyImagery_FullStartEoObservationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEoObservationsVector(builder, numElems):
    return SkyImagery_FullStartEoObservationsVector(builder, numElems)

def SkyImagery_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SkyImagery_FullEnd(builder)

try:
    from typing import List
except:
    pass

class SkyImagery_FullT(object):

    # SkyImagery_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.onOrbit = None  # type: str
        self.origObjectId = None  # type: str
        self.idAttitudeSet = None  # type: str
        self.idSensor = None  # type: str
        self.satNo = 0  # type: int
        self.origSensorId = None  # type: str
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.senx = 0.0  # type: float
        self.seny = 0.0  # type: float
        self.senz = 0.0  # type: float
        self.senQuat = None  # type: List[str]
        self.senQuatDot = None  # type: List[str]
        self.imageType = None  # type: str
        self.expStartTime = None  # type: str
        self.expEndTime = None  # type: str
        self.imageSourceInfo = None  # type: str
        self.topLeftStartAz = 0.0  # type: float
        self.topLeftStartEl = 0.0  # type: float
        self.topLeftStopAz = 0.0  # type: float
        self.topLeftStopEl = 0.0  # type: float
        self.imageSetId = None  # type: str
        self.imageSetLength = 0  # type: int
        self.sequenceId = 0  # type: int
        self.frameFovwidth = 0.0  # type: float
        self.frameFovheight = 0.0  # type: float
        self.pixelFovwidth = 0.0  # type: float
        self.pixelFovheight = 0.0  # type: float
        self.frameWidthPixels = 0  # type: int
        self.frameHeightPixels = 0  # type: int
        self.pixelBitDepth = 0  # type: int
        self.annotationKey = None  # type: str
        self.calibrationKey = None  # type: str
        self.filename = None  # type: str
        self.filesize = 0  # type: int
        self.checksumValue = None  # type: str
        self.transactionId = None  # type: str
        self.tags = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.description = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.eoObservations = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        skyImageryFull = SkyImagery_Full()
        skyImageryFull.Init(buf, pos)
        return cls.InitFromObj(skyImageryFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, skyImageryFull):
        x = SkyImagery_FullT()
        x._UnPack(skyImageryFull)
        return x

    # SkyImagery_FullT
    def _UnPack(self, skyImageryFull):
        if skyImageryFull is None:
            return
        self.id = skyImageryFull.Id()
        self.classificationMarking = skyImageryFull.ClassificationMarking()
        self.idOnOrbit = skyImageryFull.IdOnOrbit()
        self.onOrbit = skyImageryFull.OnOrbit()
        self.origObjectId = skyImageryFull.OrigObjectId()
        self.idAttitudeSet = skyImageryFull.IdAttitudeSet()
        self.idSensor = skyImageryFull.IdSensor()
        self.satNo = skyImageryFull.SatNo()
        self.origSensorId = skyImageryFull.OrigSensorId()
        self.senlat = skyImageryFull.Senlat()
        self.senlon = skyImageryFull.Senlon()
        self.senalt = skyImageryFull.Senalt()
        self.senx = skyImageryFull.Senx()
        self.seny = skyImageryFull.Seny()
        self.senz = skyImageryFull.Senz()
        if not skyImageryFull.SenQuatIsNone():
            self.senQuat = []
            for i in range(skyImageryFull.SenQuatLength()):
                self.senQuat.append(skyImageryFull.SenQuat(i))
        if not skyImageryFull.SenQuatDotIsNone():
            self.senQuatDot = []
            for i in range(skyImageryFull.SenQuatDotLength()):
                self.senQuatDot.append(skyImageryFull.SenQuatDot(i))
        self.imageType = skyImageryFull.ImageType()
        self.expStartTime = skyImageryFull.ExpStartTime()
        self.expEndTime = skyImageryFull.ExpEndTime()
        self.imageSourceInfo = skyImageryFull.ImageSourceInfo()
        self.topLeftStartAz = skyImageryFull.TopLeftStartAz()
        self.topLeftStartEl = skyImageryFull.TopLeftStartEl()
        self.topLeftStopAz = skyImageryFull.TopLeftStopAz()
        self.topLeftStopEl = skyImageryFull.TopLeftStopEl()
        self.imageSetId = skyImageryFull.ImageSetId()
        self.imageSetLength = skyImageryFull.ImageSetLength()
        self.sequenceId = skyImageryFull.SequenceId()
        self.frameFovwidth = skyImageryFull.FrameFovwidth()
        self.frameFovheight = skyImageryFull.FrameFovheight()
        self.pixelFovwidth = skyImageryFull.PixelFovwidth()
        self.pixelFovheight = skyImageryFull.PixelFovheight()
        self.frameWidthPixels = skyImageryFull.FrameWidthPixels()
        self.frameHeightPixels = skyImageryFull.FrameHeightPixels()
        self.pixelBitDepth = skyImageryFull.PixelBitDepth()
        self.annotationKey = skyImageryFull.AnnotationKey()
        self.calibrationKey = skyImageryFull.CalibrationKey()
        self.filename = skyImageryFull.Filename()
        self.filesize = skyImageryFull.Filesize()
        self.checksumValue = skyImageryFull.ChecksumValue()
        self.transactionId = skyImageryFull.TransactionId()
        if not skyImageryFull.TagsIsNone():
            self.tags = []
            for i in range(skyImageryFull.TagsLength()):
                self.tags.append(skyImageryFull.Tags(i))
        self.source = skyImageryFull.Source()
        self.origin = skyImageryFull.Origin()
        self.origNetwork = skyImageryFull.OrigNetwork()
        self.sourceDl = skyImageryFull.SourceDl()
        self.description = skyImageryFull.Description()
        self.dataMode = skyImageryFull.DataMode()
        self.createdAt = skyImageryFull.CreatedAt()
        self.createdBy = skyImageryFull.CreatedBy()
        if not skyImageryFull.EoObservationsIsNone():
            self.eoObservations = []
            for i in range(skyImageryFull.EoObservationsLength()):
                self.eoObservations.append(skyImageryFull.EoObservations(i))

    # SkyImagery_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idAttitudeSet is not None:
            idAttitudeSet = builder.CreateString(self.idAttitudeSet)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.senQuat is not None:
            senQuatlist = []
            for i in range(len(self.senQuat)):
                senQuatlist.append(builder.CreateString(self.senQuat[i]))
            SkyImagery_FullStartSenQuatVector(builder, len(self.senQuat))
            for i in reversed(range(len(self.senQuat))):
                builder.PrependUOffsetTRelative(senQuatlist[i])
            senQuat = builder.EndVector()
        if self.senQuatDot is not None:
            senQuatDotlist = []
            for i in range(len(self.senQuatDot)):
                senQuatDotlist.append(builder.CreateString(self.senQuatDot[i]))
            SkyImagery_FullStartSenQuatDotVector(builder, len(self.senQuatDot))
            for i in reversed(range(len(self.senQuatDot))):
                builder.PrependUOffsetTRelative(senQuatDotlist[i])
            senQuatDot = builder.EndVector()
        if self.imageType is not None:
            imageType = builder.CreateString(self.imageType)
        if self.expStartTime is not None:
            expStartTime = builder.CreateString(self.expStartTime)
        if self.expEndTime is not None:
            expEndTime = builder.CreateString(self.expEndTime)
        if self.imageSourceInfo is not None:
            imageSourceInfo = builder.CreateString(self.imageSourceInfo)
        if self.imageSetId is not None:
            imageSetId = builder.CreateString(self.imageSetId)
        if self.annotationKey is not None:
            annotationKey = builder.CreateString(self.annotationKey)
        if self.calibrationKey is not None:
            calibrationKey = builder.CreateString(self.calibrationKey)
        if self.filename is not None:
            filename = builder.CreateString(self.filename)
        if self.checksumValue is not None:
            checksumValue = builder.CreateString(self.checksumValue)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            SkyImagery_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.eoObservations is not None:
            eoObservationslist = []
            for i in range(len(self.eoObservations)):
                eoObservationslist.append(builder.CreateString(self.eoObservations[i]))
            SkyImagery_FullStartEoObservationsVector(builder, len(self.eoObservations))
            for i in reversed(range(len(self.eoObservations))):
                builder.PrependUOffsetTRelative(eoObservationslist[i])
            eoObservations = builder.EndVector()
        SkyImagery_FullStart(builder)
        if self.id is not None:
            SkyImagery_FullAddId(builder, id)
        if self.classificationMarking is not None:
            SkyImagery_FullAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            SkyImagery_FullAddIdOnOrbit(builder, idOnOrbit)
        if self.onOrbit is not None:
            SkyImagery_FullAddOnOrbit(builder, onOrbit)
        if self.origObjectId is not None:
            SkyImagery_FullAddOrigObjectId(builder, origObjectId)
        if self.idAttitudeSet is not None:
            SkyImagery_FullAddIdAttitudeSet(builder, idAttitudeSet)
        if self.idSensor is not None:
            SkyImagery_FullAddIdSensor(builder, idSensor)
        SkyImagery_FullAddSatNo(builder, self.satNo)
        if self.origSensorId is not None:
            SkyImagery_FullAddOrigSensorId(builder, origSensorId)
        SkyImagery_FullAddSenlat(builder, self.senlat)
        SkyImagery_FullAddSenlon(builder, self.senlon)
        SkyImagery_FullAddSenalt(builder, self.senalt)
        SkyImagery_FullAddSenx(builder, self.senx)
        SkyImagery_FullAddSeny(builder, self.seny)
        SkyImagery_FullAddSenz(builder, self.senz)
        if self.senQuat is not None:
            SkyImagery_FullAddSenQuat(builder, senQuat)
        if self.senQuatDot is not None:
            SkyImagery_FullAddSenQuatDot(builder, senQuatDot)
        if self.imageType is not None:
            SkyImagery_FullAddImageType(builder, imageType)
        if self.expStartTime is not None:
            SkyImagery_FullAddExpStartTime(builder, expStartTime)
        if self.expEndTime is not None:
            SkyImagery_FullAddExpEndTime(builder, expEndTime)
        if self.imageSourceInfo is not None:
            SkyImagery_FullAddImageSourceInfo(builder, imageSourceInfo)
        SkyImagery_FullAddTopLeftStartAz(builder, self.topLeftStartAz)
        SkyImagery_FullAddTopLeftStartEl(builder, self.topLeftStartEl)
        SkyImagery_FullAddTopLeftStopAz(builder, self.topLeftStopAz)
        SkyImagery_FullAddTopLeftStopEl(builder, self.topLeftStopEl)
        if self.imageSetId is not None:
            SkyImagery_FullAddImageSetId(builder, imageSetId)
        SkyImagery_FullAddImageSetLength(builder, self.imageSetLength)
        SkyImagery_FullAddSequenceId(builder, self.sequenceId)
        SkyImagery_FullAddFrameFovwidth(builder, self.frameFovwidth)
        SkyImagery_FullAddFrameFovheight(builder, self.frameFovheight)
        SkyImagery_FullAddPixelFovwidth(builder, self.pixelFovwidth)
        SkyImagery_FullAddPixelFovheight(builder, self.pixelFovheight)
        SkyImagery_FullAddFrameWidthPixels(builder, self.frameWidthPixels)
        SkyImagery_FullAddFrameHeightPixels(builder, self.frameHeightPixels)
        SkyImagery_FullAddPixelBitDepth(builder, self.pixelBitDepth)
        if self.annotationKey is not None:
            SkyImagery_FullAddAnnotationKey(builder, annotationKey)
        if self.calibrationKey is not None:
            SkyImagery_FullAddCalibrationKey(builder, calibrationKey)
        if self.filename is not None:
            SkyImagery_FullAddFilename(builder, filename)
        SkyImagery_FullAddFilesize(builder, self.filesize)
        if self.checksumValue is not None:
            SkyImagery_FullAddChecksumValue(builder, checksumValue)
        if self.transactionId is not None:
            SkyImagery_FullAddTransactionId(builder, transactionId)
        if self.tags is not None:
            SkyImagery_FullAddTags(builder, tags)
        if self.source is not None:
            SkyImagery_FullAddSource(builder, source)
        if self.origin is not None:
            SkyImagery_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SkyImagery_FullAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            SkyImagery_FullAddSourceDl(builder, sourceDl)
        if self.description is not None:
            SkyImagery_FullAddDescription(builder, description)
        SkyImagery_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            SkyImagery_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SkyImagery_FullAddCreatedBy(builder, createdBy)
        if self.eoObservations is not None:
            SkyImagery_FullAddEoObservations(builder, eoObservations)
        skyImageryFull = SkyImagery_FullEnd(builder)
        return skyImageryFull
