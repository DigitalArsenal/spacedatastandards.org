# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
class GenText_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GenText_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGenText_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GenText_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x47\x45\x4E\x54", size_prefixed=size_prefixed)

    # GenText_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
    # Example: /// Example: OPENING REMARKS
    # Constraints: Minimum length = 0, Maximum length = 64
    # GenText_Ingest
    def TextInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The free text that describes the information specific to the text indicator.
    # Example: /// Example: FREE-TEXT
    # Constraints: Minimum length = 0, Maximum length = 1024
    # GenText_Ingest
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GenText_IngestStart(builder):
    builder.StartObject(2)

def Start(builder):
    GenText_IngestStart(builder)

def GenText_IngestAddTextInd(builder, textInd):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(textInd), 0)

def AddTextInd(builder, textInd):
    GenText_IngestAddTextInd(builder, textInd)

def GenText_IngestAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    GenText_IngestAddText(builder, text)

def GenText_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return GenText_IngestEnd(builder)


class GenText_IngestT(object):

    # GenText_IngestT
    def __init__(self):
        self.textInd = None  # type: str
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        genTextIngest = GenText_Ingest()
        genTextIngest.Init(buf, pos)
        return cls.InitFromObj(genTextIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, genTextIngest):
        x = GenText_IngestT()
        x._UnPack(genTextIngest)
        return x

    # GenText_IngestT
    def _UnPack(self, genTextIngest):
        if genTextIngest is None:
            return
        self.textInd = genTextIngest.TextInd()
        self.text = genTextIngest.Text()

    # GenText_IngestT
    def Pack(self, builder):
        if self.textInd is not None:
            textInd = builder.CreateString(self.textInd)
        if self.text is not None:
            text = builder.CreateString(self.text)
        GenText_IngestStart(builder)
        if self.textInd is not None:
            GenText_IngestAddTextInd(builder, textInd)
        if self.text is not None:
            GenText_IngestAddText(builder, text)
        genTextIngest = GenText_IngestEnd(builder)
        return genTextIngest
