# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
class EventEvolution_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventEvolution_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventEvolution_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EventEvolution_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x45\x4E", size_prefixed=size_prefixed)

    # EventEvolution_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: EVENT_EVOL_ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EventEvolution_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EventEvolution_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
    # Example: /// Example: EVENT_ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EventEvolution_Ingest
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
    # Example: /// Example: PROTEST
    # Constraints: Minimum length = 0, Maximum length = 128
    # EventEvolution_Ingest
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Summary or description of the activity or event.
    # Example: /// Example: Example summary of the event.
    # Constraints: Minimum length = 1, Maximum length = 4096
    # EventEvolution_Ingest
    def Summary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
    # Example: /// Example: 2021-12-02T16:00:00.123Z
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
    # Example: /// Example: 2021-12-03T16:00:00.123Z
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
    # Example: /// Example: UNKNOWN
    # Constraints: Minimum length = 0, Maximum length = 24
    # EventEvolution_Ingest
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # EventEvolution_Ingest
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
    # Example: /// Example: Colorado
    # Constraints: Minimum length = 0, Maximum length = 128
    # EventEvolution_Ingest
    def GeoAdminLevel1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
    # Example: /// Example: El Paso County
    # Constraints: Minimum length = 0, Maximum length = 128
    # EventEvolution_Ingest
    def GeoAdminLevel2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
    # Example: /// Example: Colorado Springs
    # Constraints: Minimum length = 0, Maximum length = 128
    # EventEvolution_Ingest
    def GeoAdminLevel3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Redact(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['AIS', 'CONJUNCTION']
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventEvolution_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventEvolution_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    # Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventEvolution_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventEvolution_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
    # Example: /// Example: Description of relationship between srcTyps and srcIds
    # Constraints: Minimum length = 0, Maximum length = 2056
    # EventEvolution_Ingest
    def DataDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: POLYGON
    # Constraints: Minimum length = 0, Maximum length = 128
    # EventEvolution_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 4326
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # List of URLs to before/after images of this point of interest entity.
    # Example: /// Example: ['URL1', 'URL2']
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Url(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventEvolution_Ingest
    def UrlLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventEvolution_Ingest
    def UrlIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventEvolution_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventEvolution_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2021-12-02T16:00:00.123Z
    # Constraints: No constraints specified.
    # EventEvolution_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # EventEvolution_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # EventEvolution_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EventEvolution_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # EventEvolution_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EventEvolution_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EventEvolution_IngestStart(builder):
    builder.StartObject(30)

def Start(builder):
    EventEvolution_IngestStart(builder)

def EventEvolution_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EventEvolution_IngestAddId(builder, id)

def EventEvolution_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EventEvolution_IngestAddClassificationMarking(builder, classificationMarking)

def EventEvolution_IngestAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def AddEventId(builder, eventId):
    EventEvolution_IngestAddEventId(builder, eventId)

def EventEvolution_IngestAddCategory(builder, category):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)

def AddCategory(builder, category):
    EventEvolution_IngestAddCategory(builder, category)

def EventEvolution_IngestAddSummary(builder, summary):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(summary), 0)

def AddSummary(builder, summary):
    EventEvolution_IngestAddSummary(builder, summary)

def EventEvolution_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    EventEvolution_IngestAddStartTime(builder, startTime)

def EventEvolution_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    EventEvolution_IngestAddEndTime(builder, endTime)

def EventEvolution_IngestAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    EventEvolution_IngestAddStatus(builder, status)

def EventEvolution_IngestAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    EventEvolution_IngestAddCountryCode(builder, countryCode)

def EventEvolution_IngestAddGeoAdminLevel1(builder, geoAdminLevel1):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(geoAdminLevel1), 0)

def AddGeoAdminLevel1(builder, geoAdminLevel1):
    EventEvolution_IngestAddGeoAdminLevel1(builder, geoAdminLevel1)

def EventEvolution_IngestAddGeoAdminLevel2(builder, geoAdminLevel2):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(geoAdminLevel2), 0)

def AddGeoAdminLevel2(builder, geoAdminLevel2):
    EventEvolution_IngestAddGeoAdminLevel2(builder, geoAdminLevel2)

def EventEvolution_IngestAddGeoAdminLevel3(builder, geoAdminLevel3):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(geoAdminLevel3), 0)

def AddGeoAdminLevel3(builder, geoAdminLevel3):
    EventEvolution_IngestAddGeoAdminLevel3(builder, geoAdminLevel3)

def EventEvolution_IngestAddRedact(builder, redact):
    builder.PrependBoolSlot(12, redact, 0)

def AddRedact(builder, redact):
    EventEvolution_IngestAddRedact(builder, redact)

def EventEvolution_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    EventEvolution_IngestAddSrcTyps(builder, srcTyps)

def EventEvolution_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return EventEvolution_IngestStartSrcTypsVector(builder, numElems)

def EventEvolution_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    EventEvolution_IngestAddSrcIds(builder, srcIds)

def EventEvolution_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return EventEvolution_IngestStartSrcIdsVector(builder, numElems)

def EventEvolution_IngestAddDataDescription(builder, dataDescription):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(dataDescription), 0)

def AddDataDescription(builder, dataDescription):
    EventEvolution_IngestAddDataDescription(builder, dataDescription)

def EventEvolution_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    EventEvolution_IngestAddArea(builder, area)

def EventEvolution_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    EventEvolution_IngestAddAtext(builder, atext)

def EventEvolution_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    EventEvolution_IngestAddAgjson(builder, agjson)

def EventEvolution_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    EventEvolution_IngestAddAtype(builder, atype)

def EventEvolution_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(20, andims, 0)

def AddAndims(builder, andims):
    EventEvolution_IngestAddAndims(builder, andims)

def EventEvolution_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(21, asrid, 0)

def AddAsrid(builder, asrid):
    EventEvolution_IngestAddAsrid(builder, asrid)

def EventEvolution_IngestAddUrl(builder, url):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder, url):
    EventEvolution_IngestAddUrl(builder, url)

def EventEvolution_IngestStartUrlVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUrlVector(builder, numElems):
    return EventEvolution_IngestStartUrlVector(builder, numElems)

def EventEvolution_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    EventEvolution_IngestAddTags(builder, tags)

def EventEvolution_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return EventEvolution_IngestStartTagsVector(builder, numElems)

def EventEvolution_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EventEvolution_IngestAddCreatedAt(builder, createdAt)

def EventEvolution_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EventEvolution_IngestAddCreatedBy(builder, createdBy)

def EventEvolution_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EventEvolution_IngestAddSource(builder, source)

def EventEvolution_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EventEvolution_IngestAddOrigin(builder, origin)

def EventEvolution_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EventEvolution_IngestAddOrigNetwork(builder, origNetwork)

def EventEvolution_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(29, dataMode, 0)

def AddDataMode(builder, dataMode):
    EventEvolution_IngestAddDataMode(builder, dataMode)

def EventEvolution_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EventEvolution_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class EventEvolution_IngestT(object):

    # EventEvolution_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.eventId = None  # type: str
        self.category = None  # type: str
        self.summary = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.status = None  # type: str
        self.countryCode = None  # type: str
        self.geoAdminLevel1 = None  # type: str
        self.geoAdminLevel2 = None  # type: str
        self.geoAdminLevel3 = None  # type: str
        self.redact = False  # type: bool
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.dataDescription = None  # type: str
        self.area = None  # type: str
        self.atext = None  # type: str
        self.agjson = None  # type: str
        self.atype = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.url = None  # type: List[str]
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eventEvolutionIngest = EventEvolution_Ingest()
        eventEvolutionIngest.Init(buf, pos)
        return cls.InitFromObj(eventEvolutionIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, eventEvolutionIngest):
        x = EventEvolution_IngestT()
        x._UnPack(eventEvolutionIngest)
        return x

    # EventEvolution_IngestT
    def _UnPack(self, eventEvolutionIngest):
        if eventEvolutionIngest is None:
            return
        self.id = eventEvolutionIngest.Id()
        self.classificationMarking = eventEvolutionIngest.ClassificationMarking()
        self.eventId = eventEvolutionIngest.EventId()
        self.category = eventEvolutionIngest.Category()
        self.summary = eventEvolutionIngest.Summary()
        self.startTime = eventEvolutionIngest.StartTime()
        self.endTime = eventEvolutionIngest.EndTime()
        self.status = eventEvolutionIngest.Status()
        self.countryCode = eventEvolutionIngest.CountryCode()
        self.geoAdminLevel1 = eventEvolutionIngest.GeoAdminLevel1()
        self.geoAdminLevel2 = eventEvolutionIngest.GeoAdminLevel2()
        self.geoAdminLevel3 = eventEvolutionIngest.GeoAdminLevel3()
        self.redact = eventEvolutionIngest.Redact()
        if not eventEvolutionIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(eventEvolutionIngest.SrcTypsLength()):
                self.srcTyps.append(eventEvolutionIngest.SrcTyps(i))
        if not eventEvolutionIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(eventEvolutionIngest.SrcIdsLength()):
                self.srcIds.append(eventEvolutionIngest.SrcIds(i))
        self.dataDescription = eventEvolutionIngest.DataDescription()
        self.area = eventEvolutionIngest.Area()
        self.atext = eventEvolutionIngest.Atext()
        self.agjson = eventEvolutionIngest.Agjson()
        self.atype = eventEvolutionIngest.Atype()
        self.andims = eventEvolutionIngest.Andims()
        self.asrid = eventEvolutionIngest.Asrid()
        if not eventEvolutionIngest.UrlIsNone():
            self.url = []
            for i in range(eventEvolutionIngest.UrlLength()):
                self.url.append(eventEvolutionIngest.Url(i))
        if not eventEvolutionIngest.TagsIsNone():
            self.tags = []
            for i in range(eventEvolutionIngest.TagsLength()):
                self.tags.append(eventEvolutionIngest.Tags(i))
        self.createdAt = eventEvolutionIngest.CreatedAt()
        self.createdBy = eventEvolutionIngest.CreatedBy()
        self.source = eventEvolutionIngest.Source()
        self.origin = eventEvolutionIngest.Origin()
        self.origNetwork = eventEvolutionIngest.OrigNetwork()
        self.dataMode = eventEvolutionIngest.DataMode()

    # EventEvolution_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.eventId is not None:
            eventId = builder.CreateString(self.eventId)
        if self.category is not None:
            category = builder.CreateString(self.category)
        if self.summary is not None:
            summary = builder.CreateString(self.summary)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.geoAdminLevel1 is not None:
            geoAdminLevel1 = builder.CreateString(self.geoAdminLevel1)
        if self.geoAdminLevel2 is not None:
            geoAdminLevel2 = builder.CreateString(self.geoAdminLevel2)
        if self.geoAdminLevel3 is not None:
            geoAdminLevel3 = builder.CreateString(self.geoAdminLevel3)
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            EventEvolution_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            EventEvolution_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.dataDescription is not None:
            dataDescription = builder.CreateString(self.dataDescription)
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.url is not None:
            urllist = []
            for i in range(len(self.url)):
                urllist.append(builder.CreateString(self.url[i]))
            EventEvolution_IngestStartUrlVector(builder, len(self.url))
            for i in reversed(range(len(self.url))):
                builder.PrependUOffsetTRelative(urllist[i])
            url = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            EventEvolution_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        EventEvolution_IngestStart(builder)
        if self.id is not None:
            EventEvolution_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            EventEvolution_IngestAddClassificationMarking(builder, classificationMarking)
        if self.eventId is not None:
            EventEvolution_IngestAddEventId(builder, eventId)
        if self.category is not None:
            EventEvolution_IngestAddCategory(builder, category)
        if self.summary is not None:
            EventEvolution_IngestAddSummary(builder, summary)
        if self.startTime is not None:
            EventEvolution_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            EventEvolution_IngestAddEndTime(builder, endTime)
        if self.status is not None:
            EventEvolution_IngestAddStatus(builder, status)
        if self.countryCode is not None:
            EventEvolution_IngestAddCountryCode(builder, countryCode)
        if self.geoAdminLevel1 is not None:
            EventEvolution_IngestAddGeoAdminLevel1(builder, geoAdminLevel1)
        if self.geoAdminLevel2 is not None:
            EventEvolution_IngestAddGeoAdminLevel2(builder, geoAdminLevel2)
        if self.geoAdminLevel3 is not None:
            EventEvolution_IngestAddGeoAdminLevel3(builder, geoAdminLevel3)
        EventEvolution_IngestAddRedact(builder, self.redact)
        if self.srcTyps is not None:
            EventEvolution_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            EventEvolution_IngestAddSrcIds(builder, srcIds)
        if self.dataDescription is not None:
            EventEvolution_IngestAddDataDescription(builder, dataDescription)
        if self.area is not None:
            EventEvolution_IngestAddArea(builder, area)
        if self.atext is not None:
            EventEvolution_IngestAddAtext(builder, atext)
        if self.agjson is not None:
            EventEvolution_IngestAddAgjson(builder, agjson)
        if self.atype is not None:
            EventEvolution_IngestAddAtype(builder, atype)
        EventEvolution_IngestAddAndims(builder, self.andims)
        EventEvolution_IngestAddAsrid(builder, self.asrid)
        if self.url is not None:
            EventEvolution_IngestAddUrl(builder, url)
        if self.tags is not None:
            EventEvolution_IngestAddTags(builder, tags)
        if self.createdAt is not None:
            EventEvolution_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EventEvolution_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            EventEvolution_IngestAddSource(builder, source)
        if self.origin is not None:
            EventEvolution_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            EventEvolution_IngestAddOrigNetwork(builder, origNetwork)
        EventEvolution_IngestAddDataMode(builder, self.dataMode)
        eventEvolutionIngest = EventEvolution_IngestEnd(builder)
        return eventEvolutionIngest
