# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
class Stage_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Stage_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStage_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Stage_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x54\x41\x47", size_prefixed=size_prefixed)

    # Stage_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: STAGE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Stage_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the launch vehicle record for this stage.
    # Example: /// Example: LAUNCHVEHICLE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Stage_Abridged
    def IdLaunchVehicle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the Engine record for this stage.
    # Example: /// Example: ENGINE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Stage_Abridged
    def IdEngine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Stage_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The stage number of this launch stage.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # Stage_Abridged
    def StageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    # Example: /// Example: Electrostatic Ion
    # Constraints: Minimum length = 0, Maximum length = 64
    # Stage_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the organization that manufactures this launch stage.
    # Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
    # Constraints: Minimum length = 0, Maximum length = 36
    # Stage_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of the specified engines on this launch stage.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def NumEngines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Stage length in meters.
    # Example: /// Example: 25.13
    # Constraints: No constraints specified.
    # Stage_Abridged
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Stage maximum external diameter in meters.
    # Example: /// Example: 3.95
    # Constraints: No constraints specified.
    # Stage_Abridged
    def Diameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Stage gross mass in kg.
    # Example: /// Example: 9956.1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine vernier or additional engine type.
    # Example: /// Example: vernier
    # Constraints: Minimum length = 0, Maximum length = 32
    # Stage_Abridged
    def Vernier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of vernier or additional engines.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Stage_Abridged
    def NumVernier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Thrust of the stage main engine at sea level in kN.
    # Example: /// Example: 733.4
    # Constraints: No constraints specified.
    # Stage_Abridged
    def MainEngineThrustSeaLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Thrust of the stage main engine in a vacuum in kN.
    # Example: /// Example: 733.4
    # Constraints: No constraints specified.
    # Stage_Abridged
    def MainEngineThrustVacuum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total thrust of the stage at sea level in kN.
    # Example: /// Example: 733.4
    # Constraints: No constraints specified.
    # Stage_Abridged
    def ThrustSeaLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total thrust of the stage in a vacuum in kN.
    # Example: /// Example: 733.4
    # Constraints: No constraints specified.
    # Stage_Abridged
    def ThrustVacuum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total burn time of the stage engines in seconds.
    # Example: /// Example: 256.3
    # Constraints: No constraints specified.
    # Stage_Abridged
    def BurnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of burns for the stage engines.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def NumBurns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Total burn time of the vernier or additional stage engines in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def VernierBurnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total number of burns of the vernier or additional stage engines.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # Stage_Abridged
    def VernierNumBurns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Total thrust of one of the vernier or additional engines at sea level in kN.
    # Example: /// Example: 4.1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def VernierThrustSeaLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total thrust of one of the vernier or additional engines in a vacuum in kN.
    # Example: /// Example: 3.2
    # Constraints: No constraints specified.
    # Stage_Abridged
    def VernierThrustVacuum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of launch stage elements used in this stage.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # Stage_Abridged
    def NumStageElements(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this launch stage is reusable.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Stage_Abridged
    def Reusable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if this launch stage can be restarted.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Stage_Abridged
    def Restartable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Control thruster 1 type.
    # Example: /// Example: controlThruster1
    # Constraints: Minimum length = 0, Maximum length = 64
    # Stage_Abridged
    def ControlThruster1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of type control thruster 1.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def NumControlThruster1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Control thruster 2 type.
    # Example: /// Example: controlThruster2
    # Constraints: Minimum length = 0, Maximum length = 64
    # Stage_Abridged
    def ControlThruster2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of type control thruster 2.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Stage_Abridged
    def NumControlThruster2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of URLs of photos of the stage.
    # Example: /// Example: ['photoURL']
    # Constraints: No constraints specified.
    # Stage_Abridged
    def PhotoUrls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Stage_Abridged
    def PhotoUrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Stage_Abridged
    def PhotoUrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Description/notes of the stage.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # Stage_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description/notes of the stage avionics.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # Stage_Abridged
    def AvionicsNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Stage_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Stage_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Stage_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Stage_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Stage_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Stage_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Stage_AbridgedStart(builder):
    builder.StartObject(39)

def Start(builder):
    Stage_AbridgedStart(builder)

def Stage_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Stage_AbridgedAddId(builder, id)

def Stage_AbridgedAddIdLaunchVehicle(builder, idLaunchVehicle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idLaunchVehicle), 0)

def AddIdLaunchVehicle(builder, idLaunchVehicle):
    Stage_AbridgedAddIdLaunchVehicle(builder, idLaunchVehicle)

def Stage_AbridgedAddIdEngine(builder, idEngine):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idEngine), 0)

def AddIdEngine(builder, idEngine):
    Stage_AbridgedAddIdEngine(builder, idEngine)

def Stage_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Stage_AbridgedAddClassificationMarking(builder, classificationMarking)

def Stage_AbridgedAddStageNumber(builder, stageNumber):
    builder.PrependInt32Slot(4, stageNumber, 0)

def AddStageNumber(builder, stageNumber):
    Stage_AbridgedAddStageNumber(builder, stageNumber)

def Stage_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Stage_AbridgedAddType(builder, type)

def Stage_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    Stage_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def Stage_AbridgedAddNumEngines(builder, numEngines):
    builder.PrependInt32Slot(7, numEngines, 0)

def AddNumEngines(builder, numEngines):
    Stage_AbridgedAddNumEngines(builder, numEngines)

def Stage_AbridgedAddLength(builder, length):
    builder.PrependFloat64Slot(8, length, 0.0)

def AddLength(builder, length):
    Stage_AbridgedAddLength(builder, length)

def Stage_AbridgedAddDiameter(builder, diameter):
    builder.PrependFloat64Slot(9, diameter, 0.0)

def AddDiameter(builder, diameter):
    Stage_AbridgedAddDiameter(builder, diameter)

def Stage_AbridgedAddMass(builder, mass):
    builder.PrependFloat64Slot(10, mass, 0.0)

def AddMass(builder, mass):
    Stage_AbridgedAddMass(builder, mass)

def Stage_AbridgedAddVernier(builder, vernier):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(vernier), 0)

def AddVernier(builder, vernier):
    Stage_AbridgedAddVernier(builder, vernier)

def Stage_AbridgedAddNumVernier(builder, numVernier):
    builder.PrependInt32Slot(12, numVernier, 0)

def AddNumVernier(builder, numVernier):
    Stage_AbridgedAddNumVernier(builder, numVernier)

def Stage_AbridgedAddMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel):
    builder.PrependFloat64Slot(13, mainEngineThrustSeaLevel, 0.0)

def AddMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel):
    Stage_AbridgedAddMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel)

def Stage_AbridgedAddMainEngineThrustVacuum(builder, mainEngineThrustVacuum):
    builder.PrependFloat64Slot(14, mainEngineThrustVacuum, 0.0)

def AddMainEngineThrustVacuum(builder, mainEngineThrustVacuum):
    Stage_AbridgedAddMainEngineThrustVacuum(builder, mainEngineThrustVacuum)

def Stage_AbridgedAddThrustSeaLevel(builder, thrustSeaLevel):
    builder.PrependFloat64Slot(15, thrustSeaLevel, 0.0)

def AddThrustSeaLevel(builder, thrustSeaLevel):
    Stage_AbridgedAddThrustSeaLevel(builder, thrustSeaLevel)

def Stage_AbridgedAddThrustVacuum(builder, thrustVacuum):
    builder.PrependFloat64Slot(16, thrustVacuum, 0.0)

def AddThrustVacuum(builder, thrustVacuum):
    Stage_AbridgedAddThrustVacuum(builder, thrustVacuum)

def Stage_AbridgedAddBurnTime(builder, burnTime):
    builder.PrependFloat64Slot(17, burnTime, 0.0)

def AddBurnTime(builder, burnTime):
    Stage_AbridgedAddBurnTime(builder, burnTime)

def Stage_AbridgedAddNumBurns(builder, numBurns):
    builder.PrependInt32Slot(18, numBurns, 0)

def AddNumBurns(builder, numBurns):
    Stage_AbridgedAddNumBurns(builder, numBurns)

def Stage_AbridgedAddVernierBurnTime(builder, vernierBurnTime):
    builder.PrependFloat64Slot(19, vernierBurnTime, 0.0)

def AddVernierBurnTime(builder, vernierBurnTime):
    Stage_AbridgedAddVernierBurnTime(builder, vernierBurnTime)

def Stage_AbridgedAddVernierNumBurns(builder, vernierNumBurns):
    builder.PrependInt32Slot(20, vernierNumBurns, 0)

def AddVernierNumBurns(builder, vernierNumBurns):
    Stage_AbridgedAddVernierNumBurns(builder, vernierNumBurns)

def Stage_AbridgedAddVernierThrustSeaLevel(builder, vernierThrustSeaLevel):
    builder.PrependFloat64Slot(21, vernierThrustSeaLevel, 0.0)

def AddVernierThrustSeaLevel(builder, vernierThrustSeaLevel):
    Stage_AbridgedAddVernierThrustSeaLevel(builder, vernierThrustSeaLevel)

def Stage_AbridgedAddVernierThrustVacuum(builder, vernierThrustVacuum):
    builder.PrependFloat64Slot(22, vernierThrustVacuum, 0.0)

def AddVernierThrustVacuum(builder, vernierThrustVacuum):
    Stage_AbridgedAddVernierThrustVacuum(builder, vernierThrustVacuum)

def Stage_AbridgedAddNumStageElements(builder, numStageElements):
    builder.PrependInt32Slot(23, numStageElements, 0)

def AddNumStageElements(builder, numStageElements):
    Stage_AbridgedAddNumStageElements(builder, numStageElements)

def Stage_AbridgedAddReusable(builder, reusable):
    builder.PrependBoolSlot(24, reusable, 0)

def AddReusable(builder, reusable):
    Stage_AbridgedAddReusable(builder, reusable)

def Stage_AbridgedAddRestartable(builder, restartable):
    builder.PrependBoolSlot(25, restartable, 0)

def AddRestartable(builder, restartable):
    Stage_AbridgedAddRestartable(builder, restartable)

def Stage_AbridgedAddControlThruster1(builder, controlThruster1):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(controlThruster1), 0)

def AddControlThruster1(builder, controlThruster1):
    Stage_AbridgedAddControlThruster1(builder, controlThruster1)

def Stage_AbridgedAddNumControlThruster1(builder, numControlThruster1):
    builder.PrependInt32Slot(27, numControlThruster1, 0)

def AddNumControlThruster1(builder, numControlThruster1):
    Stage_AbridgedAddNumControlThruster1(builder, numControlThruster1)

def Stage_AbridgedAddControlThruster2(builder, controlThruster2):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(controlThruster2), 0)

def AddControlThruster2(builder, controlThruster2):
    Stage_AbridgedAddControlThruster2(builder, controlThruster2)

def Stage_AbridgedAddNumControlThruster2(builder, numControlThruster2):
    builder.PrependInt32Slot(29, numControlThruster2, 0)

def AddNumControlThruster2(builder, numControlThruster2):
    Stage_AbridgedAddNumControlThruster2(builder, numControlThruster2)

def Stage_AbridgedAddPhotoUrls(builder, photoUrls):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(photoUrls), 0)

def AddPhotoUrls(builder, photoUrls):
    Stage_AbridgedAddPhotoUrls(builder, photoUrls)

def Stage_AbridgedStartPhotoUrlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPhotoUrlsVector(builder, numElems):
    return Stage_AbridgedStartPhotoUrlsVector(builder, numElems)

def Stage_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Stage_AbridgedAddNotes(builder, notes)

def Stage_AbridgedAddAvionicsNotes(builder, avionicsNotes):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(avionicsNotes), 0)

def AddAvionicsNotes(builder, avionicsNotes):
    Stage_AbridgedAddAvionicsNotes(builder, avionicsNotes)

def Stage_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Stage_AbridgedAddCreatedAt(builder, createdAt)

def Stage_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Stage_AbridgedAddCreatedBy(builder, createdBy)

def Stage_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Stage_AbridgedAddSource(builder, source)

def Stage_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Stage_AbridgedAddOrigin(builder, origin)

def Stage_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Stage_AbridgedAddOrigNetwork(builder, origNetwork)

def Stage_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(38, dataMode, 0)

def AddDataMode(builder, dataMode):
    Stage_AbridgedAddDataMode(builder, dataMode)

def Stage_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Stage_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class Stage_AbridgedT(object):

    # Stage_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idLaunchVehicle = None  # type: str
        self.idEngine = None  # type: str
        self.classificationMarking = None  # type: str
        self.stageNumber = 0  # type: int
        self.type = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.numEngines = 0  # type: int
        self.length = 0.0  # type: float
        self.diameter = 0.0  # type: float
        self.mass = 0.0  # type: float
        self.vernier = None  # type: str
        self.numVernier = 0  # type: int
        self.mainEngineThrustSeaLevel = 0.0  # type: float
        self.mainEngineThrustVacuum = 0.0  # type: float
        self.thrustSeaLevel = 0.0  # type: float
        self.thrustVacuum = 0.0  # type: float
        self.burnTime = 0.0  # type: float
        self.numBurns = 0  # type: int
        self.vernierBurnTime = 0.0  # type: float
        self.vernierNumBurns = 0  # type: int
        self.vernierThrustSeaLevel = 0.0  # type: float
        self.vernierThrustVacuum = 0.0  # type: float
        self.numStageElements = 0  # type: int
        self.reusable = False  # type: bool
        self.restartable = False  # type: bool
        self.controlThruster1 = None  # type: str
        self.numControlThruster1 = 0  # type: int
        self.controlThruster2 = None  # type: str
        self.numControlThruster2 = 0  # type: int
        self.photoUrls = None  # type: List[str]
        self.notes = None  # type: str
        self.avionicsNotes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stageAbridged = Stage_Abridged()
        stageAbridged.Init(buf, pos)
        return cls.InitFromObj(stageAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stageAbridged):
        x = Stage_AbridgedT()
        x._UnPack(stageAbridged)
        return x

    # Stage_AbridgedT
    def _UnPack(self, stageAbridged):
        if stageAbridged is None:
            return
        self.id = stageAbridged.Id()
        self.idLaunchVehicle = stageAbridged.IdLaunchVehicle()
        self.idEngine = stageAbridged.IdEngine()
        self.classificationMarking = stageAbridged.ClassificationMarking()
        self.stageNumber = stageAbridged.StageNumber()
        self.type = stageAbridged.Type()
        self.manufacturerOrgId = stageAbridged.ManufacturerOrgId()
        self.numEngines = stageAbridged.NumEngines()
        self.length = stageAbridged.Length()
        self.diameter = stageAbridged.Diameter()
        self.mass = stageAbridged.Mass()
        self.vernier = stageAbridged.Vernier()
        self.numVernier = stageAbridged.NumVernier()
        self.mainEngineThrustSeaLevel = stageAbridged.MainEngineThrustSeaLevel()
        self.mainEngineThrustVacuum = stageAbridged.MainEngineThrustVacuum()
        self.thrustSeaLevel = stageAbridged.ThrustSeaLevel()
        self.thrustVacuum = stageAbridged.ThrustVacuum()
        self.burnTime = stageAbridged.BurnTime()
        self.numBurns = stageAbridged.NumBurns()
        self.vernierBurnTime = stageAbridged.VernierBurnTime()
        self.vernierNumBurns = stageAbridged.VernierNumBurns()
        self.vernierThrustSeaLevel = stageAbridged.VernierThrustSeaLevel()
        self.vernierThrustVacuum = stageAbridged.VernierThrustVacuum()
        self.numStageElements = stageAbridged.NumStageElements()
        self.reusable = stageAbridged.Reusable()
        self.restartable = stageAbridged.Restartable()
        self.controlThruster1 = stageAbridged.ControlThruster1()
        self.numControlThruster1 = stageAbridged.NumControlThruster1()
        self.controlThruster2 = stageAbridged.ControlThruster2()
        self.numControlThruster2 = stageAbridged.NumControlThruster2()
        if not stageAbridged.PhotoUrlsIsNone():
            self.photoUrls = []
            for i in range(stageAbridged.PhotoUrlsLength()):
                self.photoUrls.append(stageAbridged.PhotoUrls(i))
        self.notes = stageAbridged.Notes()
        self.avionicsNotes = stageAbridged.AvionicsNotes()
        self.createdAt = stageAbridged.CreatedAt()
        self.createdBy = stageAbridged.CreatedBy()
        self.source = stageAbridged.Source()
        self.origin = stageAbridged.Origin()
        self.origNetwork = stageAbridged.OrigNetwork()
        self.dataMode = stageAbridged.DataMode()

    # Stage_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idLaunchVehicle is not None:
            idLaunchVehicle = builder.CreateString(self.idLaunchVehicle)
        if self.idEngine is not None:
            idEngine = builder.CreateString(self.idEngine)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.vernier is not None:
            vernier = builder.CreateString(self.vernier)
        if self.controlThruster1 is not None:
            controlThruster1 = builder.CreateString(self.controlThruster1)
        if self.controlThruster2 is not None:
            controlThruster2 = builder.CreateString(self.controlThruster2)
        if self.photoUrls is not None:
            photoUrlslist = []
            for i in range(len(self.photoUrls)):
                photoUrlslist.append(builder.CreateString(self.photoUrls[i]))
            Stage_AbridgedStartPhotoUrlsVector(builder, len(self.photoUrls))
            for i in reversed(range(len(self.photoUrls))):
                builder.PrependUOffsetTRelative(photoUrlslist[i])
            photoUrls = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.avionicsNotes is not None:
            avionicsNotes = builder.CreateString(self.avionicsNotes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Stage_AbridgedStart(builder)
        if self.id is not None:
            Stage_AbridgedAddId(builder, id)
        if self.idLaunchVehicle is not None:
            Stage_AbridgedAddIdLaunchVehicle(builder, idLaunchVehicle)
        if self.idEngine is not None:
            Stage_AbridgedAddIdEngine(builder, idEngine)
        if self.classificationMarking is not None:
            Stage_AbridgedAddClassificationMarking(builder, classificationMarking)
        Stage_AbridgedAddStageNumber(builder, self.stageNumber)
        if self.type is not None:
            Stage_AbridgedAddType(builder, type)
        if self.manufacturerOrgId is not None:
            Stage_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        Stage_AbridgedAddNumEngines(builder, self.numEngines)
        Stage_AbridgedAddLength(builder, self.length)
        Stage_AbridgedAddDiameter(builder, self.diameter)
        Stage_AbridgedAddMass(builder, self.mass)
        if self.vernier is not None:
            Stage_AbridgedAddVernier(builder, vernier)
        Stage_AbridgedAddNumVernier(builder, self.numVernier)
        Stage_AbridgedAddMainEngineThrustSeaLevel(builder, self.mainEngineThrustSeaLevel)
        Stage_AbridgedAddMainEngineThrustVacuum(builder, self.mainEngineThrustVacuum)
        Stage_AbridgedAddThrustSeaLevel(builder, self.thrustSeaLevel)
        Stage_AbridgedAddThrustVacuum(builder, self.thrustVacuum)
        Stage_AbridgedAddBurnTime(builder, self.burnTime)
        Stage_AbridgedAddNumBurns(builder, self.numBurns)
        Stage_AbridgedAddVernierBurnTime(builder, self.vernierBurnTime)
        Stage_AbridgedAddVernierNumBurns(builder, self.vernierNumBurns)
        Stage_AbridgedAddVernierThrustSeaLevel(builder, self.vernierThrustSeaLevel)
        Stage_AbridgedAddVernierThrustVacuum(builder, self.vernierThrustVacuum)
        Stage_AbridgedAddNumStageElements(builder, self.numStageElements)
        Stage_AbridgedAddReusable(builder, self.reusable)
        Stage_AbridgedAddRestartable(builder, self.restartable)
        if self.controlThruster1 is not None:
            Stage_AbridgedAddControlThruster1(builder, controlThruster1)
        Stage_AbridgedAddNumControlThruster1(builder, self.numControlThruster1)
        if self.controlThruster2 is not None:
            Stage_AbridgedAddControlThruster2(builder, controlThruster2)
        Stage_AbridgedAddNumControlThruster2(builder, self.numControlThruster2)
        if self.photoUrls is not None:
            Stage_AbridgedAddPhotoUrls(builder, photoUrls)
        if self.notes is not None:
            Stage_AbridgedAddNotes(builder, notes)
        if self.avionicsNotes is not None:
            Stage_AbridgedAddAvionicsNotes(builder, avionicsNotes)
        if self.createdAt is not None:
            Stage_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Stage_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Stage_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Stage_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Stage_AbridgedAddOrigNetwork(builder, origNetwork)
        Stage_AbridgedAddDataMode(builder, self.dataMode)
        stageAbridged = Stage_AbridgedEnd(builder)
        return stageAbridged
