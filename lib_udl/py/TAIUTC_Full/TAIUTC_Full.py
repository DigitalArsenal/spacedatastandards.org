# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
# Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
# The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
class TAIUTC_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TAIUTC_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTAIUTC_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TAIUTC_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x41\x49\x55", size_prefixed=size_prefixed)

    # TAIUTC_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: TAIUTC-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # TAIUTC_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # TAIUTC_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Effective date/time for the leap second adjustment.
    # Example: /// Example: 2017-01-01T00:00:00.123Z
    # Constraints: No constraints specified.
    # TAIUTC_Full
    def AdjustmentDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
    # Example: /// Example: 1.422818
    # Constraints: No constraints specified.
    # TAIUTC_Full
    def TaiUtc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Multiplication factor of the leap second adjustment.
    # Example: /// Example: 0.001296
    # Constraints: No constraints specified.
    # TAIUTC_Full
    def MultiplicationFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
    # Constraints: Minimum length = 0, Maximum length = 256
    # TAIUTC_Full
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # TAIUTC_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # TAIUTC_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # TAIUTC_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # TAIUTC_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # TAIUTC_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # TAIUTC_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # TAIUTC_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # TAIUTC_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TAIUTC_FullStart(builder):
    builder.StartObject(14)

def Start(builder):
    TAIUTC_FullStart(builder)

def TAIUTC_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    TAIUTC_FullAddId(builder, id)

def TAIUTC_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    TAIUTC_FullAddClassificationMarking(builder, classificationMarking)

def TAIUTC_FullAddAdjustmentDate(builder, adjustmentDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(adjustmentDate), 0)

def AddAdjustmentDate(builder, adjustmentDate):
    TAIUTC_FullAddAdjustmentDate(builder, adjustmentDate)

def TAIUTC_FullAddTaiUtc(builder, taiUtc):
    builder.PrependFloat64Slot(3, taiUtc, 0.0)

def AddTaiUtc(builder, taiUtc):
    TAIUTC_FullAddTaiUtc(builder, taiUtc)

def TAIUTC_FullAddMultiplicationFactor(builder, multiplicationFactor):
    builder.PrependFloat64Slot(4, multiplicationFactor, 0.0)

def AddMultiplicationFactor(builder, multiplicationFactor):
    TAIUTC_FullAddMultiplicationFactor(builder, multiplicationFactor)

def TAIUTC_FullAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    TAIUTC_FullAddRawFileUri(builder, rawFileUri)

def TAIUTC_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    TAIUTC_FullAddSource(builder, source)

def TAIUTC_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    TAIUTC_FullAddOrigin(builder, origin)

def TAIUTC_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    TAIUTC_FullAddOrigNetwork(builder, origNetwork)

def TAIUTC_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    TAIUTC_FullAddDataMode(builder, dataMode)

def TAIUTC_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    TAIUTC_FullAddCreatedAt(builder, createdAt)

def TAIUTC_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    TAIUTC_FullAddCreatedBy(builder, createdBy)

def TAIUTC_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    TAIUTC_FullAddUpdatedAt(builder, updatedAt)

def TAIUTC_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    TAIUTC_FullAddUpdatedBy(builder, updatedBy)

def TAIUTC_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return TAIUTC_FullEnd(builder)


class TAIUTC_FullT(object):

    # TAIUTC_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.adjustmentDate = None  # type: str
        self.taiUtc = 0.0  # type: float
        self.multiplicationFactor = 0.0  # type: float
        self.rawFileUri = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        taiutcFull = TAIUTC_Full()
        taiutcFull.Init(buf, pos)
        return cls.InitFromObj(taiutcFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, taiutcFull):
        x = TAIUTC_FullT()
        x._UnPack(taiutcFull)
        return x

    # TAIUTC_FullT
    def _UnPack(self, taiutcFull):
        if taiutcFull is None:
            return
        self.id = taiutcFull.Id()
        self.classificationMarking = taiutcFull.ClassificationMarking()
        self.adjustmentDate = taiutcFull.AdjustmentDate()
        self.taiUtc = taiutcFull.TaiUtc()
        self.multiplicationFactor = taiutcFull.MultiplicationFactor()
        self.rawFileUri = taiutcFull.RawFileUri()
        self.source = taiutcFull.Source()
        self.origin = taiutcFull.Origin()
        self.origNetwork = taiutcFull.OrigNetwork()
        self.dataMode = taiutcFull.DataMode()
        self.createdAt = taiutcFull.CreatedAt()
        self.createdBy = taiutcFull.CreatedBy()
        self.updatedAt = taiutcFull.UpdatedAt()
        self.updatedBy = taiutcFull.UpdatedBy()

    # TAIUTC_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.adjustmentDate is not None:
            adjustmentDate = builder.CreateString(self.adjustmentDate)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        TAIUTC_FullStart(builder)
        if self.id is not None:
            TAIUTC_FullAddId(builder, id)
        if self.classificationMarking is not None:
            TAIUTC_FullAddClassificationMarking(builder, classificationMarking)
        if self.adjustmentDate is not None:
            TAIUTC_FullAddAdjustmentDate(builder, adjustmentDate)
        TAIUTC_FullAddTaiUtc(builder, self.taiUtc)
        TAIUTC_FullAddMultiplicationFactor(builder, self.multiplicationFactor)
        if self.rawFileUri is not None:
            TAIUTC_FullAddRawFileUri(builder, rawFileUri)
        if self.source is not None:
            TAIUTC_FullAddSource(builder, source)
        if self.origin is not None:
            TAIUTC_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            TAIUTC_FullAddOrigNetwork(builder, origNetwork)
        TAIUTC_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            TAIUTC_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            TAIUTC_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            TAIUTC_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            TAIUTC_FullAddUpdatedBy(builder, updatedBy)
        taiutcFull = TAIUTC_FullEnd(builder)
        return taiutcFull
