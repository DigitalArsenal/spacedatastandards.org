# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A response for various effects on a target.
class EffectResponse_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EffectResponse_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEffectResponse_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EffectResponse_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x46\x46\x45", size_prefixed=size_prefixed)

    # EffectResponse_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: EFFECTRESPONSE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EffectResponse_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EffectResponse_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the EffectRequest associated with this response.
    # Example: /// Example: EFFECTREQUEST-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EffectResponse_Ingest
    def IdEffectRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The external system identifier of the associated effect request. A human readable unique id.
    # Example: /// Example: EXTERNALREQUEST-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def ExternalRequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of response in this record (e.g. COA, SCORECARD, etc.).
    # Example: /// Example: COA
    # Constraints: Minimum length = 1, Maximum length = 24
    # EffectResponse_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
    # Example: /// Example: AIRCRAFT
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def ActorSrcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The record ID, depending on the type identified in actorSrcType, of the requested asset.
    # Example: /// Example: RC-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def ActorSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of munition being fired.
    # Example: /// Example: Dummy
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EffectResponse_Ingest
    def MunitionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the munition.
    # Example: /// Example: MUNITION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def MunitionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of shots required to destroy target.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def ShotsRequired(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The probability of kill (0-1) of the target being destroyed.
    # Example: /// Example: 0.7
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def ProbabilityOfKill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The collateral damage estimate (CDE) of the munition being fired.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def CollateralDamageEst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # List of actions associated with this effect response.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def ActionsList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectResponse_Ingest
    def ActionsListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectResponse_Ingest
    def ActionsListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # List of external actions to be executed as part of this task.
    # Example: /// Example: ['ACTION1', 'ACTION2']
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def ExternalActions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectResponse_Ingest
    def ExternalActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectResponse_Ingest
    def ExternalActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # List of COA metrics associated with this effect response.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def CoaMetrics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectResponse_Ingest
    def CoaMetricsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectResponse_Ingest
    def CoaMetricsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # The time to overhead for the red force to be over their target, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T00:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def RedTimeToOverhead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T00:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def DecisionDeadline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source type of the targetId identifier (POI, SITE, TRACK).
    # Example: /// Example: POI
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def RedTargetSrcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    # Example: /// Example: REDTARGETSRC-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def RedTargetSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2021-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EffectResponse_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # EffectResponse_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # EffectResponse_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponse_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EffectResponse_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # EffectResponse_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EffectResponse_IngestStart(builder):
    builder.StartObject(25)

def Start(builder):
    EffectResponse_IngestStart(builder)

def EffectResponse_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EffectResponse_IngestAddId(builder, id)

def EffectResponse_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EffectResponse_IngestAddClassificationMarking(builder, classificationMarking)

def EffectResponse_IngestAddIdEffectRequest(builder, idEffectRequest):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idEffectRequest), 0)

def AddIdEffectRequest(builder, idEffectRequest):
    EffectResponse_IngestAddIdEffectRequest(builder, idEffectRequest)

def EffectResponse_IngestAddExternalRequestId(builder, externalRequestId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(externalRequestId), 0)

def AddExternalRequestId(builder, externalRequestId):
    EffectResponse_IngestAddExternalRequestId(builder, externalRequestId)

def EffectResponse_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EffectResponse_IngestAddType(builder, type)

def EffectResponse_IngestAddActorSrcType(builder, actorSrcType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actorSrcType), 0)

def AddActorSrcType(builder, actorSrcType):
    EffectResponse_IngestAddActorSrcType(builder, actorSrcType)

def EffectResponse_IngestAddActorSrcId(builder, actorSrcId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actorSrcId), 0)

def AddActorSrcId(builder, actorSrcId):
    EffectResponse_IngestAddActorSrcId(builder, actorSrcId)

def EffectResponse_IngestAddMunitionType(builder, munitionType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(munitionType), 0)

def AddMunitionType(builder, munitionType):
    EffectResponse_IngestAddMunitionType(builder, munitionType)

def EffectResponse_IngestAddMunitionId(builder, munitionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(munitionId), 0)

def AddMunitionId(builder, munitionId):
    EffectResponse_IngestAddMunitionId(builder, munitionId)

def EffectResponse_IngestAddShotsRequired(builder, shotsRequired):
    builder.PrependInt32Slot(9, shotsRequired, 0)

def AddShotsRequired(builder, shotsRequired):
    EffectResponse_IngestAddShotsRequired(builder, shotsRequired)

def EffectResponse_IngestAddProbabilityOfKill(builder, probabilityOfKill):
    builder.PrependFloat64Slot(10, probabilityOfKill, 0.0)

def AddProbabilityOfKill(builder, probabilityOfKill):
    EffectResponse_IngestAddProbabilityOfKill(builder, probabilityOfKill)

def EffectResponse_IngestAddCollateralDamageEst(builder, collateralDamageEst):
    builder.PrependFloat64Slot(11, collateralDamageEst, 0.0)

def AddCollateralDamageEst(builder, collateralDamageEst):
    EffectResponse_IngestAddCollateralDamageEst(builder, collateralDamageEst)

def EffectResponse_IngestAddActionsList(builder, actionsList):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(actionsList), 0)

def AddActionsList(builder, actionsList):
    EffectResponse_IngestAddActionsList(builder, actionsList)

def EffectResponse_IngestStartActionsListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActionsListVector(builder, numElems):
    return EffectResponse_IngestStartActionsListVector(builder, numElems)

def EffectResponse_IngestAddExternalActions(builder, externalActions):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(externalActions), 0)

def AddExternalActions(builder, externalActions):
    EffectResponse_IngestAddExternalActions(builder, externalActions)

def EffectResponse_IngestStartExternalActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExternalActionsVector(builder, numElems):
    return EffectResponse_IngestStartExternalActionsVector(builder, numElems)

def EffectResponse_IngestAddCoaMetrics(builder, coaMetrics):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(coaMetrics), 0)

def AddCoaMetrics(builder, coaMetrics):
    EffectResponse_IngestAddCoaMetrics(builder, coaMetrics)

def EffectResponse_IngestStartCoaMetricsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCoaMetricsVector(builder, numElems):
    return EffectResponse_IngestStartCoaMetricsVector(builder, numElems)

def EffectResponse_IngestAddRedTimeToOverhead(builder, redTimeToOverhead):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(redTimeToOverhead), 0)

def AddRedTimeToOverhead(builder, redTimeToOverhead):
    EffectResponse_IngestAddRedTimeToOverhead(builder, redTimeToOverhead)

def EffectResponse_IngestAddDecisionDeadline(builder, decisionDeadline):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(decisionDeadline), 0)

def AddDecisionDeadline(builder, decisionDeadline):
    EffectResponse_IngestAddDecisionDeadline(builder, decisionDeadline)

def EffectResponse_IngestAddRedTargetSrcType(builder, redTargetSrcType):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(redTargetSrcType), 0)

def AddRedTargetSrcType(builder, redTargetSrcType):
    EffectResponse_IngestAddRedTargetSrcType(builder, redTargetSrcType)

def EffectResponse_IngestAddRedTargetSrcId(builder, redTargetSrcId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(redTargetSrcId), 0)

def AddRedTargetSrcId(builder, redTargetSrcId):
    EffectResponse_IngestAddRedTargetSrcId(builder, redTargetSrcId)

def EffectResponse_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EffectResponse_IngestAddCreatedAt(builder, createdAt)

def EffectResponse_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EffectResponse_IngestAddCreatedBy(builder, createdBy)

def EffectResponse_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EffectResponse_IngestAddSource(builder, source)

def EffectResponse_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EffectResponse_IngestAddOrigin(builder, origin)

def EffectResponse_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(23, dataMode, 0)

def AddDataMode(builder, dataMode):
    EffectResponse_IngestAddDataMode(builder, dataMode)

def EffectResponse_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EffectResponse_IngestAddOrigNetwork(builder, origNetwork)

def EffectResponse_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EffectResponse_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class EffectResponse_IngestT(object):

    # EffectResponse_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idEffectRequest = None  # type: str
        self.externalRequestId = None  # type: str
        self.type = None  # type: str
        self.actorSrcType = None  # type: str
        self.actorSrcId = None  # type: str
        self.munitionType = None  # type: str
        self.munitionId = None  # type: str
        self.shotsRequired = 0  # type: int
        self.probabilityOfKill = 0.0  # type: float
        self.collateralDamageEst = 0.0  # type: float
        self.actionsList = None  # type: List[str]
        self.externalActions = None  # type: List[str]
        self.coaMetrics = None  # type: List[str]
        self.redTimeToOverhead = None  # type: str
        self.decisionDeadline = None  # type: str
        self.redTargetSrcType = None  # type: str
        self.redTargetSrcId = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        effectResponseIngest = EffectResponse_Ingest()
        effectResponseIngest.Init(buf, pos)
        return cls.InitFromObj(effectResponseIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, effectResponseIngest):
        x = EffectResponse_IngestT()
        x._UnPack(effectResponseIngest)
        return x

    # EffectResponse_IngestT
    def _UnPack(self, effectResponseIngest):
        if effectResponseIngest is None:
            return
        self.id = effectResponseIngest.Id()
        self.classificationMarking = effectResponseIngest.ClassificationMarking()
        self.idEffectRequest = effectResponseIngest.IdEffectRequest()
        self.externalRequestId = effectResponseIngest.ExternalRequestId()
        self.type = effectResponseIngest.Type()
        self.actorSrcType = effectResponseIngest.ActorSrcType()
        self.actorSrcId = effectResponseIngest.ActorSrcId()
        self.munitionType = effectResponseIngest.MunitionType()
        self.munitionId = effectResponseIngest.MunitionId()
        self.shotsRequired = effectResponseIngest.ShotsRequired()
        self.probabilityOfKill = effectResponseIngest.ProbabilityOfKill()
        self.collateralDamageEst = effectResponseIngest.CollateralDamageEst()
        if not effectResponseIngest.ActionsListIsNone():
            self.actionsList = []
            for i in range(effectResponseIngest.ActionsListLength()):
                self.actionsList.append(effectResponseIngest.ActionsList(i))
        if not effectResponseIngest.ExternalActionsIsNone():
            self.externalActions = []
            for i in range(effectResponseIngest.ExternalActionsLength()):
                self.externalActions.append(effectResponseIngest.ExternalActions(i))
        if not effectResponseIngest.CoaMetricsIsNone():
            self.coaMetrics = []
            for i in range(effectResponseIngest.CoaMetricsLength()):
                self.coaMetrics.append(effectResponseIngest.CoaMetrics(i))
        self.redTimeToOverhead = effectResponseIngest.RedTimeToOverhead()
        self.decisionDeadline = effectResponseIngest.DecisionDeadline()
        self.redTargetSrcType = effectResponseIngest.RedTargetSrcType()
        self.redTargetSrcId = effectResponseIngest.RedTargetSrcId()
        self.createdAt = effectResponseIngest.CreatedAt()
        self.createdBy = effectResponseIngest.CreatedBy()
        self.source = effectResponseIngest.Source()
        self.origin = effectResponseIngest.Origin()
        self.dataMode = effectResponseIngest.DataMode()
        self.origNetwork = effectResponseIngest.OrigNetwork()

    # EffectResponse_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idEffectRequest is not None:
            idEffectRequest = builder.CreateString(self.idEffectRequest)
        if self.externalRequestId is not None:
            externalRequestId = builder.CreateString(self.externalRequestId)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.actorSrcType is not None:
            actorSrcType = builder.CreateString(self.actorSrcType)
        if self.actorSrcId is not None:
            actorSrcId = builder.CreateString(self.actorSrcId)
        if self.munitionType is not None:
            munitionType = builder.CreateString(self.munitionType)
        if self.munitionId is not None:
            munitionId = builder.CreateString(self.munitionId)
        if self.actionsList is not None:
            actionsListlist = []
            for i in range(len(self.actionsList)):
                actionsListlist.append(builder.CreateString(self.actionsList[i]))
            EffectResponse_IngestStartActionsListVector(builder, len(self.actionsList))
            for i in reversed(range(len(self.actionsList))):
                builder.PrependUOffsetTRelative(actionsListlist[i])
            actionsList = builder.EndVector()
        if self.externalActions is not None:
            externalActionslist = []
            for i in range(len(self.externalActions)):
                externalActionslist.append(builder.CreateString(self.externalActions[i]))
            EffectResponse_IngestStartExternalActionsVector(builder, len(self.externalActions))
            for i in reversed(range(len(self.externalActions))):
                builder.PrependUOffsetTRelative(externalActionslist[i])
            externalActions = builder.EndVector()
        if self.coaMetrics is not None:
            coaMetricslist = []
            for i in range(len(self.coaMetrics)):
                coaMetricslist.append(builder.CreateString(self.coaMetrics[i]))
            EffectResponse_IngestStartCoaMetricsVector(builder, len(self.coaMetrics))
            for i in reversed(range(len(self.coaMetrics))):
                builder.PrependUOffsetTRelative(coaMetricslist[i])
            coaMetrics = builder.EndVector()
        if self.redTimeToOverhead is not None:
            redTimeToOverhead = builder.CreateString(self.redTimeToOverhead)
        if self.decisionDeadline is not None:
            decisionDeadline = builder.CreateString(self.decisionDeadline)
        if self.redTargetSrcType is not None:
            redTargetSrcType = builder.CreateString(self.redTargetSrcType)
        if self.redTargetSrcId is not None:
            redTargetSrcId = builder.CreateString(self.redTargetSrcId)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        EffectResponse_IngestStart(builder)
        if self.id is not None:
            EffectResponse_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            EffectResponse_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idEffectRequest is not None:
            EffectResponse_IngestAddIdEffectRequest(builder, idEffectRequest)
        if self.externalRequestId is not None:
            EffectResponse_IngestAddExternalRequestId(builder, externalRequestId)
        if self.type is not None:
            EffectResponse_IngestAddType(builder, type)
        if self.actorSrcType is not None:
            EffectResponse_IngestAddActorSrcType(builder, actorSrcType)
        if self.actorSrcId is not None:
            EffectResponse_IngestAddActorSrcId(builder, actorSrcId)
        if self.munitionType is not None:
            EffectResponse_IngestAddMunitionType(builder, munitionType)
        if self.munitionId is not None:
            EffectResponse_IngestAddMunitionId(builder, munitionId)
        EffectResponse_IngestAddShotsRequired(builder, self.shotsRequired)
        EffectResponse_IngestAddProbabilityOfKill(builder, self.probabilityOfKill)
        EffectResponse_IngestAddCollateralDamageEst(builder, self.collateralDamageEst)
        if self.actionsList is not None:
            EffectResponse_IngestAddActionsList(builder, actionsList)
        if self.externalActions is not None:
            EffectResponse_IngestAddExternalActions(builder, externalActions)
        if self.coaMetrics is not None:
            EffectResponse_IngestAddCoaMetrics(builder, coaMetrics)
        if self.redTimeToOverhead is not None:
            EffectResponse_IngestAddRedTimeToOverhead(builder, redTimeToOverhead)
        if self.decisionDeadline is not None:
            EffectResponse_IngestAddDecisionDeadline(builder, decisionDeadline)
        if self.redTargetSrcType is not None:
            EffectResponse_IngestAddRedTargetSrcType(builder, redTargetSrcType)
        if self.redTargetSrcId is not None:
            EffectResponse_IngestAddRedTargetSrcId(builder, redTargetSrcId)
        if self.createdAt is not None:
            EffectResponse_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EffectResponse_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            EffectResponse_IngestAddSource(builder, source)
        if self.origin is not None:
            EffectResponse_IngestAddOrigin(builder, origin)
        EffectResponse_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            EffectResponse_IngestAddOrigNetwork(builder, origNetwork)
        effectResponseIngest = EffectResponse_IngestEnd(builder)
        return effectResponseIngest
