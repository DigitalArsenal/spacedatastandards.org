# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
# Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
# Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
# Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
# IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
class Eop_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Eop_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEop_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Eop_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4F\x50\x49", size_prefixed=size_prefixed)

    # Eop_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: EOP-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Eop_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Eop_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Eop_Ingest
    def EopDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
    # Example: /// Example: I
    # Constraints: Minimum length = 0, Maximum length = 1
    # Eop_Ingest
    def PolarMotionState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    # Example: /// Example: 0.182987
    # Constraints: No constraints specified.
    # Eop_Ingest
    def PolarMotionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated uncertainty/error in polarMotionX value in arc seconds.
    # Example: /// Example: 0.000672
    # Constraints: No constraints specified.
    # Eop_Ingest
    def PolarMotionXunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    # Example: /// Example: 0.168775
    # Constraints: No constraints specified.
    # Eop_Ingest
    def PolarMotionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated uncertainty/error in polarMotionY value in arc seconds.
    # Example: /// Example: 0.000345
    # Constraints: No constraints specified.
    # Eop_Ingest
    def PolarMotionYunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
    # Example: /// Example: I
    # Constraints: Minimum length = 0, Maximum length = 1
    # Eop_Ingest
    def Ut1Utcstate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
    # Example: /// Example: -0.1251659
    # Constraints: No constraints specified.
    # Eop_Ingest
    def Ut1Utc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated uncertainty/error in the ut1UTC value in seconds.
    # Example: /// Example: 2.07e-05
    # Constraints: No constraints specified.
    # Eop_Ingest
    def Ut1Utcunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
    # Example: /// Example: 1.8335
    # Constraints: No constraints specified.
    # Eop_Ingest
    def Lod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated uncertainty/error in the lod value in seconds.
    # Example: /// Example: 0.0201
    # Constraints: No constraints specified.
    # Eop_Ingest
    def LodUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
    # Example: /// Example: I
    # Constraints: Minimum length = 0, Maximum length = 1
    # Eop_Ingest
    def NutationState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
    # Example: /// Example: -10.437
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DPsi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated uncertainty/error in the dPSI value in milliseconds of arc.
    # Example: /// Example: 0.507
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DPsiunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
    # Example: /// Example: -0.917
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DEpsilon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
    # Example: /// Example: 0.165
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DEpsilonUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
    # Example: /// Example: -0.086
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
    # Example: /// Example: 0.202
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DXunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
    # Example: /// Example: 0.13
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
    # Example: /// Example: 0.165
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DYunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    # Example: /// Example: 0.1824
    # Constraints: No constraints specified.
    # Eop_Ingest
    def PolarMotionXb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
    # Example: /// Example: 0.1679
    # Constraints: No constraints specified.
    # Eop_Ingest
    def PolarMotionYb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
    # Example: /// Example: -0.1253
    # Constraints: No constraints specified.
    # Eop_Ingest
    def Ut1Utcb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
    # Example: /// Example: -9.9
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DPsib(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
    # Example: /// Example: -1.7
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DEpsilonB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
    # Example: /// Example: 0.129
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DXb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
    # Example: /// Example: -0.653
    # Constraints: No constraints specified.
    # Eop_Ingest
    def DYb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
    # Example: /// Example: IAU1980
    # Constraints: Minimum length = 0, Maximum length = 10
    # Eop_Ingest
    def PrecessionNutationStd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # Eop_Ingest
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Eop_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Eop_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Eop_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Eop_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Eop_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # Eop_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Eop_IngestStart(builder):
    builder.StartObject(37)

def Start(builder):
    Eop_IngestStart(builder)

def Eop_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Eop_IngestAddId(builder, id)

def Eop_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Eop_IngestAddClassificationMarking(builder, classificationMarking)

def Eop_IngestAddEopDate(builder, eopDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(eopDate), 0)

def AddEopDate(builder, eopDate):
    Eop_IngestAddEopDate(builder, eopDate)

def Eop_IngestAddPolarMotionState(builder, polarMotionState):
    builder.PrependInt8Slot(3, polarMotionState, 0)

def AddPolarMotionState(builder, polarMotionState):
    Eop_IngestAddPolarMotionState(builder, polarMotionState)

def Eop_IngestAddPolarMotionX(builder, polarMotionX):
    builder.PrependFloat64Slot(4, polarMotionX, 0.0)

def AddPolarMotionX(builder, polarMotionX):
    Eop_IngestAddPolarMotionX(builder, polarMotionX)

def Eop_IngestAddPolarMotionXunc(builder, polarMotionXunc):
    builder.PrependFloat64Slot(5, polarMotionXunc, 0.0)

def AddPolarMotionXunc(builder, polarMotionXunc):
    Eop_IngestAddPolarMotionXunc(builder, polarMotionXunc)

def Eop_IngestAddPolarMotionY(builder, polarMotionY):
    builder.PrependFloat64Slot(6, polarMotionY, 0.0)

def AddPolarMotionY(builder, polarMotionY):
    Eop_IngestAddPolarMotionY(builder, polarMotionY)

def Eop_IngestAddPolarMotionYunc(builder, polarMotionYunc):
    builder.PrependFloat64Slot(7, polarMotionYunc, 0.0)

def AddPolarMotionYunc(builder, polarMotionYunc):
    Eop_IngestAddPolarMotionYunc(builder, polarMotionYunc)

def Eop_IngestAddUt1Utcstate(builder, ut1Utcstate):
    builder.PrependInt8Slot(8, ut1Utcstate, 0)

def AddUt1Utcstate(builder, ut1Utcstate):
    Eop_IngestAddUt1Utcstate(builder, ut1Utcstate)

def Eop_IngestAddUt1Utc(builder, ut1Utc):
    builder.PrependFloat64Slot(9, ut1Utc, 0.0)

def AddUt1Utc(builder, ut1Utc):
    Eop_IngestAddUt1Utc(builder, ut1Utc)

def Eop_IngestAddUt1Utcunc(builder, ut1Utcunc):
    builder.PrependFloat64Slot(10, ut1Utcunc, 0.0)

def AddUt1Utcunc(builder, ut1Utcunc):
    Eop_IngestAddUt1Utcunc(builder, ut1Utcunc)

def Eop_IngestAddLod(builder, lod):
    builder.PrependFloat64Slot(11, lod, 0.0)

def AddLod(builder, lod):
    Eop_IngestAddLod(builder, lod)

def Eop_IngestAddLodUnc(builder, lodUnc):
    builder.PrependFloat64Slot(12, lodUnc, 0.0)

def AddLodUnc(builder, lodUnc):
    Eop_IngestAddLodUnc(builder, lodUnc)

def Eop_IngestAddNutationState(builder, nutationState):
    builder.PrependInt8Slot(13, nutationState, 0)

def AddNutationState(builder, nutationState):
    Eop_IngestAddNutationState(builder, nutationState)

def Eop_IngestAddDPsi(builder, dPsi):
    builder.PrependFloat64Slot(14, dPsi, 0.0)

def AddDPsi(builder, dPsi):
    Eop_IngestAddDPsi(builder, dPsi)

def Eop_IngestAddDPsiunc(builder, dPsiunc):
    builder.PrependFloat64Slot(15, dPsiunc, 0.0)

def AddDPsiunc(builder, dPsiunc):
    Eop_IngestAddDPsiunc(builder, dPsiunc)

def Eop_IngestAddDEpsilon(builder, dEpsilon):
    builder.PrependFloat64Slot(16, dEpsilon, 0.0)

def AddDEpsilon(builder, dEpsilon):
    Eop_IngestAddDEpsilon(builder, dEpsilon)

def Eop_IngestAddDEpsilonUnc(builder, dEpsilonUnc):
    builder.PrependFloat64Slot(17, dEpsilonUnc, 0.0)

def AddDEpsilonUnc(builder, dEpsilonUnc):
    Eop_IngestAddDEpsilonUnc(builder, dEpsilonUnc)

def Eop_IngestAddDX(builder, dX):
    builder.PrependFloat64Slot(18, dX, 0.0)

def AddDX(builder, dX):
    Eop_IngestAddDX(builder, dX)

def Eop_IngestAddDXunc(builder, dXunc):
    builder.PrependFloat64Slot(19, dXunc, 0.0)

def AddDXunc(builder, dXunc):
    Eop_IngestAddDXunc(builder, dXunc)

def Eop_IngestAddDY(builder, dY):
    builder.PrependFloat64Slot(20, dY, 0.0)

def AddDY(builder, dY):
    Eop_IngestAddDY(builder, dY)

def Eop_IngestAddDYunc(builder, dYunc):
    builder.PrependFloat64Slot(21, dYunc, 0.0)

def AddDYunc(builder, dYunc):
    Eop_IngestAddDYunc(builder, dYunc)

def Eop_IngestAddPolarMotionXb(builder, polarMotionXb):
    builder.PrependFloat64Slot(22, polarMotionXb, 0.0)

def AddPolarMotionXb(builder, polarMotionXb):
    Eop_IngestAddPolarMotionXb(builder, polarMotionXb)

def Eop_IngestAddPolarMotionYb(builder, polarMotionYb):
    builder.PrependFloat64Slot(23, polarMotionYb, 0.0)

def AddPolarMotionYb(builder, polarMotionYb):
    Eop_IngestAddPolarMotionYb(builder, polarMotionYb)

def Eop_IngestAddUt1Utcb(builder, ut1Utcb):
    builder.PrependFloat64Slot(24, ut1Utcb, 0.0)

def AddUt1Utcb(builder, ut1Utcb):
    Eop_IngestAddUt1Utcb(builder, ut1Utcb)

def Eop_IngestAddDPsib(builder, dPsib):
    builder.PrependFloat64Slot(25, dPsib, 0.0)

def AddDPsib(builder, dPsib):
    Eop_IngestAddDPsib(builder, dPsib)

def Eop_IngestAddDEpsilonB(builder, dEpsilonB):
    builder.PrependFloat64Slot(26, dEpsilonB, 0.0)

def AddDEpsilonB(builder, dEpsilonB):
    Eop_IngestAddDEpsilonB(builder, dEpsilonB)

def Eop_IngestAddDXb(builder, dXb):
    builder.PrependFloat64Slot(27, dXb, 0.0)

def AddDXb(builder, dXb):
    Eop_IngestAddDXb(builder, dXb)

def Eop_IngestAddDYb(builder, dYb):
    builder.PrependFloat64Slot(28, dYb, 0.0)

def AddDYb(builder, dYb):
    Eop_IngestAddDYb(builder, dYb)

def Eop_IngestAddPrecessionNutationStd(builder, precessionNutationStd):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(precessionNutationStd), 0)

def AddPrecessionNutationStd(builder, precessionNutationStd):
    Eop_IngestAddPrecessionNutationStd(builder, precessionNutationStd)

def Eop_IngestAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    Eop_IngestAddRawFileUri(builder, rawFileUri)

def Eop_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Eop_IngestAddSource(builder, source)

def Eop_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Eop_IngestAddOrigin(builder, origin)

def Eop_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(33, dataMode, 0)

def AddDataMode(builder, dataMode):
    Eop_IngestAddDataMode(builder, dataMode)

def Eop_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Eop_IngestAddCreatedAt(builder, createdAt)

def Eop_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Eop_IngestAddCreatedBy(builder, createdBy)

def Eop_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Eop_IngestAddOrigNetwork(builder, origNetwork)

def Eop_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Eop_IngestEnd(builder)


class Eop_IngestT(object):

    # Eop_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.eopDate = None  # type: str
        self.polarMotionState = 0  # type: int
        self.polarMotionX = 0.0  # type: float
        self.polarMotionXunc = 0.0  # type: float
        self.polarMotionY = 0.0  # type: float
        self.polarMotionYunc = 0.0  # type: float
        self.ut1Utcstate = 0  # type: int
        self.ut1Utc = 0.0  # type: float
        self.ut1Utcunc = 0.0  # type: float
        self.lod = 0.0  # type: float
        self.lodUnc = 0.0  # type: float
        self.nutationState = 0  # type: int
        self.dPsi = 0.0  # type: float
        self.dPsiunc = 0.0  # type: float
        self.dEpsilon = 0.0  # type: float
        self.dEpsilonUnc = 0.0  # type: float
        self.dX = 0.0  # type: float
        self.dXunc = 0.0  # type: float
        self.dY = 0.0  # type: float
        self.dYunc = 0.0  # type: float
        self.polarMotionXb = 0.0  # type: float
        self.polarMotionYb = 0.0  # type: float
        self.ut1Utcb = 0.0  # type: float
        self.dPsib = 0.0  # type: float
        self.dEpsilonB = 0.0  # type: float
        self.dXb = 0.0  # type: float
        self.dYb = 0.0  # type: float
        self.precessionNutationStd = None  # type: str
        self.rawFileUri = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eopIngest = Eop_Ingest()
        eopIngest.Init(buf, pos)
        return cls.InitFromObj(eopIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, eopIngest):
        x = Eop_IngestT()
        x._UnPack(eopIngest)
        return x

    # Eop_IngestT
    def _UnPack(self, eopIngest):
        if eopIngest is None:
            return
        self.id = eopIngest.Id()
        self.classificationMarking = eopIngest.ClassificationMarking()
        self.eopDate = eopIngest.EopDate()
        self.polarMotionState = eopIngest.PolarMotionState()
        self.polarMotionX = eopIngest.PolarMotionX()
        self.polarMotionXunc = eopIngest.PolarMotionXunc()
        self.polarMotionY = eopIngest.PolarMotionY()
        self.polarMotionYunc = eopIngest.PolarMotionYunc()
        self.ut1Utcstate = eopIngest.Ut1Utcstate()
        self.ut1Utc = eopIngest.Ut1Utc()
        self.ut1Utcunc = eopIngest.Ut1Utcunc()
        self.lod = eopIngest.Lod()
        self.lodUnc = eopIngest.LodUnc()
        self.nutationState = eopIngest.NutationState()
        self.dPsi = eopIngest.DPsi()
        self.dPsiunc = eopIngest.DPsiunc()
        self.dEpsilon = eopIngest.DEpsilon()
        self.dEpsilonUnc = eopIngest.DEpsilonUnc()
        self.dX = eopIngest.DX()
        self.dXunc = eopIngest.DXunc()
        self.dY = eopIngest.DY()
        self.dYunc = eopIngest.DYunc()
        self.polarMotionXb = eopIngest.PolarMotionXb()
        self.polarMotionYb = eopIngest.PolarMotionYb()
        self.ut1Utcb = eopIngest.Ut1Utcb()
        self.dPsib = eopIngest.DPsib()
        self.dEpsilonB = eopIngest.DEpsilonB()
        self.dXb = eopIngest.DXb()
        self.dYb = eopIngest.DYb()
        self.precessionNutationStd = eopIngest.PrecessionNutationStd()
        self.rawFileUri = eopIngest.RawFileUri()
        self.source = eopIngest.Source()
        self.origin = eopIngest.Origin()
        self.dataMode = eopIngest.DataMode()
        self.createdAt = eopIngest.CreatedAt()
        self.createdBy = eopIngest.CreatedBy()
        self.origNetwork = eopIngest.OrigNetwork()

    # Eop_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.eopDate is not None:
            eopDate = builder.CreateString(self.eopDate)
        if self.precessionNutationStd is not None:
            precessionNutationStd = builder.CreateString(self.precessionNutationStd)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Eop_IngestStart(builder)
        if self.id is not None:
            Eop_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            Eop_IngestAddClassificationMarking(builder, classificationMarking)
        if self.eopDate is not None:
            Eop_IngestAddEopDate(builder, eopDate)
        Eop_IngestAddPolarMotionState(builder, self.polarMotionState)
        Eop_IngestAddPolarMotionX(builder, self.polarMotionX)
        Eop_IngestAddPolarMotionXunc(builder, self.polarMotionXunc)
        Eop_IngestAddPolarMotionY(builder, self.polarMotionY)
        Eop_IngestAddPolarMotionYunc(builder, self.polarMotionYunc)
        Eop_IngestAddUt1Utcstate(builder, self.ut1Utcstate)
        Eop_IngestAddUt1Utc(builder, self.ut1Utc)
        Eop_IngestAddUt1Utcunc(builder, self.ut1Utcunc)
        Eop_IngestAddLod(builder, self.lod)
        Eop_IngestAddLodUnc(builder, self.lodUnc)
        Eop_IngestAddNutationState(builder, self.nutationState)
        Eop_IngestAddDPsi(builder, self.dPsi)
        Eop_IngestAddDPsiunc(builder, self.dPsiunc)
        Eop_IngestAddDEpsilon(builder, self.dEpsilon)
        Eop_IngestAddDEpsilonUnc(builder, self.dEpsilonUnc)
        Eop_IngestAddDX(builder, self.dX)
        Eop_IngestAddDXunc(builder, self.dXunc)
        Eop_IngestAddDY(builder, self.dY)
        Eop_IngestAddDYunc(builder, self.dYunc)
        Eop_IngestAddPolarMotionXb(builder, self.polarMotionXb)
        Eop_IngestAddPolarMotionYb(builder, self.polarMotionYb)
        Eop_IngestAddUt1Utcb(builder, self.ut1Utcb)
        Eop_IngestAddDPsib(builder, self.dPsib)
        Eop_IngestAddDEpsilonB(builder, self.dEpsilonB)
        Eop_IngestAddDXb(builder, self.dXb)
        Eop_IngestAddDYb(builder, self.dYb)
        if self.precessionNutationStd is not None:
            Eop_IngestAddPrecessionNutationStd(builder, precessionNutationStd)
        if self.rawFileUri is not None:
            Eop_IngestAddRawFileUri(builder, rawFileUri)
        if self.source is not None:
            Eop_IngestAddSource(builder, source)
        if self.origin is not None:
            Eop_IngestAddOrigin(builder, origin)
        Eop_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Eop_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Eop_IngestAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            Eop_IngestAddOrigNetwork(builder, origNetwork)
        eopIngest = Eop_IngestEnd(builder)
        return eopIngest
