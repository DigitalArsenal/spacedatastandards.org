# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide operations for posting space object idenfification observation sets.
class SOIObservationSet_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SOIObservationSet_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSOIObservationSet_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SOIObservationSet_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4F\x49\x4F", size_prefixed=size_prefixed)

    # SOIObservationSet_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # SOIObservationSet_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SOIObservationSet_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
    # Example: /// Example: 2022-07-07T16:00:00.123Z
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def MsgCreateDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the observing sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SOIObservationSet_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SOIObservationSet_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the AttitudeSet record for the observing sensor.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 0, Maximum length = 36
    # SOIObservationSet_Abridged
    def SensorAsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SOIObservationSet_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 101
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SOIObservationSet_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at startTime (if mobile/onorbit) in kilometers.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Seny(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senvelx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senvely(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Senvelz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ID of the UDL Elset of the Space Object under observation.
    # Example: /// Example: REF-ELSET-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SOIObservationSet_Abridged
    def IdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Observation set detection start time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Observation set detection end time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of observation records in the set.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def NumObs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Observation type (OPTICAL, RADAR).
    # Example: /// Example: OPTICAL
    # Constraints: Minimum length = 1, Maximum length = 24
    # SOIObservationSet_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Polar angle of the gimbal/mount at observation set detection start time in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PolarAngleStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Polar angle of the gimbal/mount at observation set detection end time in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PolarAngleEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # SOIObservationSet_Abridged
    def ReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # SOIObservationSet_Abridged
    def SenReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def LosDeclinationStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def LosDeclinationEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PointingAngleAzStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PointingAngleAzEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PointingAngleElStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PointingAngleElEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pixel array size (width) in pixels.
    # Example: /// Example: 32
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PixelArrayWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Pixel array size (height) in pixels.
    # Example: /// Example: 32
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PixelArrayHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The value is the number of spectral filters used.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def NumSpectralFilters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
    # Example: /// Example: ['Keyword1', 'Keyword2']
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def SpectralFilters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SOIObservationSet_Abridged
    def SpectralFiltersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SOIObservationSet_Abridged
    def SpectralFiltersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    # Example: /// Example: RATE TRACK
    # Constraints: Minimum length = 0, Maximum length = 32
    # SOIObservationSet_Abridged
    def CollectionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
    # Example: /// Example: 234.2
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of pixels binned horizontally.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def BinningHoriz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of pixels binned vertically.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def BinningVert(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The in-band solar magnitude at 1 A.U.
    # Example: /// Example: -26.91
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def SolarMag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum valid pixel value.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PixelMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The maximum valid pixel value.
    # Example: /// Example: 16383
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PixelMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Software Version used to Capture, Process, and Deliver the data.
    # Example: /// Example: GSV99/17-1
    # Constraints: Minimum length = 0, Maximum length = 70
    # SOIObservationSet_Abridged
    def SoftwareVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the target satellite.
    # Example: /// Example: TITAN 3C TRANSTAGE R/B
    # Constraints: Minimum length = 0, Maximum length = 70
    # SOIObservationSet_Abridged
    def SatelliteName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the Star Catalog used for photometry and astrometry.
    # Example: /// Example: SSTRC5
    # Constraints: Minimum length = 0, Maximum length = 70
    # SOIObservationSet_Abridged
    def StarCatName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
    # Example: /// Example: 0.327
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def CorrQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
    # Example: /// Example: BOTH
    # Constraints: Minimum length = 0, Maximum length = 16
    # SOIObservationSet_Abridged
    def ValidCalibrations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
    # Example: /// Example: ALL SKY
    # Constraints: Minimum length = 0, Maximum length = 32
    # SOIObservationSet_Abridged
    def CalibrationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PercentSatThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Boolean indicating if any change event was detected, based on historical collection data for the object.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def ChangeDetected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def PeriodicityChangeDetected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def BrightnessVarianceChangeDetected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def SolarPhaseAngleBrightnessChangeDetected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
    # Example: /// Example: MEDIUM
    # Constraints: Minimum length = 0, Maximum length = 16
    # SOIObservationSet_Abridged
    def ChangeConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    # Example: /// Example: MEDIUM
    # Constraints: Minimum length = 0, Maximum length = 16
    # SOIObservationSet_Abridged
    def CollectionDensityConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
    # Example: /// Example: MEDIUM
    # Constraints: Minimum length = 0, Maximum length = 16
    # SOIObservationSet_Abridged
    def PeriodicitySamplingConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
    # Example: /// Example: MEDIUM
    # Constraints: Minimum length = 0, Maximum length = 16
    # SOIObservationSet_Abridged
    def PeriodicityDetectionConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
    # Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
    # Constraints: Minimum length = 0, Maximum length = 36
    # SOIObservationSet_Abridged
    def CollectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of SOI Calibrations associated with this SOIObservationSet.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Calibrations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SOIObservationSet_Abridged
    def CalibrationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SOIObservationSet_Abridged
    def CalibrationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SOIObservationSet_Abridged
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SOIObservationSet_Abridged
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        return o == 0

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SOIObservationSet_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SOIObservationSet_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SOIObservationSet_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SOIObservationSet_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SOIObservationSet_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # SOIObservationSet_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SOIObservationSet_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SOIObservationSet_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SOIObservationSet_AbridgedStart(builder):
    builder.StartObject(71)

def Start(builder):
    SOIObservationSet_AbridgedStart(builder)

def SOIObservationSet_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SOIObservationSet_AbridgedAddId(builder, id)

def SOIObservationSet_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SOIObservationSet_AbridgedAddClassificationMarking(builder, classificationMarking)

def SOIObservationSet_AbridgedAddMsgCreateDate(builder, msgCreateDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(msgCreateDate), 0)

def AddMsgCreateDate(builder, msgCreateDate):
    SOIObservationSet_AbridgedAddMsgCreateDate(builder, msgCreateDate)

def SOIObservationSet_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SOIObservationSet_AbridgedAddIdSensor(builder, idSensor)

def SOIObservationSet_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SOIObservationSet_AbridgedAddOrigSensorId(builder, origSensorId)

def SOIObservationSet_AbridgedAddSensorAsId(builder, sensorAsId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sensorAsId), 0)

def AddSensorAsId(builder, sensorAsId):
    SOIObservationSet_AbridgedAddSensorAsId(builder, sensorAsId)

def SOIObservationSet_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    SOIObservationSet_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def SOIObservationSet_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(7, satNo, 0)

def AddSatNo(builder, satNo):
    SOIObservationSet_AbridgedAddSatNo(builder, satNo)

def SOIObservationSet_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    SOIObservationSet_AbridgedAddOrigObjectId(builder, origObjectId)

def SOIObservationSet_AbridgedAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(9, senlat, 0.0)

def AddSenlat(builder, senlat):
    SOIObservationSet_AbridgedAddSenlat(builder, senlat)

def SOIObservationSet_AbridgedAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(10, senlon, 0.0)

def AddSenlon(builder, senlon):
    SOIObservationSet_AbridgedAddSenlon(builder, senlon)

def SOIObservationSet_AbridgedAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(11, senalt, 0.0)

def AddSenalt(builder, senalt):
    SOIObservationSet_AbridgedAddSenalt(builder, senalt)

def SOIObservationSet_AbridgedAddSenx(builder, senx):
    builder.PrependFloat64Slot(12, senx, 0.0)

def AddSenx(builder, senx):
    SOIObservationSet_AbridgedAddSenx(builder, senx)

def SOIObservationSet_AbridgedAddSeny(builder, seny):
    builder.PrependFloat64Slot(13, seny, 0.0)

def AddSeny(builder, seny):
    SOIObservationSet_AbridgedAddSeny(builder, seny)

def SOIObservationSet_AbridgedAddSenz(builder, senz):
    builder.PrependFloat64Slot(14, senz, 0.0)

def AddSenz(builder, senz):
    SOIObservationSet_AbridgedAddSenz(builder, senz)

def SOIObservationSet_AbridgedAddSenvelx(builder, senvelx):
    builder.PrependFloat64Slot(15, senvelx, 0.0)

def AddSenvelx(builder, senvelx):
    SOIObservationSet_AbridgedAddSenvelx(builder, senvelx)

def SOIObservationSet_AbridgedAddSenvely(builder, senvely):
    builder.PrependFloat64Slot(16, senvely, 0.0)

def AddSenvely(builder, senvely):
    SOIObservationSet_AbridgedAddSenvely(builder, senvely)

def SOIObservationSet_AbridgedAddSenvelz(builder, senvelz):
    builder.PrependFloat64Slot(17, senvelz, 0.0)

def AddSenvelz(builder, senvelz):
    SOIObservationSet_AbridgedAddSenvelz(builder, senvelz)

def SOIObservationSet_AbridgedAddIdElset(builder, idElset):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(idElset), 0)

def AddIdElset(builder, idElset):
    SOIObservationSet_AbridgedAddIdElset(builder, idElset)

def SOIObservationSet_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    SOIObservationSet_AbridgedAddStartTime(builder, startTime)

def SOIObservationSet_AbridgedAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    SOIObservationSet_AbridgedAddEndTime(builder, endTime)

def SOIObservationSet_AbridgedAddNumObs(builder, numObs):
    builder.PrependInt32Slot(21, numObs, 0)

def AddNumObs(builder, numObs):
    SOIObservationSet_AbridgedAddNumObs(builder, numObs)

def SOIObservationSet_AbridgedAddType(builder, type):
    builder.PrependInt8Slot(22, type, 0)

def AddType(builder, type):
    SOIObservationSet_AbridgedAddType(builder, type)

def SOIObservationSet_AbridgedAddPolarAngleStart(builder, polarAngleStart):
    builder.PrependFloat64Slot(23, polarAngleStart, 0.0)

def AddPolarAngleStart(builder, polarAngleStart):
    SOIObservationSet_AbridgedAddPolarAngleStart(builder, polarAngleStart)

def SOIObservationSet_AbridgedAddPolarAngleEnd(builder, polarAngleEnd):
    builder.PrependFloat64Slot(24, polarAngleEnd, 0.0)

def AddPolarAngleEnd(builder, polarAngleEnd):
    SOIObservationSet_AbridgedAddPolarAngleEnd(builder, polarAngleEnd)

def SOIObservationSet_AbridgedAddReferenceFrame(builder, referenceFrame):
    builder.PrependInt8Slot(25, referenceFrame, 0)

def AddReferenceFrame(builder, referenceFrame):
    SOIObservationSet_AbridgedAddReferenceFrame(builder, referenceFrame)

def SOIObservationSet_AbridgedAddSenReferenceFrame(builder, senReferenceFrame):
    builder.PrependInt8Slot(26, senReferenceFrame, 0)

def AddSenReferenceFrame(builder, senReferenceFrame):
    SOIObservationSet_AbridgedAddSenReferenceFrame(builder, senReferenceFrame)

def SOIObservationSet_AbridgedAddLosDeclinationStart(builder, losDeclinationStart):
    builder.PrependFloat64Slot(27, losDeclinationStart, 0.0)

def AddLosDeclinationStart(builder, losDeclinationStart):
    SOIObservationSet_AbridgedAddLosDeclinationStart(builder, losDeclinationStart)

def SOIObservationSet_AbridgedAddLosDeclinationEnd(builder, losDeclinationEnd):
    builder.PrependFloat64Slot(28, losDeclinationEnd, 0.0)

def AddLosDeclinationEnd(builder, losDeclinationEnd):
    SOIObservationSet_AbridgedAddLosDeclinationEnd(builder, losDeclinationEnd)

def SOIObservationSet_AbridgedAddPointingAngleAzStart(builder, pointingAngleAzStart):
    builder.PrependFloat64Slot(29, pointingAngleAzStart, 0.0)

def AddPointingAngleAzStart(builder, pointingAngleAzStart):
    SOIObservationSet_AbridgedAddPointingAngleAzStart(builder, pointingAngleAzStart)

def SOIObservationSet_AbridgedAddPointingAngleAzEnd(builder, pointingAngleAzEnd):
    builder.PrependFloat64Slot(30, pointingAngleAzEnd, 0.0)

def AddPointingAngleAzEnd(builder, pointingAngleAzEnd):
    SOIObservationSet_AbridgedAddPointingAngleAzEnd(builder, pointingAngleAzEnd)

def SOIObservationSet_AbridgedAddPointingAngleElStart(builder, pointingAngleElStart):
    builder.PrependFloat64Slot(31, pointingAngleElStart, 0.0)

def AddPointingAngleElStart(builder, pointingAngleElStart):
    SOIObservationSet_AbridgedAddPointingAngleElStart(builder, pointingAngleElStart)

def SOIObservationSet_AbridgedAddPointingAngleElEnd(builder, pointingAngleElEnd):
    builder.PrependFloat64Slot(32, pointingAngleElEnd, 0.0)

def AddPointingAngleElEnd(builder, pointingAngleElEnd):
    SOIObservationSet_AbridgedAddPointingAngleElEnd(builder, pointingAngleElEnd)

def SOIObservationSet_AbridgedAddPixelArrayWidth(builder, pixelArrayWidth):
    builder.PrependInt32Slot(33, pixelArrayWidth, 0)

def AddPixelArrayWidth(builder, pixelArrayWidth):
    SOIObservationSet_AbridgedAddPixelArrayWidth(builder, pixelArrayWidth)

def SOIObservationSet_AbridgedAddPixelArrayHeight(builder, pixelArrayHeight):
    builder.PrependInt32Slot(34, pixelArrayHeight, 0)

def AddPixelArrayHeight(builder, pixelArrayHeight):
    SOIObservationSet_AbridgedAddPixelArrayHeight(builder, pixelArrayHeight)

def SOIObservationSet_AbridgedAddNumSpectralFilters(builder, numSpectralFilters):
    builder.PrependInt32Slot(35, numSpectralFilters, 0)

def AddNumSpectralFilters(builder, numSpectralFilters):
    SOIObservationSet_AbridgedAddNumSpectralFilters(builder, numSpectralFilters)

def SOIObservationSet_AbridgedAddSpectralFilters(builder, spectralFilters):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(spectralFilters), 0)

def AddSpectralFilters(builder, spectralFilters):
    SOIObservationSet_AbridgedAddSpectralFilters(builder, spectralFilters)

def SOIObservationSet_AbridgedStartSpectralFiltersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpectralFiltersVector(builder, numElems):
    return SOIObservationSet_AbridgedStartSpectralFiltersVector(builder, numElems)

def SOIObservationSet_AbridgedAddCollectionMode(builder, collectionMode):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(collectionMode), 0)

def AddCollectionMode(builder, collectionMode):
    SOIObservationSet_AbridgedAddCollectionMode(builder, collectionMode)

def SOIObservationSet_AbridgedAddGain(builder, gain):
    builder.PrependFloat64Slot(38, gain, 0.0)

def AddGain(builder, gain):
    SOIObservationSet_AbridgedAddGain(builder, gain)

def SOIObservationSet_AbridgedAddBinningHoriz(builder, binningHoriz):
    builder.PrependInt32Slot(39, binningHoriz, 0)

def AddBinningHoriz(builder, binningHoriz):
    SOIObservationSet_AbridgedAddBinningHoriz(builder, binningHoriz)

def SOIObservationSet_AbridgedAddBinningVert(builder, binningVert):
    builder.PrependInt32Slot(40, binningVert, 0)

def AddBinningVert(builder, binningVert):
    SOIObservationSet_AbridgedAddBinningVert(builder, binningVert)

def SOIObservationSet_AbridgedAddSolarMag(builder, solarMag):
    builder.PrependFloat64Slot(41, solarMag, 0.0)

def AddSolarMag(builder, solarMag):
    SOIObservationSet_AbridgedAddSolarMag(builder, solarMag)

def SOIObservationSet_AbridgedAddPixelMin(builder, pixelMin):
    builder.PrependInt32Slot(42, pixelMin, 0)

def AddPixelMin(builder, pixelMin):
    SOIObservationSet_AbridgedAddPixelMin(builder, pixelMin)

def SOIObservationSet_AbridgedAddPixelMax(builder, pixelMax):
    builder.PrependInt32Slot(43, pixelMax, 0)

def AddPixelMax(builder, pixelMax):
    SOIObservationSet_AbridgedAddPixelMax(builder, pixelMax)

def SOIObservationSet_AbridgedAddSoftwareVersion(builder, softwareVersion):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(softwareVersion), 0)

def AddSoftwareVersion(builder, softwareVersion):
    SOIObservationSet_AbridgedAddSoftwareVersion(builder, softwareVersion)

def SOIObservationSet_AbridgedAddSatelliteName(builder, satelliteName):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(satelliteName), 0)

def AddSatelliteName(builder, satelliteName):
    SOIObservationSet_AbridgedAddSatelliteName(builder, satelliteName)

def SOIObservationSet_AbridgedAddStarCatName(builder, starCatName):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(starCatName), 0)

def AddStarCatName(builder, starCatName):
    SOIObservationSet_AbridgedAddStarCatName(builder, starCatName)

def SOIObservationSet_AbridgedAddCorrQuality(builder, corrQuality):
    builder.PrependFloat64Slot(47, corrQuality, 0.0)

def AddCorrQuality(builder, corrQuality):
    SOIObservationSet_AbridgedAddCorrQuality(builder, corrQuality)

def SOIObservationSet_AbridgedAddUct(builder, uct):
    builder.PrependBoolSlot(48, uct, 0)

def AddUct(builder, uct):
    SOIObservationSet_AbridgedAddUct(builder, uct)

def SOIObservationSet_AbridgedAddValidCalibrations(builder, validCalibrations):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(validCalibrations), 0)

def AddValidCalibrations(builder, validCalibrations):
    SOIObservationSet_AbridgedAddValidCalibrations(builder, validCalibrations)

def SOIObservationSet_AbridgedAddCalibrationType(builder, calibrationType):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(calibrationType), 0)

def AddCalibrationType(builder, calibrationType):
    SOIObservationSet_AbridgedAddCalibrationType(builder, calibrationType)

def SOIObservationSet_AbridgedAddPercentSatThreshold(builder, percentSatThreshold):
    builder.PrependFloat64Slot(51, percentSatThreshold, 0.0)

def AddPercentSatThreshold(builder, percentSatThreshold):
    SOIObservationSet_AbridgedAddPercentSatThreshold(builder, percentSatThreshold)

def SOIObservationSet_AbridgedAddChangeDetected(builder, changeDetected):
    builder.PrependBoolSlot(52, changeDetected, 0)

def AddChangeDetected(builder, changeDetected):
    SOIObservationSet_AbridgedAddChangeDetected(builder, changeDetected)

def SOIObservationSet_AbridgedAddPeriodicityChangeDetected(builder, periodicityChangeDetected):
    builder.PrependBoolSlot(53, periodicityChangeDetected, 0)

def AddPeriodicityChangeDetected(builder, periodicityChangeDetected):
    SOIObservationSet_AbridgedAddPeriodicityChangeDetected(builder, periodicityChangeDetected)

def SOIObservationSet_AbridgedAddBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected):
    builder.PrependBoolSlot(54, brightnessVarianceChangeDetected, 0)

def AddBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected):
    SOIObservationSet_AbridgedAddBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected)

def SOIObservationSet_AbridgedAddSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected):
    builder.PrependBoolSlot(55, solarPhaseAngleBrightnessChangeDetected, 0)

def AddSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected):
    SOIObservationSet_AbridgedAddSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected)

def SOIObservationSet_AbridgedAddChangeConf(builder, changeConf):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(changeConf), 0)

def AddChangeConf(builder, changeConf):
    SOIObservationSet_AbridgedAddChangeConf(builder, changeConf)

def SOIObservationSet_AbridgedAddCollectionDensityConf(builder, collectionDensityConf):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(collectionDensityConf), 0)

def AddCollectionDensityConf(builder, collectionDensityConf):
    SOIObservationSet_AbridgedAddCollectionDensityConf(builder, collectionDensityConf)

def SOIObservationSet_AbridgedAddPeriodicitySamplingConf(builder, periodicitySamplingConf):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(periodicitySamplingConf), 0)

def AddPeriodicitySamplingConf(builder, periodicitySamplingConf):
    SOIObservationSet_AbridgedAddPeriodicitySamplingConf(builder, periodicitySamplingConf)

def SOIObservationSet_AbridgedAddPeriodicityDetectionConf(builder, periodicityDetectionConf):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(periodicityDetectionConf), 0)

def AddPeriodicityDetectionConf(builder, periodicityDetectionConf):
    SOIObservationSet_AbridgedAddPeriodicityDetectionConf(builder, periodicityDetectionConf)

def SOIObservationSet_AbridgedAddCollectionId(builder, collectionId):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(collectionId), 0)

def AddCollectionId(builder, collectionId):
    SOIObservationSet_AbridgedAddCollectionId(builder, collectionId)

def SOIObservationSet_AbridgedAddCalibrations(builder, calibrations):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(calibrations), 0)

def AddCalibrations(builder, calibrations):
    SOIObservationSet_AbridgedAddCalibrations(builder, calibrations)

def SOIObservationSet_AbridgedStartCalibrationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCalibrationsVector(builder, numElems):
    return SOIObservationSet_AbridgedStartCalibrationsVector(builder, numElems)

def SOIObservationSet_AbridgedAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    SOIObservationSet_AbridgedAddTags(builder, tags)

def SOIObservationSet_AbridgedStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return SOIObservationSet_AbridgedStartTagsVector(builder, numElems)

def SOIObservationSet_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    SOIObservationSet_AbridgedAddTransactionId(builder, transactionId)

def SOIObservationSet_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SOIObservationSet_AbridgedAddCreatedAt(builder, createdAt)

def SOIObservationSet_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SOIObservationSet_AbridgedAddCreatedBy(builder, createdBy)

def SOIObservationSet_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SOIObservationSet_AbridgedAddSource(builder, source)

def SOIObservationSet_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SOIObservationSet_AbridgedAddOrigin(builder, origin)

def SOIObservationSet_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SOIObservationSet_AbridgedAddOrigNetwork(builder, origNetwork)

def SOIObservationSet_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    SOIObservationSet_AbridgedAddSourceDl(builder, sourceDl)

def SOIObservationSet_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(70, dataMode, 0)

def AddDataMode(builder, dataMode):
    SOIObservationSet_AbridgedAddDataMode(builder, dataMode)

def SOIObservationSet_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SOIObservationSet_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class SOIObservationSet_AbridgedT(object):

    # SOIObservationSet_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.msgCreateDate = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.sensorAsId = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.senx = 0.0  # type: float
        self.seny = 0.0  # type: float
        self.senz = 0.0  # type: float
        self.senvelx = 0.0  # type: float
        self.senvely = 0.0  # type: float
        self.senvelz = 0.0  # type: float
        self.idElset = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.numObs = 0  # type: int
        self.type = 0  # type: int
        self.polarAngleStart = 0.0  # type: float
        self.polarAngleEnd = 0.0  # type: float
        self.referenceFrame = 0  # type: int
        self.senReferenceFrame = 0  # type: int
        self.losDeclinationStart = 0.0  # type: float
        self.losDeclinationEnd = 0.0  # type: float
        self.pointingAngleAzStart = 0.0  # type: float
        self.pointingAngleAzEnd = 0.0  # type: float
        self.pointingAngleElStart = 0.0  # type: float
        self.pointingAngleElEnd = 0.0  # type: float
        self.pixelArrayWidth = 0  # type: int
        self.pixelArrayHeight = 0  # type: int
        self.numSpectralFilters = 0  # type: int
        self.spectralFilters = None  # type: List[str]
        self.collectionMode = None  # type: str
        self.gain = 0.0  # type: float
        self.binningHoriz = 0  # type: int
        self.binningVert = 0  # type: int
        self.solarMag = 0.0  # type: float
        self.pixelMin = 0  # type: int
        self.pixelMax = 0  # type: int
        self.softwareVersion = None  # type: str
        self.satelliteName = None  # type: str
        self.starCatName = None  # type: str
        self.corrQuality = 0.0  # type: float
        self.uct = False  # type: bool
        self.validCalibrations = None  # type: str
        self.calibrationType = None  # type: str
        self.percentSatThreshold = 0.0  # type: float
        self.changeDetected = False  # type: bool
        self.periodicityChangeDetected = False  # type: bool
        self.brightnessVarianceChangeDetected = False  # type: bool
        self.solarPhaseAngleBrightnessChangeDetected = False  # type: bool
        self.changeConf = None  # type: str
        self.collectionDensityConf = None  # type: str
        self.periodicitySamplingConf = None  # type: str
        self.periodicityDetectionConf = None  # type: str
        self.collectionId = None  # type: str
        self.calibrations = None  # type: List[str]
        self.tags = None  # type: List[str]
        self.transactionId = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        soiobservationSetAbridged = SOIObservationSet_Abridged()
        soiobservationSetAbridged.Init(buf, pos)
        return cls.InitFromObj(soiobservationSetAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, soiobservationSetAbridged):
        x = SOIObservationSet_AbridgedT()
        x._UnPack(soiobservationSetAbridged)
        return x

    # SOIObservationSet_AbridgedT
    def _UnPack(self, soiobservationSetAbridged):
        if soiobservationSetAbridged is None:
            return
        self.id = soiobservationSetAbridged.Id()
        self.classificationMarking = soiobservationSetAbridged.ClassificationMarking()
        self.msgCreateDate = soiobservationSetAbridged.MsgCreateDate()
        self.idSensor = soiobservationSetAbridged.IdSensor()
        self.origSensorId = soiobservationSetAbridged.OrigSensorId()
        self.sensorAsId = soiobservationSetAbridged.SensorAsId()
        self.idOnOrbit = soiobservationSetAbridged.IdOnOrbit()
        self.satNo = soiobservationSetAbridged.SatNo()
        self.origObjectId = soiobservationSetAbridged.OrigObjectId()
        self.senlat = soiobservationSetAbridged.Senlat()
        self.senlon = soiobservationSetAbridged.Senlon()
        self.senalt = soiobservationSetAbridged.Senalt()
        self.senx = soiobservationSetAbridged.Senx()
        self.seny = soiobservationSetAbridged.Seny()
        self.senz = soiobservationSetAbridged.Senz()
        self.senvelx = soiobservationSetAbridged.Senvelx()
        self.senvely = soiobservationSetAbridged.Senvely()
        self.senvelz = soiobservationSetAbridged.Senvelz()
        self.idElset = soiobservationSetAbridged.IdElset()
        self.startTime = soiobservationSetAbridged.StartTime()
        self.endTime = soiobservationSetAbridged.EndTime()
        self.numObs = soiobservationSetAbridged.NumObs()
        self.type = soiobservationSetAbridged.Type()
        self.polarAngleStart = soiobservationSetAbridged.PolarAngleStart()
        self.polarAngleEnd = soiobservationSetAbridged.PolarAngleEnd()
        self.referenceFrame = soiobservationSetAbridged.ReferenceFrame()
        self.senReferenceFrame = soiobservationSetAbridged.SenReferenceFrame()
        self.losDeclinationStart = soiobservationSetAbridged.LosDeclinationStart()
        self.losDeclinationEnd = soiobservationSetAbridged.LosDeclinationEnd()
        self.pointingAngleAzStart = soiobservationSetAbridged.PointingAngleAzStart()
        self.pointingAngleAzEnd = soiobservationSetAbridged.PointingAngleAzEnd()
        self.pointingAngleElStart = soiobservationSetAbridged.PointingAngleElStart()
        self.pointingAngleElEnd = soiobservationSetAbridged.PointingAngleElEnd()
        self.pixelArrayWidth = soiobservationSetAbridged.PixelArrayWidth()
        self.pixelArrayHeight = soiobservationSetAbridged.PixelArrayHeight()
        self.numSpectralFilters = soiobservationSetAbridged.NumSpectralFilters()
        if not soiobservationSetAbridged.SpectralFiltersIsNone():
            self.spectralFilters = []
            for i in range(soiobservationSetAbridged.SpectralFiltersLength()):
                self.spectralFilters.append(soiobservationSetAbridged.SpectralFilters(i))
        self.collectionMode = soiobservationSetAbridged.CollectionMode()
        self.gain = soiobservationSetAbridged.Gain()
        self.binningHoriz = soiobservationSetAbridged.BinningHoriz()
        self.binningVert = soiobservationSetAbridged.BinningVert()
        self.solarMag = soiobservationSetAbridged.SolarMag()
        self.pixelMin = soiobservationSetAbridged.PixelMin()
        self.pixelMax = soiobservationSetAbridged.PixelMax()
        self.softwareVersion = soiobservationSetAbridged.SoftwareVersion()
        self.satelliteName = soiobservationSetAbridged.SatelliteName()
        self.starCatName = soiobservationSetAbridged.StarCatName()
        self.corrQuality = soiobservationSetAbridged.CorrQuality()
        self.uct = soiobservationSetAbridged.Uct()
        self.validCalibrations = soiobservationSetAbridged.ValidCalibrations()
        self.calibrationType = soiobservationSetAbridged.CalibrationType()
        self.percentSatThreshold = soiobservationSetAbridged.PercentSatThreshold()
        self.changeDetected = soiobservationSetAbridged.ChangeDetected()
        self.periodicityChangeDetected = soiobservationSetAbridged.PeriodicityChangeDetected()
        self.brightnessVarianceChangeDetected = soiobservationSetAbridged.BrightnessVarianceChangeDetected()
        self.solarPhaseAngleBrightnessChangeDetected = soiobservationSetAbridged.SolarPhaseAngleBrightnessChangeDetected()
        self.changeConf = soiobservationSetAbridged.ChangeConf()
        self.collectionDensityConf = soiobservationSetAbridged.CollectionDensityConf()
        self.periodicitySamplingConf = soiobservationSetAbridged.PeriodicitySamplingConf()
        self.periodicityDetectionConf = soiobservationSetAbridged.PeriodicityDetectionConf()
        self.collectionId = soiobservationSetAbridged.CollectionId()
        if not soiobservationSetAbridged.CalibrationsIsNone():
            self.calibrations = []
            for i in range(soiobservationSetAbridged.CalibrationsLength()):
                self.calibrations.append(soiobservationSetAbridged.Calibrations(i))
        if not soiobservationSetAbridged.TagsIsNone():
            self.tags = []
            for i in range(soiobservationSetAbridged.TagsLength()):
                self.tags.append(soiobservationSetAbridged.Tags(i))
        self.transactionId = soiobservationSetAbridged.TransactionId()
        self.createdAt = soiobservationSetAbridged.CreatedAt()
        self.createdBy = soiobservationSetAbridged.CreatedBy()
        self.source = soiobservationSetAbridged.Source()
        self.origin = soiobservationSetAbridged.Origin()
        self.origNetwork = soiobservationSetAbridged.OrigNetwork()
        self.sourceDl = soiobservationSetAbridged.SourceDl()
        self.dataMode = soiobservationSetAbridged.DataMode()

    # SOIObservationSet_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.msgCreateDate is not None:
            msgCreateDate = builder.CreateString(self.msgCreateDate)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.sensorAsId is not None:
            sensorAsId = builder.CreateString(self.sensorAsId)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idElset is not None:
            idElset = builder.CreateString(self.idElset)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.spectralFilters is not None:
            spectralFilterslist = []
            for i in range(len(self.spectralFilters)):
                spectralFilterslist.append(builder.CreateString(self.spectralFilters[i]))
            SOIObservationSet_AbridgedStartSpectralFiltersVector(builder, len(self.spectralFilters))
            for i in reversed(range(len(self.spectralFilters))):
                builder.PrependUOffsetTRelative(spectralFilterslist[i])
            spectralFilters = builder.EndVector()
        if self.collectionMode is not None:
            collectionMode = builder.CreateString(self.collectionMode)
        if self.softwareVersion is not None:
            softwareVersion = builder.CreateString(self.softwareVersion)
        if self.satelliteName is not None:
            satelliteName = builder.CreateString(self.satelliteName)
        if self.starCatName is not None:
            starCatName = builder.CreateString(self.starCatName)
        if self.validCalibrations is not None:
            validCalibrations = builder.CreateString(self.validCalibrations)
        if self.calibrationType is not None:
            calibrationType = builder.CreateString(self.calibrationType)
        if self.changeConf is not None:
            changeConf = builder.CreateString(self.changeConf)
        if self.collectionDensityConf is not None:
            collectionDensityConf = builder.CreateString(self.collectionDensityConf)
        if self.periodicitySamplingConf is not None:
            periodicitySamplingConf = builder.CreateString(self.periodicitySamplingConf)
        if self.periodicityDetectionConf is not None:
            periodicityDetectionConf = builder.CreateString(self.periodicityDetectionConf)
        if self.collectionId is not None:
            collectionId = builder.CreateString(self.collectionId)
        if self.calibrations is not None:
            calibrationslist = []
            for i in range(len(self.calibrations)):
                calibrationslist.append(builder.CreateString(self.calibrations[i]))
            SOIObservationSet_AbridgedStartCalibrationsVector(builder, len(self.calibrations))
            for i in reversed(range(len(self.calibrations))):
                builder.PrependUOffsetTRelative(calibrationslist[i])
            calibrations = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            SOIObservationSet_AbridgedStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        SOIObservationSet_AbridgedStart(builder)
        if self.id is not None:
            SOIObservationSet_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            SOIObservationSet_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.msgCreateDate is not None:
            SOIObservationSet_AbridgedAddMsgCreateDate(builder, msgCreateDate)
        if self.idSensor is not None:
            SOIObservationSet_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            SOIObservationSet_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.sensorAsId is not None:
            SOIObservationSet_AbridgedAddSensorAsId(builder, sensorAsId)
        if self.idOnOrbit is not None:
            SOIObservationSet_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        SOIObservationSet_AbridgedAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            SOIObservationSet_AbridgedAddOrigObjectId(builder, origObjectId)
        SOIObservationSet_AbridgedAddSenlat(builder, self.senlat)
        SOIObservationSet_AbridgedAddSenlon(builder, self.senlon)
        SOIObservationSet_AbridgedAddSenalt(builder, self.senalt)
        SOIObservationSet_AbridgedAddSenx(builder, self.senx)
        SOIObservationSet_AbridgedAddSeny(builder, self.seny)
        SOIObservationSet_AbridgedAddSenz(builder, self.senz)
        SOIObservationSet_AbridgedAddSenvelx(builder, self.senvelx)
        SOIObservationSet_AbridgedAddSenvely(builder, self.senvely)
        SOIObservationSet_AbridgedAddSenvelz(builder, self.senvelz)
        if self.idElset is not None:
            SOIObservationSet_AbridgedAddIdElset(builder, idElset)
        if self.startTime is not None:
            SOIObservationSet_AbridgedAddStartTime(builder, startTime)
        if self.endTime is not None:
            SOIObservationSet_AbridgedAddEndTime(builder, endTime)
        SOIObservationSet_AbridgedAddNumObs(builder, self.numObs)
        SOIObservationSet_AbridgedAddType(builder, self.type)
        SOIObservationSet_AbridgedAddPolarAngleStart(builder, self.polarAngleStart)
        SOIObservationSet_AbridgedAddPolarAngleEnd(builder, self.polarAngleEnd)
        SOIObservationSet_AbridgedAddReferenceFrame(builder, self.referenceFrame)
        SOIObservationSet_AbridgedAddSenReferenceFrame(builder, self.senReferenceFrame)
        SOIObservationSet_AbridgedAddLosDeclinationStart(builder, self.losDeclinationStart)
        SOIObservationSet_AbridgedAddLosDeclinationEnd(builder, self.losDeclinationEnd)
        SOIObservationSet_AbridgedAddPointingAngleAzStart(builder, self.pointingAngleAzStart)
        SOIObservationSet_AbridgedAddPointingAngleAzEnd(builder, self.pointingAngleAzEnd)
        SOIObservationSet_AbridgedAddPointingAngleElStart(builder, self.pointingAngleElStart)
        SOIObservationSet_AbridgedAddPointingAngleElEnd(builder, self.pointingAngleElEnd)
        SOIObservationSet_AbridgedAddPixelArrayWidth(builder, self.pixelArrayWidth)
        SOIObservationSet_AbridgedAddPixelArrayHeight(builder, self.pixelArrayHeight)
        SOIObservationSet_AbridgedAddNumSpectralFilters(builder, self.numSpectralFilters)
        if self.spectralFilters is not None:
            SOIObservationSet_AbridgedAddSpectralFilters(builder, spectralFilters)
        if self.collectionMode is not None:
            SOIObservationSet_AbridgedAddCollectionMode(builder, collectionMode)
        SOIObservationSet_AbridgedAddGain(builder, self.gain)
        SOIObservationSet_AbridgedAddBinningHoriz(builder, self.binningHoriz)
        SOIObservationSet_AbridgedAddBinningVert(builder, self.binningVert)
        SOIObservationSet_AbridgedAddSolarMag(builder, self.solarMag)
        SOIObservationSet_AbridgedAddPixelMin(builder, self.pixelMin)
        SOIObservationSet_AbridgedAddPixelMax(builder, self.pixelMax)
        if self.softwareVersion is not None:
            SOIObservationSet_AbridgedAddSoftwareVersion(builder, softwareVersion)
        if self.satelliteName is not None:
            SOIObservationSet_AbridgedAddSatelliteName(builder, satelliteName)
        if self.starCatName is not None:
            SOIObservationSet_AbridgedAddStarCatName(builder, starCatName)
        SOIObservationSet_AbridgedAddCorrQuality(builder, self.corrQuality)
        SOIObservationSet_AbridgedAddUct(builder, self.uct)
        if self.validCalibrations is not None:
            SOIObservationSet_AbridgedAddValidCalibrations(builder, validCalibrations)
        if self.calibrationType is not None:
            SOIObservationSet_AbridgedAddCalibrationType(builder, calibrationType)
        SOIObservationSet_AbridgedAddPercentSatThreshold(builder, self.percentSatThreshold)
        SOIObservationSet_AbridgedAddChangeDetected(builder, self.changeDetected)
        SOIObservationSet_AbridgedAddPeriodicityChangeDetected(builder, self.periodicityChangeDetected)
        SOIObservationSet_AbridgedAddBrightnessVarianceChangeDetected(builder, self.brightnessVarianceChangeDetected)
        SOIObservationSet_AbridgedAddSolarPhaseAngleBrightnessChangeDetected(builder, self.solarPhaseAngleBrightnessChangeDetected)
        if self.changeConf is not None:
            SOIObservationSet_AbridgedAddChangeConf(builder, changeConf)
        if self.collectionDensityConf is not None:
            SOIObservationSet_AbridgedAddCollectionDensityConf(builder, collectionDensityConf)
        if self.periodicitySamplingConf is not None:
            SOIObservationSet_AbridgedAddPeriodicitySamplingConf(builder, periodicitySamplingConf)
        if self.periodicityDetectionConf is not None:
            SOIObservationSet_AbridgedAddPeriodicityDetectionConf(builder, periodicityDetectionConf)
        if self.collectionId is not None:
            SOIObservationSet_AbridgedAddCollectionId(builder, collectionId)
        if self.calibrations is not None:
            SOIObservationSet_AbridgedAddCalibrations(builder, calibrations)
        if self.tags is not None:
            SOIObservationSet_AbridgedAddTags(builder, tags)
        if self.transactionId is not None:
            SOIObservationSet_AbridgedAddTransactionId(builder, transactionId)
        if self.createdAt is not None:
            SOIObservationSet_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SOIObservationSet_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SOIObservationSet_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SOIObservationSet_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SOIObservationSet_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            SOIObservationSet_AbridgedAddSourceDl(builder, sourceDl)
        SOIObservationSet_AbridgedAddDataMode(builder, self.dataMode)
        soiobservationSetAbridged = SOIObservationSet_AbridgedEnd(builder)
        return soiobservationSetAbridged
