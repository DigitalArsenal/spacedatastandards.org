# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Data to analyze launch detections.
class LaunchDetection_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchDetection_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchDetection_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LaunchDetection_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x41\x55\x4E", size_prefixed=size_prefixed)

    # LaunchDetection_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LAUNCHDETECTION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchDetection_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchDetection_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of Launch.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def LaunchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of message for the data.
    # Example: /// Example: Example-Msg-Type
    # Constraints: Minimum length = 1, Maximum length = 16
    # LaunchDetection_Full
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def LaunchLatitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def LaunchLongitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Angle measured clockwise from North for the launch heading (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def LaunchAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit Right Ascension of Ascending Node (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def Raan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit Inclination (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def Inclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time of observation.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def ObservationTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def ObservationLatitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Longitude of launch vehicle at observation time (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def ObservationLongitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Altitude of launch vehicle at observation time (in KM).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def ObservationAltitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating multiple observers were used.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def StereoFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def HighZenithAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Integer indicating how messages should be sequenced for a specific event.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def SequenceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Id to be able to correlate different messages to a specific event.
    # Example: /// Example: EVENT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchDetection_Full
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchDetection_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchDetection_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Example descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchDetection_Full
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LaunchDetection_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LaunchDetection_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchDetection_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchDetection_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchDetection_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only time the row was updated in the database, set automatically by the system on update.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchDetection_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LaunchDetection_FullStart(builder):
    builder.StartObject(27)

def Start(builder):
    LaunchDetection_FullStart(builder)

def LaunchDetection_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchDetection_FullAddId(builder, id)

def LaunchDetection_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchDetection_FullAddClassificationMarking(builder, classificationMarking)

def LaunchDetection_FullAddLaunchTime(builder, launchTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(launchTime), 0)

def AddLaunchTime(builder, launchTime):
    LaunchDetection_FullAddLaunchTime(builder, launchTime)

def LaunchDetection_FullAddMessageType(builder, messageType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(messageType), 0)

def AddMessageType(builder, messageType):
    LaunchDetection_FullAddMessageType(builder, messageType)

def LaunchDetection_FullAddLaunchLatitude(builder, launchLatitude):
    builder.PrependFloat64Slot(4, launchLatitude, 0.0)

def AddLaunchLatitude(builder, launchLatitude):
    LaunchDetection_FullAddLaunchLatitude(builder, launchLatitude)

def LaunchDetection_FullAddLaunchLongitude(builder, launchLongitude):
    builder.PrependFloat64Slot(5, launchLongitude, 0.0)

def AddLaunchLongitude(builder, launchLongitude):
    LaunchDetection_FullAddLaunchLongitude(builder, launchLongitude)

def LaunchDetection_FullAddLaunchAzimuth(builder, launchAzimuth):
    builder.PrependFloat64Slot(6, launchAzimuth, 0.0)

def AddLaunchAzimuth(builder, launchAzimuth):
    LaunchDetection_FullAddLaunchAzimuth(builder, launchAzimuth)

def LaunchDetection_FullAddRaan(builder, raan):
    builder.PrependFloat64Slot(7, raan, 0.0)

def AddRaan(builder, raan):
    LaunchDetection_FullAddRaan(builder, raan)

def LaunchDetection_FullAddInclination(builder, inclination):
    builder.PrependFloat64Slot(8, inclination, 0.0)

def AddInclination(builder, inclination):
    LaunchDetection_FullAddInclination(builder, inclination)

def LaunchDetection_FullAddObservationTime(builder, observationTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(observationTime), 0)

def AddObservationTime(builder, observationTime):
    LaunchDetection_FullAddObservationTime(builder, observationTime)

def LaunchDetection_FullAddObservationLatitude(builder, observationLatitude):
    builder.PrependFloat64Slot(10, observationLatitude, 0.0)

def AddObservationLatitude(builder, observationLatitude):
    LaunchDetection_FullAddObservationLatitude(builder, observationLatitude)

def LaunchDetection_FullAddObservationLongitude(builder, observationLongitude):
    builder.PrependFloat64Slot(11, observationLongitude, 0.0)

def AddObservationLongitude(builder, observationLongitude):
    LaunchDetection_FullAddObservationLongitude(builder, observationLongitude)

def LaunchDetection_FullAddObservationAltitude(builder, observationAltitude):
    builder.PrependFloat64Slot(12, observationAltitude, 0.0)

def AddObservationAltitude(builder, observationAltitude):
    LaunchDetection_FullAddObservationAltitude(builder, observationAltitude)

def LaunchDetection_FullAddStereoFlag(builder, stereoFlag):
    builder.PrependBoolSlot(13, stereoFlag, 0)

def AddStereoFlag(builder, stereoFlag):
    LaunchDetection_FullAddStereoFlag(builder, stereoFlag)

def LaunchDetection_FullAddHighZenithAzimuth(builder, highZenithAzimuth):
    builder.PrependBoolSlot(14, highZenithAzimuth, 0)

def AddHighZenithAzimuth(builder, highZenithAzimuth):
    LaunchDetection_FullAddHighZenithAzimuth(builder, highZenithAzimuth)

def LaunchDetection_FullAddSequenceNumber(builder, sequenceNumber):
    builder.PrependInt32Slot(15, sequenceNumber, 0)

def AddSequenceNumber(builder, sequenceNumber):
    LaunchDetection_FullAddSequenceNumber(builder, sequenceNumber)

def LaunchDetection_FullAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def AddEventId(builder, eventId):
    LaunchDetection_FullAddEventId(builder, eventId)

def LaunchDetection_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchDetection_FullAddSource(builder, source)

def LaunchDetection_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchDetection_FullAddOrigin(builder, origin)

def LaunchDetection_FullAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    LaunchDetection_FullAddDescriptor(builder, descriptor)

def LaunchDetection_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    LaunchDetection_FullAddTags(builder, tags)

def LaunchDetection_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return LaunchDetection_FullStartTagsVector(builder, numElems)

def LaunchDetection_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchDetection_FullAddOrigNetwork(builder, origNetwork)

def LaunchDetection_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(22, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchDetection_FullAddDataMode(builder, dataMode)

def LaunchDetection_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchDetection_FullAddCreatedAt(builder, createdAt)

def LaunchDetection_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchDetection_FullAddCreatedBy(builder, createdBy)

def LaunchDetection_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    LaunchDetection_FullAddUpdatedAt(builder, updatedAt)

def LaunchDetection_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    LaunchDetection_FullAddUpdatedBy(builder, updatedBy)

def LaunchDetection_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchDetection_FullEnd(builder)

try:
    from typing import List
except:
    pass

class LaunchDetection_FullT(object):

    # LaunchDetection_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.launchTime = None  # type: str
        self.messageType = None  # type: str
        self.launchLatitude = 0.0  # type: float
        self.launchLongitude = 0.0  # type: float
        self.launchAzimuth = 0.0  # type: float
        self.raan = 0.0  # type: float
        self.inclination = 0.0  # type: float
        self.observationTime = None  # type: str
        self.observationLatitude = 0.0  # type: float
        self.observationLongitude = 0.0  # type: float
        self.observationAltitude = 0.0  # type: float
        self.stereoFlag = False  # type: bool
        self.highZenithAzimuth = False  # type: bool
        self.sequenceNumber = 0  # type: int
        self.eventId = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.descriptor = None  # type: str
        self.tags = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchDetectionFull = LaunchDetection_Full()
        launchDetectionFull.Init(buf, pos)
        return cls.InitFromObj(launchDetectionFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchDetectionFull):
        x = LaunchDetection_FullT()
        x._UnPack(launchDetectionFull)
        return x

    # LaunchDetection_FullT
    def _UnPack(self, launchDetectionFull):
        if launchDetectionFull is None:
            return
        self.id = launchDetectionFull.Id()
        self.classificationMarking = launchDetectionFull.ClassificationMarking()
        self.launchTime = launchDetectionFull.LaunchTime()
        self.messageType = launchDetectionFull.MessageType()
        self.launchLatitude = launchDetectionFull.LaunchLatitude()
        self.launchLongitude = launchDetectionFull.LaunchLongitude()
        self.launchAzimuth = launchDetectionFull.LaunchAzimuth()
        self.raan = launchDetectionFull.Raan()
        self.inclination = launchDetectionFull.Inclination()
        self.observationTime = launchDetectionFull.ObservationTime()
        self.observationLatitude = launchDetectionFull.ObservationLatitude()
        self.observationLongitude = launchDetectionFull.ObservationLongitude()
        self.observationAltitude = launchDetectionFull.ObservationAltitude()
        self.stereoFlag = launchDetectionFull.StereoFlag()
        self.highZenithAzimuth = launchDetectionFull.HighZenithAzimuth()
        self.sequenceNumber = launchDetectionFull.SequenceNumber()
        self.eventId = launchDetectionFull.EventId()
        self.source = launchDetectionFull.Source()
        self.origin = launchDetectionFull.Origin()
        self.descriptor = launchDetectionFull.Descriptor()
        if not launchDetectionFull.TagsIsNone():
            self.tags = []
            for i in range(launchDetectionFull.TagsLength()):
                self.tags.append(launchDetectionFull.Tags(i))
        self.origNetwork = launchDetectionFull.OrigNetwork()
        self.dataMode = launchDetectionFull.DataMode()
        self.createdAt = launchDetectionFull.CreatedAt()
        self.createdBy = launchDetectionFull.CreatedBy()
        self.updatedAt = launchDetectionFull.UpdatedAt()
        self.updatedBy = launchDetectionFull.UpdatedBy()

    # LaunchDetection_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.launchTime is not None:
            launchTime = builder.CreateString(self.launchTime)
        if self.messageType is not None:
            messageType = builder.CreateString(self.messageType)
        if self.observationTime is not None:
            observationTime = builder.CreateString(self.observationTime)
        if self.eventId is not None:
            eventId = builder.CreateString(self.eventId)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            LaunchDetection_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        LaunchDetection_FullStart(builder)
        if self.id is not None:
            LaunchDetection_FullAddId(builder, id)
        if self.classificationMarking is not None:
            LaunchDetection_FullAddClassificationMarking(builder, classificationMarking)
        if self.launchTime is not None:
            LaunchDetection_FullAddLaunchTime(builder, launchTime)
        if self.messageType is not None:
            LaunchDetection_FullAddMessageType(builder, messageType)
        LaunchDetection_FullAddLaunchLatitude(builder, self.launchLatitude)
        LaunchDetection_FullAddLaunchLongitude(builder, self.launchLongitude)
        LaunchDetection_FullAddLaunchAzimuth(builder, self.launchAzimuth)
        LaunchDetection_FullAddRaan(builder, self.raan)
        LaunchDetection_FullAddInclination(builder, self.inclination)
        if self.observationTime is not None:
            LaunchDetection_FullAddObservationTime(builder, observationTime)
        LaunchDetection_FullAddObservationLatitude(builder, self.observationLatitude)
        LaunchDetection_FullAddObservationLongitude(builder, self.observationLongitude)
        LaunchDetection_FullAddObservationAltitude(builder, self.observationAltitude)
        LaunchDetection_FullAddStereoFlag(builder, self.stereoFlag)
        LaunchDetection_FullAddHighZenithAzimuth(builder, self.highZenithAzimuth)
        LaunchDetection_FullAddSequenceNumber(builder, self.sequenceNumber)
        if self.eventId is not None:
            LaunchDetection_FullAddEventId(builder, eventId)
        if self.source is not None:
            LaunchDetection_FullAddSource(builder, source)
        if self.origin is not None:
            LaunchDetection_FullAddOrigin(builder, origin)
        if self.descriptor is not None:
            LaunchDetection_FullAddDescriptor(builder, descriptor)
        if self.tags is not None:
            LaunchDetection_FullAddTags(builder, tags)
        if self.origNetwork is not None:
            LaunchDetection_FullAddOrigNetwork(builder, origNetwork)
        LaunchDetection_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            LaunchDetection_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchDetection_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            LaunchDetection_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            LaunchDetection_FullAddUpdatedBy(builder, updatedBy)
        launchDetectionFull = LaunchDetection_FullEnd(builder)
        return launchDetectionFull
