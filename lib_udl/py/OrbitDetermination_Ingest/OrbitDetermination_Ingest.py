# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
class OrbitDetermination_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrbitDetermination_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrbitDetermination_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrbitDetermination_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x42\x49", size_prefixed=size_prefixed)

    # OrbitDetermination_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # OrbitDetermination_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OrbitDetermination_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
    # Example: /// Example: 2023-08-28T15:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    # Example: /// Example: 54741
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitDetermination_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 54741
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
    # Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitDetermination_Ingest
    def AprioriIdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def AprioriElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
    # Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitDetermination_Ingest
    def AprioriIdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def AprioriStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether this is an initial orbit determination.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def InitialOd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def LastObStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def LastObEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time span used for the OD of the object, in days.
    # Example: /// Example: 3.5
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def TimeSpan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def EffectiveFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
    # Example: /// Example: 2023-08-30T08:15:00.123456Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def EffectiveUntil(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
    # Example: /// Example: 0.991
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def Wrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
    # Example: /// Example: 1.02
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def PreviousWrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
    # Example: /// Example: 0.985
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def FirstPassWrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
    # Example: /// Example: 0.975
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def BestPassWrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Error growth rate of the OD solution in kilometers per day.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def ErrorGrowthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def Edr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
    # Example: /// Example: BLS
    # Constraints: Minimum length = 1, Maximum length = 64
    # OrbitDetermination_Ingest
    def Method(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
    # Example: /// Example: ASW
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Ingest
    def MethodSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The fit span, in days, used in a Batch Least Squares (BLS) OD.
    # Example: /// Example: 0.6
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def FitSpan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating whether the ballistic coefficient was estimated during this OD solution.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def BallisticCoeffEst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Model used to estimate the ballistic coefficient.
    # Example: /// Example: GaussMarkov
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Ingest
    def BallisticCoeffModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether the AGOM was estimated during this OD solution.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def AgomEst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Model used to estimate the AGOM.
    # Example: /// Example: RandomWalk
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Ingest
    def AgomModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
    # Example: /// Example: 0.001
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def RmsConvergenceCriteria(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of iterations taken for the algorithm to converge on an OD solution.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def NumIterations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
    # Example: /// Example: ['EO', 'RADAR']
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def AcceptedObTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Ingest
    def AcceptedObTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Ingest
    def AcceptedObTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    # Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def AcceptedObIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Ingest
    def AcceptedObIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Ingest
    def AcceptedObIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
    # Example: /// Example: ['DOA', 'RF']
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def RejectedObTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Ingest
    def RejectedObTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Ingest
    def RejectedObTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    # Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def RejectedObIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Ingest
    def RejectedObIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Ingest
    def RejectedObIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
    # Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def SensorIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Ingest
    def SensorIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Ingest
    def SensorIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OrbitDetermination_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # OrbitDetermination_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitDetermination_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OrbitDetermination_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def OrbitDetermination_IngestStart(builder):
    builder.StartObject(44)

def Start(builder):
    OrbitDetermination_IngestStart(builder)

def OrbitDetermination_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OrbitDetermination_IngestAddId(builder, id)

def OrbitDetermination_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OrbitDetermination_IngestAddClassificationMarking(builder, classificationMarking)

def OrbitDetermination_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    OrbitDetermination_IngestAddStartTime(builder, startTime)

def OrbitDetermination_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    OrbitDetermination_IngestAddEndTime(builder, endTime)

def OrbitDetermination_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OrbitDetermination_IngestAddIdOnOrbit(builder, idOnOrbit)

def OrbitDetermination_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    OrbitDetermination_IngestAddOrigObjectId(builder, origObjectId)

def OrbitDetermination_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    OrbitDetermination_IngestAddSatNo(builder, satNo)

def OrbitDetermination_IngestAddAprioriIdElset(builder, aprioriIdElset):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriIdElset), 0)

def AddAprioriIdElset(builder, aprioriIdElset):
    OrbitDetermination_IngestAddAprioriIdElset(builder, aprioriIdElset)

def OrbitDetermination_IngestAddAprioriElset(builder, aprioriElset):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriElset), 0)

def AddAprioriElset(builder, aprioriElset):
    OrbitDetermination_IngestAddAprioriElset(builder, aprioriElset)

def OrbitDetermination_IngestAddAprioriIdStateVector(builder, aprioriIdStateVector):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriIdStateVector), 0)

def AddAprioriIdStateVector(builder, aprioriIdStateVector):
    OrbitDetermination_IngestAddAprioriIdStateVector(builder, aprioriIdStateVector)

def OrbitDetermination_IngestAddAprioriStateVector(builder, aprioriStateVector):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriStateVector), 0)

def AddAprioriStateVector(builder, aprioriStateVector):
    OrbitDetermination_IngestAddAprioriStateVector(builder, aprioriStateVector)

def OrbitDetermination_IngestAddInitialOd(builder, initialOd):
    builder.PrependBoolSlot(11, initialOd, 0)

def AddInitialOd(builder, initialOd):
    OrbitDetermination_IngestAddInitialOd(builder, initialOd)

def OrbitDetermination_IngestAddLastObStart(builder, lastObStart):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(lastObStart), 0)

def AddLastObStart(builder, lastObStart):
    OrbitDetermination_IngestAddLastObStart(builder, lastObStart)

def OrbitDetermination_IngestAddLastObEnd(builder, lastObEnd):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(lastObEnd), 0)

def AddLastObEnd(builder, lastObEnd):
    OrbitDetermination_IngestAddLastObEnd(builder, lastObEnd)

def OrbitDetermination_IngestAddTimeSpan(builder, timeSpan):
    builder.PrependFloat64Slot(14, timeSpan, 0.0)

def AddTimeSpan(builder, timeSpan):
    OrbitDetermination_IngestAddTimeSpan(builder, timeSpan)

def OrbitDetermination_IngestAddEffectiveFrom(builder, effectiveFrom):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveFrom), 0)

def AddEffectiveFrom(builder, effectiveFrom):
    OrbitDetermination_IngestAddEffectiveFrom(builder, effectiveFrom)

def OrbitDetermination_IngestAddEffectiveUntil(builder, effectiveUntil):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveUntil), 0)

def AddEffectiveUntil(builder, effectiveUntil):
    OrbitDetermination_IngestAddEffectiveUntil(builder, effectiveUntil)

def OrbitDetermination_IngestAddWrms(builder, wrms):
    builder.PrependFloat64Slot(17, wrms, 0.0)

def AddWrms(builder, wrms):
    OrbitDetermination_IngestAddWrms(builder, wrms)

def OrbitDetermination_IngestAddPreviousWrms(builder, previousWrms):
    builder.PrependFloat64Slot(18, previousWrms, 0.0)

def AddPreviousWrms(builder, previousWrms):
    OrbitDetermination_IngestAddPreviousWrms(builder, previousWrms)

def OrbitDetermination_IngestAddFirstPassWrms(builder, firstPassWrms):
    builder.PrependFloat64Slot(19, firstPassWrms, 0.0)

def AddFirstPassWrms(builder, firstPassWrms):
    OrbitDetermination_IngestAddFirstPassWrms(builder, firstPassWrms)

def OrbitDetermination_IngestAddBestPassWrms(builder, bestPassWrms):
    builder.PrependFloat64Slot(20, bestPassWrms, 0.0)

def AddBestPassWrms(builder, bestPassWrms):
    OrbitDetermination_IngestAddBestPassWrms(builder, bestPassWrms)

def OrbitDetermination_IngestAddErrorGrowthRate(builder, errorGrowthRate):
    builder.PrependFloat64Slot(21, errorGrowthRate, 0.0)

def AddErrorGrowthRate(builder, errorGrowthRate):
    OrbitDetermination_IngestAddErrorGrowthRate(builder, errorGrowthRate)

def OrbitDetermination_IngestAddEdr(builder, edr):
    builder.PrependFloat64Slot(22, edr, 0.0)

def AddEdr(builder, edr):
    OrbitDetermination_IngestAddEdr(builder, edr)

def OrbitDetermination_IngestAddMethod(builder, method):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(method), 0)

def AddMethod(builder, method):
    OrbitDetermination_IngestAddMethod(builder, method)

def OrbitDetermination_IngestAddMethodSource(builder, methodSource):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(methodSource), 0)

def AddMethodSource(builder, methodSource):
    OrbitDetermination_IngestAddMethodSource(builder, methodSource)

def OrbitDetermination_IngestAddFitSpan(builder, fitSpan):
    builder.PrependFloat64Slot(25, fitSpan, 0.0)

def AddFitSpan(builder, fitSpan):
    OrbitDetermination_IngestAddFitSpan(builder, fitSpan)

def OrbitDetermination_IngestAddBallisticCoeffEst(builder, ballisticCoeffEst):
    builder.PrependBoolSlot(26, ballisticCoeffEst, 0)

def AddBallisticCoeffEst(builder, ballisticCoeffEst):
    OrbitDetermination_IngestAddBallisticCoeffEst(builder, ballisticCoeffEst)

def OrbitDetermination_IngestAddBallisticCoeffModel(builder, ballisticCoeffModel):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(ballisticCoeffModel), 0)

def AddBallisticCoeffModel(builder, ballisticCoeffModel):
    OrbitDetermination_IngestAddBallisticCoeffModel(builder, ballisticCoeffModel)

def OrbitDetermination_IngestAddAgomEst(builder, agomEst):
    builder.PrependBoolSlot(28, agomEst, 0)

def AddAgomEst(builder, agomEst):
    OrbitDetermination_IngestAddAgomEst(builder, agomEst)

def OrbitDetermination_IngestAddAgomModel(builder, agomModel):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(agomModel), 0)

def AddAgomModel(builder, agomModel):
    OrbitDetermination_IngestAddAgomModel(builder, agomModel)

def OrbitDetermination_IngestAddRmsConvergenceCriteria(builder, rmsConvergenceCriteria):
    builder.PrependFloat64Slot(30, rmsConvergenceCriteria, 0.0)

def AddRmsConvergenceCriteria(builder, rmsConvergenceCriteria):
    OrbitDetermination_IngestAddRmsConvergenceCriteria(builder, rmsConvergenceCriteria)

def OrbitDetermination_IngestAddNumIterations(builder, numIterations):
    builder.PrependInt32Slot(31, numIterations, 0)

def AddNumIterations(builder, numIterations):
    OrbitDetermination_IngestAddNumIterations(builder, numIterations)

def OrbitDetermination_IngestAddAcceptedObTyps(builder, acceptedObTyps):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(acceptedObTyps), 0)

def AddAcceptedObTyps(builder, acceptedObTyps):
    OrbitDetermination_IngestAddAcceptedObTyps(builder, acceptedObTyps)

def OrbitDetermination_IngestStartAcceptedObTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcceptedObTypsVector(builder, numElems):
    return OrbitDetermination_IngestStartAcceptedObTypsVector(builder, numElems)

def OrbitDetermination_IngestAddAcceptedObIds(builder, acceptedObIds):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(acceptedObIds), 0)

def AddAcceptedObIds(builder, acceptedObIds):
    OrbitDetermination_IngestAddAcceptedObIds(builder, acceptedObIds)

def OrbitDetermination_IngestStartAcceptedObIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcceptedObIdsVector(builder, numElems):
    return OrbitDetermination_IngestStartAcceptedObIdsVector(builder, numElems)

def OrbitDetermination_IngestAddRejectedObTyps(builder, rejectedObTyps):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(rejectedObTyps), 0)

def AddRejectedObTyps(builder, rejectedObTyps):
    OrbitDetermination_IngestAddRejectedObTyps(builder, rejectedObTyps)

def OrbitDetermination_IngestStartRejectedObTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRejectedObTypsVector(builder, numElems):
    return OrbitDetermination_IngestStartRejectedObTypsVector(builder, numElems)

def OrbitDetermination_IngestAddRejectedObIds(builder, rejectedObIds):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(rejectedObIds), 0)

def AddRejectedObIds(builder, rejectedObIds):
    OrbitDetermination_IngestAddRejectedObIds(builder, rejectedObIds)

def OrbitDetermination_IngestStartRejectedObIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRejectedObIdsVector(builder, numElems):
    return OrbitDetermination_IngestStartRejectedObIdsVector(builder, numElems)

def OrbitDetermination_IngestAddSensorIds(builder, sensorIds):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(sensorIds), 0)

def AddSensorIds(builder, sensorIds):
    OrbitDetermination_IngestAddSensorIds(builder, sensorIds)

def OrbitDetermination_IngestStartSensorIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSensorIdsVector(builder, numElems):
    return OrbitDetermination_IngestStartSensorIdsVector(builder, numElems)

def OrbitDetermination_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OrbitDetermination_IngestAddCreatedAt(builder, createdAt)

def OrbitDetermination_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OrbitDetermination_IngestAddCreatedBy(builder, createdBy)

def OrbitDetermination_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    OrbitDetermination_IngestAddSourceDl(builder, sourceDl)

def OrbitDetermination_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OrbitDetermination_IngestAddSource(builder, source)

def OrbitDetermination_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OrbitDetermination_IngestAddOrigin(builder, origin)

def OrbitDetermination_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OrbitDetermination_IngestAddOrigNetwork(builder, origNetwork)

def OrbitDetermination_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(43, dataMode, 0)

def AddDataMode(builder, dataMode):
    OrbitDetermination_IngestAddDataMode(builder, dataMode)

def OrbitDetermination_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrbitDetermination_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class OrbitDetermination_IngestT(object):

    # OrbitDetermination_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.origObjectId = None  # type: str
        self.satNo = 0  # type: int
        self.aprioriIdElset = None  # type: str
        self.aprioriElset = None  # type: str
        self.aprioriIdStateVector = None  # type: str
        self.aprioriStateVector = None  # type: str
        self.initialOd = False  # type: bool
        self.lastObStart = None  # type: str
        self.lastObEnd = None  # type: str
        self.timeSpan = 0.0  # type: float
        self.effectiveFrom = None  # type: str
        self.effectiveUntil = None  # type: str
        self.wrms = 0.0  # type: float
        self.previousWrms = 0.0  # type: float
        self.firstPassWrms = 0.0  # type: float
        self.bestPassWrms = 0.0  # type: float
        self.errorGrowthRate = 0.0  # type: float
        self.edr = 0.0  # type: float
        self.method = None  # type: str
        self.methodSource = None  # type: str
        self.fitSpan = 0.0  # type: float
        self.ballisticCoeffEst = False  # type: bool
        self.ballisticCoeffModel = None  # type: str
        self.agomEst = False  # type: bool
        self.agomModel = None  # type: str
        self.rmsConvergenceCriteria = 0.0  # type: float
        self.numIterations = 0  # type: int
        self.acceptedObTyps = None  # type: List[str]
        self.acceptedObIds = None  # type: List[str]
        self.rejectedObTyps = None  # type: List[str]
        self.rejectedObIds = None  # type: List[str]
        self.sensorIds = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        orbitDeterminationIngest = OrbitDetermination_Ingest()
        orbitDeterminationIngest.Init(buf, pos)
        return cls.InitFromObj(orbitDeterminationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, orbitDeterminationIngest):
        x = OrbitDetermination_IngestT()
        x._UnPack(orbitDeterminationIngest)
        return x

    # OrbitDetermination_IngestT
    def _UnPack(self, orbitDeterminationIngest):
        if orbitDeterminationIngest is None:
            return
        self.id = orbitDeterminationIngest.Id()
        self.classificationMarking = orbitDeterminationIngest.ClassificationMarking()
        self.startTime = orbitDeterminationIngest.StartTime()
        self.endTime = orbitDeterminationIngest.EndTime()
        self.idOnOrbit = orbitDeterminationIngest.IdOnOrbit()
        self.origObjectId = orbitDeterminationIngest.OrigObjectId()
        self.satNo = orbitDeterminationIngest.SatNo()
        self.aprioriIdElset = orbitDeterminationIngest.AprioriIdElset()
        self.aprioriElset = orbitDeterminationIngest.AprioriElset()
        self.aprioriIdStateVector = orbitDeterminationIngest.AprioriIdStateVector()
        self.aprioriStateVector = orbitDeterminationIngest.AprioriStateVector()
        self.initialOd = orbitDeterminationIngest.InitialOd()
        self.lastObStart = orbitDeterminationIngest.LastObStart()
        self.lastObEnd = orbitDeterminationIngest.LastObEnd()
        self.timeSpan = orbitDeterminationIngest.TimeSpan()
        self.effectiveFrom = orbitDeterminationIngest.EffectiveFrom()
        self.effectiveUntil = orbitDeterminationIngest.EffectiveUntil()
        self.wrms = orbitDeterminationIngest.Wrms()
        self.previousWrms = orbitDeterminationIngest.PreviousWrms()
        self.firstPassWrms = orbitDeterminationIngest.FirstPassWrms()
        self.bestPassWrms = orbitDeterminationIngest.BestPassWrms()
        self.errorGrowthRate = orbitDeterminationIngest.ErrorGrowthRate()
        self.edr = orbitDeterminationIngest.Edr()
        self.method = orbitDeterminationIngest.Method()
        self.methodSource = orbitDeterminationIngest.MethodSource()
        self.fitSpan = orbitDeterminationIngest.FitSpan()
        self.ballisticCoeffEst = orbitDeterminationIngest.BallisticCoeffEst()
        self.ballisticCoeffModel = orbitDeterminationIngest.BallisticCoeffModel()
        self.agomEst = orbitDeterminationIngest.AgomEst()
        self.agomModel = orbitDeterminationIngest.AgomModel()
        self.rmsConvergenceCriteria = orbitDeterminationIngest.RmsConvergenceCriteria()
        self.numIterations = orbitDeterminationIngest.NumIterations()
        if not orbitDeterminationIngest.AcceptedObTypsIsNone():
            self.acceptedObTyps = []
            for i in range(orbitDeterminationIngest.AcceptedObTypsLength()):
                self.acceptedObTyps.append(orbitDeterminationIngest.AcceptedObTyps(i))
        if not orbitDeterminationIngest.AcceptedObIdsIsNone():
            self.acceptedObIds = []
            for i in range(orbitDeterminationIngest.AcceptedObIdsLength()):
                self.acceptedObIds.append(orbitDeterminationIngest.AcceptedObIds(i))
        if not orbitDeterminationIngest.RejectedObTypsIsNone():
            self.rejectedObTyps = []
            for i in range(orbitDeterminationIngest.RejectedObTypsLength()):
                self.rejectedObTyps.append(orbitDeterminationIngest.RejectedObTyps(i))
        if not orbitDeterminationIngest.RejectedObIdsIsNone():
            self.rejectedObIds = []
            for i in range(orbitDeterminationIngest.RejectedObIdsLength()):
                self.rejectedObIds.append(orbitDeterminationIngest.RejectedObIds(i))
        if not orbitDeterminationIngest.SensorIdsIsNone():
            self.sensorIds = []
            for i in range(orbitDeterminationIngest.SensorIdsLength()):
                self.sensorIds.append(orbitDeterminationIngest.SensorIds(i))
        self.createdAt = orbitDeterminationIngest.CreatedAt()
        self.createdBy = orbitDeterminationIngest.CreatedBy()
        self.sourceDl = orbitDeterminationIngest.SourceDl()
        self.source = orbitDeterminationIngest.Source()
        self.origin = orbitDeterminationIngest.Origin()
        self.origNetwork = orbitDeterminationIngest.OrigNetwork()
        self.dataMode = orbitDeterminationIngest.DataMode()

    # OrbitDetermination_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.aprioriIdElset is not None:
            aprioriIdElset = builder.CreateString(self.aprioriIdElset)
        if self.aprioriElset is not None:
            aprioriElset = builder.CreateString(self.aprioriElset)
        if self.aprioriIdStateVector is not None:
            aprioriIdStateVector = builder.CreateString(self.aprioriIdStateVector)
        if self.aprioriStateVector is not None:
            aprioriStateVector = builder.CreateString(self.aprioriStateVector)
        if self.lastObStart is not None:
            lastObStart = builder.CreateString(self.lastObStart)
        if self.lastObEnd is not None:
            lastObEnd = builder.CreateString(self.lastObEnd)
        if self.effectiveFrom is not None:
            effectiveFrom = builder.CreateString(self.effectiveFrom)
        if self.effectiveUntil is not None:
            effectiveUntil = builder.CreateString(self.effectiveUntil)
        if self.method is not None:
            method = builder.CreateString(self.method)
        if self.methodSource is not None:
            methodSource = builder.CreateString(self.methodSource)
        if self.ballisticCoeffModel is not None:
            ballisticCoeffModel = builder.CreateString(self.ballisticCoeffModel)
        if self.agomModel is not None:
            agomModel = builder.CreateString(self.agomModel)
        if self.acceptedObTyps is not None:
            acceptedObTypslist = []
            for i in range(len(self.acceptedObTyps)):
                acceptedObTypslist.append(builder.CreateString(self.acceptedObTyps[i]))
            OrbitDetermination_IngestStartAcceptedObTypsVector(builder, len(self.acceptedObTyps))
            for i in reversed(range(len(self.acceptedObTyps))):
                builder.PrependUOffsetTRelative(acceptedObTypslist[i])
            acceptedObTyps = builder.EndVector()
        if self.acceptedObIds is not None:
            acceptedObIdslist = []
            for i in range(len(self.acceptedObIds)):
                acceptedObIdslist.append(builder.CreateString(self.acceptedObIds[i]))
            OrbitDetermination_IngestStartAcceptedObIdsVector(builder, len(self.acceptedObIds))
            for i in reversed(range(len(self.acceptedObIds))):
                builder.PrependUOffsetTRelative(acceptedObIdslist[i])
            acceptedObIds = builder.EndVector()
        if self.rejectedObTyps is not None:
            rejectedObTypslist = []
            for i in range(len(self.rejectedObTyps)):
                rejectedObTypslist.append(builder.CreateString(self.rejectedObTyps[i]))
            OrbitDetermination_IngestStartRejectedObTypsVector(builder, len(self.rejectedObTyps))
            for i in reversed(range(len(self.rejectedObTyps))):
                builder.PrependUOffsetTRelative(rejectedObTypslist[i])
            rejectedObTyps = builder.EndVector()
        if self.rejectedObIds is not None:
            rejectedObIdslist = []
            for i in range(len(self.rejectedObIds)):
                rejectedObIdslist.append(builder.CreateString(self.rejectedObIds[i]))
            OrbitDetermination_IngestStartRejectedObIdsVector(builder, len(self.rejectedObIds))
            for i in reversed(range(len(self.rejectedObIds))):
                builder.PrependUOffsetTRelative(rejectedObIdslist[i])
            rejectedObIds = builder.EndVector()
        if self.sensorIds is not None:
            sensorIdslist = []
            for i in range(len(self.sensorIds)):
                sensorIdslist.append(builder.CreateString(self.sensorIds[i]))
            OrbitDetermination_IngestStartSensorIdsVector(builder, len(self.sensorIds))
            for i in reversed(range(len(self.sensorIds))):
                builder.PrependUOffsetTRelative(sensorIdslist[i])
            sensorIds = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OrbitDetermination_IngestStart(builder)
        if self.id is not None:
            OrbitDetermination_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            OrbitDetermination_IngestAddClassificationMarking(builder, classificationMarking)
        if self.startTime is not None:
            OrbitDetermination_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            OrbitDetermination_IngestAddEndTime(builder, endTime)
        if self.idOnOrbit is not None:
            OrbitDetermination_IngestAddIdOnOrbit(builder, idOnOrbit)
        if self.origObjectId is not None:
            OrbitDetermination_IngestAddOrigObjectId(builder, origObjectId)
        OrbitDetermination_IngestAddSatNo(builder, self.satNo)
        if self.aprioriIdElset is not None:
            OrbitDetermination_IngestAddAprioriIdElset(builder, aprioriIdElset)
        if self.aprioriElset is not None:
            OrbitDetermination_IngestAddAprioriElset(builder, aprioriElset)
        if self.aprioriIdStateVector is not None:
            OrbitDetermination_IngestAddAprioriIdStateVector(builder, aprioriIdStateVector)
        if self.aprioriStateVector is not None:
            OrbitDetermination_IngestAddAprioriStateVector(builder, aprioriStateVector)
        OrbitDetermination_IngestAddInitialOd(builder, self.initialOd)
        if self.lastObStart is not None:
            OrbitDetermination_IngestAddLastObStart(builder, lastObStart)
        if self.lastObEnd is not None:
            OrbitDetermination_IngestAddLastObEnd(builder, lastObEnd)
        OrbitDetermination_IngestAddTimeSpan(builder, self.timeSpan)
        if self.effectiveFrom is not None:
            OrbitDetermination_IngestAddEffectiveFrom(builder, effectiveFrom)
        if self.effectiveUntil is not None:
            OrbitDetermination_IngestAddEffectiveUntil(builder, effectiveUntil)
        OrbitDetermination_IngestAddWrms(builder, self.wrms)
        OrbitDetermination_IngestAddPreviousWrms(builder, self.previousWrms)
        OrbitDetermination_IngestAddFirstPassWrms(builder, self.firstPassWrms)
        OrbitDetermination_IngestAddBestPassWrms(builder, self.bestPassWrms)
        OrbitDetermination_IngestAddErrorGrowthRate(builder, self.errorGrowthRate)
        OrbitDetermination_IngestAddEdr(builder, self.edr)
        if self.method is not None:
            OrbitDetermination_IngestAddMethod(builder, method)
        if self.methodSource is not None:
            OrbitDetermination_IngestAddMethodSource(builder, methodSource)
        OrbitDetermination_IngestAddFitSpan(builder, self.fitSpan)
        OrbitDetermination_IngestAddBallisticCoeffEst(builder, self.ballisticCoeffEst)
        if self.ballisticCoeffModel is not None:
            OrbitDetermination_IngestAddBallisticCoeffModel(builder, ballisticCoeffModel)
        OrbitDetermination_IngestAddAgomEst(builder, self.agomEst)
        if self.agomModel is not None:
            OrbitDetermination_IngestAddAgomModel(builder, agomModel)
        OrbitDetermination_IngestAddRmsConvergenceCriteria(builder, self.rmsConvergenceCriteria)
        OrbitDetermination_IngestAddNumIterations(builder, self.numIterations)
        if self.acceptedObTyps is not None:
            OrbitDetermination_IngestAddAcceptedObTyps(builder, acceptedObTyps)
        if self.acceptedObIds is not None:
            OrbitDetermination_IngestAddAcceptedObIds(builder, acceptedObIds)
        if self.rejectedObTyps is not None:
            OrbitDetermination_IngestAddRejectedObTyps(builder, rejectedObTyps)
        if self.rejectedObIds is not None:
            OrbitDetermination_IngestAddRejectedObIds(builder, rejectedObIds)
        if self.sensorIds is not None:
            OrbitDetermination_IngestAddSensorIds(builder, sensorIds)
        if self.createdAt is not None:
            OrbitDetermination_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OrbitDetermination_IngestAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            OrbitDetermination_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            OrbitDetermination_IngestAddSource(builder, source)
        if self.origin is not None:
            OrbitDetermination_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            OrbitDetermination_IngestAddOrigNetwork(builder, origNetwork)
        OrbitDetermination_IngestAddDataMode(builder, self.dataMode)
        orbitDeterminationIngest = OrbitDetermination_IngestEnd(builder)
        return orbitDeterminationIngest
