# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// This table contains descriptions for common satellite RF bands.
class RFBandType_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RFBandType_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRFBandType_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RFBandType_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x46\x42\x41", size_prefixed=size_prefixed)

    # RFBandType_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier for the RF band (e.g. X, K, Ku, etc).
    # Example: /// Example: Ku
    # Constraints: Minimum length = 1, Maximum length = 5
    # RFBandType_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFBandType_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the band and common uses.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 1, Maximum length = 256
    # RFBandType_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Approximate start of the band frequency range, in Ghz.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # RFBandType_Full
    def StartFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Approximate end of the band frequency range, in Ghz.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # RFBandType_Full
    def EndFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFBandType_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFBandType_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFBandType_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFBandType_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFBandType_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFBandType_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFBandType_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RFBandType_FullStart(builder):
    builder.StartObject(12)

def Start(builder):
    RFBandType_FullStart(builder)

def RFBandType_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RFBandType_FullAddId(builder, id)

def RFBandType_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RFBandType_FullAddClassificationMarking(builder, classificationMarking)

def RFBandType_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    RFBandType_FullAddDescription(builder, description)

def RFBandType_FullAddStartFreq(builder, startFreq):
    builder.PrependFloat64Slot(3, startFreq, 0.0)

def AddStartFreq(builder, startFreq):
    RFBandType_FullAddStartFreq(builder, startFreq)

def RFBandType_FullAddEndFreq(builder, endFreq):
    builder.PrependFloat64Slot(4, endFreq, 0.0)

def AddEndFreq(builder, endFreq):
    RFBandType_FullAddEndFreq(builder, endFreq)

def RFBandType_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RFBandType_FullAddSource(builder, source)

def RFBandType_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RFBandType_FullAddOrigin(builder, origin)

def RFBandType_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(7, dataMode, 0)

def AddDataMode(builder, dataMode):
    RFBandType_FullAddDataMode(builder, dataMode)

def RFBandType_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RFBandType_FullAddCreatedAt(builder, createdAt)

def RFBandType_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RFBandType_FullAddCreatedBy(builder, createdBy)

def RFBandType_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    RFBandType_FullAddUpdatedAt(builder, updatedAt)

def RFBandType_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    RFBandType_FullAddUpdatedBy(builder, updatedBy)

def RFBandType_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return RFBandType_FullEnd(builder)


class RFBandType_FullT(object):

    # RFBandType_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.description = None  # type: str
        self.startFreq = 0.0  # type: float
        self.endFreq = 0.0  # type: float
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rfbandTypeFull = RFBandType_Full()
        rfbandTypeFull.Init(buf, pos)
        return cls.InitFromObj(rfbandTypeFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rfbandTypeFull):
        x = RFBandType_FullT()
        x._UnPack(rfbandTypeFull)
        return x

    # RFBandType_FullT
    def _UnPack(self, rfbandTypeFull):
        if rfbandTypeFull is None:
            return
        self.id = rfbandTypeFull.Id()
        self.classificationMarking = rfbandTypeFull.ClassificationMarking()
        self.description = rfbandTypeFull.Description()
        self.startFreq = rfbandTypeFull.StartFreq()
        self.endFreq = rfbandTypeFull.EndFreq()
        self.source = rfbandTypeFull.Source()
        self.origin = rfbandTypeFull.Origin()
        self.dataMode = rfbandTypeFull.DataMode()
        self.createdAt = rfbandTypeFull.CreatedAt()
        self.createdBy = rfbandTypeFull.CreatedBy()
        self.updatedAt = rfbandTypeFull.UpdatedAt()
        self.updatedBy = rfbandTypeFull.UpdatedBy()

    # RFBandType_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        RFBandType_FullStart(builder)
        if self.id is not None:
            RFBandType_FullAddId(builder, id)
        if self.classificationMarking is not None:
            RFBandType_FullAddClassificationMarking(builder, classificationMarking)
        if self.description is not None:
            RFBandType_FullAddDescription(builder, description)
        RFBandType_FullAddStartFreq(builder, self.startFreq)
        RFBandType_FullAddEndFreq(builder, self.endFreq)
        if self.source is not None:
            RFBandType_FullAddSource(builder, source)
        if self.origin is not None:
            RFBandType_FullAddOrigin(builder, origin)
        RFBandType_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            RFBandType_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RFBandType_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            RFBandType_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            RFBandType_FullAddUpdatedBy(builder, updatedBy)
        rfbandTypeFull = RFBandType_FullEnd(builder)
        return rfbandTypeFull
