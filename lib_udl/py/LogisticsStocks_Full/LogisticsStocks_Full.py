# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The supply stocks for this support item.
class LogisticsStocks_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsStocks_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsStocks_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsStocks_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsStocks_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The ICAO code for the primary location with available parts.
    # Example: /// Example: PHIK
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsStocks_Full
    def SourceIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The quantity of available parts needed from sourceICAO.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # LogisticsStocks_Full
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsStocks_Full
    def StockCheckTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The point of contact at the sourced location.
    # Example: /// Example: SMITH, JOHN J
    # Constraints: Minimum length = 0, Maximum length = 68
    # LogisticsStocks_Full
    def StockPoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogisticsStocks_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    LogisticsStocks_FullStart(builder)

def LogisticsStocks_FullAddSourceIcao(builder, sourceIcao):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceIcao), 0)

def AddSourceIcao(builder, sourceIcao):
    LogisticsStocks_FullAddSourceIcao(builder, sourceIcao)

def LogisticsStocks_FullAddQuantity(builder, quantity):
    builder.PrependInt32Slot(1, quantity, 0)

def AddQuantity(builder, quantity):
    LogisticsStocks_FullAddQuantity(builder, quantity)

def LogisticsStocks_FullAddStockCheckTime(builder, stockCheckTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stockCheckTime), 0)

def AddStockCheckTime(builder, stockCheckTime):
    LogisticsStocks_FullAddStockCheckTime(builder, stockCheckTime)

def LogisticsStocks_FullAddStockPoc(builder, stockPoc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stockPoc), 0)

def AddStockPoc(builder, stockPoc):
    LogisticsStocks_FullAddStockPoc(builder, stockPoc)

def LogisticsStocks_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsStocks_FullEnd(builder)


class LogisticsStocks_FullT(object):

    # LogisticsStocks_FullT
    def __init__(self):
        self.sourceIcao = None  # type: str
        self.quantity = 0  # type: int
        self.stockCheckTime = None  # type: str
        self.stockPoc = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsStocksFull = LogisticsStocks_Full()
        logisticsStocksFull.Init(buf, pos)
        return cls.InitFromObj(logisticsStocksFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsStocksFull):
        x = LogisticsStocks_FullT()
        x._UnPack(logisticsStocksFull)
        return x

    # LogisticsStocks_FullT
    def _UnPack(self, logisticsStocksFull):
        if logisticsStocksFull is None:
            return
        self.sourceIcao = logisticsStocksFull.SourceIcao()
        self.quantity = logisticsStocksFull.Quantity()
        self.stockCheckTime = logisticsStocksFull.StockCheckTime()
        self.stockPoc = logisticsStocksFull.StockPoc()

    # LogisticsStocks_FullT
    def Pack(self, builder):
        if self.sourceIcao is not None:
            sourceIcao = builder.CreateString(self.sourceIcao)
        if self.stockCheckTime is not None:
            stockCheckTime = builder.CreateString(self.stockCheckTime)
        if self.stockPoc is not None:
            stockPoc = builder.CreateString(self.stockPoc)
        LogisticsStocks_FullStart(builder)
        if self.sourceIcao is not None:
            LogisticsStocks_FullAddSourceIcao(builder, sourceIcao)
        LogisticsStocks_FullAddQuantity(builder, self.quantity)
        if self.stockCheckTime is not None:
            LogisticsStocks_FullAddStockCheckTime(builder, stockCheckTime)
        if self.stockPoc is not None:
            LogisticsStocks_FullAddStockPoc(builder, stockPoc)
        logisticsStocksFull = LogisticsStocks_FullEnd(builder)
        return logisticsStocksFull
