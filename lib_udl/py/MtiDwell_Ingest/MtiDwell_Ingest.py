# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
class MtiDwell_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MtiDwell_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMtiDwell_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MtiDwell_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x54\x49\x44", size_prefixed=size_prefixed)

    # MtiDwell_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating the last dwell of the revisit.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
    # Example: /// Example: 1234567890
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # North-South position of the sensor at the temporal center of the dwell, in degrees.
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D9(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D11(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D12(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D13(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation of the sensor altitude estimate (field D9), in centimeters.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D14(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D15(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ground speed of the sensor at the time of the dwell, in millimeters per second.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Velocity of the sensor in the vertical direction, in decimeters per second.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D17(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation of the estimate of the sensor track, in degrees.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D18(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation of estimate of the sensor speed, in millimeters per second.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D19(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D20(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D21(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pitch angle of the platform at the time of the dwell, in degrees.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D22(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Roll angle of the platform at the time of the dwell, in degrees.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D23(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D24(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D25(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D26(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D27(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D28(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D29(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D30(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D31(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def D32(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MtiDwell_Ingest
    def D32Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MtiDwell_Ingest
    def D32IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Dwell timestamp in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # MtiDwell_Ingest
    def Dwellts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MtiDwell_IngestStart(builder):
    builder.StartObject(32)

def Start(builder):
    MtiDwell_IngestStart(builder)

def MtiDwell_IngestAddD2(builder, d2):
    builder.PrependInt32Slot(0, d2, 0)

def AddD2(builder, d2):
    MtiDwell_IngestAddD2(builder, d2)

def MtiDwell_IngestAddD3(builder, d3):
    builder.PrependInt32Slot(1, d3, 0)

def AddD3(builder, d3):
    MtiDwell_IngestAddD3(builder, d3)

def MtiDwell_IngestAddD4(builder, d4):
    builder.PrependBoolSlot(2, d4, 0)

def AddD4(builder, d4):
    MtiDwell_IngestAddD4(builder, d4)

def MtiDwell_IngestAddD5(builder, d5):
    builder.PrependInt32Slot(3, d5, 0)

def AddD5(builder, d5):
    MtiDwell_IngestAddD5(builder, d5)

def MtiDwell_IngestAddD6(builder, d6):
    builder.PrependInt64Slot(4, d6, 0)

def AddD6(builder, d6):
    MtiDwell_IngestAddD6(builder, d6)

def MtiDwell_IngestAddD7(builder, d7):
    builder.PrependFloat64Slot(5, d7, 0.0)

def AddD7(builder, d7):
    MtiDwell_IngestAddD7(builder, d7)

def MtiDwell_IngestAddD8(builder, d8):
    builder.PrependFloat64Slot(6, d8, 0.0)

def AddD8(builder, d8):
    MtiDwell_IngestAddD8(builder, d8)

def MtiDwell_IngestAddD9(builder, d9):
    builder.PrependInt32Slot(7, d9, 0)

def AddD9(builder, d9):
    MtiDwell_IngestAddD9(builder, d9)

def MtiDwell_IngestAddD10(builder, d10):
    builder.PrependFloat64Slot(8, d10, 0.0)

def AddD10(builder, d10):
    MtiDwell_IngestAddD10(builder, d10)

def MtiDwell_IngestAddD11(builder, d11):
    builder.PrependFloat64Slot(9, d11, 0.0)

def AddD11(builder, d11):
    MtiDwell_IngestAddD11(builder, d11)

def MtiDwell_IngestAddD12(builder, d12):
    builder.PrependInt32Slot(10, d12, 0)

def AddD12(builder, d12):
    MtiDwell_IngestAddD12(builder, d12)

def MtiDwell_IngestAddD13(builder, d13):
    builder.PrependInt32Slot(11, d13, 0)

def AddD13(builder, d13):
    MtiDwell_IngestAddD13(builder, d13)

def MtiDwell_IngestAddD14(builder, d14):
    builder.PrependInt32Slot(12, d14, 0)

def AddD14(builder, d14):
    MtiDwell_IngestAddD14(builder, d14)

def MtiDwell_IngestAddD15(builder, d15):
    builder.PrependFloat64Slot(13, d15, 0.0)

def AddD15(builder, d15):
    MtiDwell_IngestAddD15(builder, d15)

def MtiDwell_IngestAddD16(builder, d16):
    builder.PrependInt32Slot(14, d16, 0)

def AddD16(builder, d16):
    MtiDwell_IngestAddD16(builder, d16)

def MtiDwell_IngestAddD17(builder, d17):
    builder.PrependInt32Slot(15, d17, 0)

def AddD17(builder, d17):
    MtiDwell_IngestAddD17(builder, d17)

def MtiDwell_IngestAddD18(builder, d18):
    builder.PrependInt32Slot(16, d18, 0)

def AddD18(builder, d18):
    MtiDwell_IngestAddD18(builder, d18)

def MtiDwell_IngestAddD19(builder, d19):
    builder.PrependInt32Slot(17, d19, 0)

def AddD19(builder, d19):
    MtiDwell_IngestAddD19(builder, d19)

def MtiDwell_IngestAddD20(builder, d20):
    builder.PrependInt32Slot(18, d20, 0)

def AddD20(builder, d20):
    MtiDwell_IngestAddD20(builder, d20)

def MtiDwell_IngestAddD21(builder, d21):
    builder.PrependFloat64Slot(19, d21, 0.0)

def AddD21(builder, d21):
    MtiDwell_IngestAddD21(builder, d21)

def MtiDwell_IngestAddD22(builder, d22):
    builder.PrependFloat64Slot(20, d22, 0.0)

def AddD22(builder, d22):
    MtiDwell_IngestAddD22(builder, d22)

def MtiDwell_IngestAddD23(builder, d23):
    builder.PrependFloat64Slot(21, d23, 0.0)

def AddD23(builder, d23):
    MtiDwell_IngestAddD23(builder, d23)

def MtiDwell_IngestAddD24(builder, d24):
    builder.PrependFloat64Slot(22, d24, 0.0)

def AddD24(builder, d24):
    MtiDwell_IngestAddD24(builder, d24)

def MtiDwell_IngestAddD25(builder, d25):
    builder.PrependFloat64Slot(23, d25, 0.0)

def AddD25(builder, d25):
    MtiDwell_IngestAddD25(builder, d25)

def MtiDwell_IngestAddD26(builder, d26):
    builder.PrependFloat64Slot(24, d26, 0.0)

def AddD26(builder, d26):
    MtiDwell_IngestAddD26(builder, d26)

def MtiDwell_IngestAddD27(builder, d27):
    builder.PrependFloat64Slot(25, d27, 0.0)

def AddD27(builder, d27):
    MtiDwell_IngestAddD27(builder, d27)

def MtiDwell_IngestAddD28(builder, d28):
    builder.PrependFloat64Slot(26, d28, 0.0)

def AddD28(builder, d28):
    MtiDwell_IngestAddD28(builder, d28)

def MtiDwell_IngestAddD29(builder, d29):
    builder.PrependFloat64Slot(27, d29, 0.0)

def AddD29(builder, d29):
    MtiDwell_IngestAddD29(builder, d29)

def MtiDwell_IngestAddD30(builder, d30):
    builder.PrependFloat64Slot(28, d30, 0.0)

def AddD30(builder, d30):
    MtiDwell_IngestAddD30(builder, d30)

def MtiDwell_IngestAddD31(builder, d31):
    builder.PrependInt32Slot(29, d31, 0)

def AddD31(builder, d31):
    MtiDwell_IngestAddD31(builder, d31)

def MtiDwell_IngestAddD32(builder, d32):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(d32), 0)

def AddD32(builder, d32):
    MtiDwell_IngestAddD32(builder, d32)

def MtiDwell_IngestStartD32Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartD32Vector(builder, numElems):
    return MtiDwell_IngestStartD32Vector(builder, numElems)

def MtiDwell_IngestAddDwellts(builder, dwellts):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(dwellts), 0)

def AddDwellts(builder, dwellts):
    MtiDwell_IngestAddDwellts(builder, dwellts)

def MtiDwell_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return MtiDwell_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class MtiDwell_IngestT(object):

    # MtiDwell_IngestT
    def __init__(self):
        self.d2 = 0  # type: int
        self.d3 = 0  # type: int
        self.d4 = False  # type: bool
        self.d5 = 0  # type: int
        self.d6 = 0  # type: int
        self.d7 = 0.0  # type: float
        self.d8 = 0.0  # type: float
        self.d9 = 0  # type: int
        self.d10 = 0.0  # type: float
        self.d11 = 0.0  # type: float
        self.d12 = 0  # type: int
        self.d13 = 0  # type: int
        self.d14 = 0  # type: int
        self.d15 = 0.0  # type: float
        self.d16 = 0  # type: int
        self.d17 = 0  # type: int
        self.d18 = 0  # type: int
        self.d19 = 0  # type: int
        self.d20 = 0  # type: int
        self.d21 = 0.0  # type: float
        self.d22 = 0.0  # type: float
        self.d23 = 0.0  # type: float
        self.d24 = 0.0  # type: float
        self.d25 = 0.0  # type: float
        self.d26 = 0.0  # type: float
        self.d27 = 0.0  # type: float
        self.d28 = 0.0  # type: float
        self.d29 = 0.0  # type: float
        self.d30 = 0.0  # type: float
        self.d31 = 0  # type: int
        self.d32 = None  # type: List[str]
        self.dwellts = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtiDwellIngest = MtiDwell_Ingest()
        mtiDwellIngest.Init(buf, pos)
        return cls.InitFromObj(mtiDwellIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtiDwellIngest):
        x = MtiDwell_IngestT()
        x._UnPack(mtiDwellIngest)
        return x

    # MtiDwell_IngestT
    def _UnPack(self, mtiDwellIngest):
        if mtiDwellIngest is None:
            return
        self.d2 = mtiDwellIngest.D2()
        self.d3 = mtiDwellIngest.D3()
        self.d4 = mtiDwellIngest.D4()
        self.d5 = mtiDwellIngest.D5()
        self.d6 = mtiDwellIngest.D6()
        self.d7 = mtiDwellIngest.D7()
        self.d8 = mtiDwellIngest.D8()
        self.d9 = mtiDwellIngest.D9()
        self.d10 = mtiDwellIngest.D10()
        self.d11 = mtiDwellIngest.D11()
        self.d12 = mtiDwellIngest.D12()
        self.d13 = mtiDwellIngest.D13()
        self.d14 = mtiDwellIngest.D14()
        self.d15 = mtiDwellIngest.D15()
        self.d16 = mtiDwellIngest.D16()
        self.d17 = mtiDwellIngest.D17()
        self.d18 = mtiDwellIngest.D18()
        self.d19 = mtiDwellIngest.D19()
        self.d20 = mtiDwellIngest.D20()
        self.d21 = mtiDwellIngest.D21()
        self.d22 = mtiDwellIngest.D22()
        self.d23 = mtiDwellIngest.D23()
        self.d24 = mtiDwellIngest.D24()
        self.d25 = mtiDwellIngest.D25()
        self.d26 = mtiDwellIngest.D26()
        self.d27 = mtiDwellIngest.D27()
        self.d28 = mtiDwellIngest.D28()
        self.d29 = mtiDwellIngest.D29()
        self.d30 = mtiDwellIngest.D30()
        self.d31 = mtiDwellIngest.D31()
        if not mtiDwellIngest.D32IsNone():
            self.d32 = []
            for i in range(mtiDwellIngest.D32Length()):
                self.d32.append(mtiDwellIngest.D32(i))
        self.dwellts = mtiDwellIngest.Dwellts()

    # MtiDwell_IngestT
    def Pack(self, builder):
        if self.d32 is not None:
            d32list = []
            for i in range(len(self.d32)):
                d32list.append(builder.CreateString(self.d32[i]))
            MtiDwell_IngestStartD32Vector(builder, len(self.d32))
            for i in reversed(range(len(self.d32))):
                builder.PrependUOffsetTRelative(d32list[i])
            d32 = builder.EndVector()
        if self.dwellts is not None:
            dwellts = builder.CreateString(self.dwellts)
        MtiDwell_IngestStart(builder)
        MtiDwell_IngestAddD2(builder, self.d2)
        MtiDwell_IngestAddD3(builder, self.d3)
        MtiDwell_IngestAddD4(builder, self.d4)
        MtiDwell_IngestAddD5(builder, self.d5)
        MtiDwell_IngestAddD6(builder, self.d6)
        MtiDwell_IngestAddD7(builder, self.d7)
        MtiDwell_IngestAddD8(builder, self.d8)
        MtiDwell_IngestAddD9(builder, self.d9)
        MtiDwell_IngestAddD10(builder, self.d10)
        MtiDwell_IngestAddD11(builder, self.d11)
        MtiDwell_IngestAddD12(builder, self.d12)
        MtiDwell_IngestAddD13(builder, self.d13)
        MtiDwell_IngestAddD14(builder, self.d14)
        MtiDwell_IngestAddD15(builder, self.d15)
        MtiDwell_IngestAddD16(builder, self.d16)
        MtiDwell_IngestAddD17(builder, self.d17)
        MtiDwell_IngestAddD18(builder, self.d18)
        MtiDwell_IngestAddD19(builder, self.d19)
        MtiDwell_IngestAddD20(builder, self.d20)
        MtiDwell_IngestAddD21(builder, self.d21)
        MtiDwell_IngestAddD22(builder, self.d22)
        MtiDwell_IngestAddD23(builder, self.d23)
        MtiDwell_IngestAddD24(builder, self.d24)
        MtiDwell_IngestAddD25(builder, self.d25)
        MtiDwell_IngestAddD26(builder, self.d26)
        MtiDwell_IngestAddD27(builder, self.d27)
        MtiDwell_IngestAddD28(builder, self.d28)
        MtiDwell_IngestAddD29(builder, self.d29)
        MtiDwell_IngestAddD30(builder, self.d30)
        MtiDwell_IngestAddD31(builder, self.d31)
        if self.d32 is not None:
            MtiDwell_IngestAddD32(builder, d32)
        if self.dwellts is not None:
            MtiDwell_IngestAddDwellts(builder, dwellts)
        mtiDwellIngest = MtiDwell_IngestEnd(builder)
        return mtiDwellIngest
