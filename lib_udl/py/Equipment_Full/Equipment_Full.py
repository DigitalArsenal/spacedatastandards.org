# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Properties and characteristics of equipment that can be associated with a site or other entity.
class Equipment_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Equipment_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEquipment_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Equipment_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x51\x55\x49", size_prefixed=size_prefixed)

    # Equipment_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # Equipment_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Equipment_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Parent equipment record associated with this equipment record.
    # Example: /// Example: PARENT-EQUIPMENT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Equipment_Full
    def IdParentEquipment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Site Entity associated with the equipment record.
    # Example: /// Example: SITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Equipment_Full
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the operating unit associated with the equipment record.
    # Example: /// Example: UNIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Equipment_Full
    def IdOperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Equipment record from the originating system.
    # Example: /// Example: ORIG-EQP-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Equipment_Full
    def AltEqpId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
    # Example: /// Example: X12345
    # Constraints: Minimum length = 0, Maximum length = 7
    # Equipment_Full
    def EqpCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Uniquely identifies each item or group of equipment associated with a unit, facility or site.
    # Example: /// Example: 001
    # Constraints: Minimum length = 0, Maximum length = 3
    # Equipment_Full
    def EqpIdNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: IQ
    # Constraints: Minimum length = 1, Maximum length = 4
    # Equipment_Full
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    # Example: /// Example: IZ
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def AltCountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # World Aeronautical Chart identifier for the area in which a designated place is located.
    # Example: /// Example: 0427
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def Wac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Provider specific sequential number assigned to the equipment.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Equipment_Full
    def SeqNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
    # Example: /// Example: AMPHIBIOUS WARFARE SHIP
    # Constraints: Minimum length = 0, Maximum length = 54
    # Equipment_Full
    def Nomen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: OPR
    # Constraints: Minimum length = 0, Maximum length = 3
    # Equipment_Full
    def OperStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: RDY
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def Condition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def ConditionAvail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # Equipment_Full
    def Eval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: NOB
    # Constraints: Minimum length = 0, Maximum length = 5
    # Equipment_Full
    def Fpa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: OCC
    # Constraints: Minimum length = 0, Maximum length = 3
    # Equipment_Full
    def Function(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    # ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    # FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    # HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    # FAKER: Friendly track, object, or entity acting as an exercise hostile.
    # JOKER: Friendly track, object, or entity acting as an exercise suspect.
    # NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    # PENDING: Track object which has not been evaluated.
    # SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    # UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 32
    # Equipment_Full
    def Ident(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: OTHR
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def Allegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    # Example: /// Example: HL
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def AltAllegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: GR
    # Constraints: Minimum length = 0, Maximum length = 9
    # Equipment_Full
    def LocReason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
    # Example: /// Example: Territorial Sea
    # Constraints: Minimum length = 0, Maximum length = 32
    # Equipment_Full
    def OperAreaPrimary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: JG
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def FunctPrimary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: WGS
    # Constraints: Minimum length = 0, Maximum length = 16
    # Equipment_Full
    def CoordDatum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
    # Pos. 1-2.  Latitude Degrees     [00-90]
    # Pos. 3-4.  Latitude Minutes     [00-59]
    # Pos. 5-6.  Latitude Seconds     [00-59]
    # Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    # Pos. 10. Latitude Hemisphere       [NS] 
    # Pos. 11-13. Longitude Degrees     [00-180] 
    # Pos. 14-15. Longitude Minutes     [00-59] 
    # Pos. 16-17. Longitude Seconds     [00-59] 
    # Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    # Pos. 21. Longitude Hemisphere     [EW]
    # Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
    # Example: /// Example: 340000000N0430000000E
    # Constraints: Minimum length = 0, Maximum length = 21
    # Equipment_Full
    def Coord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the plus or minus error assessed against the method used to derive the coordinate.
    # Example: /// Example: 12.345
    # Constraints: No constraints specified.
    # Equipment_Full
    def CoordDerivAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 39.019242
    # Constraints: No constraints specified.
    # Equipment_Full
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -104.251659
    # Constraints: No constraints specified.
    # Equipment_Full
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
    # Example: /// Example: 123.45
    # Constraints: No constraints specified.
    # Equipment_Full
    def ElevMsl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
    # Example: /// Example: 50
    # Constraints: No constraints specified.
    # Equipment_Full
    def ElevMslConfLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
    # Example: /// Example: 12.34
    # Constraints: No constraints specified.
    # Equipment_Full
    def ElevMslDerivAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
    # Example: /// Example: 12.34
    # Constraints: No constraints specified.
    # Equipment_Full
    def GeoidalMslSep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates the grid system used in the development of the milGrid coordinates. Values are:
    # UPS - Universal Polar System
    # UTM - Universal Transverse Mercator.
    # Example: /// Example: UTM
    # Constraints: Minimum length = 0, Maximum length = 3
    # Equipment_Full
    def MilGridSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    # 4Q (grid zone designator, GZD)
    # FJ (the 100,000-meter square identifier)
    # 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    # Example: /// Example: 4QFJ12345678
    # Constraints: Minimum length = 0, Maximum length = 15
    # Equipment_Full
    def MilGrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Transverse Mercator (UTM) grid coordinates.
    # Pos. 1-2, UTM Zone Column   [01-60
    # Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    # Pos. 4, UTM False Easting   [0-9]
    # Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    # Pos. 10-11, UTM False Northing    [0-9][0-9]
    # Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    # Example: /// Example: 19P4390691376966
    # Constraints: Minimum length = 0, Maximum length = 16
    # Equipment_Full
    def Utm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    # Example: /// Example: AL006
    # Constraints: Minimum length = 0, Maximum length = 5
    # Equipment_Full
    def AirDefArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: IZ07
    # Constraints: Minimum length = 0, Maximum length = 7
    # Equipment_Full
    def PolSubdiv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # Equipment_Full
    def QtyOh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
    # Example: /// Example: SOGPU----------
    # Constraints: Minimum length = 0, Maximum length = 15
    # Equipment_Full
    def SymCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
    # 0 - Not of significant importance of the system
    # 1 - Primary importance to system
    # 2 - Secondary importance to system
    # 3 - Tertiary importance to system
    # O - Other. Explain in Remarks.
    # Example: /// Example: 1
    # Constraints: Minimum length = 0, Maximum length = 1
    # Equipment_Full
    def ClassRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
    # A - Active
    # I - Inactive
    # K - Acknowledged
    # L - Local
    # Q - A nominated (NOM) or Data Change Request (DCR) record
    # R - Production reduced by CMD decision
    # W - Working Record.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 1
    # Equipment_Full
    def RecStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
    # Example: /// Example: 2008-06-10
    # Constraints: No constraints specified.
    # Equipment_Full
    def ReviewDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Responsible Producer - Organization that is responsible for the maintenance of the record.
    # Example: /// Example: RT
    # Constraints: Minimum length = 0, Maximum length = 4
    # Equipment_Full
    def ResProd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: Provider Reference Documentation
    # Constraints: Minimum length = 0, Maximum length = 128
    # Equipment_Full
    def ReferenceDoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['AIRCRAFT']
    # Constraints: No constraints specified.
    # Equipment_Full
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Equipment_Full
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Equipment_Full
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    # Example: /// Example: ['SRC_ID_1']
    # Constraints: No constraints specified.
    # Equipment_Full
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Equipment_Full
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Equipment_Full
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

    # Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Equipment_Full
    def EquipmentRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Equipment_Full
    def EquipmentRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Equipment_Full
    def EquipmentRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Equipment_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Equipment_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Equipment_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Equipment_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Equipment_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Equipment_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Equipment_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Equipment_FullStart(builder):
    builder.StartObject(56)

def Start(builder):
    Equipment_FullStart(builder)

def Equipment_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Equipment_FullAddId(builder, id)

def Equipment_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Equipment_FullAddClassificationMarking(builder, classificationMarking)

def Equipment_FullAddIdParentEquipment(builder, idParentEquipment):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idParentEquipment), 0)

def AddIdParentEquipment(builder, idParentEquipment):
    Equipment_FullAddIdParentEquipment(builder, idParentEquipment)

def Equipment_FullAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    Equipment_FullAddIdSite(builder, idSite)

def Equipment_FullAddIdOperatingUnit(builder, idOperatingUnit):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idOperatingUnit), 0)

def AddIdOperatingUnit(builder, idOperatingUnit):
    Equipment_FullAddIdOperatingUnit(builder, idOperatingUnit)

def Equipment_FullAddAltEqpId(builder, altEqpId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(altEqpId), 0)

def AddAltEqpId(builder, altEqpId):
    Equipment_FullAddAltEqpId(builder, altEqpId)

def Equipment_FullAddEqpCode(builder, eqpCode):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(eqpCode), 0)

def AddEqpCode(builder, eqpCode):
    Equipment_FullAddEqpCode(builder, eqpCode)

def Equipment_FullAddEqpIdNum(builder, eqpIdNum):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(eqpIdNum), 0)

def AddEqpIdNum(builder, eqpIdNum):
    Equipment_FullAddEqpIdNum(builder, eqpIdNum)

def Equipment_FullAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Equipment_FullAddCountryCode(builder, countryCode)

def Equipment_FullAddAltCountryCode(builder, altCountryCode):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(altCountryCode), 0)

def AddAltCountryCode(builder, altCountryCode):
    Equipment_FullAddAltCountryCode(builder, altCountryCode)

def Equipment_FullAddWac(builder, wac):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(wac), 0)

def AddWac(builder, wac):
    Equipment_FullAddWac(builder, wac)

def Equipment_FullAddSeqNum(builder, seqNum):
    builder.PrependInt32Slot(11, seqNum, 0)

def AddSeqNum(builder, seqNum):
    Equipment_FullAddSeqNum(builder, seqNum)

def Equipment_FullAddNomen(builder, nomen):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(nomen), 0)

def AddNomen(builder, nomen):
    Equipment_FullAddNomen(builder, nomen)

def Equipment_FullAddOperStatus(builder, operStatus):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(operStatus), 0)

def AddOperStatus(builder, operStatus):
    Equipment_FullAddOperStatus(builder, operStatus)

def Equipment_FullAddCondition(builder, condition):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(condition), 0)

def AddCondition(builder, condition):
    Equipment_FullAddCondition(builder, condition)

def Equipment_FullAddConditionAvail(builder, conditionAvail):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(conditionAvail), 0)

def AddConditionAvail(builder, conditionAvail):
    Equipment_FullAddConditionAvail(builder, conditionAvail)

def Equipment_FullAddEval(builder, eval):
    builder.PrependInt32Slot(16, eval, 0)

def AddEval(builder, eval):
    Equipment_FullAddEval(builder, eval)

def Equipment_FullAddFpa(builder, fpa):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(fpa), 0)

def AddFpa(builder, fpa):
    Equipment_FullAddFpa(builder, fpa)

def Equipment_FullAddFunction(builder, function):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(function), 0)

def AddFunction(builder, function):
    Equipment_FullAddFunction(builder, function)

def Equipment_FullAddIdent(builder, ident):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ident), 0)

def AddIdent(builder, ident):
    Equipment_FullAddIdent(builder, ident)

def Equipment_FullAddAllegiance(builder, allegiance):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(allegiance), 0)

def AddAllegiance(builder, allegiance):
    Equipment_FullAddAllegiance(builder, allegiance)

def Equipment_FullAddAltAllegiance(builder, altAllegiance):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(altAllegiance), 0)

def AddAltAllegiance(builder, altAllegiance):
    Equipment_FullAddAltAllegiance(builder, altAllegiance)

def Equipment_FullAddLocReason(builder, locReason):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(locReason), 0)

def AddLocReason(builder, locReason):
    Equipment_FullAddLocReason(builder, locReason)

def Equipment_FullAddOperAreaPrimary(builder, operAreaPrimary):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(operAreaPrimary), 0)

def AddOperAreaPrimary(builder, operAreaPrimary):
    Equipment_FullAddOperAreaPrimary(builder, operAreaPrimary)

def Equipment_FullAddFunctPrimary(builder, functPrimary):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(functPrimary), 0)

def AddFunctPrimary(builder, functPrimary):
    Equipment_FullAddFunctPrimary(builder, functPrimary)

def Equipment_FullAddCoordDatum(builder, coordDatum):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(coordDatum), 0)

def AddCoordDatum(builder, coordDatum):
    Equipment_FullAddCoordDatum(builder, coordDatum)

def Equipment_FullAddCoord(builder, coord):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(coord), 0)

def AddCoord(builder, coord):
    Equipment_FullAddCoord(builder, coord)

def Equipment_FullAddCoordDerivAcc(builder, coordDerivAcc):
    builder.PrependFloat64Slot(27, coordDerivAcc, 0.0)

def AddCoordDerivAcc(builder, coordDerivAcc):
    Equipment_FullAddCoordDerivAcc(builder, coordDerivAcc)

def Equipment_FullAddLat(builder, lat):
    builder.PrependFloat64Slot(28, lat, 0.0)

def AddLat(builder, lat):
    Equipment_FullAddLat(builder, lat)

def Equipment_FullAddLon(builder, lon):
    builder.PrependFloat64Slot(29, lon, 0.0)

def AddLon(builder, lon):
    Equipment_FullAddLon(builder, lon)

def Equipment_FullAddElevMsl(builder, elevMsl):
    builder.PrependFloat64Slot(30, elevMsl, 0.0)

def AddElevMsl(builder, elevMsl):
    Equipment_FullAddElevMsl(builder, elevMsl)

def Equipment_FullAddElevMslConfLvl(builder, elevMslConfLvl):
    builder.PrependInt32Slot(31, elevMslConfLvl, 0)

def AddElevMslConfLvl(builder, elevMslConfLvl):
    Equipment_FullAddElevMslConfLvl(builder, elevMslConfLvl)

def Equipment_FullAddElevMslDerivAcc(builder, elevMslDerivAcc):
    builder.PrependFloat64Slot(32, elevMslDerivAcc, 0.0)

def AddElevMslDerivAcc(builder, elevMslDerivAcc):
    Equipment_FullAddElevMslDerivAcc(builder, elevMslDerivAcc)

def Equipment_FullAddGeoidalMslSep(builder, geoidalMslSep):
    builder.PrependFloat64Slot(33, geoidalMslSep, 0.0)

def AddGeoidalMslSep(builder, geoidalMslSep):
    Equipment_FullAddGeoidalMslSep(builder, geoidalMslSep)

def Equipment_FullAddMilGridSys(builder, milGridSys):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(milGridSys), 0)

def AddMilGridSys(builder, milGridSys):
    Equipment_FullAddMilGridSys(builder, milGridSys)

def Equipment_FullAddMilGrid(builder, milGrid):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(milGrid), 0)

def AddMilGrid(builder, milGrid):
    Equipment_FullAddMilGrid(builder, milGrid)

def Equipment_FullAddUtm(builder, utm):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(utm), 0)

def AddUtm(builder, utm):
    Equipment_FullAddUtm(builder, utm)

def Equipment_FullAddAirDefArea(builder, airDefArea):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(airDefArea), 0)

def AddAirDefArea(builder, airDefArea):
    Equipment_FullAddAirDefArea(builder, airDefArea)

def Equipment_FullAddPolSubdiv(builder, polSubdiv):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(polSubdiv), 0)

def AddPolSubdiv(builder, polSubdiv):
    Equipment_FullAddPolSubdiv(builder, polSubdiv)

def Equipment_FullAddQtyOh(builder, qtyOh):
    builder.PrependInt32Slot(39, qtyOh, 0)

def AddQtyOh(builder, qtyOh):
    Equipment_FullAddQtyOh(builder, qtyOh)

def Equipment_FullAddSymCode(builder, symCode):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(symCode), 0)

def AddSymCode(builder, symCode):
    Equipment_FullAddSymCode(builder, symCode)

def Equipment_FullAddClassRating(builder, classRating):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(classRating), 0)

def AddClassRating(builder, classRating):
    Equipment_FullAddClassRating(builder, classRating)

def Equipment_FullAddRecStatus(builder, recStatus):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(recStatus), 0)

def AddRecStatus(builder, recStatus):
    Equipment_FullAddRecStatus(builder, recStatus)

def Equipment_FullAddReviewDate(builder, reviewDate):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(reviewDate), 0)

def AddReviewDate(builder, reviewDate):
    Equipment_FullAddReviewDate(builder, reviewDate)

def Equipment_FullAddResProd(builder, resProd):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(resProd), 0)

def AddResProd(builder, resProd):
    Equipment_FullAddResProd(builder, resProd)

def Equipment_FullAddReferenceDoc(builder, referenceDoc):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(referenceDoc), 0)

def AddReferenceDoc(builder, referenceDoc):
    Equipment_FullAddReferenceDoc(builder, referenceDoc)

def Equipment_FullAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    Equipment_FullAddSrcTyps(builder, srcTyps)

def Equipment_FullStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return Equipment_FullStartSrcTypsVector(builder, numElems)

def Equipment_FullAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    Equipment_FullAddSrcIds(builder, srcIds)

def Equipment_FullStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return Equipment_FullStartSrcIdsVector(builder, numElems)

def Equipment_FullAddEquipmentRemarks(builder, equipmentRemarks):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentRemarks), 0)

def AddEquipmentRemarks(builder, equipmentRemarks):
    Equipment_FullAddEquipmentRemarks(builder, equipmentRemarks)

def Equipment_FullStartEquipmentRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEquipmentRemarksVector(builder, numElems):
    return Equipment_FullStartEquipmentRemarksVector(builder, numElems)

def Equipment_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Equipment_FullAddCreatedAt(builder, createdAt)

def Equipment_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Equipment_FullAddCreatedBy(builder, createdBy)

def Equipment_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Equipment_FullAddUpdatedAt(builder, updatedAt)

def Equipment_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Equipment_FullAddUpdatedBy(builder, updatedBy)

def Equipment_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Equipment_FullAddSource(builder, source)

def Equipment_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Equipment_FullAddOrigin(builder, origin)

def Equipment_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(55, dataMode, 0)

def AddDataMode(builder, dataMode):
    Equipment_FullAddDataMode(builder, dataMode)

def Equipment_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Equipment_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Equipment_FullT(object):

    # Equipment_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idParentEquipment = None  # type: str
        self.idSite = None  # type: str
        self.idOperatingUnit = None  # type: str
        self.altEqpId = None  # type: str
        self.eqpCode = None  # type: str
        self.eqpIdNum = None  # type: str
        self.countryCode = None  # type: str
        self.altCountryCode = None  # type: str
        self.wac = None  # type: str
        self.seqNum = 0  # type: int
        self.nomen = None  # type: str
        self.operStatus = None  # type: str
        self.condition = None  # type: str
        self.conditionAvail = None  # type: str
        self.eval = 0  # type: int
        self.fpa = None  # type: str
        self.function = None  # type: str
        self.ident = None  # type: str
        self.allegiance = None  # type: str
        self.altAllegiance = None  # type: str
        self.locReason = None  # type: str
        self.operAreaPrimary = None  # type: str
        self.functPrimary = None  # type: str
        self.coordDatum = None  # type: str
        self.coord = None  # type: str
        self.coordDerivAcc = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.elevMsl = 0.0  # type: float
        self.elevMslConfLvl = 0  # type: int
        self.elevMslDerivAcc = 0.0  # type: float
        self.geoidalMslSep = 0.0  # type: float
        self.milGridSys = None  # type: str
        self.milGrid = None  # type: str
        self.utm = None  # type: str
        self.airDefArea = None  # type: str
        self.polSubdiv = None  # type: str
        self.qtyOh = 0  # type: int
        self.symCode = None  # type: str
        self.classRating = None  # type: str
        self.recStatus = None  # type: str
        self.reviewDate = None  # type: str
        self.resProd = None  # type: str
        self.referenceDoc = None  # type: str
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.equipmentRemarks = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        equipmentFull = Equipment_Full()
        equipmentFull.Init(buf, pos)
        return cls.InitFromObj(equipmentFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, equipmentFull):
        x = Equipment_FullT()
        x._UnPack(equipmentFull)
        return x

    # Equipment_FullT
    def _UnPack(self, equipmentFull):
        if equipmentFull is None:
            return
        self.id = equipmentFull.Id()
        self.classificationMarking = equipmentFull.ClassificationMarking()
        self.idParentEquipment = equipmentFull.IdParentEquipment()
        self.idSite = equipmentFull.IdSite()
        self.idOperatingUnit = equipmentFull.IdOperatingUnit()
        self.altEqpId = equipmentFull.AltEqpId()
        self.eqpCode = equipmentFull.EqpCode()
        self.eqpIdNum = equipmentFull.EqpIdNum()
        self.countryCode = equipmentFull.CountryCode()
        self.altCountryCode = equipmentFull.AltCountryCode()
        self.wac = equipmentFull.Wac()
        self.seqNum = equipmentFull.SeqNum()
        self.nomen = equipmentFull.Nomen()
        self.operStatus = equipmentFull.OperStatus()
        self.condition = equipmentFull.Condition()
        self.conditionAvail = equipmentFull.ConditionAvail()
        self.eval = equipmentFull.Eval()
        self.fpa = equipmentFull.Fpa()
        self.function = equipmentFull.Function()
        self.ident = equipmentFull.Ident()
        self.allegiance = equipmentFull.Allegiance()
        self.altAllegiance = equipmentFull.AltAllegiance()
        self.locReason = equipmentFull.LocReason()
        self.operAreaPrimary = equipmentFull.OperAreaPrimary()
        self.functPrimary = equipmentFull.FunctPrimary()
        self.coordDatum = equipmentFull.CoordDatum()
        self.coord = equipmentFull.Coord()
        self.coordDerivAcc = equipmentFull.CoordDerivAcc()
        self.lat = equipmentFull.Lat()
        self.lon = equipmentFull.Lon()
        self.elevMsl = equipmentFull.ElevMsl()
        self.elevMslConfLvl = equipmentFull.ElevMslConfLvl()
        self.elevMslDerivAcc = equipmentFull.ElevMslDerivAcc()
        self.geoidalMslSep = equipmentFull.GeoidalMslSep()
        self.milGridSys = equipmentFull.MilGridSys()
        self.milGrid = equipmentFull.MilGrid()
        self.utm = equipmentFull.Utm()
        self.airDefArea = equipmentFull.AirDefArea()
        self.polSubdiv = equipmentFull.PolSubdiv()
        self.qtyOh = equipmentFull.QtyOh()
        self.symCode = equipmentFull.SymCode()
        self.classRating = equipmentFull.ClassRating()
        self.recStatus = equipmentFull.RecStatus()
        self.reviewDate = equipmentFull.ReviewDate()
        self.resProd = equipmentFull.ResProd()
        self.referenceDoc = equipmentFull.ReferenceDoc()
        if not equipmentFull.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(equipmentFull.SrcTypsLength()):
                self.srcTyps.append(equipmentFull.SrcTyps(i))
        if not equipmentFull.SrcIdsIsNone():
            self.srcIds = []
            for i in range(equipmentFull.SrcIdsLength()):
                self.srcIds.append(equipmentFull.SrcIds(i))
        if not equipmentFull.EquipmentRemarksIsNone():
            self.equipmentRemarks = []
            for i in range(equipmentFull.EquipmentRemarksLength()):
                self.equipmentRemarks.append(equipmentFull.EquipmentRemarks(i))
        self.createdAt = equipmentFull.CreatedAt()
        self.createdBy = equipmentFull.CreatedBy()
        self.updatedAt = equipmentFull.UpdatedAt()
        self.updatedBy = equipmentFull.UpdatedBy()
        self.source = equipmentFull.Source()
        self.origin = equipmentFull.Origin()
        self.dataMode = equipmentFull.DataMode()

    # Equipment_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idParentEquipment is not None:
            idParentEquipment = builder.CreateString(self.idParentEquipment)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.idOperatingUnit is not None:
            idOperatingUnit = builder.CreateString(self.idOperatingUnit)
        if self.altEqpId is not None:
            altEqpId = builder.CreateString(self.altEqpId)
        if self.eqpCode is not None:
            eqpCode = builder.CreateString(self.eqpCode)
        if self.eqpIdNum is not None:
            eqpIdNum = builder.CreateString(self.eqpIdNum)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.altCountryCode is not None:
            altCountryCode = builder.CreateString(self.altCountryCode)
        if self.wac is not None:
            wac = builder.CreateString(self.wac)
        if self.nomen is not None:
            nomen = builder.CreateString(self.nomen)
        if self.operStatus is not None:
            operStatus = builder.CreateString(self.operStatus)
        if self.condition is not None:
            condition = builder.CreateString(self.condition)
        if self.conditionAvail is not None:
            conditionAvail = builder.CreateString(self.conditionAvail)
        if self.fpa is not None:
            fpa = builder.CreateString(self.fpa)
        if self.function is not None:
            function = builder.CreateString(self.function)
        if self.ident is not None:
            ident = builder.CreateString(self.ident)
        if self.allegiance is not None:
            allegiance = builder.CreateString(self.allegiance)
        if self.altAllegiance is not None:
            altAllegiance = builder.CreateString(self.altAllegiance)
        if self.locReason is not None:
            locReason = builder.CreateString(self.locReason)
        if self.operAreaPrimary is not None:
            operAreaPrimary = builder.CreateString(self.operAreaPrimary)
        if self.functPrimary is not None:
            functPrimary = builder.CreateString(self.functPrimary)
        if self.coordDatum is not None:
            coordDatum = builder.CreateString(self.coordDatum)
        if self.coord is not None:
            coord = builder.CreateString(self.coord)
        if self.milGridSys is not None:
            milGridSys = builder.CreateString(self.milGridSys)
        if self.milGrid is not None:
            milGrid = builder.CreateString(self.milGrid)
        if self.utm is not None:
            utm = builder.CreateString(self.utm)
        if self.airDefArea is not None:
            airDefArea = builder.CreateString(self.airDefArea)
        if self.polSubdiv is not None:
            polSubdiv = builder.CreateString(self.polSubdiv)
        if self.symCode is not None:
            symCode = builder.CreateString(self.symCode)
        if self.classRating is not None:
            classRating = builder.CreateString(self.classRating)
        if self.recStatus is not None:
            recStatus = builder.CreateString(self.recStatus)
        if self.reviewDate is not None:
            reviewDate = builder.CreateString(self.reviewDate)
        if self.resProd is not None:
            resProd = builder.CreateString(self.resProd)
        if self.referenceDoc is not None:
            referenceDoc = builder.CreateString(self.referenceDoc)
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            Equipment_FullStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            Equipment_FullStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.equipmentRemarks is not None:
            equipmentRemarkslist = []
            for i in range(len(self.equipmentRemarks)):
                equipmentRemarkslist.append(builder.CreateString(self.equipmentRemarks[i]))
            Equipment_FullStartEquipmentRemarksVector(builder, len(self.equipmentRemarks))
            for i in reversed(range(len(self.equipmentRemarks))):
                builder.PrependUOffsetTRelative(equipmentRemarkslist[i])
            equipmentRemarks = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        Equipment_FullStart(builder)
        if self.id is not None:
            Equipment_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Equipment_FullAddClassificationMarking(builder, classificationMarking)
        if self.idParentEquipment is not None:
            Equipment_FullAddIdParentEquipment(builder, idParentEquipment)
        if self.idSite is not None:
            Equipment_FullAddIdSite(builder, idSite)
        if self.idOperatingUnit is not None:
            Equipment_FullAddIdOperatingUnit(builder, idOperatingUnit)
        if self.altEqpId is not None:
            Equipment_FullAddAltEqpId(builder, altEqpId)
        if self.eqpCode is not None:
            Equipment_FullAddEqpCode(builder, eqpCode)
        if self.eqpIdNum is not None:
            Equipment_FullAddEqpIdNum(builder, eqpIdNum)
        if self.countryCode is not None:
            Equipment_FullAddCountryCode(builder, countryCode)
        if self.altCountryCode is not None:
            Equipment_FullAddAltCountryCode(builder, altCountryCode)
        if self.wac is not None:
            Equipment_FullAddWac(builder, wac)
        Equipment_FullAddSeqNum(builder, self.seqNum)
        if self.nomen is not None:
            Equipment_FullAddNomen(builder, nomen)
        if self.operStatus is not None:
            Equipment_FullAddOperStatus(builder, operStatus)
        if self.condition is not None:
            Equipment_FullAddCondition(builder, condition)
        if self.conditionAvail is not None:
            Equipment_FullAddConditionAvail(builder, conditionAvail)
        Equipment_FullAddEval(builder, self.eval)
        if self.fpa is not None:
            Equipment_FullAddFpa(builder, fpa)
        if self.function is not None:
            Equipment_FullAddFunction(builder, function)
        if self.ident is not None:
            Equipment_FullAddIdent(builder, ident)
        if self.allegiance is not None:
            Equipment_FullAddAllegiance(builder, allegiance)
        if self.altAllegiance is not None:
            Equipment_FullAddAltAllegiance(builder, altAllegiance)
        if self.locReason is not None:
            Equipment_FullAddLocReason(builder, locReason)
        if self.operAreaPrimary is not None:
            Equipment_FullAddOperAreaPrimary(builder, operAreaPrimary)
        if self.functPrimary is not None:
            Equipment_FullAddFunctPrimary(builder, functPrimary)
        if self.coordDatum is not None:
            Equipment_FullAddCoordDatum(builder, coordDatum)
        if self.coord is not None:
            Equipment_FullAddCoord(builder, coord)
        Equipment_FullAddCoordDerivAcc(builder, self.coordDerivAcc)
        Equipment_FullAddLat(builder, self.lat)
        Equipment_FullAddLon(builder, self.lon)
        Equipment_FullAddElevMsl(builder, self.elevMsl)
        Equipment_FullAddElevMslConfLvl(builder, self.elevMslConfLvl)
        Equipment_FullAddElevMslDerivAcc(builder, self.elevMslDerivAcc)
        Equipment_FullAddGeoidalMslSep(builder, self.geoidalMslSep)
        if self.milGridSys is not None:
            Equipment_FullAddMilGridSys(builder, milGridSys)
        if self.milGrid is not None:
            Equipment_FullAddMilGrid(builder, milGrid)
        if self.utm is not None:
            Equipment_FullAddUtm(builder, utm)
        if self.airDefArea is not None:
            Equipment_FullAddAirDefArea(builder, airDefArea)
        if self.polSubdiv is not None:
            Equipment_FullAddPolSubdiv(builder, polSubdiv)
        Equipment_FullAddQtyOh(builder, self.qtyOh)
        if self.symCode is not None:
            Equipment_FullAddSymCode(builder, symCode)
        if self.classRating is not None:
            Equipment_FullAddClassRating(builder, classRating)
        if self.recStatus is not None:
            Equipment_FullAddRecStatus(builder, recStatus)
        if self.reviewDate is not None:
            Equipment_FullAddReviewDate(builder, reviewDate)
        if self.resProd is not None:
            Equipment_FullAddResProd(builder, resProd)
        if self.referenceDoc is not None:
            Equipment_FullAddReferenceDoc(builder, referenceDoc)
        if self.srcTyps is not None:
            Equipment_FullAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            Equipment_FullAddSrcIds(builder, srcIds)
        if self.equipmentRemarks is not None:
            Equipment_FullAddEquipmentRemarks(builder, equipmentRemarks)
        if self.createdAt is not None:
            Equipment_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Equipment_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Equipment_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Equipment_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            Equipment_FullAddSource(builder, source)
        if self.origin is not None:
            Equipment_FullAddOrigin(builder, origin)
        Equipment_FullAddDataMode(builder, self.dataMode)
        equipmentFull = Equipment_FullEnd(builder)
        return equipmentFull
