# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
class WeatherReport_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WeatherReport_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWeatherReport_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def WeatherReport_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x57\x45\x41\x54", size_prefixed=size_prefixed)

    # WeatherReport_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: WEATHER-REPORT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # WeatherReport_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # WeatherReport_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the sensor making the weather measurement.
    # Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherReport_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # WeatherReport_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
    # Example: /// Example: WEATHER-ID
    # Constraints: Minimum length = 0, Maximum length = 128
    # WeatherReport_Ingest
    def WeatherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the ground imagery associated for this weather over target report.
    # Example: /// Example: GROUND-IMAGERY-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherReport_Ingest
    def IdGroundImagery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the Site that is associated with this weather report.
    # Example: /// Example: AIRFIELD-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherReport_Ingest
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the Airfield associated with this weather report.
    # Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherReport_Ingest
    def IdAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
    # Example: /// Example: KAFF
    # Constraints: Minimum length = 0, Maximum length = 4
    # WeatherReport_Ingest
    def Icao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: GDSSMB022408301601304517
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherReport_Ingest
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: TMDS060AD4OG03CC
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherReport_Ingest
    def ExternalLocationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
    # Example: /// Example: FORECAST
    # Constraints: Minimum length = 1, Maximum length = 32
    # WeatherReport_Ingest
    def ReportType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    # Example: /// Example: 2024-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def ForecastStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
    # Example: /// Example: 2024-01-01T18:00:00.123Z
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def ForecastEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 56.12
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -156.6
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Point height above ellipsoid (WGS-84), in meters.
    # Example: /// Example: 123.12
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
    # Example: /// Example: 1000.0
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def GeoPotentialAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
    # Example: /// Example: MANDATORY
    # Constraints: Minimum length = 0, Maximum length = 16
    # WeatherReport_Ingest
    def DataLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: ST_Polygon
    # Constraints: Minimum length = 0, Maximum length = 128
    # WeatherReport_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 4326
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Expresses the speed of the wind in meters/second.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindSpd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average wind speed over a 1 minute period, in meters/second.
    # Example: /// Example: 12.1
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindSpdAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expresses the max gust speed of the wind, in meters/second.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindGust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
    # Example: /// Example: 13.2
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindGust10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
    # Example: /// Example: 3.8
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Vshear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
    # Example: /// Example: 3.8
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Hshear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
    # Example: /// Example: -0.04
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RadVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    # Example: /// Example: 4.4
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RadVelBeam1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    # Example: /// Example: -0.2
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RadVelBeam2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    # Example: /// Example: -0.2
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RadVelBeam3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    # Example: /// Example: 11.4
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RadVelBeam4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
    # Example: /// Example: 4.1
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RadVelBeam5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Direction the wind is blowing, in degrees clockwise from true north.
    # Example: /// Example: 75.1234
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average wind direction over a 1 minute period, in degrees clockwise from true north.
    # Example: /// Example: 57.1
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindDirAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
    # Example: /// Example: 78.4
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindDirPeak(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
    # Example: /// Example: 44.5
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindDirPeak10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The perceived temperature in degrees C.
    # Example: /// Example: 15.6
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindChill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The difference in wind direction recorded over a period of time, in degrees.
    # Example: /// Example: 9.1
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def DirDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Boolean describing whether or not the wind direction and/or speed is variable.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindVar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
    # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
    # x&nbsp;&nbsp;&nbsp;&nbsp;1
    # y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    # The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def WindCov(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherReport_Ingest
    def WindCovLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherReport_Ingest
    def WindCovIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        return o == 0

    # Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
    # Example: /// Example: ['OVERCAST', 'BROKEN']
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def CloudCover(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherReport_Ingest
    def CloudCoverLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherReport_Ingest
    def CloudCoverIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
    # Example: /// Example: [1.2, 2.2]
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def CloudHght(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherReport_Ingest
    def CloudHghtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherReport_Ingest
    def CloudHghtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

    # Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
    # Example: /// Example: NO STATEMENT
    # Constraints: Minimum length = 0, Maximum length = 32
    # WeatherReport_Ingest
    def ActWeather(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
    # Example: /// Example: NO STATEMENT
    # Constraints: Minimum length = 0, Maximum length = 32
    # WeatherReport_Ingest
    def WeatherDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
    # Example: /// Example: NO STATEMENT
    # Constraints: Minimum length = 0, Maximum length = 32
    # WeatherReport_Ingest
    def WeatherInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Raw Meteorological Aerodrome Report (METAR) string.
    # Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
    # Constraints: Minimum length = 0, Maximum length = 512
    # WeatherReport_Ingest
    def RawMetar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
    # Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
    # Constraints: Minimum length = 0, Maximum length = 1024
    # WeatherReport_Ingest
    def RawTaf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Altimeter set to read zero at mean sea level in kilopascals.
    # Example: /// Example: 1234.456
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Qnh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Visual distance in meters.
    # Example: /// Example: 1234.456
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Visibility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The measurement of air temperature in degrees C.
    # Example: /// Example: 23.45
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Temperature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The measurement of soil temperature in degrees C.
    # Example: /// Example: 22.4
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def SoilTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The measurement of air pressure in the atmosphere in kilopascals.
    # Example: /// Example: 101.2
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def BarPress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The speed at which water is being applied to a specific area in millimeters per hour.
    # Example: /// Example: 3.4
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def PrecipRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of rain that has fallen in the past hour, in centimeters.
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RainHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
    # Example: /// Example: 1234.456
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def SolarRad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
    # Example: /// Example: 234.5
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def DifRad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
    # Example: /// Example: 56.7
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RefRad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
    # Example: /// Example: 12.456
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
    # Example: /// Example: 123.456
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The temperature at which air is saturated with water vapor, in degrees C.
    # Example: /// Example: 15.6
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def DewPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The percentage of water vapor in the atmosphere.
    # Example: /// Example: 34.456
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def RelHumidity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # An indication of how much the atmosphere refracts light.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def IndexRefraction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The volumetric percentage of soil water contained in a given volume of soil.
    # Example: /// Example: 3.5
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def SoilMoisture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
    # Example: /// Example: NO STATEMENT
    # Constraints: Minimum length = 0, Maximum length = 32
    # WeatherReport_Ingest
    def SurroundingWeather(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
    # Example: /// Example: NO STATEMENT
    # Constraints: Minimum length = 0, Maximum length = 32
    # WeatherReport_Ingest
    def WeatherAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reports the lowest altitude at which contrails are occurring, in meters.
    # Example: /// Example: 123.123
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def ContrailHghtLower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Reports the highest altitude at which contrails are occurring, in meters.
    # Example: /// Example: 123.123
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def ContrailHghtUpper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Reports the highest altitude at which icing or freezing rain is occurring, in meters.
    # Example: /// Example: 123.123
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def IcingUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
    # Example: /// Example: 123.123
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def IcingLowerLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
    # MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
    # MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
    # THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
    # Example: /// Example: THUNDERSTORMS
    # Constraints: Minimum length = 0, Maximum length = 32
    # WeatherReport_Ingest
    def EnRouteWeather(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating detection of a cloud-to-cloud lightning event.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def CcEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['SENSOR', 'WEATHERDATA']
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherReport_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherReport_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        return o == 0

    # Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    # Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherReport_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherReport_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # WeatherReport_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # WeatherReport_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # WeatherReport_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # WeatherReport_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # WeatherReport_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # WeatherReport_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def WeatherReport_IngestStart(builder):
    builder.StartObject(86)

def Start(builder):
    WeatherReport_IngestStart(builder)

def WeatherReport_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    WeatherReport_IngestAddId(builder, id)

def WeatherReport_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    WeatherReport_IngestAddClassificationMarking(builder, classificationMarking)

def WeatherReport_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    WeatherReport_IngestAddIdSensor(builder, idSensor)

def WeatherReport_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    WeatherReport_IngestAddOrigSensorId(builder, origSensorId)

def WeatherReport_IngestAddWeatherId(builder, weatherId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(weatherId), 0)

def AddWeatherId(builder, weatherId):
    WeatherReport_IngestAddWeatherId(builder, weatherId)

def WeatherReport_IngestAddIdGroundImagery(builder, idGroundImagery):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idGroundImagery), 0)

def AddIdGroundImagery(builder, idGroundImagery):
    WeatherReport_IngestAddIdGroundImagery(builder, idGroundImagery)

def WeatherReport_IngestAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    WeatherReport_IngestAddIdSite(builder, idSite)

def WeatherReport_IngestAddIdAirfield(builder, idAirfield):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idAirfield), 0)

def AddIdAirfield(builder, idAirfield):
    WeatherReport_IngestAddIdAirfield(builder, idAirfield)

def WeatherReport_IngestAddIcao(builder, icao):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(icao), 0)

def AddIcao(builder, icao):
    WeatherReport_IngestAddIcao(builder, icao)

def WeatherReport_IngestAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    WeatherReport_IngestAddExternalId(builder, externalId)

def WeatherReport_IngestAddExternalLocationId(builder, externalLocationId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(externalLocationId), 0)

def AddExternalLocationId(builder, externalLocationId):
    WeatherReport_IngestAddExternalLocationId(builder, externalLocationId)

def WeatherReport_IngestAddReportType(builder, reportType):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(reportType), 0)

def AddReportType(builder, reportType):
    WeatherReport_IngestAddReportType(builder, reportType)

def WeatherReport_IngestAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    WeatherReport_IngestAddObTime(builder, obTime)

def WeatherReport_IngestAddForecastStartTime(builder, forecastStartTime):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(forecastStartTime), 0)

def AddForecastStartTime(builder, forecastStartTime):
    WeatherReport_IngestAddForecastStartTime(builder, forecastStartTime)

def WeatherReport_IngestAddForecastEndTime(builder, forecastEndTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(forecastEndTime), 0)

def AddForecastEndTime(builder, forecastEndTime):
    WeatherReport_IngestAddForecastEndTime(builder, forecastEndTime)

def WeatherReport_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(15, lat, 0.0)

def AddLat(builder, lat):
    WeatherReport_IngestAddLat(builder, lat)

def WeatherReport_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(16, lon, 0.0)

def AddLon(builder, lon):
    WeatherReport_IngestAddLon(builder, lon)

def WeatherReport_IngestAddAlt(builder, alt):
    builder.PrependFloat64Slot(17, alt, 0.0)

def AddAlt(builder, alt):
    WeatherReport_IngestAddAlt(builder, alt)

def WeatherReport_IngestAddGeoPotentialAlt(builder, geoPotentialAlt):
    builder.PrependFloat64Slot(18, geoPotentialAlt, 0.0)

def AddGeoPotentialAlt(builder, geoPotentialAlt):
    WeatherReport_IngestAddGeoPotentialAlt(builder, geoPotentialAlt)

def WeatherReport_IngestAddDataLevel(builder, dataLevel):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(dataLevel), 0)

def AddDataLevel(builder, dataLevel):
    WeatherReport_IngestAddDataLevel(builder, dataLevel)

def WeatherReport_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    WeatherReport_IngestAddArea(builder, area)

def WeatherReport_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    WeatherReport_IngestAddAtext(builder, atext)

def WeatherReport_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    WeatherReport_IngestAddAgjson(builder, agjson)

def WeatherReport_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    WeatherReport_IngestAddAtype(builder, atype)

def WeatherReport_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(24, andims, 0)

def AddAndims(builder, andims):
    WeatherReport_IngestAddAndims(builder, andims)

def WeatherReport_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(25, asrid, 0)

def AddAsrid(builder, asrid):
    WeatherReport_IngestAddAsrid(builder, asrid)

def WeatherReport_IngestAddWindSpd(builder, windSpd):
    builder.PrependFloat64Slot(26, windSpd, 0.0)

def AddWindSpd(builder, windSpd):
    WeatherReport_IngestAddWindSpd(builder, windSpd)

def WeatherReport_IngestAddWindSpdAvg(builder, windSpdAvg):
    builder.PrependFloat64Slot(27, windSpdAvg, 0.0)

def AddWindSpdAvg(builder, windSpdAvg):
    WeatherReport_IngestAddWindSpdAvg(builder, windSpdAvg)

def WeatherReport_IngestAddWindGust(builder, windGust):
    builder.PrependFloat64Slot(28, windGust, 0.0)

def AddWindGust(builder, windGust):
    WeatherReport_IngestAddWindGust(builder, windGust)

def WeatherReport_IngestAddWindGust10(builder, windGust10):
    builder.PrependFloat64Slot(29, windGust10, 0.0)

def AddWindGust10(builder, windGust10):
    WeatherReport_IngestAddWindGust10(builder, windGust10)

def WeatherReport_IngestAddVshear(builder, vshear):
    builder.PrependFloat64Slot(30, vshear, 0.0)

def AddVshear(builder, vshear):
    WeatherReport_IngestAddVshear(builder, vshear)

def WeatherReport_IngestAddHshear(builder, hshear):
    builder.PrependFloat64Slot(31, hshear, 0.0)

def AddHshear(builder, hshear):
    WeatherReport_IngestAddHshear(builder, hshear)

def WeatherReport_IngestAddRadVel(builder, radVel):
    builder.PrependFloat64Slot(32, radVel, 0.0)

def AddRadVel(builder, radVel):
    WeatherReport_IngestAddRadVel(builder, radVel)

def WeatherReport_IngestAddRadVelBeam1(builder, radVelBeam1):
    builder.PrependFloat64Slot(33, radVelBeam1, 0.0)

def AddRadVelBeam1(builder, radVelBeam1):
    WeatherReport_IngestAddRadVelBeam1(builder, radVelBeam1)

def WeatherReport_IngestAddRadVelBeam2(builder, radVelBeam2):
    builder.PrependFloat64Slot(34, radVelBeam2, 0.0)

def AddRadVelBeam2(builder, radVelBeam2):
    WeatherReport_IngestAddRadVelBeam2(builder, radVelBeam2)

def WeatherReport_IngestAddRadVelBeam3(builder, radVelBeam3):
    builder.PrependFloat64Slot(35, radVelBeam3, 0.0)

def AddRadVelBeam3(builder, radVelBeam3):
    WeatherReport_IngestAddRadVelBeam3(builder, radVelBeam3)

def WeatherReport_IngestAddRadVelBeam4(builder, radVelBeam4):
    builder.PrependFloat64Slot(36, radVelBeam4, 0.0)

def AddRadVelBeam4(builder, radVelBeam4):
    WeatherReport_IngestAddRadVelBeam4(builder, radVelBeam4)

def WeatherReport_IngestAddRadVelBeam5(builder, radVelBeam5):
    builder.PrependFloat64Slot(37, radVelBeam5, 0.0)

def AddRadVelBeam5(builder, radVelBeam5):
    WeatherReport_IngestAddRadVelBeam5(builder, radVelBeam5)

def WeatherReport_IngestAddWindDir(builder, windDir):
    builder.PrependFloat64Slot(38, windDir, 0.0)

def AddWindDir(builder, windDir):
    WeatherReport_IngestAddWindDir(builder, windDir)

def WeatherReport_IngestAddWindDirAvg(builder, windDirAvg):
    builder.PrependFloat64Slot(39, windDirAvg, 0.0)

def AddWindDirAvg(builder, windDirAvg):
    WeatherReport_IngestAddWindDirAvg(builder, windDirAvg)

def WeatherReport_IngestAddWindDirPeak(builder, windDirPeak):
    builder.PrependFloat64Slot(40, windDirPeak, 0.0)

def AddWindDirPeak(builder, windDirPeak):
    WeatherReport_IngestAddWindDirPeak(builder, windDirPeak)

def WeatherReport_IngestAddWindDirPeak10(builder, windDirPeak10):
    builder.PrependFloat64Slot(41, windDirPeak10, 0.0)

def AddWindDirPeak10(builder, windDirPeak10):
    WeatherReport_IngestAddWindDirPeak10(builder, windDirPeak10)

def WeatherReport_IngestAddWindChill(builder, windChill):
    builder.PrependFloat64Slot(42, windChill, 0.0)

def AddWindChill(builder, windChill):
    WeatherReport_IngestAddWindChill(builder, windChill)

def WeatherReport_IngestAddDirDev(builder, dirDev):
    builder.PrependFloat64Slot(43, dirDev, 0.0)

def AddDirDev(builder, dirDev):
    WeatherReport_IngestAddDirDev(builder, dirDev)

def WeatherReport_IngestAddWindVar(builder, windVar):
    builder.PrependBoolSlot(44, windVar, 0)

def AddWindVar(builder, windVar):
    WeatherReport_IngestAddWindVar(builder, windVar)

def WeatherReport_IngestAddWindCov(builder, windCov):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(windCov), 0)

def AddWindCov(builder, windCov):
    WeatherReport_IngestAddWindCov(builder, windCov)

def WeatherReport_IngestStartWindCovVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWindCovVector(builder, numElems):
    return WeatherReport_IngestStartWindCovVector(builder, numElems)

def WeatherReport_IngestAddCloudCover(builder, cloudCover):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(cloudCover), 0)

def AddCloudCover(builder, cloudCover):
    WeatherReport_IngestAddCloudCover(builder, cloudCover)

def WeatherReport_IngestStartCloudCoverVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCloudCoverVector(builder, numElems):
    return WeatherReport_IngestStartCloudCoverVector(builder, numElems)

def WeatherReport_IngestAddCloudHght(builder, cloudHght):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(cloudHght), 0)

def AddCloudHght(builder, cloudHght):
    WeatherReport_IngestAddCloudHght(builder, cloudHght)

def WeatherReport_IngestStartCloudHghtVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCloudHghtVector(builder, numElems):
    return WeatherReport_IngestStartCloudHghtVector(builder, numElems)

def WeatherReport_IngestAddActWeather(builder, actWeather):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(actWeather), 0)

def AddActWeather(builder, actWeather):
    WeatherReport_IngestAddActWeather(builder, actWeather)

def WeatherReport_IngestAddWeatherDesc(builder, weatherDesc):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(weatherDesc), 0)

def AddWeatherDesc(builder, weatherDesc):
    WeatherReport_IngestAddWeatherDesc(builder, weatherDesc)

def WeatherReport_IngestAddWeatherInt(builder, weatherInt):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(weatherInt), 0)

def AddWeatherInt(builder, weatherInt):
    WeatherReport_IngestAddWeatherInt(builder, weatherInt)

def WeatherReport_IngestAddRawMetar(builder, rawMetar):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(rawMetar), 0)

def AddRawMetar(builder, rawMetar):
    WeatherReport_IngestAddRawMetar(builder, rawMetar)

def WeatherReport_IngestAddRawTaf(builder, rawTaf):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(rawTaf), 0)

def AddRawTaf(builder, rawTaf):
    WeatherReport_IngestAddRawTaf(builder, rawTaf)

def WeatherReport_IngestAddQnh(builder, qnh):
    builder.PrependFloat64Slot(53, qnh, 0.0)

def AddQnh(builder, qnh):
    WeatherReport_IngestAddQnh(builder, qnh)

def WeatherReport_IngestAddVisibility(builder, visibility):
    builder.PrependFloat64Slot(54, visibility, 0.0)

def AddVisibility(builder, visibility):
    WeatherReport_IngestAddVisibility(builder, visibility)

def WeatherReport_IngestAddTemperature(builder, temperature):
    builder.PrependFloat64Slot(55, temperature, 0.0)

def AddTemperature(builder, temperature):
    WeatherReport_IngestAddTemperature(builder, temperature)

def WeatherReport_IngestAddSoilTemp(builder, soilTemp):
    builder.PrependFloat64Slot(56, soilTemp, 0.0)

def AddSoilTemp(builder, soilTemp):
    WeatherReport_IngestAddSoilTemp(builder, soilTemp)

def WeatherReport_IngestAddBarPress(builder, barPress):
    builder.PrependFloat64Slot(57, barPress, 0.0)

def AddBarPress(builder, barPress):
    WeatherReport_IngestAddBarPress(builder, barPress)

def WeatherReport_IngestAddPrecipRate(builder, precipRate):
    builder.PrependFloat64Slot(58, precipRate, 0.0)

def AddPrecipRate(builder, precipRate):
    WeatherReport_IngestAddPrecipRate(builder, precipRate)

def WeatherReport_IngestAddRainHour(builder, rainHour):
    builder.PrependFloat64Slot(59, rainHour, 0.0)

def AddRainHour(builder, rainHour):
    WeatherReport_IngestAddRainHour(builder, rainHour)

def WeatherReport_IngestAddSolarRad(builder, solarRad):
    builder.PrependFloat64Slot(60, solarRad, 0.0)

def AddSolarRad(builder, solarRad):
    WeatherReport_IngestAddSolarRad(builder, solarRad)

def WeatherReport_IngestAddDifRad(builder, difRad):
    builder.PrependFloat64Slot(61, difRad, 0.0)

def AddDifRad(builder, difRad):
    WeatherReport_IngestAddDifRad(builder, difRad)

def WeatherReport_IngestAddRefRad(builder, refRad):
    builder.PrependFloat64Slot(62, refRad, 0.0)

def AddRefRad(builder, refRad):
    WeatherReport_IngestAddRefRad(builder, refRad)

def WeatherReport_IngestAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(63, senlat, 0.0)

def AddSenlat(builder, senlat):
    WeatherReport_IngestAddSenlat(builder, senlat)

def WeatherReport_IngestAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(64, senlon, 0.0)

def AddSenlon(builder, senlon):
    WeatherReport_IngestAddSenlon(builder, senlon)

def WeatherReport_IngestAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(65, senalt, 0.0)

def AddSenalt(builder, senalt):
    WeatherReport_IngestAddSenalt(builder, senalt)

def WeatherReport_IngestAddDewPoint(builder, dewPoint):
    builder.PrependFloat64Slot(66, dewPoint, 0.0)

def AddDewPoint(builder, dewPoint):
    WeatherReport_IngestAddDewPoint(builder, dewPoint)

def WeatherReport_IngestAddRelHumidity(builder, relHumidity):
    builder.PrependFloat64Slot(67, relHumidity, 0.0)

def AddRelHumidity(builder, relHumidity):
    WeatherReport_IngestAddRelHumidity(builder, relHumidity)

def WeatherReport_IngestAddIndexRefraction(builder, indexRefraction):
    builder.PrependFloat64Slot(68, indexRefraction, 0.0)

def AddIndexRefraction(builder, indexRefraction):
    WeatherReport_IngestAddIndexRefraction(builder, indexRefraction)

def WeatherReport_IngestAddSoilMoisture(builder, soilMoisture):
    builder.PrependFloat64Slot(69, soilMoisture, 0.0)

def AddSoilMoisture(builder, soilMoisture):
    WeatherReport_IngestAddSoilMoisture(builder, soilMoisture)

def WeatherReport_IngestAddSurroundingWeather(builder, surroundingWeather):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(surroundingWeather), 0)

def AddSurroundingWeather(builder, surroundingWeather):
    WeatherReport_IngestAddSurroundingWeather(builder, surroundingWeather)

def WeatherReport_IngestAddWeatherAmp(builder, weatherAmp):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(weatherAmp), 0)

def AddWeatherAmp(builder, weatherAmp):
    WeatherReport_IngestAddWeatherAmp(builder, weatherAmp)

def WeatherReport_IngestAddContrailHghtLower(builder, contrailHghtLower):
    builder.PrependFloat64Slot(72, contrailHghtLower, 0.0)

def AddContrailHghtLower(builder, contrailHghtLower):
    WeatherReport_IngestAddContrailHghtLower(builder, contrailHghtLower)

def WeatherReport_IngestAddContrailHghtUpper(builder, contrailHghtUpper):
    builder.PrependFloat64Slot(73, contrailHghtUpper, 0.0)

def AddContrailHghtUpper(builder, contrailHghtUpper):
    WeatherReport_IngestAddContrailHghtUpper(builder, contrailHghtUpper)

def WeatherReport_IngestAddIcingUpperLimit(builder, icingUpperLimit):
    builder.PrependFloat64Slot(74, icingUpperLimit, 0.0)

def AddIcingUpperLimit(builder, icingUpperLimit):
    WeatherReport_IngestAddIcingUpperLimit(builder, icingUpperLimit)

def WeatherReport_IngestAddIcingLowerLimit(builder, icingLowerLimit):
    builder.PrependFloat64Slot(75, icingLowerLimit, 0.0)

def AddIcingLowerLimit(builder, icingLowerLimit):
    WeatherReport_IngestAddIcingLowerLimit(builder, icingLowerLimit)

def WeatherReport_IngestAddEnRouteWeather(builder, enRouteWeather):
    builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(enRouteWeather), 0)

def AddEnRouteWeather(builder, enRouteWeather):
    WeatherReport_IngestAddEnRouteWeather(builder, enRouteWeather)

def WeatherReport_IngestAddCcEvent(builder, ccEvent):
    builder.PrependBoolSlot(77, ccEvent, 0)

def AddCcEvent(builder, ccEvent):
    WeatherReport_IngestAddCcEvent(builder, ccEvent)

def WeatherReport_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    WeatherReport_IngestAddSrcTyps(builder, srcTyps)

def WeatherReport_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return WeatherReport_IngestStartSrcTypsVector(builder, numElems)

def WeatherReport_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    WeatherReport_IngestAddSrcIds(builder, srcIds)

def WeatherReport_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return WeatherReport_IngestStartSrcIdsVector(builder, numElems)

def WeatherReport_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    WeatherReport_IngestAddOrigNetwork(builder, origNetwork)

def WeatherReport_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    WeatherReport_IngestAddCreatedAt(builder, createdAt)

def WeatherReport_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    WeatherReport_IngestAddCreatedBy(builder, createdBy)

def WeatherReport_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    WeatherReport_IngestAddSource(builder, source)

def WeatherReport_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    WeatherReport_IngestAddOrigin(builder, origin)

def WeatherReport_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(85, dataMode, 0)

def AddDataMode(builder, dataMode):
    WeatherReport_IngestAddDataMode(builder, dataMode)

def WeatherReport_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return WeatherReport_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class WeatherReport_IngestT(object):

    # WeatherReport_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.weatherId = None  # type: str
        self.idGroundImagery = None  # type: str
        self.idSite = None  # type: str
        self.idAirfield = None  # type: str
        self.icao = None  # type: str
        self.externalId = None  # type: str
        self.externalLocationId = None  # type: str
        self.reportType = None  # type: str
        self.obTime = None  # type: str
        self.forecastStartTime = None  # type: str
        self.forecastEndTime = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.geoPotentialAlt = 0.0  # type: float
        self.dataLevel = None  # type: str
        self.area = None  # type: str
        self.atext = None  # type: str
        self.agjson = None  # type: str
        self.atype = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.windSpd = 0.0  # type: float
        self.windSpdAvg = 0.0  # type: float
        self.windGust = 0.0  # type: float
        self.windGust10 = 0.0  # type: float
        self.vshear = 0.0  # type: float
        self.hshear = 0.0  # type: float
        self.radVel = 0.0  # type: float
        self.radVelBeam1 = 0.0  # type: float
        self.radVelBeam2 = 0.0  # type: float
        self.radVelBeam3 = 0.0  # type: float
        self.radVelBeam4 = 0.0  # type: float
        self.radVelBeam5 = 0.0  # type: float
        self.windDir = 0.0  # type: float
        self.windDirAvg = 0.0  # type: float
        self.windDirPeak = 0.0  # type: float
        self.windDirPeak10 = 0.0  # type: float
        self.windChill = 0.0  # type: float
        self.dirDev = 0.0  # type: float
        self.windVar = False  # type: bool
        self.windCov = None  # type: List[str]
        self.cloudCover = None  # type: List[str]
        self.cloudHght = None  # type: List[str]
        self.actWeather = None  # type: str
        self.weatherDesc = None  # type: str
        self.weatherInt = None  # type: str
        self.rawMetar = None  # type: str
        self.rawTaf = None  # type: str
        self.qnh = 0.0  # type: float
        self.visibility = 0.0  # type: float
        self.temperature = 0.0  # type: float
        self.soilTemp = 0.0  # type: float
        self.barPress = 0.0  # type: float
        self.precipRate = 0.0  # type: float
        self.rainHour = 0.0  # type: float
        self.solarRad = 0.0  # type: float
        self.difRad = 0.0  # type: float
        self.refRad = 0.0  # type: float
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.dewPoint = 0.0  # type: float
        self.relHumidity = 0.0  # type: float
        self.indexRefraction = 0.0  # type: float
        self.soilMoisture = 0.0  # type: float
        self.surroundingWeather = None  # type: str
        self.weatherAmp = None  # type: str
        self.contrailHghtLower = 0.0  # type: float
        self.contrailHghtUpper = 0.0  # type: float
        self.icingUpperLimit = 0.0  # type: float
        self.icingLowerLimit = 0.0  # type: float
        self.enRouteWeather = None  # type: str
        self.ccEvent = False  # type: bool
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        weatherReportIngest = WeatherReport_Ingest()
        weatherReportIngest.Init(buf, pos)
        return cls.InitFromObj(weatherReportIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, weatherReportIngest):
        x = WeatherReport_IngestT()
        x._UnPack(weatherReportIngest)
        return x

    # WeatherReport_IngestT
    def _UnPack(self, weatherReportIngest):
        if weatherReportIngest is None:
            return
        self.id = weatherReportIngest.Id()
        self.classificationMarking = weatherReportIngest.ClassificationMarking()
        self.idSensor = weatherReportIngest.IdSensor()
        self.origSensorId = weatherReportIngest.OrigSensorId()
        self.weatherId = weatherReportIngest.WeatherId()
        self.idGroundImagery = weatherReportIngest.IdGroundImagery()
        self.idSite = weatherReportIngest.IdSite()
        self.idAirfield = weatherReportIngest.IdAirfield()
        self.icao = weatherReportIngest.Icao()
        self.externalId = weatherReportIngest.ExternalId()
        self.externalLocationId = weatherReportIngest.ExternalLocationId()
        self.reportType = weatherReportIngest.ReportType()
        self.obTime = weatherReportIngest.ObTime()
        self.forecastStartTime = weatherReportIngest.ForecastStartTime()
        self.forecastEndTime = weatherReportIngest.ForecastEndTime()
        self.lat = weatherReportIngest.Lat()
        self.lon = weatherReportIngest.Lon()
        self.alt = weatherReportIngest.Alt()
        self.geoPotentialAlt = weatherReportIngest.GeoPotentialAlt()
        self.dataLevel = weatherReportIngest.DataLevel()
        self.area = weatherReportIngest.Area()
        self.atext = weatherReportIngest.Atext()
        self.agjson = weatherReportIngest.Agjson()
        self.atype = weatherReportIngest.Atype()
        self.andims = weatherReportIngest.Andims()
        self.asrid = weatherReportIngest.Asrid()
        self.windSpd = weatherReportIngest.WindSpd()
        self.windSpdAvg = weatherReportIngest.WindSpdAvg()
        self.windGust = weatherReportIngest.WindGust()
        self.windGust10 = weatherReportIngest.WindGust10()
        self.vshear = weatherReportIngest.Vshear()
        self.hshear = weatherReportIngest.Hshear()
        self.radVel = weatherReportIngest.RadVel()
        self.radVelBeam1 = weatherReportIngest.RadVelBeam1()
        self.radVelBeam2 = weatherReportIngest.RadVelBeam2()
        self.radVelBeam3 = weatherReportIngest.RadVelBeam3()
        self.radVelBeam4 = weatherReportIngest.RadVelBeam4()
        self.radVelBeam5 = weatherReportIngest.RadVelBeam5()
        self.windDir = weatherReportIngest.WindDir()
        self.windDirAvg = weatherReportIngest.WindDirAvg()
        self.windDirPeak = weatherReportIngest.WindDirPeak()
        self.windDirPeak10 = weatherReportIngest.WindDirPeak10()
        self.windChill = weatherReportIngest.WindChill()
        self.dirDev = weatherReportIngest.DirDev()
        self.windVar = weatherReportIngest.WindVar()
        if not weatherReportIngest.WindCovIsNone():
            self.windCov = []
            for i in range(weatherReportIngest.WindCovLength()):
                self.windCov.append(weatherReportIngest.WindCov(i))
        if not weatherReportIngest.CloudCoverIsNone():
            self.cloudCover = []
            for i in range(weatherReportIngest.CloudCoverLength()):
                self.cloudCover.append(weatherReportIngest.CloudCover(i))
        if not weatherReportIngest.CloudHghtIsNone():
            self.cloudHght = []
            for i in range(weatherReportIngest.CloudHghtLength()):
                self.cloudHght.append(weatherReportIngest.CloudHght(i))
        self.actWeather = weatherReportIngest.ActWeather()
        self.weatherDesc = weatherReportIngest.WeatherDesc()
        self.weatherInt = weatherReportIngest.WeatherInt()
        self.rawMetar = weatherReportIngest.RawMetar()
        self.rawTaf = weatherReportIngest.RawTaf()
        self.qnh = weatherReportIngest.Qnh()
        self.visibility = weatherReportIngest.Visibility()
        self.temperature = weatherReportIngest.Temperature()
        self.soilTemp = weatherReportIngest.SoilTemp()
        self.barPress = weatherReportIngest.BarPress()
        self.precipRate = weatherReportIngest.PrecipRate()
        self.rainHour = weatherReportIngest.RainHour()
        self.solarRad = weatherReportIngest.SolarRad()
        self.difRad = weatherReportIngest.DifRad()
        self.refRad = weatherReportIngest.RefRad()
        self.senlat = weatherReportIngest.Senlat()
        self.senlon = weatherReportIngest.Senlon()
        self.senalt = weatherReportIngest.Senalt()
        self.dewPoint = weatherReportIngest.DewPoint()
        self.relHumidity = weatherReportIngest.RelHumidity()
        self.indexRefraction = weatherReportIngest.IndexRefraction()
        self.soilMoisture = weatherReportIngest.SoilMoisture()
        self.surroundingWeather = weatherReportIngest.SurroundingWeather()
        self.weatherAmp = weatherReportIngest.WeatherAmp()
        self.contrailHghtLower = weatherReportIngest.ContrailHghtLower()
        self.contrailHghtUpper = weatherReportIngest.ContrailHghtUpper()
        self.icingUpperLimit = weatherReportIngest.IcingUpperLimit()
        self.icingLowerLimit = weatherReportIngest.IcingLowerLimit()
        self.enRouteWeather = weatherReportIngest.EnRouteWeather()
        self.ccEvent = weatherReportIngest.CcEvent()
        if not weatherReportIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(weatherReportIngest.SrcTypsLength()):
                self.srcTyps.append(weatherReportIngest.SrcTyps(i))
        if not weatherReportIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(weatherReportIngest.SrcIdsLength()):
                self.srcIds.append(weatherReportIngest.SrcIds(i))
        self.origNetwork = weatherReportIngest.OrigNetwork()
        self.createdAt = weatherReportIngest.CreatedAt()
        self.createdBy = weatherReportIngest.CreatedBy()
        self.source = weatherReportIngest.Source()
        self.origin = weatherReportIngest.Origin()
        self.dataMode = weatherReportIngest.DataMode()

    # WeatherReport_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.weatherId is not None:
            weatherId = builder.CreateString(self.weatherId)
        if self.idGroundImagery is not None:
            idGroundImagery = builder.CreateString(self.idGroundImagery)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.idAirfield is not None:
            idAirfield = builder.CreateString(self.idAirfield)
        if self.icao is not None:
            icao = builder.CreateString(self.icao)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.externalLocationId is not None:
            externalLocationId = builder.CreateString(self.externalLocationId)
        if self.reportType is not None:
            reportType = builder.CreateString(self.reportType)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.forecastStartTime is not None:
            forecastStartTime = builder.CreateString(self.forecastStartTime)
        if self.forecastEndTime is not None:
            forecastEndTime = builder.CreateString(self.forecastEndTime)
        if self.dataLevel is not None:
            dataLevel = builder.CreateString(self.dataLevel)
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.windCov is not None:
            windCovlist = []
            for i in range(len(self.windCov)):
                windCovlist.append(builder.CreateString(self.windCov[i]))
            WeatherReport_IngestStartWindCovVector(builder, len(self.windCov))
            for i in reversed(range(len(self.windCov))):
                builder.PrependUOffsetTRelative(windCovlist[i])
            windCov = builder.EndVector()
        if self.cloudCover is not None:
            cloudCoverlist = []
            for i in range(len(self.cloudCover)):
                cloudCoverlist.append(builder.CreateString(self.cloudCover[i]))
            WeatherReport_IngestStartCloudCoverVector(builder, len(self.cloudCover))
            for i in reversed(range(len(self.cloudCover))):
                builder.PrependUOffsetTRelative(cloudCoverlist[i])
            cloudCover = builder.EndVector()
        if self.cloudHght is not None:
            cloudHghtlist = []
            for i in range(len(self.cloudHght)):
                cloudHghtlist.append(builder.CreateString(self.cloudHght[i]))
            WeatherReport_IngestStartCloudHghtVector(builder, len(self.cloudHght))
            for i in reversed(range(len(self.cloudHght))):
                builder.PrependUOffsetTRelative(cloudHghtlist[i])
            cloudHght = builder.EndVector()
        if self.actWeather is not None:
            actWeather = builder.CreateString(self.actWeather)
        if self.weatherDesc is not None:
            weatherDesc = builder.CreateString(self.weatherDesc)
        if self.weatherInt is not None:
            weatherInt = builder.CreateString(self.weatherInt)
        if self.rawMetar is not None:
            rawMetar = builder.CreateString(self.rawMetar)
        if self.rawTaf is not None:
            rawTaf = builder.CreateString(self.rawTaf)
        if self.surroundingWeather is not None:
            surroundingWeather = builder.CreateString(self.surroundingWeather)
        if self.weatherAmp is not None:
            weatherAmp = builder.CreateString(self.weatherAmp)
        if self.enRouteWeather is not None:
            enRouteWeather = builder.CreateString(self.enRouteWeather)
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            WeatherReport_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            WeatherReport_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        WeatherReport_IngestStart(builder)
        if self.id is not None:
            WeatherReport_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            WeatherReport_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idSensor is not None:
            WeatherReport_IngestAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            WeatherReport_IngestAddOrigSensorId(builder, origSensorId)
        if self.weatherId is not None:
            WeatherReport_IngestAddWeatherId(builder, weatherId)
        if self.idGroundImagery is not None:
            WeatherReport_IngestAddIdGroundImagery(builder, idGroundImagery)
        if self.idSite is not None:
            WeatherReport_IngestAddIdSite(builder, idSite)
        if self.idAirfield is not None:
            WeatherReport_IngestAddIdAirfield(builder, idAirfield)
        if self.icao is not None:
            WeatherReport_IngestAddIcao(builder, icao)
        if self.externalId is not None:
            WeatherReport_IngestAddExternalId(builder, externalId)
        if self.externalLocationId is not None:
            WeatherReport_IngestAddExternalLocationId(builder, externalLocationId)
        if self.reportType is not None:
            WeatherReport_IngestAddReportType(builder, reportType)
        if self.obTime is not None:
            WeatherReport_IngestAddObTime(builder, obTime)
        if self.forecastStartTime is not None:
            WeatherReport_IngestAddForecastStartTime(builder, forecastStartTime)
        if self.forecastEndTime is not None:
            WeatherReport_IngestAddForecastEndTime(builder, forecastEndTime)
        WeatherReport_IngestAddLat(builder, self.lat)
        WeatherReport_IngestAddLon(builder, self.lon)
        WeatherReport_IngestAddAlt(builder, self.alt)
        WeatherReport_IngestAddGeoPotentialAlt(builder, self.geoPotentialAlt)
        if self.dataLevel is not None:
            WeatherReport_IngestAddDataLevel(builder, dataLevel)
        if self.area is not None:
            WeatherReport_IngestAddArea(builder, area)
        if self.atext is not None:
            WeatherReport_IngestAddAtext(builder, atext)
        if self.agjson is not None:
            WeatherReport_IngestAddAgjson(builder, agjson)
        if self.atype is not None:
            WeatherReport_IngestAddAtype(builder, atype)
        WeatherReport_IngestAddAndims(builder, self.andims)
        WeatherReport_IngestAddAsrid(builder, self.asrid)
        WeatherReport_IngestAddWindSpd(builder, self.windSpd)
        WeatherReport_IngestAddWindSpdAvg(builder, self.windSpdAvg)
        WeatherReport_IngestAddWindGust(builder, self.windGust)
        WeatherReport_IngestAddWindGust10(builder, self.windGust10)
        WeatherReport_IngestAddVshear(builder, self.vshear)
        WeatherReport_IngestAddHshear(builder, self.hshear)
        WeatherReport_IngestAddRadVel(builder, self.radVel)
        WeatherReport_IngestAddRadVelBeam1(builder, self.radVelBeam1)
        WeatherReport_IngestAddRadVelBeam2(builder, self.radVelBeam2)
        WeatherReport_IngestAddRadVelBeam3(builder, self.radVelBeam3)
        WeatherReport_IngestAddRadVelBeam4(builder, self.radVelBeam4)
        WeatherReport_IngestAddRadVelBeam5(builder, self.radVelBeam5)
        WeatherReport_IngestAddWindDir(builder, self.windDir)
        WeatherReport_IngestAddWindDirAvg(builder, self.windDirAvg)
        WeatherReport_IngestAddWindDirPeak(builder, self.windDirPeak)
        WeatherReport_IngestAddWindDirPeak10(builder, self.windDirPeak10)
        WeatherReport_IngestAddWindChill(builder, self.windChill)
        WeatherReport_IngestAddDirDev(builder, self.dirDev)
        WeatherReport_IngestAddWindVar(builder, self.windVar)
        if self.windCov is not None:
            WeatherReport_IngestAddWindCov(builder, windCov)
        if self.cloudCover is not None:
            WeatherReport_IngestAddCloudCover(builder, cloudCover)
        if self.cloudHght is not None:
            WeatherReport_IngestAddCloudHght(builder, cloudHght)
        if self.actWeather is not None:
            WeatherReport_IngestAddActWeather(builder, actWeather)
        if self.weatherDesc is not None:
            WeatherReport_IngestAddWeatherDesc(builder, weatherDesc)
        if self.weatherInt is not None:
            WeatherReport_IngestAddWeatherInt(builder, weatherInt)
        if self.rawMetar is not None:
            WeatherReport_IngestAddRawMetar(builder, rawMetar)
        if self.rawTaf is not None:
            WeatherReport_IngestAddRawTaf(builder, rawTaf)
        WeatherReport_IngestAddQnh(builder, self.qnh)
        WeatherReport_IngestAddVisibility(builder, self.visibility)
        WeatherReport_IngestAddTemperature(builder, self.temperature)
        WeatherReport_IngestAddSoilTemp(builder, self.soilTemp)
        WeatherReport_IngestAddBarPress(builder, self.barPress)
        WeatherReport_IngestAddPrecipRate(builder, self.precipRate)
        WeatherReport_IngestAddRainHour(builder, self.rainHour)
        WeatherReport_IngestAddSolarRad(builder, self.solarRad)
        WeatherReport_IngestAddDifRad(builder, self.difRad)
        WeatherReport_IngestAddRefRad(builder, self.refRad)
        WeatherReport_IngestAddSenlat(builder, self.senlat)
        WeatherReport_IngestAddSenlon(builder, self.senlon)
        WeatherReport_IngestAddSenalt(builder, self.senalt)
        WeatherReport_IngestAddDewPoint(builder, self.dewPoint)
        WeatherReport_IngestAddRelHumidity(builder, self.relHumidity)
        WeatherReport_IngestAddIndexRefraction(builder, self.indexRefraction)
        WeatherReport_IngestAddSoilMoisture(builder, self.soilMoisture)
        if self.surroundingWeather is not None:
            WeatherReport_IngestAddSurroundingWeather(builder, surroundingWeather)
        if self.weatherAmp is not None:
            WeatherReport_IngestAddWeatherAmp(builder, weatherAmp)
        WeatherReport_IngestAddContrailHghtLower(builder, self.contrailHghtLower)
        WeatherReport_IngestAddContrailHghtUpper(builder, self.contrailHghtUpper)
        WeatherReport_IngestAddIcingUpperLimit(builder, self.icingUpperLimit)
        WeatherReport_IngestAddIcingLowerLimit(builder, self.icingLowerLimit)
        if self.enRouteWeather is not None:
            WeatherReport_IngestAddEnRouteWeather(builder, enRouteWeather)
        WeatherReport_IngestAddCcEvent(builder, self.ccEvent)
        if self.srcTyps is not None:
            WeatherReport_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            WeatherReport_IngestAddSrcIds(builder, srcIds)
        if self.origNetwork is not None:
            WeatherReport_IngestAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            WeatherReport_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            WeatherReport_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            WeatherReport_IngestAddSource(builder, source)
        if self.origin is not None:
            WeatherReport_IngestAddOrigin(builder, origin)
        WeatherReport_IngestAddDataMode(builder, self.dataMode)
        weatherReportIngest = WeatherReport_IngestEnd(builder)
        return weatherReportIngest
