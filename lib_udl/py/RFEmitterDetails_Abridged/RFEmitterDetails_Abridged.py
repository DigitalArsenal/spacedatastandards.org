# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
class RFEmitterDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RFEmitterDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRFEmitterDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RFEmitterDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x46\x45\x4D", size_prefixed=size_prefixed)

    # RFEmitterDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: RFEMITTERDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFEmitterDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent RF Emitter.
    # Example: /// Example: RFEMITTER-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFEmitterDetails_Abridged
    def IdRfemitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFEmitterDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designator of this RF Emitter.
    # Example: /// Example: DESIGNATOR
    # Constraints: Minimum length = 0, Maximum length = 128
    # RFEmitterDetails_Abridged
    def Designator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional alternate name or alias for this RF Emitter.
    # Example: /// Example: ALTERNATE_NAME
    # Constraints: Minimum length = 0, Maximum length = 128
    # RFEmitterDetails_Abridged
    def AltName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Family of this RF Emitter type.
    # Example: /// Example: FAMILY
    # Constraints: Minimum length = 0, Maximum length = 128
    # RFEmitterDetails_Abridged
    def Family(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the production facility for this RF Emitter.
    # Example: /// Example: PRODUCTION_FACILITY
    # Constraints: Minimum length = 0, Maximum length = 128
    # RFEmitterDetails_Abridged
    def ProductionFacilityName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate facility name for this RF Emitter.
    # Example: /// Example: ALTERNATE_FACILITY_NAME
    # Constraints: Minimum length = 0, Maximum length = 128
    # RFEmitterDetails_Abridged
    def AlternateFacilityName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization which manufactures this RF Emitter.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFEmitterDetails_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the location of the production facility for this RF Emitter.
    # Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFEmitterDetails_Abridged
    def ProductionFacilityLocationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def SystemSensitivityStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
    # Example: /// Example: 150.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def SystemSensitivityEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Type or name of receiver.
    # Example: /// Example: RECEIVER_TYPE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFEmitterDetails_Abridged
    def ReceiverType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Receiver sensitivity in dBm.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def ReceiverSensitivity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Receiver bandwidth in Mhz.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def ReceiverBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transmitter frequency in Mhz.
    # Example: /// Example: 105.9
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def TransmitterFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transmitter bandwidth in Mhz.
    # Example: /// Example: 0.125
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def TransmitterBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transmit power in Watts.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def TransmitPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Barrage noise bandwidth in Mhz.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def BarrageNoiseBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Doppler noise value in Mhz.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def DopplerNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Digital Form Radio Memory instantaneous bandwidth in Mhz.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def DrfmInstantaneousBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of channels.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def NumChannels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of bits.
    # Example: /// Example: 256
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def NumBits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def AntennaSize(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFEmitterDetails_Abridged
    def AntennaSizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFEmitterDetails_Abridged
    def AntennaSizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # For parabolic/dish antennas, the diameter of the antenna in meters.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def AntennaDiameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Notes on the RF Emitter.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # RFEmitterDetails_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Secondary notes on the RF Emitter.
    # Example: /// Example: MORE_NOTES
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # RFEmitterDetails_Abridged
    def SecondaryNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detailed description of the RF Emitter.
    # Example: /// Example: DESCRIPTION
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # RFEmitterDetails_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of URLs containing additional information on this RF Emitter.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def Urls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFEmitterDetails_Abridged
    def UrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFEmitterDetails_Abridged
    def UrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFEmitterDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFEmitterDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFEmitterDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFEmitterDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFEmitterDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFEmitterDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RFEmitterDetails_AbridgedStart(builder):
    builder.StartObject(35)

def Start(builder):
    RFEmitterDetails_AbridgedStart(builder)

def RFEmitterDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RFEmitterDetails_AbridgedAddId(builder, id)

def RFEmitterDetails_AbridgedAddIdRfemitter(builder, idRfemitter):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idRfemitter), 0)

def AddIdRfemitter(builder, idRfemitter):
    RFEmitterDetails_AbridgedAddIdRfemitter(builder, idRfemitter)

def RFEmitterDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RFEmitterDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def RFEmitterDetails_AbridgedAddDesignator(builder, designator):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(designator), 0)

def AddDesignator(builder, designator):
    RFEmitterDetails_AbridgedAddDesignator(builder, designator)

def RFEmitterDetails_AbridgedAddAltName(builder, altName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(altName), 0)

def AddAltName(builder, altName):
    RFEmitterDetails_AbridgedAddAltName(builder, altName)

def RFEmitterDetails_AbridgedAddFamily(builder, family):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(family), 0)

def AddFamily(builder, family):
    RFEmitterDetails_AbridgedAddFamily(builder, family)

def RFEmitterDetails_AbridgedAddProductionFacilityName(builder, productionFacilityName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(productionFacilityName), 0)

def AddProductionFacilityName(builder, productionFacilityName):
    RFEmitterDetails_AbridgedAddProductionFacilityName(builder, productionFacilityName)

def RFEmitterDetails_AbridgedAddAlternateFacilityName(builder, alternateFacilityName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(alternateFacilityName), 0)

def AddAlternateFacilityName(builder, alternateFacilityName):
    RFEmitterDetails_AbridgedAddAlternateFacilityName(builder, alternateFacilityName)

def RFEmitterDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    RFEmitterDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def RFEmitterDetails_AbridgedAddProductionFacilityLocationId(builder, productionFacilityLocationId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(productionFacilityLocationId), 0)

def AddProductionFacilityLocationId(builder, productionFacilityLocationId):
    RFEmitterDetails_AbridgedAddProductionFacilityLocationId(builder, productionFacilityLocationId)

def RFEmitterDetails_AbridgedAddSystemSensitivityStart(builder, systemSensitivityStart):
    builder.PrependFloat64Slot(10, systemSensitivityStart, 0.0)

def AddSystemSensitivityStart(builder, systemSensitivityStart):
    RFEmitterDetails_AbridgedAddSystemSensitivityStart(builder, systemSensitivityStart)

def RFEmitterDetails_AbridgedAddSystemSensitivityEnd(builder, systemSensitivityEnd):
    builder.PrependFloat64Slot(11, systemSensitivityEnd, 0.0)

def AddSystemSensitivityEnd(builder, systemSensitivityEnd):
    RFEmitterDetails_AbridgedAddSystemSensitivityEnd(builder, systemSensitivityEnd)

def RFEmitterDetails_AbridgedAddReceiverType(builder, receiverType):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(receiverType), 0)

def AddReceiverType(builder, receiverType):
    RFEmitterDetails_AbridgedAddReceiverType(builder, receiverType)

def RFEmitterDetails_AbridgedAddReceiverSensitivity(builder, receiverSensitivity):
    builder.PrependFloat64Slot(13, receiverSensitivity, 0.0)

def AddReceiverSensitivity(builder, receiverSensitivity):
    RFEmitterDetails_AbridgedAddReceiverSensitivity(builder, receiverSensitivity)

def RFEmitterDetails_AbridgedAddReceiverBandwidth(builder, receiverBandwidth):
    builder.PrependFloat64Slot(14, receiverBandwidth, 0.0)

def AddReceiverBandwidth(builder, receiverBandwidth):
    RFEmitterDetails_AbridgedAddReceiverBandwidth(builder, receiverBandwidth)

def RFEmitterDetails_AbridgedAddTransmitterFrequency(builder, transmitterFrequency):
    builder.PrependFloat64Slot(15, transmitterFrequency, 0.0)

def AddTransmitterFrequency(builder, transmitterFrequency):
    RFEmitterDetails_AbridgedAddTransmitterFrequency(builder, transmitterFrequency)

def RFEmitterDetails_AbridgedAddTransmitterBandwidth(builder, transmitterBandwidth):
    builder.PrependFloat64Slot(16, transmitterBandwidth, 0.0)

def AddTransmitterBandwidth(builder, transmitterBandwidth):
    RFEmitterDetails_AbridgedAddTransmitterBandwidth(builder, transmitterBandwidth)

def RFEmitterDetails_AbridgedAddTransmitPower(builder, transmitPower):
    builder.PrependFloat64Slot(17, transmitPower, 0.0)

def AddTransmitPower(builder, transmitPower):
    RFEmitterDetails_AbridgedAddTransmitPower(builder, transmitPower)

def RFEmitterDetails_AbridgedAddBarrageNoiseBandwidth(builder, barrageNoiseBandwidth):
    builder.PrependFloat64Slot(18, barrageNoiseBandwidth, 0.0)

def AddBarrageNoiseBandwidth(builder, barrageNoiseBandwidth):
    RFEmitterDetails_AbridgedAddBarrageNoiseBandwidth(builder, barrageNoiseBandwidth)

def RFEmitterDetails_AbridgedAddDopplerNoise(builder, dopplerNoise):
    builder.PrependFloat64Slot(19, dopplerNoise, 0.0)

def AddDopplerNoise(builder, dopplerNoise):
    RFEmitterDetails_AbridgedAddDopplerNoise(builder, dopplerNoise)

def RFEmitterDetails_AbridgedAddDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth):
    builder.PrependFloat64Slot(20, drfmInstantaneousBandwidth, 0.0)

def AddDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth):
    RFEmitterDetails_AbridgedAddDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth)

def RFEmitterDetails_AbridgedAddNumChannels(builder, numChannels):
    builder.PrependInt32Slot(21, numChannels, 0)

def AddNumChannels(builder, numChannels):
    RFEmitterDetails_AbridgedAddNumChannels(builder, numChannels)

def RFEmitterDetails_AbridgedAddNumBits(builder, numBits):
    builder.PrependInt32Slot(22, numBits, 0)

def AddNumBits(builder, numBits):
    RFEmitterDetails_AbridgedAddNumBits(builder, numBits)

def RFEmitterDetails_AbridgedAddAntennaSize(builder, antennaSize):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(antennaSize), 0)

def AddAntennaSize(builder, antennaSize):
    RFEmitterDetails_AbridgedAddAntennaSize(builder, antennaSize)

def RFEmitterDetails_AbridgedStartAntennaSizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAntennaSizeVector(builder, numElems):
    return RFEmitterDetails_AbridgedStartAntennaSizeVector(builder, numElems)

def RFEmitterDetails_AbridgedAddAntennaDiameter(builder, antennaDiameter):
    builder.PrependFloat64Slot(24, antennaDiameter, 0.0)

def AddAntennaDiameter(builder, antennaDiameter):
    RFEmitterDetails_AbridgedAddAntennaDiameter(builder, antennaDiameter)

def RFEmitterDetails_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    RFEmitterDetails_AbridgedAddNotes(builder, notes)

def RFEmitterDetails_AbridgedAddSecondaryNotes(builder, secondaryNotes):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(secondaryNotes), 0)

def AddSecondaryNotes(builder, secondaryNotes):
    RFEmitterDetails_AbridgedAddSecondaryNotes(builder, secondaryNotes)

def RFEmitterDetails_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    RFEmitterDetails_AbridgedAddDescription(builder, description)

def RFEmitterDetails_AbridgedAddUrls(builder, urls):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(urls), 0)

def AddUrls(builder, urls):
    RFEmitterDetails_AbridgedAddUrls(builder, urls)

def RFEmitterDetails_AbridgedStartUrlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUrlsVector(builder, numElems):
    return RFEmitterDetails_AbridgedStartUrlsVector(builder, numElems)

def RFEmitterDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RFEmitterDetails_AbridgedAddSource(builder, source)

def RFEmitterDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RFEmitterDetails_AbridgedAddOrigin(builder, origin)

def RFEmitterDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    RFEmitterDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def RFEmitterDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(32, dataMode, 0)

def AddDataMode(builder, dataMode):
    RFEmitterDetails_AbridgedAddDataMode(builder, dataMode)

def RFEmitterDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RFEmitterDetails_AbridgedAddCreatedAt(builder, createdAt)

def RFEmitterDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RFEmitterDetails_AbridgedAddCreatedBy(builder, createdBy)

def RFEmitterDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return RFEmitterDetails_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class RFEmitterDetails_AbridgedT(object):

    # RFEmitterDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idRfemitter = None  # type: str
        self.classificationMarking = None  # type: str
        self.designator = None  # type: str
        self.altName = None  # type: str
        self.family = None  # type: str
        self.productionFacilityName = None  # type: str
        self.alternateFacilityName = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.productionFacilityLocationId = None  # type: str
        self.systemSensitivityStart = 0.0  # type: float
        self.systemSensitivityEnd = 0.0  # type: float
        self.receiverType = None  # type: str
        self.receiverSensitivity = 0.0  # type: float
        self.receiverBandwidth = 0.0  # type: float
        self.transmitterFrequency = 0.0  # type: float
        self.transmitterBandwidth = 0.0  # type: float
        self.transmitPower = 0.0  # type: float
        self.barrageNoiseBandwidth = 0.0  # type: float
        self.dopplerNoise = 0.0  # type: float
        self.drfmInstantaneousBandwidth = 0.0  # type: float
        self.numChannels = 0  # type: int
        self.numBits = 0  # type: int
        self.antennaSize = None  # type: List[str]
        self.antennaDiameter = 0.0  # type: float
        self.notes = None  # type: str
        self.secondaryNotes = None  # type: str
        self.description = None  # type: str
        self.urls = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rfemitterDetailsAbridged = RFEmitterDetails_Abridged()
        rfemitterDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(rfemitterDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rfemitterDetailsAbridged):
        x = RFEmitterDetails_AbridgedT()
        x._UnPack(rfemitterDetailsAbridged)
        return x

    # RFEmitterDetails_AbridgedT
    def _UnPack(self, rfemitterDetailsAbridged):
        if rfemitterDetailsAbridged is None:
            return
        self.id = rfemitterDetailsAbridged.Id()
        self.idRfemitter = rfemitterDetailsAbridged.IdRfemitter()
        self.classificationMarking = rfemitterDetailsAbridged.ClassificationMarking()
        self.designator = rfemitterDetailsAbridged.Designator()
        self.altName = rfemitterDetailsAbridged.AltName()
        self.family = rfemitterDetailsAbridged.Family()
        self.productionFacilityName = rfemitterDetailsAbridged.ProductionFacilityName()
        self.alternateFacilityName = rfemitterDetailsAbridged.AlternateFacilityName()
        self.manufacturerOrgId = rfemitterDetailsAbridged.ManufacturerOrgId()
        self.productionFacilityLocationId = rfemitterDetailsAbridged.ProductionFacilityLocationId()
        self.systemSensitivityStart = rfemitterDetailsAbridged.SystemSensitivityStart()
        self.systemSensitivityEnd = rfemitterDetailsAbridged.SystemSensitivityEnd()
        self.receiverType = rfemitterDetailsAbridged.ReceiverType()
        self.receiverSensitivity = rfemitterDetailsAbridged.ReceiverSensitivity()
        self.receiverBandwidth = rfemitterDetailsAbridged.ReceiverBandwidth()
        self.transmitterFrequency = rfemitterDetailsAbridged.TransmitterFrequency()
        self.transmitterBandwidth = rfemitterDetailsAbridged.TransmitterBandwidth()
        self.transmitPower = rfemitterDetailsAbridged.TransmitPower()
        self.barrageNoiseBandwidth = rfemitterDetailsAbridged.BarrageNoiseBandwidth()
        self.dopplerNoise = rfemitterDetailsAbridged.DopplerNoise()
        self.drfmInstantaneousBandwidth = rfemitterDetailsAbridged.DrfmInstantaneousBandwidth()
        self.numChannels = rfemitterDetailsAbridged.NumChannels()
        self.numBits = rfemitterDetailsAbridged.NumBits()
        if not rfemitterDetailsAbridged.AntennaSizeIsNone():
            self.antennaSize = []
            for i in range(rfemitterDetailsAbridged.AntennaSizeLength()):
                self.antennaSize.append(rfemitterDetailsAbridged.AntennaSize(i))
        self.antennaDiameter = rfemitterDetailsAbridged.AntennaDiameter()
        self.notes = rfemitterDetailsAbridged.Notes()
        self.secondaryNotes = rfemitterDetailsAbridged.SecondaryNotes()
        self.description = rfemitterDetailsAbridged.Description()
        if not rfemitterDetailsAbridged.UrlsIsNone():
            self.urls = []
            for i in range(rfemitterDetailsAbridged.UrlsLength()):
                self.urls.append(rfemitterDetailsAbridged.Urls(i))
        self.source = rfemitterDetailsAbridged.Source()
        self.origin = rfemitterDetailsAbridged.Origin()
        self.origNetwork = rfemitterDetailsAbridged.OrigNetwork()
        self.dataMode = rfemitterDetailsAbridged.DataMode()
        self.createdAt = rfemitterDetailsAbridged.CreatedAt()
        self.createdBy = rfemitterDetailsAbridged.CreatedBy()

    # RFEmitterDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idRfemitter is not None:
            idRfemitter = builder.CreateString(self.idRfemitter)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.designator is not None:
            designator = builder.CreateString(self.designator)
        if self.altName is not None:
            altName = builder.CreateString(self.altName)
        if self.family is not None:
            family = builder.CreateString(self.family)
        if self.productionFacilityName is not None:
            productionFacilityName = builder.CreateString(self.productionFacilityName)
        if self.alternateFacilityName is not None:
            alternateFacilityName = builder.CreateString(self.alternateFacilityName)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.productionFacilityLocationId is not None:
            productionFacilityLocationId = builder.CreateString(self.productionFacilityLocationId)
        if self.receiverType is not None:
            receiverType = builder.CreateString(self.receiverType)
        if self.antennaSize is not None:
            antennaSizelist = []
            for i in range(len(self.antennaSize)):
                antennaSizelist.append(builder.CreateString(self.antennaSize[i]))
            RFEmitterDetails_AbridgedStartAntennaSizeVector(builder, len(self.antennaSize))
            for i in reversed(range(len(self.antennaSize))):
                builder.PrependUOffsetTRelative(antennaSizelist[i])
            antennaSize = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.secondaryNotes is not None:
            secondaryNotes = builder.CreateString(self.secondaryNotes)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.urls is not None:
            urlslist = []
            for i in range(len(self.urls)):
                urlslist.append(builder.CreateString(self.urls[i]))
            RFEmitterDetails_AbridgedStartUrlsVector(builder, len(self.urls))
            for i in reversed(range(len(self.urls))):
                builder.PrependUOffsetTRelative(urlslist[i])
            urls = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        RFEmitterDetails_AbridgedStart(builder)
        if self.id is not None:
            RFEmitterDetails_AbridgedAddId(builder, id)
        if self.idRfemitter is not None:
            RFEmitterDetails_AbridgedAddIdRfemitter(builder, idRfemitter)
        if self.classificationMarking is not None:
            RFEmitterDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.designator is not None:
            RFEmitterDetails_AbridgedAddDesignator(builder, designator)
        if self.altName is not None:
            RFEmitterDetails_AbridgedAddAltName(builder, altName)
        if self.family is not None:
            RFEmitterDetails_AbridgedAddFamily(builder, family)
        if self.productionFacilityName is not None:
            RFEmitterDetails_AbridgedAddProductionFacilityName(builder, productionFacilityName)
        if self.alternateFacilityName is not None:
            RFEmitterDetails_AbridgedAddAlternateFacilityName(builder, alternateFacilityName)
        if self.manufacturerOrgId is not None:
            RFEmitterDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.productionFacilityLocationId is not None:
            RFEmitterDetails_AbridgedAddProductionFacilityLocationId(builder, productionFacilityLocationId)
        RFEmitterDetails_AbridgedAddSystemSensitivityStart(builder, self.systemSensitivityStart)
        RFEmitterDetails_AbridgedAddSystemSensitivityEnd(builder, self.systemSensitivityEnd)
        if self.receiverType is not None:
            RFEmitterDetails_AbridgedAddReceiverType(builder, receiverType)
        RFEmitterDetails_AbridgedAddReceiverSensitivity(builder, self.receiverSensitivity)
        RFEmitterDetails_AbridgedAddReceiverBandwidth(builder, self.receiverBandwidth)
        RFEmitterDetails_AbridgedAddTransmitterFrequency(builder, self.transmitterFrequency)
        RFEmitterDetails_AbridgedAddTransmitterBandwidth(builder, self.transmitterBandwidth)
        RFEmitterDetails_AbridgedAddTransmitPower(builder, self.transmitPower)
        RFEmitterDetails_AbridgedAddBarrageNoiseBandwidth(builder, self.barrageNoiseBandwidth)
        RFEmitterDetails_AbridgedAddDopplerNoise(builder, self.dopplerNoise)
        RFEmitterDetails_AbridgedAddDrfmInstantaneousBandwidth(builder, self.drfmInstantaneousBandwidth)
        RFEmitterDetails_AbridgedAddNumChannels(builder, self.numChannels)
        RFEmitterDetails_AbridgedAddNumBits(builder, self.numBits)
        if self.antennaSize is not None:
            RFEmitterDetails_AbridgedAddAntennaSize(builder, antennaSize)
        RFEmitterDetails_AbridgedAddAntennaDiameter(builder, self.antennaDiameter)
        if self.notes is not None:
            RFEmitterDetails_AbridgedAddNotes(builder, notes)
        if self.secondaryNotes is not None:
            RFEmitterDetails_AbridgedAddSecondaryNotes(builder, secondaryNotes)
        if self.description is not None:
            RFEmitterDetails_AbridgedAddDescription(builder, description)
        if self.urls is not None:
            RFEmitterDetails_AbridgedAddUrls(builder, urls)
        if self.source is not None:
            RFEmitterDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            RFEmitterDetails_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            RFEmitterDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        RFEmitterDetails_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            RFEmitterDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RFEmitterDetails_AbridgedAddCreatedBy(builder, createdBy)
        rfemitterDetailsAbridged = RFEmitterDetails_AbridgedEnd(builder)
        return rfemitterDetailsAbridged
