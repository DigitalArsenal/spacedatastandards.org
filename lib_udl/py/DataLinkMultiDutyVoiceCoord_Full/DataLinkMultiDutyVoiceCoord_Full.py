# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
class DataLinkMultiDutyVoiceCoord_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkMultiDutyVoiceCoord_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkMultiDutyVoiceCoord_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkMultiDutyVoiceCoord_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkMultiDutyVoiceCoord_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
    # Example: /// Example: VPN
    # Constraints: Minimum length = 0, Maximum length = 5
    # DataLinkMultiDutyVoiceCoord_Full
    def MultiVoiceNetDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
    # Example: /// Example: ST300A
    # Constraints: Minimum length = 0, Maximum length = 8
    # DataLinkMultiDutyVoiceCoord_Full
    def MultiFreqDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
    # Example: /// Example: P
    # Constraints: Minimum length = 0, Maximum length = 1
    # DataLinkMultiDutyVoiceCoord_Full
    def MultiCommPri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
    # Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    # Constraints: No constraints specified.
    # DataLinkMultiDutyVoiceCoord_Full
    def MultiTeleFreqNums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLinkMultiDutyVoiceCoord_Full
    def MultiTeleFreqNumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLinkMultiDutyVoiceCoord_Full
    def MultiTeleFreqNumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def DataLinkMultiDutyVoiceCoord_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    DataLinkMultiDutyVoiceCoord_FullStart(builder)

def DataLinkMultiDutyVoiceCoord_FullAddMultiVoiceNetDes(builder, multiVoiceNetDes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(multiVoiceNetDes), 0)

def AddMultiVoiceNetDes(builder, multiVoiceNetDes):
    DataLinkMultiDutyVoiceCoord_FullAddMultiVoiceNetDes(builder, multiVoiceNetDes)

def DataLinkMultiDutyVoiceCoord_FullAddMultiFreqDes(builder, multiFreqDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(multiFreqDes), 0)

def AddMultiFreqDes(builder, multiFreqDes):
    DataLinkMultiDutyVoiceCoord_FullAddMultiFreqDes(builder, multiFreqDes)

def DataLinkMultiDutyVoiceCoord_FullAddMultiCommPri(builder, multiCommPri):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(multiCommPri), 0)

def AddMultiCommPri(builder, multiCommPri):
    DataLinkMultiDutyVoiceCoord_FullAddMultiCommPri(builder, multiCommPri)

def DataLinkMultiDutyVoiceCoord_FullAddMultiTeleFreqNums(builder, multiTeleFreqNums):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(multiTeleFreqNums), 0)

def AddMultiTeleFreqNums(builder, multiTeleFreqNums):
    DataLinkMultiDutyVoiceCoord_FullAddMultiTeleFreqNums(builder, multiTeleFreqNums)

def DataLinkMultiDutyVoiceCoord_FullStartMultiTeleFreqNumsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMultiTeleFreqNumsVector(builder, numElems):
    return DataLinkMultiDutyVoiceCoord_FullStartMultiTeleFreqNumsVector(builder, numElems)

def DataLinkMultiDutyVoiceCoord_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkMultiDutyVoiceCoord_FullEnd(builder)

try:
    from typing import List
except:
    pass

class DataLinkMultiDutyVoiceCoord_FullT(object):

    # DataLinkMultiDutyVoiceCoord_FullT
    def __init__(self):
        self.multiVoiceNetDes = None  # type: str
        self.multiFreqDes = None  # type: str
        self.multiCommPri = None  # type: str
        self.multiTeleFreqNums = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkMultiDutyVoiceCoordFull = DataLinkMultiDutyVoiceCoord_Full()
        dataLinkMultiDutyVoiceCoordFull.Init(buf, pos)
        return cls.InitFromObj(dataLinkMultiDutyVoiceCoordFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkMultiDutyVoiceCoordFull):
        x = DataLinkMultiDutyVoiceCoord_FullT()
        x._UnPack(dataLinkMultiDutyVoiceCoordFull)
        return x

    # DataLinkMultiDutyVoiceCoord_FullT
    def _UnPack(self, dataLinkMultiDutyVoiceCoordFull):
        if dataLinkMultiDutyVoiceCoordFull is None:
            return
        self.multiVoiceNetDes = dataLinkMultiDutyVoiceCoordFull.MultiVoiceNetDes()
        self.multiFreqDes = dataLinkMultiDutyVoiceCoordFull.MultiFreqDes()
        self.multiCommPri = dataLinkMultiDutyVoiceCoordFull.MultiCommPri()
        if not dataLinkMultiDutyVoiceCoordFull.MultiTeleFreqNumsIsNone():
            self.multiTeleFreqNums = []
            for i in range(dataLinkMultiDutyVoiceCoordFull.MultiTeleFreqNumsLength()):
                self.multiTeleFreqNums.append(dataLinkMultiDutyVoiceCoordFull.MultiTeleFreqNums(i))

    # DataLinkMultiDutyVoiceCoord_FullT
    def Pack(self, builder):
        if self.multiVoiceNetDes is not None:
            multiVoiceNetDes = builder.CreateString(self.multiVoiceNetDes)
        if self.multiFreqDes is not None:
            multiFreqDes = builder.CreateString(self.multiFreqDes)
        if self.multiCommPri is not None:
            multiCommPri = builder.CreateString(self.multiCommPri)
        if self.multiTeleFreqNums is not None:
            multiTeleFreqNumslist = []
            for i in range(len(self.multiTeleFreqNums)):
                multiTeleFreqNumslist.append(builder.CreateString(self.multiTeleFreqNums[i]))
            DataLinkMultiDutyVoiceCoord_FullStartMultiTeleFreqNumsVector(builder, len(self.multiTeleFreqNums))
            for i in reversed(range(len(self.multiTeleFreqNums))):
                builder.PrependUOffsetTRelative(multiTeleFreqNumslist[i])
            multiTeleFreqNums = builder.EndVector()
        DataLinkMultiDutyVoiceCoord_FullStart(builder)
        if self.multiVoiceNetDes is not None:
            DataLinkMultiDutyVoiceCoord_FullAddMultiVoiceNetDes(builder, multiVoiceNetDes)
        if self.multiFreqDes is not None:
            DataLinkMultiDutyVoiceCoord_FullAddMultiFreqDes(builder, multiFreqDes)
        if self.multiCommPri is not None:
            DataLinkMultiDutyVoiceCoord_FullAddMultiCommPri(builder, multiCommPri)
        if self.multiTeleFreqNums is not None:
            DataLinkMultiDutyVoiceCoord_FullAddMultiTeleFreqNums(builder, multiTeleFreqNums)
        dataLinkMultiDutyVoiceCoordFull = DataLinkMultiDutyVoiceCoord_FullEnd(builder)
        return dataLinkMultiDutyVoiceCoordFull
