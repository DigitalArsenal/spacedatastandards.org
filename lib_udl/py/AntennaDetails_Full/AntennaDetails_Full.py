# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
class AntennaDetails_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AntennaDetails_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAntennaDetails_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AntennaDetails_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x4E\x54\x45", size_prefixed=size_prefixed)

    # AntennaDetails_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ANTENNADETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AntennaDetails_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Antenna.
    # Example: /// Example: ANTENNA-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AntennaDetails_Full
    def IdAntenna(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AntennaDetails_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
    # Example: /// Example: Reflector
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna position (e.g. Top, Nadir, Side).
    # Example: /// Example: Top
    # Constraints: Minimum length = 0, Maximum length = 128
    # AntennaDetails_Full
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna mode (e.g. TX,RX).
    # Example: /// Example: TX
    # Constraints: Minimum length = 0, Maximum length = 4
    # AntennaDetails_Full
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this antenna is steerable.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Steerable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if this is a beam forming antenna.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def BeamForming(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ID of the organization that manufactures the antenna.
    # Example: /// Example: MANUFACTUREORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AntennaDetails_Full
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna diameter in meters.
    # Example: /// Example: 0.01
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Diameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    # Example: /// Example: [0.03, 0.05]
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Size(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AntennaDetails_Full
    def SizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AntennaDetails_Full
    def SizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Antenna start of frequency range in Mhz.
    # Example: /// Example: 2.1
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def StartFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna end of frequency range in Mhz.
    # Example: /// Example: 3.3
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def EndFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    # Example: /// Example: 14.1
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Beamwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna maximum gain in dBi.
    # Example: /// Example: 20.1
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna gain tolerance in dB.
    # Example: /// Example: 5.1
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def GainTolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna polarization in degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna description.
    # Example: /// Example: Description of antenna A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AntennaDetails_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AntennaDetails_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AntennaDetails_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AntennaDetails_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AntennaDetails_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AntennaDetails_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AntennaDetails_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AntennaDetails_Full
    def ManufacturerOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AntennaDetails_FullStart(builder):
    builder.StartObject(28)

def Start(builder):
    AntennaDetails_FullStart(builder)

def AntennaDetails_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AntennaDetails_FullAddId(builder, id)

def AntennaDetails_FullAddIdAntenna(builder, idAntenna):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idAntenna), 0)

def AddIdAntenna(builder, idAntenna):
    AntennaDetails_FullAddIdAntenna(builder, idAntenna)

def AntennaDetails_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AntennaDetails_FullAddClassificationMarking(builder, classificationMarking)

def AntennaDetails_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AntennaDetails_FullAddType(builder, type)

def AntennaDetails_FullAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    AntennaDetails_FullAddPosition(builder, position)

def AntennaDetails_FullAddMode(builder, mode):
    builder.PrependInt8Slot(5, mode, 0)

def AddMode(builder, mode):
    AntennaDetails_FullAddMode(builder, mode)

def AntennaDetails_FullAddSteerable(builder, steerable):
    builder.PrependBoolSlot(6, steerable, 0)

def AddSteerable(builder, steerable):
    AntennaDetails_FullAddSteerable(builder, steerable)

def AntennaDetails_FullAddBeamForming(builder, beamForming):
    builder.PrependBoolSlot(7, beamForming, 0)

def AddBeamForming(builder, beamForming):
    AntennaDetails_FullAddBeamForming(builder, beamForming)

def AntennaDetails_FullAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    AntennaDetails_FullAddManufacturerOrgId(builder, manufacturerOrgId)

def AntennaDetails_FullAddDiameter(builder, diameter):
    builder.PrependFloat64Slot(9, diameter, 0.0)

def AddDiameter(builder, diameter):
    AntennaDetails_FullAddDiameter(builder, diameter)

def AntennaDetails_FullAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def AddSize(builder, size):
    AntennaDetails_FullAddSize(builder, size)

def AntennaDetails_FullStartSizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizeVector(builder, numElems):
    return AntennaDetails_FullStartSizeVector(builder, numElems)

def AntennaDetails_FullAddStartFrequency(builder, startFrequency):
    builder.PrependFloat64Slot(11, startFrequency, 0.0)

def AddStartFrequency(builder, startFrequency):
    AntennaDetails_FullAddStartFrequency(builder, startFrequency)

def AntennaDetails_FullAddEndFrequency(builder, endFrequency):
    builder.PrependFloat64Slot(12, endFrequency, 0.0)

def AddEndFrequency(builder, endFrequency):
    AntennaDetails_FullAddEndFrequency(builder, endFrequency)

def AntennaDetails_FullAddBeamwidth(builder, beamwidth):
    builder.PrependFloat64Slot(13, beamwidth, 0.0)

def AddBeamwidth(builder, beamwidth):
    AntennaDetails_FullAddBeamwidth(builder, beamwidth)

def AntennaDetails_FullAddGain(builder, gain):
    builder.PrependFloat64Slot(14, gain, 0.0)

def AddGain(builder, gain):
    AntennaDetails_FullAddGain(builder, gain)

def AntennaDetails_FullAddGainTolerance(builder, gainTolerance):
    builder.PrependFloat64Slot(15, gainTolerance, 0.0)

def AddGainTolerance(builder, gainTolerance):
    AntennaDetails_FullAddGainTolerance(builder, gainTolerance)

def AntennaDetails_FullAddPolarization(builder, polarization):
    builder.PrependFloat64Slot(16, polarization, 0.0)

def AddPolarization(builder, polarization):
    AntennaDetails_FullAddPolarization(builder, polarization)

def AntennaDetails_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    AntennaDetails_FullAddDescription(builder, description)

def AntennaDetails_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AntennaDetails_FullAddCreatedAt(builder, createdAt)

def AntennaDetails_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AntennaDetails_FullAddCreatedBy(builder, createdBy)

def AntennaDetails_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AntennaDetails_FullAddUpdatedAt(builder, updatedAt)

def AntennaDetails_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AntennaDetails_FullAddUpdatedBy(builder, updatedBy)

def AntennaDetails_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AntennaDetails_FullAddSource(builder, source)

def AntennaDetails_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AntennaDetails_FullAddOrigin(builder, origin)

def AntennaDetails_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AntennaDetails_FullAddOrigNetwork(builder, origNetwork)

def AntennaDetails_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(25, dataMode, 0)

def AddDataMode(builder, dataMode):
    AntennaDetails_FullAddDataMode(builder, dataMode)

def AntennaDetails_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    AntennaDetails_FullAddTags(builder, tags)

def AntennaDetails_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return AntennaDetails_FullStartTagsVector(builder, numElems)

def AntennaDetails_FullAddManufacturerOrg(builder, manufacturerOrg):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrg), 0)

def AddManufacturerOrg(builder, manufacturerOrg):
    AntennaDetails_FullAddManufacturerOrg(builder, manufacturerOrg)

def AntennaDetails_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AntennaDetails_FullEnd(builder)

try:
    from typing import List
except:
    pass

class AntennaDetails_FullT(object):

    # AntennaDetails_FullT
    def __init__(self):
        self.id = None  # type: str
        self.idAntenna = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.position = None  # type: str
        self.mode = 0  # type: int
        self.steerable = False  # type: bool
        self.beamForming = False  # type: bool
        self.manufacturerOrgId = None  # type: str
        self.diameter = 0.0  # type: float
        self.size = None  # type: List[str]
        self.startFrequency = 0.0  # type: float
        self.endFrequency = 0.0  # type: float
        self.beamwidth = 0.0  # type: float
        self.gain = 0.0  # type: float
        self.gainTolerance = 0.0  # type: float
        self.polarization = 0.0  # type: float
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.manufacturerOrg = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        antennaDetailsFull = AntennaDetails_Full()
        antennaDetailsFull.Init(buf, pos)
        return cls.InitFromObj(antennaDetailsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, antennaDetailsFull):
        x = AntennaDetails_FullT()
        x._UnPack(antennaDetailsFull)
        return x

    # AntennaDetails_FullT
    def _UnPack(self, antennaDetailsFull):
        if antennaDetailsFull is None:
            return
        self.id = antennaDetailsFull.Id()
        self.idAntenna = antennaDetailsFull.IdAntenna()
        self.classificationMarking = antennaDetailsFull.ClassificationMarking()
        self.type = antennaDetailsFull.Type()
        self.position = antennaDetailsFull.Position()
        self.mode = antennaDetailsFull.Mode()
        self.steerable = antennaDetailsFull.Steerable()
        self.beamForming = antennaDetailsFull.BeamForming()
        self.manufacturerOrgId = antennaDetailsFull.ManufacturerOrgId()
        self.diameter = antennaDetailsFull.Diameter()
        if not antennaDetailsFull.SizeIsNone():
            self.size = []
            for i in range(antennaDetailsFull.SizeLength()):
                self.size.append(antennaDetailsFull.Size(i))
        self.startFrequency = antennaDetailsFull.StartFrequency()
        self.endFrequency = antennaDetailsFull.EndFrequency()
        self.beamwidth = antennaDetailsFull.Beamwidth()
        self.gain = antennaDetailsFull.Gain()
        self.gainTolerance = antennaDetailsFull.GainTolerance()
        self.polarization = antennaDetailsFull.Polarization()
        self.description = antennaDetailsFull.Description()
        self.createdAt = antennaDetailsFull.CreatedAt()
        self.createdBy = antennaDetailsFull.CreatedBy()
        self.updatedAt = antennaDetailsFull.UpdatedAt()
        self.updatedBy = antennaDetailsFull.UpdatedBy()
        self.source = antennaDetailsFull.Source()
        self.origin = antennaDetailsFull.Origin()
        self.origNetwork = antennaDetailsFull.OrigNetwork()
        self.dataMode = antennaDetailsFull.DataMode()
        if not antennaDetailsFull.TagsIsNone():
            self.tags = []
            for i in range(antennaDetailsFull.TagsLength()):
                self.tags.append(antennaDetailsFull.Tags(i))
        self.manufacturerOrg = antennaDetailsFull.ManufacturerOrg()

    # AntennaDetails_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idAntenna is not None:
            idAntenna = builder.CreateString(self.idAntenna)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.position is not None:
            position = builder.CreateString(self.position)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.size is not None:
            sizelist = []
            for i in range(len(self.size)):
                sizelist.append(builder.CreateString(self.size[i]))
            AntennaDetails_FullStartSizeVector(builder, len(self.size))
            for i in reversed(range(len(self.size))):
                builder.PrependUOffsetTRelative(sizelist[i])
            size = builder.EndVector()
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            AntennaDetails_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.manufacturerOrg is not None:
            manufacturerOrg = builder.CreateString(self.manufacturerOrg)
        AntennaDetails_FullStart(builder)
        if self.id is not None:
            AntennaDetails_FullAddId(builder, id)
        if self.idAntenna is not None:
            AntennaDetails_FullAddIdAntenna(builder, idAntenna)
        if self.classificationMarking is not None:
            AntennaDetails_FullAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            AntennaDetails_FullAddType(builder, type)
        if self.position is not None:
            AntennaDetails_FullAddPosition(builder, position)
        AntennaDetails_FullAddMode(builder, self.mode)
        AntennaDetails_FullAddSteerable(builder, self.steerable)
        AntennaDetails_FullAddBeamForming(builder, self.beamForming)
        if self.manufacturerOrgId is not None:
            AntennaDetails_FullAddManufacturerOrgId(builder, manufacturerOrgId)
        AntennaDetails_FullAddDiameter(builder, self.diameter)
        if self.size is not None:
            AntennaDetails_FullAddSize(builder, size)
        AntennaDetails_FullAddStartFrequency(builder, self.startFrequency)
        AntennaDetails_FullAddEndFrequency(builder, self.endFrequency)
        AntennaDetails_FullAddBeamwidth(builder, self.beamwidth)
        AntennaDetails_FullAddGain(builder, self.gain)
        AntennaDetails_FullAddGainTolerance(builder, self.gainTolerance)
        AntennaDetails_FullAddPolarization(builder, self.polarization)
        if self.description is not None:
            AntennaDetails_FullAddDescription(builder, description)
        if self.createdAt is not None:
            AntennaDetails_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AntennaDetails_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AntennaDetails_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AntennaDetails_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            AntennaDetails_FullAddSource(builder, source)
        if self.origin is not None:
            AntennaDetails_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AntennaDetails_FullAddOrigNetwork(builder, origNetwork)
        AntennaDetails_FullAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            AntennaDetails_FullAddTags(builder, tags)
        if self.manufacturerOrg is not None:
            AntennaDetails_FullAddManufacturerOrg(builder, manufacturerOrg)
        antennaDetailsFull = AntennaDetails_FullEnd(builder)
        return antennaDetailsFull
