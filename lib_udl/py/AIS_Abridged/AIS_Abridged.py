# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
class AIS_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AIS_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAIS_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AIS_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x53\x41", size_prefixed=size_prefixed)

    # AIS_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: AIS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AIS_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AIS_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Track.
    # Example: /// Example: TRACK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AIS_Abridged
    def IdTrack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the vessel.
    # Example: /// Example: VESSEL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AIS_Abridged
    def IdVessel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    # Example: /// Example: 304010417
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Mmsi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
    # Example: /// Example: 9015462
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Imon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
    # Example: /// Example: DORNUM
    # Constraints: Minimum length = 0, Maximum length = 24
    # AIS_Abridged
    def ShipName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
    # Example: /// Example: Passenger
    # Constraints: Minimum length = 0, Maximum length = 48
    # AIS_Abridged
    def ShipType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
    # Example: /// Example: Cargo
    # Constraints: Minimum length = 0, Maximum length = 48
    # AIS_Abridged
    def EngagedIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
    # Example: /// Example: Tug
    # Constraints: Minimum length = 0, Maximum length = 48
    # AIS_Abridged
    def SpecialCraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Freight
    # Constraints: Minimum length = 0, Maximum length = 48
    # AIS_Abridged
    def CargoType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A uniquely designated identifier for the vessel's transmitter station.
    # Example: /// Example: V2OZ
    # Constraints: Minimum length = 0, Maximum length = 24
    # AIS_Abridged
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flag of the subject vessel according to AIS transmission.
    # Example: /// Example: United States
    # Constraints: Minimum length = 0, Maximum length = 36
    # AIS_Abridged
    def VesselFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 47.758499
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -5.154223
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AIS_Abridged
    def PosHiAccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AIS_Abridged
    def PosHiLatency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The speed-over-ground reported by the vessel, in kilometers/hour.
    # Example: /// Example: 10.5
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The true heading reported by the vessel, in degrees.
    # Example: /// Example: 329.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def TrueHeading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The course-over-ground reported by the vessel, in degrees.
    # Example: /// Example: 157.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Course(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
    # Example: /// Example: 22.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def RateOfTurn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AIS_Abridged
    def SpecialManeuver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Underway Using Engine
    # Constraints: Minimum length = 0, Maximum length = 64
    # AIS_Abridged
    def NavStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: GPS
    # Constraints: Minimum length = 0, Maximum length = 24
    # AIS_Abridged
    def PosDeviceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
    # Example: /// Example: [50.1, 50.1, 20.1, 20.1]
    # Constraints: No constraints specified.
    # AIS_Abridged
    def AntennaRefDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AIS_Abridged
    def AntennaRefDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AIS_Abridged
    def AntennaRefDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
    # Example: /// Example: 511.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
    # Example: /// Example: 24.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum static draught, in meters, of the vessel according to the AIS transmission.
    # Example: /// Example: 21.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def Draught(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Further description or explanation of the vessel or type.
    # Example: /// Example: Search and rescue vessels
    # Constraints: Minimum length = 0, Maximum length = 100
    # AIS_Abridged
    def ShipDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The destination of the vessel according to the AIS transmission.
    # Example: /// Example: USCLE
    # Constraints: Minimum length = 0, Maximum length = 20
    # AIS_Abridged
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # AIS_Abridged
    def DestinationEta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The US Geographic Unique Identifier of the current port hosting the vessel.
    # Example: /// Example: 0ABC
    # Constraints: Minimum length = 0, Maximum length = 4
    # AIS_Abridged
    def CurrentPortGuid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UN Location Code of the current port hosting the vessel.
    # Example: /// Example: XF013
    # Constraints: Minimum length = 0, Maximum length = 5
    # AIS_Abridged
    def CurrentPortLocode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The US Geographic Unique Identifier of the last port visited by the vessel.
    # Example: /// Example: 0VAX
    # Constraints: Minimum length = 0, Maximum length = 4
    # AIS_Abridged
    def LastPortGuid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UN Location Code of the last port visited by the vessel.
    # Example: /// Example: USSKY
    # Constraints: Minimum length = 0, Maximum length = 5
    # AIS_Abridged
    def LastPortLocode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The US Geographic Unique Identifier of the next destination port of the vessel.
    # Example: /// Example: 0Z8Q
    # Constraints: Minimum length = 0, Maximum length = 4
    # AIS_Abridged
    def NextPortGuid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UN  Location Code of the next destination port of the vessel.
    # Example: /// Example: USCLE
    # Constraints: Minimum length = 0, Maximum length = 5
    # AIS_Abridged
    def NextPortLocode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # AIS_Abridged
    def EtaCalculated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # AIS_Abridged
    def EtaUpdated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The remaining distance, in kilometers, for the vessel to reach the reported destination.
    # Example: /// Example: 150.5
    # Constraints: No constraints specified.
    # AIS_Abridged
    def DistanceToGo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The distance, in kilometers, that the vessel has travelled since departing the last port.
    # Example: /// Example: 200.3
    # Constraints: No constraints specified.
    # AIS_Abridged
    def DistanceTravelled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
    # Example: /// Example: 12.1
    # Constraints: No constraints specified.
    # AIS_Abridged
    def AvgSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
    # Example: /// Example: 13.3
    # Constraints: No constraints specified.
    # AIS_Abridged
    def MaxSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AIS_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AIS_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AIS_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AIS_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AIS_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AIS_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AIS_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AIS_AbridgedStart(builder):
    builder.StartObject(51)

def Start(builder):
    AIS_AbridgedStart(builder)

def AIS_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AIS_AbridgedAddId(builder, id)

def AIS_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AIS_AbridgedAddClassificationMarking(builder, classificationMarking)

def AIS_AbridgedAddIdTrack(builder, idTrack):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idTrack), 0)

def AddIdTrack(builder, idTrack):
    AIS_AbridgedAddIdTrack(builder, idTrack)

def AIS_AbridgedAddIdVessel(builder, idVessel):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idVessel), 0)

def AddIdVessel(builder, idVessel):
    AIS_AbridgedAddIdVessel(builder, idVessel)

def AIS_AbridgedAddMmsi(builder, mmsi):
    builder.PrependInt64Slot(4, mmsi, 0)

def AddMmsi(builder, mmsi):
    AIS_AbridgedAddMmsi(builder, mmsi)

def AIS_AbridgedAddImon(builder, imon):
    builder.PrependInt64Slot(5, imon, 0)

def AddImon(builder, imon):
    AIS_AbridgedAddImon(builder, imon)

def AIS_AbridgedAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    AIS_AbridgedAddTs(builder, ts)

def AIS_AbridgedAddShipName(builder, shipName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shipName), 0)

def AddShipName(builder, shipName):
    AIS_AbridgedAddShipName(builder, shipName)

def AIS_AbridgedAddShipType(builder, shipType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(shipType), 0)

def AddShipType(builder, shipType):
    AIS_AbridgedAddShipType(builder, shipType)

def AIS_AbridgedAddEngagedIn(builder, engagedIn):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(engagedIn), 0)

def AddEngagedIn(builder, engagedIn):
    AIS_AbridgedAddEngagedIn(builder, engagedIn)

def AIS_AbridgedAddSpecialCraft(builder, specialCraft):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(specialCraft), 0)

def AddSpecialCraft(builder, specialCraft):
    AIS_AbridgedAddSpecialCraft(builder, specialCraft)

def AIS_AbridgedAddCargoType(builder, cargoType):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(cargoType), 0)

def AddCargoType(builder, cargoType):
    AIS_AbridgedAddCargoType(builder, cargoType)

def AIS_AbridgedAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    AIS_AbridgedAddCallSign(builder, callSign)

def AIS_AbridgedAddVesselFlag(builder, vesselFlag):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(vesselFlag), 0)

def AddVesselFlag(builder, vesselFlag):
    AIS_AbridgedAddVesselFlag(builder, vesselFlag)

def AIS_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(14, lat, 0.0)

def AddLat(builder, lat):
    AIS_AbridgedAddLat(builder, lat)

def AIS_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(15, lon, 0.0)

def AddLon(builder, lon):
    AIS_AbridgedAddLon(builder, lon)

def AIS_AbridgedAddPosHiAccuracy(builder, posHiAccuracy):
    builder.PrependBoolSlot(16, posHiAccuracy, 0)

def AddPosHiAccuracy(builder, posHiAccuracy):
    AIS_AbridgedAddPosHiAccuracy(builder, posHiAccuracy)

def AIS_AbridgedAddPosHiLatency(builder, posHiLatency):
    builder.PrependBoolSlot(17, posHiLatency, 0)

def AddPosHiLatency(builder, posHiLatency):
    AIS_AbridgedAddPosHiLatency(builder, posHiLatency)

def AIS_AbridgedAddSpeed(builder, speed):
    builder.PrependFloat64Slot(18, speed, 0.0)

def AddSpeed(builder, speed):
    AIS_AbridgedAddSpeed(builder, speed)

def AIS_AbridgedAddTrueHeading(builder, trueHeading):
    builder.PrependFloat64Slot(19, trueHeading, 0.0)

def AddTrueHeading(builder, trueHeading):
    AIS_AbridgedAddTrueHeading(builder, trueHeading)

def AIS_AbridgedAddCourse(builder, course):
    builder.PrependFloat64Slot(20, course, 0.0)

def AddCourse(builder, course):
    AIS_AbridgedAddCourse(builder, course)

def AIS_AbridgedAddRateOfTurn(builder, rateOfTurn):
    builder.PrependFloat64Slot(21, rateOfTurn, 0.0)

def AddRateOfTurn(builder, rateOfTurn):
    AIS_AbridgedAddRateOfTurn(builder, rateOfTurn)

def AIS_AbridgedAddSpecialManeuver(builder, specialManeuver):
    builder.PrependBoolSlot(22, specialManeuver, 0)

def AddSpecialManeuver(builder, specialManeuver):
    AIS_AbridgedAddSpecialManeuver(builder, specialManeuver)

def AIS_AbridgedAddNavStatus(builder, navStatus):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(navStatus), 0)

def AddNavStatus(builder, navStatus):
    AIS_AbridgedAddNavStatus(builder, navStatus)

def AIS_AbridgedAddPosDeviceType(builder, posDeviceType):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(posDeviceType), 0)

def AddPosDeviceType(builder, posDeviceType):
    AIS_AbridgedAddPosDeviceType(builder, posDeviceType)

def AIS_AbridgedAddAntennaRefDimensions(builder, antennaRefDimensions):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(antennaRefDimensions), 0)

def AddAntennaRefDimensions(builder, antennaRefDimensions):
    AIS_AbridgedAddAntennaRefDimensions(builder, antennaRefDimensions)

def AIS_AbridgedStartAntennaRefDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAntennaRefDimensionsVector(builder, numElems):
    return AIS_AbridgedStartAntennaRefDimensionsVector(builder, numElems)

def AIS_AbridgedAddLength(builder, length):
    builder.PrependFloat64Slot(26, length, 0.0)

def AddLength(builder, length):
    AIS_AbridgedAddLength(builder, length)

def AIS_AbridgedAddWidth(builder, width):
    builder.PrependFloat64Slot(27, width, 0.0)

def AddWidth(builder, width):
    AIS_AbridgedAddWidth(builder, width)

def AIS_AbridgedAddDraught(builder, draught):
    builder.PrependFloat64Slot(28, draught, 0.0)

def AddDraught(builder, draught):
    AIS_AbridgedAddDraught(builder, draught)

def AIS_AbridgedAddShipDescription(builder, shipDescription):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(shipDescription), 0)

def AddShipDescription(builder, shipDescription):
    AIS_AbridgedAddShipDescription(builder, shipDescription)

def AIS_AbridgedAddDestination(builder, destination):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(destination), 0)

def AddDestination(builder, destination):
    AIS_AbridgedAddDestination(builder, destination)

def AIS_AbridgedAddDestinationEta(builder, destinationEta):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(destinationEta), 0)

def AddDestinationEta(builder, destinationEta):
    AIS_AbridgedAddDestinationEta(builder, destinationEta)

def AIS_AbridgedAddCurrentPortGuid(builder, currentPortGuid):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(currentPortGuid), 0)

def AddCurrentPortGuid(builder, currentPortGuid):
    AIS_AbridgedAddCurrentPortGuid(builder, currentPortGuid)

def AIS_AbridgedAddCurrentPortLocode(builder, currentPortLocode):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(currentPortLocode), 0)

def AddCurrentPortLocode(builder, currentPortLocode):
    AIS_AbridgedAddCurrentPortLocode(builder, currentPortLocode)

def AIS_AbridgedAddLastPortGuid(builder, lastPortGuid):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(lastPortGuid), 0)

def AddLastPortGuid(builder, lastPortGuid):
    AIS_AbridgedAddLastPortGuid(builder, lastPortGuid)

def AIS_AbridgedAddLastPortLocode(builder, lastPortLocode):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(lastPortLocode), 0)

def AddLastPortLocode(builder, lastPortLocode):
    AIS_AbridgedAddLastPortLocode(builder, lastPortLocode)

def AIS_AbridgedAddNextPortGuid(builder, nextPortGuid):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(nextPortGuid), 0)

def AddNextPortGuid(builder, nextPortGuid):
    AIS_AbridgedAddNextPortGuid(builder, nextPortGuid)

def AIS_AbridgedAddNextPortLocode(builder, nextPortLocode):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(nextPortLocode), 0)

def AddNextPortLocode(builder, nextPortLocode):
    AIS_AbridgedAddNextPortLocode(builder, nextPortLocode)

def AIS_AbridgedAddEtaCalculated(builder, etaCalculated):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(etaCalculated), 0)

def AddEtaCalculated(builder, etaCalculated):
    AIS_AbridgedAddEtaCalculated(builder, etaCalculated)

def AIS_AbridgedAddEtaUpdated(builder, etaUpdated):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(etaUpdated), 0)

def AddEtaUpdated(builder, etaUpdated):
    AIS_AbridgedAddEtaUpdated(builder, etaUpdated)

def AIS_AbridgedAddDistanceToGo(builder, distanceToGo):
    builder.PrependFloat64Slot(40, distanceToGo, 0.0)

def AddDistanceToGo(builder, distanceToGo):
    AIS_AbridgedAddDistanceToGo(builder, distanceToGo)

def AIS_AbridgedAddDistanceTravelled(builder, distanceTravelled):
    builder.PrependFloat64Slot(41, distanceTravelled, 0.0)

def AddDistanceTravelled(builder, distanceTravelled):
    AIS_AbridgedAddDistanceTravelled(builder, distanceTravelled)

def AIS_AbridgedAddAvgSpeed(builder, avgSpeed):
    builder.PrependFloat64Slot(42, avgSpeed, 0.0)

def AddAvgSpeed(builder, avgSpeed):
    AIS_AbridgedAddAvgSpeed(builder, avgSpeed)

def AIS_AbridgedAddMaxSpeed(builder, maxSpeed):
    builder.PrependFloat64Slot(43, maxSpeed, 0.0)

def AddMaxSpeed(builder, maxSpeed):
    AIS_AbridgedAddMaxSpeed(builder, maxSpeed)

def AIS_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AIS_AbridgedAddCreatedAt(builder, createdAt)

def AIS_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AIS_AbridgedAddCreatedBy(builder, createdBy)

def AIS_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AIS_AbridgedAddSource(builder, source)

def AIS_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AIS_AbridgedAddSourceDl(builder, sourceDl)

def AIS_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AIS_AbridgedAddOrigin(builder, origin)

def AIS_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(49, dataMode, 0)

def AddDataMode(builder, dataMode):
    AIS_AbridgedAddDataMode(builder, dataMode)

def AIS_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AIS_AbridgedAddOrigNetwork(builder, origNetwork)

def AIS_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AIS_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AIS_AbridgedT(object):

    # AIS_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idTrack = None  # type: str
        self.idVessel = None  # type: str
        self.mmsi = 0  # type: int
        self.imon = 0  # type: int
        self.ts = None  # type: str
        self.shipName = None  # type: str
        self.shipType = None  # type: str
        self.engagedIn = None  # type: str
        self.specialCraft = None  # type: str
        self.cargoType = None  # type: str
        self.callSign = None  # type: str
        self.vesselFlag = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.posHiAccuracy = False  # type: bool
        self.posHiLatency = False  # type: bool
        self.speed = 0.0  # type: float
        self.trueHeading = 0.0  # type: float
        self.course = 0.0  # type: float
        self.rateOfTurn = 0.0  # type: float
        self.specialManeuver = False  # type: bool
        self.navStatus = None  # type: str
        self.posDeviceType = None  # type: str
        self.antennaRefDimensions = None  # type: List[str]
        self.length = 0.0  # type: float
        self.width = 0.0  # type: float
        self.draught = 0.0  # type: float
        self.shipDescription = None  # type: str
        self.destination = None  # type: str
        self.destinationEta = None  # type: str
        self.currentPortGuid = None  # type: str
        self.currentPortLocode = None  # type: str
        self.lastPortGuid = None  # type: str
        self.lastPortLocode = None  # type: str
        self.nextPortGuid = None  # type: str
        self.nextPortLocode = None  # type: str
        self.etaCalculated = None  # type: str
        self.etaUpdated = None  # type: str
        self.distanceToGo = 0.0  # type: float
        self.distanceTravelled = 0.0  # type: float
        self.avgSpeed = 0.0  # type: float
        self.maxSpeed = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.sourceDl = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aisAbridged = AIS_Abridged()
        aisAbridged.Init(buf, pos)
        return cls.InitFromObj(aisAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aisAbridged):
        x = AIS_AbridgedT()
        x._UnPack(aisAbridged)
        return x

    # AIS_AbridgedT
    def _UnPack(self, aisAbridged):
        if aisAbridged is None:
            return
        self.id = aisAbridged.Id()
        self.classificationMarking = aisAbridged.ClassificationMarking()
        self.idTrack = aisAbridged.IdTrack()
        self.idVessel = aisAbridged.IdVessel()
        self.mmsi = aisAbridged.Mmsi()
        self.imon = aisAbridged.Imon()
        self.ts = aisAbridged.Ts()
        self.shipName = aisAbridged.ShipName()
        self.shipType = aisAbridged.ShipType()
        self.engagedIn = aisAbridged.EngagedIn()
        self.specialCraft = aisAbridged.SpecialCraft()
        self.cargoType = aisAbridged.CargoType()
        self.callSign = aisAbridged.CallSign()
        self.vesselFlag = aisAbridged.VesselFlag()
        self.lat = aisAbridged.Lat()
        self.lon = aisAbridged.Lon()
        self.posHiAccuracy = aisAbridged.PosHiAccuracy()
        self.posHiLatency = aisAbridged.PosHiLatency()
        self.speed = aisAbridged.Speed()
        self.trueHeading = aisAbridged.TrueHeading()
        self.course = aisAbridged.Course()
        self.rateOfTurn = aisAbridged.RateOfTurn()
        self.specialManeuver = aisAbridged.SpecialManeuver()
        self.navStatus = aisAbridged.NavStatus()
        self.posDeviceType = aisAbridged.PosDeviceType()
        if not aisAbridged.AntennaRefDimensionsIsNone():
            self.antennaRefDimensions = []
            for i in range(aisAbridged.AntennaRefDimensionsLength()):
                self.antennaRefDimensions.append(aisAbridged.AntennaRefDimensions(i))
        self.length = aisAbridged.Length()
        self.width = aisAbridged.Width()
        self.draught = aisAbridged.Draught()
        self.shipDescription = aisAbridged.ShipDescription()
        self.destination = aisAbridged.Destination()
        self.destinationEta = aisAbridged.DestinationEta()
        self.currentPortGuid = aisAbridged.CurrentPortGuid()
        self.currentPortLocode = aisAbridged.CurrentPortLocode()
        self.lastPortGuid = aisAbridged.LastPortGuid()
        self.lastPortLocode = aisAbridged.LastPortLocode()
        self.nextPortGuid = aisAbridged.NextPortGuid()
        self.nextPortLocode = aisAbridged.NextPortLocode()
        self.etaCalculated = aisAbridged.EtaCalculated()
        self.etaUpdated = aisAbridged.EtaUpdated()
        self.distanceToGo = aisAbridged.DistanceToGo()
        self.distanceTravelled = aisAbridged.DistanceTravelled()
        self.avgSpeed = aisAbridged.AvgSpeed()
        self.maxSpeed = aisAbridged.MaxSpeed()
        self.createdAt = aisAbridged.CreatedAt()
        self.createdBy = aisAbridged.CreatedBy()
        self.source = aisAbridged.Source()
        self.sourceDl = aisAbridged.SourceDl()
        self.origin = aisAbridged.Origin()
        self.dataMode = aisAbridged.DataMode()
        self.origNetwork = aisAbridged.OrigNetwork()

    # AIS_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idTrack is not None:
            idTrack = builder.CreateString(self.idTrack)
        if self.idVessel is not None:
            idVessel = builder.CreateString(self.idVessel)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.shipName is not None:
            shipName = builder.CreateString(self.shipName)
        if self.shipType is not None:
            shipType = builder.CreateString(self.shipType)
        if self.engagedIn is not None:
            engagedIn = builder.CreateString(self.engagedIn)
        if self.specialCraft is not None:
            specialCraft = builder.CreateString(self.specialCraft)
        if self.cargoType is not None:
            cargoType = builder.CreateString(self.cargoType)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.vesselFlag is not None:
            vesselFlag = builder.CreateString(self.vesselFlag)
        if self.navStatus is not None:
            navStatus = builder.CreateString(self.navStatus)
        if self.posDeviceType is not None:
            posDeviceType = builder.CreateString(self.posDeviceType)
        if self.antennaRefDimensions is not None:
            antennaRefDimensionslist = []
            for i in range(len(self.antennaRefDimensions)):
                antennaRefDimensionslist.append(builder.CreateString(self.antennaRefDimensions[i]))
            AIS_AbridgedStartAntennaRefDimensionsVector(builder, len(self.antennaRefDimensions))
            for i in reversed(range(len(self.antennaRefDimensions))):
                builder.PrependUOffsetTRelative(antennaRefDimensionslist[i])
            antennaRefDimensions = builder.EndVector()
        if self.shipDescription is not None:
            shipDescription = builder.CreateString(self.shipDescription)
        if self.destination is not None:
            destination = builder.CreateString(self.destination)
        if self.destinationEta is not None:
            destinationEta = builder.CreateString(self.destinationEta)
        if self.currentPortGuid is not None:
            currentPortGuid = builder.CreateString(self.currentPortGuid)
        if self.currentPortLocode is not None:
            currentPortLocode = builder.CreateString(self.currentPortLocode)
        if self.lastPortGuid is not None:
            lastPortGuid = builder.CreateString(self.lastPortGuid)
        if self.lastPortLocode is not None:
            lastPortLocode = builder.CreateString(self.lastPortLocode)
        if self.nextPortGuid is not None:
            nextPortGuid = builder.CreateString(self.nextPortGuid)
        if self.nextPortLocode is not None:
            nextPortLocode = builder.CreateString(self.nextPortLocode)
        if self.etaCalculated is not None:
            etaCalculated = builder.CreateString(self.etaCalculated)
        if self.etaUpdated is not None:
            etaUpdated = builder.CreateString(self.etaUpdated)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AIS_AbridgedStart(builder)
        if self.id is not None:
            AIS_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AIS_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idTrack is not None:
            AIS_AbridgedAddIdTrack(builder, idTrack)
        if self.idVessel is not None:
            AIS_AbridgedAddIdVessel(builder, idVessel)
        AIS_AbridgedAddMmsi(builder, self.mmsi)
        AIS_AbridgedAddImon(builder, self.imon)
        if self.ts is not None:
            AIS_AbridgedAddTs(builder, ts)
        if self.shipName is not None:
            AIS_AbridgedAddShipName(builder, shipName)
        if self.shipType is not None:
            AIS_AbridgedAddShipType(builder, shipType)
        if self.engagedIn is not None:
            AIS_AbridgedAddEngagedIn(builder, engagedIn)
        if self.specialCraft is not None:
            AIS_AbridgedAddSpecialCraft(builder, specialCraft)
        if self.cargoType is not None:
            AIS_AbridgedAddCargoType(builder, cargoType)
        if self.callSign is not None:
            AIS_AbridgedAddCallSign(builder, callSign)
        if self.vesselFlag is not None:
            AIS_AbridgedAddVesselFlag(builder, vesselFlag)
        AIS_AbridgedAddLat(builder, self.lat)
        AIS_AbridgedAddLon(builder, self.lon)
        AIS_AbridgedAddPosHiAccuracy(builder, self.posHiAccuracy)
        AIS_AbridgedAddPosHiLatency(builder, self.posHiLatency)
        AIS_AbridgedAddSpeed(builder, self.speed)
        AIS_AbridgedAddTrueHeading(builder, self.trueHeading)
        AIS_AbridgedAddCourse(builder, self.course)
        AIS_AbridgedAddRateOfTurn(builder, self.rateOfTurn)
        AIS_AbridgedAddSpecialManeuver(builder, self.specialManeuver)
        if self.navStatus is not None:
            AIS_AbridgedAddNavStatus(builder, navStatus)
        if self.posDeviceType is not None:
            AIS_AbridgedAddPosDeviceType(builder, posDeviceType)
        if self.antennaRefDimensions is not None:
            AIS_AbridgedAddAntennaRefDimensions(builder, antennaRefDimensions)
        AIS_AbridgedAddLength(builder, self.length)
        AIS_AbridgedAddWidth(builder, self.width)
        AIS_AbridgedAddDraught(builder, self.draught)
        if self.shipDescription is not None:
            AIS_AbridgedAddShipDescription(builder, shipDescription)
        if self.destination is not None:
            AIS_AbridgedAddDestination(builder, destination)
        if self.destinationEta is not None:
            AIS_AbridgedAddDestinationEta(builder, destinationEta)
        if self.currentPortGuid is not None:
            AIS_AbridgedAddCurrentPortGuid(builder, currentPortGuid)
        if self.currentPortLocode is not None:
            AIS_AbridgedAddCurrentPortLocode(builder, currentPortLocode)
        if self.lastPortGuid is not None:
            AIS_AbridgedAddLastPortGuid(builder, lastPortGuid)
        if self.lastPortLocode is not None:
            AIS_AbridgedAddLastPortLocode(builder, lastPortLocode)
        if self.nextPortGuid is not None:
            AIS_AbridgedAddNextPortGuid(builder, nextPortGuid)
        if self.nextPortLocode is not None:
            AIS_AbridgedAddNextPortLocode(builder, nextPortLocode)
        if self.etaCalculated is not None:
            AIS_AbridgedAddEtaCalculated(builder, etaCalculated)
        if self.etaUpdated is not None:
            AIS_AbridgedAddEtaUpdated(builder, etaUpdated)
        AIS_AbridgedAddDistanceToGo(builder, self.distanceToGo)
        AIS_AbridgedAddDistanceTravelled(builder, self.distanceTravelled)
        AIS_AbridgedAddAvgSpeed(builder, self.avgSpeed)
        AIS_AbridgedAddMaxSpeed(builder, self.maxSpeed)
        if self.createdAt is not None:
            AIS_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AIS_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            AIS_AbridgedAddSource(builder, source)
        if self.sourceDl is not None:
            AIS_AbridgedAddSourceDl(builder, sourceDl)
        if self.origin is not None:
            AIS_AbridgedAddOrigin(builder, origin)
        AIS_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AIS_AbridgedAddOrigNetwork(builder, origNetwork)
        aisAbridged = AIS_AbridgedEnd(builder)
        return aisAbridged
