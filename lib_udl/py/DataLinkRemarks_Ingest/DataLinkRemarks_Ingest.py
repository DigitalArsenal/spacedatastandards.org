# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of remarks associated with this data link message.
class DataLinkRemarks_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkRemarks_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkRemarks_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkRemarks_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkRemarks_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Indicates the subject matter of the remark.
    # Example: /// Example: CONTINGENCY PROCEDURES
    # Constraints: Minimum length = 0, Maximum length = 64
    # DataLinkRemarks_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text of the remark.
    # Example: /// Example: Example data link remarks
    # Constraints: Minimum length = 0, Maximum length = 128
    # DataLinkRemarks_Ingest
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataLinkRemarks_IngestStart(builder):
    builder.StartObject(2)

def Start(builder):
    DataLinkRemarks_IngestStart(builder)

def DataLinkRemarks_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    DataLinkRemarks_IngestAddType(builder, type)

def DataLinkRemarks_IngestAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    DataLinkRemarks_IngestAddText(builder, text)

def DataLinkRemarks_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkRemarks_IngestEnd(builder)


class DataLinkRemarks_IngestT(object):

    # DataLinkRemarks_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkRemarksIngest = DataLinkRemarks_Ingest()
        dataLinkRemarksIngest.Init(buf, pos)
        return cls.InitFromObj(dataLinkRemarksIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkRemarksIngest):
        x = DataLinkRemarks_IngestT()
        x._UnPack(dataLinkRemarksIngest)
        return x

    # DataLinkRemarks_IngestT
    def _UnPack(self, dataLinkRemarksIngest):
        if dataLinkRemarksIngest is None:
            return
        self.type = dataLinkRemarksIngest.Type()
        self.text = dataLinkRemarksIngest.Text()

    # DataLinkRemarks_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.text is not None:
            text = builder.CreateString(self.text)
        DataLinkRemarks_IngestStart(builder)
        if self.type is not None:
            DataLinkRemarks_IngestAddType(builder, type)
        if self.text is not None:
            DataLinkRemarks_IngestAddText(builder, text)
        dataLinkRemarksIngest = DataLinkRemarks_IngestEnd(builder)
        return dataLinkRemarksIngest
