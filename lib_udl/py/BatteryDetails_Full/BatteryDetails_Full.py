# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
class BatteryDetails_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BatteryDetails_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBatteryDetails_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BatteryDetails_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x41\x54\x54", size_prefixed=size_prefixed)

    # BatteryDetails_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BATTERYDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BatteryDetails_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent battery type record.
    # Example: /// Example: BATTERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BatteryDetails_Full
    def IdBattery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # BatteryDetails_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
    # Example: /// Example: Ni-Cd
    # Constraints: Minimum length = 0, Maximum length = 32
    # BatteryDetails_Full
    def Technology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery capacity in Ah.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # BatteryDetails_Full
    def Capacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Depth of discharge as a percentage/fraction.
    # Example: /// Example: 0.2
    # Constraints: No constraints specified.
    # BatteryDetails_Full
    def DischargeDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Battery model number or name.
    # Example: /// Example: 11212
    # Constraints: Minimum length = 0, Maximum length = 128
    # BatteryDetails_Full
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery description/notes.
    # Example: /// Example: example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # BatteryDetails_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the organization that manufactures the battery.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # BatteryDetails_Full
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # BatteryDetails_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # BatteryDetails_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # BatteryDetails_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # BatteryDetails_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # BatteryDetails_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # BatteryDetails_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # BatteryDetails_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # BatteryDetails_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # BatteryDetails_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # BatteryDetails_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BatteryDetails_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # BatteryDetails_Full
    def ManufacturerOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BatteryDetails_FullStart(builder):
    builder.StartObject(19)

def Start(builder):
    BatteryDetails_FullStart(builder)

def BatteryDetails_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    BatteryDetails_FullAddId(builder, id)

def BatteryDetails_FullAddIdBattery(builder, idBattery):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idBattery), 0)

def AddIdBattery(builder, idBattery):
    BatteryDetails_FullAddIdBattery(builder, idBattery)

def BatteryDetails_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    BatteryDetails_FullAddClassificationMarking(builder, classificationMarking)

def BatteryDetails_FullAddTechnology(builder, technology):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(technology), 0)

def AddTechnology(builder, technology):
    BatteryDetails_FullAddTechnology(builder, technology)

def BatteryDetails_FullAddCapacity(builder, capacity):
    builder.PrependFloat64Slot(4, capacity, 0.0)

def AddCapacity(builder, capacity):
    BatteryDetails_FullAddCapacity(builder, capacity)

def BatteryDetails_FullAddDischargeDepth(builder, dischargeDepth):
    builder.PrependFloat64Slot(5, dischargeDepth, 0.0)

def AddDischargeDepth(builder, dischargeDepth):
    BatteryDetails_FullAddDischargeDepth(builder, dischargeDepth)

def BatteryDetails_FullAddModel(builder, model):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(model), 0)

def AddModel(builder, model):
    BatteryDetails_FullAddModel(builder, model)

def BatteryDetails_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    BatteryDetails_FullAddDescription(builder, description)

def BatteryDetails_FullAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    BatteryDetails_FullAddManufacturerOrgId(builder, manufacturerOrgId)

def BatteryDetails_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    BatteryDetails_FullAddCreatedAt(builder, createdAt)

def BatteryDetails_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    BatteryDetails_FullAddCreatedBy(builder, createdBy)

def BatteryDetails_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    BatteryDetails_FullAddUpdatedAt(builder, updatedAt)

def BatteryDetails_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    BatteryDetails_FullAddUpdatedBy(builder, updatedBy)

def BatteryDetails_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    BatteryDetails_FullAddSource(builder, source)

def BatteryDetails_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    BatteryDetails_FullAddOrigin(builder, origin)

def BatteryDetails_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    BatteryDetails_FullAddOrigNetwork(builder, origNetwork)

def BatteryDetails_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(16, dataMode, 0)

def AddDataMode(builder, dataMode):
    BatteryDetails_FullAddDataMode(builder, dataMode)

def BatteryDetails_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    BatteryDetails_FullAddTags(builder, tags)

def BatteryDetails_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return BatteryDetails_FullStartTagsVector(builder, numElems)

def BatteryDetails_FullAddManufacturerOrg(builder, manufacturerOrg):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrg), 0)

def AddManufacturerOrg(builder, manufacturerOrg):
    BatteryDetails_FullAddManufacturerOrg(builder, manufacturerOrg)

def BatteryDetails_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return BatteryDetails_FullEnd(builder)

try:
    from typing import List
except:
    pass

class BatteryDetails_FullT(object):

    # BatteryDetails_FullT
    def __init__(self):
        self.id = None  # type: str
        self.idBattery = None  # type: str
        self.classificationMarking = None  # type: str
        self.technology = None  # type: str
        self.capacity = 0.0  # type: float
        self.dischargeDepth = 0.0  # type: float
        self.model = None  # type: str
        self.description = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.manufacturerOrg = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        batteryDetailsFull = BatteryDetails_Full()
        batteryDetailsFull.Init(buf, pos)
        return cls.InitFromObj(batteryDetailsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, batteryDetailsFull):
        x = BatteryDetails_FullT()
        x._UnPack(batteryDetailsFull)
        return x

    # BatteryDetails_FullT
    def _UnPack(self, batteryDetailsFull):
        if batteryDetailsFull is None:
            return
        self.id = batteryDetailsFull.Id()
        self.idBattery = batteryDetailsFull.IdBattery()
        self.classificationMarking = batteryDetailsFull.ClassificationMarking()
        self.technology = batteryDetailsFull.Technology()
        self.capacity = batteryDetailsFull.Capacity()
        self.dischargeDepth = batteryDetailsFull.DischargeDepth()
        self.model = batteryDetailsFull.Model()
        self.description = batteryDetailsFull.Description()
        self.manufacturerOrgId = batteryDetailsFull.ManufacturerOrgId()
        self.createdAt = batteryDetailsFull.CreatedAt()
        self.createdBy = batteryDetailsFull.CreatedBy()
        self.updatedAt = batteryDetailsFull.UpdatedAt()
        self.updatedBy = batteryDetailsFull.UpdatedBy()
        self.source = batteryDetailsFull.Source()
        self.origin = batteryDetailsFull.Origin()
        self.origNetwork = batteryDetailsFull.OrigNetwork()
        self.dataMode = batteryDetailsFull.DataMode()
        if not batteryDetailsFull.TagsIsNone():
            self.tags = []
            for i in range(batteryDetailsFull.TagsLength()):
                self.tags.append(batteryDetailsFull.Tags(i))
        self.manufacturerOrg = batteryDetailsFull.ManufacturerOrg()

    # BatteryDetails_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idBattery is not None:
            idBattery = builder.CreateString(self.idBattery)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.technology is not None:
            technology = builder.CreateString(self.technology)
        if self.model is not None:
            model = builder.CreateString(self.model)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            BatteryDetails_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.manufacturerOrg is not None:
            manufacturerOrg = builder.CreateString(self.manufacturerOrg)
        BatteryDetails_FullStart(builder)
        if self.id is not None:
            BatteryDetails_FullAddId(builder, id)
        if self.idBattery is not None:
            BatteryDetails_FullAddIdBattery(builder, idBattery)
        if self.classificationMarking is not None:
            BatteryDetails_FullAddClassificationMarking(builder, classificationMarking)
        if self.technology is not None:
            BatteryDetails_FullAddTechnology(builder, technology)
        BatteryDetails_FullAddCapacity(builder, self.capacity)
        BatteryDetails_FullAddDischargeDepth(builder, self.dischargeDepth)
        if self.model is not None:
            BatteryDetails_FullAddModel(builder, model)
        if self.description is not None:
            BatteryDetails_FullAddDescription(builder, description)
        if self.manufacturerOrgId is not None:
            BatteryDetails_FullAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.createdAt is not None:
            BatteryDetails_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            BatteryDetails_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            BatteryDetails_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            BatteryDetails_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            BatteryDetails_FullAddSource(builder, source)
        if self.origin is not None:
            BatteryDetails_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            BatteryDetails_FullAddOrigNetwork(builder, origNetwork)
        BatteryDetails_FullAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            BatteryDetails_FullAddTags(builder, tags)
        if self.manufacturerOrg is not None:
            BatteryDetails_FullAddManufacturerOrg(builder, manufacturerOrg)
        batteryDetailsFull = BatteryDetails_FullEnd(builder)
        return batteryDetailsFull
