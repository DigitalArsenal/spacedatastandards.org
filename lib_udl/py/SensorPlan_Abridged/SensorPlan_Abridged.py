# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
class SensorPlan_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SensorPlan_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorPlan_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SensorPlan_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # SensorPlan_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSORPLAN-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorPlan_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SensorPlan_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
    # Example: /// Example: PLAN
    # Constraints: Minimum length = 1, Maximum length = 12
    # SensorPlan_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of records that comprise this parent set (COLLECT, CONTACT).
    # Example: /// Example: COLLECT
    # Constraints: Minimum length = 1, Maximum length = 12
    # SensorPlan_Abridged
    def RecType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start time of the plan or schedule, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SensorPlan_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the plan or schedule, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SensorPlan_Abridged
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name associated with this plan or schedule.
    # Example: /// Example: EXAMPLE NAME
    # Constraints: Minimum length = 0, Maximum length = 24
    # SensorPlan_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the requested/schedule/planned sensor associated with this request.
    # Example: /// Example: REF-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SensorPlan_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The purpose/description of this plan or schedule.
    # Example: /// Example: Example purpose
    # Constraints: Minimum length = 0, Maximum length = 256
    # SensorPlan_Abridged
    def Purpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sensor or ground network associated with this plan or schedule.
    # Example: /// Example: NETWORK
    # Constraints: Minimum length = 0, Maximum length = 24
    # SensorPlan_Abridged
    def SenNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SensorPlan_Abridged
    def ReqTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The customer for this plan or schedule.
    # Example: /// Example: CUSTOMER
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Abridged
    def Customer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
    # Example: /// Example: ACCEPTED
    # Constraints: Minimum length = 0, Maximum length = 24
    # SensorPlan_Abridged
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorPlan_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SensorPlan_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorPlan_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SensorPlan_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # SensorPlan_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SensorPlan_AbridgedStart(builder):
    builder.StartObject(20)

def Start(builder):
    SensorPlan_AbridgedStart(builder)

def SensorPlan_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SensorPlan_AbridgedAddId(builder, id)

def SensorPlan_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SensorPlan_AbridgedAddClassificationMarking(builder, classificationMarking)

def SensorPlan_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    SensorPlan_AbridgedAddType(builder, type)

def SensorPlan_AbridgedAddRecType(builder, recType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(recType), 0)

def AddRecType(builder, recType):
    SensorPlan_AbridgedAddRecType(builder, recType)

def SensorPlan_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    SensorPlan_AbridgedAddStartTime(builder, startTime)

def SensorPlan_AbridgedAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    SensorPlan_AbridgedAddEndTime(builder, endTime)

def SensorPlan_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SensorPlan_AbridgedAddName(builder, name)

def SensorPlan_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SensorPlan_AbridgedAddIdSensor(builder, idSensor)

def SensorPlan_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SensorPlan_AbridgedAddOrigSensorId(builder, origSensorId)

def SensorPlan_AbridgedAddPurpose(builder, purpose):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(purpose), 0)

def AddPurpose(builder, purpose):
    SensorPlan_AbridgedAddPurpose(builder, purpose)

def SensorPlan_AbridgedAddSenNetwork(builder, senNetwork):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(senNetwork), 0)

def AddSenNetwork(builder, senNetwork):
    SensorPlan_AbridgedAddSenNetwork(builder, senNetwork)

def SensorPlan_AbridgedAddReqTotal(builder, reqTotal):
    builder.PrependInt32Slot(11, reqTotal, 0)

def AddReqTotal(builder, reqTotal):
    SensorPlan_AbridgedAddReqTotal(builder, reqTotal)

def SensorPlan_AbridgedAddCustomer(builder, customer):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(customer), 0)

def AddCustomer(builder, customer):
    SensorPlan_AbridgedAddCustomer(builder, customer)

def SensorPlan_AbridgedAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    SensorPlan_AbridgedAddStatus(builder, status)

def SensorPlan_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SensorPlan_AbridgedAddCreatedAt(builder, createdAt)

def SensorPlan_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SensorPlan_AbridgedAddCreatedBy(builder, createdBy)

def SensorPlan_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SensorPlan_AbridgedAddSource(builder, source)

def SensorPlan_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SensorPlan_AbridgedAddOrigin(builder, origin)

def SensorPlan_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(18, dataMode, 0)

def AddDataMode(builder, dataMode):
    SensorPlan_AbridgedAddDataMode(builder, dataMode)

def SensorPlan_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SensorPlan_AbridgedAddOrigNetwork(builder, origNetwork)

def SensorPlan_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SensorPlan_AbridgedEnd(builder)


class SensorPlan_AbridgedT(object):

    # SensorPlan_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.recType = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.name = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.purpose = None  # type: str
        self.senNetwork = None  # type: str
        self.reqTotal = 0  # type: int
        self.customer = None  # type: str
        self.status = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorPlanAbridged = SensorPlan_Abridged()
        sensorPlanAbridged.Init(buf, pos)
        return cls.InitFromObj(sensorPlanAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorPlanAbridged):
        x = SensorPlan_AbridgedT()
        x._UnPack(sensorPlanAbridged)
        return x

    # SensorPlan_AbridgedT
    def _UnPack(self, sensorPlanAbridged):
        if sensorPlanAbridged is None:
            return
        self.id = sensorPlanAbridged.Id()
        self.classificationMarking = sensorPlanAbridged.ClassificationMarking()
        self.type = sensorPlanAbridged.Type()
        self.recType = sensorPlanAbridged.RecType()
        self.startTime = sensorPlanAbridged.StartTime()
        self.endTime = sensorPlanAbridged.EndTime()
        self.name = sensorPlanAbridged.Name()
        self.idSensor = sensorPlanAbridged.IdSensor()
        self.origSensorId = sensorPlanAbridged.OrigSensorId()
        self.purpose = sensorPlanAbridged.Purpose()
        self.senNetwork = sensorPlanAbridged.SenNetwork()
        self.reqTotal = sensorPlanAbridged.ReqTotal()
        self.customer = sensorPlanAbridged.Customer()
        self.status = sensorPlanAbridged.Status()
        self.createdAt = sensorPlanAbridged.CreatedAt()
        self.createdBy = sensorPlanAbridged.CreatedBy()
        self.source = sensorPlanAbridged.Source()
        self.origin = sensorPlanAbridged.Origin()
        self.dataMode = sensorPlanAbridged.DataMode()
        self.origNetwork = sensorPlanAbridged.OrigNetwork()

    # SensorPlan_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.recType is not None:
            recType = builder.CreateString(self.recType)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.purpose is not None:
            purpose = builder.CreateString(self.purpose)
        if self.senNetwork is not None:
            senNetwork = builder.CreateString(self.senNetwork)
        if self.customer is not None:
            customer = builder.CreateString(self.customer)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SensorPlan_AbridgedStart(builder)
        if self.id is not None:
            SensorPlan_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            SensorPlan_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            SensorPlan_AbridgedAddType(builder, type)
        if self.recType is not None:
            SensorPlan_AbridgedAddRecType(builder, recType)
        if self.startTime is not None:
            SensorPlan_AbridgedAddStartTime(builder, startTime)
        if self.endTime is not None:
            SensorPlan_AbridgedAddEndTime(builder, endTime)
        if self.name is not None:
            SensorPlan_AbridgedAddName(builder, name)
        if self.idSensor is not None:
            SensorPlan_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            SensorPlan_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.purpose is not None:
            SensorPlan_AbridgedAddPurpose(builder, purpose)
        if self.senNetwork is not None:
            SensorPlan_AbridgedAddSenNetwork(builder, senNetwork)
        SensorPlan_AbridgedAddReqTotal(builder, self.reqTotal)
        if self.customer is not None:
            SensorPlan_AbridgedAddCustomer(builder, customer)
        if self.status is not None:
            SensorPlan_AbridgedAddStatus(builder, status)
        if self.createdAt is not None:
            SensorPlan_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SensorPlan_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SensorPlan_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SensorPlan_AbridgedAddOrigin(builder, origin)
        SensorPlan_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            SensorPlan_AbridgedAddOrigNetwork(builder, origNetwork)
        sensorPlanAbridged = SensorPlan_AbridgedEnd(builder)
        return sensorPlanAbridged
