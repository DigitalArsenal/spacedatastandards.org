# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Data representing observed short wave infrared (SWIR) measurements.
class SWIR_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SWIR_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSWIR_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SWIR_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x57\x49\x52", size_prefixed=size_prefixed)

    # SWIR_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SWIR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SWIR_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SWIR_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object.
    # Example: /// Example: 45234
    # Constraints: Minimum length = 0, Maximum length = 36
    # SWIR_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data timestamp in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # SWIR_Abridged
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SWIR_Abridged
    def SolarPhaseAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 70.55208
    # Constraints: No constraints specified.
    # SWIR_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 81.18191
    # Constraints: No constraints specified.
    # SWIR_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Location/name of the observing sensor.
    # Example: /// Example: AeroTel
    # Constraints: Minimum length = 0, Maximum length = 64
    # SWIR_Abridged
    def LocationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User comments concerning sensor or data limitations.
    # Example: /// Example: Example Comments
    # Constraints: Minimum length = 0, Maximum length = 64
    # SWIR_Abridged
    def BadWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Original object ID or Catalog Number provided by source.
    # Example: /// Example: WildBlue-1
    # Constraints: Minimum length = 0, Maximum length = 36
    # SWIR_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SWIR_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SWIR_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 25544
    # Constraints: No constraints specified.
    # SWIR_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SWIR_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SWIR_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SWIR_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SWIR_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SWIR_AbridgedStart(builder):
    builder.StartObject(17)

def Start(builder):
    SWIR_AbridgedStart(builder)

def SWIR_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SWIR_AbridgedAddId(builder, id)

def SWIR_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SWIR_AbridgedAddClassificationMarking(builder, classificationMarking)

def SWIR_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    SWIR_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def SWIR_AbridgedAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    SWIR_AbridgedAddTs(builder, ts)

def SWIR_AbridgedAddSolarPhaseAngle(builder, solarPhaseAngle):
    builder.PrependFloat64Slot(4, solarPhaseAngle, 0.0)

def AddSolarPhaseAngle(builder, solarPhaseAngle):
    SWIR_AbridgedAddSolarPhaseAngle(builder, solarPhaseAngle)

def SWIR_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(5, lat, 0.0)

def AddLat(builder, lat):
    SWIR_AbridgedAddLat(builder, lat)

def SWIR_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(6, lon, 0.0)

def AddLon(builder, lon):
    SWIR_AbridgedAddLon(builder, lon)

def SWIR_AbridgedAddLocationName(builder, locationName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(locationName), 0)

def AddLocationName(builder, locationName):
    SWIR_AbridgedAddLocationName(builder, locationName)

def SWIR_AbridgedAddBadWave(builder, badWave):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(badWave), 0)

def AddBadWave(builder, badWave):
    SWIR_AbridgedAddBadWave(builder, badWave)

def SWIR_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    SWIR_AbridgedAddOrigObjectId(builder, origObjectId)

def SWIR_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SWIR_AbridgedAddSource(builder, source)

def SWIR_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SWIR_AbridgedAddOrigin(builder, origin)

def SWIR_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(12, satNo, 0)

def AddSatNo(builder, satNo):
    SWIR_AbridgedAddSatNo(builder, satNo)

def SWIR_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(13, dataMode, 0)

def AddDataMode(builder, dataMode):
    SWIR_AbridgedAddDataMode(builder, dataMode)

def SWIR_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SWIR_AbridgedAddCreatedAt(builder, createdAt)

def SWIR_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SWIR_AbridgedAddCreatedBy(builder, createdBy)

def SWIR_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SWIR_AbridgedAddOrigNetwork(builder, origNetwork)

def SWIR_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SWIR_AbridgedEnd(builder)


class SWIR_AbridgedT(object):

    # SWIR_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.ts = None  # type: str
        self.solarPhaseAngle = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.locationName = None  # type: str
        self.badWave = None  # type: str
        self.origObjectId = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.satNo = 0  # type: int
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        swirAbridged = SWIR_Abridged()
        swirAbridged.Init(buf, pos)
        return cls.InitFromObj(swirAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, swirAbridged):
        x = SWIR_AbridgedT()
        x._UnPack(swirAbridged)
        return x

    # SWIR_AbridgedT
    def _UnPack(self, swirAbridged):
        if swirAbridged is None:
            return
        self.id = swirAbridged.Id()
        self.classificationMarking = swirAbridged.ClassificationMarking()
        self.idOnOrbit = swirAbridged.IdOnOrbit()
        self.ts = swirAbridged.Ts()
        self.solarPhaseAngle = swirAbridged.SolarPhaseAngle()
        self.lat = swirAbridged.Lat()
        self.lon = swirAbridged.Lon()
        self.locationName = swirAbridged.LocationName()
        self.badWave = swirAbridged.BadWave()
        self.origObjectId = swirAbridged.OrigObjectId()
        self.source = swirAbridged.Source()
        self.origin = swirAbridged.Origin()
        self.satNo = swirAbridged.SatNo()
        self.dataMode = swirAbridged.DataMode()
        self.createdAt = swirAbridged.CreatedAt()
        self.createdBy = swirAbridged.CreatedBy()
        self.origNetwork = swirAbridged.OrigNetwork()

    # SWIR_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.locationName is not None:
            locationName = builder.CreateString(self.locationName)
        if self.badWave is not None:
            badWave = builder.CreateString(self.badWave)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SWIR_AbridgedStart(builder)
        if self.id is not None:
            SWIR_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            SWIR_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            SWIR_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.ts is not None:
            SWIR_AbridgedAddTs(builder, ts)
        SWIR_AbridgedAddSolarPhaseAngle(builder, self.solarPhaseAngle)
        SWIR_AbridgedAddLat(builder, self.lat)
        SWIR_AbridgedAddLon(builder, self.lon)
        if self.locationName is not None:
            SWIR_AbridgedAddLocationName(builder, locationName)
        if self.badWave is not None:
            SWIR_AbridgedAddBadWave(builder, badWave)
        if self.origObjectId is not None:
            SWIR_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.source is not None:
            SWIR_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SWIR_AbridgedAddOrigin(builder, origin)
        SWIR_AbridgedAddSatNo(builder, self.satNo)
        SWIR_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            SWIR_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SWIR_AbridgedAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            SWIR_AbridgedAddOrigNetwork(builder, origNetwork)
        swirAbridged = SWIR_AbridgedEnd(builder)
        return swirAbridged
