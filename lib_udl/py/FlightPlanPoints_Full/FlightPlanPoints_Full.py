# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Array of point data for this Point Group.
class FlightPlanPoints_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlanPoints_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlanPoints_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlanPoints_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlanPoints_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of this point.
    # Example: /// Example: CRUISE ALTITUDE ETP
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlanPoints_Full
    def PointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # FlightPlanPoints_Full
    def FppLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # FlightPlanPoints_Full
    def FppLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-09-09T01:00:00.123Z
    # Constraints: No constraints specified.
    # FlightPlanPoints_Full
    def FppEta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
    # Example: /// Example: 4250.1
    # Constraints: No constraints specified.
    # FlightPlanPoints_Full
    def FppReqFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def FlightPlanPoints_FullStart(builder):
    builder.StartObject(5)

def Start(builder):
    FlightPlanPoints_FullStart(builder)

def FlightPlanPoints_FullAddPointName(builder, pointName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pointName), 0)

def AddPointName(builder, pointName):
    FlightPlanPoints_FullAddPointName(builder, pointName)

def FlightPlanPoints_FullAddFppLat(builder, fppLat):
    builder.PrependFloat64Slot(1, fppLat, 0.0)

def AddFppLat(builder, fppLat):
    FlightPlanPoints_FullAddFppLat(builder, fppLat)

def FlightPlanPoints_FullAddFppLon(builder, fppLon):
    builder.PrependFloat64Slot(2, fppLon, 0.0)

def AddFppLon(builder, fppLon):
    FlightPlanPoints_FullAddFppLon(builder, fppLon)

def FlightPlanPoints_FullAddFppEta(builder, fppEta):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fppEta), 0)

def AddFppEta(builder, fppEta):
    FlightPlanPoints_FullAddFppEta(builder, fppEta)

def FlightPlanPoints_FullAddFppReqFuel(builder, fppReqFuel):
    builder.PrependFloat64Slot(4, fppReqFuel, 0.0)

def AddFppReqFuel(builder, fppReqFuel):
    FlightPlanPoints_FullAddFppReqFuel(builder, fppReqFuel)

def FlightPlanPoints_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlanPoints_FullEnd(builder)


class FlightPlanPoints_FullT(object):

    # FlightPlanPoints_FullT
    def __init__(self):
        self.pointName = None  # type: str
        self.fppLat = 0.0  # type: float
        self.fppLon = 0.0  # type: float
        self.fppEta = None  # type: str
        self.fppReqFuel = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanPointsFull = FlightPlanPoints_Full()
        flightPlanPointsFull.Init(buf, pos)
        return cls.InitFromObj(flightPlanPointsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanPointsFull):
        x = FlightPlanPoints_FullT()
        x._UnPack(flightPlanPointsFull)
        return x

    # FlightPlanPoints_FullT
    def _UnPack(self, flightPlanPointsFull):
        if flightPlanPointsFull is None:
            return
        self.pointName = flightPlanPointsFull.PointName()
        self.fppLat = flightPlanPointsFull.FppLat()
        self.fppLon = flightPlanPointsFull.FppLon()
        self.fppEta = flightPlanPointsFull.FppEta()
        self.fppReqFuel = flightPlanPointsFull.FppReqFuel()

    # FlightPlanPoints_FullT
    def Pack(self, builder):
        if self.pointName is not None:
            pointName = builder.CreateString(self.pointName)
        if self.fppEta is not None:
            fppEta = builder.CreateString(self.fppEta)
        FlightPlanPoints_FullStart(builder)
        if self.pointName is not None:
            FlightPlanPoints_FullAddPointName(builder, pointName)
        FlightPlanPoints_FullAddFppLat(builder, self.fppLat)
        FlightPlanPoints_FullAddFppLon(builder, self.fppLon)
        if self.fppEta is not None:
            FlightPlanPoints_FullAddFppEta(builder, fppEta)
        FlightPlanPoints_FullAddFppReqFuel(builder, self.fppReqFuel)
        flightPlanPointsFull = FlightPlanPoints_FullEnd(builder)
        return flightPlanPointsFull
