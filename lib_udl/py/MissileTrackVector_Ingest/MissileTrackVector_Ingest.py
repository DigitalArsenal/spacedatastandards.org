# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for Missile Track Vector data.
class MissileTrackVector_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MissileTrackVector_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMissileTrackVector_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MissileTrackVector_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x49\x53\x53", size_prefixed=size_prefixed)

    # MissileTrackVector_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of vector represented (e.g. LOS, PREDICTED, STATE).
    # Example: /// Example: STATE
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissileTrackVector_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Object to which this vector applies.
    # Example: /// Example: TARGET
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissileTrackVector_Ingest
    def Object(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vector timestamp in ISO8601 UTC format, with microsecond precision.
    # Example: /// Example: 2024-03-30T15:02:39.346768Z
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Epoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor of the object.
    # Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
    # Constraints: Minimum length = 0, Maximum length = 36
    # MissileTrackVector_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 46
    # MissileTrackVector_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
    # Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrackVector_Ingest
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrackVector_Ingest
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
    # Example: /// Example: [-1.21981, -6.60208, -3.36515]
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Vel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrackVector_Ingest
    def VelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrackVector_Ingest
    def VelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
    # Example: /// Example: [0.59236, -0.03537, 0.35675]
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Accel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrackVector_Ingest
    def AccelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrackVector_Ingest
    def AccelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Track object course, in degrees clockwise from true north.
    # Example: /// Example: 7.3580153
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Course(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track object speed, in kilometers/sec.
    # Example: /// Example: 15.03443
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Spd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
    # Example: /// Example: ECEF
    # Constraints: Minimum length = 0, Maximum length = 24
    # MissileTrackVector_Ingest
    def ReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
    # If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
    # The covariance elements are position dependent within the array with values ordered as follows:
    # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
    # x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
    # y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
    # z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
    # x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
    # y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
    # z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
    # x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
    # y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
    # z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
    # The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
    # Example: /// Example: [1.1, 2.2, 3.3]
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Cov(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrackVector_Ingest
    def CovLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrackVector_Ingest
    def CovIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
    # Example: /// Example: ECEF
    # Constraints: Minimum length = 0, Maximum length = 24
    # MissileTrackVector_Ingest
    def CovReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.0
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def VectorLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 150.0
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def VectorLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
    # Example: /// Example: 25.0
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def VectorAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Confidence of the vector, 0-100.
    # Example: /// Example: 100
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Confidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Status of the vector (e.g. INITIAL, UPDATE).
    # Example: /// Example: INITIAL
    # Constraints: Minimum length = 0, Maximum length = 24
    # MissileTrackVector_Ingest
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the time value.
    # Example: /// Example: Sensor 1
    # Constraints: Minimum length = 0, Maximum length = 24
    # MissileTrackVector_Ingest
    def TimeSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
    # Example: /// Example: [0.03, 0.02, 0.01, 0.012]
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def Quat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrackVector_Ingest
    def QuatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrackVector_Ingest
    def QuatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # The flight azimuth associated with the current state vector (0-360 degrees).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # MissileTrackVector_Ingest
    def FlightAz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def MissileTrackVector_IngestStart(builder):
    builder.StartObject(21)

def Start(builder):
    MissileTrackVector_IngestStart(builder)

def MissileTrackVector_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    MissileTrackVector_IngestAddType(builder, type)

def MissileTrackVector_IngestAddObject(builder, object):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(object), 0)

def AddObject(builder, object):
    MissileTrackVector_IngestAddObject(builder, object)

def MissileTrackVector_IngestAddEpoch(builder, epoch):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(epoch), 0)

def AddEpoch(builder, epoch):
    MissileTrackVector_IngestAddEpoch(builder, epoch)

def MissileTrackVector_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    MissileTrackVector_IngestAddIdSensor(builder, idSensor)

def MissileTrackVector_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    MissileTrackVector_IngestAddOrigSensorId(builder, origSensorId)

def MissileTrackVector_IngestAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def AddPos(builder, pos):
    MissileTrackVector_IngestAddPos(builder, pos)

def MissileTrackVector_IngestStartPosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPosVector(builder, numElems):
    return MissileTrackVector_IngestStartPosVector(builder, numElems)

def MissileTrackVector_IngestAddVel(builder, vel):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(vel), 0)

def AddVel(builder, vel):
    MissileTrackVector_IngestAddVel(builder, vel)

def MissileTrackVector_IngestStartVelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVelVector(builder, numElems):
    return MissileTrackVector_IngestStartVelVector(builder, numElems)

def MissileTrackVector_IngestAddAccel(builder, accel):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(accel), 0)

def AddAccel(builder, accel):
    MissileTrackVector_IngestAddAccel(builder, accel)

def MissileTrackVector_IngestStartAccelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAccelVector(builder, numElems):
    return MissileTrackVector_IngestStartAccelVector(builder, numElems)

def MissileTrackVector_IngestAddCourse(builder, course):
    builder.PrependFloat64Slot(8, course, 0.0)

def AddCourse(builder, course):
    MissileTrackVector_IngestAddCourse(builder, course)

def MissileTrackVector_IngestAddSpd(builder, spd):
    builder.PrependFloat64Slot(9, spd, 0.0)

def AddSpd(builder, spd):
    MissileTrackVector_IngestAddSpd(builder, spd)

def MissileTrackVector_IngestAddReferenceFrame(builder, referenceFrame):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(referenceFrame), 0)

def AddReferenceFrame(builder, referenceFrame):
    MissileTrackVector_IngestAddReferenceFrame(builder, referenceFrame)

def MissileTrackVector_IngestAddCov(builder, cov):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(cov), 0)

def AddCov(builder, cov):
    MissileTrackVector_IngestAddCov(builder, cov)

def MissileTrackVector_IngestStartCovVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCovVector(builder, numElems):
    return MissileTrackVector_IngestStartCovVector(builder, numElems)

def MissileTrackVector_IngestAddCovReferenceFrame(builder, covReferenceFrame):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(covReferenceFrame), 0)

def AddCovReferenceFrame(builder, covReferenceFrame):
    MissileTrackVector_IngestAddCovReferenceFrame(builder, covReferenceFrame)

def MissileTrackVector_IngestAddVectorLat(builder, vectorLat):
    builder.PrependFloat64Slot(13, vectorLat, 0.0)

def AddVectorLat(builder, vectorLat):
    MissileTrackVector_IngestAddVectorLat(builder, vectorLat)

def MissileTrackVector_IngestAddVectorLon(builder, vectorLon):
    builder.PrependFloat64Slot(14, vectorLon, 0.0)

def AddVectorLon(builder, vectorLon):
    MissileTrackVector_IngestAddVectorLon(builder, vectorLon)

def MissileTrackVector_IngestAddVectorAlt(builder, vectorAlt):
    builder.PrependFloat64Slot(15, vectorAlt, 0.0)

def AddVectorAlt(builder, vectorAlt):
    MissileTrackVector_IngestAddVectorAlt(builder, vectorAlt)

def MissileTrackVector_IngestAddConfidence(builder, confidence):
    builder.PrependInt32Slot(16, confidence, 0)

def AddConfidence(builder, confidence):
    MissileTrackVector_IngestAddConfidence(builder, confidence)

def MissileTrackVector_IngestAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    MissileTrackVector_IngestAddStatus(builder, status)

def MissileTrackVector_IngestAddTimeSource(builder, timeSource):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(timeSource), 0)

def AddTimeSource(builder, timeSource):
    MissileTrackVector_IngestAddTimeSource(builder, timeSource)

def MissileTrackVector_IngestAddQuat(builder, quat):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(quat), 0)

def AddQuat(builder, quat):
    MissileTrackVector_IngestAddQuat(builder, quat)

def MissileTrackVector_IngestStartQuatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartQuatVector(builder, numElems):
    return MissileTrackVector_IngestStartQuatVector(builder, numElems)

def MissileTrackVector_IngestAddFlightAz(builder, flightAz):
    builder.PrependFloat64Slot(20, flightAz, 0.0)

def AddFlightAz(builder, flightAz):
    MissileTrackVector_IngestAddFlightAz(builder, flightAz)

def MissileTrackVector_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return MissileTrackVector_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class MissileTrackVector_IngestT(object):

    # MissileTrackVector_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.object = None  # type: str
        self.epoch = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.pos = None  # type: List[str]
        self.vel = None  # type: List[str]
        self.accel = None  # type: List[str]
        self.course = 0.0  # type: float
        self.spd = 0.0  # type: float
        self.referenceFrame = None  # type: str
        self.cov = None  # type: List[str]
        self.covReferenceFrame = None  # type: str
        self.vectorLat = 0.0  # type: float
        self.vectorLon = 0.0  # type: float
        self.vectorAlt = 0.0  # type: float
        self.confidence = 0  # type: int
        self.status = None  # type: str
        self.timeSource = None  # type: str
        self.quat = None  # type: List[str]
        self.flightAz = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        missileTrackVectorIngest = MissileTrackVector_Ingest()
        missileTrackVectorIngest.Init(buf, pos)
        return cls.InitFromObj(missileTrackVectorIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, missileTrackVectorIngest):
        x = MissileTrackVector_IngestT()
        x._UnPack(missileTrackVectorIngest)
        return x

    # MissileTrackVector_IngestT
    def _UnPack(self, missileTrackVectorIngest):
        if missileTrackVectorIngest is None:
            return
        self.type = missileTrackVectorIngest.Type()
        self.object = missileTrackVectorIngest.Object()
        self.epoch = missileTrackVectorIngest.Epoch()
        self.idSensor = missileTrackVectorIngest.IdSensor()
        self.origSensorId = missileTrackVectorIngest.OrigSensorId()
        if not missileTrackVectorIngest.PosIsNone():
            self.pos = []
            for i in range(missileTrackVectorIngest.PosLength()):
                self.pos.append(missileTrackVectorIngest.Pos(i))
        if not missileTrackVectorIngest.VelIsNone():
            self.vel = []
            for i in range(missileTrackVectorIngest.VelLength()):
                self.vel.append(missileTrackVectorIngest.Vel(i))
        if not missileTrackVectorIngest.AccelIsNone():
            self.accel = []
            for i in range(missileTrackVectorIngest.AccelLength()):
                self.accel.append(missileTrackVectorIngest.Accel(i))
        self.course = missileTrackVectorIngest.Course()
        self.spd = missileTrackVectorIngest.Spd()
        self.referenceFrame = missileTrackVectorIngest.ReferenceFrame()
        if not missileTrackVectorIngest.CovIsNone():
            self.cov = []
            for i in range(missileTrackVectorIngest.CovLength()):
                self.cov.append(missileTrackVectorIngest.Cov(i))
        self.covReferenceFrame = missileTrackVectorIngest.CovReferenceFrame()
        self.vectorLat = missileTrackVectorIngest.VectorLat()
        self.vectorLon = missileTrackVectorIngest.VectorLon()
        self.vectorAlt = missileTrackVectorIngest.VectorAlt()
        self.confidence = missileTrackVectorIngest.Confidence()
        self.status = missileTrackVectorIngest.Status()
        self.timeSource = missileTrackVectorIngest.TimeSource()
        if not missileTrackVectorIngest.QuatIsNone():
            self.quat = []
            for i in range(missileTrackVectorIngest.QuatLength()):
                self.quat.append(missileTrackVectorIngest.Quat(i))
        self.flightAz = missileTrackVectorIngest.FlightAz()

    # MissileTrackVector_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.object is not None:
            object = builder.CreateString(self.object)
        if self.epoch is not None:
            epoch = builder.CreateString(self.epoch)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.pos is not None:
            poslist = []
            for i in range(len(self.pos)):
                poslist.append(builder.CreateString(self.pos[i]))
            MissileTrackVector_IngestStartPosVector(builder, len(self.pos))
            for i in reversed(range(len(self.pos))):
                builder.PrependUOffsetTRelative(poslist[i])
            pos = builder.EndVector()
        if self.vel is not None:
            vellist = []
            for i in range(len(self.vel)):
                vellist.append(builder.CreateString(self.vel[i]))
            MissileTrackVector_IngestStartVelVector(builder, len(self.vel))
            for i in reversed(range(len(self.vel))):
                builder.PrependUOffsetTRelative(vellist[i])
            vel = builder.EndVector()
        if self.accel is not None:
            accellist = []
            for i in range(len(self.accel)):
                accellist.append(builder.CreateString(self.accel[i]))
            MissileTrackVector_IngestStartAccelVector(builder, len(self.accel))
            for i in reversed(range(len(self.accel))):
                builder.PrependUOffsetTRelative(accellist[i])
            accel = builder.EndVector()
        if self.referenceFrame is not None:
            referenceFrame = builder.CreateString(self.referenceFrame)
        if self.cov is not None:
            covlist = []
            for i in range(len(self.cov)):
                covlist.append(builder.CreateString(self.cov[i]))
            MissileTrackVector_IngestStartCovVector(builder, len(self.cov))
            for i in reversed(range(len(self.cov))):
                builder.PrependUOffsetTRelative(covlist[i])
            cov = builder.EndVector()
        if self.covReferenceFrame is not None:
            covReferenceFrame = builder.CreateString(self.covReferenceFrame)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.timeSource is not None:
            timeSource = builder.CreateString(self.timeSource)
        if self.quat is not None:
            quatlist = []
            for i in range(len(self.quat)):
                quatlist.append(builder.CreateString(self.quat[i]))
            MissileTrackVector_IngestStartQuatVector(builder, len(self.quat))
            for i in reversed(range(len(self.quat))):
                builder.PrependUOffsetTRelative(quatlist[i])
            quat = builder.EndVector()
        MissileTrackVector_IngestStart(builder)
        if self.type is not None:
            MissileTrackVector_IngestAddType(builder, type)
        if self.object is not None:
            MissileTrackVector_IngestAddObject(builder, object)
        if self.epoch is not None:
            MissileTrackVector_IngestAddEpoch(builder, epoch)
        if self.idSensor is not None:
            MissileTrackVector_IngestAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            MissileTrackVector_IngestAddOrigSensorId(builder, origSensorId)
        if self.pos is not None:
            MissileTrackVector_IngestAddPos(builder, pos)
        if self.vel is not None:
            MissileTrackVector_IngestAddVel(builder, vel)
        if self.accel is not None:
            MissileTrackVector_IngestAddAccel(builder, accel)
        MissileTrackVector_IngestAddCourse(builder, self.course)
        MissileTrackVector_IngestAddSpd(builder, self.spd)
        if self.referenceFrame is not None:
            MissileTrackVector_IngestAddReferenceFrame(builder, referenceFrame)
        if self.cov is not None:
            MissileTrackVector_IngestAddCov(builder, cov)
        if self.covReferenceFrame is not None:
            MissileTrackVector_IngestAddCovReferenceFrame(builder, covReferenceFrame)
        MissileTrackVector_IngestAddVectorLat(builder, self.vectorLat)
        MissileTrackVector_IngestAddVectorLon(builder, self.vectorLon)
        MissileTrackVector_IngestAddVectorAlt(builder, self.vectorAlt)
        MissileTrackVector_IngestAddConfidence(builder, self.confidence)
        if self.status is not None:
            MissileTrackVector_IngestAddStatus(builder, status)
        if self.timeSource is not None:
            MissileTrackVector_IngestAddTimeSource(builder, timeSource)
        if self.quat is not None:
            MissileTrackVector_IngestAddQuat(builder, quat)
        MissileTrackVector_IngestAddFlightAz(builder, self.flightAz)
        missileTrackVectorIngest = MissileTrackVector_IngestEnd(builder)
        return missileTrackVectorIngest
