# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Maintenance schedule and operational status of Sensor.
class SensorMaintenance_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SensorMaintenance_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorMaintenance_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SensorMaintenance_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # SensorMaintenance_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSORMAINTENANCE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorMaintenance_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SensorMaintenance_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
    # Example: /// Example: site01
    # Constraints: Minimum length = 1, Maximum length = 6
    # SensorMaintenance_Ingest
    def SiteCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the sensor.
    # Example: /// Example: idSensor
    # Constraints: Minimum length = 0, Maximum length = 36
    # SensorMaintenance_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The planned outage start time in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SensorMaintenance_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The planned outage end time in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SensorMaintenance_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The minimum time required to recall this activity, expressed as ddd:hh:mm.
    # Example: /// Example: 128:16:52
    # Constraints: Minimum length = 0, Maximum length = 20
    # SensorMaintenance_Ingest
    def Recall(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The duration of the planned outage, expressed as ddd:hh:mm.
    # Example: /// Example: 128:16:52
    # Constraints: Minimum length = 0, Maximum length = 20
    # SensorMaintenance_Ingest
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    # Example: /// Example: G
    # Constraints: Minimum length = 0, Maximum length = 3
    # SensorMaintenance_Ingest
    def MwOpsCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    # Example: /// Example: Y
    # Constraints: Minimum length = 0, Maximum length = 3
    # SensorMaintenance_Ingest
    def SsOpsCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
    # Example: /// Example: R
    # Constraints: Minimum length = 0, Maximum length = 3
    # SensorMaintenance_Ingest
    def MdOpsCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sensor face(s) to which this COLT maintenance item applies, if applicable.
    # Example: /// Example: impactedFaces
    # Constraints: Minimum length = 0, Maximum length = 50
    # SensorMaintenance_Ingest
    def ImpactedFaces(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
    # Example: /// Example: FMC
    # Constraints: Minimum length = 0, Maximum length = 20
    # SensorMaintenance_Ingest
    def EquipStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the activity taking place during this outage.
    # Example: /// Example: Activity Description
    # Constraints: No constraints specified.
    # SensorMaintenance_Ingest
    def Activity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning this outage.
    # Example: /// Example: Remarks
    # Constraints: No constraints specified.
    # SensorMaintenance_Ingest
    def Remark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the requestor.
    # Example: /// Example: requestor
    # Constraints: Minimum length = 0, Maximum length = 50
    # SensorMaintenance_Ingest
    def Requestor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the changer, if applicable.
    # Example: /// Example: changer
    # Constraints: Minimum length = 0, Maximum length = 50
    # SensorMaintenance_Ingest
    def Changer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the approver.
    # Example: /// Example: approver
    # Constraints: Minimum length = 0, Maximum length = 50
    # SensorMaintenance_Ingest
    def Approver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # COLT EOWID.
    # Example: /// Example: eowId
    # Constraints: Minimum length = 0, Maximum length = 20
    # SensorMaintenance_Ingest
    def EowId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The revision number for this maintenance item.
    # Example: /// Example: rev
    # Constraints: Minimum length = 0, Maximum length = 5
    # SensorMaintenance_Ingest
    def Rev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The priority of this maintenance item.
    # Example: /// Example: low
    # Constraints: Minimum length = 0, Maximum length = 5
    # SensorMaintenance_Ingest
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Release.
    # Example: /// Example: rel
    # Constraints: Minimum length = 0, Maximum length = 5
    # SensorMaintenance_Ingest
    def Rel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The internal COLT line number assigned to this item.
    # Example: /// Example: lineNumber
    # Constraints: Minimum length = 0, Maximum length = 20
    # SensorMaintenance_Ingest
    def LineNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the resource(s) affected by this maintenance item.
    # Example: /// Example: resource
    # Constraints: Minimum length = 0, Maximum length = 255
    # SensorMaintenance_Ingest
    def Resource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date that this item became inactive in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorMaintenance_Ingest
    def InactiveDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorMaintenance_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SensorMaintenance_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SensorMaintenance_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorMaintenance_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SensorMaintenance_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SensorMaintenance_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SensorMaintenance_IngestStart(builder):
    builder.StartObject(31)

def Start(builder):
    SensorMaintenance_IngestStart(builder)

def SensorMaintenance_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SensorMaintenance_IngestAddId(builder, id)

def SensorMaintenance_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SensorMaintenance_IngestAddClassificationMarking(builder, classificationMarking)

def SensorMaintenance_IngestAddSiteCode(builder, siteCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(siteCode), 0)

def AddSiteCode(builder, siteCode):
    SensorMaintenance_IngestAddSiteCode(builder, siteCode)

def SensorMaintenance_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SensorMaintenance_IngestAddIdSensor(builder, idSensor)

def SensorMaintenance_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    SensorMaintenance_IngestAddStartTime(builder, startTime)

def SensorMaintenance_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    SensorMaintenance_IngestAddEndTime(builder, endTime)

def SensorMaintenance_IngestAddRecall(builder, recall):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(recall), 0)

def AddRecall(builder, recall):
    SensorMaintenance_IngestAddRecall(builder, recall)

def SensorMaintenance_IngestAddDuration(builder, duration):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(duration), 0)

def AddDuration(builder, duration):
    SensorMaintenance_IngestAddDuration(builder, duration)

def SensorMaintenance_IngestAddMwOpsCap(builder, mwOpsCap):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(mwOpsCap), 0)

def AddMwOpsCap(builder, mwOpsCap):
    SensorMaintenance_IngestAddMwOpsCap(builder, mwOpsCap)

def SensorMaintenance_IngestAddSsOpsCap(builder, ssOpsCap):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ssOpsCap), 0)

def AddSsOpsCap(builder, ssOpsCap):
    SensorMaintenance_IngestAddSsOpsCap(builder, ssOpsCap)

def SensorMaintenance_IngestAddMdOpsCap(builder, mdOpsCap):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(mdOpsCap), 0)

def AddMdOpsCap(builder, mdOpsCap):
    SensorMaintenance_IngestAddMdOpsCap(builder, mdOpsCap)

def SensorMaintenance_IngestAddImpactedFaces(builder, impactedFaces):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(impactedFaces), 0)

def AddImpactedFaces(builder, impactedFaces):
    SensorMaintenance_IngestAddImpactedFaces(builder, impactedFaces)

def SensorMaintenance_IngestAddEquipStatus(builder, equipStatus):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(equipStatus), 0)

def AddEquipStatus(builder, equipStatus):
    SensorMaintenance_IngestAddEquipStatus(builder, equipStatus)

def SensorMaintenance_IngestAddActivity(builder, activity):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(activity), 0)

def AddActivity(builder, activity):
    SensorMaintenance_IngestAddActivity(builder, activity)

def SensorMaintenance_IngestAddRemark(builder, remark):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(remark), 0)

def AddRemark(builder, remark):
    SensorMaintenance_IngestAddRemark(builder, remark)

def SensorMaintenance_IngestAddRequestor(builder, requestor):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(requestor), 0)

def AddRequestor(builder, requestor):
    SensorMaintenance_IngestAddRequestor(builder, requestor)

def SensorMaintenance_IngestAddChanger(builder, changer):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(changer), 0)

def AddChanger(builder, changer):
    SensorMaintenance_IngestAddChanger(builder, changer)

def SensorMaintenance_IngestAddApprover(builder, approver):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(approver), 0)

def AddApprover(builder, approver):
    SensorMaintenance_IngestAddApprover(builder, approver)

def SensorMaintenance_IngestAddEowId(builder, eowId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(eowId), 0)

def AddEowId(builder, eowId):
    SensorMaintenance_IngestAddEowId(builder, eowId)

def SensorMaintenance_IngestAddRev(builder, rev):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(rev), 0)

def AddRev(builder, rev):
    SensorMaintenance_IngestAddRev(builder, rev)

def SensorMaintenance_IngestAddPriority(builder, priority):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)

def AddPriority(builder, priority):
    SensorMaintenance_IngestAddPriority(builder, priority)

def SensorMaintenance_IngestAddRel(builder, rel):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(rel), 0)

def AddRel(builder, rel):
    SensorMaintenance_IngestAddRel(builder, rel)

def SensorMaintenance_IngestAddLineNumber(builder, lineNumber):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(lineNumber), 0)

def AddLineNumber(builder, lineNumber):
    SensorMaintenance_IngestAddLineNumber(builder, lineNumber)

def SensorMaintenance_IngestAddResource(builder, resource):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(resource), 0)

def AddResource(builder, resource):
    SensorMaintenance_IngestAddResource(builder, resource)

def SensorMaintenance_IngestAddInactiveDate(builder, inactiveDate):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(inactiveDate), 0)

def AddInactiveDate(builder, inactiveDate):
    SensorMaintenance_IngestAddInactiveDate(builder, inactiveDate)

def SensorMaintenance_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SensorMaintenance_IngestAddCreatedAt(builder, createdAt)

def SensorMaintenance_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SensorMaintenance_IngestAddCreatedBy(builder, createdBy)

def SensorMaintenance_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SensorMaintenance_IngestAddSource(builder, source)

def SensorMaintenance_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SensorMaintenance_IngestAddOrigin(builder, origin)

def SensorMaintenance_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(29, dataMode, 0)

def AddDataMode(builder, dataMode):
    SensorMaintenance_IngestAddDataMode(builder, dataMode)

def SensorMaintenance_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SensorMaintenance_IngestAddOrigNetwork(builder, origNetwork)

def SensorMaintenance_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SensorMaintenance_IngestEnd(builder)


class SensorMaintenance_IngestT(object):

    # SensorMaintenance_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.siteCode = None  # type: str
        self.idSensor = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.recall = None  # type: str
        self.duration = None  # type: str
        self.mwOpsCap = None  # type: str
        self.ssOpsCap = None  # type: str
        self.mdOpsCap = None  # type: str
        self.impactedFaces = None  # type: str
        self.equipStatus = None  # type: str
        self.activity = None  # type: str
        self.remark = None  # type: str
        self.requestor = None  # type: str
        self.changer = None  # type: str
        self.approver = None  # type: str
        self.eowId = None  # type: str
        self.rev = None  # type: str
        self.priority = None  # type: str
        self.rel = None  # type: str
        self.lineNumber = None  # type: str
        self.resource = None  # type: str
        self.inactiveDate = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorMaintenanceIngest = SensorMaintenance_Ingest()
        sensorMaintenanceIngest.Init(buf, pos)
        return cls.InitFromObj(sensorMaintenanceIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorMaintenanceIngest):
        x = SensorMaintenance_IngestT()
        x._UnPack(sensorMaintenanceIngest)
        return x

    # SensorMaintenance_IngestT
    def _UnPack(self, sensorMaintenanceIngest):
        if sensorMaintenanceIngest is None:
            return
        self.id = sensorMaintenanceIngest.Id()
        self.classificationMarking = sensorMaintenanceIngest.ClassificationMarking()
        self.siteCode = sensorMaintenanceIngest.SiteCode()
        self.idSensor = sensorMaintenanceIngest.IdSensor()
        self.startTime = sensorMaintenanceIngest.StartTime()
        self.endTime = sensorMaintenanceIngest.EndTime()
        self.recall = sensorMaintenanceIngest.Recall()
        self.duration = sensorMaintenanceIngest.Duration()
        self.mwOpsCap = sensorMaintenanceIngest.MwOpsCap()
        self.ssOpsCap = sensorMaintenanceIngest.SsOpsCap()
        self.mdOpsCap = sensorMaintenanceIngest.MdOpsCap()
        self.impactedFaces = sensorMaintenanceIngest.ImpactedFaces()
        self.equipStatus = sensorMaintenanceIngest.EquipStatus()
        self.activity = sensorMaintenanceIngest.Activity()
        self.remark = sensorMaintenanceIngest.Remark()
        self.requestor = sensorMaintenanceIngest.Requestor()
        self.changer = sensorMaintenanceIngest.Changer()
        self.approver = sensorMaintenanceIngest.Approver()
        self.eowId = sensorMaintenanceIngest.EowId()
        self.rev = sensorMaintenanceIngest.Rev()
        self.priority = sensorMaintenanceIngest.Priority()
        self.rel = sensorMaintenanceIngest.Rel()
        self.lineNumber = sensorMaintenanceIngest.LineNumber()
        self.resource = sensorMaintenanceIngest.Resource()
        self.inactiveDate = sensorMaintenanceIngest.InactiveDate()
        self.createdAt = sensorMaintenanceIngest.CreatedAt()
        self.createdBy = sensorMaintenanceIngest.CreatedBy()
        self.source = sensorMaintenanceIngest.Source()
        self.origin = sensorMaintenanceIngest.Origin()
        self.dataMode = sensorMaintenanceIngest.DataMode()
        self.origNetwork = sensorMaintenanceIngest.OrigNetwork()

    # SensorMaintenance_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.siteCode is not None:
            siteCode = builder.CreateString(self.siteCode)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.recall is not None:
            recall = builder.CreateString(self.recall)
        if self.duration is not None:
            duration = builder.CreateString(self.duration)
        if self.mwOpsCap is not None:
            mwOpsCap = builder.CreateString(self.mwOpsCap)
        if self.ssOpsCap is not None:
            ssOpsCap = builder.CreateString(self.ssOpsCap)
        if self.mdOpsCap is not None:
            mdOpsCap = builder.CreateString(self.mdOpsCap)
        if self.impactedFaces is not None:
            impactedFaces = builder.CreateString(self.impactedFaces)
        if self.equipStatus is not None:
            equipStatus = builder.CreateString(self.equipStatus)
        if self.activity is not None:
            activity = builder.CreateString(self.activity)
        if self.remark is not None:
            remark = builder.CreateString(self.remark)
        if self.requestor is not None:
            requestor = builder.CreateString(self.requestor)
        if self.changer is not None:
            changer = builder.CreateString(self.changer)
        if self.approver is not None:
            approver = builder.CreateString(self.approver)
        if self.eowId is not None:
            eowId = builder.CreateString(self.eowId)
        if self.rev is not None:
            rev = builder.CreateString(self.rev)
        if self.priority is not None:
            priority = builder.CreateString(self.priority)
        if self.rel is not None:
            rel = builder.CreateString(self.rel)
        if self.lineNumber is not None:
            lineNumber = builder.CreateString(self.lineNumber)
        if self.resource is not None:
            resource = builder.CreateString(self.resource)
        if self.inactiveDate is not None:
            inactiveDate = builder.CreateString(self.inactiveDate)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SensorMaintenance_IngestStart(builder)
        if self.id is not None:
            SensorMaintenance_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            SensorMaintenance_IngestAddClassificationMarking(builder, classificationMarking)
        if self.siteCode is not None:
            SensorMaintenance_IngestAddSiteCode(builder, siteCode)
        if self.idSensor is not None:
            SensorMaintenance_IngestAddIdSensor(builder, idSensor)
        if self.startTime is not None:
            SensorMaintenance_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            SensorMaintenance_IngestAddEndTime(builder, endTime)
        if self.recall is not None:
            SensorMaintenance_IngestAddRecall(builder, recall)
        if self.duration is not None:
            SensorMaintenance_IngestAddDuration(builder, duration)
        if self.mwOpsCap is not None:
            SensorMaintenance_IngestAddMwOpsCap(builder, mwOpsCap)
        if self.ssOpsCap is not None:
            SensorMaintenance_IngestAddSsOpsCap(builder, ssOpsCap)
        if self.mdOpsCap is not None:
            SensorMaintenance_IngestAddMdOpsCap(builder, mdOpsCap)
        if self.impactedFaces is not None:
            SensorMaintenance_IngestAddImpactedFaces(builder, impactedFaces)
        if self.equipStatus is not None:
            SensorMaintenance_IngestAddEquipStatus(builder, equipStatus)
        if self.activity is not None:
            SensorMaintenance_IngestAddActivity(builder, activity)
        if self.remark is not None:
            SensorMaintenance_IngestAddRemark(builder, remark)
        if self.requestor is not None:
            SensorMaintenance_IngestAddRequestor(builder, requestor)
        if self.changer is not None:
            SensorMaintenance_IngestAddChanger(builder, changer)
        if self.approver is not None:
            SensorMaintenance_IngestAddApprover(builder, approver)
        if self.eowId is not None:
            SensorMaintenance_IngestAddEowId(builder, eowId)
        if self.rev is not None:
            SensorMaintenance_IngestAddRev(builder, rev)
        if self.priority is not None:
            SensorMaintenance_IngestAddPriority(builder, priority)
        if self.rel is not None:
            SensorMaintenance_IngestAddRel(builder, rel)
        if self.lineNumber is not None:
            SensorMaintenance_IngestAddLineNumber(builder, lineNumber)
        if self.resource is not None:
            SensorMaintenance_IngestAddResource(builder, resource)
        if self.inactiveDate is not None:
            SensorMaintenance_IngestAddInactiveDate(builder, inactiveDate)
        if self.createdAt is not None:
            SensorMaintenance_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SensorMaintenance_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SensorMaintenance_IngestAddSource(builder, source)
        if self.origin is not None:
            SensorMaintenance_IngestAddOrigin(builder, origin)
        SensorMaintenance_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            SensorMaintenance_IngestAddOrigNetwork(builder, origNetwork)
        sensorMaintenanceIngest = SensorMaintenance_IngestEnd(builder)
        return sensorMaintenanceIngest
