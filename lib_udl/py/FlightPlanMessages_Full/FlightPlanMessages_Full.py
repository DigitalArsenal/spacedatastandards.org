# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
class FlightPlanMessages_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlanMessages_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlanMessages_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlanMessages_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlanMessages_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The severity of the message.
    # Example: /// Example: SEVERE
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanMessages_Full
    def Severity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
    # Example: /// Example: 20
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlanMessages_Full
    def WpNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
    # Example: /// Example: PRIMARY
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanMessages_Full
    def RoutePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The text of the message.
    # Example: /// Example: Message text
    # Constraints: Minimum length = 0, Maximum length = 256
    # FlightPlanMessages_Full
    def MsgText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FlightPlanMessages_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    FlightPlanMessages_FullStart(builder)

def FlightPlanMessages_FullAddSeverity(builder, severity):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(severity), 0)

def AddSeverity(builder, severity):
    FlightPlanMessages_FullAddSeverity(builder, severity)

def FlightPlanMessages_FullAddWpNum(builder, wpNum):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(wpNum), 0)

def AddWpNum(builder, wpNum):
    FlightPlanMessages_FullAddWpNum(builder, wpNum)

def FlightPlanMessages_FullAddRoutePath(builder, routePath):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(routePath), 0)

def AddRoutePath(builder, routePath):
    FlightPlanMessages_FullAddRoutePath(builder, routePath)

def FlightPlanMessages_FullAddMsgText(builder, msgText):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgText), 0)

def AddMsgText(builder, msgText):
    FlightPlanMessages_FullAddMsgText(builder, msgText)

def FlightPlanMessages_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlanMessages_FullEnd(builder)


class FlightPlanMessages_FullT(object):

    # FlightPlanMessages_FullT
    def __init__(self):
        self.severity = None  # type: str
        self.wpNum = None  # type: str
        self.routePath = None  # type: str
        self.msgText = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanMessagesFull = FlightPlanMessages_Full()
        flightPlanMessagesFull.Init(buf, pos)
        return cls.InitFromObj(flightPlanMessagesFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanMessagesFull):
        x = FlightPlanMessages_FullT()
        x._UnPack(flightPlanMessagesFull)
        return x

    # FlightPlanMessages_FullT
    def _UnPack(self, flightPlanMessagesFull):
        if flightPlanMessagesFull is None:
            return
        self.severity = flightPlanMessagesFull.Severity()
        self.wpNum = flightPlanMessagesFull.WpNum()
        self.routePath = flightPlanMessagesFull.RoutePath()
        self.msgText = flightPlanMessagesFull.MsgText()

    # FlightPlanMessages_FullT
    def Pack(self, builder):
        if self.severity is not None:
            severity = builder.CreateString(self.severity)
        if self.wpNum is not None:
            wpNum = builder.CreateString(self.wpNum)
        if self.routePath is not None:
            routePath = builder.CreateString(self.routePath)
        if self.msgText is not None:
            msgText = builder.CreateString(self.msgText)
        FlightPlanMessages_FullStart(builder)
        if self.severity is not None:
            FlightPlanMessages_FullAddSeverity(builder, severity)
        if self.wpNum is not None:
            FlightPlanMessages_FullAddWpNum(builder, wpNum)
        if self.routePath is not None:
            FlightPlanMessages_FullAddRoutePath(builder, routePath)
        if self.msgText is not None:
            FlightPlanMessages_FullAddMsgText(builder, msgText)
        flightPlanMessagesFull = FlightPlanMessages_FullEnd(builder)
        return flightPlanMessagesFull
