# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of Requirements associated with this Air Transport Mission.
class AircraftMissionRequirements_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftMissionRequirements_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftMissionRequirements_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftMissionRequirements_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftMissionRequirements_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Global Decision Support System (GDSS) mission requirement identifier.
    # Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionRequirements_Abridged
    def GdssReqId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the onload itinerary location.
    # Example: /// Example: 200
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def OnloadId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Onload location code.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 0, Maximum length = 20
    # AircraftMissionRequirements_Abridged
    def OnloadLocode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the offload itinerary location.
    # Example: /// Example: 300
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def OffloadId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Offload location code.
    # Example: /// Example: KHOP
    # Constraints: Minimum length = 0, Maximum length = 20
    # AircraftMissionRequirements_Abridged
    def OffloadLocode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unit line number.
    # Example: /// Example: T01ME01
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionRequirements_Abridged
    def Uln(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transportation requirement number.
    # Example: /// Example: T01ME01
    # Constraints: Minimum length = 0, Maximum length = 50
    # AircraftMissionRequirements_Abridged
    def TransReqNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Project name.
    # Example: /// Example: CENTINTRA21
    # Constraints: Minimum length = 0, Maximum length = 50
    # AircraftMissionRequirements_Abridged
    def ProjName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identification number of the Operation Plan (OPLAN) associated with this mission.
    # Example: /// Example: 5027
    # Constraints: Minimum length = 0, Maximum length = 32
    # AircraftMissionRequirements_Abridged
    def Oplan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of passengers associated with the mission.
    # Example: /// Example: 44
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def NumPax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of litter patients tasked for the mission.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def NumLitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of ambulatory patients tasked for the mission.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def NumAmbulatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of attendants tasked for the mission.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def NumAttendant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Total weight of the bulk cargo, in kilograms.
    # Example: /// Example: 1.3
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def BulkWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total weight of the oversized cargo, in kilograms.
    # Example: /// Example: 1.3
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def OversizeWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total weight of the outsize cargo, in kilograms.
    # Example: /// Example: 1.3
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def OutsizeWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Earliest available date the cargo can be picked up.
    # Example: /// Example: 2024-01-01T16:00:00Z
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def Ead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latest available date the cargo may be delivered.
    # Example: /// Example: 2024-01-01T16:00:00Z
    # Constraints: No constraints specified.
    # AircraftMissionRequirements_Abridged
    def Lad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AircraftMissionRequirements_AbridgedStart(builder):
    builder.StartObject(18)

def Start(builder):
    AircraftMissionRequirements_AbridgedStart(builder)

def AircraftMissionRequirements_AbridgedAddGdssReqId(builder, gdssReqId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gdssReqId), 0)

def AddGdssReqId(builder, gdssReqId):
    AircraftMissionRequirements_AbridgedAddGdssReqId(builder, gdssReqId)

def AircraftMissionRequirements_AbridgedAddOnloadId(builder, onloadId):
    builder.PrependInt32Slot(1, onloadId, 0)

def AddOnloadId(builder, onloadId):
    AircraftMissionRequirements_AbridgedAddOnloadId(builder, onloadId)

def AircraftMissionRequirements_AbridgedAddOnloadLocode(builder, onloadLocode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(onloadLocode), 0)

def AddOnloadLocode(builder, onloadLocode):
    AircraftMissionRequirements_AbridgedAddOnloadLocode(builder, onloadLocode)

def AircraftMissionRequirements_AbridgedAddOffloadId(builder, offloadId):
    builder.PrependInt32Slot(3, offloadId, 0)

def AddOffloadId(builder, offloadId):
    AircraftMissionRequirements_AbridgedAddOffloadId(builder, offloadId)

def AircraftMissionRequirements_AbridgedAddOffloadLocode(builder, offloadLocode):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(offloadLocode), 0)

def AddOffloadLocode(builder, offloadLocode):
    AircraftMissionRequirements_AbridgedAddOffloadLocode(builder, offloadLocode)

def AircraftMissionRequirements_AbridgedAddUln(builder, uln):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(uln), 0)

def AddUln(builder, uln):
    AircraftMissionRequirements_AbridgedAddUln(builder, uln)

def AircraftMissionRequirements_AbridgedAddTransReqNum(builder, transReqNum):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(transReqNum), 0)

def AddTransReqNum(builder, transReqNum):
    AircraftMissionRequirements_AbridgedAddTransReqNum(builder, transReqNum)

def AircraftMissionRequirements_AbridgedAddProjName(builder, projName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(projName), 0)

def AddProjName(builder, projName):
    AircraftMissionRequirements_AbridgedAddProjName(builder, projName)

def AircraftMissionRequirements_AbridgedAddOplan(builder, oplan):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(oplan), 0)

def AddOplan(builder, oplan):
    AircraftMissionRequirements_AbridgedAddOplan(builder, oplan)

def AircraftMissionRequirements_AbridgedAddNumPax(builder, numPax):
    builder.PrependInt32Slot(9, numPax, 0)

def AddNumPax(builder, numPax):
    AircraftMissionRequirements_AbridgedAddNumPax(builder, numPax)

def AircraftMissionRequirements_AbridgedAddNumLitter(builder, numLitter):
    builder.PrependInt32Slot(10, numLitter, 0)

def AddNumLitter(builder, numLitter):
    AircraftMissionRequirements_AbridgedAddNumLitter(builder, numLitter)

def AircraftMissionRequirements_AbridgedAddNumAmbulatory(builder, numAmbulatory):
    builder.PrependInt32Slot(11, numAmbulatory, 0)

def AddNumAmbulatory(builder, numAmbulatory):
    AircraftMissionRequirements_AbridgedAddNumAmbulatory(builder, numAmbulatory)

def AircraftMissionRequirements_AbridgedAddNumAttendant(builder, numAttendant):
    builder.PrependInt32Slot(12, numAttendant, 0)

def AddNumAttendant(builder, numAttendant):
    AircraftMissionRequirements_AbridgedAddNumAttendant(builder, numAttendant)

def AircraftMissionRequirements_AbridgedAddBulkWeight(builder, bulkWeight):
    builder.PrependFloat64Slot(13, bulkWeight, 0.0)

def AddBulkWeight(builder, bulkWeight):
    AircraftMissionRequirements_AbridgedAddBulkWeight(builder, bulkWeight)

def AircraftMissionRequirements_AbridgedAddOversizeWeight(builder, oversizeWeight):
    builder.PrependFloat64Slot(14, oversizeWeight, 0.0)

def AddOversizeWeight(builder, oversizeWeight):
    AircraftMissionRequirements_AbridgedAddOversizeWeight(builder, oversizeWeight)

def AircraftMissionRequirements_AbridgedAddOutsizeWeight(builder, outsizeWeight):
    builder.PrependFloat64Slot(15, outsizeWeight, 0.0)

def AddOutsizeWeight(builder, outsizeWeight):
    AircraftMissionRequirements_AbridgedAddOutsizeWeight(builder, outsizeWeight)

def AircraftMissionRequirements_AbridgedAddEad(builder, ead):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(ead), 0)

def AddEad(builder, ead):
    AircraftMissionRequirements_AbridgedAddEad(builder, ead)

def AircraftMissionRequirements_AbridgedAddLad(builder, lad):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(lad), 0)

def AddLad(builder, lad):
    AircraftMissionRequirements_AbridgedAddLad(builder, lad)

def AircraftMissionRequirements_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftMissionRequirements_AbridgedEnd(builder)


class AircraftMissionRequirements_AbridgedT(object):

    # AircraftMissionRequirements_AbridgedT
    def __init__(self):
        self.gdssReqId = None  # type: str
        self.onloadId = 0  # type: int
        self.onloadLocode = None  # type: str
        self.offloadId = 0  # type: int
        self.offloadLocode = None  # type: str
        self.uln = None  # type: str
        self.transReqNum = None  # type: str
        self.projName = None  # type: str
        self.oplan = None  # type: str
        self.numPax = 0  # type: int
        self.numLitter = 0  # type: int
        self.numAmbulatory = 0  # type: int
        self.numAttendant = 0  # type: int
        self.bulkWeight = 0.0  # type: float
        self.oversizeWeight = 0.0  # type: float
        self.outsizeWeight = 0.0  # type: float
        self.ead = None  # type: str
        self.lad = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftMissionRequirementsAbridged = AircraftMissionRequirements_Abridged()
        aircraftMissionRequirementsAbridged.Init(buf, pos)
        return cls.InitFromObj(aircraftMissionRequirementsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftMissionRequirementsAbridged):
        x = AircraftMissionRequirements_AbridgedT()
        x._UnPack(aircraftMissionRequirementsAbridged)
        return x

    # AircraftMissionRequirements_AbridgedT
    def _UnPack(self, aircraftMissionRequirementsAbridged):
        if aircraftMissionRequirementsAbridged is None:
            return
        self.gdssReqId = aircraftMissionRequirementsAbridged.GdssReqId()
        self.onloadId = aircraftMissionRequirementsAbridged.OnloadId()
        self.onloadLocode = aircraftMissionRequirementsAbridged.OnloadLocode()
        self.offloadId = aircraftMissionRequirementsAbridged.OffloadId()
        self.offloadLocode = aircraftMissionRequirementsAbridged.OffloadLocode()
        self.uln = aircraftMissionRequirementsAbridged.Uln()
        self.transReqNum = aircraftMissionRequirementsAbridged.TransReqNum()
        self.projName = aircraftMissionRequirementsAbridged.ProjName()
        self.oplan = aircraftMissionRequirementsAbridged.Oplan()
        self.numPax = aircraftMissionRequirementsAbridged.NumPax()
        self.numLitter = aircraftMissionRequirementsAbridged.NumLitter()
        self.numAmbulatory = aircraftMissionRequirementsAbridged.NumAmbulatory()
        self.numAttendant = aircraftMissionRequirementsAbridged.NumAttendant()
        self.bulkWeight = aircraftMissionRequirementsAbridged.BulkWeight()
        self.oversizeWeight = aircraftMissionRequirementsAbridged.OversizeWeight()
        self.outsizeWeight = aircraftMissionRequirementsAbridged.OutsizeWeight()
        self.ead = aircraftMissionRequirementsAbridged.Ead()
        self.lad = aircraftMissionRequirementsAbridged.Lad()

    # AircraftMissionRequirements_AbridgedT
    def Pack(self, builder):
        if self.gdssReqId is not None:
            gdssReqId = builder.CreateString(self.gdssReqId)
        if self.onloadLocode is not None:
            onloadLocode = builder.CreateString(self.onloadLocode)
        if self.offloadLocode is not None:
            offloadLocode = builder.CreateString(self.offloadLocode)
        if self.uln is not None:
            uln = builder.CreateString(self.uln)
        if self.transReqNum is not None:
            transReqNum = builder.CreateString(self.transReqNum)
        if self.projName is not None:
            projName = builder.CreateString(self.projName)
        if self.oplan is not None:
            oplan = builder.CreateString(self.oplan)
        if self.ead is not None:
            ead = builder.CreateString(self.ead)
        if self.lad is not None:
            lad = builder.CreateString(self.lad)
        AircraftMissionRequirements_AbridgedStart(builder)
        if self.gdssReqId is not None:
            AircraftMissionRequirements_AbridgedAddGdssReqId(builder, gdssReqId)
        AircraftMissionRequirements_AbridgedAddOnloadId(builder, self.onloadId)
        if self.onloadLocode is not None:
            AircraftMissionRequirements_AbridgedAddOnloadLocode(builder, onloadLocode)
        AircraftMissionRequirements_AbridgedAddOffloadId(builder, self.offloadId)
        if self.offloadLocode is not None:
            AircraftMissionRequirements_AbridgedAddOffloadLocode(builder, offloadLocode)
        if self.uln is not None:
            AircraftMissionRequirements_AbridgedAddUln(builder, uln)
        if self.transReqNum is not None:
            AircraftMissionRequirements_AbridgedAddTransReqNum(builder, transReqNum)
        if self.projName is not None:
            AircraftMissionRequirements_AbridgedAddProjName(builder, projName)
        if self.oplan is not None:
            AircraftMissionRequirements_AbridgedAddOplan(builder, oplan)
        AircraftMissionRequirements_AbridgedAddNumPax(builder, self.numPax)
        AircraftMissionRequirements_AbridgedAddNumLitter(builder, self.numLitter)
        AircraftMissionRequirements_AbridgedAddNumAmbulatory(builder, self.numAmbulatory)
        AircraftMissionRequirements_AbridgedAddNumAttendant(builder, self.numAttendant)
        AircraftMissionRequirements_AbridgedAddBulkWeight(builder, self.bulkWeight)
        AircraftMissionRequirements_AbridgedAddOversizeWeight(builder, self.oversizeWeight)
        AircraftMissionRequirements_AbridgedAddOutsizeWeight(builder, self.outsizeWeight)
        if self.ead is not None:
            AircraftMissionRequirements_AbridgedAddEad(builder, ead)
        if self.lad is not None:
            AircraftMissionRequirements_AbridgedAddLad(builder, lad)
        aircraftMissionRequirementsAbridged = AircraftMissionRequirements_AbridgedEnd(builder)
        return aircraftMissionRequirementsAbridged
