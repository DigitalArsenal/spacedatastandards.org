# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
class Operatingunit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Operatingunit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperatingunit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OperatingunitBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x50\x45\x52", size_prefixed=size_prefixed)

    # Operatingunit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: OPERATINGUNIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Operatingunit
    def IdOperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Operatingunit
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the operating unit record from the originating system.
    # Example: /// Example: 32100000000021
    # Constraints: Minimum length = 0, Maximum length = 36
    # Operatingunit
    def AltOperatingUnitId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the operating unit.
    # Example: /// Example: SOME_NAME
    # Constraints: Minimum length = 1, Maximum length = 128
    # Operatingunit
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the operating unit.
    # Example: /// Example: Description of unit
    # Constraints: Minimum length = 0, Maximum length = 256
    # Operatingunit
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the location record for this operating unit.
    # Example: /// Example: LOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Operatingunit
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the contact for this operating unit.
    # Example: /// Example: CONTACT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Operatingunit
    def IdContact(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization record for this operating unit.
    # Example: /// Example: ORGANIZATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Operatingunit
    def IdOrganization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
    # Example: /// Example: AZXAZ12345
    # Constraints: Minimum length = 0, Maximum length = 10
    # Operatingunit
    def UnitIdentifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: IQ
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    # Example: /// Example: IZ
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def AltCountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # World Aeronautical Chart identifier for the area in which a designated operating unit is located.
    # Example: /// Example: 0427
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def Wac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: OPR
    # Constraints: Minimum length = 0, Maximum length = 3
    # Operatingunit
    def OperStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: RDY
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def Condition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def ConditionAvail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # Operatingunit
    def Eval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: EOB
    # Constraints: Minimum length = 0, Maximum length = 5
    # Operatingunit
    def Fpa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    # ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    # FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    # HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    # FAKER: Friendly track, object, or entity acting as an exercise hostile.
    # JOKER: Friendly track, object, or entity acting as an exercise suspect.
    # NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    # PENDING: Track object which has not been evaluated.
    # SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    # UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 32
    # Operatingunit
    def Ident(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: OTHR
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def Allegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    # Example: /// Example: HL
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def AltAllegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Location name for the coordinates.
    # Example: /// Example: LOCATION_NAME
    # Constraints: Minimum length = 0, Maximum length = 54
    # Operatingunit
    def LocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: GR
    # Constraints: Minimum length = 0, Maximum length = 9
    # Operatingunit
    def LocReason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: NV
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def Force(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
    # Example: /// Example: FORCE-NAME
    # Constraints: Minimum length = 0, Maximum length = 54
    # Operatingunit
    def ForceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: MIL
    # Constraints: Minimum length = 0, Maximum length = 3
    # Operatingunit
    def FunctRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: W6
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def MsnPrimary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: QK
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def MsnPrimarySpecialty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Operatingunit
    def MasterUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Operatingunit
    def StylizedUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: 5
    # Constraints: Minimum length = 0, Maximum length = 1
    # Operatingunit
    def DivCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: SHIP
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def Echelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: 68
    # Constraints: Minimum length = 0, Maximum length = 2
    # Operatingunit
    def EchelonTier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 1
    # Operatingunit
    def FleetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: ND
    # Constraints: Minimum length = 0, Maximum length = 2
    # Operatingunit
    def DeployStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code of the observed flag flown.
    # Example: /// Example: IZ
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def FlagFlown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: WGS
    # Constraints: Minimum length = 0, Maximum length = 16
    # Operatingunit
    def CoordDatum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
    # Pos. 1-2.  Latitude Degrees     [00-90]
    # Pos. 3-4.  Latitude Minutes     [00-59]
    # Pos. 5-6.  Latitude Seconds     [00-59]
    # Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    # Pos. 10. Latitude Hemisphere       [NS] 
    # Pos. 11-13. Longitude Degrees     [00-180] 
    # Pos. 14-15. Longitude Minutes     [00-59] 
    # Pos. 16-17. Longitude Seconds     [00-59] 
    # Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    # Pos. 21. Longitude Hemisphere     [EW]
    # Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
    # Example: /// Example: 340000000N0430000000E
    # Constraints: Minimum length = 0, Maximum length = 21
    # Operatingunit
    def Coord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the plus or minus error assessed against the method used to derive the coordinate.
    # Example: /// Example: 12.345
    # Constraints: No constraints specified.
    # Operatingunit
    def CoordDerivAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # Operatingunit
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # Operatingunit
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
    # Example: /// Example: 123.45
    # Constraints: No constraints specified.
    # Operatingunit
    def ElevMsl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
    # Example: /// Example: 50
    # Constraints: No constraints specified.
    # Operatingunit
    def ElevMslConfLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicates the plus or minus error assessed against the method used to derive the elevation.
    # Example: /// Example: 12.34
    # Constraints: No constraints specified.
    # Operatingunit
    def ElevMslDerivAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The distance between Mean Sea Level and a referenced ellipsoid.
    # Example: /// Example: 12.34
    # Constraints: No constraints specified.
    # Operatingunit
    def GeoidalMslSep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # "Indicates the grid system used in the development of the milGrid coordinates. Values are:
    # UPS - Universal Polar System
    # UTM - Universal Transverse Mercator".
    # Example: /// Example: UTM
    # Constraints: Minimum length = 0, Maximum length = 3
    # Operatingunit
    def MilGridSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    # 4Q (grid zone designator, GZD)
    # FJ (the 100,000-meter square identifier)
    # 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    # Example: /// Example: 4QFJ12345678
    # Constraints: Minimum length = 0, Maximum length = 15
    # Operatingunit
    def MilGrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Transverse Mercator (UTM) grid coordinates.
    # Pos. 1-2, UTM Zone Column   [01-60
    # Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    # Pos. 4, UTM False Easting   [0-9]
    # Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    # Pos. 10-11, UTM False Northing    [0-9][0-9]
    # Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    # Example: /// Example: 19P4390691376966
    # Constraints: Minimum length = 0, Maximum length = 16
    # Operatingunit
    def Utm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    # Example: /// Example: AL006
    # Constraints: Minimum length = 0, Maximum length = 5
    # Operatingunit
    def AirDefArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: IZ07
    # Constraints: Minimum length = 0, Maximum length = 7
    # Operatingunit
    def PolSubdiv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
    # Example: /// Example: SOGPU----------
    # Constraints: Minimum length = 0, Maximum length = 15
    # Operatingunit
    def SymCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
    # 0 - Does not meet criteria above
    # 1 - Primary importance to system
    # 2 - Secondary importance to system
    # 3 - Tertiary importance to system
    # O - Other. Explain in Remarks.
    # Example: /// Example: 1
    # Constraints: Minimum length = 0, Maximum length = 1
    # Operatingunit
    def ClassRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
    # A - Active
    # I - Inactive
    # K - Acknowledged
    # L - Local
    # Q - A nominated (NOM) or Data Change Request (DCR) record
    # R - Production reduced by CMD decision
    # W - Working Record.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 1
    # Operatingunit
    def RecStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
    # Example: /// Example: 2008-06-10
    # Constraints: No constraints specified.
    # Operatingunit
    def ReviewDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Responsible Producer - Organization that is responsible for the maintenance of the record.
    # Example: /// Example: RT
    # Constraints: Minimum length = 0, Maximum length = 4
    # Operatingunit
    def ResProd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: Provider Reference Documentation
    # Constraints: Minimum length = 0, Maximum length = 128
    # Operatingunit
    def ReferenceDoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Operatingunit
    def OperatingUnitRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Operatingunit
    def OperatingUnitRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operatingunit
    def OperatingUnitRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Operatingunit
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Operatingunit
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Operatingunit
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Operatingunit
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Operatingunit
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Operatingunit
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Operatingunit
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Operatingunit
    def Organization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Operatingunit
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OperatingunitStart(builder):
    builder.StartObject(65)

def Start(builder):
    OperatingunitStart(builder)

def OperatingunitAddIdOperatingUnit(builder, idOperatingUnit):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idOperatingUnit), 0)

def AddIdOperatingUnit(builder, idOperatingUnit):
    OperatingunitAddIdOperatingUnit(builder, idOperatingUnit)

def OperatingunitAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OperatingunitAddClassificationMarking(builder, classificationMarking)

def OperatingunitAddAltOperatingUnitId(builder, altOperatingUnitId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(altOperatingUnitId), 0)

def AddAltOperatingUnitId(builder, altOperatingUnitId):
    OperatingunitAddAltOperatingUnitId(builder, altOperatingUnitId)

def OperatingunitAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OperatingunitAddName(builder, name)

def OperatingunitAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    OperatingunitAddDescription(builder, description)

def OperatingunitAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    OperatingunitAddIdLocation(builder, idLocation)

def OperatingunitAddIdContact(builder, idContact):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idContact), 0)

def AddIdContact(builder, idContact):
    OperatingunitAddIdContact(builder, idContact)

def OperatingunitAddIdOrganization(builder, idOrganization):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idOrganization), 0)

def AddIdOrganization(builder, idOrganization):
    OperatingunitAddIdOrganization(builder, idOrganization)

def OperatingunitAddUnitIdentifier(builder, unitIdentifier):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unitIdentifier), 0)

def AddUnitIdentifier(builder, unitIdentifier):
    OperatingunitAddUnitIdentifier(builder, unitIdentifier)

def OperatingunitAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    OperatingunitAddCountryCode(builder, countryCode)

def OperatingunitAddAltCountryCode(builder, altCountryCode):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(altCountryCode), 0)

def AddAltCountryCode(builder, altCountryCode):
    OperatingunitAddAltCountryCode(builder, altCountryCode)

def OperatingunitAddWac(builder, wac):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(wac), 0)

def AddWac(builder, wac):
    OperatingunitAddWac(builder, wac)

def OperatingunitAddOperStatus(builder, operStatus):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(operStatus), 0)

def AddOperStatus(builder, operStatus):
    OperatingunitAddOperStatus(builder, operStatus)

def OperatingunitAddCondition(builder, condition):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(condition), 0)

def AddCondition(builder, condition):
    OperatingunitAddCondition(builder, condition)

def OperatingunitAddConditionAvail(builder, conditionAvail):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(conditionAvail), 0)

def AddConditionAvail(builder, conditionAvail):
    OperatingunitAddConditionAvail(builder, conditionAvail)

def OperatingunitAddEval(builder, eval):
    builder.PrependInt32Slot(15, eval, 0)

def AddEval(builder, eval):
    OperatingunitAddEval(builder, eval)

def OperatingunitAddFpa(builder, fpa):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(fpa), 0)

def AddFpa(builder, fpa):
    OperatingunitAddFpa(builder, fpa)

def OperatingunitAddIdent(builder, ident):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(ident), 0)

def AddIdent(builder, ident):
    OperatingunitAddIdent(builder, ident)

def OperatingunitAddAllegiance(builder, allegiance):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(allegiance), 0)

def AddAllegiance(builder, allegiance):
    OperatingunitAddAllegiance(builder, allegiance)

def OperatingunitAddAltAllegiance(builder, altAllegiance):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(altAllegiance), 0)

def AddAltAllegiance(builder, altAllegiance):
    OperatingunitAddAltAllegiance(builder, altAllegiance)

def OperatingunitAddLocName(builder, locName):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(locName), 0)

def AddLocName(builder, locName):
    OperatingunitAddLocName(builder, locName)

def OperatingunitAddLocReason(builder, locReason):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(locReason), 0)

def AddLocReason(builder, locReason):
    OperatingunitAddLocReason(builder, locReason)

def OperatingunitAddForce(builder, force):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(force), 0)

def AddForce(builder, force):
    OperatingunitAddForce(builder, force)

def OperatingunitAddForceName(builder, forceName):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(forceName), 0)

def AddForceName(builder, forceName):
    OperatingunitAddForceName(builder, forceName)

def OperatingunitAddFunctRole(builder, functRole):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(functRole), 0)

def AddFunctRole(builder, functRole):
    OperatingunitAddFunctRole(builder, functRole)

def OperatingunitAddMsnPrimary(builder, msnPrimary):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(msnPrimary), 0)

def AddMsnPrimary(builder, msnPrimary):
    OperatingunitAddMsnPrimary(builder, msnPrimary)

def OperatingunitAddMsnPrimarySpecialty(builder, msnPrimarySpecialty):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(msnPrimarySpecialty), 0)

def AddMsnPrimarySpecialty(builder, msnPrimarySpecialty):
    OperatingunitAddMsnPrimarySpecialty(builder, msnPrimarySpecialty)

def OperatingunitAddMasterUnit(builder, masterUnit):
    builder.PrependBoolSlot(27, masterUnit, 0)

def AddMasterUnit(builder, masterUnit):
    OperatingunitAddMasterUnit(builder, masterUnit)

def OperatingunitAddStylizedUnit(builder, stylizedUnit):
    builder.PrependBoolSlot(28, stylizedUnit, 0)

def AddStylizedUnit(builder, stylizedUnit):
    OperatingunitAddStylizedUnit(builder, stylizedUnit)

def OperatingunitAddDivCat(builder, divCat):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(divCat), 0)

def AddDivCat(builder, divCat):
    OperatingunitAddDivCat(builder, divCat)

def OperatingunitAddEchelon(builder, echelon):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(echelon), 0)

def AddEchelon(builder, echelon):
    OperatingunitAddEchelon(builder, echelon)

def OperatingunitAddEchelonTier(builder, echelonTier):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(echelonTier), 0)

def AddEchelonTier(builder, echelonTier):
    OperatingunitAddEchelonTier(builder, echelonTier)

def OperatingunitAddFleetId(builder, fleetId):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(fleetId), 0)

def AddFleetId(builder, fleetId):
    OperatingunitAddFleetId(builder, fleetId)

def OperatingunitAddDeployStatus(builder, deployStatus):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(deployStatus), 0)

def AddDeployStatus(builder, deployStatus):
    OperatingunitAddDeployStatus(builder, deployStatus)

def OperatingunitAddFlagFlown(builder, flagFlown):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(flagFlown), 0)

def AddFlagFlown(builder, flagFlown):
    OperatingunitAddFlagFlown(builder, flagFlown)

def OperatingunitAddCoordDatum(builder, coordDatum):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(coordDatum), 0)

def AddCoordDatum(builder, coordDatum):
    OperatingunitAddCoordDatum(builder, coordDatum)

def OperatingunitAddCoord(builder, coord):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(coord), 0)

def AddCoord(builder, coord):
    OperatingunitAddCoord(builder, coord)

def OperatingunitAddCoordDerivAcc(builder, coordDerivAcc):
    builder.PrependFloat64Slot(37, coordDerivAcc, 0.0)

def AddCoordDerivAcc(builder, coordDerivAcc):
    OperatingunitAddCoordDerivAcc(builder, coordDerivAcc)

def OperatingunitAddLat(builder, lat):
    builder.PrependFloat64Slot(38, lat, 0.0)

def AddLat(builder, lat):
    OperatingunitAddLat(builder, lat)

def OperatingunitAddLon(builder, lon):
    builder.PrependFloat64Slot(39, lon, 0.0)

def AddLon(builder, lon):
    OperatingunitAddLon(builder, lon)

def OperatingunitAddElevMsl(builder, elevMsl):
    builder.PrependFloat64Slot(40, elevMsl, 0.0)

def AddElevMsl(builder, elevMsl):
    OperatingunitAddElevMsl(builder, elevMsl)

def OperatingunitAddElevMslConfLvl(builder, elevMslConfLvl):
    builder.PrependInt32Slot(41, elevMslConfLvl, 0)

def AddElevMslConfLvl(builder, elevMslConfLvl):
    OperatingunitAddElevMslConfLvl(builder, elevMslConfLvl)

def OperatingunitAddElevMslDerivAcc(builder, elevMslDerivAcc):
    builder.PrependFloat64Slot(42, elevMslDerivAcc, 0.0)

def AddElevMslDerivAcc(builder, elevMslDerivAcc):
    OperatingunitAddElevMslDerivAcc(builder, elevMslDerivAcc)

def OperatingunitAddGeoidalMslSep(builder, geoidalMslSep):
    builder.PrependFloat64Slot(43, geoidalMslSep, 0.0)

def AddGeoidalMslSep(builder, geoidalMslSep):
    OperatingunitAddGeoidalMslSep(builder, geoidalMslSep)

def OperatingunitAddMilGridSys(builder, milGridSys):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(milGridSys), 0)

def AddMilGridSys(builder, milGridSys):
    OperatingunitAddMilGridSys(builder, milGridSys)

def OperatingunitAddMilGrid(builder, milGrid):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(milGrid), 0)

def AddMilGrid(builder, milGrid):
    OperatingunitAddMilGrid(builder, milGrid)

def OperatingunitAddUtm(builder, utm):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(utm), 0)

def AddUtm(builder, utm):
    OperatingunitAddUtm(builder, utm)

def OperatingunitAddAirDefArea(builder, airDefArea):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(airDefArea), 0)

def AddAirDefArea(builder, airDefArea):
    OperatingunitAddAirDefArea(builder, airDefArea)

def OperatingunitAddPolSubdiv(builder, polSubdiv):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(polSubdiv), 0)

def AddPolSubdiv(builder, polSubdiv):
    OperatingunitAddPolSubdiv(builder, polSubdiv)

def OperatingunitAddSymCode(builder, symCode):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(symCode), 0)

def AddSymCode(builder, symCode):
    OperatingunitAddSymCode(builder, symCode)

def OperatingunitAddClassRating(builder, classRating):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(classRating), 0)

def AddClassRating(builder, classRating):
    OperatingunitAddClassRating(builder, classRating)

def OperatingunitAddRecStatus(builder, recStatus):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(recStatus), 0)

def AddRecStatus(builder, recStatus):
    OperatingunitAddRecStatus(builder, recStatus)

def OperatingunitAddReviewDate(builder, reviewDate):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(reviewDate), 0)

def AddReviewDate(builder, reviewDate):
    OperatingunitAddReviewDate(builder, reviewDate)

def OperatingunitAddResProd(builder, resProd):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(resProd), 0)

def AddResProd(builder, resProd):
    OperatingunitAddResProd(builder, resProd)

def OperatingunitAddReferenceDoc(builder, referenceDoc):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(referenceDoc), 0)

def AddReferenceDoc(builder, referenceDoc):
    OperatingunitAddReferenceDoc(builder, referenceDoc)

def OperatingunitAddOperatingUnitRemarks(builder, operatingUnitRemarks):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(operatingUnitRemarks), 0)

def AddOperatingUnitRemarks(builder, operatingUnitRemarks):
    OperatingunitAddOperatingUnitRemarks(builder, operatingUnitRemarks)

def OperatingunitStartOperatingUnitRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOperatingUnitRemarksVector(builder, numElems):
    return OperatingunitStartOperatingUnitRemarksVector(builder, numElems)

def OperatingunitAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OperatingunitAddCreatedAt(builder, createdAt)

def OperatingunitAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OperatingunitAddCreatedBy(builder, createdBy)

def OperatingunitAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OperatingunitAddUpdatedAt(builder, updatedAt)

def OperatingunitAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OperatingunitAddUpdatedBy(builder, updatedBy)

def OperatingunitAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OperatingunitAddSource(builder, source)

def OperatingunitAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OperatingunitAddOrigin(builder, origin)

def OperatingunitAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(62, dataMode, 0)

def AddDataMode(builder, dataMode):
    OperatingunitAddDataMode(builder, dataMode)

def OperatingunitAddOrganization(builder, organization):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(organization), 0)

def AddOrganization(builder, organization):
    OperatingunitAddOrganization(builder, organization)

def OperatingunitAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    OperatingunitAddLocation(builder, location)

def OperatingunitEnd(builder):
    return builder.EndObject()

def End(builder):
    return OperatingunitEnd(builder)

try:
    from typing import List
except:
    pass

class OperatingunitT(object):

    # OperatingunitT
    def __init__(self):
        self.idOperatingUnit = None  # type: str
        self.classificationMarking = None  # type: str
        self.altOperatingUnitId = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.idLocation = None  # type: str
        self.idContact = None  # type: str
        self.idOrganization = None  # type: str
        self.unitIdentifier = None  # type: str
        self.countryCode = None  # type: str
        self.altCountryCode = None  # type: str
        self.wac = None  # type: str
        self.operStatus = None  # type: str
        self.condition = None  # type: str
        self.conditionAvail = None  # type: str
        self.eval = 0  # type: int
        self.fpa = None  # type: str
        self.ident = None  # type: str
        self.allegiance = None  # type: str
        self.altAllegiance = None  # type: str
        self.locName = None  # type: str
        self.locReason = None  # type: str
        self.force = None  # type: str
        self.forceName = None  # type: str
        self.functRole = None  # type: str
        self.msnPrimary = None  # type: str
        self.msnPrimarySpecialty = None  # type: str
        self.masterUnit = False  # type: bool
        self.stylizedUnit = False  # type: bool
        self.divCat = None  # type: str
        self.echelon = None  # type: str
        self.echelonTier = None  # type: str
        self.fleetId = None  # type: str
        self.deployStatus = None  # type: str
        self.flagFlown = None  # type: str
        self.coordDatum = None  # type: str
        self.coord = None  # type: str
        self.coordDerivAcc = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.elevMsl = 0.0  # type: float
        self.elevMslConfLvl = 0  # type: int
        self.elevMslDerivAcc = 0.0  # type: float
        self.geoidalMslSep = 0.0  # type: float
        self.milGridSys = None  # type: str
        self.milGrid = None  # type: str
        self.utm = None  # type: str
        self.airDefArea = None  # type: str
        self.polSubdiv = None  # type: str
        self.symCode = None  # type: str
        self.classRating = None  # type: str
        self.recStatus = None  # type: str
        self.reviewDate = None  # type: str
        self.resProd = None  # type: str
        self.referenceDoc = None  # type: str
        self.operatingUnitRemarks = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.organization = None  # type: str
        self.location = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operatingunit = Operatingunit()
        operatingunit.Init(buf, pos)
        return cls.InitFromObj(operatingunit)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, operatingunit):
        x = OperatingunitT()
        x._UnPack(operatingunit)
        return x

    # OperatingunitT
    def _UnPack(self, operatingunit):
        if operatingunit is None:
            return
        self.idOperatingUnit = operatingunit.IdOperatingUnit()
        self.classificationMarking = operatingunit.ClassificationMarking()
        self.altOperatingUnitId = operatingunit.AltOperatingUnitId()
        self.name = operatingunit.Name()
        self.description = operatingunit.Description()
        self.idLocation = operatingunit.IdLocation()
        self.idContact = operatingunit.IdContact()
        self.idOrganization = operatingunit.IdOrganization()
        self.unitIdentifier = operatingunit.UnitIdentifier()
        self.countryCode = operatingunit.CountryCode()
        self.altCountryCode = operatingunit.AltCountryCode()
        self.wac = operatingunit.Wac()
        self.operStatus = operatingunit.OperStatus()
        self.condition = operatingunit.Condition()
        self.conditionAvail = operatingunit.ConditionAvail()
        self.eval = operatingunit.Eval()
        self.fpa = operatingunit.Fpa()
        self.ident = operatingunit.Ident()
        self.allegiance = operatingunit.Allegiance()
        self.altAllegiance = operatingunit.AltAllegiance()
        self.locName = operatingunit.LocName()
        self.locReason = operatingunit.LocReason()
        self.force = operatingunit.Force()
        self.forceName = operatingunit.ForceName()
        self.functRole = operatingunit.FunctRole()
        self.msnPrimary = operatingunit.MsnPrimary()
        self.msnPrimarySpecialty = operatingunit.MsnPrimarySpecialty()
        self.masterUnit = operatingunit.MasterUnit()
        self.stylizedUnit = operatingunit.StylizedUnit()
        self.divCat = operatingunit.DivCat()
        self.echelon = operatingunit.Echelon()
        self.echelonTier = operatingunit.EchelonTier()
        self.fleetId = operatingunit.FleetId()
        self.deployStatus = operatingunit.DeployStatus()
        self.flagFlown = operatingunit.FlagFlown()
        self.coordDatum = operatingunit.CoordDatum()
        self.coord = operatingunit.Coord()
        self.coordDerivAcc = operatingunit.CoordDerivAcc()
        self.lat = operatingunit.Lat()
        self.lon = operatingunit.Lon()
        self.elevMsl = operatingunit.ElevMsl()
        self.elevMslConfLvl = operatingunit.ElevMslConfLvl()
        self.elevMslDerivAcc = operatingunit.ElevMslDerivAcc()
        self.geoidalMslSep = operatingunit.GeoidalMslSep()
        self.milGridSys = operatingunit.MilGridSys()
        self.milGrid = operatingunit.MilGrid()
        self.utm = operatingunit.Utm()
        self.airDefArea = operatingunit.AirDefArea()
        self.polSubdiv = operatingunit.PolSubdiv()
        self.symCode = operatingunit.SymCode()
        self.classRating = operatingunit.ClassRating()
        self.recStatus = operatingunit.RecStatus()
        self.reviewDate = operatingunit.ReviewDate()
        self.resProd = operatingunit.ResProd()
        self.referenceDoc = operatingunit.ReferenceDoc()
        if not operatingunit.OperatingUnitRemarksIsNone():
            self.operatingUnitRemarks = []
            for i in range(operatingunit.OperatingUnitRemarksLength()):
                self.operatingUnitRemarks.append(operatingunit.OperatingUnitRemarks(i))
        self.createdAt = operatingunit.CreatedAt()
        self.createdBy = operatingunit.CreatedBy()
        self.updatedAt = operatingunit.UpdatedAt()
        self.updatedBy = operatingunit.UpdatedBy()
        self.source = operatingunit.Source()
        self.origin = operatingunit.Origin()
        self.dataMode = operatingunit.DataMode()
        self.organization = operatingunit.Organization()
        self.location = operatingunit.Location()

    # OperatingunitT
    def Pack(self, builder):
        if self.idOperatingUnit is not None:
            idOperatingUnit = builder.CreateString(self.idOperatingUnit)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.altOperatingUnitId is not None:
            altOperatingUnitId = builder.CreateString(self.altOperatingUnitId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.idContact is not None:
            idContact = builder.CreateString(self.idContact)
        if self.idOrganization is not None:
            idOrganization = builder.CreateString(self.idOrganization)
        if self.unitIdentifier is not None:
            unitIdentifier = builder.CreateString(self.unitIdentifier)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.altCountryCode is not None:
            altCountryCode = builder.CreateString(self.altCountryCode)
        if self.wac is not None:
            wac = builder.CreateString(self.wac)
        if self.operStatus is not None:
            operStatus = builder.CreateString(self.operStatus)
        if self.condition is not None:
            condition = builder.CreateString(self.condition)
        if self.conditionAvail is not None:
            conditionAvail = builder.CreateString(self.conditionAvail)
        if self.fpa is not None:
            fpa = builder.CreateString(self.fpa)
        if self.ident is not None:
            ident = builder.CreateString(self.ident)
        if self.allegiance is not None:
            allegiance = builder.CreateString(self.allegiance)
        if self.altAllegiance is not None:
            altAllegiance = builder.CreateString(self.altAllegiance)
        if self.locName is not None:
            locName = builder.CreateString(self.locName)
        if self.locReason is not None:
            locReason = builder.CreateString(self.locReason)
        if self.force is not None:
            force = builder.CreateString(self.force)
        if self.forceName is not None:
            forceName = builder.CreateString(self.forceName)
        if self.functRole is not None:
            functRole = builder.CreateString(self.functRole)
        if self.msnPrimary is not None:
            msnPrimary = builder.CreateString(self.msnPrimary)
        if self.msnPrimarySpecialty is not None:
            msnPrimarySpecialty = builder.CreateString(self.msnPrimarySpecialty)
        if self.divCat is not None:
            divCat = builder.CreateString(self.divCat)
        if self.echelon is not None:
            echelon = builder.CreateString(self.echelon)
        if self.echelonTier is not None:
            echelonTier = builder.CreateString(self.echelonTier)
        if self.fleetId is not None:
            fleetId = builder.CreateString(self.fleetId)
        if self.deployStatus is not None:
            deployStatus = builder.CreateString(self.deployStatus)
        if self.flagFlown is not None:
            flagFlown = builder.CreateString(self.flagFlown)
        if self.coordDatum is not None:
            coordDatum = builder.CreateString(self.coordDatum)
        if self.coord is not None:
            coord = builder.CreateString(self.coord)
        if self.milGridSys is not None:
            milGridSys = builder.CreateString(self.milGridSys)
        if self.milGrid is not None:
            milGrid = builder.CreateString(self.milGrid)
        if self.utm is not None:
            utm = builder.CreateString(self.utm)
        if self.airDefArea is not None:
            airDefArea = builder.CreateString(self.airDefArea)
        if self.polSubdiv is not None:
            polSubdiv = builder.CreateString(self.polSubdiv)
        if self.symCode is not None:
            symCode = builder.CreateString(self.symCode)
        if self.classRating is not None:
            classRating = builder.CreateString(self.classRating)
        if self.recStatus is not None:
            recStatus = builder.CreateString(self.recStatus)
        if self.reviewDate is not None:
            reviewDate = builder.CreateString(self.reviewDate)
        if self.resProd is not None:
            resProd = builder.CreateString(self.resProd)
        if self.referenceDoc is not None:
            referenceDoc = builder.CreateString(self.referenceDoc)
        if self.operatingUnitRemarks is not None:
            operatingUnitRemarkslist = []
            for i in range(len(self.operatingUnitRemarks)):
                operatingUnitRemarkslist.append(builder.CreateString(self.operatingUnitRemarks[i]))
            OperatingunitStartOperatingUnitRemarksVector(builder, len(self.operatingUnitRemarks))
            for i in reversed(range(len(self.operatingUnitRemarks))):
                builder.PrependUOffsetTRelative(operatingUnitRemarkslist[i])
            operatingUnitRemarks = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.organization is not None:
            organization = builder.CreateString(self.organization)
        if self.location is not None:
            location = builder.CreateString(self.location)
        OperatingunitStart(builder)
        if self.idOperatingUnit is not None:
            OperatingunitAddIdOperatingUnit(builder, idOperatingUnit)
        if self.classificationMarking is not None:
            OperatingunitAddClassificationMarking(builder, classificationMarking)
        if self.altOperatingUnitId is not None:
            OperatingunitAddAltOperatingUnitId(builder, altOperatingUnitId)
        if self.name is not None:
            OperatingunitAddName(builder, name)
        if self.description is not None:
            OperatingunitAddDescription(builder, description)
        if self.idLocation is not None:
            OperatingunitAddIdLocation(builder, idLocation)
        if self.idContact is not None:
            OperatingunitAddIdContact(builder, idContact)
        if self.idOrganization is not None:
            OperatingunitAddIdOrganization(builder, idOrganization)
        if self.unitIdentifier is not None:
            OperatingunitAddUnitIdentifier(builder, unitIdentifier)
        if self.countryCode is not None:
            OperatingunitAddCountryCode(builder, countryCode)
        if self.altCountryCode is not None:
            OperatingunitAddAltCountryCode(builder, altCountryCode)
        if self.wac is not None:
            OperatingunitAddWac(builder, wac)
        if self.operStatus is not None:
            OperatingunitAddOperStatus(builder, operStatus)
        if self.condition is not None:
            OperatingunitAddCondition(builder, condition)
        if self.conditionAvail is not None:
            OperatingunitAddConditionAvail(builder, conditionAvail)
        OperatingunitAddEval(builder, self.eval)
        if self.fpa is not None:
            OperatingunitAddFpa(builder, fpa)
        if self.ident is not None:
            OperatingunitAddIdent(builder, ident)
        if self.allegiance is not None:
            OperatingunitAddAllegiance(builder, allegiance)
        if self.altAllegiance is not None:
            OperatingunitAddAltAllegiance(builder, altAllegiance)
        if self.locName is not None:
            OperatingunitAddLocName(builder, locName)
        if self.locReason is not None:
            OperatingunitAddLocReason(builder, locReason)
        if self.force is not None:
            OperatingunitAddForce(builder, force)
        if self.forceName is not None:
            OperatingunitAddForceName(builder, forceName)
        if self.functRole is not None:
            OperatingunitAddFunctRole(builder, functRole)
        if self.msnPrimary is not None:
            OperatingunitAddMsnPrimary(builder, msnPrimary)
        if self.msnPrimarySpecialty is not None:
            OperatingunitAddMsnPrimarySpecialty(builder, msnPrimarySpecialty)
        OperatingunitAddMasterUnit(builder, self.masterUnit)
        OperatingunitAddStylizedUnit(builder, self.stylizedUnit)
        if self.divCat is not None:
            OperatingunitAddDivCat(builder, divCat)
        if self.echelon is not None:
            OperatingunitAddEchelon(builder, echelon)
        if self.echelonTier is not None:
            OperatingunitAddEchelonTier(builder, echelonTier)
        if self.fleetId is not None:
            OperatingunitAddFleetId(builder, fleetId)
        if self.deployStatus is not None:
            OperatingunitAddDeployStatus(builder, deployStatus)
        if self.flagFlown is not None:
            OperatingunitAddFlagFlown(builder, flagFlown)
        if self.coordDatum is not None:
            OperatingunitAddCoordDatum(builder, coordDatum)
        if self.coord is not None:
            OperatingunitAddCoord(builder, coord)
        OperatingunitAddCoordDerivAcc(builder, self.coordDerivAcc)
        OperatingunitAddLat(builder, self.lat)
        OperatingunitAddLon(builder, self.lon)
        OperatingunitAddElevMsl(builder, self.elevMsl)
        OperatingunitAddElevMslConfLvl(builder, self.elevMslConfLvl)
        OperatingunitAddElevMslDerivAcc(builder, self.elevMslDerivAcc)
        OperatingunitAddGeoidalMslSep(builder, self.geoidalMslSep)
        if self.milGridSys is not None:
            OperatingunitAddMilGridSys(builder, milGridSys)
        if self.milGrid is not None:
            OperatingunitAddMilGrid(builder, milGrid)
        if self.utm is not None:
            OperatingunitAddUtm(builder, utm)
        if self.airDefArea is not None:
            OperatingunitAddAirDefArea(builder, airDefArea)
        if self.polSubdiv is not None:
            OperatingunitAddPolSubdiv(builder, polSubdiv)
        if self.symCode is not None:
            OperatingunitAddSymCode(builder, symCode)
        if self.classRating is not None:
            OperatingunitAddClassRating(builder, classRating)
        if self.recStatus is not None:
            OperatingunitAddRecStatus(builder, recStatus)
        if self.reviewDate is not None:
            OperatingunitAddReviewDate(builder, reviewDate)
        if self.resProd is not None:
            OperatingunitAddResProd(builder, resProd)
        if self.referenceDoc is not None:
            OperatingunitAddReferenceDoc(builder, referenceDoc)
        if self.operatingUnitRemarks is not None:
            OperatingunitAddOperatingUnitRemarks(builder, operatingUnitRemarks)
        if self.createdAt is not None:
            OperatingunitAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OperatingunitAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OperatingunitAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OperatingunitAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            OperatingunitAddSource(builder, source)
        if self.origin is not None:
            OperatingunitAddOrigin(builder, origin)
        OperatingunitAddDataMode(builder, self.dataMode)
        if self.organization is not None:
            OperatingunitAddOrganization(builder, organization)
        if self.location is not None:
            OperatingunitAddLocation(builder, location)
        operatingunit = OperatingunitEnd(builder)
        return operatingunit
