# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of diplomatic clearance details.
class DiplomaticClearanceDetails_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiplomaticClearanceDetails_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiplomaticClearanceDetails_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DiplomaticClearanceDetails_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x49\x50\x4C", size_prefixed=size_prefixed)

    # DiplomaticClearanceDetails_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
    # Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiplomaticClearanceDetails_Full
    def IdSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifies the Itinerary point of a sortie where an air event occurs.
    # Example: /// Example: 825
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def LegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    # Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
    # Constraints: Minimum length = 0, Maximum length = 4000
    # DiplomaticClearanceDetails_Full
    def RouteString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def ValidStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def ValidEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of this diplomatic clearance issued by the host country.
    # Example: /// Example: MFMW225662GHQ
    # Constraints: Minimum length = 0, Maximum length = 32
    # DiplomaticClearanceDetails_Full
    def ClearanceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiplomaticClearanceDetails_Full
    def ExternalClearanceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign of the sortie cleared with this diplomatic clearance.
    # Example: /// Example: FALCN09
    # Constraints: Minimum length = 0, Maximum length = 24
    # DiplomaticClearanceDetails_Full
    def ClearedCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def SequenceNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: NL
    # Constraints: Minimum length = 0, Maximum length = 4
    # DiplomaticClearanceDetails_Full
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    # Example: /// Example: IZ
    # Constraints: Minimum length = 0, Maximum length = 16
    # DiplomaticClearanceDetails_Full
    def AltCountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the country issuing this diplomatic clearance.
    # Example: /// Example: NETHERLANDS
    # Constraints: Minimum length = 0, Maximum length = 50
    # DiplomaticClearanceDetails_Full
    def CountryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of when this diplomatic clearance is valid.
    # Example: /// Example: CY2023
    # Constraints: Minimum length = 0, Maximum length = 256
    # DiplomaticClearanceDetails_Full
    def ValidDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning the valid diplomatic clearance window.
    # Example: /// Example: Period remarks
    # Constraints: Minimum length = 0, Maximum length = 256
    # DiplomaticClearanceDetails_Full
    def WindowRemark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The navigation point name where the aircraft must enter the country.
    # Example: /// Example: LOMOS
    # Constraints: Minimum length = 0, Maximum length = 38
    # DiplomaticClearanceDetails_Full
    def EntryPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def EntryNet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The navigation point name where the aircraft must exit the country.
    # Example: /// Example: BUDOP
    # Constraints: Minimum length = 0, Maximum length = 38
    # DiplomaticClearanceDetails_Full
    def ExitPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def ExitNlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether the clearance request requires ICAO specific information.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def ReqIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
    # Example: /// Example: O
    # Constraints: Minimum length = 0, Maximum length = 1
    # DiplomaticClearanceDetails_Full
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the current status of the diplomatic clearance request.
    # Example: /// Example: IN WORK
    # Constraints: Minimum length = 0, Maximum length = 16
    # DiplomaticClearanceDetails_Full
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The diplomatic clearance profile name used within clearance management systems.
    # Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
    # Constraints: Minimum length = 0, Maximum length = 100
    # DiplomaticClearanceDetails_Full
    def Profile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether entry/exit points are required for clearances.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # DiplomaticClearanceDetails_Full
    def ReqPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Remarks concerning this diplomatic clearance.
    # Example: /// Example: Clearance remarks
    # Constraints: Minimum length = 0, Maximum length = 1024
    # DiplomaticClearanceDetails_Full
    def ClearanceRemark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiplomaticClearanceDetails_FullStart(builder):
    builder.StartObject(24)

def Start(builder):
    DiplomaticClearanceDetails_FullStart(builder)

def DiplomaticClearanceDetails_FullAddIdSortie(builder, idSortie):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idSortie), 0)

def AddIdSortie(builder, idSortie):
    DiplomaticClearanceDetails_FullAddIdSortie(builder, idSortie)

def DiplomaticClearanceDetails_FullAddLegNum(builder, legNum):
    builder.PrependInt32Slot(1, legNum, 0)

def AddLegNum(builder, legNum):
    DiplomaticClearanceDetails_FullAddLegNum(builder, legNum)

def DiplomaticClearanceDetails_FullAddRouteString(builder, routeString):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(routeString), 0)

def AddRouteString(builder, routeString):
    DiplomaticClearanceDetails_FullAddRouteString(builder, routeString)

def DiplomaticClearanceDetails_FullAddValidStartTime(builder, validStartTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(validStartTime), 0)

def AddValidStartTime(builder, validStartTime):
    DiplomaticClearanceDetails_FullAddValidStartTime(builder, validStartTime)

def DiplomaticClearanceDetails_FullAddValidEndTime(builder, validEndTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(validEndTime), 0)

def AddValidEndTime(builder, validEndTime):
    DiplomaticClearanceDetails_FullAddValidEndTime(builder, validEndTime)

def DiplomaticClearanceDetails_FullAddClearanceId(builder, clearanceId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(clearanceId), 0)

def AddClearanceId(builder, clearanceId):
    DiplomaticClearanceDetails_FullAddClearanceId(builder, clearanceId)

def DiplomaticClearanceDetails_FullAddExternalClearanceId(builder, externalClearanceId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(externalClearanceId), 0)

def AddExternalClearanceId(builder, externalClearanceId):
    DiplomaticClearanceDetails_FullAddExternalClearanceId(builder, externalClearanceId)

def DiplomaticClearanceDetails_FullAddClearedCallSign(builder, clearedCallSign):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(clearedCallSign), 0)

def AddClearedCallSign(builder, clearedCallSign):
    DiplomaticClearanceDetails_FullAddClearedCallSign(builder, clearedCallSign)

def DiplomaticClearanceDetails_FullAddSequenceNum(builder, sequenceNum):
    builder.PrependInt32Slot(8, sequenceNum, 0)

def AddSequenceNum(builder, sequenceNum):
    DiplomaticClearanceDetails_FullAddSequenceNum(builder, sequenceNum)

def DiplomaticClearanceDetails_FullAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    DiplomaticClearanceDetails_FullAddCountryCode(builder, countryCode)

def DiplomaticClearanceDetails_FullAddAltCountryCode(builder, altCountryCode):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(altCountryCode), 0)

def AddAltCountryCode(builder, altCountryCode):
    DiplomaticClearanceDetails_FullAddAltCountryCode(builder, altCountryCode)

def DiplomaticClearanceDetails_FullAddCountryName(builder, countryName):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(countryName), 0)

def AddCountryName(builder, countryName):
    DiplomaticClearanceDetails_FullAddCountryName(builder, countryName)

def DiplomaticClearanceDetails_FullAddValidDesc(builder, validDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(validDesc), 0)

def AddValidDesc(builder, validDesc):
    DiplomaticClearanceDetails_FullAddValidDesc(builder, validDesc)

def DiplomaticClearanceDetails_FullAddWindowRemark(builder, windowRemark):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(windowRemark), 0)

def AddWindowRemark(builder, windowRemark):
    DiplomaticClearanceDetails_FullAddWindowRemark(builder, windowRemark)

def DiplomaticClearanceDetails_FullAddEntryPoint(builder, entryPoint):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(entryPoint), 0)

def AddEntryPoint(builder, entryPoint):
    DiplomaticClearanceDetails_FullAddEntryPoint(builder, entryPoint)

def DiplomaticClearanceDetails_FullAddEntryNet(builder, entryNet):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(entryNet), 0)

def AddEntryNet(builder, entryNet):
    DiplomaticClearanceDetails_FullAddEntryNet(builder, entryNet)

def DiplomaticClearanceDetails_FullAddExitPoint(builder, exitPoint):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(exitPoint), 0)

def AddExitPoint(builder, exitPoint):
    DiplomaticClearanceDetails_FullAddExitPoint(builder, exitPoint)

def DiplomaticClearanceDetails_FullAddExitNlt(builder, exitNlt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(exitNlt), 0)

def AddExitNlt(builder, exitNlt):
    DiplomaticClearanceDetails_FullAddExitNlt(builder, exitNlt)

def DiplomaticClearanceDetails_FullAddReqIcao(builder, reqIcao):
    builder.PrependBoolSlot(18, reqIcao, 0)

def AddReqIcao(builder, reqIcao):
    DiplomaticClearanceDetails_FullAddReqIcao(builder, reqIcao)

def DiplomaticClearanceDetails_FullAddAction(builder, action):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(action), 0)

def AddAction(builder, action):
    DiplomaticClearanceDetails_FullAddAction(builder, action)

def DiplomaticClearanceDetails_FullAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    DiplomaticClearanceDetails_FullAddStatus(builder, status)

def DiplomaticClearanceDetails_FullAddProfile(builder, profile):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(profile), 0)

def AddProfile(builder, profile):
    DiplomaticClearanceDetails_FullAddProfile(builder, profile)

def DiplomaticClearanceDetails_FullAddReqPoint(builder, reqPoint):
    builder.PrependBoolSlot(22, reqPoint, 0)

def AddReqPoint(builder, reqPoint):
    DiplomaticClearanceDetails_FullAddReqPoint(builder, reqPoint)

def DiplomaticClearanceDetails_FullAddClearanceRemark(builder, clearanceRemark):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(clearanceRemark), 0)

def AddClearanceRemark(builder, clearanceRemark):
    DiplomaticClearanceDetails_FullAddClearanceRemark(builder, clearanceRemark)

def DiplomaticClearanceDetails_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return DiplomaticClearanceDetails_FullEnd(builder)


class DiplomaticClearanceDetails_FullT(object):

    # DiplomaticClearanceDetails_FullT
    def __init__(self):
        self.idSortie = None  # type: str
        self.legNum = 0  # type: int
        self.routeString = None  # type: str
        self.validStartTime = None  # type: str
        self.validEndTime = None  # type: str
        self.clearanceId = None  # type: str
        self.externalClearanceId = None  # type: str
        self.clearedCallSign = None  # type: str
        self.sequenceNum = 0  # type: int
        self.countryCode = None  # type: str
        self.altCountryCode = None  # type: str
        self.countryName = None  # type: str
        self.validDesc = None  # type: str
        self.windowRemark = None  # type: str
        self.entryPoint = None  # type: str
        self.entryNet = None  # type: str
        self.exitPoint = None  # type: str
        self.exitNlt = None  # type: str
        self.reqIcao = False  # type: bool
        self.action = None  # type: str
        self.status = None  # type: str
        self.profile = None  # type: str
        self.reqPoint = False  # type: bool
        self.clearanceRemark = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diplomaticClearanceDetailsFull = DiplomaticClearanceDetails_Full()
        diplomaticClearanceDetailsFull.Init(buf, pos)
        return cls.InitFromObj(diplomaticClearanceDetailsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diplomaticClearanceDetailsFull):
        x = DiplomaticClearanceDetails_FullT()
        x._UnPack(diplomaticClearanceDetailsFull)
        return x

    # DiplomaticClearanceDetails_FullT
    def _UnPack(self, diplomaticClearanceDetailsFull):
        if diplomaticClearanceDetailsFull is None:
            return
        self.idSortie = diplomaticClearanceDetailsFull.IdSortie()
        self.legNum = diplomaticClearanceDetailsFull.LegNum()
        self.routeString = diplomaticClearanceDetailsFull.RouteString()
        self.validStartTime = diplomaticClearanceDetailsFull.ValidStartTime()
        self.validEndTime = diplomaticClearanceDetailsFull.ValidEndTime()
        self.clearanceId = diplomaticClearanceDetailsFull.ClearanceId()
        self.externalClearanceId = diplomaticClearanceDetailsFull.ExternalClearanceId()
        self.clearedCallSign = diplomaticClearanceDetailsFull.ClearedCallSign()
        self.sequenceNum = diplomaticClearanceDetailsFull.SequenceNum()
        self.countryCode = diplomaticClearanceDetailsFull.CountryCode()
        self.altCountryCode = diplomaticClearanceDetailsFull.AltCountryCode()
        self.countryName = diplomaticClearanceDetailsFull.CountryName()
        self.validDesc = diplomaticClearanceDetailsFull.ValidDesc()
        self.windowRemark = diplomaticClearanceDetailsFull.WindowRemark()
        self.entryPoint = diplomaticClearanceDetailsFull.EntryPoint()
        self.entryNet = diplomaticClearanceDetailsFull.EntryNet()
        self.exitPoint = diplomaticClearanceDetailsFull.ExitPoint()
        self.exitNlt = diplomaticClearanceDetailsFull.ExitNlt()
        self.reqIcao = diplomaticClearanceDetailsFull.ReqIcao()
        self.action = diplomaticClearanceDetailsFull.Action()
        self.status = diplomaticClearanceDetailsFull.Status()
        self.profile = diplomaticClearanceDetailsFull.Profile()
        self.reqPoint = diplomaticClearanceDetailsFull.ReqPoint()
        self.clearanceRemark = diplomaticClearanceDetailsFull.ClearanceRemark()

    # DiplomaticClearanceDetails_FullT
    def Pack(self, builder):
        if self.idSortie is not None:
            idSortie = builder.CreateString(self.idSortie)
        if self.routeString is not None:
            routeString = builder.CreateString(self.routeString)
        if self.validStartTime is not None:
            validStartTime = builder.CreateString(self.validStartTime)
        if self.validEndTime is not None:
            validEndTime = builder.CreateString(self.validEndTime)
        if self.clearanceId is not None:
            clearanceId = builder.CreateString(self.clearanceId)
        if self.externalClearanceId is not None:
            externalClearanceId = builder.CreateString(self.externalClearanceId)
        if self.clearedCallSign is not None:
            clearedCallSign = builder.CreateString(self.clearedCallSign)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.altCountryCode is not None:
            altCountryCode = builder.CreateString(self.altCountryCode)
        if self.countryName is not None:
            countryName = builder.CreateString(self.countryName)
        if self.validDesc is not None:
            validDesc = builder.CreateString(self.validDesc)
        if self.windowRemark is not None:
            windowRemark = builder.CreateString(self.windowRemark)
        if self.entryPoint is not None:
            entryPoint = builder.CreateString(self.entryPoint)
        if self.entryNet is not None:
            entryNet = builder.CreateString(self.entryNet)
        if self.exitPoint is not None:
            exitPoint = builder.CreateString(self.exitPoint)
        if self.exitNlt is not None:
            exitNlt = builder.CreateString(self.exitNlt)
        if self.action is not None:
            action = builder.CreateString(self.action)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.profile is not None:
            profile = builder.CreateString(self.profile)
        if self.clearanceRemark is not None:
            clearanceRemark = builder.CreateString(self.clearanceRemark)
        DiplomaticClearanceDetails_FullStart(builder)
        if self.idSortie is not None:
            DiplomaticClearanceDetails_FullAddIdSortie(builder, idSortie)
        DiplomaticClearanceDetails_FullAddLegNum(builder, self.legNum)
        if self.routeString is not None:
            DiplomaticClearanceDetails_FullAddRouteString(builder, routeString)
        if self.validStartTime is not None:
            DiplomaticClearanceDetails_FullAddValidStartTime(builder, validStartTime)
        if self.validEndTime is not None:
            DiplomaticClearanceDetails_FullAddValidEndTime(builder, validEndTime)
        if self.clearanceId is not None:
            DiplomaticClearanceDetails_FullAddClearanceId(builder, clearanceId)
        if self.externalClearanceId is not None:
            DiplomaticClearanceDetails_FullAddExternalClearanceId(builder, externalClearanceId)
        if self.clearedCallSign is not None:
            DiplomaticClearanceDetails_FullAddClearedCallSign(builder, clearedCallSign)
        DiplomaticClearanceDetails_FullAddSequenceNum(builder, self.sequenceNum)
        if self.countryCode is not None:
            DiplomaticClearanceDetails_FullAddCountryCode(builder, countryCode)
        if self.altCountryCode is not None:
            DiplomaticClearanceDetails_FullAddAltCountryCode(builder, altCountryCode)
        if self.countryName is not None:
            DiplomaticClearanceDetails_FullAddCountryName(builder, countryName)
        if self.validDesc is not None:
            DiplomaticClearanceDetails_FullAddValidDesc(builder, validDesc)
        if self.windowRemark is not None:
            DiplomaticClearanceDetails_FullAddWindowRemark(builder, windowRemark)
        if self.entryPoint is not None:
            DiplomaticClearanceDetails_FullAddEntryPoint(builder, entryPoint)
        if self.entryNet is not None:
            DiplomaticClearanceDetails_FullAddEntryNet(builder, entryNet)
        if self.exitPoint is not None:
            DiplomaticClearanceDetails_FullAddExitPoint(builder, exitPoint)
        if self.exitNlt is not None:
            DiplomaticClearanceDetails_FullAddExitNlt(builder, exitNlt)
        DiplomaticClearanceDetails_FullAddReqIcao(builder, self.reqIcao)
        if self.action is not None:
            DiplomaticClearanceDetails_FullAddAction(builder, action)
        if self.status is not None:
            DiplomaticClearanceDetails_FullAddStatus(builder, status)
        if self.profile is not None:
            DiplomaticClearanceDetails_FullAddProfile(builder, profile)
        DiplomaticClearanceDetails_FullAddReqPoint(builder, self.reqPoint)
        if self.clearanceRemark is not None:
            DiplomaticClearanceDetails_FullAddClearanceRemark(builder, clearanceRemark)
        diplomaticClearanceDetailsFull = DiplomaticClearanceDetails_FullEnd(builder)
        return diplomaticClearanceDetailsFull
