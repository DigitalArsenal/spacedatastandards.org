# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
class AntennaDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AntennaDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAntennaDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AntennaDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x4E\x54\x45", size_prefixed=size_prefixed)

    # AntennaDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ANTENNADETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AntennaDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Antenna.
    # Example: /// Example: ANTENNA-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AntennaDetails_Abridged
    def IdAntenna(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AntennaDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
    # Example: /// Example: Reflector
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna position (e.g. Top, Nadir, Side).
    # Example: /// Example: Top
    # Constraints: Minimum length = 0, Maximum length = 128
    # AntennaDetails_Abridged
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna mode (e.g. TX,RX).
    # Example: /// Example: TX
    # Constraints: Minimum length = 0, Maximum length = 4
    # AntennaDetails_Abridged
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this antenna is steerable.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def Steerable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if this is a beam forming antenna.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def BeamForming(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ID of the organization that manufactures the antenna.
    # Example: /// Example: MANUFACTUREORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AntennaDetails_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna diameter in meters.
    # Example: /// Example: 0.01
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def Diameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    # Example: /// Example: [0.03, 0.05]
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def Size(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AntennaDetails_Abridged
    def SizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AntennaDetails_Abridged
    def SizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Antenna start of frequency range in Mhz.
    # Example: /// Example: 2.1
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def StartFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna end of frequency range in Mhz.
    # Example: /// Example: 3.3
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def EndFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    # Example: /// Example: 14.1
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def Beamwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna maximum gain in dBi.
    # Example: /// Example: 20.1
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna gain tolerance in dB.
    # Example: /// Example: 5.1
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def GainTolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna polarization in degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna description.
    # Example: /// Example: Description of antenna A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AntennaDetails_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AntennaDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AntennaDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AntennaDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AntennaDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AntennaDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AntennaDetails_AbridgedStart(builder):
    builder.StartObject(24)

def Start(builder):
    AntennaDetails_AbridgedStart(builder)

def AntennaDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AntennaDetails_AbridgedAddId(builder, id)

def AntennaDetails_AbridgedAddIdAntenna(builder, idAntenna):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idAntenna), 0)

def AddIdAntenna(builder, idAntenna):
    AntennaDetails_AbridgedAddIdAntenna(builder, idAntenna)

def AntennaDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AntennaDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def AntennaDetails_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AntennaDetails_AbridgedAddType(builder, type)

def AntennaDetails_AbridgedAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    AntennaDetails_AbridgedAddPosition(builder, position)

def AntennaDetails_AbridgedAddMode(builder, mode):
    builder.PrependInt8Slot(5, mode, 0)

def AddMode(builder, mode):
    AntennaDetails_AbridgedAddMode(builder, mode)

def AntennaDetails_AbridgedAddSteerable(builder, steerable):
    builder.PrependBoolSlot(6, steerable, 0)

def AddSteerable(builder, steerable):
    AntennaDetails_AbridgedAddSteerable(builder, steerable)

def AntennaDetails_AbridgedAddBeamForming(builder, beamForming):
    builder.PrependBoolSlot(7, beamForming, 0)

def AddBeamForming(builder, beamForming):
    AntennaDetails_AbridgedAddBeamForming(builder, beamForming)

def AntennaDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    AntennaDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def AntennaDetails_AbridgedAddDiameter(builder, diameter):
    builder.PrependFloat64Slot(9, diameter, 0.0)

def AddDiameter(builder, diameter):
    AntennaDetails_AbridgedAddDiameter(builder, diameter)

def AntennaDetails_AbridgedAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def AddSize(builder, size):
    AntennaDetails_AbridgedAddSize(builder, size)

def AntennaDetails_AbridgedStartSizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizeVector(builder, numElems):
    return AntennaDetails_AbridgedStartSizeVector(builder, numElems)

def AntennaDetails_AbridgedAddStartFrequency(builder, startFrequency):
    builder.PrependFloat64Slot(11, startFrequency, 0.0)

def AddStartFrequency(builder, startFrequency):
    AntennaDetails_AbridgedAddStartFrequency(builder, startFrequency)

def AntennaDetails_AbridgedAddEndFrequency(builder, endFrequency):
    builder.PrependFloat64Slot(12, endFrequency, 0.0)

def AddEndFrequency(builder, endFrequency):
    AntennaDetails_AbridgedAddEndFrequency(builder, endFrequency)

def AntennaDetails_AbridgedAddBeamwidth(builder, beamwidth):
    builder.PrependFloat64Slot(13, beamwidth, 0.0)

def AddBeamwidth(builder, beamwidth):
    AntennaDetails_AbridgedAddBeamwidth(builder, beamwidth)

def AntennaDetails_AbridgedAddGain(builder, gain):
    builder.PrependFloat64Slot(14, gain, 0.0)

def AddGain(builder, gain):
    AntennaDetails_AbridgedAddGain(builder, gain)

def AntennaDetails_AbridgedAddGainTolerance(builder, gainTolerance):
    builder.PrependFloat64Slot(15, gainTolerance, 0.0)

def AddGainTolerance(builder, gainTolerance):
    AntennaDetails_AbridgedAddGainTolerance(builder, gainTolerance)

def AntennaDetails_AbridgedAddPolarization(builder, polarization):
    builder.PrependFloat64Slot(16, polarization, 0.0)

def AddPolarization(builder, polarization):
    AntennaDetails_AbridgedAddPolarization(builder, polarization)

def AntennaDetails_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    AntennaDetails_AbridgedAddDescription(builder, description)

def AntennaDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AntennaDetails_AbridgedAddCreatedAt(builder, createdAt)

def AntennaDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AntennaDetails_AbridgedAddCreatedBy(builder, createdBy)

def AntennaDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AntennaDetails_AbridgedAddSource(builder, source)

def AntennaDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AntennaDetails_AbridgedAddOrigin(builder, origin)

def AntennaDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AntennaDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def AntennaDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(23, dataMode, 0)

def AddDataMode(builder, dataMode):
    AntennaDetails_AbridgedAddDataMode(builder, dataMode)

def AntennaDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AntennaDetails_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AntennaDetails_AbridgedT(object):

    # AntennaDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idAntenna = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.position = None  # type: str
        self.mode = 0  # type: int
        self.steerable = False  # type: bool
        self.beamForming = False  # type: bool
        self.manufacturerOrgId = None  # type: str
        self.diameter = 0.0  # type: float
        self.size = None  # type: List[str]
        self.startFrequency = 0.0  # type: float
        self.endFrequency = 0.0  # type: float
        self.beamwidth = 0.0  # type: float
        self.gain = 0.0  # type: float
        self.gainTolerance = 0.0  # type: float
        self.polarization = 0.0  # type: float
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        antennaDetailsAbridged = AntennaDetails_Abridged()
        antennaDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(antennaDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, antennaDetailsAbridged):
        x = AntennaDetails_AbridgedT()
        x._UnPack(antennaDetailsAbridged)
        return x

    # AntennaDetails_AbridgedT
    def _UnPack(self, antennaDetailsAbridged):
        if antennaDetailsAbridged is None:
            return
        self.id = antennaDetailsAbridged.Id()
        self.idAntenna = antennaDetailsAbridged.IdAntenna()
        self.classificationMarking = antennaDetailsAbridged.ClassificationMarking()
        self.type = antennaDetailsAbridged.Type()
        self.position = antennaDetailsAbridged.Position()
        self.mode = antennaDetailsAbridged.Mode()
        self.steerable = antennaDetailsAbridged.Steerable()
        self.beamForming = antennaDetailsAbridged.BeamForming()
        self.manufacturerOrgId = antennaDetailsAbridged.ManufacturerOrgId()
        self.diameter = antennaDetailsAbridged.Diameter()
        if not antennaDetailsAbridged.SizeIsNone():
            self.size = []
            for i in range(antennaDetailsAbridged.SizeLength()):
                self.size.append(antennaDetailsAbridged.Size(i))
        self.startFrequency = antennaDetailsAbridged.StartFrequency()
        self.endFrequency = antennaDetailsAbridged.EndFrequency()
        self.beamwidth = antennaDetailsAbridged.Beamwidth()
        self.gain = antennaDetailsAbridged.Gain()
        self.gainTolerance = antennaDetailsAbridged.GainTolerance()
        self.polarization = antennaDetailsAbridged.Polarization()
        self.description = antennaDetailsAbridged.Description()
        self.createdAt = antennaDetailsAbridged.CreatedAt()
        self.createdBy = antennaDetailsAbridged.CreatedBy()
        self.source = antennaDetailsAbridged.Source()
        self.origin = antennaDetailsAbridged.Origin()
        self.origNetwork = antennaDetailsAbridged.OrigNetwork()
        self.dataMode = antennaDetailsAbridged.DataMode()

    # AntennaDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idAntenna is not None:
            idAntenna = builder.CreateString(self.idAntenna)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.position is not None:
            position = builder.CreateString(self.position)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.size is not None:
            sizelist = []
            for i in range(len(self.size)):
                sizelist.append(builder.CreateString(self.size[i]))
            AntennaDetails_AbridgedStartSizeVector(builder, len(self.size))
            for i in reversed(range(len(self.size))):
                builder.PrependUOffsetTRelative(sizelist[i])
            size = builder.EndVector()
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AntennaDetails_AbridgedStart(builder)
        if self.id is not None:
            AntennaDetails_AbridgedAddId(builder, id)
        if self.idAntenna is not None:
            AntennaDetails_AbridgedAddIdAntenna(builder, idAntenna)
        if self.classificationMarking is not None:
            AntennaDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            AntennaDetails_AbridgedAddType(builder, type)
        if self.position is not None:
            AntennaDetails_AbridgedAddPosition(builder, position)
        AntennaDetails_AbridgedAddMode(builder, self.mode)
        AntennaDetails_AbridgedAddSteerable(builder, self.steerable)
        AntennaDetails_AbridgedAddBeamForming(builder, self.beamForming)
        if self.manufacturerOrgId is not None:
            AntennaDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        AntennaDetails_AbridgedAddDiameter(builder, self.diameter)
        if self.size is not None:
            AntennaDetails_AbridgedAddSize(builder, size)
        AntennaDetails_AbridgedAddStartFrequency(builder, self.startFrequency)
        AntennaDetails_AbridgedAddEndFrequency(builder, self.endFrequency)
        AntennaDetails_AbridgedAddBeamwidth(builder, self.beamwidth)
        AntennaDetails_AbridgedAddGain(builder, self.gain)
        AntennaDetails_AbridgedAddGainTolerance(builder, self.gainTolerance)
        AntennaDetails_AbridgedAddPolarization(builder, self.polarization)
        if self.description is not None:
            AntennaDetails_AbridgedAddDescription(builder, description)
        if self.createdAt is not None:
            AntennaDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AntennaDetails_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            AntennaDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            AntennaDetails_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AntennaDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        AntennaDetails_AbridgedAddDataMode(builder, self.dataMode)
        antennaDetailsAbridged = AntennaDetails_AbridgedEnd(builder)
        return antennaDetailsAbridged
