# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Multidimensional array of incoming elevation at the receiver. Has the same dimensions as power. Antenna type, configuration, and method of determination to be documented in the metadata notes field.
class IonoObservationElevation_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationElevation_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationElevation_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationElevation_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationElevation_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notes for the elevation data.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservationElevation_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of integers of the elevation array dimensions.
    # Example: /// Example: [2, 3]
    # Constraints: No constraints specified.
    # IonoObservationElevation_Abridged
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationElevation_Abridged
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationElevation_Abridged
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Array of names for dimensions.
    # Example: /// Example: ['NAME1', 'NAME2']
    # Constraints: No constraints specified.
    # IonoObservationElevation_Abridged
    def DimensionName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationElevation_Abridged
    def DimensionNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationElevation_Abridged
    def DimensionNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Array of incoming elevation at the receiver.
    # Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    # Constraints: No constraints specified.
    # IonoObservationElevation_Abridged
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationElevation_Abridged
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationElevation_Abridged
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def IonoObservationElevation_AbridgedStart(builder):
    builder.StartObject(4)

def Start(builder):
    IonoObservationElevation_AbridgedStart(builder)

def IonoObservationElevation_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    IonoObservationElevation_AbridgedAddNotes(builder, notes)

def IonoObservationElevation_AbridgedAddDimensions(builder, dimensions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)

def AddDimensions(builder, dimensions):
    IonoObservationElevation_AbridgedAddDimensions(builder, dimensions)

def IonoObservationElevation_AbridgedStartDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionsVector(builder, numElems):
    return IonoObservationElevation_AbridgedStartDimensionsVector(builder, numElems)

def IonoObservationElevation_AbridgedAddDimensionName(builder, dimensionName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionName), 0)

def AddDimensionName(builder, dimensionName):
    IonoObservationElevation_AbridgedAddDimensionName(builder, dimensionName)

def IonoObservationElevation_AbridgedStartDimensionNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionNameVector(builder, numElems):
    return IonoObservationElevation_AbridgedStartDimensionNameVector(builder, numElems)

def IonoObservationElevation_AbridgedAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationElevation_AbridgedAddData(builder, data)

def IonoObservationElevation_AbridgedStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationElevation_AbridgedStartDataVector(builder, numElems)

def IonoObservationElevation_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationElevation_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationElevation_AbridgedT(object):

    # IonoObservationElevation_AbridgedT
    def __init__(self):
        self.notes = None  # type: str
        self.dimensions = None  # type: List[str]
        self.dimensionName = None  # type: List[str]
        self.data = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationElevationAbridged = IonoObservationElevation_Abridged()
        ionoObservationElevationAbridged.Init(buf, pos)
        return cls.InitFromObj(ionoObservationElevationAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationElevationAbridged):
        x = IonoObservationElevation_AbridgedT()
        x._UnPack(ionoObservationElevationAbridged)
        return x

    # IonoObservationElevation_AbridgedT
    def _UnPack(self, ionoObservationElevationAbridged):
        if ionoObservationElevationAbridged is None:
            return
        self.notes = ionoObservationElevationAbridged.Notes()
        if not ionoObservationElevationAbridged.DimensionsIsNone():
            self.dimensions = []
            for i in range(ionoObservationElevationAbridged.DimensionsLength()):
                self.dimensions.append(ionoObservationElevationAbridged.Dimensions(i))
        if not ionoObservationElevationAbridged.DimensionNameIsNone():
            self.dimensionName = []
            for i in range(ionoObservationElevationAbridged.DimensionNameLength()):
                self.dimensionName.append(ionoObservationElevationAbridged.DimensionName(i))
        if not ionoObservationElevationAbridged.DataIsNone():
            self.data = []
            for i in range(ionoObservationElevationAbridged.DataLength()):
                self.data.append(ionoObservationElevationAbridged.Data(i))

    # IonoObservationElevation_AbridgedT
    def Pack(self, builder):
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.dimensions is not None:
            dimensionslist = []
            for i in range(len(self.dimensions)):
                dimensionslist.append(builder.CreateString(self.dimensions[i]))
            IonoObservationElevation_AbridgedStartDimensionsVector(builder, len(self.dimensions))
            for i in reversed(range(len(self.dimensions))):
                builder.PrependUOffsetTRelative(dimensionslist[i])
            dimensions = builder.EndVector()
        if self.dimensionName is not None:
            dimensionNamelist = []
            for i in range(len(self.dimensionName)):
                dimensionNamelist.append(builder.CreateString(self.dimensionName[i]))
            IonoObservationElevation_AbridgedStartDimensionNameVector(builder, len(self.dimensionName))
            for i in reversed(range(len(self.dimensionName))):
                builder.PrependUOffsetTRelative(dimensionNamelist[i])
            dimensionName = builder.EndVector()
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationElevation_AbridgedStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        IonoObservationElevation_AbridgedStart(builder)
        if self.notes is not None:
            IonoObservationElevation_AbridgedAddNotes(builder, notes)
        if self.dimensions is not None:
            IonoObservationElevation_AbridgedAddDimensions(builder, dimensions)
        if self.dimensionName is not None:
            IonoObservationElevation_AbridgedAddDimensionName(builder, dimensionName)
        if self.data is not None:
            IonoObservationElevation_AbridgedAddData(builder, data)
        ionoObservationElevationAbridged = IonoObservationElevation_AbridgedEnd(builder)
        return ionoObservationElevationAbridged
