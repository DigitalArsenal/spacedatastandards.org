# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Status information for OnorbitThruster objects.
class OnorbitThrusterStatus_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitThrusterStatus_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitThrusterStatus_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitThrusterStatus_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitThrusterStatus_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: af103c-1f917dc-002c1bd
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitThrusterStatus_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitThrusterStatus_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
    # Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitThrusterStatus_Ingest
    def IdOnorbitThruster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of this thruster.
    # Example: /// Example: REA1
    # Constraints: Minimum length = 0, Maximum length = 32
    # OnorbitThrusterStatus_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
    # Example: /// Example: 2024-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def StatusTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Minimum available propellant mass for this thruster's type, in kilograms.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def PropMassMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average available propellant mass for this thruster's type, in kilograms.
    # Example: /// Example: 907.6
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def PropMassAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Median available propellant mass for this thruster's type, in kilograms.
    # Example: /// Example: 200.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def PropMassMedian(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum available propellant mass for this thruster's type, in kilograms.
    # Example: /// Example: 2333.3
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def PropMassMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total fuel mass available for this thruster's type, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def FuelMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def FuelMassUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total delta-velocity available for this thruster's type, in meters per second.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def TotalDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum available delta-velocity for this thruster, in meters per second.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def MinDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated available delta-velocity for this thruster, in meters per second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def EstDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum available delta-velocity for this thruster, in meters per second.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def MaxDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum available thrust for this thruster, in newtons.
    # Example: /// Example: 22.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def ThrustMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Specific impulse for this thruster, in seconds.
    # Example: /// Example: 300.1
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def Isp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating if this thruster is operational.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def Operational(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitThrusterStatus_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitThrusterStatus_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitThrusterStatus_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitThrusterStatus_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # OnorbitThrusterStatus_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitThrusterStatus_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def OnorbitThrusterStatus_IngestStart(builder):
    builder.StartObject(24)

def Start(builder):
    OnorbitThrusterStatus_IngestStart(builder)

def OnorbitThrusterStatus_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitThrusterStatus_IngestAddId(builder, id)

def OnorbitThrusterStatus_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitThrusterStatus_IngestAddClassificationMarking(builder, classificationMarking)

def OnorbitThrusterStatus_IngestAddIdOnorbitThruster(builder, idOnorbitThruster):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnorbitThruster), 0)

def AddIdOnorbitThruster(builder, idOnorbitThruster):
    OnorbitThrusterStatus_IngestAddIdOnorbitThruster(builder, idOnorbitThruster)

def OnorbitThrusterStatus_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OnorbitThrusterStatus_IngestAddName(builder, name)

def OnorbitThrusterStatus_IngestAddStatusTime(builder, statusTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(statusTime), 0)

def AddStatusTime(builder, statusTime):
    OnorbitThrusterStatus_IngestAddStatusTime(builder, statusTime)

def OnorbitThrusterStatus_IngestAddPropMassMin(builder, propMassMin):
    builder.PrependFloat64Slot(5, propMassMin, 0.0)

def AddPropMassMin(builder, propMassMin):
    OnorbitThrusterStatus_IngestAddPropMassMin(builder, propMassMin)

def OnorbitThrusterStatus_IngestAddPropMassAvg(builder, propMassAvg):
    builder.PrependFloat64Slot(6, propMassAvg, 0.0)

def AddPropMassAvg(builder, propMassAvg):
    OnorbitThrusterStatus_IngestAddPropMassAvg(builder, propMassAvg)

def OnorbitThrusterStatus_IngestAddPropMassMedian(builder, propMassMedian):
    builder.PrependFloat64Slot(7, propMassMedian, 0.0)

def AddPropMassMedian(builder, propMassMedian):
    OnorbitThrusterStatus_IngestAddPropMassMedian(builder, propMassMedian)

def OnorbitThrusterStatus_IngestAddPropMassMax(builder, propMassMax):
    builder.PrependFloat64Slot(8, propMassMax, 0.0)

def AddPropMassMax(builder, propMassMax):
    OnorbitThrusterStatus_IngestAddPropMassMax(builder, propMassMax)

def OnorbitThrusterStatus_IngestAddFuelMass(builder, fuelMass):
    builder.PrependFloat64Slot(9, fuelMass, 0.0)

def AddFuelMass(builder, fuelMass):
    OnorbitThrusterStatus_IngestAddFuelMass(builder, fuelMass)

def OnorbitThrusterStatus_IngestAddFuelMassUnc(builder, fuelMassUnc):
    builder.PrependFloat64Slot(10, fuelMassUnc, 0.0)

def AddFuelMassUnc(builder, fuelMassUnc):
    OnorbitThrusterStatus_IngestAddFuelMassUnc(builder, fuelMassUnc)

def OnorbitThrusterStatus_IngestAddTotalDeltaV(builder, totalDeltaV):
    builder.PrependFloat64Slot(11, totalDeltaV, 0.0)

def AddTotalDeltaV(builder, totalDeltaV):
    OnorbitThrusterStatus_IngestAddTotalDeltaV(builder, totalDeltaV)

def OnorbitThrusterStatus_IngestAddMinDeltaV(builder, minDeltaV):
    builder.PrependFloat64Slot(12, minDeltaV, 0.0)

def AddMinDeltaV(builder, minDeltaV):
    OnorbitThrusterStatus_IngestAddMinDeltaV(builder, minDeltaV)

def OnorbitThrusterStatus_IngestAddEstDeltaV(builder, estDeltaV):
    builder.PrependFloat64Slot(13, estDeltaV, 0.0)

def AddEstDeltaV(builder, estDeltaV):
    OnorbitThrusterStatus_IngestAddEstDeltaV(builder, estDeltaV)

def OnorbitThrusterStatus_IngestAddMaxDeltaV(builder, maxDeltaV):
    builder.PrependFloat64Slot(14, maxDeltaV, 0.0)

def AddMaxDeltaV(builder, maxDeltaV):
    OnorbitThrusterStatus_IngestAddMaxDeltaV(builder, maxDeltaV)

def OnorbitThrusterStatus_IngestAddThrustMax(builder, thrustMax):
    builder.PrependFloat64Slot(15, thrustMax, 0.0)

def AddThrustMax(builder, thrustMax):
    OnorbitThrusterStatus_IngestAddThrustMax(builder, thrustMax)

def OnorbitThrusterStatus_IngestAddIsp(builder, isp):
    builder.PrependFloat64Slot(16, isp, 0.0)

def AddIsp(builder, isp):
    OnorbitThrusterStatus_IngestAddIsp(builder, isp)

def OnorbitThrusterStatus_IngestAddOperational(builder, operational):
    builder.PrependBoolSlot(17, operational, 0)

def AddOperational(builder, operational):
    OnorbitThrusterStatus_IngestAddOperational(builder, operational)

def OnorbitThrusterStatus_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitThrusterStatus_IngestAddCreatedAt(builder, createdAt)

def OnorbitThrusterStatus_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitThrusterStatus_IngestAddCreatedBy(builder, createdBy)

def OnorbitThrusterStatus_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitThrusterStatus_IngestAddSource(builder, source)

def OnorbitThrusterStatus_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitThrusterStatus_IngestAddOrigin(builder, origin)

def OnorbitThrusterStatus_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitThrusterStatus_IngestAddOrigNetwork(builder, origNetwork)

def OnorbitThrusterStatus_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(23, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitThrusterStatus_IngestAddDataMode(builder, dataMode)

def OnorbitThrusterStatus_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitThrusterStatus_IngestEnd(builder)


class OnorbitThrusterStatus_IngestT(object):

    # OnorbitThrusterStatus_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnorbitThruster = None  # type: str
        self.name = None  # type: str
        self.statusTime = None  # type: str
        self.propMassMin = 0.0  # type: float
        self.propMassAvg = 0.0  # type: float
        self.propMassMedian = 0.0  # type: float
        self.propMassMax = 0.0  # type: float
        self.fuelMass = 0.0  # type: float
        self.fuelMassUnc = 0.0  # type: float
        self.totalDeltaV = 0.0  # type: float
        self.minDeltaV = 0.0  # type: float
        self.estDeltaV = 0.0  # type: float
        self.maxDeltaV = 0.0  # type: float
        self.thrustMax = 0.0  # type: float
        self.isp = 0.0  # type: float
        self.operational = False  # type: bool
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitThrusterStatusIngest = OnorbitThrusterStatus_Ingest()
        onorbitThrusterStatusIngest.Init(buf, pos)
        return cls.InitFromObj(onorbitThrusterStatusIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitThrusterStatusIngest):
        x = OnorbitThrusterStatus_IngestT()
        x._UnPack(onorbitThrusterStatusIngest)
        return x

    # OnorbitThrusterStatus_IngestT
    def _UnPack(self, onorbitThrusterStatusIngest):
        if onorbitThrusterStatusIngest is None:
            return
        self.id = onorbitThrusterStatusIngest.Id()
        self.classificationMarking = onorbitThrusterStatusIngest.ClassificationMarking()
        self.idOnorbitThruster = onorbitThrusterStatusIngest.IdOnorbitThruster()
        self.name = onorbitThrusterStatusIngest.Name()
        self.statusTime = onorbitThrusterStatusIngest.StatusTime()
        self.propMassMin = onorbitThrusterStatusIngest.PropMassMin()
        self.propMassAvg = onorbitThrusterStatusIngest.PropMassAvg()
        self.propMassMedian = onorbitThrusterStatusIngest.PropMassMedian()
        self.propMassMax = onorbitThrusterStatusIngest.PropMassMax()
        self.fuelMass = onorbitThrusterStatusIngest.FuelMass()
        self.fuelMassUnc = onorbitThrusterStatusIngest.FuelMassUnc()
        self.totalDeltaV = onorbitThrusterStatusIngest.TotalDeltaV()
        self.minDeltaV = onorbitThrusterStatusIngest.MinDeltaV()
        self.estDeltaV = onorbitThrusterStatusIngest.EstDeltaV()
        self.maxDeltaV = onorbitThrusterStatusIngest.MaxDeltaV()
        self.thrustMax = onorbitThrusterStatusIngest.ThrustMax()
        self.isp = onorbitThrusterStatusIngest.Isp()
        self.operational = onorbitThrusterStatusIngest.Operational()
        self.createdAt = onorbitThrusterStatusIngest.CreatedAt()
        self.createdBy = onorbitThrusterStatusIngest.CreatedBy()
        self.source = onorbitThrusterStatusIngest.Source()
        self.origin = onorbitThrusterStatusIngest.Origin()
        self.origNetwork = onorbitThrusterStatusIngest.OrigNetwork()
        self.dataMode = onorbitThrusterStatusIngest.DataMode()

    # OnorbitThrusterStatus_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnorbitThruster is not None:
            idOnorbitThruster = builder.CreateString(self.idOnorbitThruster)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.statusTime is not None:
            statusTime = builder.CreateString(self.statusTime)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitThrusterStatus_IngestStart(builder)
        if self.id is not None:
            OnorbitThrusterStatus_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            OnorbitThrusterStatus_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idOnorbitThruster is not None:
            OnorbitThrusterStatus_IngestAddIdOnorbitThruster(builder, idOnorbitThruster)
        if self.name is not None:
            OnorbitThrusterStatus_IngestAddName(builder, name)
        if self.statusTime is not None:
            OnorbitThrusterStatus_IngestAddStatusTime(builder, statusTime)
        OnorbitThrusterStatus_IngestAddPropMassMin(builder, self.propMassMin)
        OnorbitThrusterStatus_IngestAddPropMassAvg(builder, self.propMassAvg)
        OnorbitThrusterStatus_IngestAddPropMassMedian(builder, self.propMassMedian)
        OnorbitThrusterStatus_IngestAddPropMassMax(builder, self.propMassMax)
        OnorbitThrusterStatus_IngestAddFuelMass(builder, self.fuelMass)
        OnorbitThrusterStatus_IngestAddFuelMassUnc(builder, self.fuelMassUnc)
        OnorbitThrusterStatus_IngestAddTotalDeltaV(builder, self.totalDeltaV)
        OnorbitThrusterStatus_IngestAddMinDeltaV(builder, self.minDeltaV)
        OnorbitThrusterStatus_IngestAddEstDeltaV(builder, self.estDeltaV)
        OnorbitThrusterStatus_IngestAddMaxDeltaV(builder, self.maxDeltaV)
        OnorbitThrusterStatus_IngestAddThrustMax(builder, self.thrustMax)
        OnorbitThrusterStatus_IngestAddIsp(builder, self.isp)
        OnorbitThrusterStatus_IngestAddOperational(builder, self.operational)
        if self.createdAt is not None:
            OnorbitThrusterStatus_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitThrusterStatus_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            OnorbitThrusterStatus_IngestAddSource(builder, source)
        if self.origin is not None:
            OnorbitThrusterStatus_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            OnorbitThrusterStatus_IngestAddOrigNetwork(builder, origNetwork)
        OnorbitThrusterStatus_IngestAddDataMode(builder, self.dataMode)
        onorbitThrusterStatusIngest = OnorbitThrusterStatus_IngestEnd(builder)
        return onorbitThrusterStatusIngest
