# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
class Entity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Entity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEntity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EntityBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4E\x54\x49", size_prefixed=size_prefixed)

    # Entity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Entity
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique entity name.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 1, Maximum length = 128
    # Entity
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Entity
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    # Example: /// Example: ONORBIT
    # Constraints: Minimum length = 1, Maximum length = 45
    # Entity
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Unique identifier of the entity location, if terrestrial/fixed.
    # Example: /// Example: LOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Entity
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
    # Example: /// Example: Commercial
    # Constraints: Minimum length = 0, Maximum length = 32
    # Entity
    def OwnerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this entity is taskable.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Entity
    def Taskable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # List of URLs to additional details/documents for this entity.
    # Example: /// Example: ['URL1', 'URL2']
    # Constraints: No constraints specified.
    # Entity
    def Urls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Entity
    def UrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Entity
    def UrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Entity
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Entity
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Entity
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Entity
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Entity
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Entity
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Entity
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity
    def OperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the associated operating unit object.
    # Example: /// Example: OPERATINGUNIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity
    def IdOperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Entity
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only collection of statuses which can be collected by multiple sources.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity
    def StatusCollection(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Entity
    def StatusCollectionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Entity
    def StatusCollectionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Read-only collection of RF bands utilized by this entity for communication and/or operation.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity
    def RfBands(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Entity
    def RfBandsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Entity
    def RfBandsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def EntityStart(builder):
    builder.StartObject(24)

def Start(builder):
    EntityStart(builder)

def EntityAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    EntityAddIdEntity(builder, idEntity)

def EntityAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    EntityAddName(builder, name)

def EntityAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EntityAddClassificationMarking(builder, classificationMarking)

def EntityAddType(builder, type):
    builder.PrependInt8Slot(3, type, 0)

def AddType(builder, type):
    EntityAddType(builder, type)

def EntityAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    EntityAddIdLocation(builder, idLocation)

def EntityAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    EntityAddCountryCode(builder, countryCode)

def EntityAddOwnerType(builder, ownerType):
    builder.PrependInt8Slot(6, ownerType, 0)

def AddOwnerType(builder, ownerType):
    EntityAddOwnerType(builder, ownerType)

def EntityAddTaskable(builder, taskable):
    builder.PrependBoolSlot(7, taskable, 0)

def AddTaskable(builder, taskable):
    EntityAddTaskable(builder, taskable)

def EntityAddUrls(builder, urls):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(urls), 0)

def AddUrls(builder, urls):
    EntityAddUrls(builder, urls)

def EntityStartUrlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUrlsVector(builder, numElems):
    return EntityStartUrlsVector(builder, numElems)

def EntityAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EntityAddCreatedAt(builder, createdAt)

def EntityAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EntityAddCreatedBy(builder, createdBy)

def EntityAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    EntityAddUpdatedAt(builder, updatedAt)

def EntityAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    EntityAddUpdatedBy(builder, updatedBy)

def EntityAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EntityAddSource(builder, source)

def EntityAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EntityAddOrigin(builder, origin)

def EntityAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(15, dataMode, 0)

def AddDataMode(builder, dataMode):
    EntityAddDataMode(builder, dataMode)

def EntityAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    EntityAddLocation(builder, location)

def EntityAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    EntityAddOnOrbit(builder, onOrbit)

def EntityAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    EntityAddIdOnOrbit(builder, idOnOrbit)

def EntityAddOperatingUnit(builder, operatingUnit):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(operatingUnit), 0)

def AddOperatingUnit(builder, operatingUnit):
    EntityAddOperatingUnit(builder, operatingUnit)

def EntityAddIdOperatingUnit(builder, idOperatingUnit):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(idOperatingUnit), 0)

def AddIdOperatingUnit(builder, idOperatingUnit):
    EntityAddIdOperatingUnit(builder, idOperatingUnit)

def EntityAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EntityAddOrigNetwork(builder, origNetwork)

def EntityAddStatusCollection(builder, statusCollection):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(statusCollection), 0)

def AddStatusCollection(builder, statusCollection):
    EntityAddStatusCollection(builder, statusCollection)

def EntityStartStatusCollectionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStatusCollectionVector(builder, numElems):
    return EntityStartStatusCollectionVector(builder, numElems)

def EntityAddRfBands(builder, rfBands):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(rfBands), 0)

def AddRfBands(builder, rfBands):
    EntityAddRfBands(builder, rfBands)

def EntityStartRfBandsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRfBandsVector(builder, numElems):
    return EntityStartRfBandsVector(builder, numElems)

def EntityEnd(builder):
    return builder.EndObject()

def End(builder):
    return EntityEnd(builder)

try:
    from typing import List
except:
    pass

class EntityT(object):

    # EntityT
    def __init__(self):
        self.idEntity = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = 0  # type: int
        self.idLocation = None  # type: str
        self.countryCode = None  # type: str
        self.ownerType = 0  # type: int
        self.taskable = False  # type: bool
        self.urls = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.location = None  # type: str
        self.onOrbit = None  # type: str
        self.idOnOrbit = None  # type: str
        self.operatingUnit = None  # type: str
        self.idOperatingUnit = None  # type: str
        self.origNetwork = None  # type: str
        self.statusCollection = None  # type: List[str]
        self.rfBands = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        entity = Entity()
        entity.Init(buf, pos)
        return cls.InitFromObj(entity)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, entity):
        x = EntityT()
        x._UnPack(entity)
        return x

    # EntityT
    def _UnPack(self, entity):
        if entity is None:
            return
        self.idEntity = entity.IdEntity()
        self.name = entity.Name()
        self.classificationMarking = entity.ClassificationMarking()
        self.type = entity.Type()
        self.idLocation = entity.IdLocation()
        self.countryCode = entity.CountryCode()
        self.ownerType = entity.OwnerType()
        self.taskable = entity.Taskable()
        if not entity.UrlsIsNone():
            self.urls = []
            for i in range(entity.UrlsLength()):
                self.urls.append(entity.Urls(i))
        self.createdAt = entity.CreatedAt()
        self.createdBy = entity.CreatedBy()
        self.updatedAt = entity.UpdatedAt()
        self.updatedBy = entity.UpdatedBy()
        self.source = entity.Source()
        self.origin = entity.Origin()
        self.dataMode = entity.DataMode()
        self.location = entity.Location()
        self.onOrbit = entity.OnOrbit()
        self.idOnOrbit = entity.IdOnOrbit()
        self.operatingUnit = entity.OperatingUnit()
        self.idOperatingUnit = entity.IdOperatingUnit()
        self.origNetwork = entity.OrigNetwork()
        if not entity.StatusCollectionIsNone():
            self.statusCollection = []
            for i in range(entity.StatusCollectionLength()):
                self.statusCollection.append(entity.StatusCollection(i))
        if not entity.RfBandsIsNone():
            self.rfBands = []
            for i in range(entity.RfBandsLength()):
                self.rfBands.append(entity.RfBands(i))

    # EntityT
    def Pack(self, builder):
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.urls is not None:
            urlslist = []
            for i in range(len(self.urls)):
                urlslist.append(builder.CreateString(self.urls[i]))
            EntityStartUrlsVector(builder, len(self.urls))
            for i in reversed(range(len(self.urls))):
                builder.PrependUOffsetTRelative(urlslist[i])
            urls = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.location is not None:
            location = builder.CreateString(self.location)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.operatingUnit is not None:
            operatingUnit = builder.CreateString(self.operatingUnit)
        if self.idOperatingUnit is not None:
            idOperatingUnit = builder.CreateString(self.idOperatingUnit)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.statusCollection is not None:
            statusCollectionlist = []
            for i in range(len(self.statusCollection)):
                statusCollectionlist.append(builder.CreateString(self.statusCollection[i]))
            EntityStartStatusCollectionVector(builder, len(self.statusCollection))
            for i in reversed(range(len(self.statusCollection))):
                builder.PrependUOffsetTRelative(statusCollectionlist[i])
            statusCollection = builder.EndVector()
        if self.rfBands is not None:
            rfBandslist = []
            for i in range(len(self.rfBands)):
                rfBandslist.append(builder.CreateString(self.rfBands[i]))
            EntityStartRfBandsVector(builder, len(self.rfBands))
            for i in reversed(range(len(self.rfBands))):
                builder.PrependUOffsetTRelative(rfBandslist[i])
            rfBands = builder.EndVector()
        EntityStart(builder)
        if self.idEntity is not None:
            EntityAddIdEntity(builder, idEntity)
        if self.name is not None:
            EntityAddName(builder, name)
        if self.classificationMarking is not None:
            EntityAddClassificationMarking(builder, classificationMarking)
        EntityAddType(builder, self.type)
        if self.idLocation is not None:
            EntityAddIdLocation(builder, idLocation)
        if self.countryCode is not None:
            EntityAddCountryCode(builder, countryCode)
        EntityAddOwnerType(builder, self.ownerType)
        EntityAddTaskable(builder, self.taskable)
        if self.urls is not None:
            EntityAddUrls(builder, urls)
        if self.createdAt is not None:
            EntityAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EntityAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            EntityAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            EntityAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            EntityAddSource(builder, source)
        if self.origin is not None:
            EntityAddOrigin(builder, origin)
        EntityAddDataMode(builder, self.dataMode)
        if self.location is not None:
            EntityAddLocation(builder, location)
        if self.onOrbit is not None:
            EntityAddOnOrbit(builder, onOrbit)
        if self.idOnOrbit is not None:
            EntityAddIdOnOrbit(builder, idOnOrbit)
        if self.operatingUnit is not None:
            EntityAddOperatingUnit(builder, operatingUnit)
        if self.idOperatingUnit is not None:
            EntityAddIdOperatingUnit(builder, idOperatingUnit)
        if self.origNetwork is not None:
            EntityAddOrigNetwork(builder, origNetwork)
        if self.statusCollection is not None:
            EntityAddStatusCollection(builder, statusCollection)
        if self.rfBands is not None:
            EntityAddRfBands(builder, rfBands)
        entity = EntityEnd(builder)
        return entity
