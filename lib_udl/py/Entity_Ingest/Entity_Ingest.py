# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
class Entity_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Entity_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEntity_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Entity_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4E\x54\x49", size_prefixed=size_prefixed)

    # Entity_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Entity_Ingest
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique entity name.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 1, Maximum length = 128
    # Entity_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Entity_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    # Example: /// Example: ONORBIT
    # Constraints: Minimum length = 1, Maximum length = 45
    # Entity_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Unique identifier of the entity location, if terrestrial/fixed.
    # Example: /// Example: LOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity_Ingest
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Entity_Ingest
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
    # Example: /// Example: Commercial
    # Constraints: Minimum length = 0, Maximum length = 32
    # Entity_Ingest
    def OwnerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this entity is taskable.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Entity_Ingest
    def Taskable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # List of URLs to additional details/documents for this entity.
    # Example: /// Example: ['URL1', 'URL2']
    # Constraints: No constraints specified.
    # Entity_Ingest
    def Urls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Entity_Ingest
    def UrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Entity_Ingest
    def UrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Entity_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Entity_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Entity_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Entity_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Entity_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity_Ingest
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Entity_Ingest
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the associated operating unit object.
    # Example: /// Example: OPERATINGUNIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity_Ingest
    def IdOperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Entity_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Entity_IngestStart(builder):
    builder.StartObject(19)

def Start(builder):
    Entity_IngestStart(builder)

def Entity_IngestAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Entity_IngestAddIdEntity(builder, idEntity)

def Entity_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Entity_IngestAddName(builder, name)

def Entity_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Entity_IngestAddClassificationMarking(builder, classificationMarking)

def Entity_IngestAddType(builder, type):
    builder.PrependInt8Slot(3, type, 0)

def AddType(builder, type):
    Entity_IngestAddType(builder, type)

def Entity_IngestAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    Entity_IngestAddIdLocation(builder, idLocation)

def Entity_IngestAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Entity_IngestAddCountryCode(builder, countryCode)

def Entity_IngestAddOwnerType(builder, ownerType):
    builder.PrependInt8Slot(6, ownerType, 0)

def AddOwnerType(builder, ownerType):
    Entity_IngestAddOwnerType(builder, ownerType)

def Entity_IngestAddTaskable(builder, taskable):
    builder.PrependBoolSlot(7, taskable, 0)

def AddTaskable(builder, taskable):
    Entity_IngestAddTaskable(builder, taskable)

def Entity_IngestAddUrls(builder, urls):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(urls), 0)

def AddUrls(builder, urls):
    Entity_IngestAddUrls(builder, urls)

def Entity_IngestStartUrlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUrlsVector(builder, numElems):
    return Entity_IngestStartUrlsVector(builder, numElems)

def Entity_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Entity_IngestAddCreatedAt(builder, createdAt)

def Entity_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Entity_IngestAddCreatedBy(builder, createdBy)

def Entity_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Entity_IngestAddSource(builder, source)

def Entity_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Entity_IngestAddOrigin(builder, origin)

def Entity_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(13, dataMode, 0)

def AddDataMode(builder, dataMode):
    Entity_IngestAddDataMode(builder, dataMode)

def Entity_IngestAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    Entity_IngestAddLocation(builder, location)

def Entity_IngestAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    Entity_IngestAddOnOrbit(builder, onOrbit)

def Entity_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    Entity_IngestAddIdOnOrbit(builder, idOnOrbit)

def Entity_IngestAddIdOperatingUnit(builder, idOperatingUnit):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(idOperatingUnit), 0)

def AddIdOperatingUnit(builder, idOperatingUnit):
    Entity_IngestAddIdOperatingUnit(builder, idOperatingUnit)

def Entity_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Entity_IngestAddOrigNetwork(builder, origNetwork)

def Entity_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Entity_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class Entity_IngestT(object):

    # Entity_IngestT
    def __init__(self):
        self.idEntity = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = 0  # type: int
        self.idLocation = None  # type: str
        self.countryCode = None  # type: str
        self.ownerType = 0  # type: int
        self.taskable = False  # type: bool
        self.urls = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.location = None  # type: str
        self.onOrbit = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idOperatingUnit = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        entityIngest = Entity_Ingest()
        entityIngest.Init(buf, pos)
        return cls.InitFromObj(entityIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, entityIngest):
        x = Entity_IngestT()
        x._UnPack(entityIngest)
        return x

    # Entity_IngestT
    def _UnPack(self, entityIngest):
        if entityIngest is None:
            return
        self.idEntity = entityIngest.IdEntity()
        self.name = entityIngest.Name()
        self.classificationMarking = entityIngest.ClassificationMarking()
        self.type = entityIngest.Type()
        self.idLocation = entityIngest.IdLocation()
        self.countryCode = entityIngest.CountryCode()
        self.ownerType = entityIngest.OwnerType()
        self.taskable = entityIngest.Taskable()
        if not entityIngest.UrlsIsNone():
            self.urls = []
            for i in range(entityIngest.UrlsLength()):
                self.urls.append(entityIngest.Urls(i))
        self.createdAt = entityIngest.CreatedAt()
        self.createdBy = entityIngest.CreatedBy()
        self.source = entityIngest.Source()
        self.origin = entityIngest.Origin()
        self.dataMode = entityIngest.DataMode()
        self.location = entityIngest.Location()
        self.onOrbit = entityIngest.OnOrbit()
        self.idOnOrbit = entityIngest.IdOnOrbit()
        self.idOperatingUnit = entityIngest.IdOperatingUnit()
        self.origNetwork = entityIngest.OrigNetwork()

    # Entity_IngestT
    def Pack(self, builder):
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.urls is not None:
            urlslist = []
            for i in range(len(self.urls)):
                urlslist.append(builder.CreateString(self.urls[i]))
            Entity_IngestStartUrlsVector(builder, len(self.urls))
            for i in reversed(range(len(self.urls))):
                builder.PrependUOffsetTRelative(urlslist[i])
            urls = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.location is not None:
            location = builder.CreateString(self.location)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idOperatingUnit is not None:
            idOperatingUnit = builder.CreateString(self.idOperatingUnit)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Entity_IngestStart(builder)
        if self.idEntity is not None:
            Entity_IngestAddIdEntity(builder, idEntity)
        if self.name is not None:
            Entity_IngestAddName(builder, name)
        if self.classificationMarking is not None:
            Entity_IngestAddClassificationMarking(builder, classificationMarking)
        Entity_IngestAddType(builder, self.type)
        if self.idLocation is not None:
            Entity_IngestAddIdLocation(builder, idLocation)
        if self.countryCode is not None:
            Entity_IngestAddCountryCode(builder, countryCode)
        Entity_IngestAddOwnerType(builder, self.ownerType)
        Entity_IngestAddTaskable(builder, self.taskable)
        if self.urls is not None:
            Entity_IngestAddUrls(builder, urls)
        if self.createdAt is not None:
            Entity_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Entity_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Entity_IngestAddSource(builder, source)
        if self.origin is not None:
            Entity_IngestAddOrigin(builder, origin)
        Entity_IngestAddDataMode(builder, self.dataMode)
        if self.location is not None:
            Entity_IngestAddLocation(builder, location)
        if self.onOrbit is not None:
            Entity_IngestAddOnOrbit(builder, onOrbit)
        if self.idOnOrbit is not None:
            Entity_IngestAddIdOnOrbit(builder, idOnOrbit)
        if self.idOperatingUnit is not None:
            Entity_IngestAddIdOperatingUnit(builder, idOperatingUnit)
        if self.origNetwork is not None:
            Entity_IngestAddOrigNetwork(builder, origNetwork)
        entityIngest = Entity_IngestEnd(builder)
        return entityIngest
