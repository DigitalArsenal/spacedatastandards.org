# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
class SGI_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SGI_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSGI_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SGI_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x47\x49\x46", size_prefixed=size_prefixed)

    # SGI_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SGI-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SGI_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SGI_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SGI_Full
    def EffectiveDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SGI_Full
    def SgiDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
    # Example: /// Example: JBH09
    # Constraints: Minimum length = 0, Maximum length = 32
    # SGI_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
    # Example: /// Example: I
    # Constraints: Minimum length = 0, Maximum length = 1
    # SGI_Full
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The name/location of the station that collected the geomagnetic data for this record.
    # Example: /// Example: Boulder
    # Constraints: Minimum length = 0, Maximum length = 24
    # SGI_Full
    def StationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
    # Constraints: Minimum length = 0, Maximum length = 36
    # SGI_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SGI_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The transmitted DCA mode of the record (1-3).
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SGI_Full
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
    # Example: /// Example: R
    # Constraints: Minimum length = 0, Maximum length = 1
    # SGI_Full
    def Precedence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
    # Example: /// Example: [1, 2, 3]
    # Constraints: No constraints specified.
    # SGI_Full
    def CoeffDegree(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def CoeffDegreeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def CoeffDegreeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
    # Example: /// Example: [1, 2, 3]
    # Constraints: No constraints specified.
    # SGI_Full
    def CoeffOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def CoeffOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def CoeffOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    # Example: /// Example: [1.23, 342.3, 1.32]
    # Constraints: No constraints specified.
    # SGI_Full
    def Ctce(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def CtceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def CtceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    # Example: /// Example: [1.23, 342.3, 1.32]
    # Constraints: No constraints specified.
    # SGI_Full
    def Stce(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def StceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def StceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    # Example: /// Example: [1.23, 342.3, 1.32]
    # Constraints: No constraints specified.
    # SGI_Full
    def Ctci(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def CtciLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def CtciIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
    # Example: /// Example: [1.23, 342.3, 1.32]
    # Constraints: No constraints specified.
    # SGI_Full
    def Stci(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def StciLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def StciIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def E10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def E54(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def S10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def S54(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def M10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def M54(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def Y10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def Y54(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def F10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def F54(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def F81(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def Ap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # SGI_Full
    def ApDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SGI_Full
    def KIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
    # Example: /// Example: 4.66
    # Constraints: No constraints specified.
    # SGI_Full
    def Kp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # SGI_Full
    def KpDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
    # Example: /// Example: 25
    # Constraints: No constraints specified.
    # SGI_Full
    def Gamma(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Disturbance Storm Time geomagnetic index in nT.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def Dst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # delta exospheric temperature correction in units of K.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SGI_Full
    def Dtc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SGI_Full
    def RbRegionCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
    # Example: /// Example: 1.02947164506
    # Constraints: No constraints specified.
    # SGI_Full
    def RbIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
    # Example: /// Example: 2.12679e-07
    # Constraints: No constraints specified.
    # SGI_Full
    def NormFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
    # Example: /// Example: 24
    # Constraints: No constraints specified.
    # SGI_Full
    def RbDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
    # Example: /// Example: 5.1
    # Constraints: No constraints specified.
    # SGI_Full
    def AnalyzerAttenuation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
    # Example: /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
    # Constraints: No constraints specified.
    # SGI_Full
    def ObservedBaseline(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def ObservedBaselineLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def ObservedBaselineIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        return o == 0

    # Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
    # Example: /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
    # Constraints: No constraints specified.
    # SGI_Full
    def Frequencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def FrequenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def FrequenciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        return o == 0

    # Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
    # Example: /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
    # Constraints: No constraints specified.
    # SGI_Full
    def Powers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def PowersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def PowersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: rawFileURI
    # Constraints: Minimum length = 0, Maximum length = 256
    # SGI_Full
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SGI_Full
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # SGI_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SGI_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SGI_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SGI_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SGI_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SGI_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SGI_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SGI_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SGI_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SGI_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SGI_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SGI_FullStart(builder):
    builder.StartObject(55)

def Start(builder):
    SGI_FullStart(builder)

def SGI_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SGI_FullAddId(builder, id)

def SGI_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SGI_FullAddClassificationMarking(builder, classificationMarking)

def SGI_FullAddEffectiveDate(builder, effectiveDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveDate), 0)

def AddEffectiveDate(builder, effectiveDate):
    SGI_FullAddEffectiveDate(builder, effectiveDate)

def SGI_FullAddSgiDate(builder, sgiDate):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sgiDate), 0)

def AddSgiDate(builder, sgiDate):
    SGI_FullAddSgiDate(builder, sgiDate)

def SGI_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    SGI_FullAddType(builder, type)

def SGI_FullAddState(builder, state):
    builder.PrependInt8Slot(5, state, 0)

def AddState(builder, state):
    SGI_FullAddState(builder, state)

def SGI_FullAddStationName(builder, stationName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(stationName), 0)

def AddStationName(builder, stationName):
    SGI_FullAddStationName(builder, stationName)

def SGI_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SGI_FullAddIdSensor(builder, idSensor)

def SGI_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SGI_FullAddOrigSensorId(builder, origSensorId)

def SGI_FullAddMode(builder, mode):
    builder.PrependInt32Slot(9, mode, 0)

def AddMode(builder, mode):
    SGI_FullAddMode(builder, mode)

def SGI_FullAddPrecedence(builder, precedence):
    builder.PrependInt8Slot(10, precedence, 0)

def AddPrecedence(builder, precedence):
    SGI_FullAddPrecedence(builder, precedence)

def SGI_FullAddCoeffDegree(builder, coeffDegree):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(coeffDegree), 0)

def AddCoeffDegree(builder, coeffDegree):
    SGI_FullAddCoeffDegree(builder, coeffDegree)

def SGI_FullStartCoeffDegreeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCoeffDegreeVector(builder, numElems):
    return SGI_FullStartCoeffDegreeVector(builder, numElems)

def SGI_FullAddCoeffOrder(builder, coeffOrder):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(coeffOrder), 0)

def AddCoeffOrder(builder, coeffOrder):
    SGI_FullAddCoeffOrder(builder, coeffOrder)

def SGI_FullStartCoeffOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCoeffOrderVector(builder, numElems):
    return SGI_FullStartCoeffOrderVector(builder, numElems)

def SGI_FullAddCtce(builder, ctce):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(ctce), 0)

def AddCtce(builder, ctce):
    SGI_FullAddCtce(builder, ctce)

def SGI_FullStartCtceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCtceVector(builder, numElems):
    return SGI_FullStartCtceVector(builder, numElems)

def SGI_FullAddStce(builder, stce):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(stce), 0)

def AddStce(builder, stce):
    SGI_FullAddStce(builder, stce)

def SGI_FullStartStceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStceVector(builder, numElems):
    return SGI_FullStartStceVector(builder, numElems)

def SGI_FullAddCtci(builder, ctci):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(ctci), 0)

def AddCtci(builder, ctci):
    SGI_FullAddCtci(builder, ctci)

def SGI_FullStartCtciVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCtciVector(builder, numElems):
    return SGI_FullStartCtciVector(builder, numElems)

def SGI_FullAddStci(builder, stci):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(stci), 0)

def AddStci(builder, stci):
    SGI_FullAddStci(builder, stci)

def SGI_FullStartStciVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStciVector(builder, numElems):
    return SGI_FullStartStciVector(builder, numElems)

def SGI_FullAddE10(builder, e10):
    builder.PrependFloat64Slot(17, e10, 0.0)

def AddE10(builder, e10):
    SGI_FullAddE10(builder, e10)

def SGI_FullAddE54(builder, e54):
    builder.PrependFloat64Slot(18, e54, 0.0)

def AddE54(builder, e54):
    SGI_FullAddE54(builder, e54)

def SGI_FullAddS10(builder, s10):
    builder.PrependFloat64Slot(19, s10, 0.0)

def AddS10(builder, s10):
    SGI_FullAddS10(builder, s10)

def SGI_FullAddS54(builder, s54):
    builder.PrependFloat64Slot(20, s54, 0.0)

def AddS54(builder, s54):
    SGI_FullAddS54(builder, s54)

def SGI_FullAddM10(builder, m10):
    builder.PrependFloat64Slot(21, m10, 0.0)

def AddM10(builder, m10):
    SGI_FullAddM10(builder, m10)

def SGI_FullAddM54(builder, m54):
    builder.PrependFloat64Slot(22, m54, 0.0)

def AddM54(builder, m54):
    SGI_FullAddM54(builder, m54)

def SGI_FullAddY10(builder, y10):
    builder.PrependFloat64Slot(23, y10, 0.0)

def AddY10(builder, y10):
    SGI_FullAddY10(builder, y10)

def SGI_FullAddY54(builder, y54):
    builder.PrependFloat64Slot(24, y54, 0.0)

def AddY54(builder, y54):
    SGI_FullAddY54(builder, y54)

def SGI_FullAddF10(builder, f10):
    builder.PrependFloat64Slot(25, f10, 0.0)

def AddF10(builder, f10):
    SGI_FullAddF10(builder, f10)

def SGI_FullAddF54(builder, f54):
    builder.PrependFloat64Slot(26, f54, 0.0)

def AddF54(builder, f54):
    SGI_FullAddF54(builder, f54)

def SGI_FullAddF81(builder, f81):
    builder.PrependFloat64Slot(27, f81, 0.0)

def AddF81(builder, f81):
    SGI_FullAddF81(builder, f81)

def SGI_FullAddAp(builder, ap):
    builder.PrependFloat64Slot(28, ap, 0.0)

def AddAp(builder, ap):
    SGI_FullAddAp(builder, ap)

def SGI_FullAddApDuration(builder, apDuration):
    builder.PrependInt32Slot(29, apDuration, 0)

def AddApDuration(builder, apDuration):
    SGI_FullAddApDuration(builder, apDuration)

def SGI_FullAddKIndex(builder, kIndex):
    builder.PrependInt32Slot(30, kIndex, 0)

def AddKIndex(builder, kIndex):
    SGI_FullAddKIndex(builder, kIndex)

def SGI_FullAddKp(builder, kp):
    builder.PrependFloat64Slot(31, kp, 0.0)

def AddKp(builder, kp):
    SGI_FullAddKp(builder, kp)

def SGI_FullAddKpDuration(builder, kpDuration):
    builder.PrependInt32Slot(32, kpDuration, 0)

def AddKpDuration(builder, kpDuration):
    SGI_FullAddKpDuration(builder, kpDuration)

def SGI_FullAddGamma(builder, gamma):
    builder.PrependInt32Slot(33, gamma, 0)

def AddGamma(builder, gamma):
    SGI_FullAddGamma(builder, gamma)

def SGI_FullAddDst(builder, dst):
    builder.PrependFloat64Slot(34, dst, 0.0)

def AddDst(builder, dst):
    SGI_FullAddDst(builder, dst)

def SGI_FullAddDtc(builder, dtc):
    builder.PrependFloat64Slot(35, dtc, 0.0)

def AddDtc(builder, dtc):
    SGI_FullAddDtc(builder, dtc)

def SGI_FullAddRbRegionCode(builder, rbRegionCode):
    builder.PrependInt32Slot(36, rbRegionCode, 0)

def AddRbRegionCode(builder, rbRegionCode):
    SGI_FullAddRbRegionCode(builder, rbRegionCode)

def SGI_FullAddRbIndex(builder, rbIndex):
    builder.PrependFloat64Slot(37, rbIndex, 0.0)

def AddRbIndex(builder, rbIndex):
    SGI_FullAddRbIndex(builder, rbIndex)

def SGI_FullAddNormFactor(builder, normFactor):
    builder.PrependFloat64Slot(38, normFactor, 0.0)

def AddNormFactor(builder, normFactor):
    SGI_FullAddNormFactor(builder, normFactor)

def SGI_FullAddRbDuration(builder, rbDuration):
    builder.PrependInt32Slot(39, rbDuration, 0)

def AddRbDuration(builder, rbDuration):
    SGI_FullAddRbDuration(builder, rbDuration)

def SGI_FullAddAnalyzerAttenuation(builder, analyzerAttenuation):
    builder.PrependFloat64Slot(40, analyzerAttenuation, 0.0)

def AddAnalyzerAttenuation(builder, analyzerAttenuation):
    SGI_FullAddAnalyzerAttenuation(builder, analyzerAttenuation)

def SGI_FullAddObservedBaseline(builder, observedBaseline):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(observedBaseline), 0)

def AddObservedBaseline(builder, observedBaseline):
    SGI_FullAddObservedBaseline(builder, observedBaseline)

def SGI_FullStartObservedBaselineVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartObservedBaselineVector(builder, numElems):
    return SGI_FullStartObservedBaselineVector(builder, numElems)

def SGI_FullAddFrequencies(builder, frequencies):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(frequencies), 0)

def AddFrequencies(builder, frequencies):
    SGI_FullAddFrequencies(builder, frequencies)

def SGI_FullStartFrequenciesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFrequenciesVector(builder, numElems):
    return SGI_FullStartFrequenciesVector(builder, numElems)

def SGI_FullAddPowers(builder, powers):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(powers), 0)

def AddPowers(builder, powers):
    SGI_FullAddPowers(builder, powers)

def SGI_FullStartPowersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPowersVector(builder, numElems):
    return SGI_FullStartPowersVector(builder, numElems)

def SGI_FullAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    SGI_FullAddRawFileUri(builder, rawFileUri)

def SGI_FullAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    SGI_FullAddTransactionId(builder, transactionId)

def SGI_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    SGI_FullAddTags(builder, tags)

def SGI_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return SGI_FullStartTagsVector(builder, numElems)

def SGI_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SGI_FullAddSource(builder, source)

def SGI_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SGI_FullAddOrigin(builder, origin)

def SGI_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SGI_FullAddOrigNetwork(builder, origNetwork)

def SGI_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(50, dataMode, 0)

def AddDataMode(builder, dataMode):
    SGI_FullAddDataMode(builder, dataMode)

def SGI_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SGI_FullAddCreatedAt(builder, createdAt)

def SGI_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SGI_FullAddCreatedBy(builder, createdBy)

def SGI_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SGI_FullAddUpdatedAt(builder, updatedAt)

def SGI_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SGI_FullAddUpdatedBy(builder, updatedBy)

def SGI_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SGI_FullEnd(builder)

try:
    from typing import List
except:
    pass

class SGI_FullT(object):

    # SGI_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.effectiveDate = None  # type: str
        self.sgiDate = None  # type: str
        self.type = None  # type: str
        self.state = 0  # type: int
        self.stationName = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.mode = 0  # type: int
        self.precedence = 0  # type: int
        self.coeffDegree = None  # type: List[str]
        self.coeffOrder = None  # type: List[str]
        self.ctce = None  # type: List[str]
        self.stce = None  # type: List[str]
        self.ctci = None  # type: List[str]
        self.stci = None  # type: List[str]
        self.e10 = 0.0  # type: float
        self.e54 = 0.0  # type: float
        self.s10 = 0.0  # type: float
        self.s54 = 0.0  # type: float
        self.m10 = 0.0  # type: float
        self.m54 = 0.0  # type: float
        self.y10 = 0.0  # type: float
        self.y54 = 0.0  # type: float
        self.f10 = 0.0  # type: float
        self.f54 = 0.0  # type: float
        self.f81 = 0.0  # type: float
        self.ap = 0.0  # type: float
        self.apDuration = 0  # type: int
        self.kIndex = 0  # type: int
        self.kp = 0.0  # type: float
        self.kpDuration = 0  # type: int
        self.gamma = 0  # type: int
        self.dst = 0.0  # type: float
        self.dtc = 0.0  # type: float
        self.rbRegionCode = 0  # type: int
        self.rbIndex = 0.0  # type: float
        self.normFactor = 0.0  # type: float
        self.rbDuration = 0  # type: int
        self.analyzerAttenuation = 0.0  # type: float
        self.observedBaseline = None  # type: List[str]
        self.frequencies = None  # type: List[str]
        self.powers = None  # type: List[str]
        self.rawFileUri = None  # type: str
        self.transactionId = None  # type: str
        self.tags = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sgiFull = SGI_Full()
        sgiFull.Init(buf, pos)
        return cls.InitFromObj(sgiFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sgiFull):
        x = SGI_FullT()
        x._UnPack(sgiFull)
        return x

    # SGI_FullT
    def _UnPack(self, sgiFull):
        if sgiFull is None:
            return
        self.id = sgiFull.Id()
        self.classificationMarking = sgiFull.ClassificationMarking()
        self.effectiveDate = sgiFull.EffectiveDate()
        self.sgiDate = sgiFull.SgiDate()
        self.type = sgiFull.Type()
        self.state = sgiFull.State()
        self.stationName = sgiFull.StationName()
        self.idSensor = sgiFull.IdSensor()
        self.origSensorId = sgiFull.OrigSensorId()
        self.mode = sgiFull.Mode()
        self.precedence = sgiFull.Precedence()
        if not sgiFull.CoeffDegreeIsNone():
            self.coeffDegree = []
            for i in range(sgiFull.CoeffDegreeLength()):
                self.coeffDegree.append(sgiFull.CoeffDegree(i))
        if not sgiFull.CoeffOrderIsNone():
            self.coeffOrder = []
            for i in range(sgiFull.CoeffOrderLength()):
                self.coeffOrder.append(sgiFull.CoeffOrder(i))
        if not sgiFull.CtceIsNone():
            self.ctce = []
            for i in range(sgiFull.CtceLength()):
                self.ctce.append(sgiFull.Ctce(i))
        if not sgiFull.StceIsNone():
            self.stce = []
            for i in range(sgiFull.StceLength()):
                self.stce.append(sgiFull.Stce(i))
        if not sgiFull.CtciIsNone():
            self.ctci = []
            for i in range(sgiFull.CtciLength()):
                self.ctci.append(sgiFull.Ctci(i))
        if not sgiFull.StciIsNone():
            self.stci = []
            for i in range(sgiFull.StciLength()):
                self.stci.append(sgiFull.Stci(i))
        self.e10 = sgiFull.E10()
        self.e54 = sgiFull.E54()
        self.s10 = sgiFull.S10()
        self.s54 = sgiFull.S54()
        self.m10 = sgiFull.M10()
        self.m54 = sgiFull.M54()
        self.y10 = sgiFull.Y10()
        self.y54 = sgiFull.Y54()
        self.f10 = sgiFull.F10()
        self.f54 = sgiFull.F54()
        self.f81 = sgiFull.F81()
        self.ap = sgiFull.Ap()
        self.apDuration = sgiFull.ApDuration()
        self.kIndex = sgiFull.KIndex()
        self.kp = sgiFull.Kp()
        self.kpDuration = sgiFull.KpDuration()
        self.gamma = sgiFull.Gamma()
        self.dst = sgiFull.Dst()
        self.dtc = sgiFull.Dtc()
        self.rbRegionCode = sgiFull.RbRegionCode()
        self.rbIndex = sgiFull.RbIndex()
        self.normFactor = sgiFull.NormFactor()
        self.rbDuration = sgiFull.RbDuration()
        self.analyzerAttenuation = sgiFull.AnalyzerAttenuation()
        if not sgiFull.ObservedBaselineIsNone():
            self.observedBaseline = []
            for i in range(sgiFull.ObservedBaselineLength()):
                self.observedBaseline.append(sgiFull.ObservedBaseline(i))
        if not sgiFull.FrequenciesIsNone():
            self.frequencies = []
            for i in range(sgiFull.FrequenciesLength()):
                self.frequencies.append(sgiFull.Frequencies(i))
        if not sgiFull.PowersIsNone():
            self.powers = []
            for i in range(sgiFull.PowersLength()):
                self.powers.append(sgiFull.Powers(i))
        self.rawFileUri = sgiFull.RawFileUri()
        self.transactionId = sgiFull.TransactionId()
        if not sgiFull.TagsIsNone():
            self.tags = []
            for i in range(sgiFull.TagsLength()):
                self.tags.append(sgiFull.Tags(i))
        self.source = sgiFull.Source()
        self.origin = sgiFull.Origin()
        self.origNetwork = sgiFull.OrigNetwork()
        self.dataMode = sgiFull.DataMode()
        self.createdAt = sgiFull.CreatedAt()
        self.createdBy = sgiFull.CreatedBy()
        self.updatedAt = sgiFull.UpdatedAt()
        self.updatedBy = sgiFull.UpdatedBy()

    # SGI_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.effectiveDate is not None:
            effectiveDate = builder.CreateString(self.effectiveDate)
        if self.sgiDate is not None:
            sgiDate = builder.CreateString(self.sgiDate)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.stationName is not None:
            stationName = builder.CreateString(self.stationName)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.coeffDegree is not None:
            coeffDegreelist = []
            for i in range(len(self.coeffDegree)):
                coeffDegreelist.append(builder.CreateString(self.coeffDegree[i]))
            SGI_FullStartCoeffDegreeVector(builder, len(self.coeffDegree))
            for i in reversed(range(len(self.coeffDegree))):
                builder.PrependUOffsetTRelative(coeffDegreelist[i])
            coeffDegree = builder.EndVector()
        if self.coeffOrder is not None:
            coeffOrderlist = []
            for i in range(len(self.coeffOrder)):
                coeffOrderlist.append(builder.CreateString(self.coeffOrder[i]))
            SGI_FullStartCoeffOrderVector(builder, len(self.coeffOrder))
            for i in reversed(range(len(self.coeffOrder))):
                builder.PrependUOffsetTRelative(coeffOrderlist[i])
            coeffOrder = builder.EndVector()
        if self.ctce is not None:
            ctcelist = []
            for i in range(len(self.ctce)):
                ctcelist.append(builder.CreateString(self.ctce[i]))
            SGI_FullStartCtceVector(builder, len(self.ctce))
            for i in reversed(range(len(self.ctce))):
                builder.PrependUOffsetTRelative(ctcelist[i])
            ctce = builder.EndVector()
        if self.stce is not None:
            stcelist = []
            for i in range(len(self.stce)):
                stcelist.append(builder.CreateString(self.stce[i]))
            SGI_FullStartStceVector(builder, len(self.stce))
            for i in reversed(range(len(self.stce))):
                builder.PrependUOffsetTRelative(stcelist[i])
            stce = builder.EndVector()
        if self.ctci is not None:
            ctcilist = []
            for i in range(len(self.ctci)):
                ctcilist.append(builder.CreateString(self.ctci[i]))
            SGI_FullStartCtciVector(builder, len(self.ctci))
            for i in reversed(range(len(self.ctci))):
                builder.PrependUOffsetTRelative(ctcilist[i])
            ctci = builder.EndVector()
        if self.stci is not None:
            stcilist = []
            for i in range(len(self.stci)):
                stcilist.append(builder.CreateString(self.stci[i]))
            SGI_FullStartStciVector(builder, len(self.stci))
            for i in reversed(range(len(self.stci))):
                builder.PrependUOffsetTRelative(stcilist[i])
            stci = builder.EndVector()
        if self.observedBaseline is not None:
            observedBaselinelist = []
            for i in range(len(self.observedBaseline)):
                observedBaselinelist.append(builder.CreateString(self.observedBaseline[i]))
            SGI_FullStartObservedBaselineVector(builder, len(self.observedBaseline))
            for i in reversed(range(len(self.observedBaseline))):
                builder.PrependUOffsetTRelative(observedBaselinelist[i])
            observedBaseline = builder.EndVector()
        if self.frequencies is not None:
            frequencieslist = []
            for i in range(len(self.frequencies)):
                frequencieslist.append(builder.CreateString(self.frequencies[i]))
            SGI_FullStartFrequenciesVector(builder, len(self.frequencies))
            for i in reversed(range(len(self.frequencies))):
                builder.PrependUOffsetTRelative(frequencieslist[i])
            frequencies = builder.EndVector()
        if self.powers is not None:
            powerslist = []
            for i in range(len(self.powers)):
                powerslist.append(builder.CreateString(self.powers[i]))
            SGI_FullStartPowersVector(builder, len(self.powers))
            for i in reversed(range(len(self.powers))):
                builder.PrependUOffsetTRelative(powerslist[i])
            powers = builder.EndVector()
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            SGI_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        SGI_FullStart(builder)
        if self.id is not None:
            SGI_FullAddId(builder, id)
        if self.classificationMarking is not None:
            SGI_FullAddClassificationMarking(builder, classificationMarking)
        if self.effectiveDate is not None:
            SGI_FullAddEffectiveDate(builder, effectiveDate)
        if self.sgiDate is not None:
            SGI_FullAddSgiDate(builder, sgiDate)
        if self.type is not None:
            SGI_FullAddType(builder, type)
        SGI_FullAddState(builder, self.state)
        if self.stationName is not None:
            SGI_FullAddStationName(builder, stationName)
        if self.idSensor is not None:
            SGI_FullAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            SGI_FullAddOrigSensorId(builder, origSensorId)
        SGI_FullAddMode(builder, self.mode)
        SGI_FullAddPrecedence(builder, self.precedence)
        if self.coeffDegree is not None:
            SGI_FullAddCoeffDegree(builder, coeffDegree)
        if self.coeffOrder is not None:
            SGI_FullAddCoeffOrder(builder, coeffOrder)
        if self.ctce is not None:
            SGI_FullAddCtce(builder, ctce)
        if self.stce is not None:
            SGI_FullAddStce(builder, stce)
        if self.ctci is not None:
            SGI_FullAddCtci(builder, ctci)
        if self.stci is not None:
            SGI_FullAddStci(builder, stci)
        SGI_FullAddE10(builder, self.e10)
        SGI_FullAddE54(builder, self.e54)
        SGI_FullAddS10(builder, self.s10)
        SGI_FullAddS54(builder, self.s54)
        SGI_FullAddM10(builder, self.m10)
        SGI_FullAddM54(builder, self.m54)
        SGI_FullAddY10(builder, self.y10)
        SGI_FullAddY54(builder, self.y54)
        SGI_FullAddF10(builder, self.f10)
        SGI_FullAddF54(builder, self.f54)
        SGI_FullAddF81(builder, self.f81)
        SGI_FullAddAp(builder, self.ap)
        SGI_FullAddApDuration(builder, self.apDuration)
        SGI_FullAddKIndex(builder, self.kIndex)
        SGI_FullAddKp(builder, self.kp)
        SGI_FullAddKpDuration(builder, self.kpDuration)
        SGI_FullAddGamma(builder, self.gamma)
        SGI_FullAddDst(builder, self.dst)
        SGI_FullAddDtc(builder, self.dtc)
        SGI_FullAddRbRegionCode(builder, self.rbRegionCode)
        SGI_FullAddRbIndex(builder, self.rbIndex)
        SGI_FullAddNormFactor(builder, self.normFactor)
        SGI_FullAddRbDuration(builder, self.rbDuration)
        SGI_FullAddAnalyzerAttenuation(builder, self.analyzerAttenuation)
        if self.observedBaseline is not None:
            SGI_FullAddObservedBaseline(builder, observedBaseline)
        if self.frequencies is not None:
            SGI_FullAddFrequencies(builder, frequencies)
        if self.powers is not None:
            SGI_FullAddPowers(builder, powers)
        if self.rawFileUri is not None:
            SGI_FullAddRawFileUri(builder, rawFileUri)
        if self.transactionId is not None:
            SGI_FullAddTransactionId(builder, transactionId)
        if self.tags is not None:
            SGI_FullAddTags(builder, tags)
        if self.source is not None:
            SGI_FullAddSource(builder, source)
        if self.origin is not None:
            SGI_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SGI_FullAddOrigNetwork(builder, origNetwork)
        SGI_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            SGI_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SGI_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SGI_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SGI_FullAddUpdatedBy(builder, updatedBy)
        sgiFull = SGI_FullEnd(builder)
        return sgiFull
