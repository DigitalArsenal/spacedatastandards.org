# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
class MissileTrack_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MissileTrack_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMissileTrack_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MissileTrack_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x49\x53\x53", size_prefixed=size_prefixed)

    # MissileTrack_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: MissileTrack_ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # MissileTrack_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # MissileTrack_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of external message from which this request originated.
    # Example: /// Example: MSG-TYPE
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissileTrack_Ingest
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
    # Example: /// Example: Update
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def MsgSubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-04-25T08:17:01.346Z
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def MsgCreateDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    #  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
    #  LAND: On the surface of dry land.
    #  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
    #  SURFACE: On the surface of a body of water.
    #  SUBSURFACE: Below the surface of a body of water.
    #  UNKNOWN: Environment is not known.
    # Example: /// Example: AIR
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissileTrack_Ingest
    def Env(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
    # Example: /// Example: Ballistic
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def ObjType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Confidence of the object type, 0-100.
    # Example: /// Example: 90
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def ObjTypeConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
    # Example: /// Example: WEAPON
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def ObjPlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    #  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    #  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    #  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    #  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    #  PENDING: Track object which has not been evaluated.
    #  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    #  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def ObjIdent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
    # Example: /// Example: NUCLEAR WARHEAD
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def SpaceAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
    # Example: /// Example: HOLDING
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def ObjAct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specific type of point or track with an environment of space.
    # Example: /// Example: SS-21_MOD_2_CRBM
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def SpaceSpecType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
    # &nbsp;SRBM - Short-Range Ballistic Missile
    # &nbsp;MRBM - Medium-Range Ballistic Missile
    # &nbsp;IRBM - Intermediate-Range Ballistic Missile
    # &nbsp;LRBM - Long-Range Ballistic Missile
    # &nbsp;ICBM - Intercontinental Ballistic Missile
    # &nbsp;SLBM - Submarine-Launched Ballistic Missile.
    # Example: /// Example: SLBM
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissileTrack_Ingest
    def AcftSubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track name.
    # Example: /// Example: TRACK-NAME
    # Constraints: Minimum length = 0, Maximum length = 48
    # MissileTrack_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign currently assigned to the track object.
    # Example: /// Example: Charlie
    # Constraints: Minimum length = 0, Maximum length = 24
    # MissileTrack_Ingest
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates whether or not the missile is considered lost.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def LostTrkInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Track ID within the originating system.
    # Example: /// Example: 102288
    # Constraints: Minimum length = 0, Maximum length = 36
    # MissileTrack_Ingest
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track ID of the parent track, within the originating system, from which the track was developed.
    # Example: /// Example: 102288
    # Constraints: Minimum length = 0, Maximum length = 36
    # MissileTrack_Ingest
    def ParentTrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track ID for the source of the missile-unique identifier.
    # Example: /// Example: MUID-SRC-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # MissileTrack_Ingest
    def MuidSrcTrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the missile-unique identifier (MUID).
    # Example: /// Example: MUID-SRC
    # Constraints: Minimum length = 0, Maximum length = 36
    # MissileTrack_Ingest
    def MuidSrc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A track may be designated as a non-alert track or an alert track.
    # Examples include but are not limited to:
    # &nbsp;Non-alert tracks – choose None (Blank).
    # &nbsp;Alert tracks – enter the proper alert classification:
    # &nbsp;HIT - High Interest Track
    # &nbsp;TGT - Target
    # &nbsp;SUS - Suspect Carrier
    # &nbsp;NSP - Cleared Suspect.
    # Example: /// Example: HIT
    # Constraints: Minimum length = 0, Maximum length = 4
    # MissileTrack_Ingest
    def Alert(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Missile status enumeration examples include but are not limited to:
    # &nbsp;AT LAUNCH 
    # &nbsp;AT OBSERVATION 
    # &nbsp;FLYING 
    # &nbsp;IMPACTED 
    # &nbsp;LOST 
    # &nbsp;STALE
    # &nbsp;DEBRIS.
    # Example: /// Example: AT LAUNCH
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def MslStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 40
    # MissileTrack_Ingest
    def AouRptType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    # &nbsp;ELLIPSE:
    # &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    # &nbsp;&nbsp;a1 - semi-major axis in kilometers
    # &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    # &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    # &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    # &nbsp;&nbsp;a1 - length of bearing box in kilometers
    # &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    # &nbsp;OTHER (All other type values):
    # &nbsp;&nbsp;brg - line of bearing in degrees true
    # &nbsp;&nbsp;a1 - bearing error in degrees
    # &nbsp;&nbsp;a2 - estimated range in kilometers.
    # Example: /// Example: [34.3, 26.5, 1.2]
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def AouRptData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrack_Ingest
    def AouRptDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrack_Ingest
    def AouRptDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # The percentage of time that the estimated AoU will "cover" the true position of the track.
    # Example: /// Example: 90.64
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def Containment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    # Example: /// Example: 0.95
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def TrkConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def TrkQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Angle of elevation/depression between observer and missile in degrees.
    # Example: /// Example: 15.2
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def AngElev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last report type received from the sensor (for example, OBSBO = observation burnout).
    # Example: /// Example: OBSBO
    # Constraints: Minimum length = 0, Maximum length = 64
    # MissileTrack_Ingest
    def SenMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source code for source of information used to detect track.
    # Example: /// Example: S1
    # Constraints: Minimum length = 0, Maximum length = 64
    # MissileTrack_Ingest
    def InfoSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates whether or not the missile is currently in a state of boosting.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def Boosting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Azimuth corridor reference point latitude.
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def PolarSingLocLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Azimuth corridor reference point longitude.
    # Example: /// Example: 46.74596844
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def PolarSingLocLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates whether or not a track has an emergency.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def EmgInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The drop-point indicator setting.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def DropPtInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Confidence level of the amplifying characteristics. Values range from 0 to 6.
    # Example: /// Example: 6
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def SpaceAmpConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Missile launch timestamp in ISO8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def LaunchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def LaunchLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74596844
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def LaunchLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Missile azimuth corridor data.
    # Example: /// Example: 12.876
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def AzCorr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
    # Example: /// Example: 30567.452
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def BurnoutAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 40
    # MissileTrack_Ingest
    def LaunchAouType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    # &nbsp;ELLIPSE:
    # &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    # &nbsp;&nbsp;a1 - semi-major axis in kilometers
    # &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    # &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    # &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    # &nbsp;&nbsp;a1 - length of bearing box in kilometers
    # &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    # &nbsp;OTHER (All other type values):
    # &nbsp;&nbsp;brg - line of bearing in degrees true
    # &nbsp;&nbsp;a1 - bearing error in degrees
    # &nbsp;&nbsp;a2 - estimated range in kilometers.
    # Example: /// Example: [1.23, 2.34, 3.45]
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def LaunchAouData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrack_Ingest
    def LaunchAouDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrack_Ingest
    def LaunchAouDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        return o == 0

    # Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def ImpactTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def ImpactLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74596844
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def ImpactLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 40
    # MissileTrack_Ingest
    def ImpactAouType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
    # &nbsp;ELLIPSE:
    # &nbsp;&nbsp;brg - orientation in degrees of the ellipse
    # &nbsp;&nbsp;a1 - semi-major axis in kilometers
    # &nbsp;&nbsp;a2 - semi-minor axis in kilometers
    # &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
    # &nbsp;&nbsp;brg - orientation in degrees of the bearing box
    # &nbsp;&nbsp;a1 - length of bearing box in kilometers
    # &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
    # &nbsp;OTHER (All other type values):
    # &nbsp;&nbsp;brg - line of bearing in degrees true
    # &nbsp;&nbsp;a1 - bearing error in degrees
    # &nbsp;&nbsp;a2 - estimated range in kilometers.
    # Example: /// Example: [34.3, 26.5, 1.2]
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def ImpactAouData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrack_Ingest
    def ImpactAouDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrack_Ingest
    def ImpactAouDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        return o == 0

    # Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def Vectors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MissileTrack_Ingest
    def VectorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MissileTrack_Ingest
    def VectorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # MissileTrack_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database.
    # Example: /// Example: 2021-02-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # MissileTrack_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # MissileTrack_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # MissileTrack_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # MissileTrack_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # MissileTrack_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def MissileTrack_IngestStart(builder):
    builder.StartObject(57)

def Start(builder):
    MissileTrack_IngestStart(builder)

def MissileTrack_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    MissileTrack_IngestAddId(builder, id)

def MissileTrack_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    MissileTrack_IngestAddClassificationMarking(builder, classificationMarking)

def MissileTrack_IngestAddMsgType(builder, msgType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(msgType), 0)

def AddMsgType(builder, msgType):
    MissileTrack_IngestAddMsgType(builder, msgType)

def MissileTrack_IngestAddMsgSubType(builder, msgSubType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgSubType), 0)

def AddMsgSubType(builder, msgSubType):
    MissileTrack_IngestAddMsgSubType(builder, msgSubType)

def MissileTrack_IngestAddMsgCreateDate(builder, msgCreateDate):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(msgCreateDate), 0)

def AddMsgCreateDate(builder, msgCreateDate):
    MissileTrack_IngestAddMsgCreateDate(builder, msgCreateDate)

def MissileTrack_IngestAddEnv(builder, env):
    builder.PrependInt8Slot(5, env, 0)

def AddEnv(builder, env):
    MissileTrack_IngestAddEnv(builder, env)

def MissileTrack_IngestAddObjType(builder, objType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(objType), 0)

def AddObjType(builder, objType):
    MissileTrack_IngestAddObjType(builder, objType)

def MissileTrack_IngestAddObjTypeConf(builder, objTypeConf):
    builder.PrependInt32Slot(7, objTypeConf, 0)

def AddObjTypeConf(builder, objTypeConf):
    MissileTrack_IngestAddObjTypeConf(builder, objTypeConf)

def MissileTrack_IngestAddObjPlat(builder, objPlat):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(objPlat), 0)

def AddObjPlat(builder, objPlat):
    MissileTrack_IngestAddObjPlat(builder, objPlat)

def MissileTrack_IngestAddObjIdent(builder, objIdent):
    builder.PrependInt8Slot(9, objIdent, 0)

def AddObjIdent(builder, objIdent):
    MissileTrack_IngestAddObjIdent(builder, objIdent)

def MissileTrack_IngestAddSpaceAmp(builder, spaceAmp):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(spaceAmp), 0)

def AddSpaceAmp(builder, spaceAmp):
    MissileTrack_IngestAddSpaceAmp(builder, spaceAmp)

def MissileTrack_IngestAddObjAct(builder, objAct):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(objAct), 0)

def AddObjAct(builder, objAct):
    MissileTrack_IngestAddObjAct(builder, objAct)

def MissileTrack_IngestAddSpaceSpecType(builder, spaceSpecType):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(spaceSpecType), 0)

def AddSpaceSpecType(builder, spaceSpecType):
    MissileTrack_IngestAddSpaceSpecType(builder, spaceSpecType)

def MissileTrack_IngestAddAcftSubType(builder, acftSubType):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(acftSubType), 0)

def AddAcftSubType(builder, acftSubType):
    MissileTrack_IngestAddAcftSubType(builder, acftSubType)

def MissileTrack_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MissileTrack_IngestAddName(builder, name)

def MissileTrack_IngestAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    MissileTrack_IngestAddCallSign(builder, callSign)

def MissileTrack_IngestAddLostTrkInd(builder, lostTrkInd):
    builder.PrependBoolSlot(16, lostTrkInd, 0)

def AddLostTrkInd(builder, lostTrkInd):
    MissileTrack_IngestAddLostTrkInd(builder, lostTrkInd)

def MissileTrack_IngestAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    MissileTrack_IngestAddTrackId(builder, trackId)

def MissileTrack_IngestAddParentTrackId(builder, parentTrackId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(parentTrackId), 0)

def AddParentTrackId(builder, parentTrackId):
    MissileTrack_IngestAddParentTrackId(builder, parentTrackId)

def MissileTrack_IngestAddMuidSrcTrk(builder, muidSrcTrk):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(muidSrcTrk), 0)

def AddMuidSrcTrk(builder, muidSrcTrk):
    MissileTrack_IngestAddMuidSrcTrk(builder, muidSrcTrk)

def MissileTrack_IngestAddMuidSrc(builder, muidSrc):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(muidSrc), 0)

def AddMuidSrc(builder, muidSrc):
    MissileTrack_IngestAddMuidSrc(builder, muidSrc)

def MissileTrack_IngestAddAlert(builder, alert):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(alert), 0)

def AddAlert(builder, alert):
    MissileTrack_IngestAddAlert(builder, alert)

def MissileTrack_IngestAddMslStatus(builder, mslStatus):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(mslStatus), 0)

def AddMslStatus(builder, mslStatus):
    MissileTrack_IngestAddMslStatus(builder, mslStatus)

def MissileTrack_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    MissileTrack_IngestAddTs(builder, ts)

def MissileTrack_IngestAddAouRptType(builder, aouRptType):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(aouRptType), 0)

def AddAouRptType(builder, aouRptType):
    MissileTrack_IngestAddAouRptType(builder, aouRptType)

def MissileTrack_IngestAddAouRptData(builder, aouRptData):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(aouRptData), 0)

def AddAouRptData(builder, aouRptData):
    MissileTrack_IngestAddAouRptData(builder, aouRptData)

def MissileTrack_IngestStartAouRptDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAouRptDataVector(builder, numElems):
    return MissileTrack_IngestStartAouRptDataVector(builder, numElems)

def MissileTrack_IngestAddContainment(builder, containment):
    builder.PrependFloat64Slot(26, containment, 0.0)

def AddContainment(builder, containment):
    MissileTrack_IngestAddContainment(builder, containment)

def MissileTrack_IngestAddTrkConf(builder, trkConf):
    builder.PrependFloat64Slot(27, trkConf, 0.0)

def AddTrkConf(builder, trkConf):
    MissileTrack_IngestAddTrkConf(builder, trkConf)

def MissileTrack_IngestAddTrkQual(builder, trkQual):
    builder.PrependInt32Slot(28, trkQual, 0)

def AddTrkQual(builder, trkQual):
    MissileTrack_IngestAddTrkQual(builder, trkQual)

def MissileTrack_IngestAddAngElev(builder, angElev):
    builder.PrependFloat64Slot(29, angElev, 0.0)

def AddAngElev(builder, angElev):
    MissileTrack_IngestAddAngElev(builder, angElev)

def MissileTrack_IngestAddSenMode(builder, senMode):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(senMode), 0)

def AddSenMode(builder, senMode):
    MissileTrack_IngestAddSenMode(builder, senMode)

def MissileTrack_IngestAddInfoSource(builder, infoSource):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(infoSource), 0)

def AddInfoSource(builder, infoSource):
    MissileTrack_IngestAddInfoSource(builder, infoSource)

def MissileTrack_IngestAddBoosting(builder, boosting):
    builder.PrependBoolSlot(32, boosting, 0)

def AddBoosting(builder, boosting):
    MissileTrack_IngestAddBoosting(builder, boosting)

def MissileTrack_IngestAddPolarSingLocLat(builder, polarSingLocLat):
    builder.PrependFloat64Slot(33, polarSingLocLat, 0.0)

def AddPolarSingLocLat(builder, polarSingLocLat):
    MissileTrack_IngestAddPolarSingLocLat(builder, polarSingLocLat)

def MissileTrack_IngestAddPolarSingLocLon(builder, polarSingLocLon):
    builder.PrependFloat64Slot(34, polarSingLocLon, 0.0)

def AddPolarSingLocLon(builder, polarSingLocLon):
    MissileTrack_IngestAddPolarSingLocLon(builder, polarSingLocLon)

def MissileTrack_IngestAddEmgInd(builder, emgInd):
    builder.PrependBoolSlot(35, emgInd, 0)

def AddEmgInd(builder, emgInd):
    MissileTrack_IngestAddEmgInd(builder, emgInd)

def MissileTrack_IngestAddDropPtInd(builder, dropPtInd):
    builder.PrependBoolSlot(36, dropPtInd, 0)

def AddDropPtInd(builder, dropPtInd):
    MissileTrack_IngestAddDropPtInd(builder, dropPtInd)

def MissileTrack_IngestAddSpaceAmpConf(builder, spaceAmpConf):
    builder.PrependInt32Slot(37, spaceAmpConf, 0)

def AddSpaceAmpConf(builder, spaceAmpConf):
    MissileTrack_IngestAddSpaceAmpConf(builder, spaceAmpConf)

def MissileTrack_IngestAddLaunchTime(builder, launchTime):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(launchTime), 0)

def AddLaunchTime(builder, launchTime):
    MissileTrack_IngestAddLaunchTime(builder, launchTime)

def MissileTrack_IngestAddLaunchLat(builder, launchLat):
    builder.PrependFloat64Slot(39, launchLat, 0.0)

def AddLaunchLat(builder, launchLat):
    MissileTrack_IngestAddLaunchLat(builder, launchLat)

def MissileTrack_IngestAddLaunchLon(builder, launchLon):
    builder.PrependFloat64Slot(40, launchLon, 0.0)

def AddLaunchLon(builder, launchLon):
    MissileTrack_IngestAddLaunchLon(builder, launchLon)

def MissileTrack_IngestAddAzCorr(builder, azCorr):
    builder.PrependFloat64Slot(41, azCorr, 0.0)

def AddAzCorr(builder, azCorr):
    MissileTrack_IngestAddAzCorr(builder, azCorr)

def MissileTrack_IngestAddBurnoutAlt(builder, burnoutAlt):
    builder.PrependFloat64Slot(42, burnoutAlt, 0.0)

def AddBurnoutAlt(builder, burnoutAlt):
    MissileTrack_IngestAddBurnoutAlt(builder, burnoutAlt)

def MissileTrack_IngestAddLaunchAouType(builder, launchAouType):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(launchAouType), 0)

def AddLaunchAouType(builder, launchAouType):
    MissileTrack_IngestAddLaunchAouType(builder, launchAouType)

def MissileTrack_IngestAddLaunchAouData(builder, launchAouData):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(launchAouData), 0)

def AddLaunchAouData(builder, launchAouData):
    MissileTrack_IngestAddLaunchAouData(builder, launchAouData)

def MissileTrack_IngestStartLaunchAouDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLaunchAouDataVector(builder, numElems):
    return MissileTrack_IngestStartLaunchAouDataVector(builder, numElems)

def MissileTrack_IngestAddImpactTime(builder, impactTime):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(impactTime), 0)

def AddImpactTime(builder, impactTime):
    MissileTrack_IngestAddImpactTime(builder, impactTime)

def MissileTrack_IngestAddImpactLat(builder, impactLat):
    builder.PrependFloat64Slot(46, impactLat, 0.0)

def AddImpactLat(builder, impactLat):
    MissileTrack_IngestAddImpactLat(builder, impactLat)

def MissileTrack_IngestAddImpactLon(builder, impactLon):
    builder.PrependFloat64Slot(47, impactLon, 0.0)

def AddImpactLon(builder, impactLon):
    MissileTrack_IngestAddImpactLon(builder, impactLon)

def MissileTrack_IngestAddImpactAouType(builder, impactAouType):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(impactAouType), 0)

def AddImpactAouType(builder, impactAouType):
    MissileTrack_IngestAddImpactAouType(builder, impactAouType)

def MissileTrack_IngestAddImpactAouData(builder, impactAouData):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(impactAouData), 0)

def AddImpactAouData(builder, impactAouData):
    MissileTrack_IngestAddImpactAouData(builder, impactAouData)

def MissileTrack_IngestStartImpactAouDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartImpactAouDataVector(builder, numElems):
    return MissileTrack_IngestStartImpactAouDataVector(builder, numElems)

def MissileTrack_IngestAddVectors(builder, vectors):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(vectors), 0)

def AddVectors(builder, vectors):
    MissileTrack_IngestAddVectors(builder, vectors)

def MissileTrack_IngestStartVectorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVectorsVector(builder, numElems):
    return MissileTrack_IngestStartVectorsVector(builder, numElems)

def MissileTrack_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    MissileTrack_IngestAddOrigNetwork(builder, origNetwork)

def MissileTrack_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    MissileTrack_IngestAddCreatedAt(builder, createdAt)

def MissileTrack_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    MissileTrack_IngestAddCreatedBy(builder, createdBy)

def MissileTrack_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    MissileTrack_IngestAddSource(builder, source)

def MissileTrack_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    MissileTrack_IngestAddOrigin(builder, origin)

def MissileTrack_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(56, dataMode, 0)

def AddDataMode(builder, dataMode):
    MissileTrack_IngestAddDataMode(builder, dataMode)

def MissileTrack_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return MissileTrack_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class MissileTrack_IngestT(object):

    # MissileTrack_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.msgType = None  # type: str
        self.msgSubType = None  # type: str
        self.msgCreateDate = None  # type: str
        self.env = 0  # type: int
        self.objType = None  # type: str
        self.objTypeConf = 0  # type: int
        self.objPlat = None  # type: str
        self.objIdent = 0  # type: int
        self.spaceAmp = None  # type: str
        self.objAct = None  # type: str
        self.spaceSpecType = None  # type: str
        self.acftSubType = None  # type: str
        self.name = None  # type: str
        self.callSign = None  # type: str
        self.lostTrkInd = False  # type: bool
        self.trackId = None  # type: str
        self.parentTrackId = None  # type: str
        self.muidSrcTrk = None  # type: str
        self.muidSrc = None  # type: str
        self.alert = None  # type: str
        self.mslStatus = None  # type: str
        self.ts = None  # type: str
        self.aouRptType = None  # type: str
        self.aouRptData = None  # type: List[str]
        self.containment = 0.0  # type: float
        self.trkConf = 0.0  # type: float
        self.trkQual = 0  # type: int
        self.angElev = 0.0  # type: float
        self.senMode = None  # type: str
        self.infoSource = None  # type: str
        self.boosting = False  # type: bool
        self.polarSingLocLat = 0.0  # type: float
        self.polarSingLocLon = 0.0  # type: float
        self.emgInd = False  # type: bool
        self.dropPtInd = False  # type: bool
        self.spaceAmpConf = 0  # type: int
        self.launchTime = None  # type: str
        self.launchLat = 0.0  # type: float
        self.launchLon = 0.0  # type: float
        self.azCorr = 0.0  # type: float
        self.burnoutAlt = 0.0  # type: float
        self.launchAouType = None  # type: str
        self.launchAouData = None  # type: List[str]
        self.impactTime = None  # type: str
        self.impactLat = 0.0  # type: float
        self.impactLon = 0.0  # type: float
        self.impactAouType = None  # type: str
        self.impactAouData = None  # type: List[str]
        self.vectors = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        missileTrackIngest = MissileTrack_Ingest()
        missileTrackIngest.Init(buf, pos)
        return cls.InitFromObj(missileTrackIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, missileTrackIngest):
        x = MissileTrack_IngestT()
        x._UnPack(missileTrackIngest)
        return x

    # MissileTrack_IngestT
    def _UnPack(self, missileTrackIngest):
        if missileTrackIngest is None:
            return
        self.id = missileTrackIngest.Id()
        self.classificationMarking = missileTrackIngest.ClassificationMarking()
        self.msgType = missileTrackIngest.MsgType()
        self.msgSubType = missileTrackIngest.MsgSubType()
        self.msgCreateDate = missileTrackIngest.MsgCreateDate()
        self.env = missileTrackIngest.Env()
        self.objType = missileTrackIngest.ObjType()
        self.objTypeConf = missileTrackIngest.ObjTypeConf()
        self.objPlat = missileTrackIngest.ObjPlat()
        self.objIdent = missileTrackIngest.ObjIdent()
        self.spaceAmp = missileTrackIngest.SpaceAmp()
        self.objAct = missileTrackIngest.ObjAct()
        self.spaceSpecType = missileTrackIngest.SpaceSpecType()
        self.acftSubType = missileTrackIngest.AcftSubType()
        self.name = missileTrackIngest.Name()
        self.callSign = missileTrackIngest.CallSign()
        self.lostTrkInd = missileTrackIngest.LostTrkInd()
        self.trackId = missileTrackIngest.TrackId()
        self.parentTrackId = missileTrackIngest.ParentTrackId()
        self.muidSrcTrk = missileTrackIngest.MuidSrcTrk()
        self.muidSrc = missileTrackIngest.MuidSrc()
        self.alert = missileTrackIngest.Alert()
        self.mslStatus = missileTrackIngest.MslStatus()
        self.ts = missileTrackIngest.Ts()
        self.aouRptType = missileTrackIngest.AouRptType()
        if not missileTrackIngest.AouRptDataIsNone():
            self.aouRptData = []
            for i in range(missileTrackIngest.AouRptDataLength()):
                self.aouRptData.append(missileTrackIngest.AouRptData(i))
        self.containment = missileTrackIngest.Containment()
        self.trkConf = missileTrackIngest.TrkConf()
        self.trkQual = missileTrackIngest.TrkQual()
        self.angElev = missileTrackIngest.AngElev()
        self.senMode = missileTrackIngest.SenMode()
        self.infoSource = missileTrackIngest.InfoSource()
        self.boosting = missileTrackIngest.Boosting()
        self.polarSingLocLat = missileTrackIngest.PolarSingLocLat()
        self.polarSingLocLon = missileTrackIngest.PolarSingLocLon()
        self.emgInd = missileTrackIngest.EmgInd()
        self.dropPtInd = missileTrackIngest.DropPtInd()
        self.spaceAmpConf = missileTrackIngest.SpaceAmpConf()
        self.launchTime = missileTrackIngest.LaunchTime()
        self.launchLat = missileTrackIngest.LaunchLat()
        self.launchLon = missileTrackIngest.LaunchLon()
        self.azCorr = missileTrackIngest.AzCorr()
        self.burnoutAlt = missileTrackIngest.BurnoutAlt()
        self.launchAouType = missileTrackIngest.LaunchAouType()
        if not missileTrackIngest.LaunchAouDataIsNone():
            self.launchAouData = []
            for i in range(missileTrackIngest.LaunchAouDataLength()):
                self.launchAouData.append(missileTrackIngest.LaunchAouData(i))
        self.impactTime = missileTrackIngest.ImpactTime()
        self.impactLat = missileTrackIngest.ImpactLat()
        self.impactLon = missileTrackIngest.ImpactLon()
        self.impactAouType = missileTrackIngest.ImpactAouType()
        if not missileTrackIngest.ImpactAouDataIsNone():
            self.impactAouData = []
            for i in range(missileTrackIngest.ImpactAouDataLength()):
                self.impactAouData.append(missileTrackIngest.ImpactAouData(i))
        if not missileTrackIngest.VectorsIsNone():
            self.vectors = []
            for i in range(missileTrackIngest.VectorsLength()):
                self.vectors.append(missileTrackIngest.Vectors(i))
        self.origNetwork = missileTrackIngest.OrigNetwork()
        self.createdAt = missileTrackIngest.CreatedAt()
        self.createdBy = missileTrackIngest.CreatedBy()
        self.source = missileTrackIngest.Source()
        self.origin = missileTrackIngest.Origin()
        self.dataMode = missileTrackIngest.DataMode()

    # MissileTrack_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.msgType is not None:
            msgType = builder.CreateString(self.msgType)
        if self.msgSubType is not None:
            msgSubType = builder.CreateString(self.msgSubType)
        if self.msgCreateDate is not None:
            msgCreateDate = builder.CreateString(self.msgCreateDate)
        if self.objType is not None:
            objType = builder.CreateString(self.objType)
        if self.objPlat is not None:
            objPlat = builder.CreateString(self.objPlat)
        if self.spaceAmp is not None:
            spaceAmp = builder.CreateString(self.spaceAmp)
        if self.objAct is not None:
            objAct = builder.CreateString(self.objAct)
        if self.spaceSpecType is not None:
            spaceSpecType = builder.CreateString(self.spaceSpecType)
        if self.acftSubType is not None:
            acftSubType = builder.CreateString(self.acftSubType)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.parentTrackId is not None:
            parentTrackId = builder.CreateString(self.parentTrackId)
        if self.muidSrcTrk is not None:
            muidSrcTrk = builder.CreateString(self.muidSrcTrk)
        if self.muidSrc is not None:
            muidSrc = builder.CreateString(self.muidSrc)
        if self.alert is not None:
            alert = builder.CreateString(self.alert)
        if self.mslStatus is not None:
            mslStatus = builder.CreateString(self.mslStatus)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.aouRptType is not None:
            aouRptType = builder.CreateString(self.aouRptType)
        if self.aouRptData is not None:
            aouRptDatalist = []
            for i in range(len(self.aouRptData)):
                aouRptDatalist.append(builder.CreateString(self.aouRptData[i]))
            MissileTrack_IngestStartAouRptDataVector(builder, len(self.aouRptData))
            for i in reversed(range(len(self.aouRptData))):
                builder.PrependUOffsetTRelative(aouRptDatalist[i])
            aouRptData = builder.EndVector()
        if self.senMode is not None:
            senMode = builder.CreateString(self.senMode)
        if self.infoSource is not None:
            infoSource = builder.CreateString(self.infoSource)
        if self.launchTime is not None:
            launchTime = builder.CreateString(self.launchTime)
        if self.launchAouType is not None:
            launchAouType = builder.CreateString(self.launchAouType)
        if self.launchAouData is not None:
            launchAouDatalist = []
            for i in range(len(self.launchAouData)):
                launchAouDatalist.append(builder.CreateString(self.launchAouData[i]))
            MissileTrack_IngestStartLaunchAouDataVector(builder, len(self.launchAouData))
            for i in reversed(range(len(self.launchAouData))):
                builder.PrependUOffsetTRelative(launchAouDatalist[i])
            launchAouData = builder.EndVector()
        if self.impactTime is not None:
            impactTime = builder.CreateString(self.impactTime)
        if self.impactAouType is not None:
            impactAouType = builder.CreateString(self.impactAouType)
        if self.impactAouData is not None:
            impactAouDatalist = []
            for i in range(len(self.impactAouData)):
                impactAouDatalist.append(builder.CreateString(self.impactAouData[i]))
            MissileTrack_IngestStartImpactAouDataVector(builder, len(self.impactAouData))
            for i in reversed(range(len(self.impactAouData))):
                builder.PrependUOffsetTRelative(impactAouDatalist[i])
            impactAouData = builder.EndVector()
        if self.vectors is not None:
            vectorslist = []
            for i in range(len(self.vectors)):
                vectorslist.append(builder.CreateString(self.vectors[i]))
            MissileTrack_IngestStartVectorsVector(builder, len(self.vectors))
            for i in reversed(range(len(self.vectors))):
                builder.PrependUOffsetTRelative(vectorslist[i])
            vectors = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        MissileTrack_IngestStart(builder)
        if self.id is not None:
            MissileTrack_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            MissileTrack_IngestAddClassificationMarking(builder, classificationMarking)
        if self.msgType is not None:
            MissileTrack_IngestAddMsgType(builder, msgType)
        if self.msgSubType is not None:
            MissileTrack_IngestAddMsgSubType(builder, msgSubType)
        if self.msgCreateDate is not None:
            MissileTrack_IngestAddMsgCreateDate(builder, msgCreateDate)
        MissileTrack_IngestAddEnv(builder, self.env)
        if self.objType is not None:
            MissileTrack_IngestAddObjType(builder, objType)
        MissileTrack_IngestAddObjTypeConf(builder, self.objTypeConf)
        if self.objPlat is not None:
            MissileTrack_IngestAddObjPlat(builder, objPlat)
        MissileTrack_IngestAddObjIdent(builder, self.objIdent)
        if self.spaceAmp is not None:
            MissileTrack_IngestAddSpaceAmp(builder, spaceAmp)
        if self.objAct is not None:
            MissileTrack_IngestAddObjAct(builder, objAct)
        if self.spaceSpecType is not None:
            MissileTrack_IngestAddSpaceSpecType(builder, spaceSpecType)
        if self.acftSubType is not None:
            MissileTrack_IngestAddAcftSubType(builder, acftSubType)
        if self.name is not None:
            MissileTrack_IngestAddName(builder, name)
        if self.callSign is not None:
            MissileTrack_IngestAddCallSign(builder, callSign)
        MissileTrack_IngestAddLostTrkInd(builder, self.lostTrkInd)
        if self.trackId is not None:
            MissileTrack_IngestAddTrackId(builder, trackId)
        if self.parentTrackId is not None:
            MissileTrack_IngestAddParentTrackId(builder, parentTrackId)
        if self.muidSrcTrk is not None:
            MissileTrack_IngestAddMuidSrcTrk(builder, muidSrcTrk)
        if self.muidSrc is not None:
            MissileTrack_IngestAddMuidSrc(builder, muidSrc)
        if self.alert is not None:
            MissileTrack_IngestAddAlert(builder, alert)
        if self.mslStatus is not None:
            MissileTrack_IngestAddMslStatus(builder, mslStatus)
        if self.ts is not None:
            MissileTrack_IngestAddTs(builder, ts)
        if self.aouRptType is not None:
            MissileTrack_IngestAddAouRptType(builder, aouRptType)
        if self.aouRptData is not None:
            MissileTrack_IngestAddAouRptData(builder, aouRptData)
        MissileTrack_IngestAddContainment(builder, self.containment)
        MissileTrack_IngestAddTrkConf(builder, self.trkConf)
        MissileTrack_IngestAddTrkQual(builder, self.trkQual)
        MissileTrack_IngestAddAngElev(builder, self.angElev)
        if self.senMode is not None:
            MissileTrack_IngestAddSenMode(builder, senMode)
        if self.infoSource is not None:
            MissileTrack_IngestAddInfoSource(builder, infoSource)
        MissileTrack_IngestAddBoosting(builder, self.boosting)
        MissileTrack_IngestAddPolarSingLocLat(builder, self.polarSingLocLat)
        MissileTrack_IngestAddPolarSingLocLon(builder, self.polarSingLocLon)
        MissileTrack_IngestAddEmgInd(builder, self.emgInd)
        MissileTrack_IngestAddDropPtInd(builder, self.dropPtInd)
        MissileTrack_IngestAddSpaceAmpConf(builder, self.spaceAmpConf)
        if self.launchTime is not None:
            MissileTrack_IngestAddLaunchTime(builder, launchTime)
        MissileTrack_IngestAddLaunchLat(builder, self.launchLat)
        MissileTrack_IngestAddLaunchLon(builder, self.launchLon)
        MissileTrack_IngestAddAzCorr(builder, self.azCorr)
        MissileTrack_IngestAddBurnoutAlt(builder, self.burnoutAlt)
        if self.launchAouType is not None:
            MissileTrack_IngestAddLaunchAouType(builder, launchAouType)
        if self.launchAouData is not None:
            MissileTrack_IngestAddLaunchAouData(builder, launchAouData)
        if self.impactTime is not None:
            MissileTrack_IngestAddImpactTime(builder, impactTime)
        MissileTrack_IngestAddImpactLat(builder, self.impactLat)
        MissileTrack_IngestAddImpactLon(builder, self.impactLon)
        if self.impactAouType is not None:
            MissileTrack_IngestAddImpactAouType(builder, impactAouType)
        if self.impactAouData is not None:
            MissileTrack_IngestAddImpactAouData(builder, impactAouData)
        if self.vectors is not None:
            MissileTrack_IngestAddVectors(builder, vectors)
        if self.origNetwork is not None:
            MissileTrack_IngestAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            MissileTrack_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            MissileTrack_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            MissileTrack_IngestAddSource(builder, source)
        if self.origin is not None:
            MissileTrack_IngestAddOrigin(builder, origin)
        MissileTrack_IngestAddDataMode(builder, self.dataMode)
        missileTrackIngest = MissileTrack_IngestEnd(builder)
        return missileTrackIngest
