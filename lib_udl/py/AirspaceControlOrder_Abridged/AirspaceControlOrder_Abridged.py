# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
class AirspaceControlOrder_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirspaceControlOrder_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirspaceControlOrder_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirspaceControlOrder_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x53", size_prefixed=size_prefixed)

    # AirspaceControlOrder_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirspaceControlOrder_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirspaceControlOrder_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: EXAMPLE URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirspaceControlOrder_Abridged
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
    # Example: /// Example: DESERT WIND
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirspaceControlOrder_Abridged
    def OpExName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originator of this reference.
    # Example: /// Example: USCENTCOM
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirspaceControlOrder_Abridged
    def Originator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-08T13:55:43.123Z
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def StopTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
    # Example: /// Example: AFTER
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlOrder_Abridged
    def StopQualifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
    # Example: /// Example: CONTROL
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirspaceControlOrder_Abridged
    def OpExInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The secondary supplementary nickname of the option or the alternative of the operational plan or order.
    # Example: /// Example: ORANGE
    # Constraints: Minimum length = 0, Maximum length = 24
    # AirspaceControlOrder_Abridged
    def OpExInfoAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
    # Example: /// Example: SACEUR 106
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirspaceControlOrder_Abridged
    def PlanOrigNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unique message identifier sequentially assigned by the originator.
    # Example: /// Example: 1201003
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceControlOrder_Abridged
    def SerialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The month in which the message originated.
    # Example: /// Example: OCT
    # Constraints: Minimum length = 0, Maximum length = 12
    # AirspaceControlOrder_Abridged
    def Month(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The qualifier which caveats the message status.
    # Example: /// Example: CHG
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlOrder_Abridged
    def Qualifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The serial number associated with the message qualifier.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def QualSn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Name of the area of the command for which the ACO is valid.
    # Example: /// Example: FORT BRAGG
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirspaceControlOrder_Abridged
    def AreaOfValidity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The serial number of this airspace control order.
    # Example: /// Example: 27B
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlOrder_Abridged
    def AcoSerialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
    # Example: /// Example: EUR-T
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlOrder_Abridged
    def GeoDatum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Free text information expressed in natural language.
    # Example: /// Example: CHOKE POINTS
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirspaceControlOrder_Abridged
    def AcoComments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def AirspaceControlOrderReferences(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlOrder_Abridged
    def AirspaceControlOrderReferencesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlOrder_Abridged
    def AirspaceControlOrderReferencesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def AirspaceControlMeansStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlOrder_Abridged
    def AirspaceControlMeansStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlOrder_Abridged
    def AirspaceControlMeansStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Collection of unique link 16 identifier that will be assigned to a future airspace control means.
    # Example: /// Example: ['A2467', 'A3466', 'AA232']
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def UndLnkTrk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlOrder_Abridged
    def UndLnkTrkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlOrder_Abridged
    def UndLnkTrkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # Markings defining the source material or the original classification authority for the ACO message.
    # Example: /// Example: ORIG:USJFCOM
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirspaceControlOrder_Abridged
    def ClassSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
    # Example: /// Example: ['15C', '10C']
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def ClassReason(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlOrder_Abridged
    def ClassReasonLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlOrder_Abridged
    def ClassReasonIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
    # Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def DowngradeInsDate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlOrder_Abridged
    def DowngradeInsDateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlOrder_Abridged
    def DowngradeInsDateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
    # Example: /// Example: ['X1', 'X2']
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def DeclassExemptionCode(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlOrder_Abridged
    def DeclassExemptionCodeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlOrder_Abridged
    def DeclassExemptionCodeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirspaceControlOrder_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirspaceControlOrder_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirspaceControlOrder_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirspaceControlOrder_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirspaceControlOrder_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirspaceControlOrder_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirspaceControlOrder_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirspaceControlOrder_AbridgedStart(builder):
    builder.StartObject(33)

def Start(builder):
    AirspaceControlOrder_AbridgedStart(builder)

def AirspaceControlOrder_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirspaceControlOrder_AbridgedAddId(builder, id)

def AirspaceControlOrder_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirspaceControlOrder_AbridgedAddClassificationMarking(builder, classificationMarking)

def AirspaceControlOrder_AbridgedAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    AirspaceControlOrder_AbridgedAddRawFileUri(builder, rawFileUri)

def AirspaceControlOrder_AbridgedAddOpExName(builder, opExName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(opExName), 0)

def AddOpExName(builder, opExName):
    AirspaceControlOrder_AbridgedAddOpExName(builder, opExName)

def AirspaceControlOrder_AbridgedAddOriginator(builder, originator):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(originator), 0)

def AddOriginator(builder, originator):
    AirspaceControlOrder_AbridgedAddOriginator(builder, originator)

def AirspaceControlOrder_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    AirspaceControlOrder_AbridgedAddStartTime(builder, startTime)

def AirspaceControlOrder_AbridgedAddStopTime(builder, stopTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(stopTime), 0)

def AddStopTime(builder, stopTime):
    AirspaceControlOrder_AbridgedAddStopTime(builder, stopTime)

def AirspaceControlOrder_AbridgedAddStopQualifier(builder, stopQualifier):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(stopQualifier), 0)

def AddStopQualifier(builder, stopQualifier):
    AirspaceControlOrder_AbridgedAddStopQualifier(builder, stopQualifier)

def AirspaceControlOrder_AbridgedAddOpExInfo(builder, opExInfo):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(opExInfo), 0)

def AddOpExInfo(builder, opExInfo):
    AirspaceControlOrder_AbridgedAddOpExInfo(builder, opExInfo)

def AirspaceControlOrder_AbridgedAddOpExInfoAlt(builder, opExInfoAlt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(opExInfoAlt), 0)

def AddOpExInfoAlt(builder, opExInfoAlt):
    AirspaceControlOrder_AbridgedAddOpExInfoAlt(builder, opExInfoAlt)

def AirspaceControlOrder_AbridgedAddPlanOrigNum(builder, planOrigNum):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(planOrigNum), 0)

def AddPlanOrigNum(builder, planOrigNum):
    AirspaceControlOrder_AbridgedAddPlanOrigNum(builder, planOrigNum)

def AirspaceControlOrder_AbridgedAddSerialNum(builder, serialNum):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(serialNum), 0)

def AddSerialNum(builder, serialNum):
    AirspaceControlOrder_AbridgedAddSerialNum(builder, serialNum)

def AirspaceControlOrder_AbridgedAddMonth(builder, month):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(month), 0)

def AddMonth(builder, month):
    AirspaceControlOrder_AbridgedAddMonth(builder, month)

def AirspaceControlOrder_AbridgedAddQualifier(builder, qualifier):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(qualifier), 0)

def AddQualifier(builder, qualifier):
    AirspaceControlOrder_AbridgedAddQualifier(builder, qualifier)

def AirspaceControlOrder_AbridgedAddQualSn(builder, qualSn):
    builder.PrependInt32Slot(14, qualSn, 0)

def AddQualSn(builder, qualSn):
    AirspaceControlOrder_AbridgedAddQualSn(builder, qualSn)

def AirspaceControlOrder_AbridgedAddAreaOfValidity(builder, areaOfValidity):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(areaOfValidity), 0)

def AddAreaOfValidity(builder, areaOfValidity):
    AirspaceControlOrder_AbridgedAddAreaOfValidity(builder, areaOfValidity)

def AirspaceControlOrder_AbridgedAddAcoSerialNum(builder, acoSerialNum):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(acoSerialNum), 0)

def AddAcoSerialNum(builder, acoSerialNum):
    AirspaceControlOrder_AbridgedAddAcoSerialNum(builder, acoSerialNum)

def AirspaceControlOrder_AbridgedAddGeoDatum(builder, geoDatum):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(geoDatum), 0)

def AddGeoDatum(builder, geoDatum):
    AirspaceControlOrder_AbridgedAddGeoDatum(builder, geoDatum)

def AirspaceControlOrder_AbridgedAddAcoComments(builder, acoComments):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(acoComments), 0)

def AddAcoComments(builder, acoComments):
    AirspaceControlOrder_AbridgedAddAcoComments(builder, acoComments)

def AirspaceControlOrder_AbridgedAddAirspaceControlOrderReferences(builder, airspaceControlOrderReferences):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(airspaceControlOrderReferences), 0)

def AddAirspaceControlOrderReferences(builder, airspaceControlOrderReferences):
    AirspaceControlOrder_AbridgedAddAirspaceControlOrderReferences(builder, airspaceControlOrderReferences)

def AirspaceControlOrder_AbridgedStartAirspaceControlOrderReferencesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAirspaceControlOrderReferencesVector(builder, numElems):
    return AirspaceControlOrder_AbridgedStartAirspaceControlOrderReferencesVector(builder, numElems)

def AirspaceControlOrder_AbridgedAddAirspaceControlMeansStatus(builder, airspaceControlMeansStatus):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(airspaceControlMeansStatus), 0)

def AddAirspaceControlMeansStatus(builder, airspaceControlMeansStatus):
    AirspaceControlOrder_AbridgedAddAirspaceControlMeansStatus(builder, airspaceControlMeansStatus)

def AirspaceControlOrder_AbridgedStartAirspaceControlMeansStatusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAirspaceControlMeansStatusVector(builder, numElems):
    return AirspaceControlOrder_AbridgedStartAirspaceControlMeansStatusVector(builder, numElems)

def AirspaceControlOrder_AbridgedAddUndLnkTrk(builder, undLnkTrk):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(undLnkTrk), 0)

def AddUndLnkTrk(builder, undLnkTrk):
    AirspaceControlOrder_AbridgedAddUndLnkTrk(builder, undLnkTrk)

def AirspaceControlOrder_AbridgedStartUndLnkTrkVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUndLnkTrkVector(builder, numElems):
    return AirspaceControlOrder_AbridgedStartUndLnkTrkVector(builder, numElems)

def AirspaceControlOrder_AbridgedAddClassSource(builder, classSource):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(classSource), 0)

def AddClassSource(builder, classSource):
    AirspaceControlOrder_AbridgedAddClassSource(builder, classSource)

def AirspaceControlOrder_AbridgedAddClassReason(builder, classReason):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(classReason), 0)

def AddClassReason(builder, classReason):
    AirspaceControlOrder_AbridgedAddClassReason(builder, classReason)

def AirspaceControlOrder_AbridgedStartClassReasonVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClassReasonVector(builder, numElems):
    return AirspaceControlOrder_AbridgedStartClassReasonVector(builder, numElems)

def AirspaceControlOrder_AbridgedAddDowngradeInsDate(builder, downgradeInsDate):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(downgradeInsDate), 0)

def AddDowngradeInsDate(builder, downgradeInsDate):
    AirspaceControlOrder_AbridgedAddDowngradeInsDate(builder, downgradeInsDate)

def AirspaceControlOrder_AbridgedStartDowngradeInsDateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDowngradeInsDateVector(builder, numElems):
    return AirspaceControlOrder_AbridgedStartDowngradeInsDateVector(builder, numElems)

def AirspaceControlOrder_AbridgedAddDeclassExemptionCode(builder, declassExemptionCode):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(declassExemptionCode), 0)

def AddDeclassExemptionCode(builder, declassExemptionCode):
    AirspaceControlOrder_AbridgedAddDeclassExemptionCode(builder, declassExemptionCode)

def AirspaceControlOrder_AbridgedStartDeclassExemptionCodeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeclassExemptionCodeVector(builder, numElems):
    return AirspaceControlOrder_AbridgedStartDeclassExemptionCodeVector(builder, numElems)

def AirspaceControlOrder_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirspaceControlOrder_AbridgedAddCreatedAt(builder, createdAt)

def AirspaceControlOrder_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirspaceControlOrder_AbridgedAddCreatedBy(builder, createdBy)

def AirspaceControlOrder_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirspaceControlOrder_AbridgedAddSourceDl(builder, sourceDl)

def AirspaceControlOrder_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirspaceControlOrder_AbridgedAddSource(builder, source)

def AirspaceControlOrder_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirspaceControlOrder_AbridgedAddOrigin(builder, origin)

def AirspaceControlOrder_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirspaceControlOrder_AbridgedAddOrigNetwork(builder, origNetwork)

def AirspaceControlOrder_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(32, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirspaceControlOrder_AbridgedAddDataMode(builder, dataMode)

def AirspaceControlOrder_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirspaceControlOrder_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AirspaceControlOrder_AbridgedT(object):

    # AirspaceControlOrder_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.rawFileUri = None  # type: str
        self.opExName = None  # type: str
        self.originator = None  # type: str
        self.startTime = None  # type: str
        self.stopTime = None  # type: str
        self.stopQualifier = None  # type: str
        self.opExInfo = None  # type: str
        self.opExInfoAlt = None  # type: str
        self.planOrigNum = None  # type: str
        self.serialNum = None  # type: str
        self.month = None  # type: str
        self.qualifier = None  # type: str
        self.qualSn = 0  # type: int
        self.areaOfValidity = None  # type: str
        self.acoSerialNum = None  # type: str
        self.geoDatum = None  # type: str
        self.acoComments = None  # type: str
        self.airspaceControlOrderReferences = None  # type: List[str]
        self.airspaceControlMeansStatus = None  # type: List[str]
        self.undLnkTrk = None  # type: List[str]
        self.classSource = None  # type: str
        self.classReason = None  # type: List[str]
        self.downgradeInsDate = None  # type: List[str]
        self.declassExemptionCode = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airspaceControlOrderAbridged = AirspaceControlOrder_Abridged()
        airspaceControlOrderAbridged.Init(buf, pos)
        return cls.InitFromObj(airspaceControlOrderAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airspaceControlOrderAbridged):
        x = AirspaceControlOrder_AbridgedT()
        x._UnPack(airspaceControlOrderAbridged)
        return x

    # AirspaceControlOrder_AbridgedT
    def _UnPack(self, airspaceControlOrderAbridged):
        if airspaceControlOrderAbridged is None:
            return
        self.id = airspaceControlOrderAbridged.Id()
        self.classificationMarking = airspaceControlOrderAbridged.ClassificationMarking()
        self.rawFileUri = airspaceControlOrderAbridged.RawFileUri()
        self.opExName = airspaceControlOrderAbridged.OpExName()
        self.originator = airspaceControlOrderAbridged.Originator()
        self.startTime = airspaceControlOrderAbridged.StartTime()
        self.stopTime = airspaceControlOrderAbridged.StopTime()
        self.stopQualifier = airspaceControlOrderAbridged.StopQualifier()
        self.opExInfo = airspaceControlOrderAbridged.OpExInfo()
        self.opExInfoAlt = airspaceControlOrderAbridged.OpExInfoAlt()
        self.planOrigNum = airspaceControlOrderAbridged.PlanOrigNum()
        self.serialNum = airspaceControlOrderAbridged.SerialNum()
        self.month = airspaceControlOrderAbridged.Month()
        self.qualifier = airspaceControlOrderAbridged.Qualifier()
        self.qualSn = airspaceControlOrderAbridged.QualSn()
        self.areaOfValidity = airspaceControlOrderAbridged.AreaOfValidity()
        self.acoSerialNum = airspaceControlOrderAbridged.AcoSerialNum()
        self.geoDatum = airspaceControlOrderAbridged.GeoDatum()
        self.acoComments = airspaceControlOrderAbridged.AcoComments()
        if not airspaceControlOrderAbridged.AirspaceControlOrderReferencesIsNone():
            self.airspaceControlOrderReferences = []
            for i in range(airspaceControlOrderAbridged.AirspaceControlOrderReferencesLength()):
                self.airspaceControlOrderReferences.append(airspaceControlOrderAbridged.AirspaceControlOrderReferences(i))
        if not airspaceControlOrderAbridged.AirspaceControlMeansStatusIsNone():
            self.airspaceControlMeansStatus = []
            for i in range(airspaceControlOrderAbridged.AirspaceControlMeansStatusLength()):
                self.airspaceControlMeansStatus.append(airspaceControlOrderAbridged.AirspaceControlMeansStatus(i))
        if not airspaceControlOrderAbridged.UndLnkTrkIsNone():
            self.undLnkTrk = []
            for i in range(airspaceControlOrderAbridged.UndLnkTrkLength()):
                self.undLnkTrk.append(airspaceControlOrderAbridged.UndLnkTrk(i))
        self.classSource = airspaceControlOrderAbridged.ClassSource()
        if not airspaceControlOrderAbridged.ClassReasonIsNone():
            self.classReason = []
            for i in range(airspaceControlOrderAbridged.ClassReasonLength()):
                self.classReason.append(airspaceControlOrderAbridged.ClassReason(i))
        if not airspaceControlOrderAbridged.DowngradeInsDateIsNone():
            self.downgradeInsDate = []
            for i in range(airspaceControlOrderAbridged.DowngradeInsDateLength()):
                self.downgradeInsDate.append(airspaceControlOrderAbridged.DowngradeInsDate(i))
        if not airspaceControlOrderAbridged.DeclassExemptionCodeIsNone():
            self.declassExemptionCode = []
            for i in range(airspaceControlOrderAbridged.DeclassExemptionCodeLength()):
                self.declassExemptionCode.append(airspaceControlOrderAbridged.DeclassExemptionCode(i))
        self.createdAt = airspaceControlOrderAbridged.CreatedAt()
        self.createdBy = airspaceControlOrderAbridged.CreatedBy()
        self.sourceDl = airspaceControlOrderAbridged.SourceDl()
        self.source = airspaceControlOrderAbridged.Source()
        self.origin = airspaceControlOrderAbridged.Origin()
        self.origNetwork = airspaceControlOrderAbridged.OrigNetwork()
        self.dataMode = airspaceControlOrderAbridged.DataMode()

    # AirspaceControlOrder_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.opExName is not None:
            opExName = builder.CreateString(self.opExName)
        if self.originator is not None:
            originator = builder.CreateString(self.originator)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.stopTime is not None:
            stopTime = builder.CreateString(self.stopTime)
        if self.stopQualifier is not None:
            stopQualifier = builder.CreateString(self.stopQualifier)
        if self.opExInfo is not None:
            opExInfo = builder.CreateString(self.opExInfo)
        if self.opExInfoAlt is not None:
            opExInfoAlt = builder.CreateString(self.opExInfoAlt)
        if self.planOrigNum is not None:
            planOrigNum = builder.CreateString(self.planOrigNum)
        if self.serialNum is not None:
            serialNum = builder.CreateString(self.serialNum)
        if self.month is not None:
            month = builder.CreateString(self.month)
        if self.qualifier is not None:
            qualifier = builder.CreateString(self.qualifier)
        if self.areaOfValidity is not None:
            areaOfValidity = builder.CreateString(self.areaOfValidity)
        if self.acoSerialNum is not None:
            acoSerialNum = builder.CreateString(self.acoSerialNum)
        if self.geoDatum is not None:
            geoDatum = builder.CreateString(self.geoDatum)
        if self.acoComments is not None:
            acoComments = builder.CreateString(self.acoComments)
        if self.airspaceControlOrderReferences is not None:
            airspaceControlOrderReferenceslist = []
            for i in range(len(self.airspaceControlOrderReferences)):
                airspaceControlOrderReferenceslist.append(builder.CreateString(self.airspaceControlOrderReferences[i]))
            AirspaceControlOrder_AbridgedStartAirspaceControlOrderReferencesVector(builder, len(self.airspaceControlOrderReferences))
            for i in reversed(range(len(self.airspaceControlOrderReferences))):
                builder.PrependUOffsetTRelative(airspaceControlOrderReferenceslist[i])
            airspaceControlOrderReferences = builder.EndVector()
        if self.airspaceControlMeansStatus is not None:
            airspaceControlMeansStatuslist = []
            for i in range(len(self.airspaceControlMeansStatus)):
                airspaceControlMeansStatuslist.append(builder.CreateString(self.airspaceControlMeansStatus[i]))
            AirspaceControlOrder_AbridgedStartAirspaceControlMeansStatusVector(builder, len(self.airspaceControlMeansStatus))
            for i in reversed(range(len(self.airspaceControlMeansStatus))):
                builder.PrependUOffsetTRelative(airspaceControlMeansStatuslist[i])
            airspaceControlMeansStatus = builder.EndVector()
        if self.undLnkTrk is not None:
            undLnkTrklist = []
            for i in range(len(self.undLnkTrk)):
                undLnkTrklist.append(builder.CreateString(self.undLnkTrk[i]))
            AirspaceControlOrder_AbridgedStartUndLnkTrkVector(builder, len(self.undLnkTrk))
            for i in reversed(range(len(self.undLnkTrk))):
                builder.PrependUOffsetTRelative(undLnkTrklist[i])
            undLnkTrk = builder.EndVector()
        if self.classSource is not None:
            classSource = builder.CreateString(self.classSource)
        if self.classReason is not None:
            classReasonlist = []
            for i in range(len(self.classReason)):
                classReasonlist.append(builder.CreateString(self.classReason[i]))
            AirspaceControlOrder_AbridgedStartClassReasonVector(builder, len(self.classReason))
            for i in reversed(range(len(self.classReason))):
                builder.PrependUOffsetTRelative(classReasonlist[i])
            classReason = builder.EndVector()
        if self.downgradeInsDate is not None:
            downgradeInsDatelist = []
            for i in range(len(self.downgradeInsDate)):
                downgradeInsDatelist.append(builder.CreateString(self.downgradeInsDate[i]))
            AirspaceControlOrder_AbridgedStartDowngradeInsDateVector(builder, len(self.downgradeInsDate))
            for i in reversed(range(len(self.downgradeInsDate))):
                builder.PrependUOffsetTRelative(downgradeInsDatelist[i])
            downgradeInsDate = builder.EndVector()
        if self.declassExemptionCode is not None:
            declassExemptionCodelist = []
            for i in range(len(self.declassExemptionCode)):
                declassExemptionCodelist.append(builder.CreateString(self.declassExemptionCode[i]))
            AirspaceControlOrder_AbridgedStartDeclassExemptionCodeVector(builder, len(self.declassExemptionCode))
            for i in reversed(range(len(self.declassExemptionCode))):
                builder.PrependUOffsetTRelative(declassExemptionCodelist[i])
            declassExemptionCode = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirspaceControlOrder_AbridgedStart(builder)
        if self.id is not None:
            AirspaceControlOrder_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AirspaceControlOrder_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.rawFileUri is not None:
            AirspaceControlOrder_AbridgedAddRawFileUri(builder, rawFileUri)
        if self.opExName is not None:
            AirspaceControlOrder_AbridgedAddOpExName(builder, opExName)
        if self.originator is not None:
            AirspaceControlOrder_AbridgedAddOriginator(builder, originator)
        if self.startTime is not None:
            AirspaceControlOrder_AbridgedAddStartTime(builder, startTime)
        if self.stopTime is not None:
            AirspaceControlOrder_AbridgedAddStopTime(builder, stopTime)
        if self.stopQualifier is not None:
            AirspaceControlOrder_AbridgedAddStopQualifier(builder, stopQualifier)
        if self.opExInfo is not None:
            AirspaceControlOrder_AbridgedAddOpExInfo(builder, opExInfo)
        if self.opExInfoAlt is not None:
            AirspaceControlOrder_AbridgedAddOpExInfoAlt(builder, opExInfoAlt)
        if self.planOrigNum is not None:
            AirspaceControlOrder_AbridgedAddPlanOrigNum(builder, planOrigNum)
        if self.serialNum is not None:
            AirspaceControlOrder_AbridgedAddSerialNum(builder, serialNum)
        if self.month is not None:
            AirspaceControlOrder_AbridgedAddMonth(builder, month)
        if self.qualifier is not None:
            AirspaceControlOrder_AbridgedAddQualifier(builder, qualifier)
        AirspaceControlOrder_AbridgedAddQualSn(builder, self.qualSn)
        if self.areaOfValidity is not None:
            AirspaceControlOrder_AbridgedAddAreaOfValidity(builder, areaOfValidity)
        if self.acoSerialNum is not None:
            AirspaceControlOrder_AbridgedAddAcoSerialNum(builder, acoSerialNum)
        if self.geoDatum is not None:
            AirspaceControlOrder_AbridgedAddGeoDatum(builder, geoDatum)
        if self.acoComments is not None:
            AirspaceControlOrder_AbridgedAddAcoComments(builder, acoComments)
        if self.airspaceControlOrderReferences is not None:
            AirspaceControlOrder_AbridgedAddAirspaceControlOrderReferences(builder, airspaceControlOrderReferences)
        if self.airspaceControlMeansStatus is not None:
            AirspaceControlOrder_AbridgedAddAirspaceControlMeansStatus(builder, airspaceControlMeansStatus)
        if self.undLnkTrk is not None:
            AirspaceControlOrder_AbridgedAddUndLnkTrk(builder, undLnkTrk)
        if self.classSource is not None:
            AirspaceControlOrder_AbridgedAddClassSource(builder, classSource)
        if self.classReason is not None:
            AirspaceControlOrder_AbridgedAddClassReason(builder, classReason)
        if self.downgradeInsDate is not None:
            AirspaceControlOrder_AbridgedAddDowngradeInsDate(builder, downgradeInsDate)
        if self.declassExemptionCode is not None:
            AirspaceControlOrder_AbridgedAddDeclassExemptionCode(builder, declassExemptionCode)
        if self.createdAt is not None:
            AirspaceControlOrder_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirspaceControlOrder_AbridgedAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            AirspaceControlOrder_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirspaceControlOrder_AbridgedAddSource(builder, source)
        if self.origin is not None:
            AirspaceControlOrder_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirspaceControlOrder_AbridgedAddOrigNetwork(builder, origNetwork)
        AirspaceControlOrder_AbridgedAddDataMode(builder, self.dataMode)
        airspaceControlOrderAbridged = AirspaceControlOrder_AbridgedEnd(builder)
        return airspaceControlOrderAbridged
