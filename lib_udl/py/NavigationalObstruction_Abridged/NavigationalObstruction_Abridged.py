# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
class NavigationalObstruction_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NavigationalObstruction_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNavigationalObstruction_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NavigationalObstruction_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4E\x41\x56\x49", size_prefixed=size_prefixed)

    # NavigationalObstruction_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # NavigationalObstruction_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # NavigationalObstruction_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start date of this obstruction data set's currency, in ISO 8601 date-only format.
    # Example: /// Example: 2024-06-13
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def CycleDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of obstacle (e.g. P for point, V for vector, L for line).
    # Example: /// Example: V
    # Constraints: Minimum length = 1, Maximum length = 1
    # NavigationalObstruction_Abridged
    def ObstacleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of this obstacle.
    # Example: /// Example: 359655
    # Constraints: Minimum length = 1, Maximum length = 32
    # NavigationalObstruction_Abridged
    def ObstacleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: OU812
    # Constraints: Minimum length = 0, Maximum length = 32
    # NavigationalObstruction_Abridged
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The original ID for this obstacle.
    # Example: /// Example: L0000002289
    # Constraints: Minimum length = 0, Maximum length = 36
    # NavigationalObstruction_Abridged
    def OrigId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
    # Example: /// Example: 23
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def ProvinceCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 46.757211
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def PointLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -67.759494
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def PointLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -122.197891
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def LineNelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 49.000584
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def LineNelat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -122.722946
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def LineSwlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 48.507027
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def LineSwlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ID of the starting point of a line segment.
    # Example: /// Example: 359655
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def SegStartPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ID of the end point of a line segment.
    # Example: /// Example: 359655
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def SegEndPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Identifies the sequence number of a line segment.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def SegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
    # Example: /// Example: AT040
    # Constraints: Minimum length = 0, Maximum length = 5
    # NavigationalObstruction_Abridged
    def Facc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifying code for the type of this point obstacle.
    # Example: /// Example: 540
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def FeatureCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifying code for the type of this point obstacle.
    # Example: /// Example: 540
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def FeatureType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type name of point obstacle.
    # Example: /// Example: PYLON
    # Constraints: Minimum length = 0, Maximum length = 64
    # NavigationalObstruction_Abridged
    def FeatureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
    # Example: /// Example: Powerline Pylon, General
    # Constraints: Minimum length = 0, Maximum length = 64
    # NavigationalObstruction_Abridged
    def FeatureDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
    # Example: /// Example: 262
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def Wac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This obstacle's World Area Code installation number (WAC-INNR).
    # Example: /// Example: 0409-00039
    # Constraints: Minimum length = 0, Maximum length = 32
    # NavigationalObstruction_Abridged
    def WacInnr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
    # Example: /// Example: S
    # Constraints: Minimum length = 0, Maximum length = 1
    # NavigationalObstruction_Abridged
    def MultObs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the number of obstructions associated with a feature.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def NumObs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
    # Example: /// Example: WGS-84
    # Constraints: Minimum length = 0, Maximum length = 8
    # NavigationalObstruction_Abridged
    def HorizDatumCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The height Above Ground Level (AGL) of the point obstacle in feet.
    # Example: /// Example: 314.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def HeightAgl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
    # Example: /// Example: 30.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def HeightAglacc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
    # Example: /// Example: 1154.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def HeightMsl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
    # Example: /// Example: 34.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def HeightMslacc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The elevation at the point obstacle's location in feet.
    # Example: /// Example: 840.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The difference between the assigned elevation of this point and its true elevation, in feet.
    # Example: /// Example: 17.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def ElevationAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
    # Example: /// Example: 8.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def HorizAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
    # Example: /// Example: 0
    # Constraints: Minimum length = 0, Maximum length = 1
    # NavigationalObstruction_Abridged
    def Quality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
    # Example: /// Example: U
    # Constraints: Minimum length = 0, Maximum length = 1
    # NavigationalObstruction_Abridged
    def LightingCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface material composition code of this point obstacle.
    # Example: /// Example: U
    # Constraints: Minimum length = 0, Maximum length = 1
    # NavigationalObstruction_Abridged
    def SurfaceMatCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The side or sides of this obstruction feature which produces the greatest reflectivity potential.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def DirectivityCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Method used to confirm the existence of this obstacle.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def ValidationCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
    # Example: /// Example: V
    # Constraints: Minimum length = 0, Maximum length = 1
    # NavigationalObstruction_Abridged
    def TransactionCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Code denoting the action, review, or process that updated this obstacle.
    # Example: /// Example: OT
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def ProcessCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates if this obstacle record is Active (A) or Deleted (D).
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 1
    # NavigationalObstruction_Abridged
    def ActDelCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the agency that produced this obstruction data set.
    # Example: /// Example: ACME
    # Constraints: Minimum length = 0, Maximum length = 128
    # NavigationalObstruction_Abridged
    def Producer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The organization that entered obstacle data other than the producer.
    # Example: /// Example: ACME
    # Constraints: Minimum length = 0, Maximum length = 64
    # NavigationalObstruction_Abridged
    def DerivingOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The organization that deleted this obstacle record.
    # Example: /// Example: ACME
    # Constraints: Minimum length = 0, Maximum length = 64
    # NavigationalObstruction_Abridged
    def DeletingOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    # Example: /// Example: 2016-04-01
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def SourceDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    # Example: /// Example: 2020-02-26
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def RevDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    # Example: /// Example: 1991-03-28
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def InitRecordDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
    # Example: /// Example: ['key1', 'key2']
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def Keys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NavigationalObstruction_Abridged
    def KeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NavigationalObstruction_Abridged
    def KeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        return o == 0

    # This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    # Example: /// Example: ['value1', 'value2']
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NavigationalObstruction_Abridged
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NavigationalObstruction_Abridged
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        return o == 0

    # Remarks regarding this obstacle.
    # Example: /// Example: Obstacle remarks
    # Constraints: Minimum length = 0, Maximum length = 512
    # NavigationalObstruction_Abridged
    def ObstacleRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    # Example: /// Example: 2024-07-11
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def NextCycleDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
    # Example: /// Example: 2024-04-23
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def BaselineCutoffDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    # Example: /// Example: 2024-05-21
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def CutoffDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
    # Example: /// Example: 2406
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def AiracCycle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
    # Example: /// Example: 2405
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def BaseAiracCycle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # NavigationalObstruction_Abridged
    def OwnerCountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 99.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def BoundNelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 29.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def BoundNelat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -144.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def BoundSwlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: -44.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def BoundSwlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
    # Example: /// Example: 20.1
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def MinHeightAgl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of point features associated with this obstruction data set.
    # Example: /// Example: 21830590
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def NumPoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of line features associated with this obstruction data set.
    # Example: /// Example: 45993
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def NumLines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Remarks concerning this obstruction's data set.
    # Example: /// Example: Data set remarks
    # Constraints: Minimum length = 0, Maximum length = 512
    # NavigationalObstruction_Abridged
    def DataSetRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the point file associated with this obstruction data set.
    # Example: /// Example: points.txt
    # Constraints: Minimum length = 0, Maximum length = 256
    # NavigationalObstruction_Abridged
    def PointsFilename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the line file associated with this obstruction data set.
    # Example: /// Example: lines.txt
    # Constraints: Minimum length = 0, Maximum length = 256
    # NavigationalObstruction_Abridged
    def LinesFilename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the vector file associated with this obstruction data set.
    # Example: /// Example: vectors.txt
    # Constraints: Minimum length = 0, Maximum length = 256
    # NavigationalObstruction_Abridged
    def VectorsFilename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # NavigationalObstruction_Abridged
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # NavigationalObstruction_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # NavigationalObstruction_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # NavigationalObstruction_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # NavigationalObstruction_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # NavigationalObstruction_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # NavigationalObstruction_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # NavigationalObstruction_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def NavigationalObstruction_AbridgedStart(builder):
    builder.StartObject(77)

def Start(builder):
    NavigationalObstruction_AbridgedStart(builder)

def NavigationalObstruction_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    NavigationalObstruction_AbridgedAddId(builder, id)

def NavigationalObstruction_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    NavigationalObstruction_AbridgedAddClassificationMarking(builder, classificationMarking)

def NavigationalObstruction_AbridgedAddCycleDate(builder, cycleDate):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cycleDate), 0)

def AddCycleDate(builder, cycleDate):
    NavigationalObstruction_AbridgedAddCycleDate(builder, cycleDate)

def NavigationalObstruction_AbridgedAddObstacleType(builder, obstacleType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(obstacleType), 0)

def AddObstacleType(builder, obstacleType):
    NavigationalObstruction_AbridgedAddObstacleType(builder, obstacleType)

def NavigationalObstruction_AbridgedAddObstacleId(builder, obstacleId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(obstacleId), 0)

def AddObstacleId(builder, obstacleId):
    NavigationalObstruction_AbridgedAddObstacleId(builder, obstacleId)

def NavigationalObstruction_AbridgedAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    NavigationalObstruction_AbridgedAddExternalId(builder, externalId)

def NavigationalObstruction_AbridgedAddOrigId(builder, origId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origId), 0)

def AddOrigId(builder, origId):
    NavigationalObstruction_AbridgedAddOrigId(builder, origId)

def NavigationalObstruction_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    NavigationalObstruction_AbridgedAddCountryCode(builder, countryCode)

def NavigationalObstruction_AbridgedAddProvinceCode(builder, provinceCode):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(provinceCode), 0)

def AddProvinceCode(builder, provinceCode):
    NavigationalObstruction_AbridgedAddProvinceCode(builder, provinceCode)

def NavigationalObstruction_AbridgedAddPointLat(builder, pointLat):
    builder.PrependFloat64Slot(9, pointLat, 0.0)

def AddPointLat(builder, pointLat):
    NavigationalObstruction_AbridgedAddPointLat(builder, pointLat)

def NavigationalObstruction_AbridgedAddPointLon(builder, pointLon):
    builder.PrependFloat64Slot(10, pointLon, 0.0)

def AddPointLon(builder, pointLon):
    NavigationalObstruction_AbridgedAddPointLon(builder, pointLon)

def NavigationalObstruction_AbridgedAddLineNelon(builder, lineNelon):
    builder.PrependFloat64Slot(11, lineNelon, 0.0)

def AddLineNelon(builder, lineNelon):
    NavigationalObstruction_AbridgedAddLineNelon(builder, lineNelon)

def NavigationalObstruction_AbridgedAddLineNelat(builder, lineNelat):
    builder.PrependFloat64Slot(12, lineNelat, 0.0)

def AddLineNelat(builder, lineNelat):
    NavigationalObstruction_AbridgedAddLineNelat(builder, lineNelat)

def NavigationalObstruction_AbridgedAddLineSwlon(builder, lineSwlon):
    builder.PrependFloat64Slot(13, lineSwlon, 0.0)

def AddLineSwlon(builder, lineSwlon):
    NavigationalObstruction_AbridgedAddLineSwlon(builder, lineSwlon)

def NavigationalObstruction_AbridgedAddLineSwlat(builder, lineSwlat):
    builder.PrependFloat64Slot(14, lineSwlat, 0.0)

def AddLineSwlat(builder, lineSwlat):
    NavigationalObstruction_AbridgedAddLineSwlat(builder, lineSwlat)

def NavigationalObstruction_AbridgedAddSegStartPoint(builder, segStartPoint):
    builder.PrependInt32Slot(15, segStartPoint, 0)

def AddSegStartPoint(builder, segStartPoint):
    NavigationalObstruction_AbridgedAddSegStartPoint(builder, segStartPoint)

def NavigationalObstruction_AbridgedAddSegEndPoint(builder, segEndPoint):
    builder.PrependInt32Slot(16, segEndPoint, 0)

def AddSegEndPoint(builder, segEndPoint):
    NavigationalObstruction_AbridgedAddSegEndPoint(builder, segEndPoint)

def NavigationalObstruction_AbridgedAddSegNum(builder, segNum):
    builder.PrependInt32Slot(17, segNum, 0)

def AddSegNum(builder, segNum):
    NavigationalObstruction_AbridgedAddSegNum(builder, segNum)

def NavigationalObstruction_AbridgedAddFacc(builder, facc):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(facc), 0)

def AddFacc(builder, facc):
    NavigationalObstruction_AbridgedAddFacc(builder, facc)

def NavigationalObstruction_AbridgedAddFeatureCode(builder, featureCode):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(featureCode), 0)

def AddFeatureCode(builder, featureCode):
    NavigationalObstruction_AbridgedAddFeatureCode(builder, featureCode)

def NavigationalObstruction_AbridgedAddFeatureType(builder, featureType):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(featureType), 0)

def AddFeatureType(builder, featureType):
    NavigationalObstruction_AbridgedAddFeatureType(builder, featureType)

def NavigationalObstruction_AbridgedAddFeatureName(builder, featureName):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(featureName), 0)

def AddFeatureName(builder, featureName):
    NavigationalObstruction_AbridgedAddFeatureName(builder, featureName)

def NavigationalObstruction_AbridgedAddFeatureDescription(builder, featureDescription):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(featureDescription), 0)

def AddFeatureDescription(builder, featureDescription):
    NavigationalObstruction_AbridgedAddFeatureDescription(builder, featureDescription)

def NavigationalObstruction_AbridgedAddWac(builder, wac):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(wac), 0)

def AddWac(builder, wac):
    NavigationalObstruction_AbridgedAddWac(builder, wac)

def NavigationalObstruction_AbridgedAddWacInnr(builder, wacInnr):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(wacInnr), 0)

def AddWacInnr(builder, wacInnr):
    NavigationalObstruction_AbridgedAddWacInnr(builder, wacInnr)

def NavigationalObstruction_AbridgedAddMultObs(builder, multObs):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(multObs), 0)

def AddMultObs(builder, multObs):
    NavigationalObstruction_AbridgedAddMultObs(builder, multObs)

def NavigationalObstruction_AbridgedAddNumObs(builder, numObs):
    builder.PrependInt32Slot(26, numObs, 0)

def AddNumObs(builder, numObs):
    NavigationalObstruction_AbridgedAddNumObs(builder, numObs)

def NavigationalObstruction_AbridgedAddHorizDatumCode(builder, horizDatumCode):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(horizDatumCode), 0)

def AddHorizDatumCode(builder, horizDatumCode):
    NavigationalObstruction_AbridgedAddHorizDatumCode(builder, horizDatumCode)

def NavigationalObstruction_AbridgedAddHeightAgl(builder, heightAgl):
    builder.PrependFloat64Slot(28, heightAgl, 0.0)

def AddHeightAgl(builder, heightAgl):
    NavigationalObstruction_AbridgedAddHeightAgl(builder, heightAgl)

def NavigationalObstruction_AbridgedAddHeightAglacc(builder, heightAglacc):
    builder.PrependFloat64Slot(29, heightAglacc, 0.0)

def AddHeightAglacc(builder, heightAglacc):
    NavigationalObstruction_AbridgedAddHeightAglacc(builder, heightAglacc)

def NavigationalObstruction_AbridgedAddHeightMsl(builder, heightMsl):
    builder.PrependFloat64Slot(30, heightMsl, 0.0)

def AddHeightMsl(builder, heightMsl):
    NavigationalObstruction_AbridgedAddHeightMsl(builder, heightMsl)

def NavigationalObstruction_AbridgedAddHeightMslacc(builder, heightMslacc):
    builder.PrependFloat64Slot(31, heightMslacc, 0.0)

def AddHeightMslacc(builder, heightMslacc):
    NavigationalObstruction_AbridgedAddHeightMslacc(builder, heightMslacc)

def NavigationalObstruction_AbridgedAddElevation(builder, elevation):
    builder.PrependFloat64Slot(32, elevation, 0.0)

def AddElevation(builder, elevation):
    NavigationalObstruction_AbridgedAddElevation(builder, elevation)

def NavigationalObstruction_AbridgedAddElevationAcc(builder, elevationAcc):
    builder.PrependFloat64Slot(33, elevationAcc, 0.0)

def AddElevationAcc(builder, elevationAcc):
    NavigationalObstruction_AbridgedAddElevationAcc(builder, elevationAcc)

def NavigationalObstruction_AbridgedAddHorizAcc(builder, horizAcc):
    builder.PrependFloat64Slot(34, horizAcc, 0.0)

def AddHorizAcc(builder, horizAcc):
    NavigationalObstruction_AbridgedAddHorizAcc(builder, horizAcc)

def NavigationalObstruction_AbridgedAddQuality(builder, quality):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(quality), 0)

def AddQuality(builder, quality):
    NavigationalObstruction_AbridgedAddQuality(builder, quality)

def NavigationalObstruction_AbridgedAddLightingCode(builder, lightingCode):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(lightingCode), 0)

def AddLightingCode(builder, lightingCode):
    NavigationalObstruction_AbridgedAddLightingCode(builder, lightingCode)

def NavigationalObstruction_AbridgedAddSurfaceMatCode(builder, surfaceMatCode):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(surfaceMatCode), 0)

def AddSurfaceMatCode(builder, surfaceMatCode):
    NavigationalObstruction_AbridgedAddSurfaceMatCode(builder, surfaceMatCode)

def NavigationalObstruction_AbridgedAddDirectivityCode(builder, directivityCode):
    builder.PrependInt32Slot(38, directivityCode, 0)

def AddDirectivityCode(builder, directivityCode):
    NavigationalObstruction_AbridgedAddDirectivityCode(builder, directivityCode)

def NavigationalObstruction_AbridgedAddValidationCode(builder, validationCode):
    builder.PrependInt32Slot(39, validationCode, 0)

def AddValidationCode(builder, validationCode):
    NavigationalObstruction_AbridgedAddValidationCode(builder, validationCode)

def NavigationalObstruction_AbridgedAddTransactionCode(builder, transactionCode):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(transactionCode), 0)

def AddTransactionCode(builder, transactionCode):
    NavigationalObstruction_AbridgedAddTransactionCode(builder, transactionCode)

def NavigationalObstruction_AbridgedAddProcessCode(builder, processCode):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(processCode), 0)

def AddProcessCode(builder, processCode):
    NavigationalObstruction_AbridgedAddProcessCode(builder, processCode)

def NavigationalObstruction_AbridgedAddActDelCode(builder, actDelCode):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(actDelCode), 0)

def AddActDelCode(builder, actDelCode):
    NavigationalObstruction_AbridgedAddActDelCode(builder, actDelCode)

def NavigationalObstruction_AbridgedAddProducer(builder, producer):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(producer), 0)

def AddProducer(builder, producer):
    NavigationalObstruction_AbridgedAddProducer(builder, producer)

def NavigationalObstruction_AbridgedAddDerivingOrg(builder, derivingOrg):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(derivingOrg), 0)

def AddDerivingOrg(builder, derivingOrg):
    NavigationalObstruction_AbridgedAddDerivingOrg(builder, derivingOrg)

def NavigationalObstruction_AbridgedAddDeletingOrg(builder, deletingOrg):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(deletingOrg), 0)

def AddDeletingOrg(builder, deletingOrg):
    NavigationalObstruction_AbridgedAddDeletingOrg(builder, deletingOrg)

def NavigationalObstruction_AbridgedAddSourceDate(builder, sourceDate):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDate), 0)

def AddSourceDate(builder, sourceDate):
    NavigationalObstruction_AbridgedAddSourceDate(builder, sourceDate)

def NavigationalObstruction_AbridgedAddRevDate(builder, revDate):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(revDate), 0)

def AddRevDate(builder, revDate):
    NavigationalObstruction_AbridgedAddRevDate(builder, revDate)

def NavigationalObstruction_AbridgedAddInitRecordDate(builder, initRecordDate):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(initRecordDate), 0)

def AddInitRecordDate(builder, initRecordDate):
    NavigationalObstruction_AbridgedAddInitRecordDate(builder, initRecordDate)

def NavigationalObstruction_AbridgedAddKeys(builder, keys):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(keys), 0)

def AddKeys(builder, keys):
    NavigationalObstruction_AbridgedAddKeys(builder, keys)

def NavigationalObstruction_AbridgedStartKeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKeysVector(builder, numElems):
    return NavigationalObstruction_AbridgedStartKeysVector(builder, numElems)

def NavigationalObstruction_AbridgedAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    NavigationalObstruction_AbridgedAddValues(builder, values)

def NavigationalObstruction_AbridgedStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems):
    return NavigationalObstruction_AbridgedStartValuesVector(builder, numElems)

def NavigationalObstruction_AbridgedAddObstacleRemarks(builder, obstacleRemarks):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(obstacleRemarks), 0)

def AddObstacleRemarks(builder, obstacleRemarks):
    NavigationalObstruction_AbridgedAddObstacleRemarks(builder, obstacleRemarks)

def NavigationalObstruction_AbridgedAddNextCycleDate(builder, nextCycleDate):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(nextCycleDate), 0)

def AddNextCycleDate(builder, nextCycleDate):
    NavigationalObstruction_AbridgedAddNextCycleDate(builder, nextCycleDate)

def NavigationalObstruction_AbridgedAddBaselineCutoffDate(builder, baselineCutoffDate):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(baselineCutoffDate), 0)

def AddBaselineCutoffDate(builder, baselineCutoffDate):
    NavigationalObstruction_AbridgedAddBaselineCutoffDate(builder, baselineCutoffDate)

def NavigationalObstruction_AbridgedAddCutoffDate(builder, cutoffDate):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(cutoffDate), 0)

def AddCutoffDate(builder, cutoffDate):
    NavigationalObstruction_AbridgedAddCutoffDate(builder, cutoffDate)

def NavigationalObstruction_AbridgedAddAiracCycle(builder, airacCycle):
    builder.PrependInt32Slot(55, airacCycle, 0)

def AddAiracCycle(builder, airacCycle):
    NavigationalObstruction_AbridgedAddAiracCycle(builder, airacCycle)

def NavigationalObstruction_AbridgedAddBaseAiracCycle(builder, baseAiracCycle):
    builder.PrependInt32Slot(56, baseAiracCycle, 0)

def AddBaseAiracCycle(builder, baseAiracCycle):
    NavigationalObstruction_AbridgedAddBaseAiracCycle(builder, baseAiracCycle)

def NavigationalObstruction_AbridgedAddOwnerCountryCode(builder, ownerCountryCode):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(ownerCountryCode), 0)

def AddOwnerCountryCode(builder, ownerCountryCode):
    NavigationalObstruction_AbridgedAddOwnerCountryCode(builder, ownerCountryCode)

def NavigationalObstruction_AbridgedAddBoundNelon(builder, boundNelon):
    builder.PrependFloat64Slot(58, boundNelon, 0.0)

def AddBoundNelon(builder, boundNelon):
    NavigationalObstruction_AbridgedAddBoundNelon(builder, boundNelon)

def NavigationalObstruction_AbridgedAddBoundNelat(builder, boundNelat):
    builder.PrependFloat64Slot(59, boundNelat, 0.0)

def AddBoundNelat(builder, boundNelat):
    NavigationalObstruction_AbridgedAddBoundNelat(builder, boundNelat)

def NavigationalObstruction_AbridgedAddBoundSwlon(builder, boundSwlon):
    builder.PrependFloat64Slot(60, boundSwlon, 0.0)

def AddBoundSwlon(builder, boundSwlon):
    NavigationalObstruction_AbridgedAddBoundSwlon(builder, boundSwlon)

def NavigationalObstruction_AbridgedAddBoundSwlat(builder, boundSwlat):
    builder.PrependFloat64Slot(61, boundSwlat, 0.0)

def AddBoundSwlat(builder, boundSwlat):
    NavigationalObstruction_AbridgedAddBoundSwlat(builder, boundSwlat)

def NavigationalObstruction_AbridgedAddMinHeightAgl(builder, minHeightAgl):
    builder.PrependFloat64Slot(62, minHeightAgl, 0.0)

def AddMinHeightAgl(builder, minHeightAgl):
    NavigationalObstruction_AbridgedAddMinHeightAgl(builder, minHeightAgl)

def NavigationalObstruction_AbridgedAddNumPoints(builder, numPoints):
    builder.PrependInt32Slot(63, numPoints, 0)

def AddNumPoints(builder, numPoints):
    NavigationalObstruction_AbridgedAddNumPoints(builder, numPoints)

def NavigationalObstruction_AbridgedAddNumLines(builder, numLines):
    builder.PrependInt32Slot(64, numLines, 0)

def AddNumLines(builder, numLines):
    NavigationalObstruction_AbridgedAddNumLines(builder, numLines)

def NavigationalObstruction_AbridgedAddDataSetRemarks(builder, dataSetRemarks):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(dataSetRemarks), 0)

def AddDataSetRemarks(builder, dataSetRemarks):
    NavigationalObstruction_AbridgedAddDataSetRemarks(builder, dataSetRemarks)

def NavigationalObstruction_AbridgedAddPointsFilename(builder, pointsFilename):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(pointsFilename), 0)

def AddPointsFilename(builder, pointsFilename):
    NavigationalObstruction_AbridgedAddPointsFilename(builder, pointsFilename)

def NavigationalObstruction_AbridgedAddLinesFilename(builder, linesFilename):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(linesFilename), 0)

def AddLinesFilename(builder, linesFilename):
    NavigationalObstruction_AbridgedAddLinesFilename(builder, linesFilename)

def NavigationalObstruction_AbridgedAddVectorsFilename(builder, vectorsFilename):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(vectorsFilename), 0)

def AddVectorsFilename(builder, vectorsFilename):
    NavigationalObstruction_AbridgedAddVectorsFilename(builder, vectorsFilename)

def NavigationalObstruction_AbridgedAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    NavigationalObstruction_AbridgedAddRawFileUri(builder, rawFileUri)

def NavigationalObstruction_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    NavigationalObstruction_AbridgedAddCreatedAt(builder, createdAt)

def NavigationalObstruction_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    NavigationalObstruction_AbridgedAddCreatedBy(builder, createdBy)

def NavigationalObstruction_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    NavigationalObstruction_AbridgedAddSourceDl(builder, sourceDl)

def NavigationalObstruction_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    NavigationalObstruction_AbridgedAddSource(builder, source)

def NavigationalObstruction_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    NavigationalObstruction_AbridgedAddOrigin(builder, origin)

def NavigationalObstruction_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    NavigationalObstruction_AbridgedAddOrigNetwork(builder, origNetwork)

def NavigationalObstruction_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(76, dataMode, 0)

def AddDataMode(builder, dataMode):
    NavigationalObstruction_AbridgedAddDataMode(builder, dataMode)

def NavigationalObstruction_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return NavigationalObstruction_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class NavigationalObstruction_AbridgedT(object):

    # NavigationalObstruction_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.cycleDate = None  # type: str
        self.obstacleType = None  # type: str
        self.obstacleId = None  # type: str
        self.externalId = None  # type: str
        self.origId = None  # type: str
        self.countryCode = None  # type: str
        self.provinceCode = None  # type: str
        self.pointLat = 0.0  # type: float
        self.pointLon = 0.0  # type: float
        self.lineNelon = 0.0  # type: float
        self.lineNelat = 0.0  # type: float
        self.lineSwlon = 0.0  # type: float
        self.lineSwlat = 0.0  # type: float
        self.segStartPoint = 0  # type: int
        self.segEndPoint = 0  # type: int
        self.segNum = 0  # type: int
        self.facc = None  # type: str
        self.featureCode = None  # type: str
        self.featureType = None  # type: str
        self.featureName = None  # type: str
        self.featureDescription = None  # type: str
        self.wac = None  # type: str
        self.wacInnr = None  # type: str
        self.multObs = None  # type: str
        self.numObs = 0  # type: int
        self.horizDatumCode = None  # type: str
        self.heightAgl = 0.0  # type: float
        self.heightAglacc = 0.0  # type: float
        self.heightMsl = 0.0  # type: float
        self.heightMslacc = 0.0  # type: float
        self.elevation = 0.0  # type: float
        self.elevationAcc = 0.0  # type: float
        self.horizAcc = 0.0  # type: float
        self.quality = None  # type: str
        self.lightingCode = None  # type: str
        self.surfaceMatCode = None  # type: str
        self.directivityCode = 0  # type: int
        self.validationCode = 0  # type: int
        self.transactionCode = None  # type: str
        self.processCode = None  # type: str
        self.actDelCode = None  # type: str
        self.producer = None  # type: str
        self.derivingOrg = None  # type: str
        self.deletingOrg = None  # type: str
        self.sourceDate = None  # type: str
        self.revDate = None  # type: str
        self.initRecordDate = None  # type: str
        self.keys = None  # type: List[str]
        self.values = None  # type: List[str]
        self.obstacleRemarks = None  # type: str
        self.nextCycleDate = None  # type: str
        self.baselineCutoffDate = None  # type: str
        self.cutoffDate = None  # type: str
        self.airacCycle = 0  # type: int
        self.baseAiracCycle = 0  # type: int
        self.ownerCountryCode = None  # type: str
        self.boundNelon = 0.0  # type: float
        self.boundNelat = 0.0  # type: float
        self.boundSwlon = 0.0  # type: float
        self.boundSwlat = 0.0  # type: float
        self.minHeightAgl = 0.0  # type: float
        self.numPoints = 0  # type: int
        self.numLines = 0  # type: int
        self.dataSetRemarks = None  # type: str
        self.pointsFilename = None  # type: str
        self.linesFilename = None  # type: str
        self.vectorsFilename = None  # type: str
        self.rawFileUri = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        navigationalObstructionAbridged = NavigationalObstruction_Abridged()
        navigationalObstructionAbridged.Init(buf, pos)
        return cls.InitFromObj(navigationalObstructionAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, navigationalObstructionAbridged):
        x = NavigationalObstruction_AbridgedT()
        x._UnPack(navigationalObstructionAbridged)
        return x

    # NavigationalObstruction_AbridgedT
    def _UnPack(self, navigationalObstructionAbridged):
        if navigationalObstructionAbridged is None:
            return
        self.id = navigationalObstructionAbridged.Id()
        self.classificationMarking = navigationalObstructionAbridged.ClassificationMarking()
        self.cycleDate = navigationalObstructionAbridged.CycleDate()
        self.obstacleType = navigationalObstructionAbridged.ObstacleType()
        self.obstacleId = navigationalObstructionAbridged.ObstacleId()
        self.externalId = navigationalObstructionAbridged.ExternalId()
        self.origId = navigationalObstructionAbridged.OrigId()
        self.countryCode = navigationalObstructionAbridged.CountryCode()
        self.provinceCode = navigationalObstructionAbridged.ProvinceCode()
        self.pointLat = navigationalObstructionAbridged.PointLat()
        self.pointLon = navigationalObstructionAbridged.PointLon()
        self.lineNelon = navigationalObstructionAbridged.LineNelon()
        self.lineNelat = navigationalObstructionAbridged.LineNelat()
        self.lineSwlon = navigationalObstructionAbridged.LineSwlon()
        self.lineSwlat = navigationalObstructionAbridged.LineSwlat()
        self.segStartPoint = navigationalObstructionAbridged.SegStartPoint()
        self.segEndPoint = navigationalObstructionAbridged.SegEndPoint()
        self.segNum = navigationalObstructionAbridged.SegNum()
        self.facc = navigationalObstructionAbridged.Facc()
        self.featureCode = navigationalObstructionAbridged.FeatureCode()
        self.featureType = navigationalObstructionAbridged.FeatureType()
        self.featureName = navigationalObstructionAbridged.FeatureName()
        self.featureDescription = navigationalObstructionAbridged.FeatureDescription()
        self.wac = navigationalObstructionAbridged.Wac()
        self.wacInnr = navigationalObstructionAbridged.WacInnr()
        self.multObs = navigationalObstructionAbridged.MultObs()
        self.numObs = navigationalObstructionAbridged.NumObs()
        self.horizDatumCode = navigationalObstructionAbridged.HorizDatumCode()
        self.heightAgl = navigationalObstructionAbridged.HeightAgl()
        self.heightAglacc = navigationalObstructionAbridged.HeightAglacc()
        self.heightMsl = navigationalObstructionAbridged.HeightMsl()
        self.heightMslacc = navigationalObstructionAbridged.HeightMslacc()
        self.elevation = navigationalObstructionAbridged.Elevation()
        self.elevationAcc = navigationalObstructionAbridged.ElevationAcc()
        self.horizAcc = navigationalObstructionAbridged.HorizAcc()
        self.quality = navigationalObstructionAbridged.Quality()
        self.lightingCode = navigationalObstructionAbridged.LightingCode()
        self.surfaceMatCode = navigationalObstructionAbridged.SurfaceMatCode()
        self.directivityCode = navigationalObstructionAbridged.DirectivityCode()
        self.validationCode = navigationalObstructionAbridged.ValidationCode()
        self.transactionCode = navigationalObstructionAbridged.TransactionCode()
        self.processCode = navigationalObstructionAbridged.ProcessCode()
        self.actDelCode = navigationalObstructionAbridged.ActDelCode()
        self.producer = navigationalObstructionAbridged.Producer()
        self.derivingOrg = navigationalObstructionAbridged.DerivingOrg()
        self.deletingOrg = navigationalObstructionAbridged.DeletingOrg()
        self.sourceDate = navigationalObstructionAbridged.SourceDate()
        self.revDate = navigationalObstructionAbridged.RevDate()
        self.initRecordDate = navigationalObstructionAbridged.InitRecordDate()
        if not navigationalObstructionAbridged.KeysIsNone():
            self.keys = []
            for i in range(navigationalObstructionAbridged.KeysLength()):
                self.keys.append(navigationalObstructionAbridged.Keys(i))
        if not navigationalObstructionAbridged.ValuesIsNone():
            self.values = []
            for i in range(navigationalObstructionAbridged.ValuesLength()):
                self.values.append(navigationalObstructionAbridged.Values(i))
        self.obstacleRemarks = navigationalObstructionAbridged.ObstacleRemarks()
        self.nextCycleDate = navigationalObstructionAbridged.NextCycleDate()
        self.baselineCutoffDate = navigationalObstructionAbridged.BaselineCutoffDate()
        self.cutoffDate = navigationalObstructionAbridged.CutoffDate()
        self.airacCycle = navigationalObstructionAbridged.AiracCycle()
        self.baseAiracCycle = navigationalObstructionAbridged.BaseAiracCycle()
        self.ownerCountryCode = navigationalObstructionAbridged.OwnerCountryCode()
        self.boundNelon = navigationalObstructionAbridged.BoundNelon()
        self.boundNelat = navigationalObstructionAbridged.BoundNelat()
        self.boundSwlon = navigationalObstructionAbridged.BoundSwlon()
        self.boundSwlat = navigationalObstructionAbridged.BoundSwlat()
        self.minHeightAgl = navigationalObstructionAbridged.MinHeightAgl()
        self.numPoints = navigationalObstructionAbridged.NumPoints()
        self.numLines = navigationalObstructionAbridged.NumLines()
        self.dataSetRemarks = navigationalObstructionAbridged.DataSetRemarks()
        self.pointsFilename = navigationalObstructionAbridged.PointsFilename()
        self.linesFilename = navigationalObstructionAbridged.LinesFilename()
        self.vectorsFilename = navigationalObstructionAbridged.VectorsFilename()
        self.rawFileUri = navigationalObstructionAbridged.RawFileUri()
        self.createdAt = navigationalObstructionAbridged.CreatedAt()
        self.createdBy = navigationalObstructionAbridged.CreatedBy()
        self.sourceDl = navigationalObstructionAbridged.SourceDl()
        self.source = navigationalObstructionAbridged.Source()
        self.origin = navigationalObstructionAbridged.Origin()
        self.origNetwork = navigationalObstructionAbridged.OrigNetwork()
        self.dataMode = navigationalObstructionAbridged.DataMode()

    # NavigationalObstruction_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.cycleDate is not None:
            cycleDate = builder.CreateString(self.cycleDate)
        if self.obstacleType is not None:
            obstacleType = builder.CreateString(self.obstacleType)
        if self.obstacleId is not None:
            obstacleId = builder.CreateString(self.obstacleId)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.origId is not None:
            origId = builder.CreateString(self.origId)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.provinceCode is not None:
            provinceCode = builder.CreateString(self.provinceCode)
        if self.facc is not None:
            facc = builder.CreateString(self.facc)
        if self.featureCode is not None:
            featureCode = builder.CreateString(self.featureCode)
        if self.featureType is not None:
            featureType = builder.CreateString(self.featureType)
        if self.featureName is not None:
            featureName = builder.CreateString(self.featureName)
        if self.featureDescription is not None:
            featureDescription = builder.CreateString(self.featureDescription)
        if self.wac is not None:
            wac = builder.CreateString(self.wac)
        if self.wacInnr is not None:
            wacInnr = builder.CreateString(self.wacInnr)
        if self.multObs is not None:
            multObs = builder.CreateString(self.multObs)
        if self.horizDatumCode is not None:
            horizDatumCode = builder.CreateString(self.horizDatumCode)
        if self.quality is not None:
            quality = builder.CreateString(self.quality)
        if self.lightingCode is not None:
            lightingCode = builder.CreateString(self.lightingCode)
        if self.surfaceMatCode is not None:
            surfaceMatCode = builder.CreateString(self.surfaceMatCode)
        if self.transactionCode is not None:
            transactionCode = builder.CreateString(self.transactionCode)
        if self.processCode is not None:
            processCode = builder.CreateString(self.processCode)
        if self.actDelCode is not None:
            actDelCode = builder.CreateString(self.actDelCode)
        if self.producer is not None:
            producer = builder.CreateString(self.producer)
        if self.derivingOrg is not None:
            derivingOrg = builder.CreateString(self.derivingOrg)
        if self.deletingOrg is not None:
            deletingOrg = builder.CreateString(self.deletingOrg)
        if self.sourceDate is not None:
            sourceDate = builder.CreateString(self.sourceDate)
        if self.revDate is not None:
            revDate = builder.CreateString(self.revDate)
        if self.initRecordDate is not None:
            initRecordDate = builder.CreateString(self.initRecordDate)
        if self.keys is not None:
            keyslist = []
            for i in range(len(self.keys)):
                keyslist.append(builder.CreateString(self.keys[i]))
            NavigationalObstruction_AbridgedStartKeysVector(builder, len(self.keys))
            for i in reversed(range(len(self.keys))):
                builder.PrependUOffsetTRelative(keyslist[i])
            keys = builder.EndVector()
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(builder.CreateString(self.values[i]))
            NavigationalObstruction_AbridgedStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        if self.obstacleRemarks is not None:
            obstacleRemarks = builder.CreateString(self.obstacleRemarks)
        if self.nextCycleDate is not None:
            nextCycleDate = builder.CreateString(self.nextCycleDate)
        if self.baselineCutoffDate is not None:
            baselineCutoffDate = builder.CreateString(self.baselineCutoffDate)
        if self.cutoffDate is not None:
            cutoffDate = builder.CreateString(self.cutoffDate)
        if self.ownerCountryCode is not None:
            ownerCountryCode = builder.CreateString(self.ownerCountryCode)
        if self.dataSetRemarks is not None:
            dataSetRemarks = builder.CreateString(self.dataSetRemarks)
        if self.pointsFilename is not None:
            pointsFilename = builder.CreateString(self.pointsFilename)
        if self.linesFilename is not None:
            linesFilename = builder.CreateString(self.linesFilename)
        if self.vectorsFilename is not None:
            vectorsFilename = builder.CreateString(self.vectorsFilename)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        NavigationalObstruction_AbridgedStart(builder)
        if self.id is not None:
            NavigationalObstruction_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            NavigationalObstruction_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.cycleDate is not None:
            NavigationalObstruction_AbridgedAddCycleDate(builder, cycleDate)
        if self.obstacleType is not None:
            NavigationalObstruction_AbridgedAddObstacleType(builder, obstacleType)
        if self.obstacleId is not None:
            NavigationalObstruction_AbridgedAddObstacleId(builder, obstacleId)
        if self.externalId is not None:
            NavigationalObstruction_AbridgedAddExternalId(builder, externalId)
        if self.origId is not None:
            NavigationalObstruction_AbridgedAddOrigId(builder, origId)
        if self.countryCode is not None:
            NavigationalObstruction_AbridgedAddCountryCode(builder, countryCode)
        if self.provinceCode is not None:
            NavigationalObstruction_AbridgedAddProvinceCode(builder, provinceCode)
        NavigationalObstruction_AbridgedAddPointLat(builder, self.pointLat)
        NavigationalObstruction_AbridgedAddPointLon(builder, self.pointLon)
        NavigationalObstruction_AbridgedAddLineNelon(builder, self.lineNelon)
        NavigationalObstruction_AbridgedAddLineNelat(builder, self.lineNelat)
        NavigationalObstruction_AbridgedAddLineSwlon(builder, self.lineSwlon)
        NavigationalObstruction_AbridgedAddLineSwlat(builder, self.lineSwlat)
        NavigationalObstruction_AbridgedAddSegStartPoint(builder, self.segStartPoint)
        NavigationalObstruction_AbridgedAddSegEndPoint(builder, self.segEndPoint)
        NavigationalObstruction_AbridgedAddSegNum(builder, self.segNum)
        if self.facc is not None:
            NavigationalObstruction_AbridgedAddFacc(builder, facc)
        if self.featureCode is not None:
            NavigationalObstruction_AbridgedAddFeatureCode(builder, featureCode)
        if self.featureType is not None:
            NavigationalObstruction_AbridgedAddFeatureType(builder, featureType)
        if self.featureName is not None:
            NavigationalObstruction_AbridgedAddFeatureName(builder, featureName)
        if self.featureDescription is not None:
            NavigationalObstruction_AbridgedAddFeatureDescription(builder, featureDescription)
        if self.wac is not None:
            NavigationalObstruction_AbridgedAddWac(builder, wac)
        if self.wacInnr is not None:
            NavigationalObstruction_AbridgedAddWacInnr(builder, wacInnr)
        if self.multObs is not None:
            NavigationalObstruction_AbridgedAddMultObs(builder, multObs)
        NavigationalObstruction_AbridgedAddNumObs(builder, self.numObs)
        if self.horizDatumCode is not None:
            NavigationalObstruction_AbridgedAddHorizDatumCode(builder, horizDatumCode)
        NavigationalObstruction_AbridgedAddHeightAgl(builder, self.heightAgl)
        NavigationalObstruction_AbridgedAddHeightAglacc(builder, self.heightAglacc)
        NavigationalObstruction_AbridgedAddHeightMsl(builder, self.heightMsl)
        NavigationalObstruction_AbridgedAddHeightMslacc(builder, self.heightMslacc)
        NavigationalObstruction_AbridgedAddElevation(builder, self.elevation)
        NavigationalObstruction_AbridgedAddElevationAcc(builder, self.elevationAcc)
        NavigationalObstruction_AbridgedAddHorizAcc(builder, self.horizAcc)
        if self.quality is not None:
            NavigationalObstruction_AbridgedAddQuality(builder, quality)
        if self.lightingCode is not None:
            NavigationalObstruction_AbridgedAddLightingCode(builder, lightingCode)
        if self.surfaceMatCode is not None:
            NavigationalObstruction_AbridgedAddSurfaceMatCode(builder, surfaceMatCode)
        NavigationalObstruction_AbridgedAddDirectivityCode(builder, self.directivityCode)
        NavigationalObstruction_AbridgedAddValidationCode(builder, self.validationCode)
        if self.transactionCode is not None:
            NavigationalObstruction_AbridgedAddTransactionCode(builder, transactionCode)
        if self.processCode is not None:
            NavigationalObstruction_AbridgedAddProcessCode(builder, processCode)
        if self.actDelCode is not None:
            NavigationalObstruction_AbridgedAddActDelCode(builder, actDelCode)
        if self.producer is not None:
            NavigationalObstruction_AbridgedAddProducer(builder, producer)
        if self.derivingOrg is not None:
            NavigationalObstruction_AbridgedAddDerivingOrg(builder, derivingOrg)
        if self.deletingOrg is not None:
            NavigationalObstruction_AbridgedAddDeletingOrg(builder, deletingOrg)
        if self.sourceDate is not None:
            NavigationalObstruction_AbridgedAddSourceDate(builder, sourceDate)
        if self.revDate is not None:
            NavigationalObstruction_AbridgedAddRevDate(builder, revDate)
        if self.initRecordDate is not None:
            NavigationalObstruction_AbridgedAddInitRecordDate(builder, initRecordDate)
        if self.keys is not None:
            NavigationalObstruction_AbridgedAddKeys(builder, keys)
        if self.values is not None:
            NavigationalObstruction_AbridgedAddValues(builder, values)
        if self.obstacleRemarks is not None:
            NavigationalObstruction_AbridgedAddObstacleRemarks(builder, obstacleRemarks)
        if self.nextCycleDate is not None:
            NavigationalObstruction_AbridgedAddNextCycleDate(builder, nextCycleDate)
        if self.baselineCutoffDate is not None:
            NavigationalObstruction_AbridgedAddBaselineCutoffDate(builder, baselineCutoffDate)
        if self.cutoffDate is not None:
            NavigationalObstruction_AbridgedAddCutoffDate(builder, cutoffDate)
        NavigationalObstruction_AbridgedAddAiracCycle(builder, self.airacCycle)
        NavigationalObstruction_AbridgedAddBaseAiracCycle(builder, self.baseAiracCycle)
        if self.ownerCountryCode is not None:
            NavigationalObstruction_AbridgedAddOwnerCountryCode(builder, ownerCountryCode)
        NavigationalObstruction_AbridgedAddBoundNelon(builder, self.boundNelon)
        NavigationalObstruction_AbridgedAddBoundNelat(builder, self.boundNelat)
        NavigationalObstruction_AbridgedAddBoundSwlon(builder, self.boundSwlon)
        NavigationalObstruction_AbridgedAddBoundSwlat(builder, self.boundSwlat)
        NavigationalObstruction_AbridgedAddMinHeightAgl(builder, self.minHeightAgl)
        NavigationalObstruction_AbridgedAddNumPoints(builder, self.numPoints)
        NavigationalObstruction_AbridgedAddNumLines(builder, self.numLines)
        if self.dataSetRemarks is not None:
            NavigationalObstruction_AbridgedAddDataSetRemarks(builder, dataSetRemarks)
        if self.pointsFilename is not None:
            NavigationalObstruction_AbridgedAddPointsFilename(builder, pointsFilename)
        if self.linesFilename is not None:
            NavigationalObstruction_AbridgedAddLinesFilename(builder, linesFilename)
        if self.vectorsFilename is not None:
            NavigationalObstruction_AbridgedAddVectorsFilename(builder, vectorsFilename)
        if self.rawFileUri is not None:
            NavigationalObstruction_AbridgedAddRawFileUri(builder, rawFileUri)
        if self.createdAt is not None:
            NavigationalObstruction_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            NavigationalObstruction_AbridgedAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            NavigationalObstruction_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            NavigationalObstruction_AbridgedAddSource(builder, source)
        if self.origin is not None:
            NavigationalObstruction_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            NavigationalObstruction_AbridgedAddOrigNetwork(builder, origNetwork)
        NavigationalObstruction_AbridgedAddDataMode(builder, self.dataMode)
        navigationalObstructionAbridged = NavigationalObstruction_AbridgedEnd(builder)
        return navigationalObstructionAbridged
