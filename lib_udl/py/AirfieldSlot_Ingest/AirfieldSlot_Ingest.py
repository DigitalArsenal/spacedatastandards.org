# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
class AirfieldSlot_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirfieldSlot_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirfieldSlot_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirfieldSlot_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x46", size_prefixed=size_prefixed)

    # AirfieldSlot_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirfieldSlot_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirfieldSlot_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the airfield where this slot is located.
    # Example: /// Example: USAF Academy AFLD
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldSlot_Ingest
    def AirfieldName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code of the airfield.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirfieldSlot_Ingest
    def Icao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Airfield for which this slot information applies.
    # Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlot_Ingest
    def IdAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate airfield identifier provided by the source.
    # Example: /// Example: ALT-AIRFIELD-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldSlot_Ingest
    def AltAirfieldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of this slot.
    # Example: /// Example: Apron 5
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirfieldSlot_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
    # Example: /// Example: WORKING
    # Constraints: Minimum length = 0, Maximum length = 7
    # AirfieldSlot_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
    # Example: /// Example: WIDE
    # Constraints: Minimum length = 0, Maximum length = 6
    # AirfieldSlot_Ingest
    def AcSlotCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Number of aircraft that can fit in this slot at the same time.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # AirfieldSlot_Ingest
    def Capacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
    # Example: /// Example: 0000Z
    # Constraints: Minimum length = 0, Maximum length = 5
    # AirfieldSlot_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
    # Example: /// Example: 2359Z
    # Constraints: Minimum length = 0, Maximum length = 5
    # AirfieldSlot_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # AirfieldSlot_Ingest
    def MinSeparation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional notes/comments for this airfield slot.
    # Example: /// Example: Notes for an airfield slot.
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirfieldSlot_Ingest
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirfieldSlot_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldSlot_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldSlot_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldSlot_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldSlot_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirfieldSlot_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirfieldSlot_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirfieldSlot_IngestStart(builder):
    builder.StartObject(21)

def Start(builder):
    AirfieldSlot_IngestStart(builder)

def AirfieldSlot_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirfieldSlot_IngestAddId(builder, id)

def AirfieldSlot_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirfieldSlot_IngestAddClassificationMarking(builder, classificationMarking)

def AirfieldSlot_IngestAddAirfieldName(builder, airfieldName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(airfieldName), 0)

def AddAirfieldName(builder, airfieldName):
    AirfieldSlot_IngestAddAirfieldName(builder, airfieldName)

def AirfieldSlot_IngestAddIcao(builder, icao):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(icao), 0)

def AddIcao(builder, icao):
    AirfieldSlot_IngestAddIcao(builder, icao)

def AirfieldSlot_IngestAddIdAirfield(builder, idAirfield):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idAirfield), 0)

def AddIdAirfield(builder, idAirfield):
    AirfieldSlot_IngestAddIdAirfield(builder, idAirfield)

def AirfieldSlot_IngestAddAltAirfieldId(builder, altAirfieldId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(altAirfieldId), 0)

def AddAltAirfieldId(builder, altAirfieldId):
    AirfieldSlot_IngestAddAltAirfieldId(builder, altAirfieldId)

def AirfieldSlot_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    AirfieldSlot_IngestAddName(builder, name)

def AirfieldSlot_IngestAddType(builder, type):
    builder.PrependInt8Slot(7, type, 0)

def AddType(builder, type):
    AirfieldSlot_IngestAddType(builder, type)

def AirfieldSlot_IngestAddAcSlotCat(builder, acSlotCat):
    builder.PrependInt8Slot(8, acSlotCat, 0)

def AddAcSlotCat(builder, acSlotCat):
    AirfieldSlot_IngestAddAcSlotCat(builder, acSlotCat)

def AirfieldSlot_IngestAddCapacity(builder, capacity):
    builder.PrependInt32Slot(9, capacity, 0)

def AddCapacity(builder, capacity):
    AirfieldSlot_IngestAddCapacity(builder, capacity)

def AirfieldSlot_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    AirfieldSlot_IngestAddStartTime(builder, startTime)

def AirfieldSlot_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    AirfieldSlot_IngestAddEndTime(builder, endTime)

def AirfieldSlot_IngestAddMinSeparation(builder, minSeparation):
    builder.PrependInt32Slot(12, minSeparation, 0)

def AddMinSeparation(builder, minSeparation):
    AirfieldSlot_IngestAddMinSeparation(builder, minSeparation)

def AirfieldSlot_IngestAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    AirfieldSlot_IngestAddNotes(builder, notes)

def AirfieldSlot_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirfieldSlot_IngestAddCreatedAt(builder, createdAt)

def AirfieldSlot_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirfieldSlot_IngestAddCreatedBy(builder, createdBy)

def AirfieldSlot_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirfieldSlot_IngestAddSourceDl(builder, sourceDl)

def AirfieldSlot_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirfieldSlot_IngestAddSource(builder, source)

def AirfieldSlot_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirfieldSlot_IngestAddOrigin(builder, origin)

def AirfieldSlot_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirfieldSlot_IngestAddOrigNetwork(builder, origNetwork)

def AirfieldSlot_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(20, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirfieldSlot_IngestAddDataMode(builder, dataMode)

def AirfieldSlot_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirfieldSlot_IngestEnd(builder)


class AirfieldSlot_IngestT(object):

    # AirfieldSlot_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.airfieldName = None  # type: str
        self.icao = None  # type: str
        self.idAirfield = None  # type: str
        self.altAirfieldId = None  # type: str
        self.name = None  # type: str
        self.type = 0  # type: int
        self.acSlotCat = 0  # type: int
        self.capacity = 0  # type: int
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.minSeparation = 0  # type: int
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airfieldSlotIngest = AirfieldSlot_Ingest()
        airfieldSlotIngest.Init(buf, pos)
        return cls.InitFromObj(airfieldSlotIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airfieldSlotIngest):
        x = AirfieldSlot_IngestT()
        x._UnPack(airfieldSlotIngest)
        return x

    # AirfieldSlot_IngestT
    def _UnPack(self, airfieldSlotIngest):
        if airfieldSlotIngest is None:
            return
        self.id = airfieldSlotIngest.Id()
        self.classificationMarking = airfieldSlotIngest.ClassificationMarking()
        self.airfieldName = airfieldSlotIngest.AirfieldName()
        self.icao = airfieldSlotIngest.Icao()
        self.idAirfield = airfieldSlotIngest.IdAirfield()
        self.altAirfieldId = airfieldSlotIngest.AltAirfieldId()
        self.name = airfieldSlotIngest.Name()
        self.type = airfieldSlotIngest.Type()
        self.acSlotCat = airfieldSlotIngest.AcSlotCat()
        self.capacity = airfieldSlotIngest.Capacity()
        self.startTime = airfieldSlotIngest.StartTime()
        self.endTime = airfieldSlotIngest.EndTime()
        self.minSeparation = airfieldSlotIngest.MinSeparation()
        self.notes = airfieldSlotIngest.Notes()
        self.createdAt = airfieldSlotIngest.CreatedAt()
        self.createdBy = airfieldSlotIngest.CreatedBy()
        self.sourceDl = airfieldSlotIngest.SourceDl()
        self.source = airfieldSlotIngest.Source()
        self.origin = airfieldSlotIngest.Origin()
        self.origNetwork = airfieldSlotIngest.OrigNetwork()
        self.dataMode = airfieldSlotIngest.DataMode()

    # AirfieldSlot_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.airfieldName is not None:
            airfieldName = builder.CreateString(self.airfieldName)
        if self.icao is not None:
            icao = builder.CreateString(self.icao)
        if self.idAirfield is not None:
            idAirfield = builder.CreateString(self.idAirfield)
        if self.altAirfieldId is not None:
            altAirfieldId = builder.CreateString(self.altAirfieldId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirfieldSlot_IngestStart(builder)
        if self.id is not None:
            AirfieldSlot_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            AirfieldSlot_IngestAddClassificationMarking(builder, classificationMarking)
        if self.airfieldName is not None:
            AirfieldSlot_IngestAddAirfieldName(builder, airfieldName)
        if self.icao is not None:
            AirfieldSlot_IngestAddIcao(builder, icao)
        if self.idAirfield is not None:
            AirfieldSlot_IngestAddIdAirfield(builder, idAirfield)
        if self.altAirfieldId is not None:
            AirfieldSlot_IngestAddAltAirfieldId(builder, altAirfieldId)
        if self.name is not None:
            AirfieldSlot_IngestAddName(builder, name)
        AirfieldSlot_IngestAddType(builder, self.type)
        AirfieldSlot_IngestAddAcSlotCat(builder, self.acSlotCat)
        AirfieldSlot_IngestAddCapacity(builder, self.capacity)
        if self.startTime is not None:
            AirfieldSlot_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            AirfieldSlot_IngestAddEndTime(builder, endTime)
        AirfieldSlot_IngestAddMinSeparation(builder, self.minSeparation)
        if self.notes is not None:
            AirfieldSlot_IngestAddNotes(builder, notes)
        if self.createdAt is not None:
            AirfieldSlot_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirfieldSlot_IngestAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            AirfieldSlot_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirfieldSlot_IngestAddSource(builder, source)
        if self.origin is not None:
            AirfieldSlot_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirfieldSlot_IngestAddOrigNetwork(builder, origNetwork)
        AirfieldSlot_IngestAddDataMode(builder, self.dataMode)
        airfieldSlotIngest = AirfieldSlot_IngestEnd(builder)
        return airfieldSlotIngest
