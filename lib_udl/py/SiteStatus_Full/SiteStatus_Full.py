# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class SiteStatus_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SiteStatus_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSiteStatus_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SiteStatus_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x49\x54\x45", size_prefixed=size_prefixed)

    # SiteStatus_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SITESTATUS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SiteStatus_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SiteStatus_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the site, if this status is associated with a fixed site or platform.
    # Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
    # Constraints: Minimum length = 1, Maximum length = 36
    # SiteStatus_Full
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
    # Example: /// Example: ADOC
    # Constraints: Minimum length = 0, Maximum length = 36
    # SiteStatus_Full
    def SiteType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate Identifier for a mobile or transportable platform provided by source.
    # Example: /// Example: MOBILEALT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SiteStatus_Full
    def MobileAltId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The POI (point of interest) ID related to this platform, if available.
    # Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
    # Constraints: Minimum length = 0, Maximum length = 36
    # SiteStatus_Full
    def Poiid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The track ID related to this platform (if mobile or transportable), if available.
    # Example: /// Example: PCM4923-1656174732-4-1-257
    # Constraints: Minimum length = 0, Maximum length = 36
    # SiteStatus_Full
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Link-16 specific reference track number.
    # Example: /// Example: TrkNm
    # Constraints: Minimum length = 0, Maximum length = 5
    # SiteStatus_Full
    def TrackRefL16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
    # Example: /// Example: Fully Operational
    # Constraints: Minimum length = 0, Maximum length = 24
    # SiteStatus_Full
    def OpsCapability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of the installation.
    # FMC - Fully Mission Capable
    #  PMC - Partially Mission Capable
    # NMC - Non Mission Capable
    # UNK - Unknown.
    # Example: /// Example: PMC
    # Constraints: Minimum length = 0, Maximum length = 3
    # SiteStatus_Full
    def InstStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Force Protection Condition (FPCON).
    # NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
    # ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
    # BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
    # CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
    # DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
    # Example: /// Example: BRAVO
    # Constraints: Minimum length = 0, Maximum length = 7
    # SiteStatus_Full
    def Fpcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Health Protection Condition (HPCON).
    # 0 - Routine, no community transmission.
    # ALPHA - Limited, community transmission beginning.
    # BRAVO - Moderate, increased community transmission.
    # CHARLIE - Substantial, sustained community transmission.
    # DELTA - Severe, widespread community transmission.
    # Example: /// Example: CHARLIE
    # Constraints: Minimum length = 0, Maximum length = 7
    # SiteStatus_Full
    def Hpcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Cyberspace Protection Condition (CPCON).
    # 1 - VERY HIGH - Critical functions.
    # 2 - HIGH - Critical and essential functions.
    # 3 - MEDIUM - Critical, essential, and support functions.
    # 4 - LOW - All functions.
    # 5 - VERY LOW - All functions.
    # Example: /// Example: 4
    # Constraints: Minimum length = 0, Maximum length = 1
    # SiteStatus_Full
    def Cpcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time of report, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def ReportTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
    # Example: /// Example: Activation
    # Constraints: Minimum length = 0, Maximum length = 24
    # SiteStatus_Full
    def TimeFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the current weather conditions over a site.
    # Example: /// Example: Heavy rain
    # Constraints: Minimum length = 0, Maximum length = 512
    # SiteStatus_Full
    def WeatherMessage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def Pes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Estimated number of hot missiles of all types remaining in weapons system inventory.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def HotInventory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Estimated number of cold missiles of all types remaining in weapons system inventory.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def ColdInventory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
    # Example: /// Example: Initialization
    # Constraints: Minimum length = 0, Maximum length = 48
    # SiteStatus_Full
    def SamMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SAM sensor radar surveillance mode (Active, Passive, Off).
    # Example: /// Example: Active
    # Constraints: Minimum length = 0, Maximum length = 24
    # SiteStatus_Full
    def RadiateMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The primary component degrading the operational capability of the platform or system.
    # Example: /// Example: opsImpairment
    # Constraints: Minimum length = 0, Maximum length = 48
    # SiteStatus_Full
    def OpsImpairment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The communications component causing the platform or system to be less than fully operational.
    # Example: /// Example: commImpairment
    # Constraints: Minimum length = 0, Maximum length = 24
    # SiteStatus_Full
    def CommImpairment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Crisis Action Team (CAT).
    # COLD - Not in use.
    # WARM - Facility prepped/possible skeleton crew.
    # HOT - Fully active.
    # Example: /// Example: COLD
    # Constraints: Minimum length = 0, Maximum length = 4
    # SiteStatus_Full
    def Cat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Emergency Operations Center (EOC) status.
    # COLD - Not in use.
    # WARM - Facility prepped/possible skeleton crew.
    # HOT - Fully active.
    # Example: /// Example: WARM
    # Constraints: Minimum length = 0, Maximum length = 4
    # SiteStatus_Full
    def Eoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
    # Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def Link(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SiteStatus_Full
    def LinkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SiteStatus_Full
    def LinkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
    # Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def LinkStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SiteStatus_Full
    def LinkStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SiteStatus_Full
    def LinkStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
    # Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def RadarSystem(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SiteStatus_Full
    def RadarSystemLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SiteStatus_Full
    def RadarSystemIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
    # Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def RadarStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SiteStatus_Full
    def RadarStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SiteStatus_Full
    def RadarStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
    # Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def Missile(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SiteStatus_Full
    def MissileLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SiteStatus_Full
    def MissileIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
    # Example: /// Example: [5, 10, 100]
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def MissileInventory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SiteStatus_Full
    def MissileInventoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SiteStatus_Full
    def MissileInventoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SiteStatus_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SiteStatus_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SiteStatus_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SiteStatus_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SiteStatus_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SiteStatus_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SiteStatus_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SiteStatus_FullStart(builder):
    builder.StartObject(39)

def Start(builder):
    SiteStatus_FullStart(builder)

def SiteStatus_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SiteStatus_FullAddId(builder, id)

def SiteStatus_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SiteStatus_FullAddClassificationMarking(builder, classificationMarking)

def SiteStatus_FullAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    SiteStatus_FullAddIdSite(builder, idSite)

def SiteStatus_FullAddSiteType(builder, siteType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(siteType), 0)

def AddSiteType(builder, siteType):
    SiteStatus_FullAddSiteType(builder, siteType)

def SiteStatus_FullAddMobileAltId(builder, mobileAltId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mobileAltId), 0)

def AddMobileAltId(builder, mobileAltId):
    SiteStatus_FullAddMobileAltId(builder, mobileAltId)

def SiteStatus_FullAddPoiid(builder, poiid):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(poiid), 0)

def AddPoiid(builder, poiid):
    SiteStatus_FullAddPoiid(builder, poiid)

def SiteStatus_FullAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    SiteStatus_FullAddTrackId(builder, trackId)

def SiteStatus_FullAddTrackRefL16(builder, trackRefL16):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(trackRefL16), 0)

def AddTrackRefL16(builder, trackRefL16):
    SiteStatus_FullAddTrackRefL16(builder, trackRefL16)

def SiteStatus_FullAddOpsCapability(builder, opsCapability):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(opsCapability), 0)

def AddOpsCapability(builder, opsCapability):
    SiteStatus_FullAddOpsCapability(builder, opsCapability)

def SiteStatus_FullAddInstStatus(builder, instStatus):
    builder.PrependInt8Slot(9, instStatus, 0)

def AddInstStatus(builder, instStatus):
    SiteStatus_FullAddInstStatus(builder, instStatus)

def SiteStatus_FullAddFpcon(builder, fpcon):
    builder.PrependInt8Slot(10, fpcon, 0)

def AddFpcon(builder, fpcon):
    SiteStatus_FullAddFpcon(builder, fpcon)

def SiteStatus_FullAddHpcon(builder, hpcon):
    builder.PrependInt8Slot(11, hpcon, 0)

def AddHpcon(builder, hpcon):
    SiteStatus_FullAddHpcon(builder, hpcon)

def SiteStatus_FullAddCpcon(builder, cpcon):
    builder.PrependInt8Slot(12, cpcon, 0)

def AddCpcon(builder, cpcon):
    SiteStatus_FullAddCpcon(builder, cpcon)

def SiteStatus_FullAddReportTime(builder, reportTime):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(reportTime), 0)

def AddReportTime(builder, reportTime):
    SiteStatus_FullAddReportTime(builder, reportTime)

def SiteStatus_FullAddTimeFunction(builder, timeFunction):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(timeFunction), 0)

def AddTimeFunction(builder, timeFunction):
    SiteStatus_FullAddTimeFunction(builder, timeFunction)

def SiteStatus_FullAddWeatherMessage(builder, weatherMessage):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(weatherMessage), 0)

def AddWeatherMessage(builder, weatherMessage):
    SiteStatus_FullAddWeatherMessage(builder, weatherMessage)

def SiteStatus_FullAddPes(builder, pes):
    builder.PrependBoolSlot(16, pes, 0)

def AddPes(builder, pes):
    SiteStatus_FullAddPes(builder, pes)

def SiteStatus_FullAddHotInventory(builder, hotInventory):
    builder.PrependInt32Slot(17, hotInventory, 0)

def AddHotInventory(builder, hotInventory):
    SiteStatus_FullAddHotInventory(builder, hotInventory)

def SiteStatus_FullAddColdInventory(builder, coldInventory):
    builder.PrependInt32Slot(18, coldInventory, 0)

def AddColdInventory(builder, coldInventory):
    SiteStatus_FullAddColdInventory(builder, coldInventory)

def SiteStatus_FullAddSamMode(builder, samMode):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(samMode), 0)

def AddSamMode(builder, samMode):
    SiteStatus_FullAddSamMode(builder, samMode)

def SiteStatus_FullAddRadiateMode(builder, radiateMode):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(radiateMode), 0)

def AddRadiateMode(builder, radiateMode):
    SiteStatus_FullAddRadiateMode(builder, radiateMode)

def SiteStatus_FullAddOpsImpairment(builder, opsImpairment):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(opsImpairment), 0)

def AddOpsImpairment(builder, opsImpairment):
    SiteStatus_FullAddOpsImpairment(builder, opsImpairment)

def SiteStatus_FullAddCommImpairment(builder, commImpairment):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(commImpairment), 0)

def AddCommImpairment(builder, commImpairment):
    SiteStatus_FullAddCommImpairment(builder, commImpairment)

def SiteStatus_FullAddCat(builder, cat):
    builder.PrependInt8Slot(23, cat, 0)

def AddCat(builder, cat):
    SiteStatus_FullAddCat(builder, cat)

def SiteStatus_FullAddEoc(builder, eoc):
    builder.PrependInt8Slot(24, eoc, 0)

def AddEoc(builder, eoc):
    SiteStatus_FullAddEoc(builder, eoc)

def SiteStatus_FullAddLink(builder, link):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(link), 0)

def AddLink(builder, link):
    SiteStatus_FullAddLink(builder, link)

def SiteStatus_FullStartLinkVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinkVector(builder, numElems):
    return SiteStatus_FullStartLinkVector(builder, numElems)

def SiteStatus_FullAddLinkStatus(builder, linkStatus):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(linkStatus), 0)

def AddLinkStatus(builder, linkStatus):
    SiteStatus_FullAddLinkStatus(builder, linkStatus)

def SiteStatus_FullStartLinkStatusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLinkStatusVector(builder, numElems):
    return SiteStatus_FullStartLinkStatusVector(builder, numElems)

def SiteStatus_FullAddRadarSystem(builder, radarSystem):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(radarSystem), 0)

def AddRadarSystem(builder, radarSystem):
    SiteStatus_FullAddRadarSystem(builder, radarSystem)

def SiteStatus_FullStartRadarSystemVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRadarSystemVector(builder, numElems):
    return SiteStatus_FullStartRadarSystemVector(builder, numElems)

def SiteStatus_FullAddRadarStatus(builder, radarStatus):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(radarStatus), 0)

def AddRadarStatus(builder, radarStatus):
    SiteStatus_FullAddRadarStatus(builder, radarStatus)

def SiteStatus_FullStartRadarStatusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRadarStatusVector(builder, numElems):
    return SiteStatus_FullStartRadarStatusVector(builder, numElems)

def SiteStatus_FullAddMissile(builder, missile):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(missile), 0)

def AddMissile(builder, missile):
    SiteStatus_FullAddMissile(builder, missile)

def SiteStatus_FullStartMissileVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMissileVector(builder, numElems):
    return SiteStatus_FullStartMissileVector(builder, numElems)

def SiteStatus_FullAddMissileInventory(builder, missileInventory):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(missileInventory), 0)

def AddMissileInventory(builder, missileInventory):
    SiteStatus_FullAddMissileInventory(builder, missileInventory)

def SiteStatus_FullStartMissileInventoryVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMissileInventoryVector(builder, numElems):
    return SiteStatus_FullStartMissileInventoryVector(builder, numElems)

def SiteStatus_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SiteStatus_FullAddCreatedAt(builder, createdAt)

def SiteStatus_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SiteStatus_FullAddCreatedBy(builder, createdBy)

def SiteStatus_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SiteStatus_FullAddUpdatedAt(builder, updatedAt)

def SiteStatus_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SiteStatus_FullAddUpdatedBy(builder, updatedBy)

def SiteStatus_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SiteStatus_FullAddSource(builder, source)

def SiteStatus_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SiteStatus_FullAddOrigin(builder, origin)

def SiteStatus_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SiteStatus_FullAddOrigNetwork(builder, origNetwork)

def SiteStatus_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(38, dataMode, 0)

def AddDataMode(builder, dataMode):
    SiteStatus_FullAddDataMode(builder, dataMode)

def SiteStatus_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SiteStatus_FullEnd(builder)

try:
    from typing import List
except:
    pass

class SiteStatus_FullT(object):

    # SiteStatus_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idSite = None  # type: str
        self.siteType = None  # type: str
        self.mobileAltId = None  # type: str
        self.poiid = None  # type: str
        self.trackId = None  # type: str
        self.trackRefL16 = None  # type: str
        self.opsCapability = None  # type: str
        self.instStatus = 0  # type: int
        self.fpcon = 0  # type: int
        self.hpcon = 0  # type: int
        self.cpcon = 0  # type: int
        self.reportTime = None  # type: str
        self.timeFunction = None  # type: str
        self.weatherMessage = None  # type: str
        self.pes = False  # type: bool
        self.hotInventory = 0  # type: int
        self.coldInventory = 0  # type: int
        self.samMode = None  # type: str
        self.radiateMode = None  # type: str
        self.opsImpairment = None  # type: str
        self.commImpairment = None  # type: str
        self.cat = 0  # type: int
        self.eoc = 0  # type: int
        self.link = None  # type: List[str]
        self.linkStatus = None  # type: List[str]
        self.radarSystem = None  # type: List[str]
        self.radarStatus = None  # type: List[str]
        self.missile = None  # type: List[str]
        self.missileInventory = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        siteStatusFull = SiteStatus_Full()
        siteStatusFull.Init(buf, pos)
        return cls.InitFromObj(siteStatusFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, siteStatusFull):
        x = SiteStatus_FullT()
        x._UnPack(siteStatusFull)
        return x

    # SiteStatus_FullT
    def _UnPack(self, siteStatusFull):
        if siteStatusFull is None:
            return
        self.id = siteStatusFull.Id()
        self.classificationMarking = siteStatusFull.ClassificationMarking()
        self.idSite = siteStatusFull.IdSite()
        self.siteType = siteStatusFull.SiteType()
        self.mobileAltId = siteStatusFull.MobileAltId()
        self.poiid = siteStatusFull.Poiid()
        self.trackId = siteStatusFull.TrackId()
        self.trackRefL16 = siteStatusFull.TrackRefL16()
        self.opsCapability = siteStatusFull.OpsCapability()
        self.instStatus = siteStatusFull.InstStatus()
        self.fpcon = siteStatusFull.Fpcon()
        self.hpcon = siteStatusFull.Hpcon()
        self.cpcon = siteStatusFull.Cpcon()
        self.reportTime = siteStatusFull.ReportTime()
        self.timeFunction = siteStatusFull.TimeFunction()
        self.weatherMessage = siteStatusFull.WeatherMessage()
        self.pes = siteStatusFull.Pes()
        self.hotInventory = siteStatusFull.HotInventory()
        self.coldInventory = siteStatusFull.ColdInventory()
        self.samMode = siteStatusFull.SamMode()
        self.radiateMode = siteStatusFull.RadiateMode()
        self.opsImpairment = siteStatusFull.OpsImpairment()
        self.commImpairment = siteStatusFull.CommImpairment()
        self.cat = siteStatusFull.Cat()
        self.eoc = siteStatusFull.Eoc()
        if not siteStatusFull.LinkIsNone():
            self.link = []
            for i in range(siteStatusFull.LinkLength()):
                self.link.append(siteStatusFull.Link(i))
        if not siteStatusFull.LinkStatusIsNone():
            self.linkStatus = []
            for i in range(siteStatusFull.LinkStatusLength()):
                self.linkStatus.append(siteStatusFull.LinkStatus(i))
        if not siteStatusFull.RadarSystemIsNone():
            self.radarSystem = []
            for i in range(siteStatusFull.RadarSystemLength()):
                self.radarSystem.append(siteStatusFull.RadarSystem(i))
        if not siteStatusFull.RadarStatusIsNone():
            self.radarStatus = []
            for i in range(siteStatusFull.RadarStatusLength()):
                self.radarStatus.append(siteStatusFull.RadarStatus(i))
        if not siteStatusFull.MissileIsNone():
            self.missile = []
            for i in range(siteStatusFull.MissileLength()):
                self.missile.append(siteStatusFull.Missile(i))
        if not siteStatusFull.MissileInventoryIsNone():
            self.missileInventory = []
            for i in range(siteStatusFull.MissileInventoryLength()):
                self.missileInventory.append(siteStatusFull.MissileInventory(i))
        self.createdAt = siteStatusFull.CreatedAt()
        self.createdBy = siteStatusFull.CreatedBy()
        self.updatedAt = siteStatusFull.UpdatedAt()
        self.updatedBy = siteStatusFull.UpdatedBy()
        self.source = siteStatusFull.Source()
        self.origin = siteStatusFull.Origin()
        self.origNetwork = siteStatusFull.OrigNetwork()
        self.dataMode = siteStatusFull.DataMode()

    # SiteStatus_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.siteType is not None:
            siteType = builder.CreateString(self.siteType)
        if self.mobileAltId is not None:
            mobileAltId = builder.CreateString(self.mobileAltId)
        if self.poiid is not None:
            poiid = builder.CreateString(self.poiid)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.trackRefL16 is not None:
            trackRefL16 = builder.CreateString(self.trackRefL16)
        if self.opsCapability is not None:
            opsCapability = builder.CreateString(self.opsCapability)
        if self.reportTime is not None:
            reportTime = builder.CreateString(self.reportTime)
        if self.timeFunction is not None:
            timeFunction = builder.CreateString(self.timeFunction)
        if self.weatherMessage is not None:
            weatherMessage = builder.CreateString(self.weatherMessage)
        if self.samMode is not None:
            samMode = builder.CreateString(self.samMode)
        if self.radiateMode is not None:
            radiateMode = builder.CreateString(self.radiateMode)
        if self.opsImpairment is not None:
            opsImpairment = builder.CreateString(self.opsImpairment)
        if self.commImpairment is not None:
            commImpairment = builder.CreateString(self.commImpairment)
        if self.link is not None:
            linklist = []
            for i in range(len(self.link)):
                linklist.append(builder.CreateString(self.link[i]))
            SiteStatus_FullStartLinkVector(builder, len(self.link))
            for i in reversed(range(len(self.link))):
                builder.PrependUOffsetTRelative(linklist[i])
            link = builder.EndVector()
        if self.linkStatus is not None:
            linkStatuslist = []
            for i in range(len(self.linkStatus)):
                linkStatuslist.append(builder.CreateString(self.linkStatus[i]))
            SiteStatus_FullStartLinkStatusVector(builder, len(self.linkStatus))
            for i in reversed(range(len(self.linkStatus))):
                builder.PrependUOffsetTRelative(linkStatuslist[i])
            linkStatus = builder.EndVector()
        if self.radarSystem is not None:
            radarSystemlist = []
            for i in range(len(self.radarSystem)):
                radarSystemlist.append(builder.CreateString(self.radarSystem[i]))
            SiteStatus_FullStartRadarSystemVector(builder, len(self.radarSystem))
            for i in reversed(range(len(self.radarSystem))):
                builder.PrependUOffsetTRelative(radarSystemlist[i])
            radarSystem = builder.EndVector()
        if self.radarStatus is not None:
            radarStatuslist = []
            for i in range(len(self.radarStatus)):
                radarStatuslist.append(builder.CreateString(self.radarStatus[i]))
            SiteStatus_FullStartRadarStatusVector(builder, len(self.radarStatus))
            for i in reversed(range(len(self.radarStatus))):
                builder.PrependUOffsetTRelative(radarStatuslist[i])
            radarStatus = builder.EndVector()
        if self.missile is not None:
            missilelist = []
            for i in range(len(self.missile)):
                missilelist.append(builder.CreateString(self.missile[i]))
            SiteStatus_FullStartMissileVector(builder, len(self.missile))
            for i in reversed(range(len(self.missile))):
                builder.PrependUOffsetTRelative(missilelist[i])
            missile = builder.EndVector()
        if self.missileInventory is not None:
            missileInventorylist = []
            for i in range(len(self.missileInventory)):
                missileInventorylist.append(builder.CreateString(self.missileInventory[i]))
            SiteStatus_FullStartMissileInventoryVector(builder, len(self.missileInventory))
            for i in reversed(range(len(self.missileInventory))):
                builder.PrependUOffsetTRelative(missileInventorylist[i])
            missileInventory = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SiteStatus_FullStart(builder)
        if self.id is not None:
            SiteStatus_FullAddId(builder, id)
        if self.classificationMarking is not None:
            SiteStatus_FullAddClassificationMarking(builder, classificationMarking)
        if self.idSite is not None:
            SiteStatus_FullAddIdSite(builder, idSite)
        if self.siteType is not None:
            SiteStatus_FullAddSiteType(builder, siteType)
        if self.mobileAltId is not None:
            SiteStatus_FullAddMobileAltId(builder, mobileAltId)
        if self.poiid is not None:
            SiteStatus_FullAddPoiid(builder, poiid)
        if self.trackId is not None:
            SiteStatus_FullAddTrackId(builder, trackId)
        if self.trackRefL16 is not None:
            SiteStatus_FullAddTrackRefL16(builder, trackRefL16)
        if self.opsCapability is not None:
            SiteStatus_FullAddOpsCapability(builder, opsCapability)
        SiteStatus_FullAddInstStatus(builder, self.instStatus)
        SiteStatus_FullAddFpcon(builder, self.fpcon)
        SiteStatus_FullAddHpcon(builder, self.hpcon)
        SiteStatus_FullAddCpcon(builder, self.cpcon)
        if self.reportTime is not None:
            SiteStatus_FullAddReportTime(builder, reportTime)
        if self.timeFunction is not None:
            SiteStatus_FullAddTimeFunction(builder, timeFunction)
        if self.weatherMessage is not None:
            SiteStatus_FullAddWeatherMessage(builder, weatherMessage)
        SiteStatus_FullAddPes(builder, self.pes)
        SiteStatus_FullAddHotInventory(builder, self.hotInventory)
        SiteStatus_FullAddColdInventory(builder, self.coldInventory)
        if self.samMode is not None:
            SiteStatus_FullAddSamMode(builder, samMode)
        if self.radiateMode is not None:
            SiteStatus_FullAddRadiateMode(builder, radiateMode)
        if self.opsImpairment is not None:
            SiteStatus_FullAddOpsImpairment(builder, opsImpairment)
        if self.commImpairment is not None:
            SiteStatus_FullAddCommImpairment(builder, commImpairment)
        SiteStatus_FullAddCat(builder, self.cat)
        SiteStatus_FullAddEoc(builder, self.eoc)
        if self.link is not None:
            SiteStatus_FullAddLink(builder, link)
        if self.linkStatus is not None:
            SiteStatus_FullAddLinkStatus(builder, linkStatus)
        if self.radarSystem is not None:
            SiteStatus_FullAddRadarSystem(builder, radarSystem)
        if self.radarStatus is not None:
            SiteStatus_FullAddRadarStatus(builder, radarStatus)
        if self.missile is not None:
            SiteStatus_FullAddMissile(builder, missile)
        if self.missileInventory is not None:
            SiteStatus_FullAddMissileInventory(builder, missileInventory)
        if self.createdAt is not None:
            SiteStatus_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SiteStatus_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SiteStatus_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SiteStatus_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SiteStatus_FullAddSource(builder, source)
        if self.origin is not None:
            SiteStatus_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SiteStatus_FullAddOrigNetwork(builder, origNetwork)
        SiteStatus_FullAddDataMode(builder, self.dataMode)
        siteStatusFull = SiteStatus_FullEnd(builder)
        return siteStatusFull
