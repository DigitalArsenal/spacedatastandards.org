# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
class Aircraft_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Aircraft_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraft_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Aircraft_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # Aircraft_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # Aircraft_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Aircraft_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Aircraft_Full
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the parent entity for this aircraft.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 0, Maximum length = 36
    # Aircraft_Full
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    # Example: /// Example: E-2C HAWKEYE
    # Constraints: Minimum length = 1, Maximum length = 128
    # Aircraft_Full
    def AircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of this aircraft.
    # Example: /// Example: N702JG
    # Constraints: Minimum length = 0, Maximum length = 16
    # Aircraft_Full
    def TailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Full serial number of the aircraft.
    # Example: /// Example: 7007187
    # Constraints: Minimum length = 0, Maximum length = 32
    # Aircraft_Full
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The wing or unit that owns the aircraft.
    # Example: /// Example: 437AW
    # Constraints: Minimum length = 0, Maximum length = 32
    # Aircraft_Full
    def Owner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Air Force major command (MAJCOM) overseeing the aircraft.
    # Example: /// Example: HQACC
    # Constraints: Minimum length = 0, Maximum length = 16
    # Aircraft_Full
    def Command(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The category of aircraft (e.g. M = Military, C = Commercial).
    # Example: /// Example: M
    # Constraints: Minimum length = 0, Maximum length = 1
    # Aircraft_Full
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Military data network data transfer device ID for this aircraft.
    # Example: /// Example: 005
    # Constraints: Minimum length = 0, Maximum length = 16
    # Aircraft_Full
    def Dtd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The cruise speed of the aircraft, in kilometers/hour.
    # Example: /// Example: 915
    # Constraints: No constraints specified.
    # Aircraft_Full
    def CruiseSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum air speed of the aircraft, in kilometers/hour.
    # Example: /// Example: 2655.1
    # Constraints: No constraints specified.
    # Aircraft_Full
    def MaxSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 1000
    # Constraints: No constraints specified.
    # Aircraft_Full
    def MinReqRunwayM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 3000
    # Constraints: No constraints specified.
    # Aircraft_Full
    def MinReqRunwayFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The nominal turnaround time for this aircraft, in minutes.
    # Example: /// Example: 500
    # Constraints: No constraints specified.
    # Aircraft_Full
    def NominalTatime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional notes/comments for this aircraft.
    # Example: /// Example: Notes for this aircraft
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Aircraft_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Aircraft_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Aircraft_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Aircraft_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Aircraft_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Aircraft_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Aircraft_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Aircraft_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 64
    # Aircraft_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Aircraft_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Aircraft_FullStart(builder):
    builder.StartObject(26)

def Start(builder):
    Aircraft_FullStart(builder)

def Aircraft_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Aircraft_FullAddId(builder, id)

def Aircraft_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Aircraft_FullAddClassificationMarking(builder, classificationMarking)

def Aircraft_FullAddEntity(builder, entity):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)

def AddEntity(builder, entity):
    Aircraft_FullAddEntity(builder, entity)

def Aircraft_FullAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Aircraft_FullAddIdEntity(builder, idEntity)

def Aircraft_FullAddAircraftMds(builder, aircraftMds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftMds), 0)

def AddAircraftMds(builder, aircraftMds):
    Aircraft_FullAddAircraftMds(builder, aircraftMds)

def Aircraft_FullAddTailNumber(builder, tailNumber):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tailNumber), 0)

def AddTailNumber(builder, tailNumber):
    Aircraft_FullAddTailNumber(builder, tailNumber)

def Aircraft_FullAddSerialNumber(builder, serialNumber):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(serialNumber), 0)

def AddSerialNumber(builder, serialNumber):
    Aircraft_FullAddSerialNumber(builder, serialNumber)

def Aircraft_FullAddOwner(builder, owner):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(owner), 0)

def AddOwner(builder, owner):
    Aircraft_FullAddOwner(builder, owner)

def Aircraft_FullAddCommand(builder, command):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(command), 0)

def AddCommand(builder, command):
    Aircraft_FullAddCommand(builder, command)

def Aircraft_FullAddCategory(builder, category):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)

def AddCategory(builder, category):
    Aircraft_FullAddCategory(builder, category)

def Aircraft_FullAddDtd(builder, dtd):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(dtd), 0)

def AddDtd(builder, dtd):
    Aircraft_FullAddDtd(builder, dtd)

def Aircraft_FullAddCruiseSpeed(builder, cruiseSpeed):
    builder.PrependFloat64Slot(11, cruiseSpeed, 0.0)

def AddCruiseSpeed(builder, cruiseSpeed):
    Aircraft_FullAddCruiseSpeed(builder, cruiseSpeed)

def Aircraft_FullAddMaxSpeed(builder, maxSpeed):
    builder.PrependFloat64Slot(12, maxSpeed, 0.0)

def AddMaxSpeed(builder, maxSpeed):
    Aircraft_FullAddMaxSpeed(builder, maxSpeed)

def Aircraft_FullAddMinReqRunwayM(builder, minReqRunwayM):
    builder.PrependInt32Slot(13, minReqRunwayM, 0)

def AddMinReqRunwayM(builder, minReqRunwayM):
    Aircraft_FullAddMinReqRunwayM(builder, minReqRunwayM)

def Aircraft_FullAddMinReqRunwayFt(builder, minReqRunwayFt):
    builder.PrependInt32Slot(14, minReqRunwayFt, 0)

def AddMinReqRunwayFt(builder, minReqRunwayFt):
    Aircraft_FullAddMinReqRunwayFt(builder, minReqRunwayFt)

def Aircraft_FullAddNominalTatime(builder, nominalTatime):
    builder.PrependInt32Slot(15, nominalTatime, 0)

def AddNominalTatime(builder, nominalTatime):
    Aircraft_FullAddNominalTatime(builder, nominalTatime)

def Aircraft_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Aircraft_FullAddNotes(builder, notes)

def Aircraft_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Aircraft_FullAddCreatedAt(builder, createdAt)

def Aircraft_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Aircraft_FullAddCreatedBy(builder, createdBy)

def Aircraft_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Aircraft_FullAddUpdatedAt(builder, updatedAt)

def Aircraft_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Aircraft_FullAddUpdatedBy(builder, updatedBy)

def Aircraft_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    Aircraft_FullAddSourceDl(builder, sourceDl)

def Aircraft_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Aircraft_FullAddSource(builder, source)

def Aircraft_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Aircraft_FullAddOrigin(builder, origin)

def Aircraft_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(24, dataMode, 0)

def AddDataMode(builder, dataMode):
    Aircraft_FullAddDataMode(builder, dataMode)

def Aircraft_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Aircraft_FullAddOrigNetwork(builder, origNetwork)

def Aircraft_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Aircraft_FullEnd(builder)


class Aircraft_FullT(object):

    # Aircraft_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.entity = None  # type: str
        self.idEntity = None  # type: str
        self.aircraftMds = None  # type: str
        self.tailNumber = None  # type: str
        self.serialNumber = None  # type: str
        self.owner = None  # type: str
        self.command = None  # type: str
        self.category = None  # type: str
        self.dtd = None  # type: str
        self.cruiseSpeed = 0.0  # type: float
        self.maxSpeed = 0.0  # type: float
        self.minReqRunwayM = 0  # type: int
        self.minReqRunwayFt = 0  # type: int
        self.nominalTatime = 0  # type: int
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftFull = Aircraft_Full()
        aircraftFull.Init(buf, pos)
        return cls.InitFromObj(aircraftFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftFull):
        x = Aircraft_FullT()
        x._UnPack(aircraftFull)
        return x

    # Aircraft_FullT
    def _UnPack(self, aircraftFull):
        if aircraftFull is None:
            return
        self.id = aircraftFull.Id()
        self.classificationMarking = aircraftFull.ClassificationMarking()
        self.entity = aircraftFull.Entity()
        self.idEntity = aircraftFull.IdEntity()
        self.aircraftMds = aircraftFull.AircraftMds()
        self.tailNumber = aircraftFull.TailNumber()
        self.serialNumber = aircraftFull.SerialNumber()
        self.owner = aircraftFull.Owner()
        self.command = aircraftFull.Command()
        self.category = aircraftFull.Category()
        self.dtd = aircraftFull.Dtd()
        self.cruiseSpeed = aircraftFull.CruiseSpeed()
        self.maxSpeed = aircraftFull.MaxSpeed()
        self.minReqRunwayM = aircraftFull.MinReqRunwayM()
        self.minReqRunwayFt = aircraftFull.MinReqRunwayFt()
        self.nominalTatime = aircraftFull.NominalTatime()
        self.notes = aircraftFull.Notes()
        self.createdAt = aircraftFull.CreatedAt()
        self.createdBy = aircraftFull.CreatedBy()
        self.updatedAt = aircraftFull.UpdatedAt()
        self.updatedBy = aircraftFull.UpdatedBy()
        self.sourceDl = aircraftFull.SourceDl()
        self.source = aircraftFull.Source()
        self.origin = aircraftFull.Origin()
        self.dataMode = aircraftFull.DataMode()
        self.origNetwork = aircraftFull.OrigNetwork()

    # Aircraft_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.aircraftMds is not None:
            aircraftMds = builder.CreateString(self.aircraftMds)
        if self.tailNumber is not None:
            tailNumber = builder.CreateString(self.tailNumber)
        if self.serialNumber is not None:
            serialNumber = builder.CreateString(self.serialNumber)
        if self.owner is not None:
            owner = builder.CreateString(self.owner)
        if self.command is not None:
            command = builder.CreateString(self.command)
        if self.category is not None:
            category = builder.CreateString(self.category)
        if self.dtd is not None:
            dtd = builder.CreateString(self.dtd)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Aircraft_FullStart(builder)
        if self.id is not None:
            Aircraft_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Aircraft_FullAddClassificationMarking(builder, classificationMarking)
        if self.entity is not None:
            Aircraft_FullAddEntity(builder, entity)
        if self.idEntity is not None:
            Aircraft_FullAddIdEntity(builder, idEntity)
        if self.aircraftMds is not None:
            Aircraft_FullAddAircraftMds(builder, aircraftMds)
        if self.tailNumber is not None:
            Aircraft_FullAddTailNumber(builder, tailNumber)
        if self.serialNumber is not None:
            Aircraft_FullAddSerialNumber(builder, serialNumber)
        if self.owner is not None:
            Aircraft_FullAddOwner(builder, owner)
        if self.command is not None:
            Aircraft_FullAddCommand(builder, command)
        if self.category is not None:
            Aircraft_FullAddCategory(builder, category)
        if self.dtd is not None:
            Aircraft_FullAddDtd(builder, dtd)
        Aircraft_FullAddCruiseSpeed(builder, self.cruiseSpeed)
        Aircraft_FullAddMaxSpeed(builder, self.maxSpeed)
        Aircraft_FullAddMinReqRunwayM(builder, self.minReqRunwayM)
        Aircraft_FullAddMinReqRunwayFt(builder, self.minReqRunwayFt)
        Aircraft_FullAddNominalTatime(builder, self.nominalTatime)
        if self.notes is not None:
            Aircraft_FullAddNotes(builder, notes)
        if self.createdAt is not None:
            Aircraft_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Aircraft_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Aircraft_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Aircraft_FullAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            Aircraft_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            Aircraft_FullAddSource(builder, source)
        if self.origin is not None:
            Aircraft_FullAddOrigin(builder, origin)
        Aircraft_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            Aircraft_FullAddOrigNetwork(builder, origNetwork)
        aircraftFull = Aircraft_FullEnd(builder)
        return aircraftFull
