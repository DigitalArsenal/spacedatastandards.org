# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
class BatteryDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BatteryDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBatteryDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BatteryDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x41\x54\x54", size_prefixed=size_prefixed)

    # BatteryDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BATTERYDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BatteryDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent battery type record.
    # Example: /// Example: BATTERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BatteryDetails_Abridged
    def IdBattery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # BatteryDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
    # Example: /// Example: Ni-Cd
    # Constraints: Minimum length = 0, Maximum length = 32
    # BatteryDetails_Abridged
    def Technology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery capacity in Ah.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # BatteryDetails_Abridged
    def Capacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Depth of discharge as a percentage/fraction.
    # Example: /// Example: 0.2
    # Constraints: No constraints specified.
    # BatteryDetails_Abridged
    def DischargeDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Battery model number or name.
    # Example: /// Example: 11212
    # Constraints: Minimum length = 0, Maximum length = 128
    # BatteryDetails_Abridged
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery description/notes.
    # Example: /// Example: example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # BatteryDetails_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the organization that manufactures the battery.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # BatteryDetails_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # BatteryDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # BatteryDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # BatteryDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # BatteryDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # BatteryDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # BatteryDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def BatteryDetails_AbridgedStart(builder):
    builder.StartObject(15)

def Start(builder):
    BatteryDetails_AbridgedStart(builder)

def BatteryDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    BatteryDetails_AbridgedAddId(builder, id)

def BatteryDetails_AbridgedAddIdBattery(builder, idBattery):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idBattery), 0)

def AddIdBattery(builder, idBattery):
    BatteryDetails_AbridgedAddIdBattery(builder, idBattery)

def BatteryDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    BatteryDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def BatteryDetails_AbridgedAddTechnology(builder, technology):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(technology), 0)

def AddTechnology(builder, technology):
    BatteryDetails_AbridgedAddTechnology(builder, technology)

def BatteryDetails_AbridgedAddCapacity(builder, capacity):
    builder.PrependFloat64Slot(4, capacity, 0.0)

def AddCapacity(builder, capacity):
    BatteryDetails_AbridgedAddCapacity(builder, capacity)

def BatteryDetails_AbridgedAddDischargeDepth(builder, dischargeDepth):
    builder.PrependFloat64Slot(5, dischargeDepth, 0.0)

def AddDischargeDepth(builder, dischargeDepth):
    BatteryDetails_AbridgedAddDischargeDepth(builder, dischargeDepth)

def BatteryDetails_AbridgedAddModel(builder, model):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(model), 0)

def AddModel(builder, model):
    BatteryDetails_AbridgedAddModel(builder, model)

def BatteryDetails_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    BatteryDetails_AbridgedAddDescription(builder, description)

def BatteryDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    BatteryDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def BatteryDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    BatteryDetails_AbridgedAddCreatedAt(builder, createdAt)

def BatteryDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    BatteryDetails_AbridgedAddCreatedBy(builder, createdBy)

def BatteryDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    BatteryDetails_AbridgedAddSource(builder, source)

def BatteryDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    BatteryDetails_AbridgedAddOrigin(builder, origin)

def BatteryDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    BatteryDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def BatteryDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(14, dataMode, 0)

def AddDataMode(builder, dataMode):
    BatteryDetails_AbridgedAddDataMode(builder, dataMode)

def BatteryDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return BatteryDetails_AbridgedEnd(builder)


class BatteryDetails_AbridgedT(object):

    # BatteryDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idBattery = None  # type: str
        self.classificationMarking = None  # type: str
        self.technology = None  # type: str
        self.capacity = 0.0  # type: float
        self.dischargeDepth = 0.0  # type: float
        self.model = None  # type: str
        self.description = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        batteryDetailsAbridged = BatteryDetails_Abridged()
        batteryDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(batteryDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, batteryDetailsAbridged):
        x = BatteryDetails_AbridgedT()
        x._UnPack(batteryDetailsAbridged)
        return x

    # BatteryDetails_AbridgedT
    def _UnPack(self, batteryDetailsAbridged):
        if batteryDetailsAbridged is None:
            return
        self.id = batteryDetailsAbridged.Id()
        self.idBattery = batteryDetailsAbridged.IdBattery()
        self.classificationMarking = batteryDetailsAbridged.ClassificationMarking()
        self.technology = batteryDetailsAbridged.Technology()
        self.capacity = batteryDetailsAbridged.Capacity()
        self.dischargeDepth = batteryDetailsAbridged.DischargeDepth()
        self.model = batteryDetailsAbridged.Model()
        self.description = batteryDetailsAbridged.Description()
        self.manufacturerOrgId = batteryDetailsAbridged.ManufacturerOrgId()
        self.createdAt = batteryDetailsAbridged.CreatedAt()
        self.createdBy = batteryDetailsAbridged.CreatedBy()
        self.source = batteryDetailsAbridged.Source()
        self.origin = batteryDetailsAbridged.Origin()
        self.origNetwork = batteryDetailsAbridged.OrigNetwork()
        self.dataMode = batteryDetailsAbridged.DataMode()

    # BatteryDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idBattery is not None:
            idBattery = builder.CreateString(self.idBattery)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.technology is not None:
            technology = builder.CreateString(self.technology)
        if self.model is not None:
            model = builder.CreateString(self.model)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        BatteryDetails_AbridgedStart(builder)
        if self.id is not None:
            BatteryDetails_AbridgedAddId(builder, id)
        if self.idBattery is not None:
            BatteryDetails_AbridgedAddIdBattery(builder, idBattery)
        if self.classificationMarking is not None:
            BatteryDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.technology is not None:
            BatteryDetails_AbridgedAddTechnology(builder, technology)
        BatteryDetails_AbridgedAddCapacity(builder, self.capacity)
        BatteryDetails_AbridgedAddDischargeDepth(builder, self.dischargeDepth)
        if self.model is not None:
            BatteryDetails_AbridgedAddModel(builder, model)
        if self.description is not None:
            BatteryDetails_AbridgedAddDescription(builder, description)
        if self.manufacturerOrgId is not None:
            BatteryDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.createdAt is not None:
            BatteryDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            BatteryDetails_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            BatteryDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            BatteryDetails_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            BatteryDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        BatteryDetails_AbridgedAddDataMode(builder, self.dataMode)
        batteryDetailsAbridged = BatteryDetails_AbridgedEnd(builder)
        return batteryDetailsAbridged
