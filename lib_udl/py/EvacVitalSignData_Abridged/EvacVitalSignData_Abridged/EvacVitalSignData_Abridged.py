# automatically generated by the FlatBuffers compiler, do not modify

# namespace: EvacVitalSignData_Abridged

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Information obtained for vital signs.
class EvacVitalSignData_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacVitalSignData_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacVitalSignData_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EvacVitalSignData_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
    # Example: HEART RATE
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacVitalSignData_Abridged
    def VitalSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
    # Example: 120
    # Constraints: No constraints specified.
    # EvacVitalSignData_Abridged
    def VitalSign1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
    # Example: 80
    # Constraints: No constraints specified.
    # EvacVitalSignData_Abridged
    def VitalSign2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Medical confidence factor.
    # Example: 1
    # Constraints: No constraints specified.
    # EvacVitalSignData_Abridged
    def MedConfFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
    # Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacVitalSignData_Abridged
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacVitalSignData_AbridgedStart(builder):
    builder.StartObject(5)

def Start(builder):
    EvacVitalSignData_AbridgedStart(builder)

def EvacVitalSignData_AbridgedAddVitalSign(builder, vitalSign):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vitalSign), 0)

def AddVitalSign(builder, vitalSign):
    EvacVitalSignData_AbridgedAddVitalSign(builder, vitalSign)

def EvacVitalSignData_AbridgedAddVitalSign1(builder, vitalSign1):
    builder.PrependFloat64Slot(1, vitalSign1, 0.0)

def AddVitalSign1(builder, vitalSign1):
    EvacVitalSignData_AbridgedAddVitalSign1(builder, vitalSign1)

def EvacVitalSignData_AbridgedAddVitalSign2(builder, vitalSign2):
    builder.PrependFloat64Slot(2, vitalSign2, 0.0)

def AddVitalSign2(builder, vitalSign2):
    EvacVitalSignData_AbridgedAddVitalSign2(builder, vitalSign2)

def EvacVitalSignData_AbridgedAddMedConfFactor(builder, medConfFactor):
    builder.PrependInt32Slot(3, medConfFactor, 0)

def AddMedConfFactor(builder, medConfFactor):
    EvacVitalSignData_AbridgedAddMedConfFactor(builder, medConfFactor)

def EvacVitalSignData_AbridgedAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacVitalSignData_AbridgedAddTime(builder, time)

def EvacVitalSignData_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacVitalSignData_AbridgedEnd(builder)


class EvacVitalSignData_AbridgedT(object):

    # EvacVitalSignData_AbridgedT
    def __init__(self):
        self.vitalSign = None  # type: str
        self.vitalSign1 = 0.0  # type: float
        self.vitalSign2 = 0.0  # type: float
        self.medConfFactor = 0  # type: int
        self.time = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacVitalSignDataAbridged = EvacVitalSignData_Abridged()
        evacVitalSignDataAbridged.Init(buf, pos)
        return cls.InitFromObj(evacVitalSignDataAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacVitalSignDataAbridged):
        x = EvacVitalSignData_AbridgedT()
        x._UnPack(evacVitalSignDataAbridged)
        return x

    # EvacVitalSignData_AbridgedT
    def _UnPack(self, evacVitalSignDataAbridged):
        if evacVitalSignDataAbridged is None:
            return
        self.vitalSign = evacVitalSignDataAbridged.VitalSign()
        self.vitalSign1 = evacVitalSignDataAbridged.VitalSign1()
        self.vitalSign2 = evacVitalSignDataAbridged.VitalSign2()
        self.medConfFactor = evacVitalSignDataAbridged.MedConfFactor()
        self.time = evacVitalSignDataAbridged.Time()

    # EvacVitalSignData_AbridgedT
    def Pack(self, builder):
        if self.vitalSign is not None:
            vitalSign = builder.CreateString(self.vitalSign)
        if self.time is not None:
            time = builder.CreateString(self.time)
        EvacVitalSignData_AbridgedStart(builder)
        if self.vitalSign is not None:
            EvacVitalSignData_AbridgedAddVitalSign(builder, vitalSign)
        EvacVitalSignData_AbridgedAddVitalSign1(builder, self.vitalSign1)
        EvacVitalSignData_AbridgedAddVitalSign2(builder, self.vitalSign2)
        EvacVitalSignData_AbridgedAddMedConfFactor(builder, self.medConfFactor)
        if self.time is not None:
            EvacVitalSignData_AbridgedAddTime(builder, time)
        evacVitalSignDataAbridged = EvacVitalSignData_AbridgedEnd(builder)
        return evacVitalSignDataAbridged
