# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
class LaunchSiteDetails_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchSiteDetails_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchSiteDetails_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LaunchSiteDetails_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x41\x55\x4E", size_prefixed=size_prefixed)

    # LaunchSiteDetails_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LAUNCHSITEDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchSiteDetails_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent launch site record.
    # Example: /// Example: LAUNCHSITE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchSiteDetails_Full
    def IdLaunchSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchSiteDetails_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
    # Example: /// Example: LOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchSiteDetails_Full
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
    # Example: /// Example: Example-group-name
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSiteDetails_Full
    def LaunchGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
    # Example: /// Example: [10.23, 10.23, 12.23, 14.23]
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Full
    def AvailableInclinations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LaunchSiteDetails_Full
    def AvailableInclinationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LaunchSiteDetails_Full
    def AvailableInclinationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Notes/description of the launch site.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # LaunchSiteDetails_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSiteDetails_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSiteDetails_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSiteDetails_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSiteDetails_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchSiteDetails_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchSiteDetails_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LaunchSiteDetails_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LaunchSiteDetails_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Full
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LaunchSiteDetails_FullStart(builder):
    builder.StartObject(17)

def Start(builder):
    LaunchSiteDetails_FullStart(builder)

def LaunchSiteDetails_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchSiteDetails_FullAddId(builder, id)

def LaunchSiteDetails_FullAddIdLaunchSite(builder, idLaunchSite):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idLaunchSite), 0)

def AddIdLaunchSite(builder, idLaunchSite):
    LaunchSiteDetails_FullAddIdLaunchSite(builder, idLaunchSite)

def LaunchSiteDetails_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchSiteDetails_FullAddClassificationMarking(builder, classificationMarking)

def LaunchSiteDetails_FullAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    LaunchSiteDetails_FullAddIdLocation(builder, idLocation)

def LaunchSiteDetails_FullAddLaunchGroup(builder, launchGroup):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(launchGroup), 0)

def AddLaunchGroup(builder, launchGroup):
    LaunchSiteDetails_FullAddLaunchGroup(builder, launchGroup)

def LaunchSiteDetails_FullAddAvailableInclinations(builder, availableInclinations):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(availableInclinations), 0)

def AddAvailableInclinations(builder, availableInclinations):
    LaunchSiteDetails_FullAddAvailableInclinations(builder, availableInclinations)

def LaunchSiteDetails_FullStartAvailableInclinationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAvailableInclinationsVector(builder, numElems):
    return LaunchSiteDetails_FullStartAvailableInclinationsVector(builder, numElems)

def LaunchSiteDetails_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    LaunchSiteDetails_FullAddDescription(builder, description)

def LaunchSiteDetails_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchSiteDetails_FullAddCreatedAt(builder, createdAt)

def LaunchSiteDetails_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchSiteDetails_FullAddCreatedBy(builder, createdBy)

def LaunchSiteDetails_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    LaunchSiteDetails_FullAddUpdatedAt(builder, updatedAt)

def LaunchSiteDetails_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    LaunchSiteDetails_FullAddUpdatedBy(builder, updatedBy)

def LaunchSiteDetails_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchSiteDetails_FullAddSource(builder, source)

def LaunchSiteDetails_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchSiteDetails_FullAddOrigin(builder, origin)

def LaunchSiteDetails_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchSiteDetails_FullAddOrigNetwork(builder, origNetwork)

def LaunchSiteDetails_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(14, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchSiteDetails_FullAddDataMode(builder, dataMode)

def LaunchSiteDetails_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    LaunchSiteDetails_FullAddTags(builder, tags)

def LaunchSiteDetails_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return LaunchSiteDetails_FullStartTagsVector(builder, numElems)

def LaunchSiteDetails_FullAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    LaunchSiteDetails_FullAddLocation(builder, location)

def LaunchSiteDetails_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchSiteDetails_FullEnd(builder)

try:
    from typing import List
except:
    pass

class LaunchSiteDetails_FullT(object):

    # LaunchSiteDetails_FullT
    def __init__(self):
        self.id = None  # type: str
        self.idLaunchSite = None  # type: str
        self.classificationMarking = None  # type: str
        self.idLocation = None  # type: str
        self.launchGroup = None  # type: str
        self.availableInclinations = None  # type: List[str]
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.location = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchSiteDetailsFull = LaunchSiteDetails_Full()
        launchSiteDetailsFull.Init(buf, pos)
        return cls.InitFromObj(launchSiteDetailsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchSiteDetailsFull):
        x = LaunchSiteDetails_FullT()
        x._UnPack(launchSiteDetailsFull)
        return x

    # LaunchSiteDetails_FullT
    def _UnPack(self, launchSiteDetailsFull):
        if launchSiteDetailsFull is None:
            return
        self.id = launchSiteDetailsFull.Id()
        self.idLaunchSite = launchSiteDetailsFull.IdLaunchSite()
        self.classificationMarking = launchSiteDetailsFull.ClassificationMarking()
        self.idLocation = launchSiteDetailsFull.IdLocation()
        self.launchGroup = launchSiteDetailsFull.LaunchGroup()
        if not launchSiteDetailsFull.AvailableInclinationsIsNone():
            self.availableInclinations = []
            for i in range(launchSiteDetailsFull.AvailableInclinationsLength()):
                self.availableInclinations.append(launchSiteDetailsFull.AvailableInclinations(i))
        self.description = launchSiteDetailsFull.Description()
        self.createdAt = launchSiteDetailsFull.CreatedAt()
        self.createdBy = launchSiteDetailsFull.CreatedBy()
        self.updatedAt = launchSiteDetailsFull.UpdatedAt()
        self.updatedBy = launchSiteDetailsFull.UpdatedBy()
        self.source = launchSiteDetailsFull.Source()
        self.origin = launchSiteDetailsFull.Origin()
        self.origNetwork = launchSiteDetailsFull.OrigNetwork()
        self.dataMode = launchSiteDetailsFull.DataMode()
        if not launchSiteDetailsFull.TagsIsNone():
            self.tags = []
            for i in range(launchSiteDetailsFull.TagsLength()):
                self.tags.append(launchSiteDetailsFull.Tags(i))
        self.location = launchSiteDetailsFull.Location()

    # LaunchSiteDetails_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idLaunchSite is not None:
            idLaunchSite = builder.CreateString(self.idLaunchSite)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.launchGroup is not None:
            launchGroup = builder.CreateString(self.launchGroup)
        if self.availableInclinations is not None:
            availableInclinationslist = []
            for i in range(len(self.availableInclinations)):
                availableInclinationslist.append(builder.CreateString(self.availableInclinations[i]))
            LaunchSiteDetails_FullStartAvailableInclinationsVector(builder, len(self.availableInclinations))
            for i in reversed(range(len(self.availableInclinations))):
                builder.PrependUOffsetTRelative(availableInclinationslist[i])
            availableInclinations = builder.EndVector()
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            LaunchSiteDetails_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.location is not None:
            location = builder.CreateString(self.location)
        LaunchSiteDetails_FullStart(builder)
        if self.id is not None:
            LaunchSiteDetails_FullAddId(builder, id)
        if self.idLaunchSite is not None:
            LaunchSiteDetails_FullAddIdLaunchSite(builder, idLaunchSite)
        if self.classificationMarking is not None:
            LaunchSiteDetails_FullAddClassificationMarking(builder, classificationMarking)
        if self.idLocation is not None:
            LaunchSiteDetails_FullAddIdLocation(builder, idLocation)
        if self.launchGroup is not None:
            LaunchSiteDetails_FullAddLaunchGroup(builder, launchGroup)
        if self.availableInclinations is not None:
            LaunchSiteDetails_FullAddAvailableInclinations(builder, availableInclinations)
        if self.description is not None:
            LaunchSiteDetails_FullAddDescription(builder, description)
        if self.createdAt is not None:
            LaunchSiteDetails_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchSiteDetails_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            LaunchSiteDetails_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            LaunchSiteDetails_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            LaunchSiteDetails_FullAddSource(builder, source)
        if self.origin is not None:
            LaunchSiteDetails_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            LaunchSiteDetails_FullAddOrigNetwork(builder, origNetwork)
        LaunchSiteDetails_FullAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            LaunchSiteDetails_FullAddTags(builder, tags)
        if self.location is not None:
            LaunchSiteDetails_FullAddLocation(builder, location)
        launchSiteDetailsFull = LaunchSiteDetails_FullEnd(builder)
        return launchSiteDetailsFull
