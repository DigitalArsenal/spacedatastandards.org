# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
class RFObservation_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RFObservation_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRFObservation_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RFObservation_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x46\x4F\x42", size_prefixed=size_prefixed)

    # RFObservation_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: RFOBSERVATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFObservation_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFObservation_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservation_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservation_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
    # Example: /// Example: RF
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFObservation_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 32258
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservation_Abridged
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the track to which this observation belongs.
    # Example: /// Example: TRACK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservation_Abridged
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIG-OBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIG-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Optional identifier provided by observation source to indicate the transponder used for this measurement.
    # Example: /// Example: TRANSPONDER-A
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def Transponder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # azimuth angle in degrees and J2000 coordinate frame.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the azimuth angle measurement, in degrees.
    # Example: /// Example: 2.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def AzimuthUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the azimuth in degrees per second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def AzimuthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # elevation in degrees and J2000 coordinate frame.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the elevation angle measurement, in degrees.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def ElevationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the elevation in degrees per second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def ElevationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target range in km.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range measurement, in kilometers.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def RangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the range in km/sec.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def RangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range rate measurement, in kilometers/second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def RangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target track or apparent range in km.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def TrackRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.2
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 80.3
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ELINT notation.
    # Example: /// Example: Ex. ELINT
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservation_Abridged
    def Elnot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Center carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Nominal or expected center carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def NominalFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Start carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def StartFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # End carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def EndFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured power of the center carrier frequency in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def RelativeCarrierPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured spectrum analyzer power of the center carrier frequency in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def SpectrumAnalyzerPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def RelativeNoiseFloor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Reference signal level, in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def ReferenceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Pgri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Confidence in the signal and its measurements and characterization.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Confidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True if the signal is incoming, false if outgoing.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Incoming(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Switch Point of the RFObservation record.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def SwitchPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def BaudRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Nominal or expected signal to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def NominalSnr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The antenna pointing dependent polarizer angle, in degrees.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Polarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    # Example: /// Example: H
    # Constraints: Minimum length = 0, Maximum length = 16
    # RFObservation_Abridged
    def PolarityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Channel of the RFObservation record.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Measured carrier power over noise (dBW/Hz).
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def PowerOverNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expected carrier power over noise (dBW/Hz).
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def NominalPowerOverNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expected bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def NominalBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Resolution bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def ResolutionBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Video bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def VideoBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured Equivalent Isotopically Radiated Power in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Eirp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expected Equivalent Isotopically Radiated Power in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def NominalEirp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum measured PSD value of the trace in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def MinPsd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum measured PSD value of the trace in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def MaxPsd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frequency Shift of the RFObservation record.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def FrequencyShift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peak of the RFObservation record.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def Peak(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Antenna name of the RFObservation record.
    # Example: /// Example: Antenna1
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def AntennaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
    # Example: /// Example: DETECTED
    # Constraints: Minimum length = 0, Maximum length = 32
    # RFObservation_Abridged
    def DetectionStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    # Example: /// Example: SURVEY
    # Constraints: Minimum length = 0, Maximum length = 32
    # RFObservation_Abridged
    def CollectionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # RFObservation_Abridged
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFObservation_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFObservation_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFObservation_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Noise power density, in dBW-Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def NoisePwrDensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Carrier standard (e.g. DVB-S2, 802.11g, etc.).
    # Example: /// Example: DVB-S2
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservation_Abridged
    def CarrierStandard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
    # Example: /// Example: Auto
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservation_Abridged
    def Modulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def InnerCodingRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def OuterCodingRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Transmit pulse shaping filter typ (e.g. RRC).
    # Example: /// Example: RRC
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservation_Abridged
    def TransmitFilterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transmit pulse shaping filter roll-off value.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def TransmitFilterRollOff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Symbol to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def SymbolToNoiseRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The ratio of bit errors per number of received bits.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservation_Abridged
    def BitErrorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFObservation_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservation_Abridged
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URL containing additional information on this observation.
    # Example: /// Example: https://some-url
    # Constraints: Minimum length = 0, Maximum length = 2048
    # RFObservation_Abridged
    def Url(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RFObservation_AbridgedStart(builder):
    builder.StartObject(81)

def Start(builder):
    RFObservation_AbridgedStart(builder)

def RFObservation_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RFObservation_AbridgedAddId(builder, id)

def RFObservation_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RFObservation_AbridgedAddClassificationMarking(builder, classificationMarking)

def RFObservation_AbridgedAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    RFObservation_AbridgedAddObTime(builder, obTime)

def RFObservation_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    RFObservation_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def RFObservation_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    RFObservation_AbridgedAddIdSensor(builder, idSensor)

def RFObservation_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    RFObservation_AbridgedAddType(builder, type)

def RFObservation_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    RFObservation_AbridgedAddSatNo(builder, satNo)

def RFObservation_AbridgedAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    RFObservation_AbridgedAddTaskId(builder, taskId)

def RFObservation_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    RFObservation_AbridgedAddTransactionId(builder, transactionId)

def RFObservation_AbridgedAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    RFObservation_AbridgedAddTrackId(builder, trackId)

def RFObservation_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    RFObservation_AbridgedAddOrigObjectId(builder, origObjectId)

def RFObservation_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    RFObservation_AbridgedAddOrigSensorId(builder, origSensorId)

def RFObservation_AbridgedAddUct(builder, uct):
    builder.PrependBoolSlot(12, uct, 0)

def AddUct(builder, uct):
    RFObservation_AbridgedAddUct(builder, uct)

def RFObservation_AbridgedAddTransponder(builder, transponder):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(transponder), 0)

def AddTransponder(builder, transponder):
    RFObservation_AbridgedAddTransponder(builder, transponder)

def RFObservation_AbridgedAddAzimuth(builder, azimuth):
    builder.PrependFloat64Slot(14, azimuth, 0.0)

def AddAzimuth(builder, azimuth):
    RFObservation_AbridgedAddAzimuth(builder, azimuth)

def RFObservation_AbridgedAddAzimuthUnc(builder, azimuthUnc):
    builder.PrependFloat64Slot(15, azimuthUnc, 0.0)

def AddAzimuthUnc(builder, azimuthUnc):
    RFObservation_AbridgedAddAzimuthUnc(builder, azimuthUnc)

def RFObservation_AbridgedAddAzimuthRate(builder, azimuthRate):
    builder.PrependFloat64Slot(16, azimuthRate, 0.0)

def AddAzimuthRate(builder, azimuthRate):
    RFObservation_AbridgedAddAzimuthRate(builder, azimuthRate)

def RFObservation_AbridgedAddElevation(builder, elevation):
    builder.PrependFloat64Slot(17, elevation, 0.0)

def AddElevation(builder, elevation):
    RFObservation_AbridgedAddElevation(builder, elevation)

def RFObservation_AbridgedAddElevationUnc(builder, elevationUnc):
    builder.PrependFloat64Slot(18, elevationUnc, 0.0)

def AddElevationUnc(builder, elevationUnc):
    RFObservation_AbridgedAddElevationUnc(builder, elevationUnc)

def RFObservation_AbridgedAddElevationRate(builder, elevationRate):
    builder.PrependFloat64Slot(19, elevationRate, 0.0)

def AddElevationRate(builder, elevationRate):
    RFObservation_AbridgedAddElevationRate(builder, elevationRate)

def RFObservation_AbridgedAddRange(builder, range):
    builder.PrependFloat64Slot(20, range, 0.0)

def AddRange(builder, range):
    RFObservation_AbridgedAddRange(builder, range)

def RFObservation_AbridgedAddRangeUnc(builder, rangeUnc):
    builder.PrependFloat64Slot(21, rangeUnc, 0.0)

def AddRangeUnc(builder, rangeUnc):
    RFObservation_AbridgedAddRangeUnc(builder, rangeUnc)

def RFObservation_AbridgedAddRangeRate(builder, rangeRate):
    builder.PrependFloat64Slot(22, rangeRate, 0.0)

def AddRangeRate(builder, rangeRate):
    RFObservation_AbridgedAddRangeRate(builder, rangeRate)

def RFObservation_AbridgedAddRangeRateUnc(builder, rangeRateUnc):
    builder.PrependFloat64Slot(23, rangeRateUnc, 0.0)

def AddRangeRateUnc(builder, rangeRateUnc):
    RFObservation_AbridgedAddRangeRateUnc(builder, rangeRateUnc)

def RFObservation_AbridgedAddTrackRange(builder, trackRange):
    builder.PrependFloat64Slot(24, trackRange, 0.0)

def AddTrackRange(builder, trackRange):
    RFObservation_AbridgedAddTrackRange(builder, trackRange)

def RFObservation_AbridgedAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(25, senlat, 0.0)

def AddSenlat(builder, senlat):
    RFObservation_AbridgedAddSenlat(builder, senlat)

def RFObservation_AbridgedAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(26, senlon, 0.0)

def AddSenlon(builder, senlon):
    RFObservation_AbridgedAddSenlon(builder, senlon)

def RFObservation_AbridgedAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(27, senalt, 0.0)

def AddSenalt(builder, senalt):
    RFObservation_AbridgedAddSenalt(builder, senalt)

def RFObservation_AbridgedAddElnot(builder, elnot):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(elnot), 0)

def AddElnot(builder, elnot):
    RFObservation_AbridgedAddElnot(builder, elnot)

def RFObservation_AbridgedAddFrequency(builder, frequency):
    builder.PrependFloat64Slot(29, frequency, 0.0)

def AddFrequency(builder, frequency):
    RFObservation_AbridgedAddFrequency(builder, frequency)

def RFObservation_AbridgedAddNominalFrequency(builder, nominalFrequency):
    builder.PrependFloat64Slot(30, nominalFrequency, 0.0)

def AddNominalFrequency(builder, nominalFrequency):
    RFObservation_AbridgedAddNominalFrequency(builder, nominalFrequency)

def RFObservation_AbridgedAddStartFrequency(builder, startFrequency):
    builder.PrependFloat64Slot(31, startFrequency, 0.0)

def AddStartFrequency(builder, startFrequency):
    RFObservation_AbridgedAddStartFrequency(builder, startFrequency)

def RFObservation_AbridgedAddEndFrequency(builder, endFrequency):
    builder.PrependFloat64Slot(32, endFrequency, 0.0)

def AddEndFrequency(builder, endFrequency):
    RFObservation_AbridgedAddEndFrequency(builder, endFrequency)

def RFObservation_AbridgedAddRelativeCarrierPower(builder, relativeCarrierPower):
    builder.PrependFloat64Slot(33, relativeCarrierPower, 0.0)

def AddRelativeCarrierPower(builder, relativeCarrierPower):
    RFObservation_AbridgedAddRelativeCarrierPower(builder, relativeCarrierPower)

def RFObservation_AbridgedAddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower):
    builder.PrependFloat64Slot(34, spectrumAnalyzerPower, 0.0)

def AddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower):
    RFObservation_AbridgedAddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower)

def RFObservation_AbridgedAddRelativeNoiseFloor(builder, relativeNoiseFloor):
    builder.PrependFloat64Slot(35, relativeNoiseFloor, 0.0)

def AddRelativeNoiseFloor(builder, relativeNoiseFloor):
    RFObservation_AbridgedAddRelativeNoiseFloor(builder, relativeNoiseFloor)

def RFObservation_AbridgedAddReferenceLevel(builder, referenceLevel):
    builder.PrependFloat64Slot(36, referenceLevel, 0.0)

def AddReferenceLevel(builder, referenceLevel):
    RFObservation_AbridgedAddReferenceLevel(builder, referenceLevel)

def RFObservation_AbridgedAddPgri(builder, pgri):
    builder.PrependFloat64Slot(37, pgri, 0.0)

def AddPgri(builder, pgri):
    RFObservation_AbridgedAddPgri(builder, pgri)

def RFObservation_AbridgedAddConfidence(builder, confidence):
    builder.PrependFloat64Slot(38, confidence, 0.0)

def AddConfidence(builder, confidence):
    RFObservation_AbridgedAddConfidence(builder, confidence)

def RFObservation_AbridgedAddIncoming(builder, incoming):
    builder.PrependBoolSlot(39, incoming, 0)

def AddIncoming(builder, incoming):
    RFObservation_AbridgedAddIncoming(builder, incoming)

def RFObservation_AbridgedAddSwitchPoint(builder, switchPoint):
    builder.PrependInt32Slot(40, switchPoint, 0)

def AddSwitchPoint(builder, switchPoint):
    RFObservation_AbridgedAddSwitchPoint(builder, switchPoint)

def RFObservation_AbridgedAddBaudRate(builder, baudRate):
    builder.PrependFloat64Slot(41, baudRate, 0.0)

def AddBaudRate(builder, baudRate):
    RFObservation_AbridgedAddBaudRate(builder, baudRate)

def RFObservation_AbridgedAddSnr(builder, snr):
    builder.PrependFloat64Slot(42, snr, 0.0)

def AddSnr(builder, snr):
    RFObservation_AbridgedAddSnr(builder, snr)

def RFObservation_AbridgedAddNominalSnr(builder, nominalSnr):
    builder.PrependFloat64Slot(43, nominalSnr, 0.0)

def AddNominalSnr(builder, nominalSnr):
    RFObservation_AbridgedAddNominalSnr(builder, nominalSnr)

def RFObservation_AbridgedAddPolarity(builder, polarity):
    builder.PrependFloat64Slot(44, polarity, 0.0)

def AddPolarity(builder, polarity):
    RFObservation_AbridgedAddPolarity(builder, polarity)

def RFObservation_AbridgedAddPolarityType(builder, polarityType):
    builder.PrependInt8Slot(45, polarityType, 0)

def AddPolarityType(builder, polarityType):
    RFObservation_AbridgedAddPolarityType(builder, polarityType)

def RFObservation_AbridgedAddChannel(builder, channel):
    builder.PrependInt32Slot(46, channel, 0)

def AddChannel(builder, channel):
    RFObservation_AbridgedAddChannel(builder, channel)

def RFObservation_AbridgedAddPowerOverNoise(builder, powerOverNoise):
    builder.PrependFloat64Slot(47, powerOverNoise, 0.0)

def AddPowerOverNoise(builder, powerOverNoise):
    RFObservation_AbridgedAddPowerOverNoise(builder, powerOverNoise)

def RFObservation_AbridgedAddNominalPowerOverNoise(builder, nominalPowerOverNoise):
    builder.PrependFloat64Slot(48, nominalPowerOverNoise, 0.0)

def AddNominalPowerOverNoise(builder, nominalPowerOverNoise):
    RFObservation_AbridgedAddNominalPowerOverNoise(builder, nominalPowerOverNoise)

def RFObservation_AbridgedAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(49, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    RFObservation_AbridgedAddBandwidth(builder, bandwidth)

def RFObservation_AbridgedAddNominalBandwidth(builder, nominalBandwidth):
    builder.PrependFloat64Slot(50, nominalBandwidth, 0.0)

def AddNominalBandwidth(builder, nominalBandwidth):
    RFObservation_AbridgedAddNominalBandwidth(builder, nominalBandwidth)

def RFObservation_AbridgedAddResolutionBandwidth(builder, resolutionBandwidth):
    builder.PrependFloat64Slot(51, resolutionBandwidth, 0.0)

def AddResolutionBandwidth(builder, resolutionBandwidth):
    RFObservation_AbridgedAddResolutionBandwidth(builder, resolutionBandwidth)

def RFObservation_AbridgedAddVideoBandwidth(builder, videoBandwidth):
    builder.PrependFloat64Slot(52, videoBandwidth, 0.0)

def AddVideoBandwidth(builder, videoBandwidth):
    RFObservation_AbridgedAddVideoBandwidth(builder, videoBandwidth)

def RFObservation_AbridgedAddEirp(builder, eirp):
    builder.PrependFloat64Slot(53, eirp, 0.0)

def AddEirp(builder, eirp):
    RFObservation_AbridgedAddEirp(builder, eirp)

def RFObservation_AbridgedAddNominalEirp(builder, nominalEirp):
    builder.PrependFloat64Slot(54, nominalEirp, 0.0)

def AddNominalEirp(builder, nominalEirp):
    RFObservation_AbridgedAddNominalEirp(builder, nominalEirp)

def RFObservation_AbridgedAddMinPsd(builder, minPsd):
    builder.PrependFloat64Slot(55, minPsd, 0.0)

def AddMinPsd(builder, minPsd):
    RFObservation_AbridgedAddMinPsd(builder, minPsd)

def RFObservation_AbridgedAddMaxPsd(builder, maxPsd):
    builder.PrependFloat64Slot(56, maxPsd, 0.0)

def AddMaxPsd(builder, maxPsd):
    RFObservation_AbridgedAddMaxPsd(builder, maxPsd)

def RFObservation_AbridgedAddFrequencyShift(builder, frequencyShift):
    builder.PrependFloat64Slot(57, frequencyShift, 0.0)

def AddFrequencyShift(builder, frequencyShift):
    RFObservation_AbridgedAddFrequencyShift(builder, frequencyShift)

def RFObservation_AbridgedAddPeak(builder, peak):
    builder.PrependBoolSlot(58, peak, 0)

def AddPeak(builder, peak):
    RFObservation_AbridgedAddPeak(builder, peak)

def RFObservation_AbridgedAddAntennaName(builder, antennaName):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(antennaName), 0)

def AddAntennaName(builder, antennaName):
    RFObservation_AbridgedAddAntennaName(builder, antennaName)

def RFObservation_AbridgedAddDetectionStatus(builder, detectionStatus):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(detectionStatus), 0)

def AddDetectionStatus(builder, detectionStatus):
    RFObservation_AbridgedAddDetectionStatus(builder, detectionStatus)

def RFObservation_AbridgedAddCollectionMode(builder, collectionMode):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(collectionMode), 0)

def AddCollectionMode(builder, collectionMode):
    RFObservation_AbridgedAddCollectionMode(builder, collectionMode)

def RFObservation_AbridgedAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    RFObservation_AbridgedAddRawFileUri(builder, rawFileUri)

def RFObservation_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RFObservation_AbridgedAddSource(builder, source)

def RFObservation_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RFObservation_AbridgedAddOrigin(builder, origin)

def RFObservation_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(65, dataMode, 0)

def AddDataMode(builder, dataMode):
    RFObservation_AbridgedAddDataMode(builder, dataMode)

def RFObservation_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RFObservation_AbridgedAddCreatedAt(builder, createdAt)

def RFObservation_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RFObservation_AbridgedAddCreatedBy(builder, createdBy)

def RFObservation_AbridgedAddNoisePwrDensity(builder, noisePwrDensity):
    builder.PrependFloat64Slot(68, noisePwrDensity, 0.0)

def AddNoisePwrDensity(builder, noisePwrDensity):
    RFObservation_AbridgedAddNoisePwrDensity(builder, noisePwrDensity)

def RFObservation_AbridgedAddCarrierStandard(builder, carrierStandard):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(carrierStandard), 0)

def AddCarrierStandard(builder, carrierStandard):
    RFObservation_AbridgedAddCarrierStandard(builder, carrierStandard)

def RFObservation_AbridgedAddModulation(builder, modulation):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(modulation), 0)

def AddModulation(builder, modulation):
    RFObservation_AbridgedAddModulation(builder, modulation)

def RFObservation_AbridgedAddInnerCodingRate(builder, innerCodingRate):
    builder.PrependInt32Slot(71, innerCodingRate, 0)

def AddInnerCodingRate(builder, innerCodingRate):
    RFObservation_AbridgedAddInnerCodingRate(builder, innerCodingRate)

def RFObservation_AbridgedAddOuterCodingRate(builder, outerCodingRate):
    builder.PrependInt32Slot(72, outerCodingRate, 0)

def AddOuterCodingRate(builder, outerCodingRate):
    RFObservation_AbridgedAddOuterCodingRate(builder, outerCodingRate)

def RFObservation_AbridgedAddTransmitFilterType(builder, transmitFilterType):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(transmitFilterType), 0)

def AddTransmitFilterType(builder, transmitFilterType):
    RFObservation_AbridgedAddTransmitFilterType(builder, transmitFilterType)

def RFObservation_AbridgedAddTransmitFilterRollOff(builder, transmitFilterRollOff):
    builder.PrependFloat64Slot(74, transmitFilterRollOff, 0.0)

def AddTransmitFilterRollOff(builder, transmitFilterRollOff):
    RFObservation_AbridgedAddTransmitFilterRollOff(builder, transmitFilterRollOff)

def RFObservation_AbridgedAddSymbolToNoiseRatio(builder, symbolToNoiseRatio):
    builder.PrependFloat64Slot(75, symbolToNoiseRatio, 0.0)

def AddSymbolToNoiseRatio(builder, symbolToNoiseRatio):
    RFObservation_AbridgedAddSymbolToNoiseRatio(builder, symbolToNoiseRatio)

def RFObservation_AbridgedAddBitErrorRate(builder, bitErrorRate):
    builder.PrependFloat64Slot(76, bitErrorRate, 0.0)

def AddBitErrorRate(builder, bitErrorRate):
    RFObservation_AbridgedAddBitErrorRate(builder, bitErrorRate)

def RFObservation_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    RFObservation_AbridgedAddOrigNetwork(builder, origNetwork)

def RFObservation_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    RFObservation_AbridgedAddSourceDl(builder, sourceDl)

def RFObservation_AbridgedAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    RFObservation_AbridgedAddDescriptor(builder, descriptor)

def RFObservation_AbridgedAddUrl(builder, url):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder, url):
    RFObservation_AbridgedAddUrl(builder, url)

def RFObservation_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return RFObservation_AbridgedEnd(builder)


class RFObservation_AbridgedT(object):

    # RFObservation_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSensor = None  # type: str
        self.type = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.transactionId = None  # type: str
        self.trackId = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId = None  # type: str
        self.uct = False  # type: bool
        self.transponder = None  # type: str
        self.azimuth = 0.0  # type: float
        self.azimuthUnc = 0.0  # type: float
        self.azimuthRate = 0.0  # type: float
        self.elevation = 0.0  # type: float
        self.elevationUnc = 0.0  # type: float
        self.elevationRate = 0.0  # type: float
        self.range = 0.0  # type: float
        self.rangeUnc = 0.0  # type: float
        self.rangeRate = 0.0  # type: float
        self.rangeRateUnc = 0.0  # type: float
        self.trackRange = 0.0  # type: float
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.elnot = None  # type: str
        self.frequency = 0.0  # type: float
        self.nominalFrequency = 0.0  # type: float
        self.startFrequency = 0.0  # type: float
        self.endFrequency = 0.0  # type: float
        self.relativeCarrierPower = 0.0  # type: float
        self.spectrumAnalyzerPower = 0.0  # type: float
        self.relativeNoiseFloor = 0.0  # type: float
        self.referenceLevel = 0.0  # type: float
        self.pgri = 0.0  # type: float
        self.confidence = 0.0  # type: float
        self.incoming = False  # type: bool
        self.switchPoint = 0  # type: int
        self.baudRate = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.nominalSnr = 0.0  # type: float
        self.polarity = 0.0  # type: float
        self.polarityType = 0  # type: int
        self.channel = 0  # type: int
        self.powerOverNoise = 0.0  # type: float
        self.nominalPowerOverNoise = 0.0  # type: float
        self.bandwidth = 0.0  # type: float
        self.nominalBandwidth = 0.0  # type: float
        self.resolutionBandwidth = 0.0  # type: float
        self.videoBandwidth = 0.0  # type: float
        self.eirp = 0.0  # type: float
        self.nominalEirp = 0.0  # type: float
        self.minPsd = 0.0  # type: float
        self.maxPsd = 0.0  # type: float
        self.frequencyShift = 0.0  # type: float
        self.peak = False  # type: bool
        self.antennaName = None  # type: str
        self.detectionStatus = None  # type: str
        self.collectionMode = None  # type: str
        self.rawFileUri = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.noisePwrDensity = 0.0  # type: float
        self.carrierStandard = None  # type: str
        self.modulation = None  # type: str
        self.innerCodingRate = 0  # type: int
        self.outerCodingRate = 0  # type: int
        self.transmitFilterType = None  # type: str
        self.transmitFilterRollOff = 0.0  # type: float
        self.symbolToNoiseRatio = 0.0  # type: float
        self.bitErrorRate = 0.0  # type: float
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.descriptor = None  # type: str
        self.url = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rfobservationAbridged = RFObservation_Abridged()
        rfobservationAbridged.Init(buf, pos)
        return cls.InitFromObj(rfobservationAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rfobservationAbridged):
        x = RFObservation_AbridgedT()
        x._UnPack(rfobservationAbridged)
        return x

    # RFObservation_AbridgedT
    def _UnPack(self, rfobservationAbridged):
        if rfobservationAbridged is None:
            return
        self.id = rfobservationAbridged.Id()
        self.classificationMarking = rfobservationAbridged.ClassificationMarking()
        self.obTime = rfobservationAbridged.ObTime()
        self.idOnOrbit = rfobservationAbridged.IdOnOrbit()
        self.idSensor = rfobservationAbridged.IdSensor()
        self.type = rfobservationAbridged.Type()
        self.satNo = rfobservationAbridged.SatNo()
        self.taskId = rfobservationAbridged.TaskId()
        self.transactionId = rfobservationAbridged.TransactionId()
        self.trackId = rfobservationAbridged.TrackId()
        self.origObjectId = rfobservationAbridged.OrigObjectId()
        self.origSensorId = rfobservationAbridged.OrigSensorId()
        self.uct = rfobservationAbridged.Uct()
        self.transponder = rfobservationAbridged.Transponder()
        self.azimuth = rfobservationAbridged.Azimuth()
        self.azimuthUnc = rfobservationAbridged.AzimuthUnc()
        self.azimuthRate = rfobservationAbridged.AzimuthRate()
        self.elevation = rfobservationAbridged.Elevation()
        self.elevationUnc = rfobservationAbridged.ElevationUnc()
        self.elevationRate = rfobservationAbridged.ElevationRate()
        self.range = rfobservationAbridged.Range()
        self.rangeUnc = rfobservationAbridged.RangeUnc()
        self.rangeRate = rfobservationAbridged.RangeRate()
        self.rangeRateUnc = rfobservationAbridged.RangeRateUnc()
        self.trackRange = rfobservationAbridged.TrackRange()
        self.senlat = rfobservationAbridged.Senlat()
        self.senlon = rfobservationAbridged.Senlon()
        self.senalt = rfobservationAbridged.Senalt()
        self.elnot = rfobservationAbridged.Elnot()
        self.frequency = rfobservationAbridged.Frequency()
        self.nominalFrequency = rfobservationAbridged.NominalFrequency()
        self.startFrequency = rfobservationAbridged.StartFrequency()
        self.endFrequency = rfobservationAbridged.EndFrequency()
        self.relativeCarrierPower = rfobservationAbridged.RelativeCarrierPower()
        self.spectrumAnalyzerPower = rfobservationAbridged.SpectrumAnalyzerPower()
        self.relativeNoiseFloor = rfobservationAbridged.RelativeNoiseFloor()
        self.referenceLevel = rfobservationAbridged.ReferenceLevel()
        self.pgri = rfobservationAbridged.Pgri()
        self.confidence = rfobservationAbridged.Confidence()
        self.incoming = rfobservationAbridged.Incoming()
        self.switchPoint = rfobservationAbridged.SwitchPoint()
        self.baudRate = rfobservationAbridged.BaudRate()
        self.snr = rfobservationAbridged.Snr()
        self.nominalSnr = rfobservationAbridged.NominalSnr()
        self.polarity = rfobservationAbridged.Polarity()
        self.polarityType = rfobservationAbridged.PolarityType()
        self.channel = rfobservationAbridged.Channel()
        self.powerOverNoise = rfobservationAbridged.PowerOverNoise()
        self.nominalPowerOverNoise = rfobservationAbridged.NominalPowerOverNoise()
        self.bandwidth = rfobservationAbridged.Bandwidth()
        self.nominalBandwidth = rfobservationAbridged.NominalBandwidth()
        self.resolutionBandwidth = rfobservationAbridged.ResolutionBandwidth()
        self.videoBandwidth = rfobservationAbridged.VideoBandwidth()
        self.eirp = rfobservationAbridged.Eirp()
        self.nominalEirp = rfobservationAbridged.NominalEirp()
        self.minPsd = rfobservationAbridged.MinPsd()
        self.maxPsd = rfobservationAbridged.MaxPsd()
        self.frequencyShift = rfobservationAbridged.FrequencyShift()
        self.peak = rfobservationAbridged.Peak()
        self.antennaName = rfobservationAbridged.AntennaName()
        self.detectionStatus = rfobservationAbridged.DetectionStatus()
        self.collectionMode = rfobservationAbridged.CollectionMode()
        self.rawFileUri = rfobservationAbridged.RawFileUri()
        self.source = rfobservationAbridged.Source()
        self.origin = rfobservationAbridged.Origin()
        self.dataMode = rfobservationAbridged.DataMode()
        self.createdAt = rfobservationAbridged.CreatedAt()
        self.createdBy = rfobservationAbridged.CreatedBy()
        self.noisePwrDensity = rfobservationAbridged.NoisePwrDensity()
        self.carrierStandard = rfobservationAbridged.CarrierStandard()
        self.modulation = rfobservationAbridged.Modulation()
        self.innerCodingRate = rfobservationAbridged.InnerCodingRate()
        self.outerCodingRate = rfobservationAbridged.OuterCodingRate()
        self.transmitFilterType = rfobservationAbridged.TransmitFilterType()
        self.transmitFilterRollOff = rfobservationAbridged.TransmitFilterRollOff()
        self.symbolToNoiseRatio = rfobservationAbridged.SymbolToNoiseRatio()
        self.bitErrorRate = rfobservationAbridged.BitErrorRate()
        self.origNetwork = rfobservationAbridged.OrigNetwork()
        self.sourceDl = rfobservationAbridged.SourceDl()
        self.descriptor = rfobservationAbridged.Descriptor()
        self.url = rfobservationAbridged.Url()

    # RFObservation_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.transponder is not None:
            transponder = builder.CreateString(self.transponder)
        if self.elnot is not None:
            elnot = builder.CreateString(self.elnot)
        if self.antennaName is not None:
            antennaName = builder.CreateString(self.antennaName)
        if self.detectionStatus is not None:
            detectionStatus = builder.CreateString(self.detectionStatus)
        if self.collectionMode is not None:
            collectionMode = builder.CreateString(self.collectionMode)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.carrierStandard is not None:
            carrierStandard = builder.CreateString(self.carrierStandard)
        if self.modulation is not None:
            modulation = builder.CreateString(self.modulation)
        if self.transmitFilterType is not None:
            transmitFilterType = builder.CreateString(self.transmitFilterType)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.url is not None:
            url = builder.CreateString(self.url)
        RFObservation_AbridgedStart(builder)
        if self.id is not None:
            RFObservation_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            RFObservation_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            RFObservation_AbridgedAddObTime(builder, obTime)
        if self.idOnOrbit is not None:
            RFObservation_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor is not None:
            RFObservation_AbridgedAddIdSensor(builder, idSensor)
        if self.type is not None:
            RFObservation_AbridgedAddType(builder, type)
        RFObservation_AbridgedAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            RFObservation_AbridgedAddTaskId(builder, taskId)
        if self.transactionId is not None:
            RFObservation_AbridgedAddTransactionId(builder, transactionId)
        if self.trackId is not None:
            RFObservation_AbridgedAddTrackId(builder, trackId)
        if self.origObjectId is not None:
            RFObservation_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.origSensorId is not None:
            RFObservation_AbridgedAddOrigSensorId(builder, origSensorId)
        RFObservation_AbridgedAddUct(builder, self.uct)
        if self.transponder is not None:
            RFObservation_AbridgedAddTransponder(builder, transponder)
        RFObservation_AbridgedAddAzimuth(builder, self.azimuth)
        RFObservation_AbridgedAddAzimuthUnc(builder, self.azimuthUnc)
        RFObservation_AbridgedAddAzimuthRate(builder, self.azimuthRate)
        RFObservation_AbridgedAddElevation(builder, self.elevation)
        RFObservation_AbridgedAddElevationUnc(builder, self.elevationUnc)
        RFObservation_AbridgedAddElevationRate(builder, self.elevationRate)
        RFObservation_AbridgedAddRange(builder, self.range)
        RFObservation_AbridgedAddRangeUnc(builder, self.rangeUnc)
        RFObservation_AbridgedAddRangeRate(builder, self.rangeRate)
        RFObservation_AbridgedAddRangeRateUnc(builder, self.rangeRateUnc)
        RFObservation_AbridgedAddTrackRange(builder, self.trackRange)
        RFObservation_AbridgedAddSenlat(builder, self.senlat)
        RFObservation_AbridgedAddSenlon(builder, self.senlon)
        RFObservation_AbridgedAddSenalt(builder, self.senalt)
        if self.elnot is not None:
            RFObservation_AbridgedAddElnot(builder, elnot)
        RFObservation_AbridgedAddFrequency(builder, self.frequency)
        RFObservation_AbridgedAddNominalFrequency(builder, self.nominalFrequency)
        RFObservation_AbridgedAddStartFrequency(builder, self.startFrequency)
        RFObservation_AbridgedAddEndFrequency(builder, self.endFrequency)
        RFObservation_AbridgedAddRelativeCarrierPower(builder, self.relativeCarrierPower)
        RFObservation_AbridgedAddSpectrumAnalyzerPower(builder, self.spectrumAnalyzerPower)
        RFObservation_AbridgedAddRelativeNoiseFloor(builder, self.relativeNoiseFloor)
        RFObservation_AbridgedAddReferenceLevel(builder, self.referenceLevel)
        RFObservation_AbridgedAddPgri(builder, self.pgri)
        RFObservation_AbridgedAddConfidence(builder, self.confidence)
        RFObservation_AbridgedAddIncoming(builder, self.incoming)
        RFObservation_AbridgedAddSwitchPoint(builder, self.switchPoint)
        RFObservation_AbridgedAddBaudRate(builder, self.baudRate)
        RFObservation_AbridgedAddSnr(builder, self.snr)
        RFObservation_AbridgedAddNominalSnr(builder, self.nominalSnr)
        RFObservation_AbridgedAddPolarity(builder, self.polarity)
        RFObservation_AbridgedAddPolarityType(builder, self.polarityType)
        RFObservation_AbridgedAddChannel(builder, self.channel)
        RFObservation_AbridgedAddPowerOverNoise(builder, self.powerOverNoise)
        RFObservation_AbridgedAddNominalPowerOverNoise(builder, self.nominalPowerOverNoise)
        RFObservation_AbridgedAddBandwidth(builder, self.bandwidth)
        RFObservation_AbridgedAddNominalBandwidth(builder, self.nominalBandwidth)
        RFObservation_AbridgedAddResolutionBandwidth(builder, self.resolutionBandwidth)
        RFObservation_AbridgedAddVideoBandwidth(builder, self.videoBandwidth)
        RFObservation_AbridgedAddEirp(builder, self.eirp)
        RFObservation_AbridgedAddNominalEirp(builder, self.nominalEirp)
        RFObservation_AbridgedAddMinPsd(builder, self.minPsd)
        RFObservation_AbridgedAddMaxPsd(builder, self.maxPsd)
        RFObservation_AbridgedAddFrequencyShift(builder, self.frequencyShift)
        RFObservation_AbridgedAddPeak(builder, self.peak)
        if self.antennaName is not None:
            RFObservation_AbridgedAddAntennaName(builder, antennaName)
        if self.detectionStatus is not None:
            RFObservation_AbridgedAddDetectionStatus(builder, detectionStatus)
        if self.collectionMode is not None:
            RFObservation_AbridgedAddCollectionMode(builder, collectionMode)
        if self.rawFileUri is not None:
            RFObservation_AbridgedAddRawFileUri(builder, rawFileUri)
        if self.source is not None:
            RFObservation_AbridgedAddSource(builder, source)
        if self.origin is not None:
            RFObservation_AbridgedAddOrigin(builder, origin)
        RFObservation_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            RFObservation_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RFObservation_AbridgedAddCreatedBy(builder, createdBy)
        RFObservation_AbridgedAddNoisePwrDensity(builder, self.noisePwrDensity)
        if self.carrierStandard is not None:
            RFObservation_AbridgedAddCarrierStandard(builder, carrierStandard)
        if self.modulation is not None:
            RFObservation_AbridgedAddModulation(builder, modulation)
        RFObservation_AbridgedAddInnerCodingRate(builder, self.innerCodingRate)
        RFObservation_AbridgedAddOuterCodingRate(builder, self.outerCodingRate)
        if self.transmitFilterType is not None:
            RFObservation_AbridgedAddTransmitFilterType(builder, transmitFilterType)
        RFObservation_AbridgedAddTransmitFilterRollOff(builder, self.transmitFilterRollOff)
        RFObservation_AbridgedAddSymbolToNoiseRatio(builder, self.symbolToNoiseRatio)
        RFObservation_AbridgedAddBitErrorRate(builder, self.bitErrorRate)
        if self.origNetwork is not None:
            RFObservation_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            RFObservation_AbridgedAddSourceDl(builder, sourceDl)
        if self.descriptor is not None:
            RFObservation_AbridgedAddDescriptor(builder, descriptor)
        if self.url is not None:
            RFObservation_AbridgedAddUrl(builder, url)
        rfobservationAbridged = RFObservation_AbridgedEnd(builder)
        return rfobservationAbridged
