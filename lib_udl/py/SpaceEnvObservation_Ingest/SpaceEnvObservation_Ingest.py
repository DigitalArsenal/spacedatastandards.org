# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// SpaceEnvObservation data.
class SpaceEnvObservation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpaceEnvObservation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpaceEnvObservation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SpaceEnvObservation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x50\x41\x43", size_prefixed=size_prefixed)

    # SpaceEnvObservation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
    # Constraints: Minimum length = 1, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SpaceEnvObservation_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of message associated with this record.
    # Example: /// Example: SODM
    # Constraints: Minimum length = 0, Maximum length = 16
    # SpaceEnvObservation_Ingest
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The external system which generated the message, if applicable.
    # Example: /// Example: System Name
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def GenSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
    # Constraints: Minimum length = 0, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
    # Example: /// Example: ECP
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-02-10T19:48:09.934Z
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def GenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that this record contains forecast data.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def Forecast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this record contains derived data.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def Derived(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
    # Example: /// Example: 41866
    # Constraints: Minimum length = 0, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
    # Example: /// Example: 41866
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: 41866
    # Constraints: Minimum length = 0, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: ECP-1
    # Constraints: Minimum length = 0, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ECP-1
    # Constraints: Minimum length = 0, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
    # Example: /// Example: ONORBIT
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def ObservatoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the observatory from which this data was collected.
    # Example: /// Example: GOES-16
    # Constraints: Minimum length = 0, Maximum length = 128
    # SpaceEnvObservation_Ingest
    def ObservatoryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional notes concerning the observatory.
    # Example: /// Example: Notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # SpaceEnvObservation_Ingest
    def ObservatoryNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
    # Example: /// Example: MAGNETOMETER
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def InstrumentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 38.8339
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -104.8214
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
    # Example: /// Example: 35785.3732
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # SpaceEnvObservation_Ingest
    def SenReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
    # Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def SenPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SpaceEnvObservation_Ingest
    def SenPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpaceEnvObservation_Ingest
    def SenPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
    # Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def SenVel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SpaceEnvObservation_Ingest
    def SenVelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpaceEnvObservation_Ingest
    def SenVelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # The sensor measurement type of the observation data contained in this record.
    # Example: /// Example: ENERGETIC PARTICLES
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def MeasType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The energy level bin of the sensor associated with this measurement.
    # Example: /// Example: 0500-700 keV
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def SenEnergyLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
    # Example: /// Example: ECPOBSET-478125
    # Constraints: Minimum length = 0, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def ObSetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
    # Example: /// Example: PROTON
    # Constraints: Minimum length = 0, Maximum length = 24
    # SpaceEnvObservation_Ingest
    def ParticleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of the observation, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-06-07T14:17:39.653Z
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A collection of individual space environment observations.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def SeoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SpaceEnvObservation_Ingest
    def SeoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpaceEnvObservation_Ingest
    def SeoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
    # Example: /// Example: GOOD
    # Constraints: Minimum length = 0, Maximum length = 16
    # SpaceEnvObservation_Ingest
    def Quality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Descriptive or additional information associated with this observation record.
    # Example: /// Example: Observation Data Description Text
    # Constraints: Minimum length = 0, Maximum length = 512
    # SpaceEnvObservation_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: energetic charged particle
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['SPACEENVOB', 'SGI']
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SpaceEnvObservation_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpaceEnvObservation_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
    # Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SpaceEnvObservation_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SpaceEnvObservation_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2023-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SpaceEnvObservation_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # SpaceEnvObservation_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 64
    # SpaceEnvObservation_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SpaceEnvObservation_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SpaceEnvObservation_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SpaceEnvObservation_IngestStart(builder):
    builder.StartObject(41)

def Start(builder):
    SpaceEnvObservation_IngestStart(builder)

def SpaceEnvObservation_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SpaceEnvObservation_IngestAddId(builder, id)

def SpaceEnvObservation_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SpaceEnvObservation_IngestAddClassificationMarking(builder, classificationMarking)

def SpaceEnvObservation_IngestAddMsgType(builder, msgType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(msgType), 0)

def AddMsgType(builder, msgType):
    SpaceEnvObservation_IngestAddMsgType(builder, msgType)

def SpaceEnvObservation_IngestAddGenSystem(builder, genSystem):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(genSystem), 0)

def AddGenSystem(builder, genSystem):
    SpaceEnvObservation_IngestAddGenSystem(builder, genSystem)

def SpaceEnvObservation_IngestAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    SpaceEnvObservation_IngestAddExternalId(builder, externalId)

def SpaceEnvObservation_IngestAddDataType(builder, dataType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)

def AddDataType(builder, dataType):
    SpaceEnvObservation_IngestAddDataType(builder, dataType)

def SpaceEnvObservation_IngestAddGenTime(builder, genTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(genTime), 0)

def AddGenTime(builder, genTime):
    SpaceEnvObservation_IngestAddGenTime(builder, genTime)

def SpaceEnvObservation_IngestAddForecast(builder, forecast):
    builder.PrependBoolSlot(7, forecast, 0)

def AddForecast(builder, forecast):
    SpaceEnvObservation_IngestAddForecast(builder, forecast)

def SpaceEnvObservation_IngestAddDerived(builder, derived):
    builder.PrependBoolSlot(8, derived, 0)

def AddDerived(builder, derived):
    SpaceEnvObservation_IngestAddDerived(builder, derived)

def SpaceEnvObservation_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    SpaceEnvObservation_IngestAddIdOnOrbit(builder, idOnOrbit)

def SpaceEnvObservation_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(10, satNo, 0)

def AddSatNo(builder, satNo):
    SpaceEnvObservation_IngestAddSatNo(builder, satNo)

def SpaceEnvObservation_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    SpaceEnvObservation_IngestAddOrigObjectId(builder, origObjectId)

def SpaceEnvObservation_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SpaceEnvObservation_IngestAddIdSensor(builder, idSensor)

def SpaceEnvObservation_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SpaceEnvObservation_IngestAddOrigSensorId(builder, origSensorId)

def SpaceEnvObservation_IngestAddObservatoryType(builder, observatoryType):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(observatoryType), 0)

def AddObservatoryType(builder, observatoryType):
    SpaceEnvObservation_IngestAddObservatoryType(builder, observatoryType)

def SpaceEnvObservation_IngestAddObservatoryName(builder, observatoryName):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(observatoryName), 0)

def AddObservatoryName(builder, observatoryName):
    SpaceEnvObservation_IngestAddObservatoryName(builder, observatoryName)

def SpaceEnvObservation_IngestAddObservatoryNotes(builder, observatoryNotes):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(observatoryNotes), 0)

def AddObservatoryNotes(builder, observatoryNotes):
    SpaceEnvObservation_IngestAddObservatoryNotes(builder, observatoryNotes)

def SpaceEnvObservation_IngestAddInstrumentType(builder, instrumentType):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(instrumentType), 0)

def AddInstrumentType(builder, instrumentType):
    SpaceEnvObservation_IngestAddInstrumentType(builder, instrumentType)

def SpaceEnvObservation_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(18, lat, 0.0)

def AddLat(builder, lat):
    SpaceEnvObservation_IngestAddLat(builder, lat)

def SpaceEnvObservation_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(19, lon, 0.0)

def AddLon(builder, lon):
    SpaceEnvObservation_IngestAddLon(builder, lon)

def SpaceEnvObservation_IngestAddAlt(builder, alt):
    builder.PrependFloat64Slot(20, alt, 0.0)

def AddAlt(builder, alt):
    SpaceEnvObservation_IngestAddAlt(builder, alt)

def SpaceEnvObservation_IngestAddSenReferenceFrame(builder, senReferenceFrame):
    builder.PrependInt8Slot(21, senReferenceFrame, 0)

def AddSenReferenceFrame(builder, senReferenceFrame):
    SpaceEnvObservation_IngestAddSenReferenceFrame(builder, senReferenceFrame)

def SpaceEnvObservation_IngestAddSenPos(builder, senPos):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(senPos), 0)

def AddSenPos(builder, senPos):
    SpaceEnvObservation_IngestAddSenPos(builder, senPos)

def SpaceEnvObservation_IngestStartSenPosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSenPosVector(builder, numElems):
    return SpaceEnvObservation_IngestStartSenPosVector(builder, numElems)

def SpaceEnvObservation_IngestAddSenVel(builder, senVel):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(senVel), 0)

def AddSenVel(builder, senVel):
    SpaceEnvObservation_IngestAddSenVel(builder, senVel)

def SpaceEnvObservation_IngestStartSenVelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSenVelVector(builder, numElems):
    return SpaceEnvObservation_IngestStartSenVelVector(builder, numElems)

def SpaceEnvObservation_IngestAddMeasType(builder, measType):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(measType), 0)

def AddMeasType(builder, measType):
    SpaceEnvObservation_IngestAddMeasType(builder, measType)

def SpaceEnvObservation_IngestAddSenEnergyLevel(builder, senEnergyLevel):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(senEnergyLevel), 0)

def AddSenEnergyLevel(builder, senEnergyLevel):
    SpaceEnvObservation_IngestAddSenEnergyLevel(builder, senEnergyLevel)

def SpaceEnvObservation_IngestAddObSetId(builder, obSetId):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(obSetId), 0)

def AddObSetId(builder, obSetId):
    SpaceEnvObservation_IngestAddObSetId(builder, obSetId)

def SpaceEnvObservation_IngestAddParticleType(builder, particleType):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(particleType), 0)

def AddParticleType(builder, particleType):
    SpaceEnvObservation_IngestAddParticleType(builder, particleType)

def SpaceEnvObservation_IngestAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    SpaceEnvObservation_IngestAddObTime(builder, obTime)

def SpaceEnvObservation_IngestAddSeoList(builder, seoList):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(seoList), 0)

def AddSeoList(builder, seoList):
    SpaceEnvObservation_IngestAddSeoList(builder, seoList)

def SpaceEnvObservation_IngestStartSeoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSeoListVector(builder, numElems):
    return SpaceEnvObservation_IngestStartSeoListVector(builder, numElems)

def SpaceEnvObservation_IngestAddQuality(builder, quality):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(quality), 0)

def AddQuality(builder, quality):
    SpaceEnvObservation_IngestAddQuality(builder, quality)

def SpaceEnvObservation_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    SpaceEnvObservation_IngestAddDescription(builder, description)

def SpaceEnvObservation_IngestAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    SpaceEnvObservation_IngestAddDescriptor(builder, descriptor)

def SpaceEnvObservation_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    SpaceEnvObservation_IngestAddSrcTyps(builder, srcTyps)

def SpaceEnvObservation_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return SpaceEnvObservation_IngestStartSrcTypsVector(builder, numElems)

def SpaceEnvObservation_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    SpaceEnvObservation_IngestAddSrcIds(builder, srcIds)

def SpaceEnvObservation_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return SpaceEnvObservation_IngestStartSrcIdsVector(builder, numElems)

def SpaceEnvObservation_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SpaceEnvObservation_IngestAddCreatedAt(builder, createdAt)

def SpaceEnvObservation_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SpaceEnvObservation_IngestAddCreatedBy(builder, createdBy)

def SpaceEnvObservation_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SpaceEnvObservation_IngestAddSource(builder, source)

def SpaceEnvObservation_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SpaceEnvObservation_IngestAddOrigin(builder, origin)

def SpaceEnvObservation_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(39, dataMode, 0)

def AddDataMode(builder, dataMode):
    SpaceEnvObservation_IngestAddDataMode(builder, dataMode)

def SpaceEnvObservation_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SpaceEnvObservation_IngestAddOrigNetwork(builder, origNetwork)

def SpaceEnvObservation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SpaceEnvObservation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class SpaceEnvObservation_IngestT(object):

    # SpaceEnvObservation_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.msgType = None  # type: str
        self.genSystem = None  # type: str
        self.externalId = None  # type: str
        self.dataType = None  # type: str
        self.genTime = None  # type: str
        self.forecast = False  # type: bool
        self.derived = False  # type: bool
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.observatoryType = None  # type: str
        self.observatoryName = None  # type: str
        self.observatoryNotes = None  # type: str
        self.instrumentType = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.senReferenceFrame = 0  # type: int
        self.senPos = None  # type: List[str]
        self.senVel = None  # type: List[str]
        self.measType = None  # type: str
        self.senEnergyLevel = None  # type: str
        self.obSetId = None  # type: str
        self.particleType = None  # type: str
        self.obTime = None  # type: str
        self.seoList = None  # type: List[str]
        self.quality = None  # type: str
        self.description = None  # type: str
        self.descriptor = None  # type: str
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        spaceEnvObservationIngest = SpaceEnvObservation_Ingest()
        spaceEnvObservationIngest.Init(buf, pos)
        return cls.InitFromObj(spaceEnvObservationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, spaceEnvObservationIngest):
        x = SpaceEnvObservation_IngestT()
        x._UnPack(spaceEnvObservationIngest)
        return x

    # SpaceEnvObservation_IngestT
    def _UnPack(self, spaceEnvObservationIngest):
        if spaceEnvObservationIngest is None:
            return
        self.id = spaceEnvObservationIngest.Id()
        self.classificationMarking = spaceEnvObservationIngest.ClassificationMarking()
        self.msgType = spaceEnvObservationIngest.MsgType()
        self.genSystem = spaceEnvObservationIngest.GenSystem()
        self.externalId = spaceEnvObservationIngest.ExternalId()
        self.dataType = spaceEnvObservationIngest.DataType()
        self.genTime = spaceEnvObservationIngest.GenTime()
        self.forecast = spaceEnvObservationIngest.Forecast()
        self.derived = spaceEnvObservationIngest.Derived()
        self.idOnOrbit = spaceEnvObservationIngest.IdOnOrbit()
        self.satNo = spaceEnvObservationIngest.SatNo()
        self.origObjectId = spaceEnvObservationIngest.OrigObjectId()
        self.idSensor = spaceEnvObservationIngest.IdSensor()
        self.origSensorId = spaceEnvObservationIngest.OrigSensorId()
        self.observatoryType = spaceEnvObservationIngest.ObservatoryType()
        self.observatoryName = spaceEnvObservationIngest.ObservatoryName()
        self.observatoryNotes = spaceEnvObservationIngest.ObservatoryNotes()
        self.instrumentType = spaceEnvObservationIngest.InstrumentType()
        self.lat = spaceEnvObservationIngest.Lat()
        self.lon = spaceEnvObservationIngest.Lon()
        self.alt = spaceEnvObservationIngest.Alt()
        self.senReferenceFrame = spaceEnvObservationIngest.SenReferenceFrame()
        if not spaceEnvObservationIngest.SenPosIsNone():
            self.senPos = []
            for i in range(spaceEnvObservationIngest.SenPosLength()):
                self.senPos.append(spaceEnvObservationIngest.SenPos(i))
        if not spaceEnvObservationIngest.SenVelIsNone():
            self.senVel = []
            for i in range(spaceEnvObservationIngest.SenVelLength()):
                self.senVel.append(spaceEnvObservationIngest.SenVel(i))
        self.measType = spaceEnvObservationIngest.MeasType()
        self.senEnergyLevel = spaceEnvObservationIngest.SenEnergyLevel()
        self.obSetId = spaceEnvObservationIngest.ObSetId()
        self.particleType = spaceEnvObservationIngest.ParticleType()
        self.obTime = spaceEnvObservationIngest.ObTime()
        if not spaceEnvObservationIngest.SeoListIsNone():
            self.seoList = []
            for i in range(spaceEnvObservationIngest.SeoListLength()):
                self.seoList.append(spaceEnvObservationIngest.SeoList(i))
        self.quality = spaceEnvObservationIngest.Quality()
        self.description = spaceEnvObservationIngest.Description()
        self.descriptor = spaceEnvObservationIngest.Descriptor()
        if not spaceEnvObservationIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(spaceEnvObservationIngest.SrcTypsLength()):
                self.srcTyps.append(spaceEnvObservationIngest.SrcTyps(i))
        if not spaceEnvObservationIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(spaceEnvObservationIngest.SrcIdsLength()):
                self.srcIds.append(spaceEnvObservationIngest.SrcIds(i))
        self.createdAt = spaceEnvObservationIngest.CreatedAt()
        self.createdBy = spaceEnvObservationIngest.CreatedBy()
        self.source = spaceEnvObservationIngest.Source()
        self.origin = spaceEnvObservationIngest.Origin()
        self.dataMode = spaceEnvObservationIngest.DataMode()
        self.origNetwork = spaceEnvObservationIngest.OrigNetwork()

    # SpaceEnvObservation_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.msgType is not None:
            msgType = builder.CreateString(self.msgType)
        if self.genSystem is not None:
            genSystem = builder.CreateString(self.genSystem)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.dataType is not None:
            dataType = builder.CreateString(self.dataType)
        if self.genTime is not None:
            genTime = builder.CreateString(self.genTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.observatoryType is not None:
            observatoryType = builder.CreateString(self.observatoryType)
        if self.observatoryName is not None:
            observatoryName = builder.CreateString(self.observatoryName)
        if self.observatoryNotes is not None:
            observatoryNotes = builder.CreateString(self.observatoryNotes)
        if self.instrumentType is not None:
            instrumentType = builder.CreateString(self.instrumentType)
        if self.senPos is not None:
            senPoslist = []
            for i in range(len(self.senPos)):
                senPoslist.append(builder.CreateString(self.senPos[i]))
            SpaceEnvObservation_IngestStartSenPosVector(builder, len(self.senPos))
            for i in reversed(range(len(self.senPos))):
                builder.PrependUOffsetTRelative(senPoslist[i])
            senPos = builder.EndVector()
        if self.senVel is not None:
            senVellist = []
            for i in range(len(self.senVel)):
                senVellist.append(builder.CreateString(self.senVel[i]))
            SpaceEnvObservation_IngestStartSenVelVector(builder, len(self.senVel))
            for i in reversed(range(len(self.senVel))):
                builder.PrependUOffsetTRelative(senVellist[i])
            senVel = builder.EndVector()
        if self.measType is not None:
            measType = builder.CreateString(self.measType)
        if self.senEnergyLevel is not None:
            senEnergyLevel = builder.CreateString(self.senEnergyLevel)
        if self.obSetId is not None:
            obSetId = builder.CreateString(self.obSetId)
        if self.particleType is not None:
            particleType = builder.CreateString(self.particleType)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.seoList is not None:
            seoListlist = []
            for i in range(len(self.seoList)):
                seoListlist.append(builder.CreateString(self.seoList[i]))
            SpaceEnvObservation_IngestStartSeoListVector(builder, len(self.seoList))
            for i in reversed(range(len(self.seoList))):
                builder.PrependUOffsetTRelative(seoListlist[i])
            seoList = builder.EndVector()
        if self.quality is not None:
            quality = builder.CreateString(self.quality)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            SpaceEnvObservation_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            SpaceEnvObservation_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SpaceEnvObservation_IngestStart(builder)
        if self.id is not None:
            SpaceEnvObservation_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            SpaceEnvObservation_IngestAddClassificationMarking(builder, classificationMarking)
        if self.msgType is not None:
            SpaceEnvObservation_IngestAddMsgType(builder, msgType)
        if self.genSystem is not None:
            SpaceEnvObservation_IngestAddGenSystem(builder, genSystem)
        if self.externalId is not None:
            SpaceEnvObservation_IngestAddExternalId(builder, externalId)
        if self.dataType is not None:
            SpaceEnvObservation_IngestAddDataType(builder, dataType)
        if self.genTime is not None:
            SpaceEnvObservation_IngestAddGenTime(builder, genTime)
        SpaceEnvObservation_IngestAddForecast(builder, self.forecast)
        SpaceEnvObservation_IngestAddDerived(builder, self.derived)
        if self.idOnOrbit is not None:
            SpaceEnvObservation_IngestAddIdOnOrbit(builder, idOnOrbit)
        SpaceEnvObservation_IngestAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            SpaceEnvObservation_IngestAddOrigObjectId(builder, origObjectId)
        if self.idSensor is not None:
            SpaceEnvObservation_IngestAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            SpaceEnvObservation_IngestAddOrigSensorId(builder, origSensorId)
        if self.observatoryType is not None:
            SpaceEnvObservation_IngestAddObservatoryType(builder, observatoryType)
        if self.observatoryName is not None:
            SpaceEnvObservation_IngestAddObservatoryName(builder, observatoryName)
        if self.observatoryNotes is not None:
            SpaceEnvObservation_IngestAddObservatoryNotes(builder, observatoryNotes)
        if self.instrumentType is not None:
            SpaceEnvObservation_IngestAddInstrumentType(builder, instrumentType)
        SpaceEnvObservation_IngestAddLat(builder, self.lat)
        SpaceEnvObservation_IngestAddLon(builder, self.lon)
        SpaceEnvObservation_IngestAddAlt(builder, self.alt)
        SpaceEnvObservation_IngestAddSenReferenceFrame(builder, self.senReferenceFrame)
        if self.senPos is not None:
            SpaceEnvObservation_IngestAddSenPos(builder, senPos)
        if self.senVel is not None:
            SpaceEnvObservation_IngestAddSenVel(builder, senVel)
        if self.measType is not None:
            SpaceEnvObservation_IngestAddMeasType(builder, measType)
        if self.senEnergyLevel is not None:
            SpaceEnvObservation_IngestAddSenEnergyLevel(builder, senEnergyLevel)
        if self.obSetId is not None:
            SpaceEnvObservation_IngestAddObSetId(builder, obSetId)
        if self.particleType is not None:
            SpaceEnvObservation_IngestAddParticleType(builder, particleType)
        if self.obTime is not None:
            SpaceEnvObservation_IngestAddObTime(builder, obTime)
        if self.seoList is not None:
            SpaceEnvObservation_IngestAddSeoList(builder, seoList)
        if self.quality is not None:
            SpaceEnvObservation_IngestAddQuality(builder, quality)
        if self.description is not None:
            SpaceEnvObservation_IngestAddDescription(builder, description)
        if self.descriptor is not None:
            SpaceEnvObservation_IngestAddDescriptor(builder, descriptor)
        if self.srcTyps is not None:
            SpaceEnvObservation_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            SpaceEnvObservation_IngestAddSrcIds(builder, srcIds)
        if self.createdAt is not None:
            SpaceEnvObservation_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SpaceEnvObservation_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SpaceEnvObservation_IngestAddSource(builder, source)
        if self.origin is not None:
            SpaceEnvObservation_IngestAddOrigin(builder, origin)
        SpaceEnvObservation_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            SpaceEnvObservation_IngestAddOrigNetwork(builder, origNetwork)
        spaceEnvObservationIngest = SpaceEnvObservation_IngestEnd(builder)
        return spaceEnvObservationIngest
