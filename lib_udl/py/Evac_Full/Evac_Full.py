# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
class Evac_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Evac_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvac_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Evac_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # Evac_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MEDEVACEVENT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Evac_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Evac_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
    # Example: /// Example: MedEvac-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Full
    def MedevacId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this medevac record (REQUEST, RESPONSE).
    # Example: /// Example: REQUEST
    # Constraints: Minimum length = 1, Maximum length = 8
    # Evac_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
    # Example: /// Example: GROUND
    # Constraints: Minimum length = 0, Maximum length = 8
    # Evac_Full
    def MissionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of a weather report associated with this evacuation.
    # Example: /// Example: WeatherReport-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Full
    def IdWeatherReport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of people Killed In Action.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # Evac_Full
    def NumKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of people Wounded In Action.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Evac_Full
    def NumWia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of littered personnel requiring evacuation.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # Evac_Full
    def NumLitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of ambulatory personnel requiring evacuation.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Evac_Full
    def NumAmbulatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating whether the mission requires medical personnel.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Evac_Full
    def MedicReq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Externally provided Medevac request number (e.g. MED.1.223908).
    # Example: /// Example: MED.1.234567
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Full
    def ReqNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The request time, in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # Evac_Full
    def ReqTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign of this medevac requestor.
    # Example: /// Example: Bravo
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Full
    def ReqCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The expected pickup time, in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-20T16:00:00.123Z
    # Constraints: No constraints specified.
    # Evac_Full
    def PickupTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 75.1234
    # Constraints: No constraints specified.
    # Evac_Full
    def PickupLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 175.1234
    # Constraints: No constraints specified.
    # Evac_Full
    def PickupLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
    # Example: /// Example: 30.1234
    # Constraints: No constraints specified.
    # Evac_Full
    def PickupAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    # Example: /// Example: 10.1234
    # Constraints: No constraints specified.
    # Evac_Full
    def Ce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height above lat/lon point, in meters (1-sigma, if representing linear error).
    # Example: /// Example: 5.1234
    # Constraints: No constraints specified.
    # Evac_Full
    def Le(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
    # Example: /// Example: ROCKY
    # Constraints: Minimum length = 0, Maximum length = 32
    # Evac_Full
    def Terrain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifying data for the terrain describing important obstacles in or around the zone.
    # Example: /// Example: N/A
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Full
    def ObstaclesRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifying data for the terrain describing any notable additional terrain features.
    # Example: /// Example: N/A
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Full
    def TerrainRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the zone.
    # Example: /// Example: example-zone
    # Constraints: Minimum length = 0, Maximum length = 128
    # Evac_Full
    def ZoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
    # Example: /// Example: ILLUMINATION
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Full
    def ZoneMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
    # Example: /// Example: NO ENEMY
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Full
    def ZoneSecurity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
    # Example: /// Example: RED
    # Constraints: Minimum length = 0, Maximum length = 32
    # Evac_Full
    def ZoneMarkingColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that the pickup site is hot and hostiles are in the area.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Evac_Full
    def ZoneHot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The contact frequency, in Hz, of the agency or zone controller.
    # Example: /// Example: 3.11
    # Constraints: No constraints specified.
    # Evac_Full
    def CntctFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The call sign of the zone controller.
    # Example: /// Example: Tango
    # Constraints: Minimum length = 0, Maximum length = 128
    # Evac_Full
    def ZoneContrCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The count of people requiring medevac.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Evac_Full
    def NumCasualties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Additional comments for the medevac mission.
    # Example: /// Example: Comments concerning mission
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Evac_Full
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Evac_Full
    def CasualtyInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Evac_Full
    def CasualtyInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Evac_Full
    def CasualtyInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Evac_Full
    def EnemyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Evac_Full
    def EnemyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Evac_Full
    def EnemyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Related document ids.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Evac_Full
    def RelatedDocs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Evac_Full
    def RelatedDocsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Evac_Full
    def RelatedDocsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # Evac_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Evac_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Evac_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Evac_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Evac_FullStart(builder):
    builder.StartObject(41)

def Start(builder):
    Evac_FullStart(builder)

def Evac_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Evac_FullAddId(builder, id)

def Evac_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Evac_FullAddClassificationMarking(builder, classificationMarking)

def Evac_FullAddMedevacId(builder, medevacId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(medevacId), 0)

def AddMedevacId(builder, medevacId):
    Evac_FullAddMedevacId(builder, medevacId)

def Evac_FullAddType(builder, type):
    builder.PrependInt8Slot(3, type, 0)

def AddType(builder, type):
    Evac_FullAddType(builder, type)

def Evac_FullAddMissionType(builder, missionType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionType), 0)

def AddMissionType(builder, missionType):
    Evac_FullAddMissionType(builder, missionType)

def Evac_FullAddIdWeatherReport(builder, idWeatherReport):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idWeatherReport), 0)

def AddIdWeatherReport(builder, idWeatherReport):
    Evac_FullAddIdWeatherReport(builder, idWeatherReport)

def Evac_FullAddNumKia(builder, numKia):
    builder.PrependInt32Slot(6, numKia, 0)

def AddNumKia(builder, numKia):
    Evac_FullAddNumKia(builder, numKia)

def Evac_FullAddNumWia(builder, numWia):
    builder.PrependInt32Slot(7, numWia, 0)

def AddNumWia(builder, numWia):
    Evac_FullAddNumWia(builder, numWia)

def Evac_FullAddNumLitter(builder, numLitter):
    builder.PrependInt32Slot(8, numLitter, 0)

def AddNumLitter(builder, numLitter):
    Evac_FullAddNumLitter(builder, numLitter)

def Evac_FullAddNumAmbulatory(builder, numAmbulatory):
    builder.PrependInt32Slot(9, numAmbulatory, 0)

def AddNumAmbulatory(builder, numAmbulatory):
    Evac_FullAddNumAmbulatory(builder, numAmbulatory)

def Evac_FullAddMedicReq(builder, medicReq):
    builder.PrependBoolSlot(10, medicReq, 0)

def AddMedicReq(builder, medicReq):
    Evac_FullAddMedicReq(builder, medicReq)

def Evac_FullAddReqNum(builder, reqNum):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(reqNum), 0)

def AddReqNum(builder, reqNum):
    Evac_FullAddReqNum(builder, reqNum)

def Evac_FullAddReqTime(builder, reqTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(reqTime), 0)

def AddReqTime(builder, reqTime):
    Evac_FullAddReqTime(builder, reqTime)

def Evac_FullAddReqCallSign(builder, reqCallSign):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(reqCallSign), 0)

def AddReqCallSign(builder, reqCallSign):
    Evac_FullAddReqCallSign(builder, reqCallSign)

def Evac_FullAddPickupTime(builder, pickupTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(pickupTime), 0)

def AddPickupTime(builder, pickupTime):
    Evac_FullAddPickupTime(builder, pickupTime)

def Evac_FullAddPickupLat(builder, pickupLat):
    builder.PrependFloat64Slot(15, pickupLat, 0.0)

def AddPickupLat(builder, pickupLat):
    Evac_FullAddPickupLat(builder, pickupLat)

def Evac_FullAddPickupLon(builder, pickupLon):
    builder.PrependFloat64Slot(16, pickupLon, 0.0)

def AddPickupLon(builder, pickupLon):
    Evac_FullAddPickupLon(builder, pickupLon)

def Evac_FullAddPickupAlt(builder, pickupAlt):
    builder.PrependFloat64Slot(17, pickupAlt, 0.0)

def AddPickupAlt(builder, pickupAlt):
    Evac_FullAddPickupAlt(builder, pickupAlt)

def Evac_FullAddCe(builder, ce):
    builder.PrependFloat64Slot(18, ce, 0.0)

def AddCe(builder, ce):
    Evac_FullAddCe(builder, ce)

def Evac_FullAddLe(builder, le):
    builder.PrependFloat64Slot(19, le, 0.0)

def AddLe(builder, le):
    Evac_FullAddLe(builder, le)

def Evac_FullAddTerrain(builder, terrain):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(terrain), 0)

def AddTerrain(builder, terrain):
    Evac_FullAddTerrain(builder, terrain)

def Evac_FullAddObstaclesRemarks(builder, obstaclesRemarks):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(obstaclesRemarks), 0)

def AddObstaclesRemarks(builder, obstaclesRemarks):
    Evac_FullAddObstaclesRemarks(builder, obstaclesRemarks)

def Evac_FullAddTerrainRemarks(builder, terrainRemarks):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(terrainRemarks), 0)

def AddTerrainRemarks(builder, terrainRemarks):
    Evac_FullAddTerrainRemarks(builder, terrainRemarks)

def Evac_FullAddZoneName(builder, zoneName):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(zoneName), 0)

def AddZoneName(builder, zoneName):
    Evac_FullAddZoneName(builder, zoneName)

def Evac_FullAddZoneMarking(builder, zoneMarking):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(zoneMarking), 0)

def AddZoneMarking(builder, zoneMarking):
    Evac_FullAddZoneMarking(builder, zoneMarking)

def Evac_FullAddZoneSecurity(builder, zoneSecurity):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(zoneSecurity), 0)

def AddZoneSecurity(builder, zoneSecurity):
    Evac_FullAddZoneSecurity(builder, zoneSecurity)

def Evac_FullAddZoneMarkingColor(builder, zoneMarkingColor):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(zoneMarkingColor), 0)

def AddZoneMarkingColor(builder, zoneMarkingColor):
    Evac_FullAddZoneMarkingColor(builder, zoneMarkingColor)

def Evac_FullAddZoneHot(builder, zoneHot):
    builder.PrependBoolSlot(27, zoneHot, 0)

def AddZoneHot(builder, zoneHot):
    Evac_FullAddZoneHot(builder, zoneHot)

def Evac_FullAddCntctFreq(builder, cntctFreq):
    builder.PrependFloat64Slot(28, cntctFreq, 0.0)

def AddCntctFreq(builder, cntctFreq):
    Evac_FullAddCntctFreq(builder, cntctFreq)

def Evac_FullAddZoneContrCallSign(builder, zoneContrCallSign):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(zoneContrCallSign), 0)

def AddZoneContrCallSign(builder, zoneContrCallSign):
    Evac_FullAddZoneContrCallSign(builder, zoneContrCallSign)

def Evac_FullAddNumCasualties(builder, numCasualties):
    builder.PrependInt32Slot(30, numCasualties, 0)

def AddNumCasualties(builder, numCasualties):
    Evac_FullAddNumCasualties(builder, numCasualties)

def Evac_FullAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    Evac_FullAddComments(builder, comments)

def Evac_FullAddCasualtyInfo(builder, casualtyInfo):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(casualtyInfo), 0)

def AddCasualtyInfo(builder, casualtyInfo):
    Evac_FullAddCasualtyInfo(builder, casualtyInfo)

def Evac_FullStartCasualtyInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCasualtyInfoVector(builder, numElems):
    return Evac_FullStartCasualtyInfoVector(builder, numElems)

def Evac_FullAddEnemyData(builder, enemyData):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(enemyData), 0)

def AddEnemyData(builder, enemyData):
    Evac_FullAddEnemyData(builder, enemyData)

def Evac_FullStartEnemyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyDataVector(builder, numElems):
    return Evac_FullStartEnemyDataVector(builder, numElems)

def Evac_FullAddRelatedDocs(builder, relatedDocs):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(relatedDocs), 0)

def AddRelatedDocs(builder, relatedDocs):
    Evac_FullAddRelatedDocs(builder, relatedDocs)

def Evac_FullStartRelatedDocsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRelatedDocsVector(builder, numElems):
    return Evac_FullStartRelatedDocsVector(builder, numElems)

def Evac_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Evac_FullAddOrigNetwork(builder, origNetwork)

def Evac_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Evac_FullAddCreatedAt(builder, createdAt)

def Evac_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Evac_FullAddCreatedBy(builder, createdBy)

def Evac_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Evac_FullAddSource(builder, source)

def Evac_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Evac_FullAddOrigin(builder, origin)

def Evac_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(40, dataMode, 0)

def AddDataMode(builder, dataMode):
    Evac_FullAddDataMode(builder, dataMode)

def Evac_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Evac_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Evac_FullT(object):

    # Evac_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.medevacId = None  # type: str
        self.type = 0  # type: int
        self.missionType = None  # type: str
        self.idWeatherReport = None  # type: str
        self.numKia = 0  # type: int
        self.numWia = 0  # type: int
        self.numLitter = 0  # type: int
        self.numAmbulatory = 0  # type: int
        self.medicReq = False  # type: bool
        self.reqNum = None  # type: str
        self.reqTime = None  # type: str
        self.reqCallSign = None  # type: str
        self.pickupTime = None  # type: str
        self.pickupLat = 0.0  # type: float
        self.pickupLon = 0.0  # type: float
        self.pickupAlt = 0.0  # type: float
        self.ce = 0.0  # type: float
        self.le = 0.0  # type: float
        self.terrain = None  # type: str
        self.obstaclesRemarks = None  # type: str
        self.terrainRemarks = None  # type: str
        self.zoneName = None  # type: str
        self.zoneMarking = None  # type: str
        self.zoneSecurity = None  # type: str
        self.zoneMarkingColor = None  # type: str
        self.zoneHot = False  # type: bool
        self.cntctFreq = 0.0  # type: float
        self.zoneContrCallSign = None  # type: str
        self.numCasualties = 0  # type: int
        self.comments = None  # type: str
        self.casualtyInfo = None  # type: List[str]
        self.enemyData = None  # type: List[str]
        self.relatedDocs = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacFull = Evac_Full()
        evacFull.Init(buf, pos)
        return cls.InitFromObj(evacFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacFull):
        x = Evac_FullT()
        x._UnPack(evacFull)
        return x

    # Evac_FullT
    def _UnPack(self, evacFull):
        if evacFull is None:
            return
        self.id = evacFull.Id()
        self.classificationMarking = evacFull.ClassificationMarking()
        self.medevacId = evacFull.MedevacId()
        self.type = evacFull.Type()
        self.missionType = evacFull.MissionType()
        self.idWeatherReport = evacFull.IdWeatherReport()
        self.numKia = evacFull.NumKia()
        self.numWia = evacFull.NumWia()
        self.numLitter = evacFull.NumLitter()
        self.numAmbulatory = evacFull.NumAmbulatory()
        self.medicReq = evacFull.MedicReq()
        self.reqNum = evacFull.ReqNum()
        self.reqTime = evacFull.ReqTime()
        self.reqCallSign = evacFull.ReqCallSign()
        self.pickupTime = evacFull.PickupTime()
        self.pickupLat = evacFull.PickupLat()
        self.pickupLon = evacFull.PickupLon()
        self.pickupAlt = evacFull.PickupAlt()
        self.ce = evacFull.Ce()
        self.le = evacFull.Le()
        self.terrain = evacFull.Terrain()
        self.obstaclesRemarks = evacFull.ObstaclesRemarks()
        self.terrainRemarks = evacFull.TerrainRemarks()
        self.zoneName = evacFull.ZoneName()
        self.zoneMarking = evacFull.ZoneMarking()
        self.zoneSecurity = evacFull.ZoneSecurity()
        self.zoneMarkingColor = evacFull.ZoneMarkingColor()
        self.zoneHot = evacFull.ZoneHot()
        self.cntctFreq = evacFull.CntctFreq()
        self.zoneContrCallSign = evacFull.ZoneContrCallSign()
        self.numCasualties = evacFull.NumCasualties()
        self.comments = evacFull.Comments()
        if not evacFull.CasualtyInfoIsNone():
            self.casualtyInfo = []
            for i in range(evacFull.CasualtyInfoLength()):
                self.casualtyInfo.append(evacFull.CasualtyInfo(i))
        if not evacFull.EnemyDataIsNone():
            self.enemyData = []
            for i in range(evacFull.EnemyDataLength()):
                self.enemyData.append(evacFull.EnemyData(i))
        if not evacFull.RelatedDocsIsNone():
            self.relatedDocs = []
            for i in range(evacFull.RelatedDocsLength()):
                self.relatedDocs.append(evacFull.RelatedDocs(i))
        self.origNetwork = evacFull.OrigNetwork()
        self.createdAt = evacFull.CreatedAt()
        self.createdBy = evacFull.CreatedBy()
        self.source = evacFull.Source()
        self.origin = evacFull.Origin()
        self.dataMode = evacFull.DataMode()

    # Evac_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.medevacId is not None:
            medevacId = builder.CreateString(self.medevacId)
        if self.missionType is not None:
            missionType = builder.CreateString(self.missionType)
        if self.idWeatherReport is not None:
            idWeatherReport = builder.CreateString(self.idWeatherReport)
        if self.reqNum is not None:
            reqNum = builder.CreateString(self.reqNum)
        if self.reqTime is not None:
            reqTime = builder.CreateString(self.reqTime)
        if self.reqCallSign is not None:
            reqCallSign = builder.CreateString(self.reqCallSign)
        if self.pickupTime is not None:
            pickupTime = builder.CreateString(self.pickupTime)
        if self.terrain is not None:
            terrain = builder.CreateString(self.terrain)
        if self.obstaclesRemarks is not None:
            obstaclesRemarks = builder.CreateString(self.obstaclesRemarks)
        if self.terrainRemarks is not None:
            terrainRemarks = builder.CreateString(self.terrainRemarks)
        if self.zoneName is not None:
            zoneName = builder.CreateString(self.zoneName)
        if self.zoneMarking is not None:
            zoneMarking = builder.CreateString(self.zoneMarking)
        if self.zoneSecurity is not None:
            zoneSecurity = builder.CreateString(self.zoneSecurity)
        if self.zoneMarkingColor is not None:
            zoneMarkingColor = builder.CreateString(self.zoneMarkingColor)
        if self.zoneContrCallSign is not None:
            zoneContrCallSign = builder.CreateString(self.zoneContrCallSign)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        if self.casualtyInfo is not None:
            casualtyInfolist = []
            for i in range(len(self.casualtyInfo)):
                casualtyInfolist.append(builder.CreateString(self.casualtyInfo[i]))
            Evac_FullStartCasualtyInfoVector(builder, len(self.casualtyInfo))
            for i in reversed(range(len(self.casualtyInfo))):
                builder.PrependUOffsetTRelative(casualtyInfolist[i])
            casualtyInfo = builder.EndVector()
        if self.enemyData is not None:
            enemyDatalist = []
            for i in range(len(self.enemyData)):
                enemyDatalist.append(builder.CreateString(self.enemyData[i]))
            Evac_FullStartEnemyDataVector(builder, len(self.enemyData))
            for i in reversed(range(len(self.enemyData))):
                builder.PrependUOffsetTRelative(enemyDatalist[i])
            enemyData = builder.EndVector()
        if self.relatedDocs is not None:
            relatedDocslist = []
            for i in range(len(self.relatedDocs)):
                relatedDocslist.append(builder.CreateString(self.relatedDocs[i]))
            Evac_FullStartRelatedDocsVector(builder, len(self.relatedDocs))
            for i in reversed(range(len(self.relatedDocs))):
                builder.PrependUOffsetTRelative(relatedDocslist[i])
            relatedDocs = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        Evac_FullStart(builder)
        if self.id is not None:
            Evac_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Evac_FullAddClassificationMarking(builder, classificationMarking)
        if self.medevacId is not None:
            Evac_FullAddMedevacId(builder, medevacId)
        Evac_FullAddType(builder, self.type)
        if self.missionType is not None:
            Evac_FullAddMissionType(builder, missionType)
        if self.idWeatherReport is not None:
            Evac_FullAddIdWeatherReport(builder, idWeatherReport)
        Evac_FullAddNumKia(builder, self.numKia)
        Evac_FullAddNumWia(builder, self.numWia)
        Evac_FullAddNumLitter(builder, self.numLitter)
        Evac_FullAddNumAmbulatory(builder, self.numAmbulatory)
        Evac_FullAddMedicReq(builder, self.medicReq)
        if self.reqNum is not None:
            Evac_FullAddReqNum(builder, reqNum)
        if self.reqTime is not None:
            Evac_FullAddReqTime(builder, reqTime)
        if self.reqCallSign is not None:
            Evac_FullAddReqCallSign(builder, reqCallSign)
        if self.pickupTime is not None:
            Evac_FullAddPickupTime(builder, pickupTime)
        Evac_FullAddPickupLat(builder, self.pickupLat)
        Evac_FullAddPickupLon(builder, self.pickupLon)
        Evac_FullAddPickupAlt(builder, self.pickupAlt)
        Evac_FullAddCe(builder, self.ce)
        Evac_FullAddLe(builder, self.le)
        if self.terrain is not None:
            Evac_FullAddTerrain(builder, terrain)
        if self.obstaclesRemarks is not None:
            Evac_FullAddObstaclesRemarks(builder, obstaclesRemarks)
        if self.terrainRemarks is not None:
            Evac_FullAddTerrainRemarks(builder, terrainRemarks)
        if self.zoneName is not None:
            Evac_FullAddZoneName(builder, zoneName)
        if self.zoneMarking is not None:
            Evac_FullAddZoneMarking(builder, zoneMarking)
        if self.zoneSecurity is not None:
            Evac_FullAddZoneSecurity(builder, zoneSecurity)
        if self.zoneMarkingColor is not None:
            Evac_FullAddZoneMarkingColor(builder, zoneMarkingColor)
        Evac_FullAddZoneHot(builder, self.zoneHot)
        Evac_FullAddCntctFreq(builder, self.cntctFreq)
        if self.zoneContrCallSign is not None:
            Evac_FullAddZoneContrCallSign(builder, zoneContrCallSign)
        Evac_FullAddNumCasualties(builder, self.numCasualties)
        if self.comments is not None:
            Evac_FullAddComments(builder, comments)
        if self.casualtyInfo is not None:
            Evac_FullAddCasualtyInfo(builder, casualtyInfo)
        if self.enemyData is not None:
            Evac_FullAddEnemyData(builder, enemyData)
        if self.relatedDocs is not None:
            Evac_FullAddRelatedDocs(builder, relatedDocs)
        if self.origNetwork is not None:
            Evac_FullAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            Evac_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Evac_FullAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Evac_FullAddSource(builder, source)
        if self.origin is not None:
            Evac_FullAddOrigin(builder, origin)
        Evac_FullAddDataMode(builder, self.dataMode)
        evacFull = Evac_FullEnd(builder)
        return evacFull
