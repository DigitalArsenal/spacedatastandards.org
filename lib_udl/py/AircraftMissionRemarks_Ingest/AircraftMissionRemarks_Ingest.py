# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of Remarks associated with this Air Transport Mission.
class AircraftMissionRemarks_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftMissionRemarks_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftMissionRemarks_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftMissionRemarks_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftMissionRemarks_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Global Decision Support System (GDSS) remark identifier.
    # Example: /// Example: GDSSREMARK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionRemarks_Ingest
    def GdssRemarkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remark type.
    # Example: /// Example: MP
    # Constraints: Minimum length = 0, Maximum length = 20
    # AircraftMissionRemarks_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text of the remark.
    # Example: /// Example: Example mission remarks.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AircraftMissionRemarks_Ingest
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftMissionRemarks_Ingest
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User who published the remark.
    # Example: /// Example: John Doe
    # Constraints: Minimum length = 0, Maximum length = 20
    # AircraftMissionRemarks_Ingest
    def User(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # If the remark is sortie specific, this is the number of the sortie it applies to.
    # Example: /// Example: 825
    # Constraints: No constraints specified.
    # AircraftMissionRemarks_Ingest
    def ItineraryNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AircraftMissionRemarks_IngestStart(builder):
    builder.StartObject(6)

def Start(builder):
    AircraftMissionRemarks_IngestStart(builder)

def AircraftMissionRemarks_IngestAddGdssRemarkId(builder, gdssRemarkId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gdssRemarkId), 0)

def AddGdssRemarkId(builder, gdssRemarkId):
    AircraftMissionRemarks_IngestAddGdssRemarkId(builder, gdssRemarkId)

def AircraftMissionRemarks_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AircraftMissionRemarks_IngestAddType(builder, type)

def AircraftMissionRemarks_IngestAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    AircraftMissionRemarks_IngestAddText(builder, text)

def AircraftMissionRemarks_IngestAddDate(builder, date):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def AddDate(builder, date):
    AircraftMissionRemarks_IngestAddDate(builder, date)

def AircraftMissionRemarks_IngestAddUser(builder, user):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(user), 0)

def AddUser(builder, user):
    AircraftMissionRemarks_IngestAddUser(builder, user)

def AircraftMissionRemarks_IngestAddItineraryNum(builder, itineraryNum):
    builder.PrependInt32Slot(5, itineraryNum, 0)

def AddItineraryNum(builder, itineraryNum):
    AircraftMissionRemarks_IngestAddItineraryNum(builder, itineraryNum)

def AircraftMissionRemarks_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftMissionRemarks_IngestEnd(builder)


class AircraftMissionRemarks_IngestT(object):

    # AircraftMissionRemarks_IngestT
    def __init__(self):
        self.gdssRemarkId = None  # type: str
        self.type = None  # type: str
        self.text = None  # type: str
        self.date = None  # type: str
        self.user = None  # type: str
        self.itineraryNum = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftMissionRemarksIngest = AircraftMissionRemarks_Ingest()
        aircraftMissionRemarksIngest.Init(buf, pos)
        return cls.InitFromObj(aircraftMissionRemarksIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftMissionRemarksIngest):
        x = AircraftMissionRemarks_IngestT()
        x._UnPack(aircraftMissionRemarksIngest)
        return x

    # AircraftMissionRemarks_IngestT
    def _UnPack(self, aircraftMissionRemarksIngest):
        if aircraftMissionRemarksIngest is None:
            return
        self.gdssRemarkId = aircraftMissionRemarksIngest.GdssRemarkId()
        self.type = aircraftMissionRemarksIngest.Type()
        self.text = aircraftMissionRemarksIngest.Text()
        self.date = aircraftMissionRemarksIngest.Date()
        self.user = aircraftMissionRemarksIngest.User()
        self.itineraryNum = aircraftMissionRemarksIngest.ItineraryNum()

    # AircraftMissionRemarks_IngestT
    def Pack(self, builder):
        if self.gdssRemarkId is not None:
            gdssRemarkId = builder.CreateString(self.gdssRemarkId)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.date is not None:
            date = builder.CreateString(self.date)
        if self.user is not None:
            user = builder.CreateString(self.user)
        AircraftMissionRemarks_IngestStart(builder)
        if self.gdssRemarkId is not None:
            AircraftMissionRemarks_IngestAddGdssRemarkId(builder, gdssRemarkId)
        if self.type is not None:
            AircraftMissionRemarks_IngestAddType(builder, type)
        if self.text is not None:
            AircraftMissionRemarks_IngestAddText(builder, text)
        if self.date is not None:
            AircraftMissionRemarks_IngestAddDate(builder, date)
        if self.user is not None:
            AircraftMissionRemarks_IngestAddUser(builder, user)
        AircraftMissionRemarks_IngestAddItineraryNum(builder, self.itineraryNum)
        aircraftMissionRemarksIngest = AircraftMissionRemarks_IngestEnd(builder)
        return aircraftMissionRemarksIngest
