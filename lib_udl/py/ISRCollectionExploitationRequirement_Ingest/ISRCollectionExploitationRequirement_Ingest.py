# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// What it is that is trying to be exploited.
class ISRCollectionExploitationRequirement_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionExploitationRequirement_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionExploitationRequirement_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionExploitationRequirement_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionExploitationRequirement_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Exploitation requirement id.
    # Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
    # Constraints: Minimum length = 0, Maximum length = 36
    # ISRCollectionExploitationRequirement_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifying data for the exploitation requirement.
    # Example: /// Example: AMPLIFICATION
    # Constraints: Minimum length = 0, Maximum length = 256
    # ISRCollectionExploitationRequirement_Ingest
    def Amplification(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reporting criteria of the collection requirement.
    # Example: /// Example: CRITERIA
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionExploitationRequirement_Ingest
    def ReportingCriteria(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of e-mails to disseminate collection verification information.
    # Example: /// Example: EMAILS
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionExploitationRequirement_Ingest
    def Dissemination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Essential Elements of Information.
    # Example: /// Example: ESSENTIAL_ELEMENTS
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionExploitationRequirement_Ingest
    def Eei(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionExploitationRequirement_Ingest
    def Poc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ISRCollectionExploitationRequirement_IngestStart(builder):
    builder.StartObject(6)

def Start(builder):
    ISRCollectionExploitationRequirement_IngestStart(builder)

def ISRCollectionExploitationRequirement_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ISRCollectionExploitationRequirement_IngestAddId(builder, id)

def ISRCollectionExploitationRequirement_IngestAddAmplification(builder, amplification):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(amplification), 0)

def AddAmplification(builder, amplification):
    ISRCollectionExploitationRequirement_IngestAddAmplification(builder, amplification)

def ISRCollectionExploitationRequirement_IngestAddReportingCriteria(builder, reportingCriteria):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(reportingCriteria), 0)

def AddReportingCriteria(builder, reportingCriteria):
    ISRCollectionExploitationRequirement_IngestAddReportingCriteria(builder, reportingCriteria)

def ISRCollectionExploitationRequirement_IngestAddDissemination(builder, dissemination):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dissemination), 0)

def AddDissemination(builder, dissemination):
    ISRCollectionExploitationRequirement_IngestAddDissemination(builder, dissemination)

def ISRCollectionExploitationRequirement_IngestAddEei(builder, eei):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(eei), 0)

def AddEei(builder, eei):
    ISRCollectionExploitationRequirement_IngestAddEei(builder, eei)

def ISRCollectionExploitationRequirement_IngestAddPoc(builder, poc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(poc), 0)

def AddPoc(builder, poc):
    ISRCollectionExploitationRequirement_IngestAddPoc(builder, poc)

def ISRCollectionExploitationRequirement_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionExploitationRequirement_IngestEnd(builder)


class ISRCollectionExploitationRequirement_IngestT(object):

    # ISRCollectionExploitationRequirement_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.amplification = None  # type: str
        self.reportingCriteria = None  # type: str
        self.dissemination = None  # type: str
        self.eei = None  # type: str
        self.poc = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionExploitationRequirementIngest = ISRCollectionExploitationRequirement_Ingest()
        isrcollectionExploitationRequirementIngest.Init(buf, pos)
        return cls.InitFromObj(isrcollectionExploitationRequirementIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionExploitationRequirementIngest):
        x = ISRCollectionExploitationRequirement_IngestT()
        x._UnPack(isrcollectionExploitationRequirementIngest)
        return x

    # ISRCollectionExploitationRequirement_IngestT
    def _UnPack(self, isrcollectionExploitationRequirementIngest):
        if isrcollectionExploitationRequirementIngest is None:
            return
        self.id = isrcollectionExploitationRequirementIngest.Id()
        self.amplification = isrcollectionExploitationRequirementIngest.Amplification()
        self.reportingCriteria = isrcollectionExploitationRequirementIngest.ReportingCriteria()
        self.dissemination = isrcollectionExploitationRequirementIngest.Dissemination()
        self.eei = isrcollectionExploitationRequirementIngest.Eei()
        self.poc = isrcollectionExploitationRequirementIngest.Poc()

    # ISRCollectionExploitationRequirement_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.amplification is not None:
            amplification = builder.CreateString(self.amplification)
        if self.reportingCriteria is not None:
            reportingCriteria = builder.CreateString(self.reportingCriteria)
        if self.dissemination is not None:
            dissemination = builder.CreateString(self.dissemination)
        if self.eei is not None:
            eei = builder.CreateString(self.eei)
        if self.poc is not None:
            poc = builder.CreateString(self.poc)
        ISRCollectionExploitationRequirement_IngestStart(builder)
        if self.id is not None:
            ISRCollectionExploitationRequirement_IngestAddId(builder, id)
        if self.amplification is not None:
            ISRCollectionExploitationRequirement_IngestAddAmplification(builder, amplification)
        if self.reportingCriteria is not None:
            ISRCollectionExploitationRequirement_IngestAddReportingCriteria(builder, reportingCriteria)
        if self.dissemination is not None:
            ISRCollectionExploitationRequirement_IngestAddDissemination(builder, dissemination)
        if self.eei is not None:
            ISRCollectionExploitationRequirement_IngestAddEei(builder, eei)
        if self.poc is not None:
            ISRCollectionExploitationRequirement_IngestAddPoc(builder, poc)
        isrcollectionExploitationRequirementIngest = ISRCollectionExploitationRequirement_IngestEnd(builder)
        return isrcollectionExploitationRequirementIngest
