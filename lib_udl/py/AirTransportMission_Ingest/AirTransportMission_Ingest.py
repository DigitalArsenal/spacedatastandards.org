# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
class AirTransportMission_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirTransportMission_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirTransportMission_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirTransportMission_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x54", size_prefixed=size_prefixed)

    # AirTransportMission_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirTransportMission_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirTransportMission_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission identifier provided by the originating source.
    # Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def OrigMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
    # Example: /// Example: AJM7939B1123
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def AmcMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Global Decision Support System (GDSS) mission unique identifier.
    # Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def GdssMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def PrevMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: AJM7939B1122
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def PrevAmcmissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def NextMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: AJM7939B1124
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Ingest
    def NextAmcmissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A description of this mission's objective.
    # Example: /// Example: Deliver water to island X.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AirTransportMission_Ingest
    def Objective(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
    # Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AirTransportMission_Ingest
    def Purpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Highest Joint Chiefs of Staff priority of this mission.
    # Example: /// Example: 1A3
    # Constraints: Minimum length = 3, Maximum length = 3
    # AirTransportMission_Ingest
    def JcsPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this is a close watch mission.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def Cw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The type of mission (e.g. SAAM, CHNL, etc.).
    # Example: /// Example: SAAM
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
    # Example: /// Example: KFAY
    # Constraints: Minimum length = 4, Maximum length = 4
    # AirTransportMission_Ingest
    def FirstPickUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
    # Example: /// Example: PGUA
    # Constraints: Minimum length = 4, Maximum length = 4
    # AirTransportMission_Ingest
    def LastDropOff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission alias.
    # Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
    # Constraints: Minimum length = 0, Maximum length = 48
    # AirTransportMission_Ingest
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign for this mission.
    # Example: /// Example: RCH123
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Ingest
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the operation that this mission supports.
    # Example: /// Example: Golden Eye
    # Constraints: Minimum length = 0, Maximum length = 100
    # AirTransportMission_Ingest
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Numbered Air Force (NAF) organization that owns the mission.
    # Example: /// Example: 18AF
    # Constraints: Minimum length = 0, Maximum length = 100
    # AirTransportMission_Ingest
    def Naf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unit the mission is allocated to.
    # Example: /// Example: 437 AEW
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirTransportMission_Ingest
    def AllocatedUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
    # Example: /// Example: MIXED
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Ingest
    def LoadCategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current state of the mission.
    # Example: /// Example: EXECUTION
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Ingest
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
    # Example: /// Example: -90.12
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def SourceSysDeviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
    # Example: /// Example: 1083034
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTransportMission_Ingest
    def ApacsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    # Example: /// Example: G2-182402-AB
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirTransportMission_Ingest
    def DipWorksheetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirTransportMission_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirTransportMission_Ingest
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTransportMission_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirTransportMission_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTransportMission_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirTransportMission_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def Requirements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Ingest
    def RequirementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Ingest
    def RequirementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def Remarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Ingest
    def RemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Ingest
    def RemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # Collection of Hazardous Material information associated with this Air Transport Mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Ingest
    def HazMat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Ingest
    def HazMatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Ingest
    def HazMatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

def AirTransportMission_IngestStart(builder):
    builder.StartObject(38)

def Start(builder):
    AirTransportMission_IngestStart(builder)

def AirTransportMission_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirTransportMission_IngestAddId(builder, id)

def AirTransportMission_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirTransportMission_IngestAddClassificationMarking(builder, classificationMarking)

def AirTransportMission_IngestAddOrigMissionId(builder, origMissionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origMissionId), 0)

def AddOrigMissionId(builder, origMissionId):
    AirTransportMission_IngestAddOrigMissionId(builder, origMissionId)

def AirTransportMission_IngestAddAmcMissionId(builder, amcMissionId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(amcMissionId), 0)

def AddAmcMissionId(builder, amcMissionId):
    AirTransportMission_IngestAddAmcMissionId(builder, amcMissionId)

def AirTransportMission_IngestAddGdssMissionId(builder, gdssMissionId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(gdssMissionId), 0)

def AddGdssMissionId(builder, gdssMissionId):
    AirTransportMission_IngestAddGdssMissionId(builder, gdssMissionId)

def AirTransportMission_IngestAddPrevMissionId(builder, prevMissionId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(prevMissionId), 0)

def AddPrevMissionId(builder, prevMissionId):
    AirTransportMission_IngestAddPrevMissionId(builder, prevMissionId)

def AirTransportMission_IngestAddPrevAmcmissionId(builder, prevAmcmissionId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(prevAmcmissionId), 0)

def AddPrevAmcmissionId(builder, prevAmcmissionId):
    AirTransportMission_IngestAddPrevAmcmissionId(builder, prevAmcmissionId)

def AirTransportMission_IngestAddNextMissionId(builder, nextMissionId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(nextMissionId), 0)

def AddNextMissionId(builder, nextMissionId):
    AirTransportMission_IngestAddNextMissionId(builder, nextMissionId)

def AirTransportMission_IngestAddNextAmcmissionId(builder, nextAmcmissionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(nextAmcmissionId), 0)

def AddNextAmcmissionId(builder, nextAmcmissionId):
    AirTransportMission_IngestAddNextAmcmissionId(builder, nextAmcmissionId)

def AirTransportMission_IngestAddObjective(builder, objective):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(objective), 0)

def AddObjective(builder, objective):
    AirTransportMission_IngestAddObjective(builder, objective)

def AirTransportMission_IngestAddPurpose(builder, purpose):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(purpose), 0)

def AddPurpose(builder, purpose):
    AirTransportMission_IngestAddPurpose(builder, purpose)

def AirTransportMission_IngestAddJcsPriority(builder, jcsPriority):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(jcsPriority), 0)

def AddJcsPriority(builder, jcsPriority):
    AirTransportMission_IngestAddJcsPriority(builder, jcsPriority)

def AirTransportMission_IngestAddCw(builder, cw):
    builder.PrependBoolSlot(12, cw, 0)

def AddCw(builder, cw):
    AirTransportMission_IngestAddCw(builder, cw)

def AirTransportMission_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AirTransportMission_IngestAddType(builder, type)

def AirTransportMission_IngestAddFirstPickUp(builder, firstPickUp):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(firstPickUp), 0)

def AddFirstPickUp(builder, firstPickUp):
    AirTransportMission_IngestAddFirstPickUp(builder, firstPickUp)

def AirTransportMission_IngestAddLastDropOff(builder, lastDropOff):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(lastDropOff), 0)

def AddLastDropOff(builder, lastDropOff):
    AirTransportMission_IngestAddLastDropOff(builder, lastDropOff)

def AirTransportMission_IngestAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def AddAlias(builder, alias):
    AirTransportMission_IngestAddAlias(builder, alias)

def AirTransportMission_IngestAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    AirTransportMission_IngestAddCallSign(builder, callSign)

def AirTransportMission_IngestAddOperation(builder, operation):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(operation), 0)

def AddOperation(builder, operation):
    AirTransportMission_IngestAddOperation(builder, operation)

def AirTransportMission_IngestAddNaf(builder, naf):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(naf), 0)

def AddNaf(builder, naf):
    AirTransportMission_IngestAddNaf(builder, naf)

def AirTransportMission_IngestAddAllocatedUnit(builder, allocatedUnit):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(allocatedUnit), 0)

def AddAllocatedUnit(builder, allocatedUnit):
    AirTransportMission_IngestAddAllocatedUnit(builder, allocatedUnit)

def AirTransportMission_IngestAddLoadCategoryType(builder, loadCategoryType):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(loadCategoryType), 0)

def AddLoadCategoryType(builder, loadCategoryType):
    AirTransportMission_IngestAddLoadCategoryType(builder, loadCategoryType)

def AirTransportMission_IngestAddState(builder, state):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)

def AddState(builder, state):
    AirTransportMission_IngestAddState(builder, state)

def AirTransportMission_IngestAddSourceSysDeviation(builder, sourceSysDeviation):
    builder.PrependFloat64Slot(23, sourceSysDeviation, 0.0)

def AddSourceSysDeviation(builder, sourceSysDeviation):
    AirTransportMission_IngestAddSourceSysDeviation(builder, sourceSysDeviation)

def AirTransportMission_IngestAddApacsId(builder, apacsId):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(apacsId), 0)

def AddApacsId(builder, apacsId):
    AirTransportMission_IngestAddApacsId(builder, apacsId)

def AirTransportMission_IngestAddDipWorksheetName(builder, dipWorksheetName):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(dipWorksheetName), 0)

def AddDipWorksheetName(builder, dipWorksheetName):
    AirTransportMission_IngestAddDipWorksheetName(builder, dipWorksheetName)

def AirTransportMission_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirTransportMission_IngestAddCreatedAt(builder, createdAt)

def AirTransportMission_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirTransportMission_IngestAddCreatedBy(builder, createdBy)

def AirTransportMission_IngestAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AirTransportMission_IngestAddUpdatedAt(builder, updatedAt)

def AirTransportMission_IngestAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AirTransportMission_IngestAddUpdatedBy(builder, updatedBy)

def AirTransportMission_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirTransportMission_IngestAddSourceDl(builder, sourceDl)

def AirTransportMission_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirTransportMission_IngestAddSource(builder, source)

def AirTransportMission_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirTransportMission_IngestAddOrigin(builder, origin)

def AirTransportMission_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(33, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirTransportMission_IngestAddDataMode(builder, dataMode)

def AirTransportMission_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirTransportMission_IngestAddOrigNetwork(builder, origNetwork)

def AirTransportMission_IngestAddRequirements(builder, requirements):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(requirements), 0)

def AddRequirements(builder, requirements):
    AirTransportMission_IngestAddRequirements(builder, requirements)

def AirTransportMission_IngestStartRequirementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRequirementsVector(builder, numElems):
    return AirTransportMission_IngestStartRequirementsVector(builder, numElems)

def AirTransportMission_IngestAddRemarks(builder, remarks):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(remarks), 0)

def AddRemarks(builder, remarks):
    AirTransportMission_IngestAddRemarks(builder, remarks)

def AirTransportMission_IngestStartRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRemarksVector(builder, numElems):
    return AirTransportMission_IngestStartRemarksVector(builder, numElems)

def AirTransportMission_IngestAddHazMat(builder, hazMat):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(hazMat), 0)

def AddHazMat(builder, hazMat):
    AirTransportMission_IngestAddHazMat(builder, hazMat)

def AirTransportMission_IngestStartHazMatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHazMatVector(builder, numElems):
    return AirTransportMission_IngestStartHazMatVector(builder, numElems)

def AirTransportMission_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirTransportMission_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class AirTransportMission_IngestT(object):

    # AirTransportMission_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.origMissionId = None  # type: str
        self.amcMissionId = None  # type: str
        self.gdssMissionId = None  # type: str
        self.prevMissionId = None  # type: str
        self.prevAmcmissionId = None  # type: str
        self.nextMissionId = None  # type: str
        self.nextAmcmissionId = None  # type: str
        self.objective = None  # type: str
        self.purpose = None  # type: str
        self.jcsPriority = None  # type: str
        self.cw = False  # type: bool
        self.type = None  # type: str
        self.firstPickUp = None  # type: str
        self.lastDropOff = None  # type: str
        self.alias = None  # type: str
        self.callSign = None  # type: str
        self.operation = None  # type: str
        self.naf = None  # type: str
        self.allocatedUnit = None  # type: str
        self.loadCategoryType = None  # type: str
        self.state = None  # type: str
        self.sourceSysDeviation = 0.0  # type: float
        self.apacsId = None  # type: str
        self.dipWorksheetName = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str
        self.requirements = None  # type: List[str]
        self.remarks = None  # type: List[str]
        self.hazMat = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airTransportMissionIngest = AirTransportMission_Ingest()
        airTransportMissionIngest.Init(buf, pos)
        return cls.InitFromObj(airTransportMissionIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airTransportMissionIngest):
        x = AirTransportMission_IngestT()
        x._UnPack(airTransportMissionIngest)
        return x

    # AirTransportMission_IngestT
    def _UnPack(self, airTransportMissionIngest):
        if airTransportMissionIngest is None:
            return
        self.id = airTransportMissionIngest.Id()
        self.classificationMarking = airTransportMissionIngest.ClassificationMarking()
        self.origMissionId = airTransportMissionIngest.OrigMissionId()
        self.amcMissionId = airTransportMissionIngest.AmcMissionId()
        self.gdssMissionId = airTransportMissionIngest.GdssMissionId()
        self.prevMissionId = airTransportMissionIngest.PrevMissionId()
        self.prevAmcmissionId = airTransportMissionIngest.PrevAmcmissionId()
        self.nextMissionId = airTransportMissionIngest.NextMissionId()
        self.nextAmcmissionId = airTransportMissionIngest.NextAmcmissionId()
        self.objective = airTransportMissionIngest.Objective()
        self.purpose = airTransportMissionIngest.Purpose()
        self.jcsPriority = airTransportMissionIngest.JcsPriority()
        self.cw = airTransportMissionIngest.Cw()
        self.type = airTransportMissionIngest.Type()
        self.firstPickUp = airTransportMissionIngest.FirstPickUp()
        self.lastDropOff = airTransportMissionIngest.LastDropOff()
        self.alias = airTransportMissionIngest.Alias()
        self.callSign = airTransportMissionIngest.CallSign()
        self.operation = airTransportMissionIngest.Operation()
        self.naf = airTransportMissionIngest.Naf()
        self.allocatedUnit = airTransportMissionIngest.AllocatedUnit()
        self.loadCategoryType = airTransportMissionIngest.LoadCategoryType()
        self.state = airTransportMissionIngest.State()
        self.sourceSysDeviation = airTransportMissionIngest.SourceSysDeviation()
        self.apacsId = airTransportMissionIngest.ApacsId()
        self.dipWorksheetName = airTransportMissionIngest.DipWorksheetName()
        self.createdAt = airTransportMissionIngest.CreatedAt()
        self.createdBy = airTransportMissionIngest.CreatedBy()
        self.updatedAt = airTransportMissionIngest.UpdatedAt()
        self.updatedBy = airTransportMissionIngest.UpdatedBy()
        self.sourceDl = airTransportMissionIngest.SourceDl()
        self.source = airTransportMissionIngest.Source()
        self.origin = airTransportMissionIngest.Origin()
        self.dataMode = airTransportMissionIngest.DataMode()
        self.origNetwork = airTransportMissionIngest.OrigNetwork()
        if not airTransportMissionIngest.RequirementsIsNone():
            self.requirements = []
            for i in range(airTransportMissionIngest.RequirementsLength()):
                self.requirements.append(airTransportMissionIngest.Requirements(i))
        if not airTransportMissionIngest.RemarksIsNone():
            self.remarks = []
            for i in range(airTransportMissionIngest.RemarksLength()):
                self.remarks.append(airTransportMissionIngest.Remarks(i))
        if not airTransportMissionIngest.HazMatIsNone():
            self.hazMat = []
            for i in range(airTransportMissionIngest.HazMatLength()):
                self.hazMat.append(airTransportMissionIngest.HazMat(i))

    # AirTransportMission_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origMissionId is not None:
            origMissionId = builder.CreateString(self.origMissionId)
        if self.amcMissionId is not None:
            amcMissionId = builder.CreateString(self.amcMissionId)
        if self.gdssMissionId is not None:
            gdssMissionId = builder.CreateString(self.gdssMissionId)
        if self.prevMissionId is not None:
            prevMissionId = builder.CreateString(self.prevMissionId)
        if self.prevAmcmissionId is not None:
            prevAmcmissionId = builder.CreateString(self.prevAmcmissionId)
        if self.nextMissionId is not None:
            nextMissionId = builder.CreateString(self.nextMissionId)
        if self.nextAmcmissionId is not None:
            nextAmcmissionId = builder.CreateString(self.nextAmcmissionId)
        if self.objective is not None:
            objective = builder.CreateString(self.objective)
        if self.purpose is not None:
            purpose = builder.CreateString(self.purpose)
        if self.jcsPriority is not None:
            jcsPriority = builder.CreateString(self.jcsPriority)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.firstPickUp is not None:
            firstPickUp = builder.CreateString(self.firstPickUp)
        if self.lastDropOff is not None:
            lastDropOff = builder.CreateString(self.lastDropOff)
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.operation is not None:
            operation = builder.CreateString(self.operation)
        if self.naf is not None:
            naf = builder.CreateString(self.naf)
        if self.allocatedUnit is not None:
            allocatedUnit = builder.CreateString(self.allocatedUnit)
        if self.loadCategoryType is not None:
            loadCategoryType = builder.CreateString(self.loadCategoryType)
        if self.state is not None:
            state = builder.CreateString(self.state)
        if self.apacsId is not None:
            apacsId = builder.CreateString(self.apacsId)
        if self.dipWorksheetName is not None:
            dipWorksheetName = builder.CreateString(self.dipWorksheetName)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.requirements is not None:
            requirementslist = []
            for i in range(len(self.requirements)):
                requirementslist.append(builder.CreateString(self.requirements[i]))
            AirTransportMission_IngestStartRequirementsVector(builder, len(self.requirements))
            for i in reversed(range(len(self.requirements))):
                builder.PrependUOffsetTRelative(requirementslist[i])
            requirements = builder.EndVector()
        if self.remarks is not None:
            remarkslist = []
            for i in range(len(self.remarks)):
                remarkslist.append(builder.CreateString(self.remarks[i]))
            AirTransportMission_IngestStartRemarksVector(builder, len(self.remarks))
            for i in reversed(range(len(self.remarks))):
                builder.PrependUOffsetTRelative(remarkslist[i])
            remarks = builder.EndVector()
        if self.hazMat is not None:
            hazMatlist = []
            for i in range(len(self.hazMat)):
                hazMatlist.append(builder.CreateString(self.hazMat[i]))
            AirTransportMission_IngestStartHazMatVector(builder, len(self.hazMat))
            for i in reversed(range(len(self.hazMat))):
                builder.PrependUOffsetTRelative(hazMatlist[i])
            hazMat = builder.EndVector()
        AirTransportMission_IngestStart(builder)
        if self.id is not None:
            AirTransportMission_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            AirTransportMission_IngestAddClassificationMarking(builder, classificationMarking)
        if self.origMissionId is not None:
            AirTransportMission_IngestAddOrigMissionId(builder, origMissionId)
        if self.amcMissionId is not None:
            AirTransportMission_IngestAddAmcMissionId(builder, amcMissionId)
        if self.gdssMissionId is not None:
            AirTransportMission_IngestAddGdssMissionId(builder, gdssMissionId)
        if self.prevMissionId is not None:
            AirTransportMission_IngestAddPrevMissionId(builder, prevMissionId)
        if self.prevAmcmissionId is not None:
            AirTransportMission_IngestAddPrevAmcmissionId(builder, prevAmcmissionId)
        if self.nextMissionId is not None:
            AirTransportMission_IngestAddNextMissionId(builder, nextMissionId)
        if self.nextAmcmissionId is not None:
            AirTransportMission_IngestAddNextAmcmissionId(builder, nextAmcmissionId)
        if self.objective is not None:
            AirTransportMission_IngestAddObjective(builder, objective)
        if self.purpose is not None:
            AirTransportMission_IngestAddPurpose(builder, purpose)
        if self.jcsPriority is not None:
            AirTransportMission_IngestAddJcsPriority(builder, jcsPriority)
        AirTransportMission_IngestAddCw(builder, self.cw)
        if self.type is not None:
            AirTransportMission_IngestAddType(builder, type)
        if self.firstPickUp is not None:
            AirTransportMission_IngestAddFirstPickUp(builder, firstPickUp)
        if self.lastDropOff is not None:
            AirTransportMission_IngestAddLastDropOff(builder, lastDropOff)
        if self.alias is not None:
            AirTransportMission_IngestAddAlias(builder, alias)
        if self.callSign is not None:
            AirTransportMission_IngestAddCallSign(builder, callSign)
        if self.operation is not None:
            AirTransportMission_IngestAddOperation(builder, operation)
        if self.naf is not None:
            AirTransportMission_IngestAddNaf(builder, naf)
        if self.allocatedUnit is not None:
            AirTransportMission_IngestAddAllocatedUnit(builder, allocatedUnit)
        if self.loadCategoryType is not None:
            AirTransportMission_IngestAddLoadCategoryType(builder, loadCategoryType)
        if self.state is not None:
            AirTransportMission_IngestAddState(builder, state)
        AirTransportMission_IngestAddSourceSysDeviation(builder, self.sourceSysDeviation)
        if self.apacsId is not None:
            AirTransportMission_IngestAddApacsId(builder, apacsId)
        if self.dipWorksheetName is not None:
            AirTransportMission_IngestAddDipWorksheetName(builder, dipWorksheetName)
        if self.createdAt is not None:
            AirTransportMission_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirTransportMission_IngestAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AirTransportMission_IngestAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AirTransportMission_IngestAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            AirTransportMission_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirTransportMission_IngestAddSource(builder, source)
        if self.origin is not None:
            AirTransportMission_IngestAddOrigin(builder, origin)
        AirTransportMission_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AirTransportMission_IngestAddOrigNetwork(builder, origNetwork)
        if self.requirements is not None:
            AirTransportMission_IngestAddRequirements(builder, requirements)
        if self.remarks is not None:
            AirTransportMission_IngestAddRemarks(builder, remarks)
        if self.hazMat is not None:
            AirTransportMission_IngestAddHazMat(builder, hazMat)
        airTransportMissionIngest = AirTransportMission_IngestEnd(builder)
        return airTransportMissionIngest
