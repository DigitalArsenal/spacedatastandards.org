# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
class FlightPlanMessages_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlanMessages_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlanMessages_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlanMessages_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlanMessages_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The severity of the message.
    # Example: /// Example: SEVERE
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanMessages_Ingest
    def Severity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
    # Example: /// Example: 20
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlanMessages_Ingest
    def WpNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
    # Example: /// Example: PRIMARY
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanMessages_Ingest
    def RoutePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The text of the message.
    # Example: /// Example: Message text
    # Constraints: Minimum length = 0, Maximum length = 256
    # FlightPlanMessages_Ingest
    def MsgText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FlightPlanMessages_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    FlightPlanMessages_IngestStart(builder)

def FlightPlanMessages_IngestAddSeverity(builder, severity):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(severity), 0)

def AddSeverity(builder, severity):
    FlightPlanMessages_IngestAddSeverity(builder, severity)

def FlightPlanMessages_IngestAddWpNum(builder, wpNum):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(wpNum), 0)

def AddWpNum(builder, wpNum):
    FlightPlanMessages_IngestAddWpNum(builder, wpNum)

def FlightPlanMessages_IngestAddRoutePath(builder, routePath):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(routePath), 0)

def AddRoutePath(builder, routePath):
    FlightPlanMessages_IngestAddRoutePath(builder, routePath)

def FlightPlanMessages_IngestAddMsgText(builder, msgText):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgText), 0)

def AddMsgText(builder, msgText):
    FlightPlanMessages_IngestAddMsgText(builder, msgText)

def FlightPlanMessages_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlanMessages_IngestEnd(builder)


class FlightPlanMessages_IngestT(object):

    # FlightPlanMessages_IngestT
    def __init__(self):
        self.severity = None  # type: str
        self.wpNum = None  # type: str
        self.routePath = None  # type: str
        self.msgText = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanMessagesIngest = FlightPlanMessages_Ingest()
        flightPlanMessagesIngest.Init(buf, pos)
        return cls.InitFromObj(flightPlanMessagesIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanMessagesIngest):
        x = FlightPlanMessages_IngestT()
        x._UnPack(flightPlanMessagesIngest)
        return x

    # FlightPlanMessages_IngestT
    def _UnPack(self, flightPlanMessagesIngest):
        if flightPlanMessagesIngest is None:
            return
        self.severity = flightPlanMessagesIngest.Severity()
        self.wpNum = flightPlanMessagesIngest.WpNum()
        self.routePath = flightPlanMessagesIngest.RoutePath()
        self.msgText = flightPlanMessagesIngest.MsgText()

    # FlightPlanMessages_IngestT
    def Pack(self, builder):
        if self.severity is not None:
            severity = builder.CreateString(self.severity)
        if self.wpNum is not None:
            wpNum = builder.CreateString(self.wpNum)
        if self.routePath is not None:
            routePath = builder.CreateString(self.routePath)
        if self.msgText is not None:
            msgText = builder.CreateString(self.msgText)
        FlightPlanMessages_IngestStart(builder)
        if self.severity is not None:
            FlightPlanMessages_IngestAddSeverity(builder, severity)
        if self.wpNum is not None:
            FlightPlanMessages_IngestAddWpNum(builder, wpNum)
        if self.routePath is not None:
            FlightPlanMessages_IngestAddRoutePath(builder, routePath)
        if self.msgText is not None:
            FlightPlanMessages_IngestAddMsgText(builder, msgText)
        flightPlanMessagesIngest = FlightPlanMessages_IngestEnd(builder)
        return flightPlanMessagesIngest
