# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
class MtiHRR_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MtiHRR_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMtiHRR_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MtiHRR_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x54\x49\x48", size_prefixed=size_prefixed)

    # MtiHRR_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sequential count of a revisit of the bounding area for a given job ID.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag to indicate the last dwell of the revisit.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Sequential index of the associated MTI Report.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Range Bins/Samples in a Range Doppler Chip.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Doppler bins in a Range-Doppler chip.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H9(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # 3dB range impulse response of the radar, expressed in centimeters.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H11(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Slant Range pixel spacing after over sampling, expressed in centimeters.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H12(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 3dB Doppler resolution of the radar, expressed in Hertz.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H13(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Doppler pixel spacing after over sampling, expressed in Hertz.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H14(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Center Frequency of the radar in GHz.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H15(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Enumeration table denoting the compression technique used.
    # Example: /// Example: TABLE
    # Constraints: Minimum length = 0, Maximum length = 32
    # MtiHRR_Ingest
    def H16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Enumeration table indicating the spectral weighting used in the range compression process.
    # Example: /// Example: TABLE
    # Constraints: Minimum length = 0, Maximum length = 32
    # MtiHRR_Ingest
    def H17(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
    # Example: /// Example: TABLE
    # Constraints: Minimum length = 0, Maximum length = 32
    # MtiHRR_Ingest
    def H18(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Initial power of the peak scatterer, expressed in dB.
    # Example: /// Example: 12.23
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H19(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # RCS of the peak scatterer, expressed in half-decibels (dB/2).
    # Example: /// Example: 117
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H20(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H21(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H22(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Enumeration field which designates the type of data being delivered.
    # Example: /// Example: FIELD
    # Constraints: Minimum length = 0, Maximum length = 32
    # MtiHRR_Ingest
    def H23(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag field to indicate the additional signal processing techniques applied to the data.
    # Example: /// Example: FLAG
    # Constraints: Minimum length = 0, Maximum length = 64
    # MtiHRR_Ingest
    def H24(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of pixels in the range dimension of the chip.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H27(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
    # Example: /// Example: 1234567890
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H28(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Relative velocity to skin line.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H29(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Computed object length based upon HRR profile, in meters.
    # Example: /// Example: 22
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H30(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation of estimate of the object length, expressed in meters.
    # Example: /// Example: 55
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H31(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Standard deviation of estimate of the object length, expressed in meters.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # MtiHRR_Ingest
    def H32(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MtiHRR_Ingest
    def H32Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MtiHRR_Ingest
    def H32IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

def MtiHRR_IngestStart(builder):
    builder.StartObject(29)

def Start(builder):
    MtiHRR_IngestStart(builder)

def MtiHRR_IngestAddH2(builder, h2):
    builder.PrependInt32Slot(0, h2, 0)

def AddH2(builder, h2):
    MtiHRR_IngestAddH2(builder, h2)

def MtiHRR_IngestAddH3(builder, h3):
    builder.PrependInt32Slot(1, h3, 0)

def AddH3(builder, h3):
    MtiHRR_IngestAddH3(builder, h3)

def MtiHRR_IngestAddH4(builder, h4):
    builder.PrependBoolSlot(2, h4, 0)

def AddH4(builder, h4):
    MtiHRR_IngestAddH4(builder, h4)

def MtiHRR_IngestAddH5(builder, h5):
    builder.PrependInt32Slot(3, h5, 0)

def AddH5(builder, h5):
    MtiHRR_IngestAddH5(builder, h5)

def MtiHRR_IngestAddH6(builder, h6):
    builder.PrependInt32Slot(4, h6, 0)

def AddH6(builder, h6):
    MtiHRR_IngestAddH6(builder, h6)

def MtiHRR_IngestAddH7(builder, h7):
    builder.PrependInt32Slot(5, h7, 0)

def AddH7(builder, h7):
    MtiHRR_IngestAddH7(builder, h7)

def MtiHRR_IngestAddH8(builder, h8):
    builder.PrependInt32Slot(6, h8, 0)

def AddH8(builder, h8):
    MtiHRR_IngestAddH8(builder, h8)

def MtiHRR_IngestAddH9(builder, h9):
    builder.PrependInt32Slot(7, h9, 0)

def AddH9(builder, h9):
    MtiHRR_IngestAddH9(builder, h9)

def MtiHRR_IngestAddH10(builder, h10):
    builder.PrependInt32Slot(8, h10, 0)

def AddH10(builder, h10):
    MtiHRR_IngestAddH10(builder, h10)

def MtiHRR_IngestAddH11(builder, h11):
    builder.PrependFloat64Slot(9, h11, 0.0)

def AddH11(builder, h11):
    MtiHRR_IngestAddH11(builder, h11)

def MtiHRR_IngestAddH12(builder, h12):
    builder.PrependFloat64Slot(10, h12, 0.0)

def AddH12(builder, h12):
    MtiHRR_IngestAddH12(builder, h12)

def MtiHRR_IngestAddH13(builder, h13):
    builder.PrependFloat64Slot(11, h13, 0.0)

def AddH13(builder, h13):
    MtiHRR_IngestAddH13(builder, h13)

def MtiHRR_IngestAddH14(builder, h14):
    builder.PrependFloat64Slot(12, h14, 0.0)

def AddH14(builder, h14):
    MtiHRR_IngestAddH14(builder, h14)

def MtiHRR_IngestAddH15(builder, h15):
    builder.PrependFloat64Slot(13, h15, 0.0)

def AddH15(builder, h15):
    MtiHRR_IngestAddH15(builder, h15)

def MtiHRR_IngestAddH16(builder, h16):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(h16), 0)

def AddH16(builder, h16):
    MtiHRR_IngestAddH16(builder, h16)

def MtiHRR_IngestAddH17(builder, h17):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(h17), 0)

def AddH17(builder, h17):
    MtiHRR_IngestAddH17(builder, h17)

def MtiHRR_IngestAddH18(builder, h18):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(h18), 0)

def AddH18(builder, h18):
    MtiHRR_IngestAddH18(builder, h18)

def MtiHRR_IngestAddH19(builder, h19):
    builder.PrependFloat64Slot(17, h19, 0.0)

def AddH19(builder, h19):
    MtiHRR_IngestAddH19(builder, h19)

def MtiHRR_IngestAddH20(builder, h20):
    builder.PrependInt32Slot(18, h20, 0)

def AddH20(builder, h20):
    MtiHRR_IngestAddH20(builder, h20)

def MtiHRR_IngestAddH21(builder, h21):
    builder.PrependInt32Slot(19, h21, 0)

def AddH21(builder, h21):
    MtiHRR_IngestAddH21(builder, h21)

def MtiHRR_IngestAddH22(builder, h22):
    builder.PrependInt32Slot(20, h22, 0)

def AddH22(builder, h22):
    MtiHRR_IngestAddH22(builder, h22)

def MtiHRR_IngestAddH23(builder, h23):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(h23), 0)

def AddH23(builder, h23):
    MtiHRR_IngestAddH23(builder, h23)

def MtiHRR_IngestAddH24(builder, h24):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(h24), 0)

def AddH24(builder, h24):
    MtiHRR_IngestAddH24(builder, h24)

def MtiHRR_IngestAddH27(builder, h27):
    builder.PrependInt32Slot(23, h27, 0)

def AddH27(builder, h27):
    MtiHRR_IngestAddH27(builder, h27)

def MtiHRR_IngestAddH28(builder, h28):
    builder.PrependInt64Slot(24, h28, 0)

def AddH28(builder, h28):
    MtiHRR_IngestAddH28(builder, h28)

def MtiHRR_IngestAddH29(builder, h29):
    builder.PrependInt32Slot(25, h29, 0)

def AddH29(builder, h29):
    MtiHRR_IngestAddH29(builder, h29)

def MtiHRR_IngestAddH30(builder, h30):
    builder.PrependInt32Slot(26, h30, 0)

def AddH30(builder, h30):
    MtiHRR_IngestAddH30(builder, h30)

def MtiHRR_IngestAddH31(builder, h31):
    builder.PrependInt32Slot(27, h31, 0)

def AddH31(builder, h31):
    MtiHRR_IngestAddH31(builder, h31)

def MtiHRR_IngestAddH32(builder, h32):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(h32), 0)

def AddH32(builder, h32):
    MtiHRR_IngestAddH32(builder, h32)

def MtiHRR_IngestStartH32Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartH32Vector(builder, numElems):
    return MtiHRR_IngestStartH32Vector(builder, numElems)

def MtiHRR_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return MtiHRR_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class MtiHRR_IngestT(object):

    # MtiHRR_IngestT
    def __init__(self):
        self.h2 = 0  # type: int
        self.h3 = 0  # type: int
        self.h4 = False  # type: bool
        self.h5 = 0  # type: int
        self.h6 = 0  # type: int
        self.h7 = 0  # type: int
        self.h8 = 0  # type: int
        self.h9 = 0  # type: int
        self.h10 = 0  # type: int
        self.h11 = 0.0  # type: float
        self.h12 = 0.0  # type: float
        self.h13 = 0.0  # type: float
        self.h14 = 0.0  # type: float
        self.h15 = 0.0  # type: float
        self.h16 = None  # type: str
        self.h17 = None  # type: str
        self.h18 = None  # type: str
        self.h19 = 0.0  # type: float
        self.h20 = 0  # type: int
        self.h21 = 0  # type: int
        self.h22 = 0  # type: int
        self.h23 = None  # type: str
        self.h24 = None  # type: str
        self.h27 = 0  # type: int
        self.h28 = 0  # type: int
        self.h29 = 0  # type: int
        self.h30 = 0  # type: int
        self.h31 = 0  # type: int
        self.h32 = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtiHrrIngest = MtiHRR_Ingest()
        mtiHrrIngest.Init(buf, pos)
        return cls.InitFromObj(mtiHrrIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtiHrrIngest):
        x = MtiHRR_IngestT()
        x._UnPack(mtiHrrIngest)
        return x

    # MtiHRR_IngestT
    def _UnPack(self, mtiHrrIngest):
        if mtiHrrIngest is None:
            return
        self.h2 = mtiHrrIngest.H2()
        self.h3 = mtiHrrIngest.H3()
        self.h4 = mtiHrrIngest.H4()
        self.h5 = mtiHrrIngest.H5()
        self.h6 = mtiHrrIngest.H6()
        self.h7 = mtiHrrIngest.H7()
        self.h8 = mtiHrrIngest.H8()
        self.h9 = mtiHrrIngest.H9()
        self.h10 = mtiHrrIngest.H10()
        self.h11 = mtiHrrIngest.H11()
        self.h12 = mtiHrrIngest.H12()
        self.h13 = mtiHrrIngest.H13()
        self.h14 = mtiHrrIngest.H14()
        self.h15 = mtiHrrIngest.H15()
        self.h16 = mtiHrrIngest.H16()
        self.h17 = mtiHrrIngest.H17()
        self.h18 = mtiHrrIngest.H18()
        self.h19 = mtiHrrIngest.H19()
        self.h20 = mtiHrrIngest.H20()
        self.h21 = mtiHrrIngest.H21()
        self.h22 = mtiHrrIngest.H22()
        self.h23 = mtiHrrIngest.H23()
        self.h24 = mtiHrrIngest.H24()
        self.h27 = mtiHrrIngest.H27()
        self.h28 = mtiHrrIngest.H28()
        self.h29 = mtiHrrIngest.H29()
        self.h30 = mtiHrrIngest.H30()
        self.h31 = mtiHrrIngest.H31()
        if not mtiHrrIngest.H32IsNone():
            self.h32 = []
            for i in range(mtiHrrIngest.H32Length()):
                self.h32.append(mtiHrrIngest.H32(i))

    # MtiHRR_IngestT
    def Pack(self, builder):
        if self.h16 is not None:
            h16 = builder.CreateString(self.h16)
        if self.h17 is not None:
            h17 = builder.CreateString(self.h17)
        if self.h18 is not None:
            h18 = builder.CreateString(self.h18)
        if self.h23 is not None:
            h23 = builder.CreateString(self.h23)
        if self.h24 is not None:
            h24 = builder.CreateString(self.h24)
        if self.h32 is not None:
            h32list = []
            for i in range(len(self.h32)):
                h32list.append(builder.CreateString(self.h32[i]))
            MtiHRR_IngestStartH32Vector(builder, len(self.h32))
            for i in reversed(range(len(self.h32))):
                builder.PrependUOffsetTRelative(h32list[i])
            h32 = builder.EndVector()
        MtiHRR_IngestStart(builder)
        MtiHRR_IngestAddH2(builder, self.h2)
        MtiHRR_IngestAddH3(builder, self.h3)
        MtiHRR_IngestAddH4(builder, self.h4)
        MtiHRR_IngestAddH5(builder, self.h5)
        MtiHRR_IngestAddH6(builder, self.h6)
        MtiHRR_IngestAddH7(builder, self.h7)
        MtiHRR_IngestAddH8(builder, self.h8)
        MtiHRR_IngestAddH9(builder, self.h9)
        MtiHRR_IngestAddH10(builder, self.h10)
        MtiHRR_IngestAddH11(builder, self.h11)
        MtiHRR_IngestAddH12(builder, self.h12)
        MtiHRR_IngestAddH13(builder, self.h13)
        MtiHRR_IngestAddH14(builder, self.h14)
        MtiHRR_IngestAddH15(builder, self.h15)
        if self.h16 is not None:
            MtiHRR_IngestAddH16(builder, h16)
        if self.h17 is not None:
            MtiHRR_IngestAddH17(builder, h17)
        if self.h18 is not None:
            MtiHRR_IngestAddH18(builder, h18)
        MtiHRR_IngestAddH19(builder, self.h19)
        MtiHRR_IngestAddH20(builder, self.h20)
        MtiHRR_IngestAddH21(builder, self.h21)
        MtiHRR_IngestAddH22(builder, self.h22)
        if self.h23 is not None:
            MtiHRR_IngestAddH23(builder, h23)
        if self.h24 is not None:
            MtiHRR_IngestAddH24(builder, h24)
        MtiHRR_IngestAddH27(builder, self.h27)
        MtiHRR_IngestAddH28(builder, self.h28)
        MtiHRR_IngestAddH29(builder, self.h29)
        MtiHRR_IngestAddH30(builder, self.h30)
        MtiHRR_IngestAddH31(builder, self.h31)
        if self.h32 is not None:
            MtiHRR_IngestAddH32(builder, h32)
        mtiHrrIngest = MtiHRR_IngestEnd(builder)
        return mtiHrrIngest
