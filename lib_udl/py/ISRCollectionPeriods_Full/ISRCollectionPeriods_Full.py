# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Tasking collection periods.
class ISRCollectionPeriods_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionPeriods_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionPeriods_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionPeriods_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionPeriods_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionPeriods_Full
    def Planned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Actual start and stop for the collection.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionPeriods_Full
    def Actual(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollectionPeriods_Full
    def ActualLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollectionPeriods_Full
    def ActualIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ISRCollectionPeriods_FullStart(builder):
    builder.StartObject(2)

def Start(builder):
    ISRCollectionPeriods_FullStart(builder)

def ISRCollectionPeriods_FullAddPlanned(builder, planned):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(planned), 0)

def AddPlanned(builder, planned):
    ISRCollectionPeriods_FullAddPlanned(builder, planned)

def ISRCollectionPeriods_FullAddActual(builder, actual):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actual), 0)

def AddActual(builder, actual):
    ISRCollectionPeriods_FullAddActual(builder, actual)

def ISRCollectionPeriods_FullStartActualVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActualVector(builder, numElems):
    return ISRCollectionPeriods_FullStartActualVector(builder, numElems)

def ISRCollectionPeriods_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionPeriods_FullEnd(builder)

try:
    from typing import List
except:
    pass

class ISRCollectionPeriods_FullT(object):

    # ISRCollectionPeriods_FullT
    def __init__(self):
        self.planned = None  # type: str
        self.actual = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionPeriodsFull = ISRCollectionPeriods_Full()
        isrcollectionPeriodsFull.Init(buf, pos)
        return cls.InitFromObj(isrcollectionPeriodsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionPeriodsFull):
        x = ISRCollectionPeriods_FullT()
        x._UnPack(isrcollectionPeriodsFull)
        return x

    # ISRCollectionPeriods_FullT
    def _UnPack(self, isrcollectionPeriodsFull):
        if isrcollectionPeriodsFull is None:
            return
        self.planned = isrcollectionPeriodsFull.Planned()
        if not isrcollectionPeriodsFull.ActualIsNone():
            self.actual = []
            for i in range(isrcollectionPeriodsFull.ActualLength()):
                self.actual.append(isrcollectionPeriodsFull.Actual(i))

    # ISRCollectionPeriods_FullT
    def Pack(self, builder):
        if self.planned is not None:
            planned = builder.CreateString(self.planned)
        if self.actual is not None:
            actuallist = []
            for i in range(len(self.actual)):
                actuallist.append(builder.CreateString(self.actual[i]))
            ISRCollectionPeriods_FullStartActualVector(builder, len(self.actual))
            for i in reversed(range(len(self.actual))):
                builder.PrependUOffsetTRelative(actuallist[i])
            actual = builder.EndVector()
        ISRCollectionPeriods_FullStart(builder)
        if self.planned is not None:
            ISRCollectionPeriods_FullAddPlanned(builder, planned)
        if self.actual is not None:
            ISRCollectionPeriods_FullAddActual(builder, actual)
        isrcollectionPeriodsFull = ISRCollectionPeriods_FullEnd(builder)
        return isrcollectionPeriodsFull
