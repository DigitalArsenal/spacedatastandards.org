# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
class Site_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Site_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSite_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Site_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x49\x54\x45", size_prefixed=size_prefixed)

    # Site_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SITE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Site_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Site_Ingest
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent entity. idEntity is required for Put.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Site_Ingest
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Parent Site record associated with this Site record.
    # Example: /// Example: ID-Parent-Site
    # Constraints: Minimum length = 0, Maximum length = 36
    # Site_Ingest
    def IdParentSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Site_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Site record from the originating system.
    # Example: /// Example: ORIG-SITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Site_Ingest
    def OrigSiteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the LZ record from the originating system.
    # Example: /// Example: ORIG-LZ-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Site_Ingest
    def OrigLzId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Site number of a specific electronic site or its associated equipment.
    # Example: /// Example: 25200
    # Constraints: Minimum length = 0, Maximum length = 5
    # Site_Ingest
    def Pin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
    # Example: /// Example: AIRBASE
    # Constraints: Minimum length = 0, Maximum length = 16
    # Site_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
    # Example: /// Example: MILITARY
    # Constraints: Minimum length = 0, Maximum length = 16
    # Site_Ingest
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
    # AF - Airfield
    # FD - Field
    # HC - High Crop.  1 meter and over.
    # HY - Highway
    # LB - Lake Bed
    # LC - Low Crop.  0-1 meters
    # O - Other. Explain In Remarks.
    # PD - Paddy
    # PK - Park
    # PS - Pasture
    # RB - Riverbed
    # SP - Sport Field
    # U - Unknown
    # Z - Inconclusive Analysis.
    # Example: /// Example: AF
    # Constraints: Minimum length = 0, Maximum length = 3
    # Site_Ingest
    def LzUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of this site.
    # Example: /// Example: Site Name
    # Constraints: Minimum length = 1, Maximum length = 128
    # Site_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: WGS
    # Constraints: Minimum length = 0, Maximum length = 3
    # Site_Ingest
    def CoordDatum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
    # Pos. 1-2.  Latitude Degrees     [00-90]
    # Pos. 3-4.  Latitude Minutes     [00-59]
    # Pos. 5-6.  Latitude Seconds     [00-59]
    # Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
    # Pos. 10. Latitude Hemisphere       [NS] 
    # Pos. 11-13. Longitude Degrees     [00-180] 
    # Pos. 14-15. Longitude Minutes     [00-59] 
    # Pos. 16-17. Longitude Seconds     [00-59] 
    # Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
    # Pos. 21. Longitude Hemisphere     [EW]
    # Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
    # Example: /// Example: 340000000N0430000000E
    # Constraints: Minimum length = 0, Maximum length = 21
    # Site_Ingest
    def Coord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the plus or minus error assessed against the method used to derive the coordinate.
    # Example: /// Example: 12.345
    # Constraints: No constraints specified.
    # Site_Ingest
    def CoordDerivAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
    # Example: /// Example: BB002
    # Constraints: Minimum length = 0, Maximum length = 5
    # Site_Ingest
    def Osuffix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Air Transport Association (IATA) code of this site, if applicable.
    # Example: /// Example: AAA
    # Constraints: Minimum length = 0, Maximum length = 3
    # Site_Ingest
    def Iata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code of this site, if applicable.
    # Example: /// Example: ICA1
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def Icao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
    # Example: /// Example: FAA1
    # Constraints: Minimum length = 0, Maximum length = 5
    # Site_Ingest
    def Faa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
    # Example: /// Example: AL006
    # Constraints: Minimum length = 0, Maximum length = 5
    # Site_Ingest
    def AirDefArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Universal Transverse Mercator (UTM) grid coordinates.
    # Pos. 1-2, UTM Zone Column   [01-60
    # Pos. 3, UTM Zone Row   [C-HJ-NP-X]
    # Pos. 4, UTM False Easting   [0-9]
    # Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
    # Pos. 10-11, UTM False Northing    [0-9][0-9]
    # Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
    # Example: /// Example: 19P4390691376966
    # Constraints: Minimum length = 0, Maximum length = 16
    # Site_Ingest
    def Utm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the grid system used in the development of the milGrid coordinates. Values are:
    # UPS - Universal Polar System
    # UTM - Universal Transverse Mercator.
    # Example: /// Example: UTM
    # Constraints: Minimum length = 0, Maximum length = 3
    # Site_Ingest
    def MilGridSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    # 4Q (grid zone designator, GZD)
    # FJ (the 100,000-meter square identifier)
    # 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    # Example: /// Example: 4QFJ12345678
    # Constraints: Minimum length = 0, Maximum length = 15
    # Site_Ingest
    def MilGrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The category code that represents the associated site purpose within the target system.
    # Example: /// Example: 20345
    # Constraints: Minimum length = 0, Maximum length = 16
    # Site_Ingest
    def CatCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Textual Description of Site catCode.
    # Example: /// Example: Radar Facility, General
    # Constraints: Minimum length = 0, Maximum length = 148
    # Site_Ingest
    def CatText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # World Aeronautical Chart identifier for the area in which a designated place is located.
    # Example: /// Example: 0427
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def Wac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: IZO7
    # Constraints: Minimum length = 0, Maximum length = 7
    # Site_Ingest
    def PolSubdiv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: E2
    # Constraints: Minimum length = 0, Maximum length = 2
    # Site_Ingest
    def GeoArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The distance between Mean Sea Level and a referenced ellipsoid, in meters.
    # Example: /// Example: 12.34
    # Constraints: No constraints specified.
    # Site_Ingest
    def GeoidalMslSep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: OTHR
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def Allegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
    # Example: /// Example: HL
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def AltAllegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
    # 0 - Does not meet criteria above
    # 1 - Primary importance to system
    # 2 - Secondary importance to system
    # 3 - Tertiary importance to system
    # O - Other. Explain in Remarks.
    # Example: /// Example: 1
    # Constraints: Minimum length = 0, Maximum length = 1
    # Site_Ingest
    def ClassRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: EOB
    # Constraints: Minimum length = 0, Maximum length = 5
    # Site_Ingest
    def Fpa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
    # Example: /// Example: 0427RT1030
    # Constraints: Minimum length = 0, Maximum length = 10
    # Site_Ingest
    def BeNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of runways at the site, if applicable.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Site_Ingest
    def Runways(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The length of the longest runway at this site, if applicable, in meters.
    # Example: /// Example: 1000
    # Constraints: No constraints specified.
    # Site_Ingest
    def MaxRunwayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: RDY
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def Condition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def ConditionAvail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: OPR
    # Constraints: Minimum length = 0, Maximum length = 3
    # Site_Ingest
    def OperStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Site_Ingest
    def Grade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: OCC
    # Constraints: Minimum length = 0, Maximum length = 3
    # Site_Ingest
    def Activity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: JG
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def FunctPrimary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: AA
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def MsnPrimary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: AB
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def MsnPrimarySpec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A sites ability to conduct nuclear warfare. Valid Values are:
    # A - Nuclear Ammo Or Warheads Available
    # N - No Nuclear Offense
    # O - Other. Explain in Remarks
    # U - Unknown
    # W - Nuclear Weapons Available
    # Y - Nuclear Warfare Offensive Capability
    # Z - Inconclusive Analysis.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 1
    # Site_Ingest
    def NucCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
    # ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    # FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    # HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    # FAKER: Friendly track, object, or entity acting as an exercise hostile.
    # JOKER: Friendly track, object, or entity acting as an exercise suspect.
    # NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    # PENDING: Track object which has not been evaluated.
    # SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    # UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 32
    # Site_Ingest
    def Ident(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
    # Example: /// Example: 123.45
    # Constraints: No constraints specified.
    # Site_Ingest
    def ElevMsl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
    # Example: /// Example: 50
    # Constraints: No constraints specified.
    # Site_Ingest
    def ElevMslConfLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicates the plus or minus error assessed against the method used to derive the elevation.
    # Example: /// Example: 12.34
    # Constraints: No constraints specified.
    # Site_Ingest
    def ElevMslDerivAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Site_Ingest
    def VegHt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: FR
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def VegType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Site_Ingest
    def PopArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
    # Example: /// Example: 12.345
    # Constraints: No constraints specified.
    # Site_Ingest
    def PopAreaProx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional notes/comments for the site.
    # Example: /// Example: Example Notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Site_Ingest
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Responsible Producer - Organization that is responsible for the maintenance of the record.
    # Example: /// Example: RT
    # Constraints: Minimum length = 0, Maximum length = 4
    # Site_Ingest
    def ResProd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # Site_Ingest
    def Eval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
    # Example: /// Example: 2008-06-10
    # Constraints: No constraints specified.
    # Site_Ingest
    def ReviewDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
    # A - Active
    # I - Inactive
    # K - Acknowledged
    # L - Local
    # Q - A nominated (NOM) or Data Change Request (DCR) record
    # R - Production reduced by CMD decision
    # W - Working Record.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 1
    # Site_Ingest
    def RecStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
    # Example: /// Example: SOGPU----------
    # Constraints: Minimum length = 0, Maximum length = 15
    # Site_Ingest
    def SymCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
    # Example: /// Example: Provider Reference Documentation
    # Constraints: Minimum length = 0, Maximum length = 128
    # Site_Ingest
    def ReferenceDoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Site_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Site_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Site_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Site_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Site_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Site_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Site_IngestStart(builder):
    builder.StartObject(66)

def Start(builder):
    Site_IngestStart(builder)

def Site_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Site_IngestAddId(builder, id)

def Site_IngestAddEntity(builder, entity):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)

def AddEntity(builder, entity):
    Site_IngestAddEntity(builder, entity)

def Site_IngestAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Site_IngestAddIdEntity(builder, idEntity)

def Site_IngestAddIdParentSite(builder, idParentSite):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idParentSite), 0)

def AddIdParentSite(builder, idParentSite):
    Site_IngestAddIdParentSite(builder, idParentSite)

def Site_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Site_IngestAddClassificationMarking(builder, classificationMarking)

def Site_IngestAddOrigSiteId(builder, origSiteId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(origSiteId), 0)

def AddOrigSiteId(builder, origSiteId):
    Site_IngestAddOrigSiteId(builder, origSiteId)

def Site_IngestAddOrigLzId(builder, origLzId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origLzId), 0)

def AddOrigLzId(builder, origLzId):
    Site_IngestAddOrigLzId(builder, origLzId)

def Site_IngestAddPin(builder, pin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(pin), 0)

def AddPin(builder, pin):
    Site_IngestAddPin(builder, pin)

def Site_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Site_IngestAddType(builder, type)

def Site_IngestAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def AddUsage(builder, usage):
    Site_IngestAddUsage(builder, usage)

def Site_IngestAddLzUsage(builder, lzUsage):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(lzUsage), 0)

def AddLzUsage(builder, lzUsage):
    Site_IngestAddLzUsage(builder, lzUsage)

def Site_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Site_IngestAddName(builder, name)

def Site_IngestAddCoordDatum(builder, coordDatum):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(coordDatum), 0)

def AddCoordDatum(builder, coordDatum):
    Site_IngestAddCoordDatum(builder, coordDatum)

def Site_IngestAddCoord(builder, coord):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(coord), 0)

def AddCoord(builder, coord):
    Site_IngestAddCoord(builder, coord)

def Site_IngestAddCoordDerivAcc(builder, coordDerivAcc):
    builder.PrependFloat64Slot(14, coordDerivAcc, 0.0)

def AddCoordDerivAcc(builder, coordDerivAcc):
    Site_IngestAddCoordDerivAcc(builder, coordDerivAcc)

def Site_IngestAddOsuffix(builder, osuffix):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(osuffix), 0)

def AddOsuffix(builder, osuffix):
    Site_IngestAddOsuffix(builder, osuffix)

def Site_IngestAddIata(builder, iata):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(iata), 0)

def AddIata(builder, iata):
    Site_IngestAddIata(builder, iata)

def Site_IngestAddIcao(builder, icao):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(icao), 0)

def AddIcao(builder, icao):
    Site_IngestAddIcao(builder, icao)

def Site_IngestAddFaa(builder, faa):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(faa), 0)

def AddFaa(builder, faa):
    Site_IngestAddFaa(builder, faa)

def Site_IngestAddAirDefArea(builder, airDefArea):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(airDefArea), 0)

def AddAirDefArea(builder, airDefArea):
    Site_IngestAddAirDefArea(builder, airDefArea)

def Site_IngestAddUtm(builder, utm):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(utm), 0)

def AddUtm(builder, utm):
    Site_IngestAddUtm(builder, utm)

def Site_IngestAddMilGridSys(builder, milGridSys):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(milGridSys), 0)

def AddMilGridSys(builder, milGridSys):
    Site_IngestAddMilGridSys(builder, milGridSys)

def Site_IngestAddMilGrid(builder, milGrid):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(milGrid), 0)

def AddMilGrid(builder, milGrid):
    Site_IngestAddMilGrid(builder, milGrid)

def Site_IngestAddCatCode(builder, catCode):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(catCode), 0)

def AddCatCode(builder, catCode):
    Site_IngestAddCatCode(builder, catCode)

def Site_IngestAddCatText(builder, catText):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(catText), 0)

def AddCatText(builder, catText):
    Site_IngestAddCatText(builder, catText)

def Site_IngestAddWac(builder, wac):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(wac), 0)

def AddWac(builder, wac):
    Site_IngestAddWac(builder, wac)

def Site_IngestAddPolSubdiv(builder, polSubdiv):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(polSubdiv), 0)

def AddPolSubdiv(builder, polSubdiv):
    Site_IngestAddPolSubdiv(builder, polSubdiv)

def Site_IngestAddGeoArea(builder, geoArea):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(geoArea), 0)

def AddGeoArea(builder, geoArea):
    Site_IngestAddGeoArea(builder, geoArea)

def Site_IngestAddGeoidalMslSep(builder, geoidalMslSep):
    builder.PrependFloat64Slot(28, geoidalMslSep, 0.0)

def AddGeoidalMslSep(builder, geoidalMslSep):
    Site_IngestAddGeoidalMslSep(builder, geoidalMslSep)

def Site_IngestAddAllegiance(builder, allegiance):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(allegiance), 0)

def AddAllegiance(builder, allegiance):
    Site_IngestAddAllegiance(builder, allegiance)

def Site_IngestAddAltAllegiance(builder, altAllegiance):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(altAllegiance), 0)

def AddAltAllegiance(builder, altAllegiance):
    Site_IngestAddAltAllegiance(builder, altAllegiance)

def Site_IngestAddClassRating(builder, classRating):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(classRating), 0)

def AddClassRating(builder, classRating):
    Site_IngestAddClassRating(builder, classRating)

def Site_IngestAddFpa(builder, fpa):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(fpa), 0)

def AddFpa(builder, fpa):
    Site_IngestAddFpa(builder, fpa)

def Site_IngestAddBeNumber(builder, beNumber):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(beNumber), 0)

def AddBeNumber(builder, beNumber):
    Site_IngestAddBeNumber(builder, beNumber)

def Site_IngestAddRunways(builder, runways):
    builder.PrependInt32Slot(34, runways, 0)

def AddRunways(builder, runways):
    Site_IngestAddRunways(builder, runways)

def Site_IngestAddMaxRunwayLength(builder, maxRunwayLength):
    builder.PrependInt32Slot(35, maxRunwayLength, 0)

def AddMaxRunwayLength(builder, maxRunwayLength):
    Site_IngestAddMaxRunwayLength(builder, maxRunwayLength)

def Site_IngestAddCondition(builder, condition):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(condition), 0)

def AddCondition(builder, condition):
    Site_IngestAddCondition(builder, condition)

def Site_IngestAddConditionAvail(builder, conditionAvail):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(conditionAvail), 0)

def AddConditionAvail(builder, conditionAvail):
    Site_IngestAddConditionAvail(builder, conditionAvail)

def Site_IngestAddOperStatus(builder, operStatus):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(operStatus), 0)

def AddOperStatus(builder, operStatus):
    Site_IngestAddOperStatus(builder, operStatus)

def Site_IngestAddGrade(builder, grade):
    builder.PrependInt32Slot(39, grade, 0)

def AddGrade(builder, grade):
    Site_IngestAddGrade(builder, grade)

def Site_IngestAddActivity(builder, activity):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(activity), 0)

def AddActivity(builder, activity):
    Site_IngestAddActivity(builder, activity)

def Site_IngestAddFunctPrimary(builder, functPrimary):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(functPrimary), 0)

def AddFunctPrimary(builder, functPrimary):
    Site_IngestAddFunctPrimary(builder, functPrimary)

def Site_IngestAddMsnPrimary(builder, msnPrimary):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(msnPrimary), 0)

def AddMsnPrimary(builder, msnPrimary):
    Site_IngestAddMsnPrimary(builder, msnPrimary)

def Site_IngestAddMsnPrimarySpec(builder, msnPrimarySpec):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(msnPrimarySpec), 0)

def AddMsnPrimarySpec(builder, msnPrimarySpec):
    Site_IngestAddMsnPrimarySpec(builder, msnPrimarySpec)

def Site_IngestAddNucCap(builder, nucCap):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(nucCap), 0)

def AddNucCap(builder, nucCap):
    Site_IngestAddNucCap(builder, nucCap)

def Site_IngestAddIdent(builder, ident):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(ident), 0)

def AddIdent(builder, ident):
    Site_IngestAddIdent(builder, ident)

def Site_IngestAddElevMsl(builder, elevMsl):
    builder.PrependFloat64Slot(46, elevMsl, 0.0)

def AddElevMsl(builder, elevMsl):
    Site_IngestAddElevMsl(builder, elevMsl)

def Site_IngestAddElevMslConfLvl(builder, elevMslConfLvl):
    builder.PrependInt32Slot(47, elevMslConfLvl, 0)

def AddElevMslConfLvl(builder, elevMslConfLvl):
    Site_IngestAddElevMslConfLvl(builder, elevMslConfLvl)

def Site_IngestAddElevMslDerivAcc(builder, elevMslDerivAcc):
    builder.PrependFloat64Slot(48, elevMslDerivAcc, 0.0)

def AddElevMslDerivAcc(builder, elevMslDerivAcc):
    Site_IngestAddElevMslDerivAcc(builder, elevMslDerivAcc)

def Site_IngestAddVegHt(builder, vegHt):
    builder.PrependFloat64Slot(49, vegHt, 0.0)

def AddVegHt(builder, vegHt):
    Site_IngestAddVegHt(builder, vegHt)

def Site_IngestAddVegType(builder, vegType):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(vegType), 0)

def AddVegType(builder, vegType):
    Site_IngestAddVegType(builder, vegType)

def Site_IngestAddPopArea(builder, popArea):
    builder.PrependBoolSlot(51, popArea, 0)

def AddPopArea(builder, popArea):
    Site_IngestAddPopArea(builder, popArea)

def Site_IngestAddPopAreaProx(builder, popAreaProx):
    builder.PrependFloat64Slot(52, popAreaProx, 0.0)

def AddPopAreaProx(builder, popAreaProx):
    Site_IngestAddPopAreaProx(builder, popAreaProx)

def Site_IngestAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Site_IngestAddNotes(builder, notes)

def Site_IngestAddResProd(builder, resProd):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(resProd), 0)

def AddResProd(builder, resProd):
    Site_IngestAddResProd(builder, resProd)

def Site_IngestAddEval(builder, eval):
    builder.PrependInt32Slot(55, eval, 0)

def AddEval(builder, eval):
    Site_IngestAddEval(builder, eval)

def Site_IngestAddReviewDate(builder, reviewDate):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(reviewDate), 0)

def AddReviewDate(builder, reviewDate):
    Site_IngestAddReviewDate(builder, reviewDate)

def Site_IngestAddRecStatus(builder, recStatus):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(recStatus), 0)

def AddRecStatus(builder, recStatus):
    Site_IngestAddRecStatus(builder, recStatus)

def Site_IngestAddSymCode(builder, symCode):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(symCode), 0)

def AddSymCode(builder, symCode):
    Site_IngestAddSymCode(builder, symCode)

def Site_IngestAddReferenceDoc(builder, referenceDoc):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(referenceDoc), 0)

def AddReferenceDoc(builder, referenceDoc):
    Site_IngestAddReferenceDoc(builder, referenceDoc)

def Site_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Site_IngestAddCreatedAt(builder, createdAt)

def Site_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Site_IngestAddCreatedBy(builder, createdBy)

def Site_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Site_IngestAddSource(builder, source)

def Site_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Site_IngestAddOrigin(builder, origin)

def Site_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Site_IngestAddOrigNetwork(builder, origNetwork)

def Site_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(65, dataMode, 0)

def AddDataMode(builder, dataMode):
    Site_IngestAddDataMode(builder, dataMode)

def Site_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Site_IngestEnd(builder)


class Site_IngestT(object):

    # Site_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.entity = None  # type: str
        self.idEntity = None  # type: str
        self.idParentSite = None  # type: str
        self.classificationMarking = None  # type: str
        self.origSiteId = None  # type: str
        self.origLzId = None  # type: str
        self.pin = None  # type: str
        self.type = None  # type: str
        self.usage = None  # type: str
        self.lzUsage = None  # type: str
        self.name = None  # type: str
        self.coordDatum = None  # type: str
        self.coord = None  # type: str
        self.coordDerivAcc = 0.0  # type: float
        self.osuffix = None  # type: str
        self.iata = None  # type: str
        self.icao = None  # type: str
        self.faa = None  # type: str
        self.airDefArea = None  # type: str
        self.utm = None  # type: str
        self.milGridSys = None  # type: str
        self.milGrid = None  # type: str
        self.catCode = None  # type: str
        self.catText = None  # type: str
        self.wac = None  # type: str
        self.polSubdiv = None  # type: str
        self.geoArea = None  # type: str
        self.geoidalMslSep = 0.0  # type: float
        self.allegiance = None  # type: str
        self.altAllegiance = None  # type: str
        self.classRating = None  # type: str
        self.fpa = None  # type: str
        self.beNumber = None  # type: str
        self.runways = 0  # type: int
        self.maxRunwayLength = 0  # type: int
        self.condition = None  # type: str
        self.conditionAvail = None  # type: str
        self.operStatus = None  # type: str
        self.grade = 0  # type: int
        self.activity = None  # type: str
        self.functPrimary = None  # type: str
        self.msnPrimary = None  # type: str
        self.msnPrimarySpec = None  # type: str
        self.nucCap = None  # type: str
        self.ident = None  # type: str
        self.elevMsl = 0.0  # type: float
        self.elevMslConfLvl = 0  # type: int
        self.elevMslDerivAcc = 0.0  # type: float
        self.vegHt = 0.0  # type: float
        self.vegType = None  # type: str
        self.popArea = False  # type: bool
        self.popAreaProx = 0.0  # type: float
        self.notes = None  # type: str
        self.resProd = None  # type: str
        self.eval = 0  # type: int
        self.reviewDate = None  # type: str
        self.recStatus = None  # type: str
        self.symCode = None  # type: str
        self.referenceDoc = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        siteIngest = Site_Ingest()
        siteIngest.Init(buf, pos)
        return cls.InitFromObj(siteIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, siteIngest):
        x = Site_IngestT()
        x._UnPack(siteIngest)
        return x

    # Site_IngestT
    def _UnPack(self, siteIngest):
        if siteIngest is None:
            return
        self.id = siteIngest.Id()
        self.entity = siteIngest.Entity()
        self.idEntity = siteIngest.IdEntity()
        self.idParentSite = siteIngest.IdParentSite()
        self.classificationMarking = siteIngest.ClassificationMarking()
        self.origSiteId = siteIngest.OrigSiteId()
        self.origLzId = siteIngest.OrigLzId()
        self.pin = siteIngest.Pin()
        self.type = siteIngest.Type()
        self.usage = siteIngest.Usage()
        self.lzUsage = siteIngest.LzUsage()
        self.name = siteIngest.Name()
        self.coordDatum = siteIngest.CoordDatum()
        self.coord = siteIngest.Coord()
        self.coordDerivAcc = siteIngest.CoordDerivAcc()
        self.osuffix = siteIngest.Osuffix()
        self.iata = siteIngest.Iata()
        self.icao = siteIngest.Icao()
        self.faa = siteIngest.Faa()
        self.airDefArea = siteIngest.AirDefArea()
        self.utm = siteIngest.Utm()
        self.milGridSys = siteIngest.MilGridSys()
        self.milGrid = siteIngest.MilGrid()
        self.catCode = siteIngest.CatCode()
        self.catText = siteIngest.CatText()
        self.wac = siteIngest.Wac()
        self.polSubdiv = siteIngest.PolSubdiv()
        self.geoArea = siteIngest.GeoArea()
        self.geoidalMslSep = siteIngest.GeoidalMslSep()
        self.allegiance = siteIngest.Allegiance()
        self.altAllegiance = siteIngest.AltAllegiance()
        self.classRating = siteIngest.ClassRating()
        self.fpa = siteIngest.Fpa()
        self.beNumber = siteIngest.BeNumber()
        self.runways = siteIngest.Runways()
        self.maxRunwayLength = siteIngest.MaxRunwayLength()
        self.condition = siteIngest.Condition()
        self.conditionAvail = siteIngest.ConditionAvail()
        self.operStatus = siteIngest.OperStatus()
        self.grade = siteIngest.Grade()
        self.activity = siteIngest.Activity()
        self.functPrimary = siteIngest.FunctPrimary()
        self.msnPrimary = siteIngest.MsnPrimary()
        self.msnPrimarySpec = siteIngest.MsnPrimarySpec()
        self.nucCap = siteIngest.NucCap()
        self.ident = siteIngest.Ident()
        self.elevMsl = siteIngest.ElevMsl()
        self.elevMslConfLvl = siteIngest.ElevMslConfLvl()
        self.elevMslDerivAcc = siteIngest.ElevMslDerivAcc()
        self.vegHt = siteIngest.VegHt()
        self.vegType = siteIngest.VegType()
        self.popArea = siteIngest.PopArea()
        self.popAreaProx = siteIngest.PopAreaProx()
        self.notes = siteIngest.Notes()
        self.resProd = siteIngest.ResProd()
        self.eval = siteIngest.Eval()
        self.reviewDate = siteIngest.ReviewDate()
        self.recStatus = siteIngest.RecStatus()
        self.symCode = siteIngest.SymCode()
        self.referenceDoc = siteIngest.ReferenceDoc()
        self.createdAt = siteIngest.CreatedAt()
        self.createdBy = siteIngest.CreatedBy()
        self.source = siteIngest.Source()
        self.origin = siteIngest.Origin()
        self.origNetwork = siteIngest.OrigNetwork()
        self.dataMode = siteIngest.DataMode()

    # Site_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.idParentSite is not None:
            idParentSite = builder.CreateString(self.idParentSite)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origSiteId is not None:
            origSiteId = builder.CreateString(self.origSiteId)
        if self.origLzId is not None:
            origLzId = builder.CreateString(self.origLzId)
        if self.pin is not None:
            pin = builder.CreateString(self.pin)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.usage is not None:
            usage = builder.CreateString(self.usage)
        if self.lzUsage is not None:
            lzUsage = builder.CreateString(self.lzUsage)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.coordDatum is not None:
            coordDatum = builder.CreateString(self.coordDatum)
        if self.coord is not None:
            coord = builder.CreateString(self.coord)
        if self.osuffix is not None:
            osuffix = builder.CreateString(self.osuffix)
        if self.iata is not None:
            iata = builder.CreateString(self.iata)
        if self.icao is not None:
            icao = builder.CreateString(self.icao)
        if self.faa is not None:
            faa = builder.CreateString(self.faa)
        if self.airDefArea is not None:
            airDefArea = builder.CreateString(self.airDefArea)
        if self.utm is not None:
            utm = builder.CreateString(self.utm)
        if self.milGridSys is not None:
            milGridSys = builder.CreateString(self.milGridSys)
        if self.milGrid is not None:
            milGrid = builder.CreateString(self.milGrid)
        if self.catCode is not None:
            catCode = builder.CreateString(self.catCode)
        if self.catText is not None:
            catText = builder.CreateString(self.catText)
        if self.wac is not None:
            wac = builder.CreateString(self.wac)
        if self.polSubdiv is not None:
            polSubdiv = builder.CreateString(self.polSubdiv)
        if self.geoArea is not None:
            geoArea = builder.CreateString(self.geoArea)
        if self.allegiance is not None:
            allegiance = builder.CreateString(self.allegiance)
        if self.altAllegiance is not None:
            altAllegiance = builder.CreateString(self.altAllegiance)
        if self.classRating is not None:
            classRating = builder.CreateString(self.classRating)
        if self.fpa is not None:
            fpa = builder.CreateString(self.fpa)
        if self.beNumber is not None:
            beNumber = builder.CreateString(self.beNumber)
        if self.condition is not None:
            condition = builder.CreateString(self.condition)
        if self.conditionAvail is not None:
            conditionAvail = builder.CreateString(self.conditionAvail)
        if self.operStatus is not None:
            operStatus = builder.CreateString(self.operStatus)
        if self.activity is not None:
            activity = builder.CreateString(self.activity)
        if self.functPrimary is not None:
            functPrimary = builder.CreateString(self.functPrimary)
        if self.msnPrimary is not None:
            msnPrimary = builder.CreateString(self.msnPrimary)
        if self.msnPrimarySpec is not None:
            msnPrimarySpec = builder.CreateString(self.msnPrimarySpec)
        if self.nucCap is not None:
            nucCap = builder.CreateString(self.nucCap)
        if self.ident is not None:
            ident = builder.CreateString(self.ident)
        if self.vegType is not None:
            vegType = builder.CreateString(self.vegType)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.resProd is not None:
            resProd = builder.CreateString(self.resProd)
        if self.reviewDate is not None:
            reviewDate = builder.CreateString(self.reviewDate)
        if self.recStatus is not None:
            recStatus = builder.CreateString(self.recStatus)
        if self.symCode is not None:
            symCode = builder.CreateString(self.symCode)
        if self.referenceDoc is not None:
            referenceDoc = builder.CreateString(self.referenceDoc)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Site_IngestStart(builder)
        if self.id is not None:
            Site_IngestAddId(builder, id)
        if self.entity is not None:
            Site_IngestAddEntity(builder, entity)
        if self.idEntity is not None:
            Site_IngestAddIdEntity(builder, idEntity)
        if self.idParentSite is not None:
            Site_IngestAddIdParentSite(builder, idParentSite)
        if self.classificationMarking is not None:
            Site_IngestAddClassificationMarking(builder, classificationMarking)
        if self.origSiteId is not None:
            Site_IngestAddOrigSiteId(builder, origSiteId)
        if self.origLzId is not None:
            Site_IngestAddOrigLzId(builder, origLzId)
        if self.pin is not None:
            Site_IngestAddPin(builder, pin)
        if self.type is not None:
            Site_IngestAddType(builder, type)
        if self.usage is not None:
            Site_IngestAddUsage(builder, usage)
        if self.lzUsage is not None:
            Site_IngestAddLzUsage(builder, lzUsage)
        if self.name is not None:
            Site_IngestAddName(builder, name)
        if self.coordDatum is not None:
            Site_IngestAddCoordDatum(builder, coordDatum)
        if self.coord is not None:
            Site_IngestAddCoord(builder, coord)
        Site_IngestAddCoordDerivAcc(builder, self.coordDerivAcc)
        if self.osuffix is not None:
            Site_IngestAddOsuffix(builder, osuffix)
        if self.iata is not None:
            Site_IngestAddIata(builder, iata)
        if self.icao is not None:
            Site_IngestAddIcao(builder, icao)
        if self.faa is not None:
            Site_IngestAddFaa(builder, faa)
        if self.airDefArea is not None:
            Site_IngestAddAirDefArea(builder, airDefArea)
        if self.utm is not None:
            Site_IngestAddUtm(builder, utm)
        if self.milGridSys is not None:
            Site_IngestAddMilGridSys(builder, milGridSys)
        if self.milGrid is not None:
            Site_IngestAddMilGrid(builder, milGrid)
        if self.catCode is not None:
            Site_IngestAddCatCode(builder, catCode)
        if self.catText is not None:
            Site_IngestAddCatText(builder, catText)
        if self.wac is not None:
            Site_IngestAddWac(builder, wac)
        if self.polSubdiv is not None:
            Site_IngestAddPolSubdiv(builder, polSubdiv)
        if self.geoArea is not None:
            Site_IngestAddGeoArea(builder, geoArea)
        Site_IngestAddGeoidalMslSep(builder, self.geoidalMslSep)
        if self.allegiance is not None:
            Site_IngestAddAllegiance(builder, allegiance)
        if self.altAllegiance is not None:
            Site_IngestAddAltAllegiance(builder, altAllegiance)
        if self.classRating is not None:
            Site_IngestAddClassRating(builder, classRating)
        if self.fpa is not None:
            Site_IngestAddFpa(builder, fpa)
        if self.beNumber is not None:
            Site_IngestAddBeNumber(builder, beNumber)
        Site_IngestAddRunways(builder, self.runways)
        Site_IngestAddMaxRunwayLength(builder, self.maxRunwayLength)
        if self.condition is not None:
            Site_IngestAddCondition(builder, condition)
        if self.conditionAvail is not None:
            Site_IngestAddConditionAvail(builder, conditionAvail)
        if self.operStatus is not None:
            Site_IngestAddOperStatus(builder, operStatus)
        Site_IngestAddGrade(builder, self.grade)
        if self.activity is not None:
            Site_IngestAddActivity(builder, activity)
        if self.functPrimary is not None:
            Site_IngestAddFunctPrimary(builder, functPrimary)
        if self.msnPrimary is not None:
            Site_IngestAddMsnPrimary(builder, msnPrimary)
        if self.msnPrimarySpec is not None:
            Site_IngestAddMsnPrimarySpec(builder, msnPrimarySpec)
        if self.nucCap is not None:
            Site_IngestAddNucCap(builder, nucCap)
        if self.ident is not None:
            Site_IngestAddIdent(builder, ident)
        Site_IngestAddElevMsl(builder, self.elevMsl)
        Site_IngestAddElevMslConfLvl(builder, self.elevMslConfLvl)
        Site_IngestAddElevMslDerivAcc(builder, self.elevMslDerivAcc)
        Site_IngestAddVegHt(builder, self.vegHt)
        if self.vegType is not None:
            Site_IngestAddVegType(builder, vegType)
        Site_IngestAddPopArea(builder, self.popArea)
        Site_IngestAddPopAreaProx(builder, self.popAreaProx)
        if self.notes is not None:
            Site_IngestAddNotes(builder, notes)
        if self.resProd is not None:
            Site_IngestAddResProd(builder, resProd)
        Site_IngestAddEval(builder, self.eval)
        if self.reviewDate is not None:
            Site_IngestAddReviewDate(builder, reviewDate)
        if self.recStatus is not None:
            Site_IngestAddRecStatus(builder, recStatus)
        if self.symCode is not None:
            Site_IngestAddSymCode(builder, symCode)
        if self.referenceDoc is not None:
            Site_IngestAddReferenceDoc(builder, referenceDoc)
        if self.createdAt is not None:
            Site_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Site_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Site_IngestAddSource(builder, source)
        if self.origin is not None:
            Site_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Site_IngestAddOrigNetwork(builder, origNetwork)
        Site_IngestAddDataMode(builder, self.dataMode)
        siteIngest = Site_IngestEnd(builder)
        return siteIngest
