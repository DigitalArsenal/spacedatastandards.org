# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// For phased arrays, a 2D array. 1st dimension spans the dimension antenna_element (see phase or amplitude). 2nd dimension spans 3 (x, y, z) Cartesian coordinates.
class IonoObservationAntennaElementPosition_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationAntennaElementPosition_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationAntennaElementPosition_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationAntennaElementPosition_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationAntennaElementPosition_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Array of integers of the antenna_element dimensions.
    # Example: /// Example: [3, 4]
    # Constraints: No constraints specified.
    # IonoObservationAntennaElementPosition_Ingest
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationAntennaElementPosition_Ingest
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationAntennaElementPosition_Ingest
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Array of names for dimensions.
    # Example: /// Example: ['NAME1', 'NAME2']
    # Constraints: No constraints specified.
    # IonoObservationAntennaElementPosition_Ingest
    def DimensionName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationAntennaElementPosition_Ingest
    def DimensionNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationAntennaElementPosition_Ingest
    def DimensionNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Array of 3-element tuples (x,y,z) in km.
    # Example: /// Example: [[1.23, 0.123]]
    # Constraints: No constraints specified.
    # IonoObservationAntennaElementPosition_Ingest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationAntennaElementPosition_Ingest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationAntennaElementPosition_Ingest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def IonoObservationAntennaElementPosition_IngestStart(builder):
    builder.StartObject(3)

def Start(builder):
    IonoObservationAntennaElementPosition_IngestStart(builder)

def IonoObservationAntennaElementPosition_IngestAddDimensions(builder, dimensions):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)

def AddDimensions(builder, dimensions):
    IonoObservationAntennaElementPosition_IngestAddDimensions(builder, dimensions)

def IonoObservationAntennaElementPosition_IngestStartDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionsVector(builder, numElems):
    return IonoObservationAntennaElementPosition_IngestStartDimensionsVector(builder, numElems)

def IonoObservationAntennaElementPosition_IngestAddDimensionName(builder, dimensionName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionName), 0)

def AddDimensionName(builder, dimensionName):
    IonoObservationAntennaElementPosition_IngestAddDimensionName(builder, dimensionName)

def IonoObservationAntennaElementPosition_IngestStartDimensionNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionNameVector(builder, numElems):
    return IonoObservationAntennaElementPosition_IngestStartDimensionNameVector(builder, numElems)

def IonoObservationAntennaElementPosition_IngestAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationAntennaElementPosition_IngestAddData(builder, data)

def IonoObservationAntennaElementPosition_IngestStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationAntennaElementPosition_IngestStartDataVector(builder, numElems)

def IonoObservationAntennaElementPosition_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationAntennaElementPosition_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationAntennaElementPosition_IngestT(object):

    # IonoObservationAntennaElementPosition_IngestT
    def __init__(self):
        self.dimensions = None  # type: List[str]
        self.dimensionName = None  # type: List[str]
        self.data = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationAntennaElementPositionIngest = IonoObservationAntennaElementPosition_Ingest()
        ionoObservationAntennaElementPositionIngest.Init(buf, pos)
        return cls.InitFromObj(ionoObservationAntennaElementPositionIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationAntennaElementPositionIngest):
        x = IonoObservationAntennaElementPosition_IngestT()
        x._UnPack(ionoObservationAntennaElementPositionIngest)
        return x

    # IonoObservationAntennaElementPosition_IngestT
    def _UnPack(self, ionoObservationAntennaElementPositionIngest):
        if ionoObservationAntennaElementPositionIngest is None:
            return
        if not ionoObservationAntennaElementPositionIngest.DimensionsIsNone():
            self.dimensions = []
            for i in range(ionoObservationAntennaElementPositionIngest.DimensionsLength()):
                self.dimensions.append(ionoObservationAntennaElementPositionIngest.Dimensions(i))
        if not ionoObservationAntennaElementPositionIngest.DimensionNameIsNone():
            self.dimensionName = []
            for i in range(ionoObservationAntennaElementPositionIngest.DimensionNameLength()):
                self.dimensionName.append(ionoObservationAntennaElementPositionIngest.DimensionName(i))
        if not ionoObservationAntennaElementPositionIngest.DataIsNone():
            self.data = []
            for i in range(ionoObservationAntennaElementPositionIngest.DataLength()):
                self.data.append(ionoObservationAntennaElementPositionIngest.Data(i))

    # IonoObservationAntennaElementPosition_IngestT
    def Pack(self, builder):
        if self.dimensions is not None:
            dimensionslist = []
            for i in range(len(self.dimensions)):
                dimensionslist.append(builder.CreateString(self.dimensions[i]))
            IonoObservationAntennaElementPosition_IngestStartDimensionsVector(builder, len(self.dimensions))
            for i in reversed(range(len(self.dimensions))):
                builder.PrependUOffsetTRelative(dimensionslist[i])
            dimensions = builder.EndVector()
        if self.dimensionName is not None:
            dimensionNamelist = []
            for i in range(len(self.dimensionName)):
                dimensionNamelist.append(builder.CreateString(self.dimensionName[i]))
            IonoObservationAntennaElementPosition_IngestStartDimensionNameVector(builder, len(self.dimensionName))
            for i in reversed(range(len(self.dimensionName))):
                builder.PrependUOffsetTRelative(dimensionNamelist[i])
            dimensionName = builder.EndVector()
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationAntennaElementPosition_IngestStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        IonoObservationAntennaElementPosition_IngestStart(builder)
        if self.dimensions is not None:
            IonoObservationAntennaElementPosition_IngestAddDimensions(builder, dimensions)
        if self.dimensionName is not None:
            IonoObservationAntennaElementPosition_IngestAddDimensionName(builder, dimensionName)
        if self.data is not None:
            IonoObservationAntennaElementPosition_IngestAddData(builder, data)
        ionoObservationAntennaElementPositionIngest = IonoObservationAntennaElementPosition_IngestEnd(builder)
        return ionoObservationAntennaElementPositionIngest
