# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Identity and medical information on the patient to be evacuated.
class EvacCasualtyInfo_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacCasualtyInfo_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacCasualtyInfo_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacCasualtyInfo_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacCasualtyInfo_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
    # Example: /// Example: ROUTINE
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
    # Example: /// Example: GROUND
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacCasualtyInfo_Abridged
    def EvacType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
    # Example: /// Example: DENTAL
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def CasualtyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
    # Example: /// Example: FACE
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
    # Example: /// Example: NONE
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def ContamType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
    # Example: /// Example: ['OXYGEN', 'HOIST']
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def SpecMedEquip(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def SpecMedEquipLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def SpecMedEquipIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Optional casualty key.
    # Example: /// Example: casualty-007
    # Constraints: Minimum length = 0, Maximum length = 36
    # EvacCasualtyInfo_Abridged
    def CasualtyKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
    # Example: /// Example: US CIVILIAN
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def PatientStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
    # Example: /// Example: FRIEND CIVILIAN
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def PatientIdentity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code indicating the citizenship of the patient.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # EvacCasualtyInfo_Abridged
    def Nationality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
    # Example: /// Example: CIVILIAN
    # Constraints: Minimum length = 0, Maximum length = 16
    # EvacCasualtyInfo_Abridged
    def PayGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient common or legal name.
    # Example: /// Example: John Smith
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacCasualtyInfo_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient age, in years.
    # Example: /// Example: 35
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Age(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The patient sex (MALE, FEMALE).
    # Example: /// Example: MALE
    # Constraints: Minimum length = 0, Maximum length = 8
    # EvacCasualtyInfo_Abridged
    def Gender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Last 4 characters of the patient social security code, or equivalent.
    # Example: /// Example: 1234
    # Constraints: Minimum length = 0, Maximum length = 4
    # EvacCasualtyInfo_Abridged
    def Last4Ssn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
    # Example: /// Example: O NEG
    # Constraints: Minimum length = 0, Maximum length = 6
    # EvacCasualtyInfo_Abridged
    def BloodType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
    # Example: /// Example: CIV
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def Service(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign of this patient.
    # Example: /// Example: SHARK
    # Constraints: Minimum length = 0, Maximum length = 128
    # EvacCasualtyInfo_Abridged
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The career field of this patient.
    # Example: /// Example: Healthcare
    # Constraints: Minimum length = 0, Maximum length = 128
    # EvacCasualtyInfo_Abridged
    def OccSpeciality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    # Example: /// Example: [-33.123, 150.33, 0.24]
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def BurialLocation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def BurialLocationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def BurialLocationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    # Example: /// Example: [12.44, 122.55, 0.98]
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def CollectionPoint(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def CollectionPointLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def CollectionPointIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Unique identifier for the patient care provider.
    # Example: /// Example: CARE_PROVIDER-1
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacCasualtyInfo_Abridged
    def CareProviderUrn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
    # Example: /// Example: EVACUATE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacCasualtyInfo_Abridged
    def DispositionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
    # Example: /// Example: EVACUATE WOUNDED
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCasualtyInfo_Abridged
    def Disposition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
    # Example: /// Example: DEVICE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacCasualtyInfo_Abridged
    def ReportGen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def ReportTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the  patient's casualty information.
    # Example: /// Example: Comments relating to this casualty info.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacCasualtyInfo_Abridged
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Medical condition causation information.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Etiology(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def EtiologyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def EtiologyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # Treatment information.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Treatment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def TreatmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def TreatmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Information obtained for vital signs.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def VitalSignData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def VitalSignDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def VitalSignDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # Health state information.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def HealthState(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def HealthStateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def HealthStateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Health condition information.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Condition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def ConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def ConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # Medication specifics.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Medication(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def MedicationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def MedicationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # Injury specifics.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Injury(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def InjuryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def InjuryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Allergy information.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EvacCasualtyInfo_Abridged
    def Allergy(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EvacCasualtyInfo_Abridged
    def AllergyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EvacCasualtyInfo_Abridged
    def AllergyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

def EvacCasualtyInfo_AbridgedStart(builder):
    builder.StartObject(35)

def Start(builder):
    EvacCasualtyInfo_AbridgedStart(builder)

def EvacCasualtyInfo_AbridgedAddPriority(builder, priority):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)

def AddPriority(builder, priority):
    EvacCasualtyInfo_AbridgedAddPriority(builder, priority)

def EvacCasualtyInfo_AbridgedAddEvacType(builder, evacType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(evacType), 0)

def AddEvacType(builder, evacType):
    EvacCasualtyInfo_AbridgedAddEvacType(builder, evacType)

def EvacCasualtyInfo_AbridgedAddCasualtyType(builder, casualtyType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(casualtyType), 0)

def AddCasualtyType(builder, casualtyType):
    EvacCasualtyInfo_AbridgedAddCasualtyType(builder, casualtyType)

def EvacCasualtyInfo_AbridgedAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacCasualtyInfo_AbridgedAddBodyPart(builder, bodyPart)

def EvacCasualtyInfo_AbridgedAddContamType(builder, contamType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(contamType), 0)

def AddContamType(builder, contamType):
    EvacCasualtyInfo_AbridgedAddContamType(builder, contamType)

def EvacCasualtyInfo_AbridgedAddSpecMedEquip(builder, specMedEquip):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(specMedEquip), 0)

def AddSpecMedEquip(builder, specMedEquip):
    EvacCasualtyInfo_AbridgedAddSpecMedEquip(builder, specMedEquip)

def EvacCasualtyInfo_AbridgedStartSpecMedEquipVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpecMedEquipVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartSpecMedEquipVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddCasualtyKey(builder, casualtyKey):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(casualtyKey), 0)

def AddCasualtyKey(builder, casualtyKey):
    EvacCasualtyInfo_AbridgedAddCasualtyKey(builder, casualtyKey)

def EvacCasualtyInfo_AbridgedAddPatientStatus(builder, patientStatus):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(patientStatus), 0)

def AddPatientStatus(builder, patientStatus):
    EvacCasualtyInfo_AbridgedAddPatientStatus(builder, patientStatus)

def EvacCasualtyInfo_AbridgedAddPatientIdentity(builder, patientIdentity):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(patientIdentity), 0)

def AddPatientIdentity(builder, patientIdentity):
    EvacCasualtyInfo_AbridgedAddPatientIdentity(builder, patientIdentity)

def EvacCasualtyInfo_AbridgedAddNationality(builder, nationality):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(nationality), 0)

def AddNationality(builder, nationality):
    EvacCasualtyInfo_AbridgedAddNationality(builder, nationality)

def EvacCasualtyInfo_AbridgedAddPayGrade(builder, payGrade):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(payGrade), 0)

def AddPayGrade(builder, payGrade):
    EvacCasualtyInfo_AbridgedAddPayGrade(builder, payGrade)

def EvacCasualtyInfo_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    EvacCasualtyInfo_AbridgedAddName(builder, name)

def EvacCasualtyInfo_AbridgedAddAge(builder, age):
    builder.PrependInt32Slot(12, age, 0)

def AddAge(builder, age):
    EvacCasualtyInfo_AbridgedAddAge(builder, age)

def EvacCasualtyInfo_AbridgedAddGender(builder, gender):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(gender), 0)

def AddGender(builder, gender):
    EvacCasualtyInfo_AbridgedAddGender(builder, gender)

def EvacCasualtyInfo_AbridgedAddLast4Ssn(builder, last4Ssn):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(last4Ssn), 0)

def AddLast4Ssn(builder, last4Ssn):
    EvacCasualtyInfo_AbridgedAddLast4Ssn(builder, last4Ssn)

def EvacCasualtyInfo_AbridgedAddBloodType(builder, bloodType):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(bloodType), 0)

def AddBloodType(builder, bloodType):
    EvacCasualtyInfo_AbridgedAddBloodType(builder, bloodType)

def EvacCasualtyInfo_AbridgedAddService(builder, service):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(service), 0)

def AddService(builder, service):
    EvacCasualtyInfo_AbridgedAddService(builder, service)

def EvacCasualtyInfo_AbridgedAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    EvacCasualtyInfo_AbridgedAddCallSign(builder, callSign)

def EvacCasualtyInfo_AbridgedAddOccSpeciality(builder, occSpeciality):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(occSpeciality), 0)

def AddOccSpeciality(builder, occSpeciality):
    EvacCasualtyInfo_AbridgedAddOccSpeciality(builder, occSpeciality)

def EvacCasualtyInfo_AbridgedAddBurialLocation(builder, burialLocation):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(burialLocation), 0)

def AddBurialLocation(builder, burialLocation):
    EvacCasualtyInfo_AbridgedAddBurialLocation(builder, burialLocation)

def EvacCasualtyInfo_AbridgedStartBurialLocationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBurialLocationVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartBurialLocationVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddCollectionPoint(builder, collectionPoint):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(collectionPoint), 0)

def AddCollectionPoint(builder, collectionPoint):
    EvacCasualtyInfo_AbridgedAddCollectionPoint(builder, collectionPoint)

def EvacCasualtyInfo_AbridgedStartCollectionPointVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCollectionPointVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartCollectionPointVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddCareProviderUrn(builder, careProviderUrn):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(careProviderUrn), 0)

def AddCareProviderUrn(builder, careProviderUrn):
    EvacCasualtyInfo_AbridgedAddCareProviderUrn(builder, careProviderUrn)

def EvacCasualtyInfo_AbridgedAddDispositionType(builder, dispositionType):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(dispositionType), 0)

def AddDispositionType(builder, dispositionType):
    EvacCasualtyInfo_AbridgedAddDispositionType(builder, dispositionType)

def EvacCasualtyInfo_AbridgedAddDisposition(builder, disposition):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(disposition), 0)

def AddDisposition(builder, disposition):
    EvacCasualtyInfo_AbridgedAddDisposition(builder, disposition)

def EvacCasualtyInfo_AbridgedAddReportGen(builder, reportGen):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(reportGen), 0)

def AddReportGen(builder, reportGen):
    EvacCasualtyInfo_AbridgedAddReportGen(builder, reportGen)

def EvacCasualtyInfo_AbridgedAddReportTime(builder, reportTime):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(reportTime), 0)

def AddReportTime(builder, reportTime):
    EvacCasualtyInfo_AbridgedAddReportTime(builder, reportTime)

def EvacCasualtyInfo_AbridgedAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacCasualtyInfo_AbridgedAddComments(builder, comments)

def EvacCasualtyInfo_AbridgedAddEtiology(builder, etiology):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(etiology), 0)

def AddEtiology(builder, etiology):
    EvacCasualtyInfo_AbridgedAddEtiology(builder, etiology)

def EvacCasualtyInfo_AbridgedStartEtiologyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEtiologyVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartEtiologyVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddTreatment(builder, treatment):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(treatment), 0)

def AddTreatment(builder, treatment):
    EvacCasualtyInfo_AbridgedAddTreatment(builder, treatment)

def EvacCasualtyInfo_AbridgedStartTreatmentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTreatmentVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartTreatmentVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddVitalSignData(builder, vitalSignData):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(vitalSignData), 0)

def AddVitalSignData(builder, vitalSignData):
    EvacCasualtyInfo_AbridgedAddVitalSignData(builder, vitalSignData)

def EvacCasualtyInfo_AbridgedStartVitalSignDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVitalSignDataVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartVitalSignDataVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddHealthState(builder, healthState):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(healthState), 0)

def AddHealthState(builder, healthState):
    EvacCasualtyInfo_AbridgedAddHealthState(builder, healthState)

def EvacCasualtyInfo_AbridgedStartHealthStateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHealthStateVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartHealthStateVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddCondition(builder, condition):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(condition), 0)

def AddCondition(builder, condition):
    EvacCasualtyInfo_AbridgedAddCondition(builder, condition)

def EvacCasualtyInfo_AbridgedStartConditionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConditionVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartConditionVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddMedication(builder, medication):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(medication), 0)

def AddMedication(builder, medication):
    EvacCasualtyInfo_AbridgedAddMedication(builder, medication)

def EvacCasualtyInfo_AbridgedStartMedicationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMedicationVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartMedicationVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddInjury(builder, injury):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(injury), 0)

def AddInjury(builder, injury):
    EvacCasualtyInfo_AbridgedAddInjury(builder, injury)

def EvacCasualtyInfo_AbridgedStartInjuryVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInjuryVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartInjuryVector(builder, numElems)

def EvacCasualtyInfo_AbridgedAddAllergy(builder, allergy):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(allergy), 0)

def AddAllergy(builder, allergy):
    EvacCasualtyInfo_AbridgedAddAllergy(builder, allergy)

def EvacCasualtyInfo_AbridgedStartAllergyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAllergyVector(builder, numElems):
    return EvacCasualtyInfo_AbridgedStartAllergyVector(builder, numElems)

def EvacCasualtyInfo_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacCasualtyInfo_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class EvacCasualtyInfo_AbridgedT(object):

    # EvacCasualtyInfo_AbridgedT
    def __init__(self):
        self.priority = None  # type: str
        self.evacType = None  # type: str
        self.casualtyType = None  # type: str
        self.bodyPart = None  # type: str
        self.contamType = None  # type: str
        self.specMedEquip = None  # type: List[str]
        self.casualtyKey = None  # type: str
        self.patientStatus = None  # type: str
        self.patientIdentity = None  # type: str
        self.nationality = None  # type: str
        self.payGrade = None  # type: str
        self.name = None  # type: str
        self.age = 0  # type: int
        self.gender = None  # type: str
        self.last4Ssn = None  # type: str
        self.bloodType = None  # type: str
        self.service = None  # type: str
        self.callSign = None  # type: str
        self.occSpeciality = None  # type: str
        self.burialLocation = None  # type: List[str]
        self.collectionPoint = None  # type: List[str]
        self.careProviderUrn = None  # type: str
        self.dispositionType = None  # type: str
        self.disposition = None  # type: str
        self.reportGen = None  # type: str
        self.reportTime = None  # type: str
        self.comments = None  # type: str
        self.etiology = None  # type: List[str]
        self.treatment = None  # type: List[str]
        self.vitalSignData = None  # type: List[str]
        self.healthState = None  # type: List[str]
        self.condition = None  # type: List[str]
        self.medication = None  # type: List[str]
        self.injury = None  # type: List[str]
        self.allergy = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacCasualtyInfoAbridged = EvacCasualtyInfo_Abridged()
        evacCasualtyInfoAbridged.Init(buf, pos)
        return cls.InitFromObj(evacCasualtyInfoAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacCasualtyInfoAbridged):
        x = EvacCasualtyInfo_AbridgedT()
        x._UnPack(evacCasualtyInfoAbridged)
        return x

    # EvacCasualtyInfo_AbridgedT
    def _UnPack(self, evacCasualtyInfoAbridged):
        if evacCasualtyInfoAbridged is None:
            return
        self.priority = evacCasualtyInfoAbridged.Priority()
        self.evacType = evacCasualtyInfoAbridged.EvacType()
        self.casualtyType = evacCasualtyInfoAbridged.CasualtyType()
        self.bodyPart = evacCasualtyInfoAbridged.BodyPart()
        self.contamType = evacCasualtyInfoAbridged.ContamType()
        if not evacCasualtyInfoAbridged.SpecMedEquipIsNone():
            self.specMedEquip = []
            for i in range(evacCasualtyInfoAbridged.SpecMedEquipLength()):
                self.specMedEquip.append(evacCasualtyInfoAbridged.SpecMedEquip(i))
        self.casualtyKey = evacCasualtyInfoAbridged.CasualtyKey()
        self.patientStatus = evacCasualtyInfoAbridged.PatientStatus()
        self.patientIdentity = evacCasualtyInfoAbridged.PatientIdentity()
        self.nationality = evacCasualtyInfoAbridged.Nationality()
        self.payGrade = evacCasualtyInfoAbridged.PayGrade()
        self.name = evacCasualtyInfoAbridged.Name()
        self.age = evacCasualtyInfoAbridged.Age()
        self.gender = evacCasualtyInfoAbridged.Gender()
        self.last4Ssn = evacCasualtyInfoAbridged.Last4Ssn()
        self.bloodType = evacCasualtyInfoAbridged.BloodType()
        self.service = evacCasualtyInfoAbridged.Service()
        self.callSign = evacCasualtyInfoAbridged.CallSign()
        self.occSpeciality = evacCasualtyInfoAbridged.OccSpeciality()
        if not evacCasualtyInfoAbridged.BurialLocationIsNone():
            self.burialLocation = []
            for i in range(evacCasualtyInfoAbridged.BurialLocationLength()):
                self.burialLocation.append(evacCasualtyInfoAbridged.BurialLocation(i))
        if not evacCasualtyInfoAbridged.CollectionPointIsNone():
            self.collectionPoint = []
            for i in range(evacCasualtyInfoAbridged.CollectionPointLength()):
                self.collectionPoint.append(evacCasualtyInfoAbridged.CollectionPoint(i))
        self.careProviderUrn = evacCasualtyInfoAbridged.CareProviderUrn()
        self.dispositionType = evacCasualtyInfoAbridged.DispositionType()
        self.disposition = evacCasualtyInfoAbridged.Disposition()
        self.reportGen = evacCasualtyInfoAbridged.ReportGen()
        self.reportTime = evacCasualtyInfoAbridged.ReportTime()
        self.comments = evacCasualtyInfoAbridged.Comments()
        if not evacCasualtyInfoAbridged.EtiologyIsNone():
            self.etiology = []
            for i in range(evacCasualtyInfoAbridged.EtiologyLength()):
                self.etiology.append(evacCasualtyInfoAbridged.Etiology(i))
        if not evacCasualtyInfoAbridged.TreatmentIsNone():
            self.treatment = []
            for i in range(evacCasualtyInfoAbridged.TreatmentLength()):
                self.treatment.append(evacCasualtyInfoAbridged.Treatment(i))
        if not evacCasualtyInfoAbridged.VitalSignDataIsNone():
            self.vitalSignData = []
            for i in range(evacCasualtyInfoAbridged.VitalSignDataLength()):
                self.vitalSignData.append(evacCasualtyInfoAbridged.VitalSignData(i))
        if not evacCasualtyInfoAbridged.HealthStateIsNone():
            self.healthState = []
            for i in range(evacCasualtyInfoAbridged.HealthStateLength()):
                self.healthState.append(evacCasualtyInfoAbridged.HealthState(i))
        if not evacCasualtyInfoAbridged.ConditionIsNone():
            self.condition = []
            for i in range(evacCasualtyInfoAbridged.ConditionLength()):
                self.condition.append(evacCasualtyInfoAbridged.Condition(i))
        if not evacCasualtyInfoAbridged.MedicationIsNone():
            self.medication = []
            for i in range(evacCasualtyInfoAbridged.MedicationLength()):
                self.medication.append(evacCasualtyInfoAbridged.Medication(i))
        if not evacCasualtyInfoAbridged.InjuryIsNone():
            self.injury = []
            for i in range(evacCasualtyInfoAbridged.InjuryLength()):
                self.injury.append(evacCasualtyInfoAbridged.Injury(i))
        if not evacCasualtyInfoAbridged.AllergyIsNone():
            self.allergy = []
            for i in range(evacCasualtyInfoAbridged.AllergyLength()):
                self.allergy.append(evacCasualtyInfoAbridged.Allergy(i))

    # EvacCasualtyInfo_AbridgedT
    def Pack(self, builder):
        if self.priority is not None:
            priority = builder.CreateString(self.priority)
        if self.evacType is not None:
            evacType = builder.CreateString(self.evacType)
        if self.casualtyType is not None:
            casualtyType = builder.CreateString(self.casualtyType)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.contamType is not None:
            contamType = builder.CreateString(self.contamType)
        if self.specMedEquip is not None:
            specMedEquiplist = []
            for i in range(len(self.specMedEquip)):
                specMedEquiplist.append(builder.CreateString(self.specMedEquip[i]))
            EvacCasualtyInfo_AbridgedStartSpecMedEquipVector(builder, len(self.specMedEquip))
            for i in reversed(range(len(self.specMedEquip))):
                builder.PrependUOffsetTRelative(specMedEquiplist[i])
            specMedEquip = builder.EndVector()
        if self.casualtyKey is not None:
            casualtyKey = builder.CreateString(self.casualtyKey)
        if self.patientStatus is not None:
            patientStatus = builder.CreateString(self.patientStatus)
        if self.patientIdentity is not None:
            patientIdentity = builder.CreateString(self.patientIdentity)
        if self.nationality is not None:
            nationality = builder.CreateString(self.nationality)
        if self.payGrade is not None:
            payGrade = builder.CreateString(self.payGrade)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.gender is not None:
            gender = builder.CreateString(self.gender)
        if self.last4Ssn is not None:
            last4Ssn = builder.CreateString(self.last4Ssn)
        if self.bloodType is not None:
            bloodType = builder.CreateString(self.bloodType)
        if self.service is not None:
            service = builder.CreateString(self.service)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.occSpeciality is not None:
            occSpeciality = builder.CreateString(self.occSpeciality)
        if self.burialLocation is not None:
            burialLocationlist = []
            for i in range(len(self.burialLocation)):
                burialLocationlist.append(builder.CreateString(self.burialLocation[i]))
            EvacCasualtyInfo_AbridgedStartBurialLocationVector(builder, len(self.burialLocation))
            for i in reversed(range(len(self.burialLocation))):
                builder.PrependUOffsetTRelative(burialLocationlist[i])
            burialLocation = builder.EndVector()
        if self.collectionPoint is not None:
            collectionPointlist = []
            for i in range(len(self.collectionPoint)):
                collectionPointlist.append(builder.CreateString(self.collectionPoint[i]))
            EvacCasualtyInfo_AbridgedStartCollectionPointVector(builder, len(self.collectionPoint))
            for i in reversed(range(len(self.collectionPoint))):
                builder.PrependUOffsetTRelative(collectionPointlist[i])
            collectionPoint = builder.EndVector()
        if self.careProviderUrn is not None:
            careProviderUrn = builder.CreateString(self.careProviderUrn)
        if self.dispositionType is not None:
            dispositionType = builder.CreateString(self.dispositionType)
        if self.disposition is not None:
            disposition = builder.CreateString(self.disposition)
        if self.reportGen is not None:
            reportGen = builder.CreateString(self.reportGen)
        if self.reportTime is not None:
            reportTime = builder.CreateString(self.reportTime)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        if self.etiology is not None:
            etiologylist = []
            for i in range(len(self.etiology)):
                etiologylist.append(builder.CreateString(self.etiology[i]))
            EvacCasualtyInfo_AbridgedStartEtiologyVector(builder, len(self.etiology))
            for i in reversed(range(len(self.etiology))):
                builder.PrependUOffsetTRelative(etiologylist[i])
            etiology = builder.EndVector()
        if self.treatment is not None:
            treatmentlist = []
            for i in range(len(self.treatment)):
                treatmentlist.append(builder.CreateString(self.treatment[i]))
            EvacCasualtyInfo_AbridgedStartTreatmentVector(builder, len(self.treatment))
            for i in reversed(range(len(self.treatment))):
                builder.PrependUOffsetTRelative(treatmentlist[i])
            treatment = builder.EndVector()
        if self.vitalSignData is not None:
            vitalSignDatalist = []
            for i in range(len(self.vitalSignData)):
                vitalSignDatalist.append(builder.CreateString(self.vitalSignData[i]))
            EvacCasualtyInfo_AbridgedStartVitalSignDataVector(builder, len(self.vitalSignData))
            for i in reversed(range(len(self.vitalSignData))):
                builder.PrependUOffsetTRelative(vitalSignDatalist[i])
            vitalSignData = builder.EndVector()
        if self.healthState is not None:
            healthStatelist = []
            for i in range(len(self.healthState)):
                healthStatelist.append(builder.CreateString(self.healthState[i]))
            EvacCasualtyInfo_AbridgedStartHealthStateVector(builder, len(self.healthState))
            for i in reversed(range(len(self.healthState))):
                builder.PrependUOffsetTRelative(healthStatelist[i])
            healthState = builder.EndVector()
        if self.condition is not None:
            conditionlist = []
            for i in range(len(self.condition)):
                conditionlist.append(builder.CreateString(self.condition[i]))
            EvacCasualtyInfo_AbridgedStartConditionVector(builder, len(self.condition))
            for i in reversed(range(len(self.condition))):
                builder.PrependUOffsetTRelative(conditionlist[i])
            condition = builder.EndVector()
        if self.medication is not None:
            medicationlist = []
            for i in range(len(self.medication)):
                medicationlist.append(builder.CreateString(self.medication[i]))
            EvacCasualtyInfo_AbridgedStartMedicationVector(builder, len(self.medication))
            for i in reversed(range(len(self.medication))):
                builder.PrependUOffsetTRelative(medicationlist[i])
            medication = builder.EndVector()
        if self.injury is not None:
            injurylist = []
            for i in range(len(self.injury)):
                injurylist.append(builder.CreateString(self.injury[i]))
            EvacCasualtyInfo_AbridgedStartInjuryVector(builder, len(self.injury))
            for i in reversed(range(len(self.injury))):
                builder.PrependUOffsetTRelative(injurylist[i])
            injury = builder.EndVector()
        if self.allergy is not None:
            allergylist = []
            for i in range(len(self.allergy)):
                allergylist.append(builder.CreateString(self.allergy[i]))
            EvacCasualtyInfo_AbridgedStartAllergyVector(builder, len(self.allergy))
            for i in reversed(range(len(self.allergy))):
                builder.PrependUOffsetTRelative(allergylist[i])
            allergy = builder.EndVector()
        EvacCasualtyInfo_AbridgedStart(builder)
        if self.priority is not None:
            EvacCasualtyInfo_AbridgedAddPriority(builder, priority)
        if self.evacType is not None:
            EvacCasualtyInfo_AbridgedAddEvacType(builder, evacType)
        if self.casualtyType is not None:
            EvacCasualtyInfo_AbridgedAddCasualtyType(builder, casualtyType)
        if self.bodyPart is not None:
            EvacCasualtyInfo_AbridgedAddBodyPart(builder, bodyPart)
        if self.contamType is not None:
            EvacCasualtyInfo_AbridgedAddContamType(builder, contamType)
        if self.specMedEquip is not None:
            EvacCasualtyInfo_AbridgedAddSpecMedEquip(builder, specMedEquip)
        if self.casualtyKey is not None:
            EvacCasualtyInfo_AbridgedAddCasualtyKey(builder, casualtyKey)
        if self.patientStatus is not None:
            EvacCasualtyInfo_AbridgedAddPatientStatus(builder, patientStatus)
        if self.patientIdentity is not None:
            EvacCasualtyInfo_AbridgedAddPatientIdentity(builder, patientIdentity)
        if self.nationality is not None:
            EvacCasualtyInfo_AbridgedAddNationality(builder, nationality)
        if self.payGrade is not None:
            EvacCasualtyInfo_AbridgedAddPayGrade(builder, payGrade)
        if self.name is not None:
            EvacCasualtyInfo_AbridgedAddName(builder, name)
        EvacCasualtyInfo_AbridgedAddAge(builder, self.age)
        if self.gender is not None:
            EvacCasualtyInfo_AbridgedAddGender(builder, gender)
        if self.last4Ssn is not None:
            EvacCasualtyInfo_AbridgedAddLast4Ssn(builder, last4Ssn)
        if self.bloodType is not None:
            EvacCasualtyInfo_AbridgedAddBloodType(builder, bloodType)
        if self.service is not None:
            EvacCasualtyInfo_AbridgedAddService(builder, service)
        if self.callSign is not None:
            EvacCasualtyInfo_AbridgedAddCallSign(builder, callSign)
        if self.occSpeciality is not None:
            EvacCasualtyInfo_AbridgedAddOccSpeciality(builder, occSpeciality)
        if self.burialLocation is not None:
            EvacCasualtyInfo_AbridgedAddBurialLocation(builder, burialLocation)
        if self.collectionPoint is not None:
            EvacCasualtyInfo_AbridgedAddCollectionPoint(builder, collectionPoint)
        if self.careProviderUrn is not None:
            EvacCasualtyInfo_AbridgedAddCareProviderUrn(builder, careProviderUrn)
        if self.dispositionType is not None:
            EvacCasualtyInfo_AbridgedAddDispositionType(builder, dispositionType)
        if self.disposition is not None:
            EvacCasualtyInfo_AbridgedAddDisposition(builder, disposition)
        if self.reportGen is not None:
            EvacCasualtyInfo_AbridgedAddReportGen(builder, reportGen)
        if self.reportTime is not None:
            EvacCasualtyInfo_AbridgedAddReportTime(builder, reportTime)
        if self.comments is not None:
            EvacCasualtyInfo_AbridgedAddComments(builder, comments)
        if self.etiology is not None:
            EvacCasualtyInfo_AbridgedAddEtiology(builder, etiology)
        if self.treatment is not None:
            EvacCasualtyInfo_AbridgedAddTreatment(builder, treatment)
        if self.vitalSignData is not None:
            EvacCasualtyInfo_AbridgedAddVitalSignData(builder, vitalSignData)
        if self.healthState is not None:
            EvacCasualtyInfo_AbridgedAddHealthState(builder, healthState)
        if self.condition is not None:
            EvacCasualtyInfo_AbridgedAddCondition(builder, condition)
        if self.medication is not None:
            EvacCasualtyInfo_AbridgedAddMedication(builder, medication)
        if self.injury is not None:
            EvacCasualtyInfo_AbridgedAddInjury(builder, injury)
        if self.allergy is not None:
            EvacCasualtyInfo_AbridgedAddAllergy(builder, allergy)
        evacCasualtyInfoAbridged = EvacCasualtyInfo_AbridgedEnd(builder)
        return evacCasualtyInfoAbridged
