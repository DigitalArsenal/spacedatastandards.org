# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
class Vessel_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Vessel_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVessel_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Vessel_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x56\x45\x53\x53", size_prefixed=size_prefixed)

    # Vessel_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # Vessel_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Vessel_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent entity. idEntity is required for Put.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Vessel_Abridged
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The original source Id for this vessel.
    # Example: /// Example: 590b5194fc32e75dd00682ba
    # Constraints: Minimum length = 0, Maximum length = 36
    # Vessel_Abridged
    def AltVesselId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the organization that owns the vessel.
    # Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
    # Constraints: Minimum length = 0, Maximum length = 36
    # Vessel_Abridged
    def IdOrganization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
    # Example: /// Example: DORNUM
    # Constraints: Minimum length = 0, Maximum length = 24
    # Vessel_Abridged
    def VesselName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
    # Example: /// Example: Passenger
    # Constraints: Minimum length = 0, Maximum length = 48
    # Vessel_Abridged
    def VesselType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The common name for a group of ships with similar design, usually named for the first vessel of the class.
    # Example: /// Example: Nimitz
    # Constraints: Minimum length = 0, Maximum length = 64
    # Vessel_Abridged
    def VesselClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Further description or explanation of the vessel or type.
    # Example: /// Example: Search and Rescue Vessel
    # Constraints: Minimum length = 0, Maximum length = 100
    # Vessel_Abridged
    def VesselDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
    # Example: /// Example: B45524
    # Constraints: Minimum length = 0, Maximum length = 36
    # Vessel_Abridged
    def Sconum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
    # Example: /// Example: 9566356
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def Imon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    # Example: /// Example: 416450000
    # Constraints: Minimum length = 0, Maximum length = 9
    # Vessel_Abridged
    def Mmsi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
    # Example: /// Example: V2OZ
    # Constraints: Minimum length = 0, Maximum length = 24
    # Vessel_Abridged
    def Callsign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flag of the subject vessel.
    # Example: /// Example: United States
    # Constraints: Minimum length = 0, Maximum length = 36
    # Vessel_Abridged
    def VesselFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Year the vessel went into service.
    # Example: /// Example: 2014
    # Constraints: Minimum length = 0, Maximum length = 4
    # Vessel_Abridged
    def YearBuilt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The shipbuilder who built this vessel.
    # Example: /// Example: Samsung Heavy Inds - Geoje
    # Constraints: Minimum length = 0, Maximum length = 64
    # Vessel_Abridged
    def VesselBuilder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of this vessel.
    # Example: /// Example: In Service/Commission
    # Constraints: Minimum length = 0, Maximum length = 64
    # Vessel_Abridged
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date this vessel was first seen.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def FirstSeen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
    # Example: /// Example: 511.1
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
    # Example: /// Example: 24.1
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum static draught, in meters, of the vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel.
    # Example: /// Example: 21.1
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def MaxDraught(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The weight in tons, of this vessel.
    # Example: /// Example: 3423.76
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def VslWt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum possible speed of this vessel in meters per second.
    # Example: /// Example: 32.5
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def MaxSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stern type code (Counter, Cruiser) associated with this vessel.
    # Example: /// Example: Cruiser
    # Constraints: Minimum length = 0, Maximum length = 16
    # Vessel_Abridged
    def SternType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of blades per shaft for this vessel.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def NumBlades(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of shafts on this vessel.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def NumShafts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The type of propulsion employed by this vessel.
    # Example: /// Example: Diesel
    # Constraints: Minimum length = 0, Maximum length = 6
    # Vessel_Abridged
    def PropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
    # Example: /// Example: A30081
    # Constraints: Minimum length = 0, Maximum length = 7
    # Vessel_Abridged
    def HullNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Vessel_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Vessel_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Vessel_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Vessel_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 64
    # Vessel_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Vessel_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Vessel_AbridgedStart(builder):
    builder.StartObject(34)

def Start(builder):
    Vessel_AbridgedStart(builder)

def Vessel_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Vessel_AbridgedAddId(builder, id)

def Vessel_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Vessel_AbridgedAddClassificationMarking(builder, classificationMarking)

def Vessel_AbridgedAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Vessel_AbridgedAddIdEntity(builder, idEntity)

def Vessel_AbridgedAddAltVesselId(builder, altVesselId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altVesselId), 0)

def AddAltVesselId(builder, altVesselId):
    Vessel_AbridgedAddAltVesselId(builder, altVesselId)

def Vessel_AbridgedAddIdOrganization(builder, idOrganization):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idOrganization), 0)

def AddIdOrganization(builder, idOrganization):
    Vessel_AbridgedAddIdOrganization(builder, idOrganization)

def Vessel_AbridgedAddVesselName(builder, vesselName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(vesselName), 0)

def AddVesselName(builder, vesselName):
    Vessel_AbridgedAddVesselName(builder, vesselName)

def Vessel_AbridgedAddVesselType(builder, vesselType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(vesselType), 0)

def AddVesselType(builder, vesselType):
    Vessel_AbridgedAddVesselType(builder, vesselType)

def Vessel_AbridgedAddVesselClass(builder, vesselClass):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(vesselClass), 0)

def AddVesselClass(builder, vesselClass):
    Vessel_AbridgedAddVesselClass(builder, vesselClass)

def Vessel_AbridgedAddVesselDescription(builder, vesselDescription):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(vesselDescription), 0)

def AddVesselDescription(builder, vesselDescription):
    Vessel_AbridgedAddVesselDescription(builder, vesselDescription)

def Vessel_AbridgedAddSconum(builder, sconum):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sconum), 0)

def AddSconum(builder, sconum):
    Vessel_AbridgedAddSconum(builder, sconum)

def Vessel_AbridgedAddImon(builder, imon):
    builder.PrependInt32Slot(10, imon, 0)

def AddImon(builder, imon):
    Vessel_AbridgedAddImon(builder, imon)

def Vessel_AbridgedAddMmsi(builder, mmsi):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(mmsi), 0)

def AddMmsi(builder, mmsi):
    Vessel_AbridgedAddMmsi(builder, mmsi)

def Vessel_AbridgedAddCallsign(builder, callsign):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(callsign), 0)

def AddCallsign(builder, callsign):
    Vessel_AbridgedAddCallsign(builder, callsign)

def Vessel_AbridgedAddVesselFlag(builder, vesselFlag):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(vesselFlag), 0)

def AddVesselFlag(builder, vesselFlag):
    Vessel_AbridgedAddVesselFlag(builder, vesselFlag)

def Vessel_AbridgedAddYearBuilt(builder, yearBuilt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(yearBuilt), 0)

def AddYearBuilt(builder, yearBuilt):
    Vessel_AbridgedAddYearBuilt(builder, yearBuilt)

def Vessel_AbridgedAddVesselBuilder(builder, vesselBuilder):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(vesselBuilder), 0)

def AddVesselBuilder(builder, vesselBuilder):
    Vessel_AbridgedAddVesselBuilder(builder, vesselBuilder)

def Vessel_AbridgedAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    Vessel_AbridgedAddStatus(builder, status)

def Vessel_AbridgedAddFirstSeen(builder, firstSeen):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(firstSeen), 0)

def AddFirstSeen(builder, firstSeen):
    Vessel_AbridgedAddFirstSeen(builder, firstSeen)

def Vessel_AbridgedAddLength(builder, length):
    builder.PrependFloat64Slot(18, length, 0.0)

def AddLength(builder, length):
    Vessel_AbridgedAddLength(builder, length)

def Vessel_AbridgedAddWidth(builder, width):
    builder.PrependFloat64Slot(19, width, 0.0)

def AddWidth(builder, width):
    Vessel_AbridgedAddWidth(builder, width)

def Vessel_AbridgedAddMaxDraught(builder, maxDraught):
    builder.PrependFloat64Slot(20, maxDraught, 0.0)

def AddMaxDraught(builder, maxDraught):
    Vessel_AbridgedAddMaxDraught(builder, maxDraught)

def Vessel_AbridgedAddVslWt(builder, vslWt):
    builder.PrependFloat64Slot(21, vslWt, 0.0)

def AddVslWt(builder, vslWt):
    Vessel_AbridgedAddVslWt(builder, vslWt)

def Vessel_AbridgedAddMaxSpeed(builder, maxSpeed):
    builder.PrependFloat64Slot(22, maxSpeed, 0.0)

def AddMaxSpeed(builder, maxSpeed):
    Vessel_AbridgedAddMaxSpeed(builder, maxSpeed)

def Vessel_AbridgedAddSternType(builder, sternType):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(sternType), 0)

def AddSternType(builder, sternType):
    Vessel_AbridgedAddSternType(builder, sternType)

def Vessel_AbridgedAddNumBlades(builder, numBlades):
    builder.PrependInt32Slot(24, numBlades, 0)

def AddNumBlades(builder, numBlades):
    Vessel_AbridgedAddNumBlades(builder, numBlades)

def Vessel_AbridgedAddNumShafts(builder, numShafts):
    builder.PrependInt32Slot(25, numShafts, 0)

def AddNumShafts(builder, numShafts):
    Vessel_AbridgedAddNumShafts(builder, numShafts)

def Vessel_AbridgedAddPropType(builder, propType):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(propType), 0)

def AddPropType(builder, propType):
    Vessel_AbridgedAddPropType(builder, propType)

def Vessel_AbridgedAddHullNum(builder, hullNum):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(hullNum), 0)

def AddHullNum(builder, hullNum):
    Vessel_AbridgedAddHullNum(builder, hullNum)

def Vessel_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Vessel_AbridgedAddCreatedAt(builder, createdAt)

def Vessel_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Vessel_AbridgedAddCreatedBy(builder, createdBy)

def Vessel_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Vessel_AbridgedAddSource(builder, source)

def Vessel_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Vessel_AbridgedAddOrigin(builder, origin)

def Vessel_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(32, dataMode, 0)

def AddDataMode(builder, dataMode):
    Vessel_AbridgedAddDataMode(builder, dataMode)

def Vessel_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Vessel_AbridgedAddOrigNetwork(builder, origNetwork)

def Vessel_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Vessel_AbridgedEnd(builder)


class Vessel_AbridgedT(object):

    # Vessel_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idEntity = None  # type: str
        self.altVesselId = None  # type: str
        self.idOrganization = None  # type: str
        self.vesselName = None  # type: str
        self.vesselType = None  # type: str
        self.vesselClass = None  # type: str
        self.vesselDescription = None  # type: str
        self.sconum = None  # type: str
        self.imon = 0  # type: int
        self.mmsi = None  # type: str
        self.callsign = None  # type: str
        self.vesselFlag = None  # type: str
        self.yearBuilt = None  # type: str
        self.vesselBuilder = None  # type: str
        self.status = None  # type: str
        self.firstSeen = None  # type: str
        self.length = 0.0  # type: float
        self.width = 0.0  # type: float
        self.maxDraught = 0.0  # type: float
        self.vslWt = 0.0  # type: float
        self.maxSpeed = 0.0  # type: float
        self.sternType = None  # type: str
        self.numBlades = 0  # type: int
        self.numShafts = 0  # type: int
        self.propType = None  # type: str
        self.hullNum = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vesselAbridged = Vessel_Abridged()
        vesselAbridged.Init(buf, pos)
        return cls.InitFromObj(vesselAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, vesselAbridged):
        x = Vessel_AbridgedT()
        x._UnPack(vesselAbridged)
        return x

    # Vessel_AbridgedT
    def _UnPack(self, vesselAbridged):
        if vesselAbridged is None:
            return
        self.id = vesselAbridged.Id()
        self.classificationMarking = vesselAbridged.ClassificationMarking()
        self.idEntity = vesselAbridged.IdEntity()
        self.altVesselId = vesselAbridged.AltVesselId()
        self.idOrganization = vesselAbridged.IdOrganization()
        self.vesselName = vesselAbridged.VesselName()
        self.vesselType = vesselAbridged.VesselType()
        self.vesselClass = vesselAbridged.VesselClass()
        self.vesselDescription = vesselAbridged.VesselDescription()
        self.sconum = vesselAbridged.Sconum()
        self.imon = vesselAbridged.Imon()
        self.mmsi = vesselAbridged.Mmsi()
        self.callsign = vesselAbridged.Callsign()
        self.vesselFlag = vesselAbridged.VesselFlag()
        self.yearBuilt = vesselAbridged.YearBuilt()
        self.vesselBuilder = vesselAbridged.VesselBuilder()
        self.status = vesselAbridged.Status()
        self.firstSeen = vesselAbridged.FirstSeen()
        self.length = vesselAbridged.Length()
        self.width = vesselAbridged.Width()
        self.maxDraught = vesselAbridged.MaxDraught()
        self.vslWt = vesselAbridged.VslWt()
        self.maxSpeed = vesselAbridged.MaxSpeed()
        self.sternType = vesselAbridged.SternType()
        self.numBlades = vesselAbridged.NumBlades()
        self.numShafts = vesselAbridged.NumShafts()
        self.propType = vesselAbridged.PropType()
        self.hullNum = vesselAbridged.HullNum()
        self.createdAt = vesselAbridged.CreatedAt()
        self.createdBy = vesselAbridged.CreatedBy()
        self.source = vesselAbridged.Source()
        self.origin = vesselAbridged.Origin()
        self.dataMode = vesselAbridged.DataMode()
        self.origNetwork = vesselAbridged.OrigNetwork()

    # Vessel_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.altVesselId is not None:
            altVesselId = builder.CreateString(self.altVesselId)
        if self.idOrganization is not None:
            idOrganization = builder.CreateString(self.idOrganization)
        if self.vesselName is not None:
            vesselName = builder.CreateString(self.vesselName)
        if self.vesselType is not None:
            vesselType = builder.CreateString(self.vesselType)
        if self.vesselClass is not None:
            vesselClass = builder.CreateString(self.vesselClass)
        if self.vesselDescription is not None:
            vesselDescription = builder.CreateString(self.vesselDescription)
        if self.sconum is not None:
            sconum = builder.CreateString(self.sconum)
        if self.mmsi is not None:
            mmsi = builder.CreateString(self.mmsi)
        if self.callsign is not None:
            callsign = builder.CreateString(self.callsign)
        if self.vesselFlag is not None:
            vesselFlag = builder.CreateString(self.vesselFlag)
        if self.yearBuilt is not None:
            yearBuilt = builder.CreateString(self.yearBuilt)
        if self.vesselBuilder is not None:
            vesselBuilder = builder.CreateString(self.vesselBuilder)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.firstSeen is not None:
            firstSeen = builder.CreateString(self.firstSeen)
        if self.sternType is not None:
            sternType = builder.CreateString(self.sternType)
        if self.propType is not None:
            propType = builder.CreateString(self.propType)
        if self.hullNum is not None:
            hullNum = builder.CreateString(self.hullNum)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Vessel_AbridgedStart(builder)
        if self.id is not None:
            Vessel_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Vessel_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idEntity is not None:
            Vessel_AbridgedAddIdEntity(builder, idEntity)
        if self.altVesselId is not None:
            Vessel_AbridgedAddAltVesselId(builder, altVesselId)
        if self.idOrganization is not None:
            Vessel_AbridgedAddIdOrganization(builder, idOrganization)
        if self.vesselName is not None:
            Vessel_AbridgedAddVesselName(builder, vesselName)
        if self.vesselType is not None:
            Vessel_AbridgedAddVesselType(builder, vesselType)
        if self.vesselClass is not None:
            Vessel_AbridgedAddVesselClass(builder, vesselClass)
        if self.vesselDescription is not None:
            Vessel_AbridgedAddVesselDescription(builder, vesselDescription)
        if self.sconum is not None:
            Vessel_AbridgedAddSconum(builder, sconum)
        Vessel_AbridgedAddImon(builder, self.imon)
        if self.mmsi is not None:
            Vessel_AbridgedAddMmsi(builder, mmsi)
        if self.callsign is not None:
            Vessel_AbridgedAddCallsign(builder, callsign)
        if self.vesselFlag is not None:
            Vessel_AbridgedAddVesselFlag(builder, vesselFlag)
        if self.yearBuilt is not None:
            Vessel_AbridgedAddYearBuilt(builder, yearBuilt)
        if self.vesselBuilder is not None:
            Vessel_AbridgedAddVesselBuilder(builder, vesselBuilder)
        if self.status is not None:
            Vessel_AbridgedAddStatus(builder, status)
        if self.firstSeen is not None:
            Vessel_AbridgedAddFirstSeen(builder, firstSeen)
        Vessel_AbridgedAddLength(builder, self.length)
        Vessel_AbridgedAddWidth(builder, self.width)
        Vessel_AbridgedAddMaxDraught(builder, self.maxDraught)
        Vessel_AbridgedAddVslWt(builder, self.vslWt)
        Vessel_AbridgedAddMaxSpeed(builder, self.maxSpeed)
        if self.sternType is not None:
            Vessel_AbridgedAddSternType(builder, sternType)
        Vessel_AbridgedAddNumBlades(builder, self.numBlades)
        Vessel_AbridgedAddNumShafts(builder, self.numShafts)
        if self.propType is not None:
            Vessel_AbridgedAddPropType(builder, propType)
        if self.hullNum is not None:
            Vessel_AbridgedAddHullNum(builder, hullNum)
        if self.createdAt is not None:
            Vessel_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Vessel_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Vessel_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Vessel_AbridgedAddOrigin(builder, origin)
        Vessel_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            Vessel_AbridgedAddOrigNetwork(builder, origNetwork)
        vesselAbridged = Vessel_AbridgedEnd(builder)
        return vesselAbridged
