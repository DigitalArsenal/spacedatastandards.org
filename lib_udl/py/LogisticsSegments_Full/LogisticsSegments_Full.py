# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Remarks associated with this LogisticsSupport record.
class LogisticsSegments_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsSegments_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsSegments_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsSegments_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsSegments_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Used to sequence the segments in the transportation plan.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # LogisticsSegments_Full
    def SegmentNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
    # Example: /// Example: A
    # Constraints: Minimum length = 1, Maximum length = 1
    # LogisticsSegments_Full
    def ModeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of mission (e.g. SAAM, CHNL, etc.).
    # Example: /// Example: SAAM
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsSegments_Full
    def MissionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unique identifier of the mission to which this logistics record is assigned.
    # Example: /// Example: EXAMPLE-UUID
    # Constraints: Minimum length = 0, Maximum length = 32
    # LogisticsSegments_Full
    def IdMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The GDSS mission ID for this segment.
    # Example: /// Example: 2001101RF01202307062205
    # Constraints: Minimum length = 0, Maximum length = 24
    # LogisticsSegments_Full
    def ExtMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The user generated identifier for an air mission subgroup.
    # Example: /// Example: TAM308901196
    # Constraints: Minimum length = 0, Maximum length = 12
    # LogisticsSegments_Full
    def MissionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start air mission itinerary point identifier.
    # Example: /// Example: 200
    # Constraints: No constraints specified.
    # LogisticsSegments_Full
    def Itin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The identifier that represents a specific aircraft within an aircraft type.
    # Example: /// Example: N819AX
    # Constraints: Minimum length = 0, Maximum length = 7
    # LogisticsSegments_Full
    def SegTailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    # Example: /// Example: B7772E
    # Constraints: Minimum length = 0, Maximum length = 30
    # LogisticsSegments_Full
    def SegAircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Airport ICAO departure code.
    # Example: /// Example: PHIK
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSegments_Full
    def DepartureIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:20:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSegments_Full
    def SegActDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Airport ICAO arrival code.
    # Example: /// Example: YBCS
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSegments_Full
    def ArrivalIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:20:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSegments_Full
    def SegActArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:20:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSegments_Full
    def SegEstDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:20:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSegments_Full
    def SegEstArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogisticsSegments_FullStart(builder):
    builder.StartObject(15)

def Start(builder):
    LogisticsSegments_FullStart(builder)

def LogisticsSegments_FullAddSegmentNumber(builder, segmentNumber):
    builder.PrependInt32Slot(0, segmentNumber, 0)

def AddSegmentNumber(builder, segmentNumber):
    LogisticsSegments_FullAddSegmentNumber(builder, segmentNumber)

def LogisticsSegments_FullAddModeCode(builder, modeCode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(modeCode), 0)

def AddModeCode(builder, modeCode):
    LogisticsSegments_FullAddModeCode(builder, modeCode)

def LogisticsSegments_FullAddMissionType(builder, missionType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(missionType), 0)

def AddMissionType(builder, missionType):
    LogisticsSegments_FullAddMissionType(builder, missionType)

def LogisticsSegments_FullAddIdMission(builder, idMission):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idMission), 0)

def AddIdMission(builder, idMission):
    LogisticsSegments_FullAddIdMission(builder, idMission)

def LogisticsSegments_FullAddExtMissionId(builder, extMissionId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(extMissionId), 0)

def AddExtMissionId(builder, extMissionId):
    LogisticsSegments_FullAddExtMissionId(builder, extMissionId)

def LogisticsSegments_FullAddMissionNumber(builder, missionNumber):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(missionNumber), 0)

def AddMissionNumber(builder, missionNumber):
    LogisticsSegments_FullAddMissionNumber(builder, missionNumber)

def LogisticsSegments_FullAddItin(builder, itin):
    builder.PrependInt32Slot(6, itin, 0)

def AddItin(builder, itin):
    LogisticsSegments_FullAddItin(builder, itin)

def LogisticsSegments_FullAddSegTailNumber(builder, segTailNumber):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(segTailNumber), 0)

def AddSegTailNumber(builder, segTailNumber):
    LogisticsSegments_FullAddSegTailNumber(builder, segTailNumber)

def LogisticsSegments_FullAddSegAircraftMds(builder, segAircraftMds):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(segAircraftMds), 0)

def AddSegAircraftMds(builder, segAircraftMds):
    LogisticsSegments_FullAddSegAircraftMds(builder, segAircraftMds)

def LogisticsSegments_FullAddDepartureIcao(builder, departureIcao):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(departureIcao), 0)

def AddDepartureIcao(builder, departureIcao):
    LogisticsSegments_FullAddDepartureIcao(builder, departureIcao)

def LogisticsSegments_FullAddSegActDepTime(builder, segActDepTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(segActDepTime), 0)

def AddSegActDepTime(builder, segActDepTime):
    LogisticsSegments_FullAddSegActDepTime(builder, segActDepTime)

def LogisticsSegments_FullAddArrivalIcao(builder, arrivalIcao):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(arrivalIcao), 0)

def AddArrivalIcao(builder, arrivalIcao):
    LogisticsSegments_FullAddArrivalIcao(builder, arrivalIcao)

def LogisticsSegments_FullAddSegActArrTime(builder, segActArrTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(segActArrTime), 0)

def AddSegActArrTime(builder, segActArrTime):
    LogisticsSegments_FullAddSegActArrTime(builder, segActArrTime)

def LogisticsSegments_FullAddSegEstDepTime(builder, segEstDepTime):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(segEstDepTime), 0)

def AddSegEstDepTime(builder, segEstDepTime):
    LogisticsSegments_FullAddSegEstDepTime(builder, segEstDepTime)

def LogisticsSegments_FullAddSegEstArrTime(builder, segEstArrTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(segEstArrTime), 0)

def AddSegEstArrTime(builder, segEstArrTime):
    LogisticsSegments_FullAddSegEstArrTime(builder, segEstArrTime)

def LogisticsSegments_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsSegments_FullEnd(builder)


class LogisticsSegments_FullT(object):

    # LogisticsSegments_FullT
    def __init__(self):
        self.segmentNumber = 0  # type: int
        self.modeCode = None  # type: str
        self.missionType = None  # type: str
        self.idMission = None  # type: str
        self.extMissionId = None  # type: str
        self.missionNumber = None  # type: str
        self.itin = 0  # type: int
        self.segTailNumber = None  # type: str
        self.segAircraftMds = None  # type: str
        self.departureIcao = None  # type: str
        self.segActDepTime = None  # type: str
        self.arrivalIcao = None  # type: str
        self.segActArrTime = None  # type: str
        self.segEstDepTime = None  # type: str
        self.segEstArrTime = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsSegmentsFull = LogisticsSegments_Full()
        logisticsSegmentsFull.Init(buf, pos)
        return cls.InitFromObj(logisticsSegmentsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsSegmentsFull):
        x = LogisticsSegments_FullT()
        x._UnPack(logisticsSegmentsFull)
        return x

    # LogisticsSegments_FullT
    def _UnPack(self, logisticsSegmentsFull):
        if logisticsSegmentsFull is None:
            return
        self.segmentNumber = logisticsSegmentsFull.SegmentNumber()
        self.modeCode = logisticsSegmentsFull.ModeCode()
        self.missionType = logisticsSegmentsFull.MissionType()
        self.idMission = logisticsSegmentsFull.IdMission()
        self.extMissionId = logisticsSegmentsFull.ExtMissionId()
        self.missionNumber = logisticsSegmentsFull.MissionNumber()
        self.itin = logisticsSegmentsFull.Itin()
        self.segTailNumber = logisticsSegmentsFull.SegTailNumber()
        self.segAircraftMds = logisticsSegmentsFull.SegAircraftMds()
        self.departureIcao = logisticsSegmentsFull.DepartureIcao()
        self.segActDepTime = logisticsSegmentsFull.SegActDepTime()
        self.arrivalIcao = logisticsSegmentsFull.ArrivalIcao()
        self.segActArrTime = logisticsSegmentsFull.SegActArrTime()
        self.segEstDepTime = logisticsSegmentsFull.SegEstDepTime()
        self.segEstArrTime = logisticsSegmentsFull.SegEstArrTime()

    # LogisticsSegments_FullT
    def Pack(self, builder):
        if self.modeCode is not None:
            modeCode = builder.CreateString(self.modeCode)
        if self.missionType is not None:
            missionType = builder.CreateString(self.missionType)
        if self.idMission is not None:
            idMission = builder.CreateString(self.idMission)
        if self.extMissionId is not None:
            extMissionId = builder.CreateString(self.extMissionId)
        if self.missionNumber is not None:
            missionNumber = builder.CreateString(self.missionNumber)
        if self.segTailNumber is not None:
            segTailNumber = builder.CreateString(self.segTailNumber)
        if self.segAircraftMds is not None:
            segAircraftMds = builder.CreateString(self.segAircraftMds)
        if self.departureIcao is not None:
            departureIcao = builder.CreateString(self.departureIcao)
        if self.segActDepTime is not None:
            segActDepTime = builder.CreateString(self.segActDepTime)
        if self.arrivalIcao is not None:
            arrivalIcao = builder.CreateString(self.arrivalIcao)
        if self.segActArrTime is not None:
            segActArrTime = builder.CreateString(self.segActArrTime)
        if self.segEstDepTime is not None:
            segEstDepTime = builder.CreateString(self.segEstDepTime)
        if self.segEstArrTime is not None:
            segEstArrTime = builder.CreateString(self.segEstArrTime)
        LogisticsSegments_FullStart(builder)
        LogisticsSegments_FullAddSegmentNumber(builder, self.segmentNumber)
        if self.modeCode is not None:
            LogisticsSegments_FullAddModeCode(builder, modeCode)
        if self.missionType is not None:
            LogisticsSegments_FullAddMissionType(builder, missionType)
        if self.idMission is not None:
            LogisticsSegments_FullAddIdMission(builder, idMission)
        if self.extMissionId is not None:
            LogisticsSegments_FullAddExtMissionId(builder, extMissionId)
        if self.missionNumber is not None:
            LogisticsSegments_FullAddMissionNumber(builder, missionNumber)
        LogisticsSegments_FullAddItin(builder, self.itin)
        if self.segTailNumber is not None:
            LogisticsSegments_FullAddSegTailNumber(builder, segTailNumber)
        if self.segAircraftMds is not None:
            LogisticsSegments_FullAddSegAircraftMds(builder, segAircraftMds)
        if self.departureIcao is not None:
            LogisticsSegments_FullAddDepartureIcao(builder, departureIcao)
        if self.segActDepTime is not None:
            LogisticsSegments_FullAddSegActDepTime(builder, segActDepTime)
        if self.arrivalIcao is not None:
            LogisticsSegments_FullAddArrivalIcao(builder, arrivalIcao)
        if self.segActArrTime is not None:
            LogisticsSegments_FullAddSegActArrTime(builder, segActArrTime)
        if self.segEstDepTime is not None:
            LogisticsSegments_FullAddSegEstDepTime(builder, segEstDepTime)
        if self.segEstArrTime is not None:
            LogisticsSegments_FullAddSegEstArrTime(builder, segEstArrTime)
        logisticsSegmentsFull = LogisticsSegments_FullEnd(builder)
        return logisticsSegmentsFull
