# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Surface_Ingest

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
class Surface_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Surface_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSurface_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Surface_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: be831d39-1822-da9f-7ace-6cc5643397dc
    # Constraints: Minimum length = 1, Maximum length = 36
    # Surface_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Surface_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface name or identifier.
    # Example: West lot
    # Constraints: Minimum length = 1, Maximum length = 64
    # Surface_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
    # Example: PARKING
    # Constraints: Minimum length = 1, Maximum length = 7
    # Surface_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the site where this surface is located.
    # Example: SITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Surface_Ingest
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate site identifier provided by the source.
    # Example: ORIG-SITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Surface_Ingest
    def AltSiteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this is the primary runway.  Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def Primary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The length of the surface type, in feet.  Applicable for runway and parking surface types.
    # Example: 1500
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LengthFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The landing distance available for the runway, in feet.  Applicable for runway surface types only.
    # Example: 475
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LdaFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The width of the surface type, in feet.
    # Example: 220
    # Constraints: No constraints specified.
    # Surface_Ingest
    def WidthFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The length of the surface type, in meters.  Applicable for runway and parking surface types.
    # Example: 457
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LengthM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The landing distance available for the runway, in meters.  Applicable for runway surface types only.
    # Example: 145
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LdaM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The width of the surface type, in meters.
    # Example: 67
    # Constraints: No constraints specified.
    # Surface_Ingest
    def WidthM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The surface material (e.g. Asphalt, Concrete, Dirt).
    # Example: Concrete
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Ingest
    def Material(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
    # Example: GOOD
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Ingest
    def Condition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Raw weight bearing capacity value or pavement strength.
    # Example: LCN 42
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Ingest
    def RawWbc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pavement classification number (PCN) and tire pressure code.
    # Example: 73RBWT
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Ingest
    def Pcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
    # Example: 50
    # Constraints: No constraints specified.
    # Surface_Ingest
    def Lcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 143
    # Constraints: No constraints specified.
    # Surface_Ingest
    def SWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 188
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 195
    # Constraints: No constraints specified.
    # Surface_Ingest
    def StWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 414
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TtWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 416
    # Constraints: No constraints specified.
    # Surface_Ingest
    def DdWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 603
    # Constraints: No constraints specified.
    # Surface_Ingest
    def SbttWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 870
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TdtWtkip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 622
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TrtWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 833
    # Constraints: No constraints specified.
    # Surface_Ingest
    def DdtWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 636
    # Constraints: No constraints specified.
    # Surface_Ingest
    def SWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 836
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 867
    # Constraints: No constraints specified.
    # Surface_Ingest
    def StWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 1842
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 1850
    # Constraints: No constraints specified.
    # Surface_Ingest
    def DdWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 2682
    # Constraints: No constraints specified.
    # Surface_Ingest
    def SbttWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 3870
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TdtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 2767
    # Constraints: No constraints specified.
    # Surface_Ingest
    def TrtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: 3705
    # Constraints: No constraints specified.
    # Surface_Ingest
    def DdtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating the surface has lighting.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def Lighting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
    # Example: False
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsUnkn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has approach lights. Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsAprch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsVasi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsPapi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsOls(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsReil(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsTdzl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has centerline lights. Applicable for runway surface types only.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def LightsCl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
    # Example: True
    # Constraints: No constraints specified.
    # Surface_Ingest
    def Obstacle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Time the row was created in the database, auto-populated by the system.
    # Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Surface_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Surface_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Surface_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Surface_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Surface_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    # Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Surface_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Surface_IngestStart(builder):
    builder.StartObject(52)

def Start(builder):
    Surface_IngestStart(builder)

def Surface_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Surface_IngestAddId(builder, id)

def Surface_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Surface_IngestAddClassificationMarking(builder, classificationMarking)

def Surface_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Surface_IngestAddName(builder, name)

def Surface_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Surface_IngestAddType(builder, type)

def Surface_IngestAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    Surface_IngestAddIdSite(builder, idSite)

def Surface_IngestAddAltSiteId(builder, altSiteId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(altSiteId), 0)

def AddAltSiteId(builder, altSiteId):
    Surface_IngestAddAltSiteId(builder, altSiteId)

def Surface_IngestAddPrimary(builder, primary):
    builder.PrependBoolSlot(6, primary, 0)

def AddPrimary(builder, primary):
    Surface_IngestAddPrimary(builder, primary)

def Surface_IngestAddLengthFt(builder, lengthFt):
    builder.PrependInt32Slot(7, lengthFt, 0)

def AddLengthFt(builder, lengthFt):
    Surface_IngestAddLengthFt(builder, lengthFt)

def Surface_IngestAddLdaFt(builder, ldaFt):
    builder.PrependInt32Slot(8, ldaFt, 0)

def AddLdaFt(builder, ldaFt):
    Surface_IngestAddLdaFt(builder, ldaFt)

def Surface_IngestAddWidthFt(builder, widthFt):
    builder.PrependInt32Slot(9, widthFt, 0)

def AddWidthFt(builder, widthFt):
    Surface_IngestAddWidthFt(builder, widthFt)

def Surface_IngestAddLengthM(builder, lengthM):
    builder.PrependInt32Slot(10, lengthM, 0)

def AddLengthM(builder, lengthM):
    Surface_IngestAddLengthM(builder, lengthM)

def Surface_IngestAddLdaM(builder, ldaM):
    builder.PrependInt32Slot(11, ldaM, 0)

def AddLdaM(builder, ldaM):
    Surface_IngestAddLdaM(builder, ldaM)

def Surface_IngestAddWidthM(builder, widthM):
    builder.PrependInt32Slot(12, widthM, 0)

def AddWidthM(builder, widthM):
    Surface_IngestAddWidthM(builder, widthM)

def Surface_IngestAddMaterial(builder, material):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(material), 0)

def AddMaterial(builder, material):
    Surface_IngestAddMaterial(builder, material)

def Surface_IngestAddCondition(builder, condition):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(condition), 0)

def AddCondition(builder, condition):
    Surface_IngestAddCondition(builder, condition)

def Surface_IngestAddRawWbc(builder, rawWbc):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(rawWbc), 0)

def AddRawWbc(builder, rawWbc):
    Surface_IngestAddRawWbc(builder, rawWbc)

def Surface_IngestAddPcn(builder, pcn):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(pcn), 0)

def AddPcn(builder, pcn):
    Surface_IngestAddPcn(builder, pcn)

def Surface_IngestAddLcn(builder, lcn):
    builder.PrependInt32Slot(17, lcn, 0)

def AddLcn(builder, lcn):
    Surface_IngestAddLcn(builder, lcn)

def Surface_IngestAddSWtKip(builder, sWtKip):
    builder.PrependInt32Slot(18, sWtKip, 0)

def AddSWtKip(builder, sWtKip):
    Surface_IngestAddSWtKip(builder, sWtKip)

def Surface_IngestAddTWtKip(builder, tWtKip):
    builder.PrependInt32Slot(19, tWtKip, 0)

def AddTWtKip(builder, tWtKip):
    Surface_IngestAddTWtKip(builder, tWtKip)

def Surface_IngestAddStWtKip(builder, stWtKip):
    builder.PrependInt32Slot(20, stWtKip, 0)

def AddStWtKip(builder, stWtKip):
    Surface_IngestAddStWtKip(builder, stWtKip)

def Surface_IngestAddTtWtKip(builder, ttWtKip):
    builder.PrependInt32Slot(21, ttWtKip, 0)

def AddTtWtKip(builder, ttWtKip):
    Surface_IngestAddTtWtKip(builder, ttWtKip)

def Surface_IngestAddDdWtKip(builder, ddWtKip):
    builder.PrependInt32Slot(22, ddWtKip, 0)

def AddDdWtKip(builder, ddWtKip):
    Surface_IngestAddDdWtKip(builder, ddWtKip)

def Surface_IngestAddSbttWtKip(builder, sbttWtKip):
    builder.PrependInt32Slot(23, sbttWtKip, 0)

def AddSbttWtKip(builder, sbttWtKip):
    Surface_IngestAddSbttWtKip(builder, sbttWtKip)

def Surface_IngestAddTdtWtkip(builder, tdtWtkip):
    builder.PrependInt32Slot(24, tdtWtkip, 0)

def AddTdtWtkip(builder, tdtWtkip):
    Surface_IngestAddTdtWtkip(builder, tdtWtkip)

def Surface_IngestAddTrtWtKip(builder, trtWtKip):
    builder.PrependInt32Slot(25, trtWtKip, 0)

def AddTrtWtKip(builder, trtWtKip):
    Surface_IngestAddTrtWtKip(builder, trtWtKip)

def Surface_IngestAddDdtWtKip(builder, ddtWtKip):
    builder.PrependInt32Slot(26, ddtWtKip, 0)

def AddDdtWtKip(builder, ddtWtKip):
    Surface_IngestAddDdtWtKip(builder, ddtWtKip)

def Surface_IngestAddSWtKn(builder, sWtKn):
    builder.PrependInt32Slot(27, sWtKn, 0)

def AddSWtKn(builder, sWtKn):
    Surface_IngestAddSWtKn(builder, sWtKn)

def Surface_IngestAddTWtKn(builder, tWtKn):
    builder.PrependInt32Slot(28, tWtKn, 0)

def AddTWtKn(builder, tWtKn):
    Surface_IngestAddTWtKn(builder, tWtKn)

def Surface_IngestAddStWtKn(builder, stWtKn):
    builder.PrependInt32Slot(29, stWtKn, 0)

def AddStWtKn(builder, stWtKn):
    Surface_IngestAddStWtKn(builder, stWtKn)

def Surface_IngestAddTtWtKn(builder, ttWtKn):
    builder.PrependInt32Slot(30, ttWtKn, 0)

def AddTtWtKn(builder, ttWtKn):
    Surface_IngestAddTtWtKn(builder, ttWtKn)

def Surface_IngestAddDdWtKn(builder, ddWtKn):
    builder.PrependInt32Slot(31, ddWtKn, 0)

def AddDdWtKn(builder, ddWtKn):
    Surface_IngestAddDdWtKn(builder, ddWtKn)

def Surface_IngestAddSbttWtKn(builder, sbttWtKn):
    builder.PrependInt32Slot(32, sbttWtKn, 0)

def AddSbttWtKn(builder, sbttWtKn):
    Surface_IngestAddSbttWtKn(builder, sbttWtKn)

def Surface_IngestAddTdtWtKn(builder, tdtWtKn):
    builder.PrependInt32Slot(33, tdtWtKn, 0)

def AddTdtWtKn(builder, tdtWtKn):
    Surface_IngestAddTdtWtKn(builder, tdtWtKn)

def Surface_IngestAddTrtWtKn(builder, trtWtKn):
    builder.PrependInt32Slot(34, trtWtKn, 0)

def AddTrtWtKn(builder, trtWtKn):
    Surface_IngestAddTrtWtKn(builder, trtWtKn)

def Surface_IngestAddDdtWtKn(builder, ddtWtKn):
    builder.PrependInt32Slot(35, ddtWtKn, 0)

def AddDdtWtKn(builder, ddtWtKn):
    Surface_IngestAddDdtWtKn(builder, ddtWtKn)

def Surface_IngestAddLighting(builder, lighting):
    builder.PrependBoolSlot(36, lighting, 0)

def AddLighting(builder, lighting):
    Surface_IngestAddLighting(builder, lighting)

def Surface_IngestAddLightsUnkn(builder, lightsUnkn):
    builder.PrependBoolSlot(37, lightsUnkn, 0)

def AddLightsUnkn(builder, lightsUnkn):
    Surface_IngestAddLightsUnkn(builder, lightsUnkn)

def Surface_IngestAddLightsAprch(builder, lightsAprch):
    builder.PrependBoolSlot(38, lightsAprch, 0)

def AddLightsAprch(builder, lightsAprch):
    Surface_IngestAddLightsAprch(builder, lightsAprch)

def Surface_IngestAddLightsVasi(builder, lightsVasi):
    builder.PrependBoolSlot(39, lightsVasi, 0)

def AddLightsVasi(builder, lightsVasi):
    Surface_IngestAddLightsVasi(builder, lightsVasi)

def Surface_IngestAddLightsPapi(builder, lightsPapi):
    builder.PrependBoolSlot(40, lightsPapi, 0)

def AddLightsPapi(builder, lightsPapi):
    Surface_IngestAddLightsPapi(builder, lightsPapi)

def Surface_IngestAddLightsOls(builder, lightsOls):
    builder.PrependBoolSlot(41, lightsOls, 0)

def AddLightsOls(builder, lightsOls):
    Surface_IngestAddLightsOls(builder, lightsOls)

def Surface_IngestAddLightsReil(builder, lightsReil):
    builder.PrependBoolSlot(42, lightsReil, 0)

def AddLightsReil(builder, lightsReil):
    Surface_IngestAddLightsReil(builder, lightsReil)

def Surface_IngestAddLightsTdzl(builder, lightsTdzl):
    builder.PrependBoolSlot(43, lightsTdzl, 0)

def AddLightsTdzl(builder, lightsTdzl):
    Surface_IngestAddLightsTdzl(builder, lightsTdzl)

def Surface_IngestAddLightsCl(builder, lightsCl):
    builder.PrependBoolSlot(44, lightsCl, 0)

def AddLightsCl(builder, lightsCl):
    Surface_IngestAddLightsCl(builder, lightsCl)

def Surface_IngestAddObstacle(builder, obstacle):
    builder.PrependBoolSlot(45, obstacle, 0)

def AddObstacle(builder, obstacle):
    Surface_IngestAddObstacle(builder, obstacle)

def Surface_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Surface_IngestAddCreatedAt(builder, createdAt)

def Surface_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Surface_IngestAddCreatedBy(builder, createdBy)

def Surface_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Surface_IngestAddSource(builder, source)

def Surface_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Surface_IngestAddOrigin(builder, origin)

def Surface_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Surface_IngestAddOrigNetwork(builder, origNetwork)

def Surface_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(51, dataMode, 0)

def AddDataMode(builder, dataMode):
    Surface_IngestAddDataMode(builder, dataMode)

def Surface_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Surface_IngestEnd(builder)


class Surface_IngestT(object):

    # Surface_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.idSite = None  # type: str
        self.altSiteId = None  # type: str
        self.primary = False  # type: bool
        self.lengthFt = 0  # type: int
        self.ldaFt = 0  # type: int
        self.widthFt = 0  # type: int
        self.lengthM = 0  # type: int
        self.ldaM = 0  # type: int
        self.widthM = 0  # type: int
        self.material = None  # type: str
        self.condition = None  # type: str
        self.rawWBC = None  # type: str
        self.pcn = None  # type: str
        self.lcn = 0  # type: int
        self.sWtKip = 0  # type: int
        self.tWtKip = 0  # type: int
        self.stWtKip = 0  # type: int
        self.ttWtKip = 0  # type: int
        self.ddWtKip = 0  # type: int
        self.sbttWtKip = 0  # type: int
        self.tdtWtkip = 0  # type: int
        self.trtWtKip = 0  # type: int
        self.ddtWtKip = 0  # type: int
        self.sWtKN = 0  # type: int
        self.tWtKN = 0  # type: int
        self.stWtKN = 0  # type: int
        self.ttWtKN = 0  # type: int
        self.ddWtKN = 0  # type: int
        self.sbttWtKN = 0  # type: int
        self.tdtWtKN = 0  # type: int
        self.trtWtKN = 0  # type: int
        self.ddtWtKN = 0  # type: int
        self.lighting = False  # type: bool
        self.lightsUNKN = False  # type: bool
        self.lightsAPRCH = False  # type: bool
        self.lightsVASI = False  # type: bool
        self.lightsPAPI = False  # type: bool
        self.lightsOLS = False  # type: bool
        self.lightsREIL = False  # type: bool
        self.lightsTDZL = False  # type: bool
        self.lightsCL = False  # type: bool
        self.obstacle = False  # type: bool
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        surfaceIngest = Surface_Ingest()
        surfaceIngest.Init(buf, pos)
        return cls.InitFromObj(surfaceIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, surfaceIngest):
        x = Surface_IngestT()
        x._UnPack(surfaceIngest)
        return x

    # Surface_IngestT
    def _UnPack(self, surfaceIngest):
        if surfaceIngest is None:
            return
        self.id = surfaceIngest.Id()
        self.classificationMarking = surfaceIngest.ClassificationMarking()
        self.name = surfaceIngest.Name()
        self.type = surfaceIngest.Type()
        self.idSite = surfaceIngest.IdSite()
        self.altSiteId = surfaceIngest.AltSiteId()
        self.primary = surfaceIngest.Primary()
        self.lengthFt = surfaceIngest.LengthFt()
        self.ldaFt = surfaceIngest.LdaFt()
        self.widthFt = surfaceIngest.WidthFt()
        self.lengthM = surfaceIngest.LengthM()
        self.ldaM = surfaceIngest.LdaM()
        self.widthM = surfaceIngest.WidthM()
        self.material = surfaceIngest.Material()
        self.condition = surfaceIngest.Condition()
        self.rawWBC = surfaceIngest.RawWbc()
        self.pcn = surfaceIngest.Pcn()
        self.lcn = surfaceIngest.Lcn()
        self.sWtKip = surfaceIngest.SWtKip()
        self.tWtKip = surfaceIngest.TWtKip()
        self.stWtKip = surfaceIngest.StWtKip()
        self.ttWtKip = surfaceIngest.TtWtKip()
        self.ddWtKip = surfaceIngest.DdWtKip()
        self.sbttWtKip = surfaceIngest.SbttWtKip()
        self.tdtWtkip = surfaceIngest.TdtWtkip()
        self.trtWtKip = surfaceIngest.TrtWtKip()
        self.ddtWtKip = surfaceIngest.DdtWtKip()
        self.sWtKN = surfaceIngest.SWtKn()
        self.tWtKN = surfaceIngest.TWtKn()
        self.stWtKN = surfaceIngest.StWtKn()
        self.ttWtKN = surfaceIngest.TtWtKn()
        self.ddWtKN = surfaceIngest.DdWtKn()
        self.sbttWtKN = surfaceIngest.SbttWtKn()
        self.tdtWtKN = surfaceIngest.TdtWtKn()
        self.trtWtKN = surfaceIngest.TrtWtKn()
        self.ddtWtKN = surfaceIngest.DdtWtKn()
        self.lighting = surfaceIngest.Lighting()
        self.lightsUNKN = surfaceIngest.LightsUnkn()
        self.lightsAPRCH = surfaceIngest.LightsAprch()
        self.lightsVASI = surfaceIngest.LightsVasi()
        self.lightsPAPI = surfaceIngest.LightsPapi()
        self.lightsOLS = surfaceIngest.LightsOls()
        self.lightsREIL = surfaceIngest.LightsReil()
        self.lightsTDZL = surfaceIngest.LightsTdzl()
        self.lightsCL = surfaceIngest.LightsCl()
        self.obstacle = surfaceIngest.Obstacle()
        self.createdAt = surfaceIngest.CreatedAt()
        self.createdBy = surfaceIngest.CreatedBy()
        self.source = surfaceIngest.Source()
        self.origin = surfaceIngest.Origin()
        self.origNetwork = surfaceIngest.OrigNetwork()
        self.dataMode = surfaceIngest.DataMode()

    # Surface_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.altSiteId is not None:
            altSiteId = builder.CreateString(self.altSiteId)
        if self.material is not None:
            material = builder.CreateString(self.material)
        if self.condition is not None:
            condition = builder.CreateString(self.condition)
        if self.rawWBC is not None:
            rawWBC = builder.CreateString(self.rawWBC)
        if self.pcn is not None:
            pcn = builder.CreateString(self.pcn)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Surface_IngestStart(builder)
        if self.id is not None:
            Surface_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            Surface_IngestAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            Surface_IngestAddName(builder, name)
        if self.type is not None:
            Surface_IngestAddType(builder, type)
        if self.idSite is not None:
            Surface_IngestAddIdSite(builder, idSite)
        if self.altSiteId is not None:
            Surface_IngestAddAltSiteId(builder, altSiteId)
        Surface_IngestAddPrimary(builder, self.primary)
        Surface_IngestAddLengthFt(builder, self.lengthFt)
        Surface_IngestAddLdaFt(builder, self.ldaFt)
        Surface_IngestAddWidthFt(builder, self.widthFt)
        Surface_IngestAddLengthM(builder, self.lengthM)
        Surface_IngestAddLdaM(builder, self.ldaM)
        Surface_IngestAddWidthM(builder, self.widthM)
        if self.material is not None:
            Surface_IngestAddMaterial(builder, material)
        if self.condition is not None:
            Surface_IngestAddCondition(builder, condition)
        if self.rawWBC is not None:
            Surface_IngestAddRawWbc(builder, rawWBC)
        if self.pcn is not None:
            Surface_IngestAddPcn(builder, pcn)
        Surface_IngestAddLcn(builder, self.lcn)
        Surface_IngestAddSWtKip(builder, self.sWtKip)
        Surface_IngestAddTWtKip(builder, self.tWtKip)
        Surface_IngestAddStWtKip(builder, self.stWtKip)
        Surface_IngestAddTtWtKip(builder, self.ttWtKip)
        Surface_IngestAddDdWtKip(builder, self.ddWtKip)
        Surface_IngestAddSbttWtKip(builder, self.sbttWtKip)
        Surface_IngestAddTdtWtkip(builder, self.tdtWtkip)
        Surface_IngestAddTrtWtKip(builder, self.trtWtKip)
        Surface_IngestAddDdtWtKip(builder, self.ddtWtKip)
        Surface_IngestAddSWtKn(builder, self.sWtKN)
        Surface_IngestAddTWtKn(builder, self.tWtKN)
        Surface_IngestAddStWtKn(builder, self.stWtKN)
        Surface_IngestAddTtWtKn(builder, self.ttWtKN)
        Surface_IngestAddDdWtKn(builder, self.ddWtKN)
        Surface_IngestAddSbttWtKn(builder, self.sbttWtKN)
        Surface_IngestAddTdtWtKn(builder, self.tdtWtKN)
        Surface_IngestAddTrtWtKn(builder, self.trtWtKN)
        Surface_IngestAddDdtWtKn(builder, self.ddtWtKN)
        Surface_IngestAddLighting(builder, self.lighting)
        Surface_IngestAddLightsUnkn(builder, self.lightsUNKN)
        Surface_IngestAddLightsAprch(builder, self.lightsAPRCH)
        Surface_IngestAddLightsVasi(builder, self.lightsVASI)
        Surface_IngestAddLightsPapi(builder, self.lightsPAPI)
        Surface_IngestAddLightsOls(builder, self.lightsOLS)
        Surface_IngestAddLightsReil(builder, self.lightsREIL)
        Surface_IngestAddLightsTdzl(builder, self.lightsTDZL)
        Surface_IngestAddLightsCl(builder, self.lightsCL)
        Surface_IngestAddObstacle(builder, self.obstacle)
        if self.createdAt is not None:
            Surface_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Surface_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Surface_IngestAddSource(builder, source)
        if self.origin is not None:
            Surface_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Surface_IngestAddOrigNetwork(builder, origNetwork)
        Surface_IngestAddDataMode(builder, self.dataMode)
        surfaceIngest = Surface_IngestEnd(builder)
        return surfaceIngest
