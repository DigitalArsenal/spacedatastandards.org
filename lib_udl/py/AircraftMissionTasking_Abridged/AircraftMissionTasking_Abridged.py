# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
class AircraftMissionTasking_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftMissionTasking_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftMissionTasking_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftMissionTasking_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftMissionTasking_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
    # Example: /// Example: US
    # Constraints: Minimum length = 1, Maximum length = 4
    # AircraftMissionTasking_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The service tasked with conducting this aircraft mission tasking for the exercise or operation.
    # Example: /// Example: A
    # Constraints: Minimum length = 1, Maximum length = 1
    # AircraftMissionTasking_Abridged
    def TaskedService(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The designator of the unit that is tasked to perform this aircraft mission tasking.
    # Example: /// Example: AMPHIB5DIV
    # Constraints: Minimum length = 1, Maximum length = 36
    # AircraftMissionTasking_Abridged
    def UnitDesignator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tasked units location expressed as an ICAO or a place name.
    # Example: /// Example: ICAO:KXXQ
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionTasking_Abridged
    def UnitLocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An indicator of whether a mission is or will be a residual mission.
    # Example: /// Example: N
    # Constraints: Minimum length = 0, Maximum length = 1
    # AircraftMissionTasking_Abridged
    def ResMsnInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The AMC number assigned to identify one aircraft from another.
    # Example: /// Example: AMC:JJXD123HA045
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftMissionTasking_Abridged
    def AmcMsnNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The identifier for the composite set of missions for this operation/exercise.
    # Example: /// Example: ZZ
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionTasking_Abridged
    def PkgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
    # Example: /// Example: MC
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionTasking_Abridged
    def MsnCommander(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission number assigned to this mission.
    # Example: /// Example: D123HA
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionTasking_Abridged
    def MsnNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The code for the preferred type or designator for a tasked air mission.
    # Example: /// Example: CAS
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionTasking_Abridged
    def PriMsnType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The code for the alternative type of a tasked air mission.
    # Example: /// Example: SEAD
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionTasking_Abridged
    def SecMsnType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
    # Example: /// Example: 30
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def AlertStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The location or name specified for the departure of the tasked air mission.
    # Example: /// Example: ICAO:KBIF
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionTasking_Abridged
    def DepLocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
    # Example: /// Example: 32WDL123123
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionTasking_Abridged
    def DepLocUtm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    # Example: /// Example: 35.123
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def DepLocLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    # Example: /// Example: 79.2354
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def DepLocLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-10-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def DepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An array of locations specified for the recovery of the tasked air mission represented by varying formats.
    # Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def RcvyLocName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def RcvyLocNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def RcvyLocNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
    # Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def RcvyLocUtm(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def RcvyLocUtmLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def RcvyLocUtmIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    # Example: /// Example: [48.8584, 40.7554]
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def RcvyLocLat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def RcvyLocLatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def RcvyLocLatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    # Example: /// Example: [2.2945, -73.9866]
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def RcvyLocLon(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def RcvyLocLonLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def RcvyLocLonIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def RcvyTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def RcvyTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def RcvyTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # A collection of the individual aircraft assigned to this aircraft mission tasking.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def IndActasking(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def IndActaskingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def IndActaskingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # A collection of aircraft mission location information for this aircraft mission tasking.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AircraftMissionTasking_Abridged
    def AcMsnLocSeg(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftMissionTasking_Abridged
    def AcMsnLocSegLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftMissionTasking_Abridged
    def AcMsnLocSegIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def AircraftMissionTasking_AbridgedStart(builder):
    builder.StartObject(24)

def Start(builder):
    AircraftMissionTasking_AbridgedStart(builder)

def AircraftMissionTasking_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    AircraftMissionTasking_AbridgedAddCountryCode(builder, countryCode)

def AircraftMissionTasking_AbridgedAddTaskedService(builder, taskedService):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskedService), 0)

def AddTaskedService(builder, taskedService):
    AircraftMissionTasking_AbridgedAddTaskedService(builder, taskedService)

def AircraftMissionTasking_AbridgedAddUnitDesignator(builder, unitDesignator):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unitDesignator), 0)

def AddUnitDesignator(builder, unitDesignator):
    AircraftMissionTasking_AbridgedAddUnitDesignator(builder, unitDesignator)

def AircraftMissionTasking_AbridgedAddUnitLocName(builder, unitLocName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unitLocName), 0)

def AddUnitLocName(builder, unitLocName):
    AircraftMissionTasking_AbridgedAddUnitLocName(builder, unitLocName)

def AircraftMissionTasking_AbridgedAddResMsnInd(builder, resMsnInd):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(resMsnInd), 0)

def AddResMsnInd(builder, resMsnInd):
    AircraftMissionTasking_AbridgedAddResMsnInd(builder, resMsnInd)

def AircraftMissionTasking_AbridgedAddAmcMsnNum(builder, amcMsnNum):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(amcMsnNum), 0)

def AddAmcMsnNum(builder, amcMsnNum):
    AircraftMissionTasking_AbridgedAddAmcMsnNum(builder, amcMsnNum)

def AircraftMissionTasking_AbridgedAddPkgId(builder, pkgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pkgId), 0)

def AddPkgId(builder, pkgId):
    AircraftMissionTasking_AbridgedAddPkgId(builder, pkgId)

def AircraftMissionTasking_AbridgedAddMsnCommander(builder, msnCommander):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(msnCommander), 0)

def AddMsnCommander(builder, msnCommander):
    AircraftMissionTasking_AbridgedAddMsnCommander(builder, msnCommander)

def AircraftMissionTasking_AbridgedAddMsnNum(builder, msnNum):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(msnNum), 0)

def AddMsnNum(builder, msnNum):
    AircraftMissionTasking_AbridgedAddMsnNum(builder, msnNum)

def AircraftMissionTasking_AbridgedAddPriMsnType(builder, priMsnType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(priMsnType), 0)

def AddPriMsnType(builder, priMsnType):
    AircraftMissionTasking_AbridgedAddPriMsnType(builder, priMsnType)

def AircraftMissionTasking_AbridgedAddSecMsnType(builder, secMsnType):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(secMsnType), 0)

def AddSecMsnType(builder, secMsnType):
    AircraftMissionTasking_AbridgedAddSecMsnType(builder, secMsnType)

def AircraftMissionTasking_AbridgedAddAlertStatus(builder, alertStatus):
    builder.PrependInt32Slot(11, alertStatus, 0)

def AddAlertStatus(builder, alertStatus):
    AircraftMissionTasking_AbridgedAddAlertStatus(builder, alertStatus)

def AircraftMissionTasking_AbridgedAddDepLocName(builder, depLocName):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(depLocName), 0)

def AddDepLocName(builder, depLocName):
    AircraftMissionTasking_AbridgedAddDepLocName(builder, depLocName)

def AircraftMissionTasking_AbridgedAddDepLocUtm(builder, depLocUtm):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(depLocUtm), 0)

def AddDepLocUtm(builder, depLocUtm):
    AircraftMissionTasking_AbridgedAddDepLocUtm(builder, depLocUtm)

def AircraftMissionTasking_AbridgedAddDepLocLat(builder, depLocLat):
    builder.PrependFloat64Slot(14, depLocLat, 0.0)

def AddDepLocLat(builder, depLocLat):
    AircraftMissionTasking_AbridgedAddDepLocLat(builder, depLocLat)

def AircraftMissionTasking_AbridgedAddDepLocLon(builder, depLocLon):
    builder.PrependFloat64Slot(15, depLocLon, 0.0)

def AddDepLocLon(builder, depLocLon):
    AircraftMissionTasking_AbridgedAddDepLocLon(builder, depLocLon)

def AircraftMissionTasking_AbridgedAddDepTime(builder, depTime):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(depTime), 0)

def AddDepTime(builder, depTime):
    AircraftMissionTasking_AbridgedAddDepTime(builder, depTime)

def AircraftMissionTasking_AbridgedAddRcvyLocName(builder, rcvyLocName):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(rcvyLocName), 0)

def AddRcvyLocName(builder, rcvyLocName):
    AircraftMissionTasking_AbridgedAddRcvyLocName(builder, rcvyLocName)

def AircraftMissionTasking_AbridgedStartRcvyLocNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRcvyLocNameVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartRcvyLocNameVector(builder, numElems)

def AircraftMissionTasking_AbridgedAddRcvyLocUtm(builder, rcvyLocUtm):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(rcvyLocUtm), 0)

def AddRcvyLocUtm(builder, rcvyLocUtm):
    AircraftMissionTasking_AbridgedAddRcvyLocUtm(builder, rcvyLocUtm)

def AircraftMissionTasking_AbridgedStartRcvyLocUtmVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRcvyLocUtmVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartRcvyLocUtmVector(builder, numElems)

def AircraftMissionTasking_AbridgedAddRcvyLocLat(builder, rcvyLocLat):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(rcvyLocLat), 0)

def AddRcvyLocLat(builder, rcvyLocLat):
    AircraftMissionTasking_AbridgedAddRcvyLocLat(builder, rcvyLocLat)

def AircraftMissionTasking_AbridgedStartRcvyLocLatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRcvyLocLatVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartRcvyLocLatVector(builder, numElems)

def AircraftMissionTasking_AbridgedAddRcvyLocLon(builder, rcvyLocLon):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(rcvyLocLon), 0)

def AddRcvyLocLon(builder, rcvyLocLon):
    AircraftMissionTasking_AbridgedAddRcvyLocLon(builder, rcvyLocLon)

def AircraftMissionTasking_AbridgedStartRcvyLocLonVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRcvyLocLonVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartRcvyLocLonVector(builder, numElems)

def AircraftMissionTasking_AbridgedAddRcvyTime(builder, rcvyTime):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(rcvyTime), 0)

def AddRcvyTime(builder, rcvyTime):
    AircraftMissionTasking_AbridgedAddRcvyTime(builder, rcvyTime)

def AircraftMissionTasking_AbridgedStartRcvyTimeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRcvyTimeVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartRcvyTimeVector(builder, numElems)

def AircraftMissionTasking_AbridgedAddIndActasking(builder, indActasking):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(indActasking), 0)

def AddIndActasking(builder, indActasking):
    AircraftMissionTasking_AbridgedAddIndActasking(builder, indActasking)

def AircraftMissionTasking_AbridgedStartIndActaskingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIndActaskingVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartIndActaskingVector(builder, numElems)

def AircraftMissionTasking_AbridgedAddAcMsnLocSeg(builder, acMsnLocSeg):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(acMsnLocSeg), 0)

def AddAcMsnLocSeg(builder, acMsnLocSeg):
    AircraftMissionTasking_AbridgedAddAcMsnLocSeg(builder, acMsnLocSeg)

def AircraftMissionTasking_AbridgedStartAcMsnLocSegVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcMsnLocSegVector(builder, numElems):
    return AircraftMissionTasking_AbridgedStartAcMsnLocSegVector(builder, numElems)

def AircraftMissionTasking_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftMissionTasking_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AircraftMissionTasking_AbridgedT(object):

    # AircraftMissionTasking_AbridgedT
    def __init__(self):
        self.countryCode = None  # type: str
        self.taskedService = None  # type: str
        self.unitDesignator = None  # type: str
        self.unitLocName = None  # type: str
        self.resMsnInd = None  # type: str
        self.amcMsnNum = None  # type: str
        self.pkgId = None  # type: str
        self.msnCommander = None  # type: str
        self.msnNum = None  # type: str
        self.priMsnType = None  # type: str
        self.secMsnType = None  # type: str
        self.alertStatus = 0  # type: int
        self.depLocName = None  # type: str
        self.depLocUtm = None  # type: str
        self.depLocLat = 0.0  # type: float
        self.depLocLon = 0.0  # type: float
        self.depTime = None  # type: str
        self.rcvyLocName = None  # type: List[str]
        self.rcvyLocUtm = None  # type: List[str]
        self.rcvyLocLat = None  # type: List[str]
        self.rcvyLocLon = None  # type: List[str]
        self.rcvyTime = None  # type: List[str]
        self.indActasking = None  # type: List[str]
        self.acMsnLocSeg = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftMissionTaskingAbridged = AircraftMissionTasking_Abridged()
        aircraftMissionTaskingAbridged.Init(buf, pos)
        return cls.InitFromObj(aircraftMissionTaskingAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftMissionTaskingAbridged):
        x = AircraftMissionTasking_AbridgedT()
        x._UnPack(aircraftMissionTaskingAbridged)
        return x

    # AircraftMissionTasking_AbridgedT
    def _UnPack(self, aircraftMissionTaskingAbridged):
        if aircraftMissionTaskingAbridged is None:
            return
        self.countryCode = aircraftMissionTaskingAbridged.CountryCode()
        self.taskedService = aircraftMissionTaskingAbridged.TaskedService()
        self.unitDesignator = aircraftMissionTaskingAbridged.UnitDesignator()
        self.unitLocName = aircraftMissionTaskingAbridged.UnitLocName()
        self.resMsnInd = aircraftMissionTaskingAbridged.ResMsnInd()
        self.amcMsnNum = aircraftMissionTaskingAbridged.AmcMsnNum()
        self.pkgId = aircraftMissionTaskingAbridged.PkgId()
        self.msnCommander = aircraftMissionTaskingAbridged.MsnCommander()
        self.msnNum = aircraftMissionTaskingAbridged.MsnNum()
        self.priMsnType = aircraftMissionTaskingAbridged.PriMsnType()
        self.secMsnType = aircraftMissionTaskingAbridged.SecMsnType()
        self.alertStatus = aircraftMissionTaskingAbridged.AlertStatus()
        self.depLocName = aircraftMissionTaskingAbridged.DepLocName()
        self.depLocUtm = aircraftMissionTaskingAbridged.DepLocUtm()
        self.depLocLat = aircraftMissionTaskingAbridged.DepLocLat()
        self.depLocLon = aircraftMissionTaskingAbridged.DepLocLon()
        self.depTime = aircraftMissionTaskingAbridged.DepTime()
        if not aircraftMissionTaskingAbridged.RcvyLocNameIsNone():
            self.rcvyLocName = []
            for i in range(aircraftMissionTaskingAbridged.RcvyLocNameLength()):
                self.rcvyLocName.append(aircraftMissionTaskingAbridged.RcvyLocName(i))
        if not aircraftMissionTaskingAbridged.RcvyLocUtmIsNone():
            self.rcvyLocUtm = []
            for i in range(aircraftMissionTaskingAbridged.RcvyLocUtmLength()):
                self.rcvyLocUtm.append(aircraftMissionTaskingAbridged.RcvyLocUtm(i))
        if not aircraftMissionTaskingAbridged.RcvyLocLatIsNone():
            self.rcvyLocLat = []
            for i in range(aircraftMissionTaskingAbridged.RcvyLocLatLength()):
                self.rcvyLocLat.append(aircraftMissionTaskingAbridged.RcvyLocLat(i))
        if not aircraftMissionTaskingAbridged.RcvyLocLonIsNone():
            self.rcvyLocLon = []
            for i in range(aircraftMissionTaskingAbridged.RcvyLocLonLength()):
                self.rcvyLocLon.append(aircraftMissionTaskingAbridged.RcvyLocLon(i))
        if not aircraftMissionTaskingAbridged.RcvyTimeIsNone():
            self.rcvyTime = []
            for i in range(aircraftMissionTaskingAbridged.RcvyTimeLength()):
                self.rcvyTime.append(aircraftMissionTaskingAbridged.RcvyTime(i))
        if not aircraftMissionTaskingAbridged.IndActaskingIsNone():
            self.indActasking = []
            for i in range(aircraftMissionTaskingAbridged.IndActaskingLength()):
                self.indActasking.append(aircraftMissionTaskingAbridged.IndActasking(i))
        if not aircraftMissionTaskingAbridged.AcMsnLocSegIsNone():
            self.acMsnLocSeg = []
            for i in range(aircraftMissionTaskingAbridged.AcMsnLocSegLength()):
                self.acMsnLocSeg.append(aircraftMissionTaskingAbridged.AcMsnLocSeg(i))

    # AircraftMissionTasking_AbridgedT
    def Pack(self, builder):
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.taskedService is not None:
            taskedService = builder.CreateString(self.taskedService)
        if self.unitDesignator is not None:
            unitDesignator = builder.CreateString(self.unitDesignator)
        if self.unitLocName is not None:
            unitLocName = builder.CreateString(self.unitLocName)
        if self.resMsnInd is not None:
            resMsnInd = builder.CreateString(self.resMsnInd)
        if self.amcMsnNum is not None:
            amcMsnNum = builder.CreateString(self.amcMsnNum)
        if self.pkgId is not None:
            pkgId = builder.CreateString(self.pkgId)
        if self.msnCommander is not None:
            msnCommander = builder.CreateString(self.msnCommander)
        if self.msnNum is not None:
            msnNum = builder.CreateString(self.msnNum)
        if self.priMsnType is not None:
            priMsnType = builder.CreateString(self.priMsnType)
        if self.secMsnType is not None:
            secMsnType = builder.CreateString(self.secMsnType)
        if self.depLocName is not None:
            depLocName = builder.CreateString(self.depLocName)
        if self.depLocUtm is not None:
            depLocUtm = builder.CreateString(self.depLocUtm)
        if self.depTime is not None:
            depTime = builder.CreateString(self.depTime)
        if self.rcvyLocName is not None:
            rcvyLocNamelist = []
            for i in range(len(self.rcvyLocName)):
                rcvyLocNamelist.append(builder.CreateString(self.rcvyLocName[i]))
            AircraftMissionTasking_AbridgedStartRcvyLocNameVector(builder, len(self.rcvyLocName))
            for i in reversed(range(len(self.rcvyLocName))):
                builder.PrependUOffsetTRelative(rcvyLocNamelist[i])
            rcvyLocName = builder.EndVector()
        if self.rcvyLocUtm is not None:
            rcvyLocUtmlist = []
            for i in range(len(self.rcvyLocUtm)):
                rcvyLocUtmlist.append(builder.CreateString(self.rcvyLocUtm[i]))
            AircraftMissionTasking_AbridgedStartRcvyLocUtmVector(builder, len(self.rcvyLocUtm))
            for i in reversed(range(len(self.rcvyLocUtm))):
                builder.PrependUOffsetTRelative(rcvyLocUtmlist[i])
            rcvyLocUtm = builder.EndVector()
        if self.rcvyLocLat is not None:
            rcvyLocLatlist = []
            for i in range(len(self.rcvyLocLat)):
                rcvyLocLatlist.append(builder.CreateString(self.rcvyLocLat[i]))
            AircraftMissionTasking_AbridgedStartRcvyLocLatVector(builder, len(self.rcvyLocLat))
            for i in reversed(range(len(self.rcvyLocLat))):
                builder.PrependUOffsetTRelative(rcvyLocLatlist[i])
            rcvyLocLat = builder.EndVector()
        if self.rcvyLocLon is not None:
            rcvyLocLonlist = []
            for i in range(len(self.rcvyLocLon)):
                rcvyLocLonlist.append(builder.CreateString(self.rcvyLocLon[i]))
            AircraftMissionTasking_AbridgedStartRcvyLocLonVector(builder, len(self.rcvyLocLon))
            for i in reversed(range(len(self.rcvyLocLon))):
                builder.PrependUOffsetTRelative(rcvyLocLonlist[i])
            rcvyLocLon = builder.EndVector()
        if self.rcvyTime is not None:
            rcvyTimelist = []
            for i in range(len(self.rcvyTime)):
                rcvyTimelist.append(builder.CreateString(self.rcvyTime[i]))
            AircraftMissionTasking_AbridgedStartRcvyTimeVector(builder, len(self.rcvyTime))
            for i in reversed(range(len(self.rcvyTime))):
                builder.PrependUOffsetTRelative(rcvyTimelist[i])
            rcvyTime = builder.EndVector()
        if self.indActasking is not None:
            indActaskinglist = []
            for i in range(len(self.indActasking)):
                indActaskinglist.append(builder.CreateString(self.indActasking[i]))
            AircraftMissionTasking_AbridgedStartIndActaskingVector(builder, len(self.indActasking))
            for i in reversed(range(len(self.indActasking))):
                builder.PrependUOffsetTRelative(indActaskinglist[i])
            indActasking = builder.EndVector()
        if self.acMsnLocSeg is not None:
            acMsnLocSeglist = []
            for i in range(len(self.acMsnLocSeg)):
                acMsnLocSeglist.append(builder.CreateString(self.acMsnLocSeg[i]))
            AircraftMissionTasking_AbridgedStartAcMsnLocSegVector(builder, len(self.acMsnLocSeg))
            for i in reversed(range(len(self.acMsnLocSeg))):
                builder.PrependUOffsetTRelative(acMsnLocSeglist[i])
            acMsnLocSeg = builder.EndVector()
        AircraftMissionTasking_AbridgedStart(builder)
        if self.countryCode is not None:
            AircraftMissionTasking_AbridgedAddCountryCode(builder, countryCode)
        if self.taskedService is not None:
            AircraftMissionTasking_AbridgedAddTaskedService(builder, taskedService)
        if self.unitDesignator is not None:
            AircraftMissionTasking_AbridgedAddUnitDesignator(builder, unitDesignator)
        if self.unitLocName is not None:
            AircraftMissionTasking_AbridgedAddUnitLocName(builder, unitLocName)
        if self.resMsnInd is not None:
            AircraftMissionTasking_AbridgedAddResMsnInd(builder, resMsnInd)
        if self.amcMsnNum is not None:
            AircraftMissionTasking_AbridgedAddAmcMsnNum(builder, amcMsnNum)
        if self.pkgId is not None:
            AircraftMissionTasking_AbridgedAddPkgId(builder, pkgId)
        if self.msnCommander is not None:
            AircraftMissionTasking_AbridgedAddMsnCommander(builder, msnCommander)
        if self.msnNum is not None:
            AircraftMissionTasking_AbridgedAddMsnNum(builder, msnNum)
        if self.priMsnType is not None:
            AircraftMissionTasking_AbridgedAddPriMsnType(builder, priMsnType)
        if self.secMsnType is not None:
            AircraftMissionTasking_AbridgedAddSecMsnType(builder, secMsnType)
        AircraftMissionTasking_AbridgedAddAlertStatus(builder, self.alertStatus)
        if self.depLocName is not None:
            AircraftMissionTasking_AbridgedAddDepLocName(builder, depLocName)
        if self.depLocUtm is not None:
            AircraftMissionTasking_AbridgedAddDepLocUtm(builder, depLocUtm)
        AircraftMissionTasking_AbridgedAddDepLocLat(builder, self.depLocLat)
        AircraftMissionTasking_AbridgedAddDepLocLon(builder, self.depLocLon)
        if self.depTime is not None:
            AircraftMissionTasking_AbridgedAddDepTime(builder, depTime)
        if self.rcvyLocName is not None:
            AircraftMissionTasking_AbridgedAddRcvyLocName(builder, rcvyLocName)
        if self.rcvyLocUtm is not None:
            AircraftMissionTasking_AbridgedAddRcvyLocUtm(builder, rcvyLocUtm)
        if self.rcvyLocLat is not None:
            AircraftMissionTasking_AbridgedAddRcvyLocLat(builder, rcvyLocLat)
        if self.rcvyLocLon is not None:
            AircraftMissionTasking_AbridgedAddRcvyLocLon(builder, rcvyLocLon)
        if self.rcvyTime is not None:
            AircraftMissionTasking_AbridgedAddRcvyTime(builder, rcvyTime)
        if self.indActasking is not None:
            AircraftMissionTasking_AbridgedAddIndActasking(builder, indActasking)
        if self.acMsnLocSeg is not None:
            AircraftMissionTasking_AbridgedAddAcMsnLocSeg(builder, acMsnLocSeg)
        aircraftMissionTaskingAbridged = AircraftMissionTasking_AbridgedEnd(builder)
        return aircraftMissionTaskingAbridged
