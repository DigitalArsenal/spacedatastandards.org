# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
class PassiveRadarObservation_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PassiveRadarObservation_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPassiveRadarObservation_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PassiveRadarObservation_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x41\x53\x53", size_prefixed=size_prefixed)

    # PassiveRadarObservation_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
    # Constraints: Minimum length = 1, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # PassiveRadarObservation_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2023-01-24T23:35:26.518152Z
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    # Example: /// Example: 40699
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 40699
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    # Example: /// Example: OCULUSA
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    # Example: /// Example: RED_CLIFFS_3ABCRN
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def IdRfemitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
    # Example: /// Example: OculusRef1
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def IdSensorRefReceiver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional external observation identifier provided by the source.
    # Example: /// Example: 26892
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def ExtObservationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of a track that represents a tracklet for this observation.
    # Example: /// Example: 12212
    # Constraints: Minimum length = 0, Maximum length = 36
    # PassiveRadarObservation_Abridged
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    # Example: /// Example: FIRST
    # Constraints: Minimum length = 0, Maximum length = 8
    # PassiveRadarObservation_Abridged
    def ObPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Line of sight azimuth angle in degrees and topocentric frame.
    # Example: /// Example: 134.5
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def AzimuthUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor azimuth angle bias in degrees.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def AzimuthBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight azimuth in degrees per second.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def AzimuthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight elevation in degrees and topocentric frame.
    # Example: /// Example: 76.1
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def ElevationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor elevation bias in degrees.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def ElevationBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight elevation in degrees per second.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def ElevationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
    # Example: /// Example: 0.00505820232809312
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the delay measurement, in seconds.
    # Example: /// Example: 3.1e-06
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def DelayUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Delay bias in seconds.
    # Example: /// Example: 1.23e-06
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def DelayBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
    # Example: /// Example: 754.8212
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in bistatic range in kilometers.
    # Example: /// Example: 5.1
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor bistatic range bias in kilometers.
    # Example: /// Example: 2.34
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRangeBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the bistatic path in kilometers/sec.
    # Example: /// Example: -0.30222
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bistatic range acceleration in kilometers/sec^2.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRangeAccel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def BistaticRangeAccelUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Doppler measurement in hertz.
    # Example: /// Example: -101.781641000597
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Doppler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the Doppler measurement in hertz.
    # Example: /// Example: 0.2
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def DopplerUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Coning angle in degrees.
    # Example: /// Example: 60.1
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Coning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the coning angle measurement, in degrees.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def ConingUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
    # Example: /// Example: 0.00592856674135648
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Tof(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in time of flight in seconds.
    # Example: /// Example: 3.1e-06
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def TofUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Time of Flight (TOF) bias in seconds.
    # Example: /// Example: 1.23e-06
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def TofBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The target Acceleration measurement in kilometers/sec^2 for this observation.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Accel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def AccelUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight right ascension in degrees and J2000 coordinate frame.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Ra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight declination angle in degrees and J2000 coordinate frame.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Declination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: -35.1181763996856
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 139.613567052763
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
    # Example: /// Example: 478.056378
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # X velocity of target in kilometers/sec in J2000 coordinate frame.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Xvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Y velocity of target in kilometers/sec in J2000 coordinate frame.
    # Example: /// Example: 3.21
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Yvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Z velocity of target in kilometers/sec in J2000 coordinate frame.
    # Example: /// Example: 3.12
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Zvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radar cross section in meters squared for polarization principal.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Rcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def RcsUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radar cross section in meters squared for orthogonal polarization.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def OrthogonalRcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def OrthogonalRcsUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 17.292053
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor timing bias in seconds.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def TimingBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # PassiveRadarObservation_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # PassiveRadarObservation_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # PassiveRadarObservation_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    # Example: /// Example: RADAR
    # Constraints: No constraints specified.
    # PassiveRadarObservation_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PassiveRadarObservation_AbridgedStart(builder):
    builder.StartObject(66)

def Start(builder):
    PassiveRadarObservation_AbridgedStart(builder)

def PassiveRadarObservation_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    PassiveRadarObservation_AbridgedAddId(builder, id)

def PassiveRadarObservation_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    PassiveRadarObservation_AbridgedAddClassificationMarking(builder, classificationMarking)

def PassiveRadarObservation_AbridgedAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    PassiveRadarObservation_AbridgedAddObTime(builder, obTime)

def PassiveRadarObservation_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    PassiveRadarObservation_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def PassiveRadarObservation_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(4, satNo, 0)

def AddSatNo(builder, satNo):
    PassiveRadarObservation_AbridgedAddSatNo(builder, satNo)

def PassiveRadarObservation_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    PassiveRadarObservation_AbridgedAddOrigObjectId(builder, origObjectId)

def PassiveRadarObservation_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    PassiveRadarObservation_AbridgedAddIdSensor(builder, idSensor)

def PassiveRadarObservation_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    PassiveRadarObservation_AbridgedAddOrigSensorId(builder, origSensorId)

def PassiveRadarObservation_AbridgedAddIdRfemitter(builder, idRfemitter):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(idRfemitter), 0)

def AddIdRfemitter(builder, idRfemitter):
    PassiveRadarObservation_AbridgedAddIdRfemitter(builder, idRfemitter)

def PassiveRadarObservation_AbridgedAddIdSensorRefReceiver(builder, idSensorRefReceiver):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(idSensorRefReceiver), 0)

def AddIdSensorRefReceiver(builder, idSensorRefReceiver):
    PassiveRadarObservation_AbridgedAddIdSensorRefReceiver(builder, idSensorRefReceiver)

def PassiveRadarObservation_AbridgedAddExtObservationId(builder, extObservationId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(extObservationId), 0)

def AddExtObservationId(builder, extObservationId):
    PassiveRadarObservation_AbridgedAddExtObservationId(builder, extObservationId)

def PassiveRadarObservation_AbridgedAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    PassiveRadarObservation_AbridgedAddTaskId(builder, taskId)

def PassiveRadarObservation_AbridgedAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    PassiveRadarObservation_AbridgedAddTrackId(builder, trackId)

def PassiveRadarObservation_AbridgedAddObPosition(builder, obPosition):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(obPosition), 0)

def AddObPosition(builder, obPosition):
    PassiveRadarObservation_AbridgedAddObPosition(builder, obPosition)

def PassiveRadarObservation_AbridgedAddUct(builder, uct):
    builder.PrependBoolSlot(14, uct, 0)

def AddUct(builder, uct):
    PassiveRadarObservation_AbridgedAddUct(builder, uct)

def PassiveRadarObservation_AbridgedAddAzimuth(builder, azimuth):
    builder.PrependFloat64Slot(15, azimuth, 0.0)

def AddAzimuth(builder, azimuth):
    PassiveRadarObservation_AbridgedAddAzimuth(builder, azimuth)

def PassiveRadarObservation_AbridgedAddAzimuthUnc(builder, azimuthUnc):
    builder.PrependFloat64Slot(16, azimuthUnc, 0.0)

def AddAzimuthUnc(builder, azimuthUnc):
    PassiveRadarObservation_AbridgedAddAzimuthUnc(builder, azimuthUnc)

def PassiveRadarObservation_AbridgedAddAzimuthBias(builder, azimuthBias):
    builder.PrependFloat64Slot(17, azimuthBias, 0.0)

def AddAzimuthBias(builder, azimuthBias):
    PassiveRadarObservation_AbridgedAddAzimuthBias(builder, azimuthBias)

def PassiveRadarObservation_AbridgedAddAzimuthRate(builder, azimuthRate):
    builder.PrependFloat64Slot(18, azimuthRate, 0.0)

def AddAzimuthRate(builder, azimuthRate):
    PassiveRadarObservation_AbridgedAddAzimuthRate(builder, azimuthRate)

def PassiveRadarObservation_AbridgedAddElevation(builder, elevation):
    builder.PrependFloat64Slot(19, elevation, 0.0)

def AddElevation(builder, elevation):
    PassiveRadarObservation_AbridgedAddElevation(builder, elevation)

def PassiveRadarObservation_AbridgedAddElevationUnc(builder, elevationUnc):
    builder.PrependFloat64Slot(20, elevationUnc, 0.0)

def AddElevationUnc(builder, elevationUnc):
    PassiveRadarObservation_AbridgedAddElevationUnc(builder, elevationUnc)

def PassiveRadarObservation_AbridgedAddElevationBias(builder, elevationBias):
    builder.PrependFloat64Slot(21, elevationBias, 0.0)

def AddElevationBias(builder, elevationBias):
    PassiveRadarObservation_AbridgedAddElevationBias(builder, elevationBias)

def PassiveRadarObservation_AbridgedAddElevationRate(builder, elevationRate):
    builder.PrependFloat64Slot(22, elevationRate, 0.0)

def AddElevationRate(builder, elevationRate):
    PassiveRadarObservation_AbridgedAddElevationRate(builder, elevationRate)

def PassiveRadarObservation_AbridgedAddDelay(builder, delay):
    builder.PrependFloat64Slot(23, delay, 0.0)

def AddDelay(builder, delay):
    PassiveRadarObservation_AbridgedAddDelay(builder, delay)

def PassiveRadarObservation_AbridgedAddDelayUnc(builder, delayUnc):
    builder.PrependFloat64Slot(24, delayUnc, 0.0)

def AddDelayUnc(builder, delayUnc):
    PassiveRadarObservation_AbridgedAddDelayUnc(builder, delayUnc)

def PassiveRadarObservation_AbridgedAddDelayBias(builder, delayBias):
    builder.PrependFloat64Slot(25, delayBias, 0.0)

def AddDelayBias(builder, delayBias):
    PassiveRadarObservation_AbridgedAddDelayBias(builder, delayBias)

def PassiveRadarObservation_AbridgedAddBistaticRange(builder, bistaticRange):
    builder.PrependFloat64Slot(26, bistaticRange, 0.0)

def AddBistaticRange(builder, bistaticRange):
    PassiveRadarObservation_AbridgedAddBistaticRange(builder, bistaticRange)

def PassiveRadarObservation_AbridgedAddBistaticRangeUnc(builder, bistaticRangeUnc):
    builder.PrependFloat64Slot(27, bistaticRangeUnc, 0.0)

def AddBistaticRangeUnc(builder, bistaticRangeUnc):
    PassiveRadarObservation_AbridgedAddBistaticRangeUnc(builder, bistaticRangeUnc)

def PassiveRadarObservation_AbridgedAddBistaticRangeBias(builder, bistaticRangeBias):
    builder.PrependFloat64Slot(28, bistaticRangeBias, 0.0)

def AddBistaticRangeBias(builder, bistaticRangeBias):
    PassiveRadarObservation_AbridgedAddBistaticRangeBias(builder, bistaticRangeBias)

def PassiveRadarObservation_AbridgedAddBistaticRangeRate(builder, bistaticRangeRate):
    builder.PrependFloat64Slot(29, bistaticRangeRate, 0.0)

def AddBistaticRangeRate(builder, bistaticRangeRate):
    PassiveRadarObservation_AbridgedAddBistaticRangeRate(builder, bistaticRangeRate)

def PassiveRadarObservation_AbridgedAddBistaticRangeRateUnc(builder, bistaticRangeRateUnc):
    builder.PrependFloat64Slot(30, bistaticRangeRateUnc, 0.0)

def AddBistaticRangeRateUnc(builder, bistaticRangeRateUnc):
    PassiveRadarObservation_AbridgedAddBistaticRangeRateUnc(builder, bistaticRangeRateUnc)

def PassiveRadarObservation_AbridgedAddBistaticRangeAccel(builder, bistaticRangeAccel):
    builder.PrependFloat64Slot(31, bistaticRangeAccel, 0.0)

def AddBistaticRangeAccel(builder, bistaticRangeAccel):
    PassiveRadarObservation_AbridgedAddBistaticRangeAccel(builder, bistaticRangeAccel)

def PassiveRadarObservation_AbridgedAddBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc):
    builder.PrependFloat64Slot(32, bistaticRangeAccelUnc, 0.0)

def AddBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc):
    PassiveRadarObservation_AbridgedAddBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc)

def PassiveRadarObservation_AbridgedAddDoppler(builder, doppler):
    builder.PrependFloat64Slot(33, doppler, 0.0)

def AddDoppler(builder, doppler):
    PassiveRadarObservation_AbridgedAddDoppler(builder, doppler)

def PassiveRadarObservation_AbridgedAddDopplerUnc(builder, dopplerUnc):
    builder.PrependFloat64Slot(34, dopplerUnc, 0.0)

def AddDopplerUnc(builder, dopplerUnc):
    PassiveRadarObservation_AbridgedAddDopplerUnc(builder, dopplerUnc)

def PassiveRadarObservation_AbridgedAddConing(builder, coning):
    builder.PrependFloat64Slot(35, coning, 0.0)

def AddConing(builder, coning):
    PassiveRadarObservation_AbridgedAddConing(builder, coning)

def PassiveRadarObservation_AbridgedAddConingUnc(builder, coningUnc):
    builder.PrependFloat64Slot(36, coningUnc, 0.0)

def AddConingUnc(builder, coningUnc):
    PassiveRadarObservation_AbridgedAddConingUnc(builder, coningUnc)

def PassiveRadarObservation_AbridgedAddTof(builder, tof):
    builder.PrependFloat64Slot(37, tof, 0.0)

def AddTof(builder, tof):
    PassiveRadarObservation_AbridgedAddTof(builder, tof)

def PassiveRadarObservation_AbridgedAddTofUnc(builder, tofUnc):
    builder.PrependFloat64Slot(38, tofUnc, 0.0)

def AddTofUnc(builder, tofUnc):
    PassiveRadarObservation_AbridgedAddTofUnc(builder, tofUnc)

def PassiveRadarObservation_AbridgedAddTofBias(builder, tofBias):
    builder.PrependFloat64Slot(39, tofBias, 0.0)

def AddTofBias(builder, tofBias):
    PassiveRadarObservation_AbridgedAddTofBias(builder, tofBias)

def PassiveRadarObservation_AbridgedAddAccel(builder, accel):
    builder.PrependFloat64Slot(40, accel, 0.0)

def AddAccel(builder, accel):
    PassiveRadarObservation_AbridgedAddAccel(builder, accel)

def PassiveRadarObservation_AbridgedAddAccelUnc(builder, accelUnc):
    builder.PrependFloat64Slot(41, accelUnc, 0.0)

def AddAccelUnc(builder, accelUnc):
    PassiveRadarObservation_AbridgedAddAccelUnc(builder, accelUnc)

def PassiveRadarObservation_AbridgedAddRa(builder, ra):
    builder.PrependFloat64Slot(42, ra, 0.0)

def AddRa(builder, ra):
    PassiveRadarObservation_AbridgedAddRa(builder, ra)

def PassiveRadarObservation_AbridgedAddDeclination(builder, declination):
    builder.PrependFloat64Slot(43, declination, 0.0)

def AddDeclination(builder, declination):
    PassiveRadarObservation_AbridgedAddDeclination(builder, declination)

def PassiveRadarObservation_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(44, lat, 0.0)

def AddLat(builder, lat):
    PassiveRadarObservation_AbridgedAddLat(builder, lat)

def PassiveRadarObservation_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(45, lon, 0.0)

def AddLon(builder, lon):
    PassiveRadarObservation_AbridgedAddLon(builder, lon)

def PassiveRadarObservation_AbridgedAddAlt(builder, alt):
    builder.PrependFloat64Slot(46, alt, 0.0)

def AddAlt(builder, alt):
    PassiveRadarObservation_AbridgedAddAlt(builder, alt)

def PassiveRadarObservation_AbridgedAddXvel(builder, xvel):
    builder.PrependFloat64Slot(47, xvel, 0.0)

def AddXvel(builder, xvel):
    PassiveRadarObservation_AbridgedAddXvel(builder, xvel)

def PassiveRadarObservation_AbridgedAddYvel(builder, yvel):
    builder.PrependFloat64Slot(48, yvel, 0.0)

def AddYvel(builder, yvel):
    PassiveRadarObservation_AbridgedAddYvel(builder, yvel)

def PassiveRadarObservation_AbridgedAddZvel(builder, zvel):
    builder.PrependFloat64Slot(49, zvel, 0.0)

def AddZvel(builder, zvel):
    PassiveRadarObservation_AbridgedAddZvel(builder, zvel)

def PassiveRadarObservation_AbridgedAddRcs(builder, rcs):
    builder.PrependFloat64Slot(50, rcs, 0.0)

def AddRcs(builder, rcs):
    PassiveRadarObservation_AbridgedAddRcs(builder, rcs)

def PassiveRadarObservation_AbridgedAddRcsUnc(builder, rcsUnc):
    builder.PrependFloat64Slot(51, rcsUnc, 0.0)

def AddRcsUnc(builder, rcsUnc):
    PassiveRadarObservation_AbridgedAddRcsUnc(builder, rcsUnc)

def PassiveRadarObservation_AbridgedAddOrthogonalRcs(builder, orthogonalRcs):
    builder.PrependFloat64Slot(52, orthogonalRcs, 0.0)

def AddOrthogonalRcs(builder, orthogonalRcs):
    PassiveRadarObservation_AbridgedAddOrthogonalRcs(builder, orthogonalRcs)

def PassiveRadarObservation_AbridgedAddOrthogonalRcsUnc(builder, orthogonalRcsUnc):
    builder.PrependFloat64Slot(53, orthogonalRcsUnc, 0.0)

def AddOrthogonalRcsUnc(builder, orthogonalRcsUnc):
    PassiveRadarObservation_AbridgedAddOrthogonalRcsUnc(builder, orthogonalRcsUnc)

def PassiveRadarObservation_AbridgedAddSnr(builder, snr):
    builder.PrependFloat64Slot(54, snr, 0.0)

def AddSnr(builder, snr):
    PassiveRadarObservation_AbridgedAddSnr(builder, snr)

def PassiveRadarObservation_AbridgedAddTimingBias(builder, timingBias):
    builder.PrependFloat64Slot(55, timingBias, 0.0)

def AddTimingBias(builder, timingBias):
    PassiveRadarObservation_AbridgedAddTimingBias(builder, timingBias)

def PassiveRadarObservation_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    PassiveRadarObservation_AbridgedAddTransactionId(builder, transactionId)

def PassiveRadarObservation_AbridgedAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    PassiveRadarObservation_AbridgedAddDescriptor(builder, descriptor)

def PassiveRadarObservation_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    PassiveRadarObservation_AbridgedAddCreatedAt(builder, createdAt)

def PassiveRadarObservation_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    PassiveRadarObservation_AbridgedAddCreatedBy(builder, createdBy)

def PassiveRadarObservation_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    PassiveRadarObservation_AbridgedAddSource(builder, source)

def PassiveRadarObservation_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    PassiveRadarObservation_AbridgedAddOrigin(builder, origin)

def PassiveRadarObservation_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    PassiveRadarObservation_AbridgedAddOrigNetwork(builder, origNetwork)

def PassiveRadarObservation_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    PassiveRadarObservation_AbridgedAddSourceDl(builder, sourceDl)

def PassiveRadarObservation_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(64, dataMode, 0)

def AddDataMode(builder, dataMode):
    PassiveRadarObservation_AbridgedAddDataMode(builder, dataMode)

def PassiveRadarObservation_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    PassiveRadarObservation_AbridgedAddType(builder, type)

def PassiveRadarObservation_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return PassiveRadarObservation_AbridgedEnd(builder)


class PassiveRadarObservation_AbridgedT(object):

    # PassiveRadarObservation_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.idRfemitter = None  # type: str
        self.idSensorRefReceiver = None  # type: str
        self.extObservationId = None  # type: str
        self.taskId = None  # type: str
        self.trackId = None  # type: str
        self.obPosition = None  # type: str
        self.uct = False  # type: bool
        self.azimuth = 0.0  # type: float
        self.azimuthUnc = 0.0  # type: float
        self.azimuthBias = 0.0  # type: float
        self.azimuthRate = 0.0  # type: float
        self.elevation = 0.0  # type: float
        self.elevationUnc = 0.0  # type: float
        self.elevationBias = 0.0  # type: float
        self.elevationRate = 0.0  # type: float
        self.delay = 0.0  # type: float
        self.delayUnc = 0.0  # type: float
        self.delayBias = 0.0  # type: float
        self.bistaticRange = 0.0  # type: float
        self.bistaticRangeUnc = 0.0  # type: float
        self.bistaticRangeBias = 0.0  # type: float
        self.bistaticRangeRate = 0.0  # type: float
        self.bistaticRangeRateUnc = 0.0  # type: float
        self.bistaticRangeAccel = 0.0  # type: float
        self.bistaticRangeAccelUnc = 0.0  # type: float
        self.doppler = 0.0  # type: float
        self.dopplerUnc = 0.0  # type: float
        self.coning = 0.0  # type: float
        self.coningUnc = 0.0  # type: float
        self.tof = 0.0  # type: float
        self.tofUnc = 0.0  # type: float
        self.tofBias = 0.0  # type: float
        self.accel = 0.0  # type: float
        self.accelUnc = 0.0  # type: float
        self.ra = 0.0  # type: float
        self.declination = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.xvel = 0.0  # type: float
        self.yvel = 0.0  # type: float
        self.zvel = 0.0  # type: float
        self.rcs = 0.0  # type: float
        self.rcsUnc = 0.0  # type: float
        self.orthogonalRcs = 0.0  # type: float
        self.orthogonalRcsUnc = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.timingBias = 0.0  # type: float
        self.transactionId = None  # type: str
        self.descriptor = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int
        self.type = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        passiveRadarObservationAbridged = PassiveRadarObservation_Abridged()
        passiveRadarObservationAbridged.Init(buf, pos)
        return cls.InitFromObj(passiveRadarObservationAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, passiveRadarObservationAbridged):
        x = PassiveRadarObservation_AbridgedT()
        x._UnPack(passiveRadarObservationAbridged)
        return x

    # PassiveRadarObservation_AbridgedT
    def _UnPack(self, passiveRadarObservationAbridged):
        if passiveRadarObservationAbridged is None:
            return
        self.id = passiveRadarObservationAbridged.Id()
        self.classificationMarking = passiveRadarObservationAbridged.ClassificationMarking()
        self.obTime = passiveRadarObservationAbridged.ObTime()
        self.idOnOrbit = passiveRadarObservationAbridged.IdOnOrbit()
        self.satNo = passiveRadarObservationAbridged.SatNo()
        self.origObjectId = passiveRadarObservationAbridged.OrigObjectId()
        self.idSensor = passiveRadarObservationAbridged.IdSensor()
        self.origSensorId = passiveRadarObservationAbridged.OrigSensorId()
        self.idRfemitter = passiveRadarObservationAbridged.IdRfemitter()
        self.idSensorRefReceiver = passiveRadarObservationAbridged.IdSensorRefReceiver()
        self.extObservationId = passiveRadarObservationAbridged.ExtObservationId()
        self.taskId = passiveRadarObservationAbridged.TaskId()
        self.trackId = passiveRadarObservationAbridged.TrackId()
        self.obPosition = passiveRadarObservationAbridged.ObPosition()
        self.uct = passiveRadarObservationAbridged.Uct()
        self.azimuth = passiveRadarObservationAbridged.Azimuth()
        self.azimuthUnc = passiveRadarObservationAbridged.AzimuthUnc()
        self.azimuthBias = passiveRadarObservationAbridged.AzimuthBias()
        self.azimuthRate = passiveRadarObservationAbridged.AzimuthRate()
        self.elevation = passiveRadarObservationAbridged.Elevation()
        self.elevationUnc = passiveRadarObservationAbridged.ElevationUnc()
        self.elevationBias = passiveRadarObservationAbridged.ElevationBias()
        self.elevationRate = passiveRadarObservationAbridged.ElevationRate()
        self.delay = passiveRadarObservationAbridged.Delay()
        self.delayUnc = passiveRadarObservationAbridged.DelayUnc()
        self.delayBias = passiveRadarObservationAbridged.DelayBias()
        self.bistaticRange = passiveRadarObservationAbridged.BistaticRange()
        self.bistaticRangeUnc = passiveRadarObservationAbridged.BistaticRangeUnc()
        self.bistaticRangeBias = passiveRadarObservationAbridged.BistaticRangeBias()
        self.bistaticRangeRate = passiveRadarObservationAbridged.BistaticRangeRate()
        self.bistaticRangeRateUnc = passiveRadarObservationAbridged.BistaticRangeRateUnc()
        self.bistaticRangeAccel = passiveRadarObservationAbridged.BistaticRangeAccel()
        self.bistaticRangeAccelUnc = passiveRadarObservationAbridged.BistaticRangeAccelUnc()
        self.doppler = passiveRadarObservationAbridged.Doppler()
        self.dopplerUnc = passiveRadarObservationAbridged.DopplerUnc()
        self.coning = passiveRadarObservationAbridged.Coning()
        self.coningUnc = passiveRadarObservationAbridged.ConingUnc()
        self.tof = passiveRadarObservationAbridged.Tof()
        self.tofUnc = passiveRadarObservationAbridged.TofUnc()
        self.tofBias = passiveRadarObservationAbridged.TofBias()
        self.accel = passiveRadarObservationAbridged.Accel()
        self.accelUnc = passiveRadarObservationAbridged.AccelUnc()
        self.ra = passiveRadarObservationAbridged.Ra()
        self.declination = passiveRadarObservationAbridged.Declination()
        self.lat = passiveRadarObservationAbridged.Lat()
        self.lon = passiveRadarObservationAbridged.Lon()
        self.alt = passiveRadarObservationAbridged.Alt()
        self.xvel = passiveRadarObservationAbridged.Xvel()
        self.yvel = passiveRadarObservationAbridged.Yvel()
        self.zvel = passiveRadarObservationAbridged.Zvel()
        self.rcs = passiveRadarObservationAbridged.Rcs()
        self.rcsUnc = passiveRadarObservationAbridged.RcsUnc()
        self.orthogonalRcs = passiveRadarObservationAbridged.OrthogonalRcs()
        self.orthogonalRcsUnc = passiveRadarObservationAbridged.OrthogonalRcsUnc()
        self.snr = passiveRadarObservationAbridged.Snr()
        self.timingBias = passiveRadarObservationAbridged.TimingBias()
        self.transactionId = passiveRadarObservationAbridged.TransactionId()
        self.descriptor = passiveRadarObservationAbridged.Descriptor()
        self.createdAt = passiveRadarObservationAbridged.CreatedAt()
        self.createdBy = passiveRadarObservationAbridged.CreatedBy()
        self.source = passiveRadarObservationAbridged.Source()
        self.origin = passiveRadarObservationAbridged.Origin()
        self.origNetwork = passiveRadarObservationAbridged.OrigNetwork()
        self.sourceDl = passiveRadarObservationAbridged.SourceDl()
        self.dataMode = passiveRadarObservationAbridged.DataMode()
        self.type = passiveRadarObservationAbridged.Type()

    # PassiveRadarObservation_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.idRfemitter is not None:
            idRfemitter = builder.CreateString(self.idRfemitter)
        if self.idSensorRefReceiver is not None:
            idSensorRefReceiver = builder.CreateString(self.idSensorRefReceiver)
        if self.extObservationId is not None:
            extObservationId = builder.CreateString(self.extObservationId)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.obPosition is not None:
            obPosition = builder.CreateString(self.obPosition)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.type is not None:
            type = builder.CreateString(self.type)
        PassiveRadarObservation_AbridgedStart(builder)
        if self.id is not None:
            PassiveRadarObservation_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            PassiveRadarObservation_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            PassiveRadarObservation_AbridgedAddObTime(builder, obTime)
        if self.idOnOrbit is not None:
            PassiveRadarObservation_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        PassiveRadarObservation_AbridgedAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            PassiveRadarObservation_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.idSensor is not None:
            PassiveRadarObservation_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            PassiveRadarObservation_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.idRfemitter is not None:
            PassiveRadarObservation_AbridgedAddIdRfemitter(builder, idRfemitter)
        if self.idSensorRefReceiver is not None:
            PassiveRadarObservation_AbridgedAddIdSensorRefReceiver(builder, idSensorRefReceiver)
        if self.extObservationId is not None:
            PassiveRadarObservation_AbridgedAddExtObservationId(builder, extObservationId)
        if self.taskId is not None:
            PassiveRadarObservation_AbridgedAddTaskId(builder, taskId)
        if self.trackId is not None:
            PassiveRadarObservation_AbridgedAddTrackId(builder, trackId)
        if self.obPosition is not None:
            PassiveRadarObservation_AbridgedAddObPosition(builder, obPosition)
        PassiveRadarObservation_AbridgedAddUct(builder, self.uct)
        PassiveRadarObservation_AbridgedAddAzimuth(builder, self.azimuth)
        PassiveRadarObservation_AbridgedAddAzimuthUnc(builder, self.azimuthUnc)
        PassiveRadarObservation_AbridgedAddAzimuthBias(builder, self.azimuthBias)
        PassiveRadarObservation_AbridgedAddAzimuthRate(builder, self.azimuthRate)
        PassiveRadarObservation_AbridgedAddElevation(builder, self.elevation)
        PassiveRadarObservation_AbridgedAddElevationUnc(builder, self.elevationUnc)
        PassiveRadarObservation_AbridgedAddElevationBias(builder, self.elevationBias)
        PassiveRadarObservation_AbridgedAddElevationRate(builder, self.elevationRate)
        PassiveRadarObservation_AbridgedAddDelay(builder, self.delay)
        PassiveRadarObservation_AbridgedAddDelayUnc(builder, self.delayUnc)
        PassiveRadarObservation_AbridgedAddDelayBias(builder, self.delayBias)
        PassiveRadarObservation_AbridgedAddBistaticRange(builder, self.bistaticRange)
        PassiveRadarObservation_AbridgedAddBistaticRangeUnc(builder, self.bistaticRangeUnc)
        PassiveRadarObservation_AbridgedAddBistaticRangeBias(builder, self.bistaticRangeBias)
        PassiveRadarObservation_AbridgedAddBistaticRangeRate(builder, self.bistaticRangeRate)
        PassiveRadarObservation_AbridgedAddBistaticRangeRateUnc(builder, self.bistaticRangeRateUnc)
        PassiveRadarObservation_AbridgedAddBistaticRangeAccel(builder, self.bistaticRangeAccel)
        PassiveRadarObservation_AbridgedAddBistaticRangeAccelUnc(builder, self.bistaticRangeAccelUnc)
        PassiveRadarObservation_AbridgedAddDoppler(builder, self.doppler)
        PassiveRadarObservation_AbridgedAddDopplerUnc(builder, self.dopplerUnc)
        PassiveRadarObservation_AbridgedAddConing(builder, self.coning)
        PassiveRadarObservation_AbridgedAddConingUnc(builder, self.coningUnc)
        PassiveRadarObservation_AbridgedAddTof(builder, self.tof)
        PassiveRadarObservation_AbridgedAddTofUnc(builder, self.tofUnc)
        PassiveRadarObservation_AbridgedAddTofBias(builder, self.tofBias)
        PassiveRadarObservation_AbridgedAddAccel(builder, self.accel)
        PassiveRadarObservation_AbridgedAddAccelUnc(builder, self.accelUnc)
        PassiveRadarObservation_AbridgedAddRa(builder, self.ra)
        PassiveRadarObservation_AbridgedAddDeclination(builder, self.declination)
        PassiveRadarObservation_AbridgedAddLat(builder, self.lat)
        PassiveRadarObservation_AbridgedAddLon(builder, self.lon)
        PassiveRadarObservation_AbridgedAddAlt(builder, self.alt)
        PassiveRadarObservation_AbridgedAddXvel(builder, self.xvel)
        PassiveRadarObservation_AbridgedAddYvel(builder, self.yvel)
        PassiveRadarObservation_AbridgedAddZvel(builder, self.zvel)
        PassiveRadarObservation_AbridgedAddRcs(builder, self.rcs)
        PassiveRadarObservation_AbridgedAddRcsUnc(builder, self.rcsUnc)
        PassiveRadarObservation_AbridgedAddOrthogonalRcs(builder, self.orthogonalRcs)
        PassiveRadarObservation_AbridgedAddOrthogonalRcsUnc(builder, self.orthogonalRcsUnc)
        PassiveRadarObservation_AbridgedAddSnr(builder, self.snr)
        PassiveRadarObservation_AbridgedAddTimingBias(builder, self.timingBias)
        if self.transactionId is not None:
            PassiveRadarObservation_AbridgedAddTransactionId(builder, transactionId)
        if self.descriptor is not None:
            PassiveRadarObservation_AbridgedAddDescriptor(builder, descriptor)
        if self.createdAt is not None:
            PassiveRadarObservation_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            PassiveRadarObservation_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            PassiveRadarObservation_AbridgedAddSource(builder, source)
        if self.origin is not None:
            PassiveRadarObservation_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            PassiveRadarObservation_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            PassiveRadarObservation_AbridgedAddSourceDl(builder, sourceDl)
        PassiveRadarObservation_AbridgedAddDataMode(builder, self.dataMode)
        if self.type is not None:
            PassiveRadarObservation_AbridgedAddType(builder, type)
        passiveRadarObservationAbridged = PassiveRadarObservation_AbridgedEnd(builder)
        return passiveRadarObservationAbridged
