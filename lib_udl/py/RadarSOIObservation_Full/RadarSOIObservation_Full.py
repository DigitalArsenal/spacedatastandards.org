# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
class RadarSOIObservation_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RadarSOIObservation_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRadarSOIObservation_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RadarSOIObservation_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x41\x44\x41", size_prefixed=size_prefixed)

    # RadarSOIObservation_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Observation detection start time in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.888456Z
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def ObStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of the times of validity in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Tovs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def TovsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def TovsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
    # Example: /// Example: [0.006, 0.006, 0.006]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Rspaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def RspacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def RspacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
    # Example: /// Example: [0.006, 0.006, 0.006]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Xspaces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def XspacesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def XspacesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
    # Example: /// Example: [5644.27, 5644.27, 5644.27]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Doppler2Xrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def Doppler2XrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def Doppler2XrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
    # Example: /// Example: [0.005, 0.005, 0.005]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def DeltaTimes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def DeltaTimesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def DeltaTimesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
    # Example: /// Example: [4.278, 4.278, 4.278]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def AspectAngles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def AspectAnglesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def AspectAnglesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
    # Example: /// Example: [0.166, 0.166, 0.166]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def ProjAngVels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def ProjAngVelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def ProjAngVelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Optional id of assumed StateVector of object being observed.
    # Example: /// Example: 99a0de63-b38f-4d81-b057
    # Constraints: Minimum length = 0, Maximum length = 36
    # RadarSOIObservation_Full
    def IdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional id of assumed AttitudeSet of object being observed.
    # Example: /// Example: 99a0de63-b38f-4d81-b057
    # Constraints: Minimum length = 0, Maximum length = 36
    # RadarSOIObservation_Full
    def IdAttitudeSet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
    # Example: /// Example: [877.938, 877.938, 877.938]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Ranges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def RangesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def RangesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
    # Example: /// Example: [278.27, 278.27, 278.27]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Azimuths(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def AzimuthsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def AzimuthsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
    # Example: /// Example: [70.85, 70.85, 70.85]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Elevations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def ElevationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def ElevationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
    # Example: /// Example: [0.317, 0.317, 0.317]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def RangeRates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def RangeRatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def RangeRatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
    # Example: /// Example: [-1.481, -1.481, -1.481]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def AzimuthRates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def AzimuthRatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def AzimuthRatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
    # Example: /// Example: [-0.074, -0.074, -0.074]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def ElevationRates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def ElevationRatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def ElevationRatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
    # Example: /// Example: [45.23, 45.23, 45.23]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def AzimuthBiases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def AzimuthBiasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def AzimuthBiasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
    # Example: /// Example: [1.23, 1.23, 1.23]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def ElevationBiases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def ElevationBiasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def ElevationBiasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
    # Example: /// Example: [1.23, 1.23, 1.23]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def RangeBiases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def RangeBiasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def RangeBiasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
    # Example: /// Example: [8.594, 8.594, 8.594]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def IntegrationAngles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def IntegrationAnglesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def IntegrationAnglesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
    # Example: /// Example: [11.301, 11.301, 11.301]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def CrossRangeRes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def CrossRangeResLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def CrossRangeResIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Beta angle (between target and radar-image frame z axis) in degrees.
    # Example: /// Example: -89.97
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Beta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
    # Example: /// Example: 103.04
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Kappa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
    # Example: /// Example: [33.1, 33.1, 33.1]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def PeakAmplitudes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def PeakAmplitudesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def PeakAmplitudesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Radar center frequency of the radar in hertz.
    # Example: /// Example: 160047.0625
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def CenterFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bandwidth of radar pulse in hertz.
    # Example: /// Example: 24094.12
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def PulseBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
    # Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Xpos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def XposLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def XposIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
    # Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Ypos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def YposLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def YposIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
    # Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Zpos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def ZposLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def ZposIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
    # Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Xvel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def XvelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def XvelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
    # Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Yvel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def YvelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def YvelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
    # Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
    # Constraints: No constraints specified.
    # RadarSOIObservation_Full
    def Zvel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarSOIObservation_Full
    def ZvelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarSOIObservation_Full
    def ZvelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

def RadarSOIObservation_FullStart(builder):
    builder.StartObject(32)

def Start(builder):
    RadarSOIObservation_FullStart(builder)

def RadarSOIObservation_FullAddObStartTime(builder, obStartTime):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(obStartTime), 0)

def AddObStartTime(builder, obStartTime):
    RadarSOIObservation_FullAddObStartTime(builder, obStartTime)

def RadarSOIObservation_FullAddTovs(builder, tovs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tovs), 0)

def AddTovs(builder, tovs):
    RadarSOIObservation_FullAddTovs(builder, tovs)

def RadarSOIObservation_FullStartTovsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTovsVector(builder, numElems):
    return RadarSOIObservation_FullStartTovsVector(builder, numElems)

def RadarSOIObservation_FullAddRspaces(builder, rspaces):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rspaces), 0)

def AddRspaces(builder, rspaces):
    RadarSOIObservation_FullAddRspaces(builder, rspaces)

def RadarSOIObservation_FullStartRspacesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRspacesVector(builder, numElems):
    return RadarSOIObservation_FullStartRspacesVector(builder, numElems)

def RadarSOIObservation_FullAddXspaces(builder, xspaces):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(xspaces), 0)

def AddXspaces(builder, xspaces):
    RadarSOIObservation_FullAddXspaces(builder, xspaces)

def RadarSOIObservation_FullStartXspacesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXspacesVector(builder, numElems):
    return RadarSOIObservation_FullStartXspacesVector(builder, numElems)

def RadarSOIObservation_FullAddDoppler2Xrs(builder, doppler2Xrs):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(doppler2Xrs), 0)

def AddDoppler2Xrs(builder, doppler2Xrs):
    RadarSOIObservation_FullAddDoppler2Xrs(builder, doppler2Xrs)

def RadarSOIObservation_FullStartDoppler2XrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDoppler2XrsVector(builder, numElems):
    return RadarSOIObservation_FullStartDoppler2XrsVector(builder, numElems)

def RadarSOIObservation_FullAddDeltaTimes(builder, deltaTimes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(deltaTimes), 0)

def AddDeltaTimes(builder, deltaTimes):
    RadarSOIObservation_FullAddDeltaTimes(builder, deltaTimes)

def RadarSOIObservation_FullStartDeltaTimesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeltaTimesVector(builder, numElems):
    return RadarSOIObservation_FullStartDeltaTimesVector(builder, numElems)

def RadarSOIObservation_FullAddAspectAngles(builder, aspectAngles):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(aspectAngles), 0)

def AddAspectAngles(builder, aspectAngles):
    RadarSOIObservation_FullAddAspectAngles(builder, aspectAngles)

def RadarSOIObservation_FullStartAspectAnglesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAspectAnglesVector(builder, numElems):
    return RadarSOIObservation_FullStartAspectAnglesVector(builder, numElems)

def RadarSOIObservation_FullAddProjAngVels(builder, projAngVels):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(projAngVels), 0)

def AddProjAngVels(builder, projAngVels):
    RadarSOIObservation_FullAddProjAngVels(builder, projAngVels)

def RadarSOIObservation_FullStartProjAngVelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartProjAngVelsVector(builder, numElems):
    return RadarSOIObservation_FullStartProjAngVelsVector(builder, numElems)

def RadarSOIObservation_FullAddIdStateVector(builder, idStateVector):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(idStateVector), 0)

def AddIdStateVector(builder, idStateVector):
    RadarSOIObservation_FullAddIdStateVector(builder, idStateVector)

def RadarSOIObservation_FullAddIdAttitudeSet(builder, idAttitudeSet):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(idAttitudeSet), 0)

def AddIdAttitudeSet(builder, idAttitudeSet):
    RadarSOIObservation_FullAddIdAttitudeSet(builder, idAttitudeSet)

def RadarSOIObservation_FullAddRanges(builder, ranges):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ranges), 0)

def AddRanges(builder, ranges):
    RadarSOIObservation_FullAddRanges(builder, ranges)

def RadarSOIObservation_FullStartRangesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRangesVector(builder, numElems):
    return RadarSOIObservation_FullStartRangesVector(builder, numElems)

def RadarSOIObservation_FullAddAzimuths(builder, azimuths):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(azimuths), 0)

def AddAzimuths(builder, azimuths):
    RadarSOIObservation_FullAddAzimuths(builder, azimuths)

def RadarSOIObservation_FullStartAzimuthsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAzimuthsVector(builder, numElems):
    return RadarSOIObservation_FullStartAzimuthsVector(builder, numElems)

def RadarSOIObservation_FullAddElevations(builder, elevations):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(elevations), 0)

def AddElevations(builder, elevations):
    RadarSOIObservation_FullAddElevations(builder, elevations)

def RadarSOIObservation_FullStartElevationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElevationsVector(builder, numElems):
    return RadarSOIObservation_FullStartElevationsVector(builder, numElems)

def RadarSOIObservation_FullAddRangeRates(builder, rangeRates):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(rangeRates), 0)

def AddRangeRates(builder, rangeRates):
    RadarSOIObservation_FullAddRangeRates(builder, rangeRates)

def RadarSOIObservation_FullStartRangeRatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRangeRatesVector(builder, numElems):
    return RadarSOIObservation_FullStartRangeRatesVector(builder, numElems)

def RadarSOIObservation_FullAddAzimuthRates(builder, azimuthRates):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(azimuthRates), 0)

def AddAzimuthRates(builder, azimuthRates):
    RadarSOIObservation_FullAddAzimuthRates(builder, azimuthRates)

def RadarSOIObservation_FullStartAzimuthRatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAzimuthRatesVector(builder, numElems):
    return RadarSOIObservation_FullStartAzimuthRatesVector(builder, numElems)

def RadarSOIObservation_FullAddElevationRates(builder, elevationRates):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(elevationRates), 0)

def AddElevationRates(builder, elevationRates):
    RadarSOIObservation_FullAddElevationRates(builder, elevationRates)

def RadarSOIObservation_FullStartElevationRatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElevationRatesVector(builder, numElems):
    return RadarSOIObservation_FullStartElevationRatesVector(builder, numElems)

def RadarSOIObservation_FullAddAzimuthBiases(builder, azimuthBiases):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(azimuthBiases), 0)

def AddAzimuthBiases(builder, azimuthBiases):
    RadarSOIObservation_FullAddAzimuthBiases(builder, azimuthBiases)

def RadarSOIObservation_FullStartAzimuthBiasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAzimuthBiasesVector(builder, numElems):
    return RadarSOIObservation_FullStartAzimuthBiasesVector(builder, numElems)

def RadarSOIObservation_FullAddElevationBiases(builder, elevationBiases):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(elevationBiases), 0)

def AddElevationBiases(builder, elevationBiases):
    RadarSOIObservation_FullAddElevationBiases(builder, elevationBiases)

def RadarSOIObservation_FullStartElevationBiasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElevationBiasesVector(builder, numElems):
    return RadarSOIObservation_FullStartElevationBiasesVector(builder, numElems)

def RadarSOIObservation_FullAddRangeBiases(builder, rangeBiases):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(rangeBiases), 0)

def AddRangeBiases(builder, rangeBiases):
    RadarSOIObservation_FullAddRangeBiases(builder, rangeBiases)

def RadarSOIObservation_FullStartRangeBiasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRangeBiasesVector(builder, numElems):
    return RadarSOIObservation_FullStartRangeBiasesVector(builder, numElems)

def RadarSOIObservation_FullAddIntegrationAngles(builder, integrationAngles):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(integrationAngles), 0)

def AddIntegrationAngles(builder, integrationAngles):
    RadarSOIObservation_FullAddIntegrationAngles(builder, integrationAngles)

def RadarSOIObservation_FullStartIntegrationAnglesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntegrationAnglesVector(builder, numElems):
    return RadarSOIObservation_FullStartIntegrationAnglesVector(builder, numElems)

def RadarSOIObservation_FullAddCrossRangeRes(builder, crossRangeRes):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(crossRangeRes), 0)

def AddCrossRangeRes(builder, crossRangeRes):
    RadarSOIObservation_FullAddCrossRangeRes(builder, crossRangeRes)

def RadarSOIObservation_FullStartCrossRangeResVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCrossRangeResVector(builder, numElems):
    return RadarSOIObservation_FullStartCrossRangeResVector(builder, numElems)

def RadarSOIObservation_FullAddBeta(builder, beta):
    builder.PrependFloat64Slot(21, beta, 0.0)

def AddBeta(builder, beta):
    RadarSOIObservation_FullAddBeta(builder, beta)

def RadarSOIObservation_FullAddKappa(builder, kappa):
    builder.PrependFloat64Slot(22, kappa, 0.0)

def AddKappa(builder, kappa):
    RadarSOIObservation_FullAddKappa(builder, kappa)

def RadarSOIObservation_FullAddPeakAmplitudes(builder, peakAmplitudes):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(peakAmplitudes), 0)

def AddPeakAmplitudes(builder, peakAmplitudes):
    RadarSOIObservation_FullAddPeakAmplitudes(builder, peakAmplitudes)

def RadarSOIObservation_FullStartPeakAmplitudesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPeakAmplitudesVector(builder, numElems):
    return RadarSOIObservation_FullStartPeakAmplitudesVector(builder, numElems)

def RadarSOIObservation_FullAddCenterFrequency(builder, centerFrequency):
    builder.PrependFloat64Slot(24, centerFrequency, 0.0)

def AddCenterFrequency(builder, centerFrequency):
    RadarSOIObservation_FullAddCenterFrequency(builder, centerFrequency)

def RadarSOIObservation_FullAddPulseBandwidth(builder, pulseBandwidth):
    builder.PrependFloat64Slot(25, pulseBandwidth, 0.0)

def AddPulseBandwidth(builder, pulseBandwidth):
    RadarSOIObservation_FullAddPulseBandwidth(builder, pulseBandwidth)

def RadarSOIObservation_FullAddXpos(builder, xpos):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(xpos), 0)

def AddXpos(builder, xpos):
    RadarSOIObservation_FullAddXpos(builder, xpos)

def RadarSOIObservation_FullStartXposVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXposVector(builder, numElems):
    return RadarSOIObservation_FullStartXposVector(builder, numElems)

def RadarSOIObservation_FullAddYpos(builder, ypos):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(ypos), 0)

def AddYpos(builder, ypos):
    RadarSOIObservation_FullAddYpos(builder, ypos)

def RadarSOIObservation_FullStartYposVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartYposVector(builder, numElems):
    return RadarSOIObservation_FullStartYposVector(builder, numElems)

def RadarSOIObservation_FullAddZpos(builder, zpos):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(zpos), 0)

def AddZpos(builder, zpos):
    RadarSOIObservation_FullAddZpos(builder, zpos)

def RadarSOIObservation_FullStartZposVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartZposVector(builder, numElems):
    return RadarSOIObservation_FullStartZposVector(builder, numElems)

def RadarSOIObservation_FullAddXvel(builder, xvel):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(xvel), 0)

def AddXvel(builder, xvel):
    RadarSOIObservation_FullAddXvel(builder, xvel)

def RadarSOIObservation_FullStartXvelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXvelVector(builder, numElems):
    return RadarSOIObservation_FullStartXvelVector(builder, numElems)

def RadarSOIObservation_FullAddYvel(builder, yvel):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(yvel), 0)

def AddYvel(builder, yvel):
    RadarSOIObservation_FullAddYvel(builder, yvel)

def RadarSOIObservation_FullStartYvelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartYvelVector(builder, numElems):
    return RadarSOIObservation_FullStartYvelVector(builder, numElems)

def RadarSOIObservation_FullAddZvel(builder, zvel):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(zvel), 0)

def AddZvel(builder, zvel):
    RadarSOIObservation_FullAddZvel(builder, zvel)

def RadarSOIObservation_FullStartZvelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartZvelVector(builder, numElems):
    return RadarSOIObservation_FullStartZvelVector(builder, numElems)

def RadarSOIObservation_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return RadarSOIObservation_FullEnd(builder)

try:
    from typing import List
except:
    pass

class RadarSOIObservation_FullT(object):

    # RadarSOIObservation_FullT
    def __init__(self):
        self.obStartTime = None  # type: str
        self.tovs = None  # type: List[str]
        self.rspaces = None  # type: List[str]
        self.xspaces = None  # type: List[str]
        self.doppler2Xrs = None  # type: List[str]
        self.deltaTimes = None  # type: List[str]
        self.aspectAngles = None  # type: List[str]
        self.projAngVels = None  # type: List[str]
        self.idStateVector = None  # type: str
        self.idAttitudeSet = None  # type: str
        self.ranges = None  # type: List[str]
        self.azimuths = None  # type: List[str]
        self.elevations = None  # type: List[str]
        self.rangeRates = None  # type: List[str]
        self.azimuthRates = None  # type: List[str]
        self.elevationRates = None  # type: List[str]
        self.azimuthBiases = None  # type: List[str]
        self.elevationBiases = None  # type: List[str]
        self.rangeBiases = None  # type: List[str]
        self.integrationAngles = None  # type: List[str]
        self.crossRangeRes = None  # type: List[str]
        self.beta = 0.0  # type: float
        self.kappa = 0.0  # type: float
        self.peakAmplitudes = None  # type: List[str]
        self.centerFrequency = 0.0  # type: float
        self.pulseBandwidth = 0.0  # type: float
        self.xpos = None  # type: List[str]
        self.ypos = None  # type: List[str]
        self.zpos = None  # type: List[str]
        self.xvel = None  # type: List[str]
        self.yvel = None  # type: List[str]
        self.zvel = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        radarSoiobservationFull = RadarSOIObservation_Full()
        radarSoiobservationFull.Init(buf, pos)
        return cls.InitFromObj(radarSoiobservationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, radarSoiobservationFull):
        x = RadarSOIObservation_FullT()
        x._UnPack(radarSoiobservationFull)
        return x

    # RadarSOIObservation_FullT
    def _UnPack(self, radarSoiobservationFull):
        if radarSoiobservationFull is None:
            return
        self.obStartTime = radarSoiobservationFull.ObStartTime()
        if not radarSoiobservationFull.TovsIsNone():
            self.tovs = []
            for i in range(radarSoiobservationFull.TovsLength()):
                self.tovs.append(radarSoiobservationFull.Tovs(i))
        if not radarSoiobservationFull.RspacesIsNone():
            self.rspaces = []
            for i in range(radarSoiobservationFull.RspacesLength()):
                self.rspaces.append(radarSoiobservationFull.Rspaces(i))
        if not radarSoiobservationFull.XspacesIsNone():
            self.xspaces = []
            for i in range(radarSoiobservationFull.XspacesLength()):
                self.xspaces.append(radarSoiobservationFull.Xspaces(i))
        if not radarSoiobservationFull.Doppler2XrsIsNone():
            self.doppler2Xrs = []
            for i in range(radarSoiobservationFull.Doppler2XrsLength()):
                self.doppler2Xrs.append(radarSoiobservationFull.Doppler2Xrs(i))
        if not radarSoiobservationFull.DeltaTimesIsNone():
            self.deltaTimes = []
            for i in range(radarSoiobservationFull.DeltaTimesLength()):
                self.deltaTimes.append(radarSoiobservationFull.DeltaTimes(i))
        if not radarSoiobservationFull.AspectAnglesIsNone():
            self.aspectAngles = []
            for i in range(radarSoiobservationFull.AspectAnglesLength()):
                self.aspectAngles.append(radarSoiobservationFull.AspectAngles(i))
        if not radarSoiobservationFull.ProjAngVelsIsNone():
            self.projAngVels = []
            for i in range(radarSoiobservationFull.ProjAngVelsLength()):
                self.projAngVels.append(radarSoiobservationFull.ProjAngVels(i))
        self.idStateVector = radarSoiobservationFull.IdStateVector()
        self.idAttitudeSet = radarSoiobservationFull.IdAttitudeSet()
        if not radarSoiobservationFull.RangesIsNone():
            self.ranges = []
            for i in range(radarSoiobservationFull.RangesLength()):
                self.ranges.append(radarSoiobservationFull.Ranges(i))
        if not radarSoiobservationFull.AzimuthsIsNone():
            self.azimuths = []
            for i in range(radarSoiobservationFull.AzimuthsLength()):
                self.azimuths.append(radarSoiobservationFull.Azimuths(i))
        if not radarSoiobservationFull.ElevationsIsNone():
            self.elevations = []
            for i in range(radarSoiobservationFull.ElevationsLength()):
                self.elevations.append(radarSoiobservationFull.Elevations(i))
        if not radarSoiobservationFull.RangeRatesIsNone():
            self.rangeRates = []
            for i in range(radarSoiobservationFull.RangeRatesLength()):
                self.rangeRates.append(radarSoiobservationFull.RangeRates(i))
        if not radarSoiobservationFull.AzimuthRatesIsNone():
            self.azimuthRates = []
            for i in range(radarSoiobservationFull.AzimuthRatesLength()):
                self.azimuthRates.append(radarSoiobservationFull.AzimuthRates(i))
        if not radarSoiobservationFull.ElevationRatesIsNone():
            self.elevationRates = []
            for i in range(radarSoiobservationFull.ElevationRatesLength()):
                self.elevationRates.append(radarSoiobservationFull.ElevationRates(i))
        if not radarSoiobservationFull.AzimuthBiasesIsNone():
            self.azimuthBiases = []
            for i in range(radarSoiobservationFull.AzimuthBiasesLength()):
                self.azimuthBiases.append(radarSoiobservationFull.AzimuthBiases(i))
        if not radarSoiobservationFull.ElevationBiasesIsNone():
            self.elevationBiases = []
            for i in range(radarSoiobservationFull.ElevationBiasesLength()):
                self.elevationBiases.append(radarSoiobservationFull.ElevationBiases(i))
        if not radarSoiobservationFull.RangeBiasesIsNone():
            self.rangeBiases = []
            for i in range(radarSoiobservationFull.RangeBiasesLength()):
                self.rangeBiases.append(radarSoiobservationFull.RangeBiases(i))
        if not radarSoiobservationFull.IntegrationAnglesIsNone():
            self.integrationAngles = []
            for i in range(radarSoiobservationFull.IntegrationAnglesLength()):
                self.integrationAngles.append(radarSoiobservationFull.IntegrationAngles(i))
        if not radarSoiobservationFull.CrossRangeResIsNone():
            self.crossRangeRes = []
            for i in range(radarSoiobservationFull.CrossRangeResLength()):
                self.crossRangeRes.append(radarSoiobservationFull.CrossRangeRes(i))
        self.beta = radarSoiobservationFull.Beta()
        self.kappa = radarSoiobservationFull.Kappa()
        if not radarSoiobservationFull.PeakAmplitudesIsNone():
            self.peakAmplitudes = []
            for i in range(radarSoiobservationFull.PeakAmplitudesLength()):
                self.peakAmplitudes.append(radarSoiobservationFull.PeakAmplitudes(i))
        self.centerFrequency = radarSoiobservationFull.CenterFrequency()
        self.pulseBandwidth = radarSoiobservationFull.PulseBandwidth()
        if not radarSoiobservationFull.XposIsNone():
            self.xpos = []
            for i in range(radarSoiobservationFull.XposLength()):
                self.xpos.append(radarSoiobservationFull.Xpos(i))
        if not radarSoiobservationFull.YposIsNone():
            self.ypos = []
            for i in range(radarSoiobservationFull.YposLength()):
                self.ypos.append(radarSoiobservationFull.Ypos(i))
        if not radarSoiobservationFull.ZposIsNone():
            self.zpos = []
            for i in range(radarSoiobservationFull.ZposLength()):
                self.zpos.append(radarSoiobservationFull.Zpos(i))
        if not radarSoiobservationFull.XvelIsNone():
            self.xvel = []
            for i in range(radarSoiobservationFull.XvelLength()):
                self.xvel.append(radarSoiobservationFull.Xvel(i))
        if not radarSoiobservationFull.YvelIsNone():
            self.yvel = []
            for i in range(radarSoiobservationFull.YvelLength()):
                self.yvel.append(radarSoiobservationFull.Yvel(i))
        if not radarSoiobservationFull.ZvelIsNone():
            self.zvel = []
            for i in range(radarSoiobservationFull.ZvelLength()):
                self.zvel.append(radarSoiobservationFull.Zvel(i))

    # RadarSOIObservation_FullT
    def Pack(self, builder):
        if self.obStartTime is not None:
            obStartTime = builder.CreateString(self.obStartTime)
        if self.tovs is not None:
            tovslist = []
            for i in range(len(self.tovs)):
                tovslist.append(builder.CreateString(self.tovs[i]))
            RadarSOIObservation_FullStartTovsVector(builder, len(self.tovs))
            for i in reversed(range(len(self.tovs))):
                builder.PrependUOffsetTRelative(tovslist[i])
            tovs = builder.EndVector()
        if self.rspaces is not None:
            rspaceslist = []
            for i in range(len(self.rspaces)):
                rspaceslist.append(builder.CreateString(self.rspaces[i]))
            RadarSOIObservation_FullStartRspacesVector(builder, len(self.rspaces))
            for i in reversed(range(len(self.rspaces))):
                builder.PrependUOffsetTRelative(rspaceslist[i])
            rspaces = builder.EndVector()
        if self.xspaces is not None:
            xspaceslist = []
            for i in range(len(self.xspaces)):
                xspaceslist.append(builder.CreateString(self.xspaces[i]))
            RadarSOIObservation_FullStartXspacesVector(builder, len(self.xspaces))
            for i in reversed(range(len(self.xspaces))):
                builder.PrependUOffsetTRelative(xspaceslist[i])
            xspaces = builder.EndVector()
        if self.doppler2Xrs is not None:
            doppler2Xrslist = []
            for i in range(len(self.doppler2Xrs)):
                doppler2Xrslist.append(builder.CreateString(self.doppler2Xrs[i]))
            RadarSOIObservation_FullStartDoppler2XrsVector(builder, len(self.doppler2Xrs))
            for i in reversed(range(len(self.doppler2Xrs))):
                builder.PrependUOffsetTRelative(doppler2Xrslist[i])
            doppler2Xrs = builder.EndVector()
        if self.deltaTimes is not None:
            deltaTimeslist = []
            for i in range(len(self.deltaTimes)):
                deltaTimeslist.append(builder.CreateString(self.deltaTimes[i]))
            RadarSOIObservation_FullStartDeltaTimesVector(builder, len(self.deltaTimes))
            for i in reversed(range(len(self.deltaTimes))):
                builder.PrependUOffsetTRelative(deltaTimeslist[i])
            deltaTimes = builder.EndVector()
        if self.aspectAngles is not None:
            aspectAngleslist = []
            for i in range(len(self.aspectAngles)):
                aspectAngleslist.append(builder.CreateString(self.aspectAngles[i]))
            RadarSOIObservation_FullStartAspectAnglesVector(builder, len(self.aspectAngles))
            for i in reversed(range(len(self.aspectAngles))):
                builder.PrependUOffsetTRelative(aspectAngleslist[i])
            aspectAngles = builder.EndVector()
        if self.projAngVels is not None:
            projAngVelslist = []
            for i in range(len(self.projAngVels)):
                projAngVelslist.append(builder.CreateString(self.projAngVels[i]))
            RadarSOIObservation_FullStartProjAngVelsVector(builder, len(self.projAngVels))
            for i in reversed(range(len(self.projAngVels))):
                builder.PrependUOffsetTRelative(projAngVelslist[i])
            projAngVels = builder.EndVector()
        if self.idStateVector is not None:
            idStateVector = builder.CreateString(self.idStateVector)
        if self.idAttitudeSet is not None:
            idAttitudeSet = builder.CreateString(self.idAttitudeSet)
        if self.ranges is not None:
            rangeslist = []
            for i in range(len(self.ranges)):
                rangeslist.append(builder.CreateString(self.ranges[i]))
            RadarSOIObservation_FullStartRangesVector(builder, len(self.ranges))
            for i in reversed(range(len(self.ranges))):
                builder.PrependUOffsetTRelative(rangeslist[i])
            ranges = builder.EndVector()
        if self.azimuths is not None:
            azimuthslist = []
            for i in range(len(self.azimuths)):
                azimuthslist.append(builder.CreateString(self.azimuths[i]))
            RadarSOIObservation_FullStartAzimuthsVector(builder, len(self.azimuths))
            for i in reversed(range(len(self.azimuths))):
                builder.PrependUOffsetTRelative(azimuthslist[i])
            azimuths = builder.EndVector()
        if self.elevations is not None:
            elevationslist = []
            for i in range(len(self.elevations)):
                elevationslist.append(builder.CreateString(self.elevations[i]))
            RadarSOIObservation_FullStartElevationsVector(builder, len(self.elevations))
            for i in reversed(range(len(self.elevations))):
                builder.PrependUOffsetTRelative(elevationslist[i])
            elevations = builder.EndVector()
        if self.rangeRates is not None:
            rangeRateslist = []
            for i in range(len(self.rangeRates)):
                rangeRateslist.append(builder.CreateString(self.rangeRates[i]))
            RadarSOIObservation_FullStartRangeRatesVector(builder, len(self.rangeRates))
            for i in reversed(range(len(self.rangeRates))):
                builder.PrependUOffsetTRelative(rangeRateslist[i])
            rangeRates = builder.EndVector()
        if self.azimuthRates is not None:
            azimuthRateslist = []
            for i in range(len(self.azimuthRates)):
                azimuthRateslist.append(builder.CreateString(self.azimuthRates[i]))
            RadarSOIObservation_FullStartAzimuthRatesVector(builder, len(self.azimuthRates))
            for i in reversed(range(len(self.azimuthRates))):
                builder.PrependUOffsetTRelative(azimuthRateslist[i])
            azimuthRates = builder.EndVector()
        if self.elevationRates is not None:
            elevationRateslist = []
            for i in range(len(self.elevationRates)):
                elevationRateslist.append(builder.CreateString(self.elevationRates[i]))
            RadarSOIObservation_FullStartElevationRatesVector(builder, len(self.elevationRates))
            for i in reversed(range(len(self.elevationRates))):
                builder.PrependUOffsetTRelative(elevationRateslist[i])
            elevationRates = builder.EndVector()
        if self.azimuthBiases is not None:
            azimuthBiaseslist = []
            for i in range(len(self.azimuthBiases)):
                azimuthBiaseslist.append(builder.CreateString(self.azimuthBiases[i]))
            RadarSOIObservation_FullStartAzimuthBiasesVector(builder, len(self.azimuthBiases))
            for i in reversed(range(len(self.azimuthBiases))):
                builder.PrependUOffsetTRelative(azimuthBiaseslist[i])
            azimuthBiases = builder.EndVector()
        if self.elevationBiases is not None:
            elevationBiaseslist = []
            for i in range(len(self.elevationBiases)):
                elevationBiaseslist.append(builder.CreateString(self.elevationBiases[i]))
            RadarSOIObservation_FullStartElevationBiasesVector(builder, len(self.elevationBiases))
            for i in reversed(range(len(self.elevationBiases))):
                builder.PrependUOffsetTRelative(elevationBiaseslist[i])
            elevationBiases = builder.EndVector()
        if self.rangeBiases is not None:
            rangeBiaseslist = []
            for i in range(len(self.rangeBiases)):
                rangeBiaseslist.append(builder.CreateString(self.rangeBiases[i]))
            RadarSOIObservation_FullStartRangeBiasesVector(builder, len(self.rangeBiases))
            for i in reversed(range(len(self.rangeBiases))):
                builder.PrependUOffsetTRelative(rangeBiaseslist[i])
            rangeBiases = builder.EndVector()
        if self.integrationAngles is not None:
            integrationAngleslist = []
            for i in range(len(self.integrationAngles)):
                integrationAngleslist.append(builder.CreateString(self.integrationAngles[i]))
            RadarSOIObservation_FullStartIntegrationAnglesVector(builder, len(self.integrationAngles))
            for i in reversed(range(len(self.integrationAngles))):
                builder.PrependUOffsetTRelative(integrationAngleslist[i])
            integrationAngles = builder.EndVector()
        if self.crossRangeRes is not None:
            crossRangeReslist = []
            for i in range(len(self.crossRangeRes)):
                crossRangeReslist.append(builder.CreateString(self.crossRangeRes[i]))
            RadarSOIObservation_FullStartCrossRangeResVector(builder, len(self.crossRangeRes))
            for i in reversed(range(len(self.crossRangeRes))):
                builder.PrependUOffsetTRelative(crossRangeReslist[i])
            crossRangeRes = builder.EndVector()
        if self.peakAmplitudes is not None:
            peakAmplitudeslist = []
            for i in range(len(self.peakAmplitudes)):
                peakAmplitudeslist.append(builder.CreateString(self.peakAmplitudes[i]))
            RadarSOIObservation_FullStartPeakAmplitudesVector(builder, len(self.peakAmplitudes))
            for i in reversed(range(len(self.peakAmplitudes))):
                builder.PrependUOffsetTRelative(peakAmplitudeslist[i])
            peakAmplitudes = builder.EndVector()
        if self.xpos is not None:
            xposlist = []
            for i in range(len(self.xpos)):
                xposlist.append(builder.CreateString(self.xpos[i]))
            RadarSOIObservation_FullStartXposVector(builder, len(self.xpos))
            for i in reversed(range(len(self.xpos))):
                builder.PrependUOffsetTRelative(xposlist[i])
            xpos = builder.EndVector()
        if self.ypos is not None:
            yposlist = []
            for i in range(len(self.ypos)):
                yposlist.append(builder.CreateString(self.ypos[i]))
            RadarSOIObservation_FullStartYposVector(builder, len(self.ypos))
            for i in reversed(range(len(self.ypos))):
                builder.PrependUOffsetTRelative(yposlist[i])
            ypos = builder.EndVector()
        if self.zpos is not None:
            zposlist = []
            for i in range(len(self.zpos)):
                zposlist.append(builder.CreateString(self.zpos[i]))
            RadarSOIObservation_FullStartZposVector(builder, len(self.zpos))
            for i in reversed(range(len(self.zpos))):
                builder.PrependUOffsetTRelative(zposlist[i])
            zpos = builder.EndVector()
        if self.xvel is not None:
            xvellist = []
            for i in range(len(self.xvel)):
                xvellist.append(builder.CreateString(self.xvel[i]))
            RadarSOIObservation_FullStartXvelVector(builder, len(self.xvel))
            for i in reversed(range(len(self.xvel))):
                builder.PrependUOffsetTRelative(xvellist[i])
            xvel = builder.EndVector()
        if self.yvel is not None:
            yvellist = []
            for i in range(len(self.yvel)):
                yvellist.append(builder.CreateString(self.yvel[i]))
            RadarSOIObservation_FullStartYvelVector(builder, len(self.yvel))
            for i in reversed(range(len(self.yvel))):
                builder.PrependUOffsetTRelative(yvellist[i])
            yvel = builder.EndVector()
        if self.zvel is not None:
            zvellist = []
            for i in range(len(self.zvel)):
                zvellist.append(builder.CreateString(self.zvel[i]))
            RadarSOIObservation_FullStartZvelVector(builder, len(self.zvel))
            for i in reversed(range(len(self.zvel))):
                builder.PrependUOffsetTRelative(zvellist[i])
            zvel = builder.EndVector()
        RadarSOIObservation_FullStart(builder)
        if self.obStartTime is not None:
            RadarSOIObservation_FullAddObStartTime(builder, obStartTime)
        if self.tovs is not None:
            RadarSOIObservation_FullAddTovs(builder, tovs)
        if self.rspaces is not None:
            RadarSOIObservation_FullAddRspaces(builder, rspaces)
        if self.xspaces is not None:
            RadarSOIObservation_FullAddXspaces(builder, xspaces)
        if self.doppler2Xrs is not None:
            RadarSOIObservation_FullAddDoppler2Xrs(builder, doppler2Xrs)
        if self.deltaTimes is not None:
            RadarSOIObservation_FullAddDeltaTimes(builder, deltaTimes)
        if self.aspectAngles is not None:
            RadarSOIObservation_FullAddAspectAngles(builder, aspectAngles)
        if self.projAngVels is not None:
            RadarSOIObservation_FullAddProjAngVels(builder, projAngVels)
        if self.idStateVector is not None:
            RadarSOIObservation_FullAddIdStateVector(builder, idStateVector)
        if self.idAttitudeSet is not None:
            RadarSOIObservation_FullAddIdAttitudeSet(builder, idAttitudeSet)
        if self.ranges is not None:
            RadarSOIObservation_FullAddRanges(builder, ranges)
        if self.azimuths is not None:
            RadarSOIObservation_FullAddAzimuths(builder, azimuths)
        if self.elevations is not None:
            RadarSOIObservation_FullAddElevations(builder, elevations)
        if self.rangeRates is not None:
            RadarSOIObservation_FullAddRangeRates(builder, rangeRates)
        if self.azimuthRates is not None:
            RadarSOIObservation_FullAddAzimuthRates(builder, azimuthRates)
        if self.elevationRates is not None:
            RadarSOIObservation_FullAddElevationRates(builder, elevationRates)
        if self.azimuthBiases is not None:
            RadarSOIObservation_FullAddAzimuthBiases(builder, azimuthBiases)
        if self.elevationBiases is not None:
            RadarSOIObservation_FullAddElevationBiases(builder, elevationBiases)
        if self.rangeBiases is not None:
            RadarSOIObservation_FullAddRangeBiases(builder, rangeBiases)
        if self.integrationAngles is not None:
            RadarSOIObservation_FullAddIntegrationAngles(builder, integrationAngles)
        if self.crossRangeRes is not None:
            RadarSOIObservation_FullAddCrossRangeRes(builder, crossRangeRes)
        RadarSOIObservation_FullAddBeta(builder, self.beta)
        RadarSOIObservation_FullAddKappa(builder, self.kappa)
        if self.peakAmplitudes is not None:
            RadarSOIObservation_FullAddPeakAmplitudes(builder, peakAmplitudes)
        RadarSOIObservation_FullAddCenterFrequency(builder, self.centerFrequency)
        RadarSOIObservation_FullAddPulseBandwidth(builder, self.pulseBandwidth)
        if self.xpos is not None:
            RadarSOIObservation_FullAddXpos(builder, xpos)
        if self.ypos is not None:
            RadarSOIObservation_FullAddYpos(builder, ypos)
        if self.zpos is not None:
            RadarSOIObservation_FullAddZpos(builder, zpos)
        if self.xvel is not None:
            RadarSOIObservation_FullAddXvel(builder, xvel)
        if self.yvel is not None:
            RadarSOIObservation_FullAddYvel(builder, yvel)
        if self.zvel is not None:
            RadarSOIObservation_FullAddZvel(builder, zvel)
        radarSoiobservationFull = RadarSOIObservation_FullEnd(builder)
        return radarSoiobservationFull
