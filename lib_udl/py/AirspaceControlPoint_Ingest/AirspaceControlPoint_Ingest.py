# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
class AirspaceControlPoint_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirspaceControlPoint_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirspaceControlPoint_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirspaceControlPoint_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x53", size_prefixed=size_prefixed)

    # AirspaceControlPoint_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # One of possible control point type codes, such as CP, ER, OT, etc.
    # Example: /// Example: CP
    # Constraints: Minimum length = 0, Maximum length = 2
    # AirspaceControlPoint_Ingest
    def CtrlPtType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name applied to the control point, used as a reference.
    # Example: /// Example: APPLE
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirspaceControlPoint_Ingest
    def CtrlPtName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
    # Example: /// Example: 203632N0594256E
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceControlPoint_Ingest
    def CtrlPtLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The altitude of the control point.
    # Example: /// Example: BRFL:MSL-FL230
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirspaceControlPoint_Ingest
    def CtrlPtAltitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AirspaceControlPoint_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    AirspaceControlPoint_IngestStart(builder)

def AirspaceControlPoint_IngestAddCtrlPtType(builder, ctrlPtType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlPtType), 0)

def AddCtrlPtType(builder, ctrlPtType):
    AirspaceControlPoint_IngestAddCtrlPtType(builder, ctrlPtType)

def AirspaceControlPoint_IngestAddCtrlPtName(builder, ctrlPtName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlPtName), 0)

def AddCtrlPtName(builder, ctrlPtName):
    AirspaceControlPoint_IngestAddCtrlPtName(builder, ctrlPtName)

def AirspaceControlPoint_IngestAddCtrlPtLocation(builder, ctrlPtLocation):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlPtLocation), 0)

def AddCtrlPtLocation(builder, ctrlPtLocation):
    AirspaceControlPoint_IngestAddCtrlPtLocation(builder, ctrlPtLocation)

def AirspaceControlPoint_IngestAddCtrlPtAltitude(builder, ctrlPtAltitude):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlPtAltitude), 0)

def AddCtrlPtAltitude(builder, ctrlPtAltitude):
    AirspaceControlPoint_IngestAddCtrlPtAltitude(builder, ctrlPtAltitude)

def AirspaceControlPoint_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirspaceControlPoint_IngestEnd(builder)


class AirspaceControlPoint_IngestT(object):

    # AirspaceControlPoint_IngestT
    def __init__(self):
        self.ctrlPtType = None  # type: str
        self.ctrlPtName = None  # type: str
        self.ctrlPtLocation = None  # type: str
        self.ctrlPtAltitude = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airspaceControlPointIngest = AirspaceControlPoint_Ingest()
        airspaceControlPointIngest.Init(buf, pos)
        return cls.InitFromObj(airspaceControlPointIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airspaceControlPointIngest):
        x = AirspaceControlPoint_IngestT()
        x._UnPack(airspaceControlPointIngest)
        return x

    # AirspaceControlPoint_IngestT
    def _UnPack(self, airspaceControlPointIngest):
        if airspaceControlPointIngest is None:
            return
        self.ctrlPtType = airspaceControlPointIngest.CtrlPtType()
        self.ctrlPtName = airspaceControlPointIngest.CtrlPtName()
        self.ctrlPtLocation = airspaceControlPointIngest.CtrlPtLocation()
        self.ctrlPtAltitude = airspaceControlPointIngest.CtrlPtAltitude()

    # AirspaceControlPoint_IngestT
    def Pack(self, builder):
        if self.ctrlPtType is not None:
            ctrlPtType = builder.CreateString(self.ctrlPtType)
        if self.ctrlPtName is not None:
            ctrlPtName = builder.CreateString(self.ctrlPtName)
        if self.ctrlPtLocation is not None:
            ctrlPtLocation = builder.CreateString(self.ctrlPtLocation)
        if self.ctrlPtAltitude is not None:
            ctrlPtAltitude = builder.CreateString(self.ctrlPtAltitude)
        AirspaceControlPoint_IngestStart(builder)
        if self.ctrlPtType is not None:
            AirspaceControlPoint_IngestAddCtrlPtType(builder, ctrlPtType)
        if self.ctrlPtName is not None:
            AirspaceControlPoint_IngestAddCtrlPtName(builder, ctrlPtName)
        if self.ctrlPtLocation is not None:
            AirspaceControlPoint_IngestAddCtrlPtLocation(builder, ctrlPtLocation)
        if self.ctrlPtAltitude is not None:
            AirspaceControlPoint_IngestAddCtrlPtAltitude(builder, ctrlPtAltitude)
        airspaceControlPointIngest = AirspaceControlPoint_IngestEnd(builder)
        return airspaceControlPointIngest
