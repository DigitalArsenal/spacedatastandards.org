# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Contains details of the OnOrbit object.
class OnorbitDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitDetailsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitDetails
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the parent Onorbit record.
    # Example: /// Example: REF-ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitDetails
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitDetails
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # OnorbitDetails
    def LastObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current/latest visual magnitude in M.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def Vismag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum visual magnitude in M.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def VismagMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum visual magnitude in M.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def VismagMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean visual magnitude in M.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def VismagMean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Current/latest radar cross section in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def Rcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum radar cross section in meters squared.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def RcsMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum radar cross section in meters squared.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def RcsMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean radar cross section in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def RcsMean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total beginning of life delta V of the spacecraft, in meters per second.
    # Example: /// Example: 1000.1
    # Constraints: No constraints specified.
    # OnorbitDetails
    def BolDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum delta V available for this on-orbit spacecraft, in meters per second.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def MaxDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
    # Example: /// Example: 50.1
    # Constraints: No constraints specified.
    # OnorbitDetails
    def DeltaVunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated maximum burn duration for the object, in seconds.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def EstDeltaVduration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of distinct missions the spacecraft performs.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # OnorbitDetails
    def NumMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
    # Example: /// Example: ['Weather', 'Space Weather']
    # Constraints: No constraints specified.
    # OnorbitDetails
    def MissionTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails
    def MissionTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails
    def MissionTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Type of the bus on the spacecraft.
    # Example: /// Example: A2100
    # Constraints: Minimum length = 0, Maximum length = 32
    # OnorbitDetails
    def BusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
    # Example: /// Example: 90.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def GeoSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GEO drift rate, if applicable in degrees per day.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def DriftRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft dry mass (without fuel or disposables) in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def DryMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mass of fuel and disposables at launch time in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def AdditionalMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def LaunchMassMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Nominal mass of spacecraft and fuel at launch time, in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def LaunchMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def LaunchMassMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft beginning of life fuel mass, in orbit, in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def BolFuelMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated total current mass of the spacecraft, in kilograms.
    # Example: /// Example: 500
    # Constraints: No constraints specified.
    # OnorbitDetails
    def CurrentMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
    # Example: /// Example: 50.1
    # Constraints: No constraints specified.
    # OnorbitDetails
    def TotalMassUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft deployed area of solar array in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def SolarArrayArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OnorbitDetails
    def Maneuverable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Estimated remaining fuel for the object in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def FuelRemaining(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average cross sectional area in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def CrossSection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average cross sectional area of the bus in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def BusCrossSection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def MaxRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def ColaRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails
    def AdeptRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of sub-satellites or deployable objects on the spacecraft.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # OnorbitDetails
    def NumDeployable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
    # Example: /// Example: ['GOES-18A', 'GOES-18B']
    # Constraints: No constraints specified.
    # OnorbitDetails
    def DepNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails
    def DepNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails
    def DepNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    # Example: /// Example: [20, 21]
    # Constraints: No constraints specified.
    # OnorbitDetails
    def DepEstMasses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails
    def DepEstMassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails
    def DepEstMassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    # Example: /// Example: [10, 5]
    # Constraints: No constraints specified.
    # OnorbitDetails
    def DepMassUncs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails
    def DepMassUncsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails
    def DepMassUncsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitDetails
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitDetails
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the source who last provided an observation for this idOnOrbit.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitDetails
    def LastObSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitDetails
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitDetails
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitDetails
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitDetails
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitDetails
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitDetails
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitDetailsStart(builder):
    builder.StartObject(50)

def Start(builder):
    OnorbitDetailsStart(builder)

def OnorbitDetailsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitDetailsAddId(builder, id)

def OnorbitDetailsAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitDetailsAddIdOnOrbit(builder, idOnOrbit)

def OnorbitDetailsAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitDetailsAddClassificationMarking(builder, classificationMarking)

def OnorbitDetailsAddLastObTime(builder, lastObTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lastObTime), 0)

def AddLastObTime(builder, lastObTime):
    OnorbitDetailsAddLastObTime(builder, lastObTime)

def OnorbitDetailsAddVismag(builder, vismag):
    builder.PrependFloat64Slot(4, vismag, 0.0)

def AddVismag(builder, vismag):
    OnorbitDetailsAddVismag(builder, vismag)

def OnorbitDetailsAddVismagMin(builder, vismagMin):
    builder.PrependFloat64Slot(5, vismagMin, 0.0)

def AddVismagMin(builder, vismagMin):
    OnorbitDetailsAddVismagMin(builder, vismagMin)

def OnorbitDetailsAddVismagMax(builder, vismagMax):
    builder.PrependFloat64Slot(6, vismagMax, 0.0)

def AddVismagMax(builder, vismagMax):
    OnorbitDetailsAddVismagMax(builder, vismagMax)

def OnorbitDetailsAddVismagMean(builder, vismagMean):
    builder.PrependFloat64Slot(7, vismagMean, 0.0)

def AddVismagMean(builder, vismagMean):
    OnorbitDetailsAddVismagMean(builder, vismagMean)

def OnorbitDetailsAddRcs(builder, rcs):
    builder.PrependFloat64Slot(8, rcs, 0.0)

def AddRcs(builder, rcs):
    OnorbitDetailsAddRcs(builder, rcs)

def OnorbitDetailsAddRcsMin(builder, rcsMin):
    builder.PrependFloat64Slot(9, rcsMin, 0.0)

def AddRcsMin(builder, rcsMin):
    OnorbitDetailsAddRcsMin(builder, rcsMin)

def OnorbitDetailsAddRcsMax(builder, rcsMax):
    builder.PrependFloat64Slot(10, rcsMax, 0.0)

def AddRcsMax(builder, rcsMax):
    OnorbitDetailsAddRcsMax(builder, rcsMax)

def OnorbitDetailsAddRcsMean(builder, rcsMean):
    builder.PrependFloat64Slot(11, rcsMean, 0.0)

def AddRcsMean(builder, rcsMean):
    OnorbitDetailsAddRcsMean(builder, rcsMean)

def OnorbitDetailsAddBolDeltaV(builder, bolDeltaV):
    builder.PrependFloat64Slot(12, bolDeltaV, 0.0)

def AddBolDeltaV(builder, bolDeltaV):
    OnorbitDetailsAddBolDeltaV(builder, bolDeltaV)

def OnorbitDetailsAddMaxDeltaV(builder, maxDeltaV):
    builder.PrependFloat64Slot(13, maxDeltaV, 0.0)

def AddMaxDeltaV(builder, maxDeltaV):
    OnorbitDetailsAddMaxDeltaV(builder, maxDeltaV)

def OnorbitDetailsAddDeltaVunc(builder, deltaVunc):
    builder.PrependFloat64Slot(14, deltaVunc, 0.0)

def AddDeltaVunc(builder, deltaVunc):
    OnorbitDetailsAddDeltaVunc(builder, deltaVunc)

def OnorbitDetailsAddEstDeltaVduration(builder, estDeltaVduration):
    builder.PrependFloat64Slot(15, estDeltaVduration, 0.0)

def AddEstDeltaVduration(builder, estDeltaVduration):
    OnorbitDetailsAddEstDeltaVduration(builder, estDeltaVduration)

def OnorbitDetailsAddNumMission(builder, numMission):
    builder.PrependInt32Slot(16, numMission, 0)

def AddNumMission(builder, numMission):
    OnorbitDetailsAddNumMission(builder, numMission)

def OnorbitDetailsAddMissionTypes(builder, missionTypes):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(missionTypes), 0)

def AddMissionTypes(builder, missionTypes):
    OnorbitDetailsAddMissionTypes(builder, missionTypes)

def OnorbitDetailsStartMissionTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMissionTypesVector(builder, numElems):
    return OnorbitDetailsStartMissionTypesVector(builder, numElems)

def OnorbitDetailsAddBusType(builder, busType):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(busType), 0)

def AddBusType(builder, busType):
    OnorbitDetailsAddBusType(builder, busType)

def OnorbitDetailsAddGeoSlot(builder, geoSlot):
    builder.PrependFloat64Slot(19, geoSlot, 0.0)

def AddGeoSlot(builder, geoSlot):
    OnorbitDetailsAddGeoSlot(builder, geoSlot)

def OnorbitDetailsAddDriftRate(builder, driftRate):
    builder.PrependFloat64Slot(20, driftRate, 0.0)

def AddDriftRate(builder, driftRate):
    OnorbitDetailsAddDriftRate(builder, driftRate)

def OnorbitDetailsAddDryMass(builder, dryMass):
    builder.PrependFloat64Slot(21, dryMass, 0.0)

def AddDryMass(builder, dryMass):
    OnorbitDetailsAddDryMass(builder, dryMass)

def OnorbitDetailsAddAdditionalMass(builder, additionalMass):
    builder.PrependFloat64Slot(22, additionalMass, 0.0)

def AddAdditionalMass(builder, additionalMass):
    OnorbitDetailsAddAdditionalMass(builder, additionalMass)

def OnorbitDetailsAddLaunchMassMin(builder, launchMassMin):
    builder.PrependFloat64Slot(23, launchMassMin, 0.0)

def AddLaunchMassMin(builder, launchMassMin):
    OnorbitDetailsAddLaunchMassMin(builder, launchMassMin)

def OnorbitDetailsAddLaunchMass(builder, launchMass):
    builder.PrependFloat64Slot(24, launchMass, 0.0)

def AddLaunchMass(builder, launchMass):
    OnorbitDetailsAddLaunchMass(builder, launchMass)

def OnorbitDetailsAddLaunchMassMax(builder, launchMassMax):
    builder.PrependFloat64Slot(25, launchMassMax, 0.0)

def AddLaunchMassMax(builder, launchMassMax):
    OnorbitDetailsAddLaunchMassMax(builder, launchMassMax)

def OnorbitDetailsAddBolFuelMass(builder, bolFuelMass):
    builder.PrependFloat64Slot(26, bolFuelMass, 0.0)

def AddBolFuelMass(builder, bolFuelMass):
    OnorbitDetailsAddBolFuelMass(builder, bolFuelMass)

def OnorbitDetailsAddCurrentMass(builder, currentMass):
    builder.PrependFloat64Slot(27, currentMass, 0.0)

def AddCurrentMass(builder, currentMass):
    OnorbitDetailsAddCurrentMass(builder, currentMass)

def OnorbitDetailsAddTotalMassUnc(builder, totalMassUnc):
    builder.PrependFloat64Slot(28, totalMassUnc, 0.0)

def AddTotalMassUnc(builder, totalMassUnc):
    OnorbitDetailsAddTotalMassUnc(builder, totalMassUnc)

def OnorbitDetailsAddSolarArrayArea(builder, solarArrayArea):
    builder.PrependFloat64Slot(29, solarArrayArea, 0.0)

def AddSolarArrayArea(builder, solarArrayArea):
    OnorbitDetailsAddSolarArrayArea(builder, solarArrayArea)

def OnorbitDetailsAddManeuverable(builder, maneuverable):
    builder.PrependBoolSlot(30, maneuverable, 0)

def AddManeuverable(builder, maneuverable):
    OnorbitDetailsAddManeuverable(builder, maneuverable)

def OnorbitDetailsAddFuelRemaining(builder, fuelRemaining):
    builder.PrependFloat64Slot(31, fuelRemaining, 0.0)

def AddFuelRemaining(builder, fuelRemaining):
    OnorbitDetailsAddFuelRemaining(builder, fuelRemaining)

def OnorbitDetailsAddCrossSection(builder, crossSection):
    builder.PrependFloat64Slot(32, crossSection, 0.0)

def AddCrossSection(builder, crossSection):
    OnorbitDetailsAddCrossSection(builder, crossSection)

def OnorbitDetailsAddBusCrossSection(builder, busCrossSection):
    builder.PrependFloat64Slot(33, busCrossSection, 0.0)

def AddBusCrossSection(builder, busCrossSection):
    OnorbitDetailsAddBusCrossSection(builder, busCrossSection)

def OnorbitDetailsAddMaxRadius(builder, maxRadius):
    builder.PrependFloat64Slot(34, maxRadius, 0.0)

def AddMaxRadius(builder, maxRadius):
    OnorbitDetailsAddMaxRadius(builder, maxRadius)

def OnorbitDetailsAddColaRadius(builder, colaRadius):
    builder.PrependFloat64Slot(35, colaRadius, 0.0)

def AddColaRadius(builder, colaRadius):
    OnorbitDetailsAddColaRadius(builder, colaRadius)

def OnorbitDetailsAddAdeptRadius(builder, adeptRadius):
    builder.PrependFloat64Slot(36, adeptRadius, 0.0)

def AddAdeptRadius(builder, adeptRadius):
    OnorbitDetailsAddAdeptRadius(builder, adeptRadius)

def OnorbitDetailsAddNumDeployable(builder, numDeployable):
    builder.PrependInt32Slot(37, numDeployable, 0)

def AddNumDeployable(builder, numDeployable):
    OnorbitDetailsAddNumDeployable(builder, numDeployable)

def OnorbitDetailsAddDepNames(builder, depNames):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(depNames), 0)

def AddDepNames(builder, depNames):
    OnorbitDetailsAddDepNames(builder, depNames)

def OnorbitDetailsStartDepNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDepNamesVector(builder, numElems):
    return OnorbitDetailsStartDepNamesVector(builder, numElems)

def OnorbitDetailsAddDepEstMasses(builder, depEstMasses):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(depEstMasses), 0)

def AddDepEstMasses(builder, depEstMasses):
    OnorbitDetailsAddDepEstMasses(builder, depEstMasses)

def OnorbitDetailsStartDepEstMassesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDepEstMassesVector(builder, numElems):
    return OnorbitDetailsStartDepEstMassesVector(builder, numElems)

def OnorbitDetailsAddDepMassUncs(builder, depMassUncs):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(depMassUncs), 0)

def AddDepMassUncs(builder, depMassUncs):
    OnorbitDetailsAddDepMassUncs(builder, depMassUncs)

def OnorbitDetailsStartDepMassUncsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDepMassUncsVector(builder, numElems):
    return OnorbitDetailsStartDepMassUncsVector(builder, numElems)

def OnorbitDetailsAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitDetailsAddSource(builder, source)

def OnorbitDetailsAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitDetailsAddOrigin(builder, origin)

def OnorbitDetailsAddLastObSource(builder, lastObSource):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(lastObSource), 0)

def AddLastObSource(builder, lastObSource):
    OnorbitDetailsAddLastObSource(builder, lastObSource)

def OnorbitDetailsAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(44, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitDetailsAddDataMode(builder, dataMode)

def OnorbitDetailsAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitDetailsAddCreatedAt(builder, createdAt)

def OnorbitDetailsAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitDetailsAddCreatedBy(builder, createdBy)

def OnorbitDetailsAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OnorbitDetailsAddUpdatedAt(builder, updatedAt)

def OnorbitDetailsAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OnorbitDetailsAddUpdatedBy(builder, updatedBy)

def OnorbitDetailsAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitDetailsAddOrigNetwork(builder, origNetwork)

def OnorbitDetailsEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitDetailsEnd(builder)

try:
    from typing import List
except:
    pass

class OnorbitDetailsT(object):

    # OnorbitDetailsT
    def __init__(self):
        self.id = None  # type: str
        self.idOnOrbit = None  # type: str
        self.classificationMarking = None  # type: str
        self.lastObTime = None  # type: str
        self.vismag = 0.0  # type: float
        self.vismagMin = 0.0  # type: float
        self.vismagMax = 0.0  # type: float
        self.vismagMean = 0.0  # type: float
        self.rcs = 0.0  # type: float
        self.rcsMin = 0.0  # type: float
        self.rcsMax = 0.0  # type: float
        self.rcsMean = 0.0  # type: float
        self.bolDeltaV = 0.0  # type: float
        self.maxDeltaV = 0.0  # type: float
        self.deltaVunc = 0.0  # type: float
        self.estDeltaVduration = 0.0  # type: float
        self.numMission = 0  # type: int
        self.missionTypes = None  # type: List[str]
        self.busType = None  # type: str
        self.geoSlot = 0.0  # type: float
        self.driftRate = 0.0  # type: float
        self.dryMass = 0.0  # type: float
        self.additionalMass = 0.0  # type: float
        self.launchMassMin = 0.0  # type: float
        self.launchMass = 0.0  # type: float
        self.launchMassMax = 0.0  # type: float
        self.bolFuelMass = 0.0  # type: float
        self.currentMass = 0.0  # type: float
        self.totalMassUnc = 0.0  # type: float
        self.solarArrayArea = 0.0  # type: float
        self.maneuverable = False  # type: bool
        self.fuelRemaining = 0.0  # type: float
        self.crossSection = 0.0  # type: float
        self.busCrossSection = 0.0  # type: float
        self.maxRadius = 0.0  # type: float
        self.colaRadius = 0.0  # type: float
        self.adeptRadius = 0.0  # type: float
        self.numDeployable = 0  # type: int
        self.depNames = None  # type: List[str]
        self.depEstMasses = None  # type: List[str]
        self.depMassUncs = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.lastObSource = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitDetails = OnorbitDetails()
        onorbitDetails.Init(buf, pos)
        return cls.InitFromObj(onorbitDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitDetails):
        x = OnorbitDetailsT()
        x._UnPack(onorbitDetails)
        return x

    # OnorbitDetailsT
    def _UnPack(self, onorbitDetails):
        if onorbitDetails is None:
            return
        self.id = onorbitDetails.Id()
        self.idOnOrbit = onorbitDetails.IdOnOrbit()
        self.classificationMarking = onorbitDetails.ClassificationMarking()
        self.lastObTime = onorbitDetails.LastObTime()
        self.vismag = onorbitDetails.Vismag()
        self.vismagMin = onorbitDetails.VismagMin()
        self.vismagMax = onorbitDetails.VismagMax()
        self.vismagMean = onorbitDetails.VismagMean()
        self.rcs = onorbitDetails.Rcs()
        self.rcsMin = onorbitDetails.RcsMin()
        self.rcsMax = onorbitDetails.RcsMax()
        self.rcsMean = onorbitDetails.RcsMean()
        self.bolDeltaV = onorbitDetails.BolDeltaV()
        self.maxDeltaV = onorbitDetails.MaxDeltaV()
        self.deltaVunc = onorbitDetails.DeltaVunc()
        self.estDeltaVduration = onorbitDetails.EstDeltaVduration()
        self.numMission = onorbitDetails.NumMission()
        if not onorbitDetails.MissionTypesIsNone():
            self.missionTypes = []
            for i in range(onorbitDetails.MissionTypesLength()):
                self.missionTypes.append(onorbitDetails.MissionTypes(i))
        self.busType = onorbitDetails.BusType()
        self.geoSlot = onorbitDetails.GeoSlot()
        self.driftRate = onorbitDetails.DriftRate()
        self.dryMass = onorbitDetails.DryMass()
        self.additionalMass = onorbitDetails.AdditionalMass()
        self.launchMassMin = onorbitDetails.LaunchMassMin()
        self.launchMass = onorbitDetails.LaunchMass()
        self.launchMassMax = onorbitDetails.LaunchMassMax()
        self.bolFuelMass = onorbitDetails.BolFuelMass()
        self.currentMass = onorbitDetails.CurrentMass()
        self.totalMassUnc = onorbitDetails.TotalMassUnc()
        self.solarArrayArea = onorbitDetails.SolarArrayArea()
        self.maneuverable = onorbitDetails.Maneuverable()
        self.fuelRemaining = onorbitDetails.FuelRemaining()
        self.crossSection = onorbitDetails.CrossSection()
        self.busCrossSection = onorbitDetails.BusCrossSection()
        self.maxRadius = onorbitDetails.MaxRadius()
        self.colaRadius = onorbitDetails.ColaRadius()
        self.adeptRadius = onorbitDetails.AdeptRadius()
        self.numDeployable = onorbitDetails.NumDeployable()
        if not onorbitDetails.DepNamesIsNone():
            self.depNames = []
            for i in range(onorbitDetails.DepNamesLength()):
                self.depNames.append(onorbitDetails.DepNames(i))
        if not onorbitDetails.DepEstMassesIsNone():
            self.depEstMasses = []
            for i in range(onorbitDetails.DepEstMassesLength()):
                self.depEstMasses.append(onorbitDetails.DepEstMasses(i))
        if not onorbitDetails.DepMassUncsIsNone():
            self.depMassUncs = []
            for i in range(onorbitDetails.DepMassUncsLength()):
                self.depMassUncs.append(onorbitDetails.DepMassUncs(i))
        self.source = onorbitDetails.Source()
        self.origin = onorbitDetails.Origin()
        self.lastObSource = onorbitDetails.LastObSource()
        self.dataMode = onorbitDetails.DataMode()
        self.createdAt = onorbitDetails.CreatedAt()
        self.createdBy = onorbitDetails.CreatedBy()
        self.updatedAt = onorbitDetails.UpdatedAt()
        self.updatedBy = onorbitDetails.UpdatedBy()
        self.origNetwork = onorbitDetails.OrigNetwork()

    # OnorbitDetailsT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.lastObTime is not None:
            lastObTime = builder.CreateString(self.lastObTime)
        if self.missionTypes is not None:
            missionTypeslist = []
            for i in range(len(self.missionTypes)):
                missionTypeslist.append(builder.CreateString(self.missionTypes[i]))
            OnorbitDetailsStartMissionTypesVector(builder, len(self.missionTypes))
            for i in reversed(range(len(self.missionTypes))):
                builder.PrependUOffsetTRelative(missionTypeslist[i])
            missionTypes = builder.EndVector()
        if self.busType is not None:
            busType = builder.CreateString(self.busType)
        if self.depNames is not None:
            depNameslist = []
            for i in range(len(self.depNames)):
                depNameslist.append(builder.CreateString(self.depNames[i]))
            OnorbitDetailsStartDepNamesVector(builder, len(self.depNames))
            for i in reversed(range(len(self.depNames))):
                builder.PrependUOffsetTRelative(depNameslist[i])
            depNames = builder.EndVector()
        if self.depEstMasses is not None:
            depEstMasseslist = []
            for i in range(len(self.depEstMasses)):
                depEstMasseslist.append(builder.CreateString(self.depEstMasses[i]))
            OnorbitDetailsStartDepEstMassesVector(builder, len(self.depEstMasses))
            for i in reversed(range(len(self.depEstMasses))):
                builder.PrependUOffsetTRelative(depEstMasseslist[i])
            depEstMasses = builder.EndVector()
        if self.depMassUncs is not None:
            depMassUncslist = []
            for i in range(len(self.depMassUncs)):
                depMassUncslist.append(builder.CreateString(self.depMassUncs[i]))
            OnorbitDetailsStartDepMassUncsVector(builder, len(self.depMassUncs))
            for i in reversed(range(len(self.depMassUncs))):
                builder.PrependUOffsetTRelative(depMassUncslist[i])
            depMassUncs = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.lastObSource is not None:
            lastObSource = builder.CreateString(self.lastObSource)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitDetailsStart(builder)
        if self.id is not None:
            OnorbitDetailsAddId(builder, id)
        if self.idOnOrbit is not None:
            OnorbitDetailsAddIdOnOrbit(builder, idOnOrbit)
        if self.classificationMarking is not None:
            OnorbitDetailsAddClassificationMarking(builder, classificationMarking)
        if self.lastObTime is not None:
            OnorbitDetailsAddLastObTime(builder, lastObTime)
        OnorbitDetailsAddVismag(builder, self.vismag)
        OnorbitDetailsAddVismagMin(builder, self.vismagMin)
        OnorbitDetailsAddVismagMax(builder, self.vismagMax)
        OnorbitDetailsAddVismagMean(builder, self.vismagMean)
        OnorbitDetailsAddRcs(builder, self.rcs)
        OnorbitDetailsAddRcsMin(builder, self.rcsMin)
        OnorbitDetailsAddRcsMax(builder, self.rcsMax)
        OnorbitDetailsAddRcsMean(builder, self.rcsMean)
        OnorbitDetailsAddBolDeltaV(builder, self.bolDeltaV)
        OnorbitDetailsAddMaxDeltaV(builder, self.maxDeltaV)
        OnorbitDetailsAddDeltaVunc(builder, self.deltaVunc)
        OnorbitDetailsAddEstDeltaVduration(builder, self.estDeltaVduration)
        OnorbitDetailsAddNumMission(builder, self.numMission)
        if self.missionTypes is not None:
            OnorbitDetailsAddMissionTypes(builder, missionTypes)
        if self.busType is not None:
            OnorbitDetailsAddBusType(builder, busType)
        OnorbitDetailsAddGeoSlot(builder, self.geoSlot)
        OnorbitDetailsAddDriftRate(builder, self.driftRate)
        OnorbitDetailsAddDryMass(builder, self.dryMass)
        OnorbitDetailsAddAdditionalMass(builder, self.additionalMass)
        OnorbitDetailsAddLaunchMassMin(builder, self.launchMassMin)
        OnorbitDetailsAddLaunchMass(builder, self.launchMass)
        OnorbitDetailsAddLaunchMassMax(builder, self.launchMassMax)
        OnorbitDetailsAddBolFuelMass(builder, self.bolFuelMass)
        OnorbitDetailsAddCurrentMass(builder, self.currentMass)
        OnorbitDetailsAddTotalMassUnc(builder, self.totalMassUnc)
        OnorbitDetailsAddSolarArrayArea(builder, self.solarArrayArea)
        OnorbitDetailsAddManeuverable(builder, self.maneuverable)
        OnorbitDetailsAddFuelRemaining(builder, self.fuelRemaining)
        OnorbitDetailsAddCrossSection(builder, self.crossSection)
        OnorbitDetailsAddBusCrossSection(builder, self.busCrossSection)
        OnorbitDetailsAddMaxRadius(builder, self.maxRadius)
        OnorbitDetailsAddColaRadius(builder, self.colaRadius)
        OnorbitDetailsAddAdeptRadius(builder, self.adeptRadius)
        OnorbitDetailsAddNumDeployable(builder, self.numDeployable)
        if self.depNames is not None:
            OnorbitDetailsAddDepNames(builder, depNames)
        if self.depEstMasses is not None:
            OnorbitDetailsAddDepEstMasses(builder, depEstMasses)
        if self.depMassUncs is not None:
            OnorbitDetailsAddDepMassUncs(builder, depMassUncs)
        if self.source is not None:
            OnorbitDetailsAddSource(builder, source)
        if self.origin is not None:
            OnorbitDetailsAddOrigin(builder, origin)
        if self.lastObSource is not None:
            OnorbitDetailsAddLastObSource(builder, lastObSource)
        OnorbitDetailsAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            OnorbitDetailsAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitDetailsAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OnorbitDetailsAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OnorbitDetailsAddUpdatedBy(builder, updatedBy)
        if self.origNetwork is not None:
            OnorbitDetailsAddOrigNetwork(builder, origNetwork)
        onorbitDetails = OnorbitDetailsEnd(builder)
        return onorbitDetails
