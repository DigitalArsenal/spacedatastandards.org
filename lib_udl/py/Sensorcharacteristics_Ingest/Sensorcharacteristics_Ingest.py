# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of characteristics and capabilities of a sensor.
class Sensorcharacteristics_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sensorcharacteristics_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorcharacteristics_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Sensorcharacteristics_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # Sensorcharacteristics_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSORCHARACTERISTICS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Sensorcharacteristics_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Sensorcharacteristics_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Sensorcharacteristics_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensorcharacteristics_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Azimuth rate acquisition limit (rad/min).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def AzimuthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Elevation rate acquisition limit (rad/min).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def ElevationRateGeolm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum range measurement capability of the sensor (km).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MinRangeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MaxRangeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def LeftClockAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def RightClockAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle of the center of a phased array sensor.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Boresight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of degrees off of the boresight for the sensor (degrees).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def BoresightOffAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Negative Range-rate/relative velocity limit (km/sec).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def NegativeRangeRateLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Positive Range-rate/relative velocity limit (km/sec).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def PositiveRangeRateLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Absolute magnitude acquisition limit for optical sensors.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MagnitudeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def TrackAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MinSignalNoiseRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
    # Example: /// Example: 3.1
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def FanBeamWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum taskable range of the sensor (km).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def TaskableRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum observable sensor range (km).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MaxObservableRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radio frequency (if sensor is RF).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def RadioFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radar frequency of the sensor (if a radar sensor).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def RadarFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radar transmit power in Watts.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def TransmitPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Horizontal field of view.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def HFov(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vertical field of view.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def VFov(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Horizontal pixel resolution.
    # Example: /// Example: 1000
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def HResPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Vertical pixel resolution.
    # Example: /// Example: 1000
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def VResPixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Sensor band.
    # Example: /// Example: BAND
    # Constraints: Minimum length = 0, Maximum length = 36
    # Sensorcharacteristics_Ingest
    def Band(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Max deviation angle of the sensor in degrees.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MaxDeviationAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optical sensor camera aperture.
    # Example: /// Example: 2.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Aperture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Leftmost GEO belt longitude limit for this sensor (if applicable).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def LeftGeoBeltLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rightmost GEO belt longitude limit for this sensor (if applicable).
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def RightGeoBeltLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def AsrScanRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
    # Example: /// Example: 1.4
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def K(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, the focal point elevation of the radar at the site, in meters.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def FocalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For tower sensors, the physical height of the sensor tower, in meters.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def TowerHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def TrueNorthCorrector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Angle between magnetic north and true north at the sensor site, in degrees.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def MagDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Z1MinRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Z2MinRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Z1MaxRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Z2MaxRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, radar maximum unambiguous range, in km.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def RadarMur(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def ProbFalseAlarm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def Prf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def RadarPulseWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For radar based sensors, number of integrated pulses in a transmit cycle.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def NumIntegratedPulses(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Antenna true tilt, in degrees.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def TrueTilt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Message data format transmitted by the sensor digitizer.
    # Example: /// Example: DATA_FORMAT
    # Constraints: Minimum length = 0, Maximum length = 32
    # Sensorcharacteristics_Ingest
    def RadarMessageFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
    # Example: /// Example: 3.5
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def SystemNoiseTemperature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensorcharacteristics_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensorcharacteristics_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensorcharacteristics_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensorcharacteristics_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Sensorcharacteristics_IngestStart(builder):
    builder.StartObject(54)

def Start(builder):
    Sensorcharacteristics_IngestStart(builder)

def Sensorcharacteristics_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Sensorcharacteristics_IngestAddId(builder, id)

def Sensorcharacteristics_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    Sensorcharacteristics_IngestAddIdSensor(builder, idSensor)

def Sensorcharacteristics_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Sensorcharacteristics_IngestAddClassificationMarking(builder, classificationMarking)

def Sensorcharacteristics_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Sensorcharacteristics_IngestAddOrigNetwork(builder, origNetwork)

def Sensorcharacteristics_IngestAddAzimuthRate(builder, azimuthRate):
    builder.PrependFloat64Slot(4, azimuthRate, 0.0)

def AddAzimuthRate(builder, azimuthRate):
    Sensorcharacteristics_IngestAddAzimuthRate(builder, azimuthRate)

def Sensorcharacteristics_IngestAddElevationRateGeolm(builder, elevationRateGeolm):
    builder.PrependFloat64Slot(5, elevationRateGeolm, 0.0)

def AddElevationRateGeolm(builder, elevationRateGeolm):
    Sensorcharacteristics_IngestAddElevationRateGeolm(builder, elevationRateGeolm)

def Sensorcharacteristics_IngestAddMinRangeLimit(builder, minRangeLimit):
    builder.PrependFloat64Slot(6, minRangeLimit, 0.0)

def AddMinRangeLimit(builder, minRangeLimit):
    Sensorcharacteristics_IngestAddMinRangeLimit(builder, minRangeLimit)

def Sensorcharacteristics_IngestAddMaxRangeLimit(builder, maxRangeLimit):
    builder.PrependFloat64Slot(7, maxRangeLimit, 0.0)

def AddMaxRangeLimit(builder, maxRangeLimit):
    Sensorcharacteristics_IngestAddMaxRangeLimit(builder, maxRangeLimit)

def Sensorcharacteristics_IngestAddLeftClockAngle(builder, leftClockAngle):
    builder.PrependFloat64Slot(8, leftClockAngle, 0.0)

def AddLeftClockAngle(builder, leftClockAngle):
    Sensorcharacteristics_IngestAddLeftClockAngle(builder, leftClockAngle)

def Sensorcharacteristics_IngestAddRightClockAngle(builder, rightClockAngle):
    builder.PrependFloat64Slot(9, rightClockAngle, 0.0)

def AddRightClockAngle(builder, rightClockAngle):
    Sensorcharacteristics_IngestAddRightClockAngle(builder, rightClockAngle)

def Sensorcharacteristics_IngestAddBoresight(builder, boresight):
    builder.PrependFloat64Slot(10, boresight, 0.0)

def AddBoresight(builder, boresight):
    Sensorcharacteristics_IngestAddBoresight(builder, boresight)

def Sensorcharacteristics_IngestAddBoresightOffAngle(builder, boresightOffAngle):
    builder.PrependFloat64Slot(11, boresightOffAngle, 0.0)

def AddBoresightOffAngle(builder, boresightOffAngle):
    Sensorcharacteristics_IngestAddBoresightOffAngle(builder, boresightOffAngle)

def Sensorcharacteristics_IngestAddNegativeRangeRateLimit(builder, negativeRangeRateLimit):
    builder.PrependFloat64Slot(12, negativeRangeRateLimit, 0.0)

def AddNegativeRangeRateLimit(builder, negativeRangeRateLimit):
    Sensorcharacteristics_IngestAddNegativeRangeRateLimit(builder, negativeRangeRateLimit)

def Sensorcharacteristics_IngestAddPositiveRangeRateLimit(builder, positiveRangeRateLimit):
    builder.PrependFloat64Slot(13, positiveRangeRateLimit, 0.0)

def AddPositiveRangeRateLimit(builder, positiveRangeRateLimit):
    Sensorcharacteristics_IngestAddPositiveRangeRateLimit(builder, positiveRangeRateLimit)

def Sensorcharacteristics_IngestAddMagnitudeLimit(builder, magnitudeLimit):
    builder.PrependFloat64Slot(14, magnitudeLimit, 0.0)

def AddMagnitudeLimit(builder, magnitudeLimit):
    Sensorcharacteristics_IngestAddMagnitudeLimit(builder, magnitudeLimit)

def Sensorcharacteristics_IngestAddTrackAngle(builder, trackAngle):
    builder.PrependFloat64Slot(15, trackAngle, 0.0)

def AddTrackAngle(builder, trackAngle):
    Sensorcharacteristics_IngestAddTrackAngle(builder, trackAngle)

def Sensorcharacteristics_IngestAddMinSignalNoiseRatio(builder, minSignalNoiseRatio):
    builder.PrependFloat64Slot(16, minSignalNoiseRatio, 0.0)

def AddMinSignalNoiseRatio(builder, minSignalNoiseRatio):
    Sensorcharacteristics_IngestAddMinSignalNoiseRatio(builder, minSignalNoiseRatio)

def Sensorcharacteristics_IngestAddFanBeamWidth(builder, fanBeamWidth):
    builder.PrependFloat64Slot(17, fanBeamWidth, 0.0)

def AddFanBeamWidth(builder, fanBeamWidth):
    Sensorcharacteristics_IngestAddFanBeamWidth(builder, fanBeamWidth)

def Sensorcharacteristics_IngestAddTaskableRange(builder, taskableRange):
    builder.PrependFloat64Slot(18, taskableRange, 0.0)

def AddTaskableRange(builder, taskableRange):
    Sensorcharacteristics_IngestAddTaskableRange(builder, taskableRange)

def Sensorcharacteristics_IngestAddMaxObservableRange(builder, maxObservableRange):
    builder.PrependFloat64Slot(19, maxObservableRange, 0.0)

def AddMaxObservableRange(builder, maxObservableRange):
    Sensorcharacteristics_IngestAddMaxObservableRange(builder, maxObservableRange)

def Sensorcharacteristics_IngestAddRadioFrequency(builder, radioFrequency):
    builder.PrependFloat64Slot(20, radioFrequency, 0.0)

def AddRadioFrequency(builder, radioFrequency):
    Sensorcharacteristics_IngestAddRadioFrequency(builder, radioFrequency)

def Sensorcharacteristics_IngestAddRadarFrequency(builder, radarFrequency):
    builder.PrependFloat64Slot(21, radarFrequency, 0.0)

def AddRadarFrequency(builder, radarFrequency):
    Sensorcharacteristics_IngestAddRadarFrequency(builder, radarFrequency)

def Sensorcharacteristics_IngestAddTransmitPower(builder, transmitPower):
    builder.PrependFloat64Slot(22, transmitPower, 0.0)

def AddTransmitPower(builder, transmitPower):
    Sensorcharacteristics_IngestAddTransmitPower(builder, transmitPower)

def Sensorcharacteristics_IngestAddHFov(builder, hFov):
    builder.PrependFloat64Slot(23, hFov, 0.0)

def AddHFov(builder, hFov):
    Sensorcharacteristics_IngestAddHFov(builder, hFov)

def Sensorcharacteristics_IngestAddVFov(builder, vFov):
    builder.PrependFloat64Slot(24, vFov, 0.0)

def AddVFov(builder, vFov):
    Sensorcharacteristics_IngestAddVFov(builder, vFov)

def Sensorcharacteristics_IngestAddHResPixels(builder, hResPixels):
    builder.PrependInt32Slot(25, hResPixels, 0)

def AddHResPixels(builder, hResPixels):
    Sensorcharacteristics_IngestAddHResPixels(builder, hResPixels)

def Sensorcharacteristics_IngestAddVResPixels(builder, vResPixels):
    builder.PrependInt32Slot(26, vResPixels, 0)

def AddVResPixels(builder, vResPixels):
    Sensorcharacteristics_IngestAddVResPixels(builder, vResPixels)

def Sensorcharacteristics_IngestAddBand(builder, band):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(band), 0)

def AddBand(builder, band):
    Sensorcharacteristics_IngestAddBand(builder, band)

def Sensorcharacteristics_IngestAddMaxDeviationAngle(builder, maxDeviationAngle):
    builder.PrependFloat64Slot(28, maxDeviationAngle, 0.0)

def AddMaxDeviationAngle(builder, maxDeviationAngle):
    Sensorcharacteristics_IngestAddMaxDeviationAngle(builder, maxDeviationAngle)

def Sensorcharacteristics_IngestAddAperture(builder, aperture):
    builder.PrependFloat64Slot(29, aperture, 0.0)

def AddAperture(builder, aperture):
    Sensorcharacteristics_IngestAddAperture(builder, aperture)

def Sensorcharacteristics_IngestAddLeftGeoBeltLimit(builder, leftGeoBeltLimit):
    builder.PrependFloat64Slot(30, leftGeoBeltLimit, 0.0)

def AddLeftGeoBeltLimit(builder, leftGeoBeltLimit):
    Sensorcharacteristics_IngestAddLeftGeoBeltLimit(builder, leftGeoBeltLimit)

def Sensorcharacteristics_IngestAddRightGeoBeltLimit(builder, rightGeoBeltLimit):
    builder.PrependFloat64Slot(31, rightGeoBeltLimit, 0.0)

def AddRightGeoBeltLimit(builder, rightGeoBeltLimit):
    Sensorcharacteristics_IngestAddRightGeoBeltLimit(builder, rightGeoBeltLimit)

def Sensorcharacteristics_IngestAddAsrScanRate(builder, asrScanRate):
    builder.PrependFloat64Slot(32, asrScanRate, 0.0)

def AddAsrScanRate(builder, asrScanRate):
    Sensorcharacteristics_IngestAddAsrScanRate(builder, asrScanRate)

def Sensorcharacteristics_IngestAddK(builder, k):
    builder.PrependFloat64Slot(33, k, 0.0)

def AddK(builder, k):
    Sensorcharacteristics_IngestAddK(builder, k)

def Sensorcharacteristics_IngestAddFocalPoint(builder, focalPoint):
    builder.PrependFloat64Slot(34, focalPoint, 0.0)

def AddFocalPoint(builder, focalPoint):
    Sensorcharacteristics_IngestAddFocalPoint(builder, focalPoint)

def Sensorcharacteristics_IngestAddTowerHeight(builder, towerHeight):
    builder.PrependFloat64Slot(35, towerHeight, 0.0)

def AddTowerHeight(builder, towerHeight):
    Sensorcharacteristics_IngestAddTowerHeight(builder, towerHeight)

def Sensorcharacteristics_IngestAddTrueNorthCorrector(builder, trueNorthCorrector):
    builder.PrependInt32Slot(36, trueNorthCorrector, 0)

def AddTrueNorthCorrector(builder, trueNorthCorrector):
    Sensorcharacteristics_IngestAddTrueNorthCorrector(builder, trueNorthCorrector)

def Sensorcharacteristics_IngestAddMagDec(builder, magDec):
    builder.PrependFloat64Slot(37, magDec, 0.0)

def AddMagDec(builder, magDec):
    Sensorcharacteristics_IngestAddMagDec(builder, magDec)

def Sensorcharacteristics_IngestAddZ1MinRange(builder, z1MinRange):
    builder.PrependFloat64Slot(38, z1MinRange, 0.0)

def AddZ1MinRange(builder, z1MinRange):
    Sensorcharacteristics_IngestAddZ1MinRange(builder, z1MinRange)

def Sensorcharacteristics_IngestAddZ2MinRange(builder, z2MinRange):
    builder.PrependFloat64Slot(39, z2MinRange, 0.0)

def AddZ2MinRange(builder, z2MinRange):
    Sensorcharacteristics_IngestAddZ2MinRange(builder, z2MinRange)

def Sensorcharacteristics_IngestAddZ1MaxRange(builder, z1MaxRange):
    builder.PrependFloat64Slot(40, z1MaxRange, 0.0)

def AddZ1MaxRange(builder, z1MaxRange):
    Sensorcharacteristics_IngestAddZ1MaxRange(builder, z1MaxRange)

def Sensorcharacteristics_IngestAddZ2MaxRange(builder, z2MaxRange):
    builder.PrependFloat64Slot(41, z2MaxRange, 0.0)

def AddZ2MaxRange(builder, z2MaxRange):
    Sensorcharacteristics_IngestAddZ2MaxRange(builder, z2MaxRange)

def Sensorcharacteristics_IngestAddRadarMur(builder, radarMur):
    builder.PrependFloat64Slot(42, radarMur, 0.0)

def AddRadarMur(builder, radarMur):
    Sensorcharacteristics_IngestAddRadarMur(builder, radarMur)

def Sensorcharacteristics_IngestAddProbFalseAlarm(builder, probFalseAlarm):
    builder.PrependFloat64Slot(43, probFalseAlarm, 0.0)

def AddProbFalseAlarm(builder, probFalseAlarm):
    Sensorcharacteristics_IngestAddProbFalseAlarm(builder, probFalseAlarm)

def Sensorcharacteristics_IngestAddPrf(builder, prf):
    builder.PrependFloat64Slot(44, prf, 0.0)

def AddPrf(builder, prf):
    Sensorcharacteristics_IngestAddPrf(builder, prf)

def Sensorcharacteristics_IngestAddRadarPulseWidth(builder, radarPulseWidth):
    builder.PrependFloat64Slot(45, radarPulseWidth, 0.0)

def AddRadarPulseWidth(builder, radarPulseWidth):
    Sensorcharacteristics_IngestAddRadarPulseWidth(builder, radarPulseWidth)

def Sensorcharacteristics_IngestAddNumIntegratedPulses(builder, numIntegratedPulses):
    builder.PrependInt32Slot(46, numIntegratedPulses, 0)

def AddNumIntegratedPulses(builder, numIntegratedPulses):
    Sensorcharacteristics_IngestAddNumIntegratedPulses(builder, numIntegratedPulses)

def Sensorcharacteristics_IngestAddTrueTilt(builder, trueTilt):
    builder.PrependFloat64Slot(47, trueTilt, 0.0)

def AddTrueTilt(builder, trueTilt):
    Sensorcharacteristics_IngestAddTrueTilt(builder, trueTilt)

def Sensorcharacteristics_IngestAddRadarMessageFormat(builder, radarMessageFormat):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(radarMessageFormat), 0)

def AddRadarMessageFormat(builder, radarMessageFormat):
    Sensorcharacteristics_IngestAddRadarMessageFormat(builder, radarMessageFormat)

def Sensorcharacteristics_IngestAddSystemNoiseTemperature(builder, systemNoiseTemperature):
    builder.PrependFloat64Slot(49, systemNoiseTemperature, 0.0)

def AddSystemNoiseTemperature(builder, systemNoiseTemperature):
    Sensorcharacteristics_IngestAddSystemNoiseTemperature(builder, systemNoiseTemperature)

def Sensorcharacteristics_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Sensorcharacteristics_IngestAddSource(builder, source)

def Sensorcharacteristics_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(51, dataMode, 0)

def AddDataMode(builder, dataMode):
    Sensorcharacteristics_IngestAddDataMode(builder, dataMode)

def Sensorcharacteristics_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Sensorcharacteristics_IngestAddCreatedAt(builder, createdAt)

def Sensorcharacteristics_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Sensorcharacteristics_IngestAddCreatedBy(builder, createdBy)

def Sensorcharacteristics_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Sensorcharacteristics_IngestEnd(builder)


class Sensorcharacteristics_IngestT(object):

    # Sensorcharacteristics_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.idSensor = None  # type: str
        self.classificationMarking = None  # type: str
        self.origNetwork = None  # type: str
        self.azimuthRate = 0.0  # type: float
        self.elevationRateGeolm = 0.0  # type: float
        self.minRangeLimit = 0.0  # type: float
        self.maxRangeLimit = 0.0  # type: float
        self.leftClockAngle = 0.0  # type: float
        self.rightClockAngle = 0.0  # type: float
        self.boresight = 0.0  # type: float
        self.boresightOffAngle = 0.0  # type: float
        self.negativeRangeRateLimit = 0.0  # type: float
        self.positiveRangeRateLimit = 0.0  # type: float
        self.magnitudeLimit = 0.0  # type: float
        self.trackAngle = 0.0  # type: float
        self.minSignalNoiseRatio = 0.0  # type: float
        self.fanBeamWidth = 0.0  # type: float
        self.taskableRange = 0.0  # type: float
        self.maxObservableRange = 0.0  # type: float
        self.radioFrequency = 0.0  # type: float
        self.radarFrequency = 0.0  # type: float
        self.transmitPower = 0.0  # type: float
        self.hFov = 0.0  # type: float
        self.vFov = 0.0  # type: float
        self.hResPixels = 0  # type: int
        self.vResPixels = 0  # type: int
        self.band = None  # type: str
        self.maxDeviationAngle = 0.0  # type: float
        self.aperture = 0.0  # type: float
        self.leftGeoBeltLimit = 0.0  # type: float
        self.rightGeoBeltLimit = 0.0  # type: float
        self.asrScanRate = 0.0  # type: float
        self.k = 0.0  # type: float
        self.focalPoint = 0.0  # type: float
        self.towerHeight = 0.0  # type: float
        self.trueNorthCorrector = 0  # type: int
        self.magDec = 0.0  # type: float
        self.z1MinRange = 0.0  # type: float
        self.z2MinRange = 0.0  # type: float
        self.z1MaxRange = 0.0  # type: float
        self.z2MaxRange = 0.0  # type: float
        self.radarMur = 0.0  # type: float
        self.probFalseAlarm = 0.0  # type: float
        self.prf = 0.0  # type: float
        self.radarPulseWidth = 0.0  # type: float
        self.numIntegratedPulses = 0  # type: int
        self.trueTilt = 0.0  # type: float
        self.radarMessageFormat = None  # type: str
        self.systemNoiseTemperature = 0.0  # type: float
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorcharacteristicsIngest = Sensorcharacteristics_Ingest()
        sensorcharacteristicsIngest.Init(buf, pos)
        return cls.InitFromObj(sensorcharacteristicsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorcharacteristicsIngest):
        x = Sensorcharacteristics_IngestT()
        x._UnPack(sensorcharacteristicsIngest)
        return x

    # Sensorcharacteristics_IngestT
    def _UnPack(self, sensorcharacteristicsIngest):
        if sensorcharacteristicsIngest is None:
            return
        self.id = sensorcharacteristicsIngest.Id()
        self.idSensor = sensorcharacteristicsIngest.IdSensor()
        self.classificationMarking = sensorcharacteristicsIngest.ClassificationMarking()
        self.origNetwork = sensorcharacteristicsIngest.OrigNetwork()
        self.azimuthRate = sensorcharacteristicsIngest.AzimuthRate()
        self.elevationRateGeolm = sensorcharacteristicsIngest.ElevationRateGeolm()
        self.minRangeLimit = sensorcharacteristicsIngest.MinRangeLimit()
        self.maxRangeLimit = sensorcharacteristicsIngest.MaxRangeLimit()
        self.leftClockAngle = sensorcharacteristicsIngest.LeftClockAngle()
        self.rightClockAngle = sensorcharacteristicsIngest.RightClockAngle()
        self.boresight = sensorcharacteristicsIngest.Boresight()
        self.boresightOffAngle = sensorcharacteristicsIngest.BoresightOffAngle()
        self.negativeRangeRateLimit = sensorcharacteristicsIngest.NegativeRangeRateLimit()
        self.positiveRangeRateLimit = sensorcharacteristicsIngest.PositiveRangeRateLimit()
        self.magnitudeLimit = sensorcharacteristicsIngest.MagnitudeLimit()
        self.trackAngle = sensorcharacteristicsIngest.TrackAngle()
        self.minSignalNoiseRatio = sensorcharacteristicsIngest.MinSignalNoiseRatio()
        self.fanBeamWidth = sensorcharacteristicsIngest.FanBeamWidth()
        self.taskableRange = sensorcharacteristicsIngest.TaskableRange()
        self.maxObservableRange = sensorcharacteristicsIngest.MaxObservableRange()
        self.radioFrequency = sensorcharacteristicsIngest.RadioFrequency()
        self.radarFrequency = sensorcharacteristicsIngest.RadarFrequency()
        self.transmitPower = sensorcharacteristicsIngest.TransmitPower()
        self.hFov = sensorcharacteristicsIngest.HFov()
        self.vFov = sensorcharacteristicsIngest.VFov()
        self.hResPixels = sensorcharacteristicsIngest.HResPixels()
        self.vResPixels = sensorcharacteristicsIngest.VResPixels()
        self.band = sensorcharacteristicsIngest.Band()
        self.maxDeviationAngle = sensorcharacteristicsIngest.MaxDeviationAngle()
        self.aperture = sensorcharacteristicsIngest.Aperture()
        self.leftGeoBeltLimit = sensorcharacteristicsIngest.LeftGeoBeltLimit()
        self.rightGeoBeltLimit = sensorcharacteristicsIngest.RightGeoBeltLimit()
        self.asrScanRate = sensorcharacteristicsIngest.AsrScanRate()
        self.k = sensorcharacteristicsIngest.K()
        self.focalPoint = sensorcharacteristicsIngest.FocalPoint()
        self.towerHeight = sensorcharacteristicsIngest.TowerHeight()
        self.trueNorthCorrector = sensorcharacteristicsIngest.TrueNorthCorrector()
        self.magDec = sensorcharacteristicsIngest.MagDec()
        self.z1MinRange = sensorcharacteristicsIngest.Z1MinRange()
        self.z2MinRange = sensorcharacteristicsIngest.Z2MinRange()
        self.z1MaxRange = sensorcharacteristicsIngest.Z1MaxRange()
        self.z2MaxRange = sensorcharacteristicsIngest.Z2MaxRange()
        self.radarMur = sensorcharacteristicsIngest.RadarMur()
        self.probFalseAlarm = sensorcharacteristicsIngest.ProbFalseAlarm()
        self.prf = sensorcharacteristicsIngest.Prf()
        self.radarPulseWidth = sensorcharacteristicsIngest.RadarPulseWidth()
        self.numIntegratedPulses = sensorcharacteristicsIngest.NumIntegratedPulses()
        self.trueTilt = sensorcharacteristicsIngest.TrueTilt()
        self.radarMessageFormat = sensorcharacteristicsIngest.RadarMessageFormat()
        self.systemNoiseTemperature = sensorcharacteristicsIngest.SystemNoiseTemperature()
        self.source = sensorcharacteristicsIngest.Source()
        self.dataMode = sensorcharacteristicsIngest.DataMode()
        self.createdAt = sensorcharacteristicsIngest.CreatedAt()
        self.createdBy = sensorcharacteristicsIngest.CreatedBy()

    # Sensorcharacteristics_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.band is not None:
            band = builder.CreateString(self.band)
        if self.radarMessageFormat is not None:
            radarMessageFormat = builder.CreateString(self.radarMessageFormat)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        Sensorcharacteristics_IngestStart(builder)
        if self.id is not None:
            Sensorcharacteristics_IngestAddId(builder, id)
        if self.idSensor is not None:
            Sensorcharacteristics_IngestAddIdSensor(builder, idSensor)
        if self.classificationMarking is not None:
            Sensorcharacteristics_IngestAddClassificationMarking(builder, classificationMarking)
        if self.origNetwork is not None:
            Sensorcharacteristics_IngestAddOrigNetwork(builder, origNetwork)
        Sensorcharacteristics_IngestAddAzimuthRate(builder, self.azimuthRate)
        Sensorcharacteristics_IngestAddElevationRateGeolm(builder, self.elevationRateGeolm)
        Sensorcharacteristics_IngestAddMinRangeLimit(builder, self.minRangeLimit)
        Sensorcharacteristics_IngestAddMaxRangeLimit(builder, self.maxRangeLimit)
        Sensorcharacteristics_IngestAddLeftClockAngle(builder, self.leftClockAngle)
        Sensorcharacteristics_IngestAddRightClockAngle(builder, self.rightClockAngle)
        Sensorcharacteristics_IngestAddBoresight(builder, self.boresight)
        Sensorcharacteristics_IngestAddBoresightOffAngle(builder, self.boresightOffAngle)
        Sensorcharacteristics_IngestAddNegativeRangeRateLimit(builder, self.negativeRangeRateLimit)
        Sensorcharacteristics_IngestAddPositiveRangeRateLimit(builder, self.positiveRangeRateLimit)
        Sensorcharacteristics_IngestAddMagnitudeLimit(builder, self.magnitudeLimit)
        Sensorcharacteristics_IngestAddTrackAngle(builder, self.trackAngle)
        Sensorcharacteristics_IngestAddMinSignalNoiseRatio(builder, self.minSignalNoiseRatio)
        Sensorcharacteristics_IngestAddFanBeamWidth(builder, self.fanBeamWidth)
        Sensorcharacteristics_IngestAddTaskableRange(builder, self.taskableRange)
        Sensorcharacteristics_IngestAddMaxObservableRange(builder, self.maxObservableRange)
        Sensorcharacteristics_IngestAddRadioFrequency(builder, self.radioFrequency)
        Sensorcharacteristics_IngestAddRadarFrequency(builder, self.radarFrequency)
        Sensorcharacteristics_IngestAddTransmitPower(builder, self.transmitPower)
        Sensorcharacteristics_IngestAddHFov(builder, self.hFov)
        Sensorcharacteristics_IngestAddVFov(builder, self.vFov)
        Sensorcharacteristics_IngestAddHResPixels(builder, self.hResPixels)
        Sensorcharacteristics_IngestAddVResPixels(builder, self.vResPixels)
        if self.band is not None:
            Sensorcharacteristics_IngestAddBand(builder, band)
        Sensorcharacteristics_IngestAddMaxDeviationAngle(builder, self.maxDeviationAngle)
        Sensorcharacteristics_IngestAddAperture(builder, self.aperture)
        Sensorcharacteristics_IngestAddLeftGeoBeltLimit(builder, self.leftGeoBeltLimit)
        Sensorcharacteristics_IngestAddRightGeoBeltLimit(builder, self.rightGeoBeltLimit)
        Sensorcharacteristics_IngestAddAsrScanRate(builder, self.asrScanRate)
        Sensorcharacteristics_IngestAddK(builder, self.k)
        Sensorcharacteristics_IngestAddFocalPoint(builder, self.focalPoint)
        Sensorcharacteristics_IngestAddTowerHeight(builder, self.towerHeight)
        Sensorcharacteristics_IngestAddTrueNorthCorrector(builder, self.trueNorthCorrector)
        Sensorcharacteristics_IngestAddMagDec(builder, self.magDec)
        Sensorcharacteristics_IngestAddZ1MinRange(builder, self.z1MinRange)
        Sensorcharacteristics_IngestAddZ2MinRange(builder, self.z2MinRange)
        Sensorcharacteristics_IngestAddZ1MaxRange(builder, self.z1MaxRange)
        Sensorcharacteristics_IngestAddZ2MaxRange(builder, self.z2MaxRange)
        Sensorcharacteristics_IngestAddRadarMur(builder, self.radarMur)
        Sensorcharacteristics_IngestAddProbFalseAlarm(builder, self.probFalseAlarm)
        Sensorcharacteristics_IngestAddPrf(builder, self.prf)
        Sensorcharacteristics_IngestAddRadarPulseWidth(builder, self.radarPulseWidth)
        Sensorcharacteristics_IngestAddNumIntegratedPulses(builder, self.numIntegratedPulses)
        Sensorcharacteristics_IngestAddTrueTilt(builder, self.trueTilt)
        if self.radarMessageFormat is not None:
            Sensorcharacteristics_IngestAddRadarMessageFormat(builder, radarMessageFormat)
        Sensorcharacteristics_IngestAddSystemNoiseTemperature(builder, self.systemNoiseTemperature)
        if self.source is not None:
            Sensorcharacteristics_IngestAddSource(builder, source)
        Sensorcharacteristics_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Sensorcharacteristics_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Sensorcharacteristics_IngestAddCreatedBy(builder, createdBy)
        sensorcharacteristicsIngest = Sensorcharacteristics_IngestEnd(builder)
        return sensorcharacteristicsIngest
