# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information on known launch events.
class LaunchEvent_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchEvent_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchEvent_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LaunchEvent_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x41\x55\x4E", size_prefixed=size_prefixed)

    # LaunchEvent_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LAUNCHEVENT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchEvent_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: REF-ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchEvent_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional target-id, if missing in UDL.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchEvent_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchEvent_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sources or SCG references from which the classification of this data is derived.
    # Example: /// Example: Example source
    # Constraints: Minimum length = 0, Maximum length = 128
    # LaunchEvent_Abridged
    def DerivedFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The declassification date of this data, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:02:02.123Z
    # Constraints: No constraints specified.
    # LaunchEvent_Abridged
    def DeclassificationDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Declassification string of this data.
    # Example: /// Example: Example Declassification
    # Constraints: Minimum length = 0, Maximum length = 256
    # LaunchEvent_Abridged
    def DeclassificationString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp of the originating message in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T00:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchEvent_Abridged
    def MsgCreateDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DISOB launch Failure Code, if applicable.
    # Example: /// Example: Example failure code
    # Constraints: Minimum length = 0, Maximum length = 100
    # LaunchEvent_Abridged
    def LaunchFailureCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The launch date, in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T00:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchEvent_Abridged
    def LaunchDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Basic Encyclopedia Number, if applicable.
    # Example: /// Example: ENC-123
    # Constraints: Minimum length = 0, Maximum length = 10
    # LaunchEvent_Abridged
    def BeNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The OSuffix, if applicable.
    # Example: /// Example: oSuffix
    # Constraints: Minimum length = 0, Maximum length = 10
    # LaunchEvent_Abridged
    def OSuffix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Launch facility name.
    # Example: /// Example: Example launch facility name
    # Constraints: Minimum length = 0, Maximum length = 100
    # LaunchEvent_Abridged
    def LaunchFacilityName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchEvent_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchEvent_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchEvent_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchEvent_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchEvent_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchEvent_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # LaunchEvent_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LaunchEvent_AbridgedStart(builder):
    builder.StartObject(20)

def Start(builder):
    LaunchEvent_AbridgedStart(builder)

def LaunchEvent_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchEvent_AbridgedAddId(builder, id)

def LaunchEvent_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    LaunchEvent_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def LaunchEvent_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    LaunchEvent_AbridgedAddOrigObjectId(builder, origObjectId)

def LaunchEvent_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchEvent_AbridgedAddClassificationMarking(builder, classificationMarking)

def LaunchEvent_AbridgedAddDerivedFrom(builder, derivedFrom):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(derivedFrom), 0)

def AddDerivedFrom(builder, derivedFrom):
    LaunchEvent_AbridgedAddDerivedFrom(builder, derivedFrom)

def LaunchEvent_AbridgedAddDeclassificationDate(builder, declassificationDate):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(declassificationDate), 0)

def AddDeclassificationDate(builder, declassificationDate):
    LaunchEvent_AbridgedAddDeclassificationDate(builder, declassificationDate)

def LaunchEvent_AbridgedAddDeclassificationString(builder, declassificationString):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(declassificationString), 0)

def AddDeclassificationString(builder, declassificationString):
    LaunchEvent_AbridgedAddDeclassificationString(builder, declassificationString)

def LaunchEvent_AbridgedAddMsgCreateDate(builder, msgCreateDate):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(msgCreateDate), 0)

def AddMsgCreateDate(builder, msgCreateDate):
    LaunchEvent_AbridgedAddMsgCreateDate(builder, msgCreateDate)

def LaunchEvent_AbridgedAddLaunchFailureCode(builder, launchFailureCode):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(launchFailureCode), 0)

def AddLaunchFailureCode(builder, launchFailureCode):
    LaunchEvent_AbridgedAddLaunchFailureCode(builder, launchFailureCode)

def LaunchEvent_AbridgedAddLaunchDate(builder, launchDate):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(launchDate), 0)

def AddLaunchDate(builder, launchDate):
    LaunchEvent_AbridgedAddLaunchDate(builder, launchDate)

def LaunchEvent_AbridgedAddBeNumber(builder, beNumber):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(beNumber), 0)

def AddBeNumber(builder, beNumber):
    LaunchEvent_AbridgedAddBeNumber(builder, beNumber)

def LaunchEvent_AbridgedAddOSuffix(builder, oSuffix):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(oSuffix), 0)

def AddOSuffix(builder, oSuffix):
    LaunchEvent_AbridgedAddOSuffix(builder, oSuffix)

def LaunchEvent_AbridgedAddLaunchFacilityName(builder, launchFacilityName):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(launchFacilityName), 0)

def AddLaunchFacilityName(builder, launchFacilityName):
    LaunchEvent_AbridgedAddLaunchFacilityName(builder, launchFacilityName)

def LaunchEvent_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchEvent_AbridgedAddCreatedAt(builder, createdAt)

def LaunchEvent_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchEvent_AbridgedAddCreatedBy(builder, createdBy)

def LaunchEvent_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchEvent_AbridgedAddOrigin(builder, origin)

def LaunchEvent_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchEvent_AbridgedAddSource(builder, source)

def LaunchEvent_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchEvent_AbridgedAddDataMode(builder, dataMode)

def LaunchEvent_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchEvent_AbridgedAddOrigNetwork(builder, origNetwork)

def LaunchEvent_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(19, satNo, 0)

def AddSatNo(builder, satNo):
    LaunchEvent_AbridgedAddSatNo(builder, satNo)

def LaunchEvent_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchEvent_AbridgedEnd(builder)


class LaunchEvent_AbridgedT(object):

    # LaunchEvent_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idOnOrbit = None  # type: str
        self.origObjectId = None  # type: str
        self.classificationMarking = None  # type: str
        self.derivedFrom = None  # type: str
        self.declassificationDate = None  # type: str
        self.declassificationString = None  # type: str
        self.msgCreateDate = None  # type: str
        self.launchFailureCode = None  # type: str
        self.launchDate = None  # type: str
        self.beNumber = None  # type: str
        self.oSuffix = None  # type: str
        self.launchFacilityName = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origin = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str
        self.satNo = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchEventAbridged = LaunchEvent_Abridged()
        launchEventAbridged.Init(buf, pos)
        return cls.InitFromObj(launchEventAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchEventAbridged):
        x = LaunchEvent_AbridgedT()
        x._UnPack(launchEventAbridged)
        return x

    # LaunchEvent_AbridgedT
    def _UnPack(self, launchEventAbridged):
        if launchEventAbridged is None:
            return
        self.id = launchEventAbridged.Id()
        self.idOnOrbit = launchEventAbridged.IdOnOrbit()
        self.origObjectId = launchEventAbridged.OrigObjectId()
        self.classificationMarking = launchEventAbridged.ClassificationMarking()
        self.derivedFrom = launchEventAbridged.DerivedFrom()
        self.declassificationDate = launchEventAbridged.DeclassificationDate()
        self.declassificationString = launchEventAbridged.DeclassificationString()
        self.msgCreateDate = launchEventAbridged.MsgCreateDate()
        self.launchFailureCode = launchEventAbridged.LaunchFailureCode()
        self.launchDate = launchEventAbridged.LaunchDate()
        self.beNumber = launchEventAbridged.BeNumber()
        self.oSuffix = launchEventAbridged.OSuffix()
        self.launchFacilityName = launchEventAbridged.LaunchFacilityName()
        self.createdAt = launchEventAbridged.CreatedAt()
        self.createdBy = launchEventAbridged.CreatedBy()
        self.origin = launchEventAbridged.Origin()
        self.source = launchEventAbridged.Source()
        self.dataMode = launchEventAbridged.DataMode()
        self.origNetwork = launchEventAbridged.OrigNetwork()
        self.satNo = launchEventAbridged.SatNo()

    # LaunchEvent_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.derivedFrom is not None:
            derivedFrom = builder.CreateString(self.derivedFrom)
        if self.declassificationDate is not None:
            declassificationDate = builder.CreateString(self.declassificationDate)
        if self.declassificationString is not None:
            declassificationString = builder.CreateString(self.declassificationString)
        if self.msgCreateDate is not None:
            msgCreateDate = builder.CreateString(self.msgCreateDate)
        if self.launchFailureCode is not None:
            launchFailureCode = builder.CreateString(self.launchFailureCode)
        if self.launchDate is not None:
            launchDate = builder.CreateString(self.launchDate)
        if self.beNumber is not None:
            beNumber = builder.CreateString(self.beNumber)
        if self.oSuffix is not None:
            oSuffix = builder.CreateString(self.oSuffix)
        if self.launchFacilityName is not None:
            launchFacilityName = builder.CreateString(self.launchFacilityName)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        LaunchEvent_AbridgedStart(builder)
        if self.id is not None:
            LaunchEvent_AbridgedAddId(builder, id)
        if self.idOnOrbit is not None:
            LaunchEvent_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.origObjectId is not None:
            LaunchEvent_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.classificationMarking is not None:
            LaunchEvent_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.derivedFrom is not None:
            LaunchEvent_AbridgedAddDerivedFrom(builder, derivedFrom)
        if self.declassificationDate is not None:
            LaunchEvent_AbridgedAddDeclassificationDate(builder, declassificationDate)
        if self.declassificationString is not None:
            LaunchEvent_AbridgedAddDeclassificationString(builder, declassificationString)
        if self.msgCreateDate is not None:
            LaunchEvent_AbridgedAddMsgCreateDate(builder, msgCreateDate)
        if self.launchFailureCode is not None:
            LaunchEvent_AbridgedAddLaunchFailureCode(builder, launchFailureCode)
        if self.launchDate is not None:
            LaunchEvent_AbridgedAddLaunchDate(builder, launchDate)
        if self.beNumber is not None:
            LaunchEvent_AbridgedAddBeNumber(builder, beNumber)
        if self.oSuffix is not None:
            LaunchEvent_AbridgedAddOSuffix(builder, oSuffix)
        if self.launchFacilityName is not None:
            LaunchEvent_AbridgedAddLaunchFacilityName(builder, launchFacilityName)
        if self.createdAt is not None:
            LaunchEvent_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchEvent_AbridgedAddCreatedBy(builder, createdBy)
        if self.origin is not None:
            LaunchEvent_AbridgedAddOrigin(builder, origin)
        if self.source is not None:
            LaunchEvent_AbridgedAddSource(builder, source)
        LaunchEvent_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            LaunchEvent_AbridgedAddOrigNetwork(builder, origNetwork)
        LaunchEvent_AbridgedAddSatNo(builder, self.satNo)
        launchEventAbridged = LaunchEvent_AbridgedEnd(builder)
        return launchEventAbridged
