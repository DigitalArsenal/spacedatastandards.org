# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
class Airfield_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Airfield_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirfield_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Airfield_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x46", size_prefixed=size_prefixed)

    # Airfield_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
    # Constraints: Minimum length = 1, Maximum length = 36
    # Airfield_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Airfield_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the parent site.
    # Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    # Constraints: Minimum length = 0, Maximum length = 36
    # Airfield_Abridged
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate Airfield identifier provided by source.
    # Example: /// Example: 45301
    # Constraints: Minimum length = 0, Maximum length = 36
    # Airfield_Abridged
    def AltAirfieldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The airfield's World Area Code installation number (WAC-INNR).
    # Example: /// Example: 0409-00039
    # Constraints: Minimum length = 0, Maximum length = 32
    # Airfield_Abridged
    def WacInnr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) Zone availability Report identifier.
    # Example: /// Example: 231
    # Constraints: Minimum length = 0, Maximum length = 32
    # Airfield_Abridged
    def ZarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code of the airfield.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # Airfield_Abridged
    def Icao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Aviation Transport Association (IATA) code of the airfield.
    # Example: /// Example: AAA
    # Constraints: Minimum length = 0, Maximum length = 3
    # Airfield_Abridged
    def Iata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Federal Aviation Administration (FAA) location identifier of this airfield.
    # Example: /// Example: FAA1
    # Constraints: Minimum length = 0, Maximum length = 5
    # Airfield_Abridged
    def Faa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The host nation code of this airfield, used for non-DoD/FAA locations.
    # Example: /// Example: ZPU
    # Constraints: Minimum length = 0, Maximum length = 16
    # Airfield_Abridged
    def HostNatCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the airfield.
    # Example: /// Example: USAF Academy AFLD
    # Constraints: Minimum length = 1, Maximum length = 64
    # Airfield_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
    # Example: /// Example: Commercial
    # Constraints: Minimum length = 1, Maximum length = 32
    # Airfield_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Elevation of the airfield above mean sea level, in feet.
    # Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 33.562
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def ElevFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Elevation of the airfield above mean sea level, in meters.
    # Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 10.29
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def ElevM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
    # Example: /// Example: 7.35
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def MagDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Region where the airfield resides.
    # Example: /// Example: North America
    # Constraints: Minimum length = 0, Maximum length = 32
    # Airfield_Abridged
    def RegionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Airfield_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Closest city to the airfield's location.
    # Example: /// Example: Colorado Springs
    # Constraints: Minimum length = 0, Maximum length = 64
    # Airfield_Abridged
    def City(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # State or province of the airfield's location.
    # Example: /// Example: Colorado
    # Constraints: Minimum length = 0, Maximum length = 32
    # Airfield_Abridged
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Force geographic location code of the airfield.
    # Example: /// Example: XLSX
    # Constraints: Minimum length = 0, Maximum length = 16
    # Airfield_Abridged
    def Geoloc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
    # Example: /// Example: -4:30
    # Constraints: Minimum length = 0, Maximum length = 6
    # Airfield_Abridged
    def GmtOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
    # Example: /// Example: ABCDEF
    # Constraints: Minimum length = 0, Maximum length = 36
    # Airfield_Abridged
    def SuitabilityCodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
    # Example: /// Example: AMZ
    # Constraints: Minimum length = 0, Maximum length = 36
    # Airfield_Abridged
    def MiscCodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of runways at the site.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def Runways(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The length of the longest runway at this airfield in feet.
    # Example: /// Example: 1000
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def MaxRunwayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The URL link to information about airfield.
    # Example: /// Example: URL Link to the Airfield
    # Constraints: Minimum length = 0, Maximum length = 256
    # Airfield_Abridged
    def InfoUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Airfield_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Airfield_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Airfield_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Airfield_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Airfield_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Airfield_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Airfield_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Airfield_AbridgedStart(builder):
    builder.StartObject(35)

def Start(builder):
    Airfield_AbridgedStart(builder)

def Airfield_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Airfield_AbridgedAddId(builder, id)

def Airfield_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Airfield_AbridgedAddClassificationMarking(builder, classificationMarking)

def Airfield_AbridgedAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    Airfield_AbridgedAddIdSite(builder, idSite)

def Airfield_AbridgedAddAltAirfieldId(builder, altAirfieldId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altAirfieldId), 0)

def AddAltAirfieldId(builder, altAirfieldId):
    Airfield_AbridgedAddAltAirfieldId(builder, altAirfieldId)

def Airfield_AbridgedAddWacInnr(builder, wacInnr):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(wacInnr), 0)

def AddWacInnr(builder, wacInnr):
    Airfield_AbridgedAddWacInnr(builder, wacInnr)

def Airfield_AbridgedAddZarId(builder, zarId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(zarId), 0)

def AddZarId(builder, zarId):
    Airfield_AbridgedAddZarId(builder, zarId)

def Airfield_AbridgedAddIcao(builder, icao):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(icao), 0)

def AddIcao(builder, icao):
    Airfield_AbridgedAddIcao(builder, icao)

def Airfield_AbridgedAddIata(builder, iata):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(iata), 0)

def AddIata(builder, iata):
    Airfield_AbridgedAddIata(builder, iata)

def Airfield_AbridgedAddFaa(builder, faa):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(faa), 0)

def AddFaa(builder, faa):
    Airfield_AbridgedAddFaa(builder, faa)

def Airfield_AbridgedAddHostNatCode(builder, hostNatCode):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(hostNatCode), 0)

def AddHostNatCode(builder, hostNatCode):
    Airfield_AbridgedAddHostNatCode(builder, hostNatCode)

def Airfield_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Airfield_AbridgedAddName(builder, name)

def Airfield_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Airfield_AbridgedAddType(builder, type)

def Airfield_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(12, lat, 0.0)

def AddLat(builder, lat):
    Airfield_AbridgedAddLat(builder, lat)

def Airfield_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(13, lon, 0.0)

def AddLon(builder, lon):
    Airfield_AbridgedAddLon(builder, lon)

def Airfield_AbridgedAddElevFt(builder, elevFt):
    builder.PrependFloat64Slot(14, elevFt, 0.0)

def AddElevFt(builder, elevFt):
    Airfield_AbridgedAddElevFt(builder, elevFt)

def Airfield_AbridgedAddElevM(builder, elevM):
    builder.PrependFloat64Slot(15, elevM, 0.0)

def AddElevM(builder, elevM):
    Airfield_AbridgedAddElevM(builder, elevM)

def Airfield_AbridgedAddMagDec(builder, magDec):
    builder.PrependFloat64Slot(16, magDec, 0.0)

def AddMagDec(builder, magDec):
    Airfield_AbridgedAddMagDec(builder, magDec)

def Airfield_AbridgedAddRegionName(builder, regionName):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(regionName), 0)

def AddRegionName(builder, regionName):
    Airfield_AbridgedAddRegionName(builder, regionName)

def Airfield_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Airfield_AbridgedAddCountryCode(builder, countryCode)

def Airfield_AbridgedAddCity(builder, city):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(city), 0)

def AddCity(builder, city):
    Airfield_AbridgedAddCity(builder, city)

def Airfield_AbridgedAddState(builder, state):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)

def AddState(builder, state):
    Airfield_AbridgedAddState(builder, state)

def Airfield_AbridgedAddGeoloc(builder, geoloc):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(geoloc), 0)

def AddGeoloc(builder, geoloc):
    Airfield_AbridgedAddGeoloc(builder, geoloc)

def Airfield_AbridgedAddGmtOffset(builder, gmtOffset):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(gmtOffset), 0)

def AddGmtOffset(builder, gmtOffset):
    Airfield_AbridgedAddGmtOffset(builder, gmtOffset)

def Airfield_AbridgedAddSuitabilityCodes(builder, suitabilityCodes):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(suitabilityCodes), 0)

def AddSuitabilityCodes(builder, suitabilityCodes):
    Airfield_AbridgedAddSuitabilityCodes(builder, suitabilityCodes)

def Airfield_AbridgedAddMiscCodes(builder, miscCodes):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(miscCodes), 0)

def AddMiscCodes(builder, miscCodes):
    Airfield_AbridgedAddMiscCodes(builder, miscCodes)

def Airfield_AbridgedAddRunways(builder, runways):
    builder.PrependInt32Slot(25, runways, 0)

def AddRunways(builder, runways):
    Airfield_AbridgedAddRunways(builder, runways)

def Airfield_AbridgedAddMaxRunwayLength(builder, maxRunwayLength):
    builder.PrependInt32Slot(26, maxRunwayLength, 0)

def AddMaxRunwayLength(builder, maxRunwayLength):
    Airfield_AbridgedAddMaxRunwayLength(builder, maxRunwayLength)

def Airfield_AbridgedAddInfoUrl(builder, infoUrl):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(infoUrl), 0)

def AddInfoUrl(builder, infoUrl):
    Airfield_AbridgedAddInfoUrl(builder, infoUrl)

def Airfield_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Airfield_AbridgedAddCreatedAt(builder, createdAt)

def Airfield_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Airfield_AbridgedAddCreatedBy(builder, createdBy)

def Airfield_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    Airfield_AbridgedAddSourceDl(builder, sourceDl)

def Airfield_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Airfield_AbridgedAddSource(builder, source)

def Airfield_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Airfield_AbridgedAddOrigin(builder, origin)

def Airfield_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Airfield_AbridgedAddOrigNetwork(builder, origNetwork)

def Airfield_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(34, dataMode, 0)

def AddDataMode(builder, dataMode):
    Airfield_AbridgedAddDataMode(builder, dataMode)

def Airfield_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Airfield_AbridgedEnd(builder)


class Airfield_AbridgedT(object):

    # Airfield_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idSite = None  # type: str
        self.altAirfieldId = None  # type: str
        self.wacInnr = None  # type: str
        self.zarId = None  # type: str
        self.icao = None  # type: str
        self.iata = None  # type: str
        self.faa = None  # type: str
        self.hostNatCode = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.elevFt = 0.0  # type: float
        self.elevM = 0.0  # type: float
        self.magDec = 0.0  # type: float
        self.regionName = None  # type: str
        self.countryCode = None  # type: str
        self.city = None  # type: str
        self.state = None  # type: str
        self.geoloc = None  # type: str
        self.gmtOffset = None  # type: str
        self.suitabilityCodes = None  # type: str
        self.miscCodes = None  # type: str
        self.runways = 0  # type: int
        self.maxRunwayLength = 0  # type: int
        self.infoUrl = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airfieldAbridged = Airfield_Abridged()
        airfieldAbridged.Init(buf, pos)
        return cls.InitFromObj(airfieldAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airfieldAbridged):
        x = Airfield_AbridgedT()
        x._UnPack(airfieldAbridged)
        return x

    # Airfield_AbridgedT
    def _UnPack(self, airfieldAbridged):
        if airfieldAbridged is None:
            return
        self.id = airfieldAbridged.Id()
        self.classificationMarking = airfieldAbridged.ClassificationMarking()
        self.idSite = airfieldAbridged.IdSite()
        self.altAirfieldId = airfieldAbridged.AltAirfieldId()
        self.wacInnr = airfieldAbridged.WacInnr()
        self.zarId = airfieldAbridged.ZarId()
        self.icao = airfieldAbridged.Icao()
        self.iata = airfieldAbridged.Iata()
        self.faa = airfieldAbridged.Faa()
        self.hostNatCode = airfieldAbridged.HostNatCode()
        self.name = airfieldAbridged.Name()
        self.type = airfieldAbridged.Type()
        self.lat = airfieldAbridged.Lat()
        self.lon = airfieldAbridged.Lon()
        self.elevFt = airfieldAbridged.ElevFt()
        self.elevM = airfieldAbridged.ElevM()
        self.magDec = airfieldAbridged.MagDec()
        self.regionName = airfieldAbridged.RegionName()
        self.countryCode = airfieldAbridged.CountryCode()
        self.city = airfieldAbridged.City()
        self.state = airfieldAbridged.State()
        self.geoloc = airfieldAbridged.Geoloc()
        self.gmtOffset = airfieldAbridged.GmtOffset()
        self.suitabilityCodes = airfieldAbridged.SuitabilityCodes()
        self.miscCodes = airfieldAbridged.MiscCodes()
        self.runways = airfieldAbridged.Runways()
        self.maxRunwayLength = airfieldAbridged.MaxRunwayLength()
        self.infoUrl = airfieldAbridged.InfoUrl()
        self.createdAt = airfieldAbridged.CreatedAt()
        self.createdBy = airfieldAbridged.CreatedBy()
        self.sourceDl = airfieldAbridged.SourceDl()
        self.source = airfieldAbridged.Source()
        self.origin = airfieldAbridged.Origin()
        self.origNetwork = airfieldAbridged.OrigNetwork()
        self.dataMode = airfieldAbridged.DataMode()

    # Airfield_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.altAirfieldId is not None:
            altAirfieldId = builder.CreateString(self.altAirfieldId)
        if self.wacInnr is not None:
            wacInnr = builder.CreateString(self.wacInnr)
        if self.zarId is not None:
            zarId = builder.CreateString(self.zarId)
        if self.icao is not None:
            icao = builder.CreateString(self.icao)
        if self.iata is not None:
            iata = builder.CreateString(self.iata)
        if self.faa is not None:
            faa = builder.CreateString(self.faa)
        if self.hostNatCode is not None:
            hostNatCode = builder.CreateString(self.hostNatCode)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.regionName is not None:
            regionName = builder.CreateString(self.regionName)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.city is not None:
            city = builder.CreateString(self.city)
        if self.state is not None:
            state = builder.CreateString(self.state)
        if self.geoloc is not None:
            geoloc = builder.CreateString(self.geoloc)
        if self.gmtOffset is not None:
            gmtOffset = builder.CreateString(self.gmtOffset)
        if self.suitabilityCodes is not None:
            suitabilityCodes = builder.CreateString(self.suitabilityCodes)
        if self.miscCodes is not None:
            miscCodes = builder.CreateString(self.miscCodes)
        if self.infoUrl is not None:
            infoUrl = builder.CreateString(self.infoUrl)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Airfield_AbridgedStart(builder)
        if self.id is not None:
            Airfield_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Airfield_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idSite is not None:
            Airfield_AbridgedAddIdSite(builder, idSite)
        if self.altAirfieldId is not None:
            Airfield_AbridgedAddAltAirfieldId(builder, altAirfieldId)
        if self.wacInnr is not None:
            Airfield_AbridgedAddWacInnr(builder, wacInnr)
        if self.zarId is not None:
            Airfield_AbridgedAddZarId(builder, zarId)
        if self.icao is not None:
            Airfield_AbridgedAddIcao(builder, icao)
        if self.iata is not None:
            Airfield_AbridgedAddIata(builder, iata)
        if self.faa is not None:
            Airfield_AbridgedAddFaa(builder, faa)
        if self.hostNatCode is not None:
            Airfield_AbridgedAddHostNatCode(builder, hostNatCode)
        if self.name is not None:
            Airfield_AbridgedAddName(builder, name)
        if self.type is not None:
            Airfield_AbridgedAddType(builder, type)
        Airfield_AbridgedAddLat(builder, self.lat)
        Airfield_AbridgedAddLon(builder, self.lon)
        Airfield_AbridgedAddElevFt(builder, self.elevFt)
        Airfield_AbridgedAddElevM(builder, self.elevM)
        Airfield_AbridgedAddMagDec(builder, self.magDec)
        if self.regionName is not None:
            Airfield_AbridgedAddRegionName(builder, regionName)
        if self.countryCode is not None:
            Airfield_AbridgedAddCountryCode(builder, countryCode)
        if self.city is not None:
            Airfield_AbridgedAddCity(builder, city)
        if self.state is not None:
            Airfield_AbridgedAddState(builder, state)
        if self.geoloc is not None:
            Airfield_AbridgedAddGeoloc(builder, geoloc)
        if self.gmtOffset is not None:
            Airfield_AbridgedAddGmtOffset(builder, gmtOffset)
        if self.suitabilityCodes is not None:
            Airfield_AbridgedAddSuitabilityCodes(builder, suitabilityCodes)
        if self.miscCodes is not None:
            Airfield_AbridgedAddMiscCodes(builder, miscCodes)
        Airfield_AbridgedAddRunways(builder, self.runways)
        Airfield_AbridgedAddMaxRunwayLength(builder, self.maxRunwayLength)
        if self.infoUrl is not None:
            Airfield_AbridgedAddInfoUrl(builder, infoUrl)
        if self.createdAt is not None:
            Airfield_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Airfield_AbridgedAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            Airfield_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            Airfield_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Airfield_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Airfield_AbridgedAddOrigNetwork(builder, origNetwork)
        Airfield_AbridgedAddDataMode(builder, self.dataMode)
        airfieldAbridged = Airfield_AbridgedEnd(builder)
        return airfieldAbridged
