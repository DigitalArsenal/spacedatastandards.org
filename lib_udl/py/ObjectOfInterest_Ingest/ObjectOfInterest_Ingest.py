# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// OnOrbit objects of interest, which include information about the last known state of the object.
class ObjectOfInterest_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectOfInterest_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObjectOfInterest_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ObjectOfInterest_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x42\x4A\x45", size_prefixed=size_prefixed)

    # ObjectOfInterest_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: OBJECTOFINTEREST-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # ObjectOfInterest_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # ObjectOfInterest_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the parent Onorbit record.
    # Example: /// Example: REF-ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # ObjectOfInterest_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unique name of the object of interest event.
    # Example: /// Example: Example_name
    # Constraints: Minimum length = 0, Maximum length = 128
    # ObjectOfInterest_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor tasking start time for object of interest.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def SensorTaskingStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor tasking stop time for object of interest.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def SensorTaskingStopTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Priority of the object of interest as an integer (1=highest priority).
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
    # Example: /// Example: OPEN
    # Constraints: Minimum length = 0, Maximum length = 16
    # ObjectOfInterest_Ingest
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of last status change of the object of interest event.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def StatusDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the object of interest event.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 0, Maximum length = 256
    # ObjectOfInterest_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Last reported observation time in ISO 8601 UTC time, with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def LastObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def MissedObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Possible delta V applications for the object of interest, in km/sec.
    # Example: /// Example: [1.1, 2.2, 3.3]
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def DeltaVs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ObjectOfInterest_Ingest
    def DeltaVsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectOfInterest_Ingest
    def DeltaVsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Possible delta time applications for the object of interest, in seconds.
    # Example: /// Example: [1.1, 2.2, 3.3]
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def DeltaTs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ObjectOfInterest_Ingest
    def DeltaTsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectOfInterest_Ingest
    def DeltaTsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def SvEpoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Last reported x position of the object in km, in J2000 coordinates.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported y position of the object in km, in J2000 coordinates.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported z position of the object in km, in J2000 coordinates.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported x velocity of the object in km/sec, in J2000 coordinates.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Xvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported y velocity of the object in km/sec, in J2000 coordinates.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Yvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported z velocity of the object in km/sec, in J2000 coordinates.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Zvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def ElsetEpoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def MeanMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Eccentricity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Inclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Raan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def ArgOfPerigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def MeanAnomaly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def RevNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def BStar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def MeanMotionDot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def MeanMotionDdot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def SemiMajorAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Period(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Apogee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def Perigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
    # Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def AffectedObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ObjectOfInterest_Ingest
    def AffectedObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectOfInterest_Ingest
    def AffectedObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # ObjectOfInterest_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # ObjectOfInterest_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # ObjectOfInterest_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # ObjectOfInterest_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # ObjectOfInterest_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # ObjectOfInterest_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ObjectOfInterest_IngestStart(builder):
    builder.StartObject(44)

def Start(builder):
    ObjectOfInterest_IngestStart(builder)

def ObjectOfInterest_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ObjectOfInterest_IngestAddId(builder, id)

def ObjectOfInterest_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    ObjectOfInterest_IngestAddClassificationMarking(builder, classificationMarking)

def ObjectOfInterest_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    ObjectOfInterest_IngestAddIdOnOrbit(builder, idOnOrbit)

def ObjectOfInterest_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    ObjectOfInterest_IngestAddSatNo(builder, satNo)

def ObjectOfInterest_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ObjectOfInterest_IngestAddName(builder, name)

def ObjectOfInterest_IngestAddSensorTaskingStartTime(builder, sensorTaskingStartTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sensorTaskingStartTime), 0)

def AddSensorTaskingStartTime(builder, sensorTaskingStartTime):
    ObjectOfInterest_IngestAddSensorTaskingStartTime(builder, sensorTaskingStartTime)

def ObjectOfInterest_IngestAddSensorTaskingStopTime(builder, sensorTaskingStopTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sensorTaskingStopTime), 0)

def AddSensorTaskingStopTime(builder, sensorTaskingStopTime):
    ObjectOfInterest_IngestAddSensorTaskingStopTime(builder, sensorTaskingStopTime)

def ObjectOfInterest_IngestAddPriority(builder, priority):
    builder.PrependInt32Slot(7, priority, 0)

def AddPriority(builder, priority):
    ObjectOfInterest_IngestAddPriority(builder, priority)

def ObjectOfInterest_IngestAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    ObjectOfInterest_IngestAddStatus(builder, status)

def ObjectOfInterest_IngestAddStatusDate(builder, statusDate):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(statusDate), 0)

def AddStatusDate(builder, statusDate):
    ObjectOfInterest_IngestAddStatusDate(builder, statusDate)

def ObjectOfInterest_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    ObjectOfInterest_IngestAddDescription(builder, description)

def ObjectOfInterest_IngestAddLastObTime(builder, lastObTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(lastObTime), 0)

def AddLastObTime(builder, lastObTime):
    ObjectOfInterest_IngestAddLastObTime(builder, lastObTime)

def ObjectOfInterest_IngestAddMissedObTime(builder, missedObTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(missedObTime), 0)

def AddMissedObTime(builder, missedObTime):
    ObjectOfInterest_IngestAddMissedObTime(builder, missedObTime)

def ObjectOfInterest_IngestAddDeltaVs(builder, deltaVs):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(deltaVs), 0)

def AddDeltaVs(builder, deltaVs):
    ObjectOfInterest_IngestAddDeltaVs(builder, deltaVs)

def ObjectOfInterest_IngestStartDeltaVsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeltaVsVector(builder, numElems):
    return ObjectOfInterest_IngestStartDeltaVsVector(builder, numElems)

def ObjectOfInterest_IngestAddDeltaTs(builder, deltaTs):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(deltaTs), 0)

def AddDeltaTs(builder, deltaTs):
    ObjectOfInterest_IngestAddDeltaTs(builder, deltaTs)

def ObjectOfInterest_IngestStartDeltaTsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeltaTsVector(builder, numElems):
    return ObjectOfInterest_IngestStartDeltaTsVector(builder, numElems)

def ObjectOfInterest_IngestAddSvEpoch(builder, svEpoch):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(svEpoch), 0)

def AddSvEpoch(builder, svEpoch):
    ObjectOfInterest_IngestAddSvEpoch(builder, svEpoch)

def ObjectOfInterest_IngestAddX(builder, x):
    builder.PrependFloat64Slot(16, x, 0.0)

def AddX(builder, x):
    ObjectOfInterest_IngestAddX(builder, x)

def ObjectOfInterest_IngestAddY(builder, y):
    builder.PrependFloat64Slot(17, y, 0.0)

def AddY(builder, y):
    ObjectOfInterest_IngestAddY(builder, y)

def ObjectOfInterest_IngestAddZ(builder, z):
    builder.PrependFloat64Slot(18, z, 0.0)

def AddZ(builder, z):
    ObjectOfInterest_IngestAddZ(builder, z)

def ObjectOfInterest_IngestAddXvel(builder, xvel):
    builder.PrependFloat64Slot(19, xvel, 0.0)

def AddXvel(builder, xvel):
    ObjectOfInterest_IngestAddXvel(builder, xvel)

def ObjectOfInterest_IngestAddYvel(builder, yvel):
    builder.PrependFloat64Slot(20, yvel, 0.0)

def AddYvel(builder, yvel):
    ObjectOfInterest_IngestAddYvel(builder, yvel)

def ObjectOfInterest_IngestAddZvel(builder, zvel):
    builder.PrependFloat64Slot(21, zvel, 0.0)

def AddZvel(builder, zvel):
    ObjectOfInterest_IngestAddZvel(builder, zvel)

def ObjectOfInterest_IngestAddElsetEpoch(builder, elsetEpoch):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(elsetEpoch), 0)

def AddElsetEpoch(builder, elsetEpoch):
    ObjectOfInterest_IngestAddElsetEpoch(builder, elsetEpoch)

def ObjectOfInterest_IngestAddMeanMotion(builder, meanMotion):
    builder.PrependFloat64Slot(23, meanMotion, 0.0)

def AddMeanMotion(builder, meanMotion):
    ObjectOfInterest_IngestAddMeanMotion(builder, meanMotion)

def ObjectOfInterest_IngestAddEccentricity(builder, eccentricity):
    builder.PrependFloat64Slot(24, eccentricity, 0.0)

def AddEccentricity(builder, eccentricity):
    ObjectOfInterest_IngestAddEccentricity(builder, eccentricity)

def ObjectOfInterest_IngestAddInclination(builder, inclination):
    builder.PrependFloat64Slot(25, inclination, 0.0)

def AddInclination(builder, inclination):
    ObjectOfInterest_IngestAddInclination(builder, inclination)

def ObjectOfInterest_IngestAddRaan(builder, raan):
    builder.PrependFloat64Slot(26, raan, 0.0)

def AddRaan(builder, raan):
    ObjectOfInterest_IngestAddRaan(builder, raan)

def ObjectOfInterest_IngestAddArgOfPerigee(builder, argOfPerigee):
    builder.PrependFloat64Slot(27, argOfPerigee, 0.0)

def AddArgOfPerigee(builder, argOfPerigee):
    ObjectOfInterest_IngestAddArgOfPerigee(builder, argOfPerigee)

def ObjectOfInterest_IngestAddMeanAnomaly(builder, meanAnomaly):
    builder.PrependFloat64Slot(28, meanAnomaly, 0.0)

def AddMeanAnomaly(builder, meanAnomaly):
    ObjectOfInterest_IngestAddMeanAnomaly(builder, meanAnomaly)

def ObjectOfInterest_IngestAddRevNo(builder, revNo):
    builder.PrependInt32Slot(29, revNo, 0)

def AddRevNo(builder, revNo):
    ObjectOfInterest_IngestAddRevNo(builder, revNo)

def ObjectOfInterest_IngestAddBStar(builder, bStar):
    builder.PrependFloat64Slot(30, bStar, 0.0)

def AddBStar(builder, bStar):
    ObjectOfInterest_IngestAddBStar(builder, bStar)

def ObjectOfInterest_IngestAddMeanMotionDot(builder, meanMotionDot):
    builder.PrependFloat64Slot(31, meanMotionDot, 0.0)

def AddMeanMotionDot(builder, meanMotionDot):
    ObjectOfInterest_IngestAddMeanMotionDot(builder, meanMotionDot)

def ObjectOfInterest_IngestAddMeanMotionDdot(builder, meanMotionDdot):
    builder.PrependFloat64Slot(32, meanMotionDdot, 0.0)

def AddMeanMotionDdot(builder, meanMotionDdot):
    ObjectOfInterest_IngestAddMeanMotionDdot(builder, meanMotionDdot)

def ObjectOfInterest_IngestAddSemiMajorAxis(builder, semiMajorAxis):
    builder.PrependFloat64Slot(33, semiMajorAxis, 0.0)

def AddSemiMajorAxis(builder, semiMajorAxis):
    ObjectOfInterest_IngestAddSemiMajorAxis(builder, semiMajorAxis)

def ObjectOfInterest_IngestAddPeriod(builder, period):
    builder.PrependFloat64Slot(34, period, 0.0)

def AddPeriod(builder, period):
    ObjectOfInterest_IngestAddPeriod(builder, period)

def ObjectOfInterest_IngestAddApogee(builder, apogee):
    builder.PrependFloat64Slot(35, apogee, 0.0)

def AddApogee(builder, apogee):
    ObjectOfInterest_IngestAddApogee(builder, apogee)

def ObjectOfInterest_IngestAddPerigee(builder, perigee):
    builder.PrependFloat64Slot(36, perigee, 0.0)

def AddPerigee(builder, perigee):
    ObjectOfInterest_IngestAddPerigee(builder, perigee)

def ObjectOfInterest_IngestAddAffectedObjects(builder, affectedObjects):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(affectedObjects), 0)

def AddAffectedObjects(builder, affectedObjects):
    ObjectOfInterest_IngestAddAffectedObjects(builder, affectedObjects)

def ObjectOfInterest_IngestStartAffectedObjectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAffectedObjectsVector(builder, numElems):
    return ObjectOfInterest_IngestStartAffectedObjectsVector(builder, numElems)

def ObjectOfInterest_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    ObjectOfInterest_IngestAddCreatedAt(builder, createdAt)

def ObjectOfInterest_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    ObjectOfInterest_IngestAddCreatedBy(builder, createdBy)

def ObjectOfInterest_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    ObjectOfInterest_IngestAddSource(builder, source)

def ObjectOfInterest_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    ObjectOfInterest_IngestAddOrigin(builder, origin)

def ObjectOfInterest_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    ObjectOfInterest_IngestAddOrigNetwork(builder, origNetwork)

def ObjectOfInterest_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(43, dataMode, 0)

def AddDataMode(builder, dataMode):
    ObjectOfInterest_IngestAddDataMode(builder, dataMode)

def ObjectOfInterest_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return ObjectOfInterest_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class ObjectOfInterest_IngestT(object):

    # ObjectOfInterest_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.name = None  # type: str
        self.sensorTaskingStartTime = None  # type: str
        self.sensorTaskingStopTime = None  # type: str
        self.priority = 0  # type: int
        self.status = None  # type: str
        self.statusDate = None  # type: str
        self.description = None  # type: str
        self.lastObTime = None  # type: str
        self.missedObTime = None  # type: str
        self.deltaVs = None  # type: List[str]
        self.deltaTs = None  # type: List[str]
        self.svEpoch = None  # type: str
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.xvel = 0.0  # type: float
        self.yvel = 0.0  # type: float
        self.zvel = 0.0  # type: float
        self.elsetEpoch = None  # type: str
        self.meanMotion = 0.0  # type: float
        self.eccentricity = 0.0  # type: float
        self.inclination = 0.0  # type: float
        self.raan = 0.0  # type: float
        self.argOfPerigee = 0.0  # type: float
        self.meanAnomaly = 0.0  # type: float
        self.revNo = 0  # type: int
        self.bStar = 0.0  # type: float
        self.meanMotionDot = 0.0  # type: float
        self.meanMotionDdot = 0.0  # type: float
        self.semiMajorAxis = 0.0  # type: float
        self.period = 0.0  # type: float
        self.apogee = 0.0  # type: float
        self.perigee = 0.0  # type: float
        self.affectedObjects = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectOfInterestIngest = ObjectOfInterest_Ingest()
        objectOfInterestIngest.Init(buf, pos)
        return cls.InitFromObj(objectOfInterestIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, objectOfInterestIngest):
        x = ObjectOfInterest_IngestT()
        x._UnPack(objectOfInterestIngest)
        return x

    # ObjectOfInterest_IngestT
    def _UnPack(self, objectOfInterestIngest):
        if objectOfInterestIngest is None:
            return
        self.id = objectOfInterestIngest.Id()
        self.classificationMarking = objectOfInterestIngest.ClassificationMarking()
        self.idOnOrbit = objectOfInterestIngest.IdOnOrbit()
        self.satNo = objectOfInterestIngest.SatNo()
        self.name = objectOfInterestIngest.Name()
        self.sensorTaskingStartTime = objectOfInterestIngest.SensorTaskingStartTime()
        self.sensorTaskingStopTime = objectOfInterestIngest.SensorTaskingStopTime()
        self.priority = objectOfInterestIngest.Priority()
        self.status = objectOfInterestIngest.Status()
        self.statusDate = objectOfInterestIngest.StatusDate()
        self.description = objectOfInterestIngest.Description()
        self.lastObTime = objectOfInterestIngest.LastObTime()
        self.missedObTime = objectOfInterestIngest.MissedObTime()
        if not objectOfInterestIngest.DeltaVsIsNone():
            self.deltaVs = []
            for i in range(objectOfInterestIngest.DeltaVsLength()):
                self.deltaVs.append(objectOfInterestIngest.DeltaVs(i))
        if not objectOfInterestIngest.DeltaTsIsNone():
            self.deltaTs = []
            for i in range(objectOfInterestIngest.DeltaTsLength()):
                self.deltaTs.append(objectOfInterestIngest.DeltaTs(i))
        self.svEpoch = objectOfInterestIngest.SvEpoch()
        self.x = objectOfInterestIngest.X()
        self.y = objectOfInterestIngest.Y()
        self.z = objectOfInterestIngest.Z()
        self.xvel = objectOfInterestIngest.Xvel()
        self.yvel = objectOfInterestIngest.Yvel()
        self.zvel = objectOfInterestIngest.Zvel()
        self.elsetEpoch = objectOfInterestIngest.ElsetEpoch()
        self.meanMotion = objectOfInterestIngest.MeanMotion()
        self.eccentricity = objectOfInterestIngest.Eccentricity()
        self.inclination = objectOfInterestIngest.Inclination()
        self.raan = objectOfInterestIngest.Raan()
        self.argOfPerigee = objectOfInterestIngest.ArgOfPerigee()
        self.meanAnomaly = objectOfInterestIngest.MeanAnomaly()
        self.revNo = objectOfInterestIngest.RevNo()
        self.bStar = objectOfInterestIngest.BStar()
        self.meanMotionDot = objectOfInterestIngest.MeanMotionDot()
        self.meanMotionDdot = objectOfInterestIngest.MeanMotionDdot()
        self.semiMajorAxis = objectOfInterestIngest.SemiMajorAxis()
        self.period = objectOfInterestIngest.Period()
        self.apogee = objectOfInterestIngest.Apogee()
        self.perigee = objectOfInterestIngest.Perigee()
        if not objectOfInterestIngest.AffectedObjectsIsNone():
            self.affectedObjects = []
            for i in range(objectOfInterestIngest.AffectedObjectsLength()):
                self.affectedObjects.append(objectOfInterestIngest.AffectedObjects(i))
        self.createdAt = objectOfInterestIngest.CreatedAt()
        self.createdBy = objectOfInterestIngest.CreatedBy()
        self.source = objectOfInterestIngest.Source()
        self.origin = objectOfInterestIngest.Origin()
        self.origNetwork = objectOfInterestIngest.OrigNetwork()
        self.dataMode = objectOfInterestIngest.DataMode()

    # ObjectOfInterest_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.sensorTaskingStartTime is not None:
            sensorTaskingStartTime = builder.CreateString(self.sensorTaskingStartTime)
        if self.sensorTaskingStopTime is not None:
            sensorTaskingStopTime = builder.CreateString(self.sensorTaskingStopTime)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.statusDate is not None:
            statusDate = builder.CreateString(self.statusDate)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.lastObTime is not None:
            lastObTime = builder.CreateString(self.lastObTime)
        if self.missedObTime is not None:
            missedObTime = builder.CreateString(self.missedObTime)
        if self.deltaVs is not None:
            deltaVslist = []
            for i in range(len(self.deltaVs)):
                deltaVslist.append(builder.CreateString(self.deltaVs[i]))
            ObjectOfInterest_IngestStartDeltaVsVector(builder, len(self.deltaVs))
            for i in reversed(range(len(self.deltaVs))):
                builder.PrependUOffsetTRelative(deltaVslist[i])
            deltaVs = builder.EndVector()
        if self.deltaTs is not None:
            deltaTslist = []
            for i in range(len(self.deltaTs)):
                deltaTslist.append(builder.CreateString(self.deltaTs[i]))
            ObjectOfInterest_IngestStartDeltaTsVector(builder, len(self.deltaTs))
            for i in reversed(range(len(self.deltaTs))):
                builder.PrependUOffsetTRelative(deltaTslist[i])
            deltaTs = builder.EndVector()
        if self.svEpoch is not None:
            svEpoch = builder.CreateString(self.svEpoch)
        if self.elsetEpoch is not None:
            elsetEpoch = builder.CreateString(self.elsetEpoch)
        if self.affectedObjects is not None:
            affectedObjectslist = []
            for i in range(len(self.affectedObjects)):
                affectedObjectslist.append(builder.CreateString(self.affectedObjects[i]))
            ObjectOfInterest_IngestStartAffectedObjectsVector(builder, len(self.affectedObjects))
            for i in reversed(range(len(self.affectedObjects))):
                builder.PrependUOffsetTRelative(affectedObjectslist[i])
            affectedObjects = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        ObjectOfInterest_IngestStart(builder)
        if self.id is not None:
            ObjectOfInterest_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            ObjectOfInterest_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            ObjectOfInterest_IngestAddIdOnOrbit(builder, idOnOrbit)
        ObjectOfInterest_IngestAddSatNo(builder, self.satNo)
        if self.name is not None:
            ObjectOfInterest_IngestAddName(builder, name)
        if self.sensorTaskingStartTime is not None:
            ObjectOfInterest_IngestAddSensorTaskingStartTime(builder, sensorTaskingStartTime)
        if self.sensorTaskingStopTime is not None:
            ObjectOfInterest_IngestAddSensorTaskingStopTime(builder, sensorTaskingStopTime)
        ObjectOfInterest_IngestAddPriority(builder, self.priority)
        if self.status is not None:
            ObjectOfInterest_IngestAddStatus(builder, status)
        if self.statusDate is not None:
            ObjectOfInterest_IngestAddStatusDate(builder, statusDate)
        if self.description is not None:
            ObjectOfInterest_IngestAddDescription(builder, description)
        if self.lastObTime is not None:
            ObjectOfInterest_IngestAddLastObTime(builder, lastObTime)
        if self.missedObTime is not None:
            ObjectOfInterest_IngestAddMissedObTime(builder, missedObTime)
        if self.deltaVs is not None:
            ObjectOfInterest_IngestAddDeltaVs(builder, deltaVs)
        if self.deltaTs is not None:
            ObjectOfInterest_IngestAddDeltaTs(builder, deltaTs)
        if self.svEpoch is not None:
            ObjectOfInterest_IngestAddSvEpoch(builder, svEpoch)
        ObjectOfInterest_IngestAddX(builder, self.x)
        ObjectOfInterest_IngestAddY(builder, self.y)
        ObjectOfInterest_IngestAddZ(builder, self.z)
        ObjectOfInterest_IngestAddXvel(builder, self.xvel)
        ObjectOfInterest_IngestAddYvel(builder, self.yvel)
        ObjectOfInterest_IngestAddZvel(builder, self.zvel)
        if self.elsetEpoch is not None:
            ObjectOfInterest_IngestAddElsetEpoch(builder, elsetEpoch)
        ObjectOfInterest_IngestAddMeanMotion(builder, self.meanMotion)
        ObjectOfInterest_IngestAddEccentricity(builder, self.eccentricity)
        ObjectOfInterest_IngestAddInclination(builder, self.inclination)
        ObjectOfInterest_IngestAddRaan(builder, self.raan)
        ObjectOfInterest_IngestAddArgOfPerigee(builder, self.argOfPerigee)
        ObjectOfInterest_IngestAddMeanAnomaly(builder, self.meanAnomaly)
        ObjectOfInterest_IngestAddRevNo(builder, self.revNo)
        ObjectOfInterest_IngestAddBStar(builder, self.bStar)
        ObjectOfInterest_IngestAddMeanMotionDot(builder, self.meanMotionDot)
        ObjectOfInterest_IngestAddMeanMotionDdot(builder, self.meanMotionDdot)
        ObjectOfInterest_IngestAddSemiMajorAxis(builder, self.semiMajorAxis)
        ObjectOfInterest_IngestAddPeriod(builder, self.period)
        ObjectOfInterest_IngestAddApogee(builder, self.apogee)
        ObjectOfInterest_IngestAddPerigee(builder, self.perigee)
        if self.affectedObjects is not None:
            ObjectOfInterest_IngestAddAffectedObjects(builder, affectedObjects)
        if self.createdAt is not None:
            ObjectOfInterest_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            ObjectOfInterest_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            ObjectOfInterest_IngestAddSource(builder, source)
        if self.origin is not None:
            ObjectOfInterest_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            ObjectOfInterest_IngestAddOrigNetwork(builder, origNetwork)
        ObjectOfInterest_IngestAddDataMode(builder, self.dataMode)
        objectOfInterestIngest = ObjectOfInterest_IngestEnd(builder)
        return objectOfInterestIngest
