# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
class OnboardNavigation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnboardNavigation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnboardNavigation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnboardNavigation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x42\x4F", size_prefixed=size_prefixed)

    # OnboardNavigation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONBOARD-NAVIGATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnboardNavigation_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnboardNavigation_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the primary satellite on-orbit object.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnboardNavigation_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 101
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnboardNavigation_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time of the sensor data, in ISO 8601 UTC format.
    # Example: /// Example: 2021-07-20T01:02:03.123456Z
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # End time of the sensor data, in ISO 8601 UTC format.
    # Example: /// Example: 2021-07-20T01:02:03.123456Z
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
    # Example: /// Example: EPHEMERISSET-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnboardNavigation_Ingest
    def EsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name or identifier the star catalog in use.
    # Example: /// Example: STAR-CAT-NAME
    # Constraints: Minimum length = 0, Maximum length = 24
    # OnboardNavigation_Ingest
    def StarCatName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The last load time of the current star catalog onboard this spacecraft.
    # Example: /// Example: 2021-07-21T01:02:03.123Z
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def StarCatLoadTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the last onboard state vector.
    # Example: /// Example: STATE-VECTOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnboardNavigation_Ingest
    def IdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
    # Example: /// Example: ['2021-07-21T01:02:03.120003Z']
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def Ts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnboardNavigation_Ingest
    def TsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnboardNavigation_Ingest
    def TsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # OnboardNavigation_Ingest
    def ReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
    # Example: /// Example: [[1.1, 2.2, 3.3]]
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def SunSensor(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnboardNavigation_Ingest
    def SunSensorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnboardNavigation_Ingest
    def SunSensorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
    # Example: /// Example: [[1.1, 2.2, 3.3]]
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def Mag(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnboardNavigation_Ingest
    def MagLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnboardNavigation_Ingest
    def MagIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
    # Example: /// Example: [[1.1, 2.2, 3.3]]
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def StarTracker(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnboardNavigation_Ingest
    def StarTrackerLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnboardNavigation_Ingest
    def StarTrackerIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
    # Example: /// Example: [[1.1, 2.2, 3.3]]
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def DeltaPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnboardNavigation_Ingest
    def DeltaPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnboardNavigation_Ingest
    def DeltaPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnboardNavigation_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnboardNavigation_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnboardNavigation_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnboardNavigation_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnboardNavigation_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnboardNavigation_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def OnboardNavigation_IngestStart(builder):
    builder.StartObject(23)

def Start(builder):
    OnboardNavigation_IngestStart(builder)

def OnboardNavigation_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnboardNavigation_IngestAddId(builder, id)

def OnboardNavigation_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnboardNavigation_IngestAddClassificationMarking(builder, classificationMarking)

def OnboardNavigation_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnboardNavigation_IngestAddIdOnOrbit(builder, idOnOrbit)

def OnboardNavigation_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    OnboardNavigation_IngestAddSatNo(builder, satNo)

def OnboardNavigation_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    OnboardNavigation_IngestAddOrigObjectId(builder, origObjectId)

def OnboardNavigation_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    OnboardNavigation_IngestAddStartTime(builder, startTime)

def OnboardNavigation_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    OnboardNavigation_IngestAddEndTime(builder, endTime)

def OnboardNavigation_IngestAddEsId(builder, esId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(esId), 0)

def AddEsId(builder, esId):
    OnboardNavigation_IngestAddEsId(builder, esId)

def OnboardNavigation_IngestAddStarCatName(builder, starCatName):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(starCatName), 0)

def AddStarCatName(builder, starCatName):
    OnboardNavigation_IngestAddStarCatName(builder, starCatName)

def OnboardNavigation_IngestAddStarCatLoadTime(builder, starCatLoadTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(starCatLoadTime), 0)

def AddStarCatLoadTime(builder, starCatLoadTime):
    OnboardNavigation_IngestAddStarCatLoadTime(builder, starCatLoadTime)

def OnboardNavigation_IngestAddIdStateVector(builder, idStateVector):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(idStateVector), 0)

def AddIdStateVector(builder, idStateVector):
    OnboardNavigation_IngestAddIdStateVector(builder, idStateVector)

def OnboardNavigation_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    OnboardNavigation_IngestAddTs(builder, ts)

def OnboardNavigation_IngestStartTsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTsVector(builder, numElems):
    return OnboardNavigation_IngestStartTsVector(builder, numElems)

def OnboardNavigation_IngestAddReferenceFrame(builder, referenceFrame):
    builder.PrependInt8Slot(12, referenceFrame, 0)

def AddReferenceFrame(builder, referenceFrame):
    OnboardNavigation_IngestAddReferenceFrame(builder, referenceFrame)

def OnboardNavigation_IngestAddSunSensor(builder, sunSensor):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(sunSensor), 0)

def AddSunSensor(builder, sunSensor):
    OnboardNavigation_IngestAddSunSensor(builder, sunSensor)

def OnboardNavigation_IngestStartSunSensorVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSunSensorVector(builder, numElems):
    return OnboardNavigation_IngestStartSunSensorVector(builder, numElems)

def OnboardNavigation_IngestAddMag(builder, mag):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(mag), 0)

def AddMag(builder, mag):
    OnboardNavigation_IngestAddMag(builder, mag)

def OnboardNavigation_IngestStartMagVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMagVector(builder, numElems):
    return OnboardNavigation_IngestStartMagVector(builder, numElems)

def OnboardNavigation_IngestAddStarTracker(builder, starTracker):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(starTracker), 0)

def AddStarTracker(builder, starTracker):
    OnboardNavigation_IngestAddStarTracker(builder, starTracker)

def OnboardNavigation_IngestStartStarTrackerVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStarTrackerVector(builder, numElems):
    return OnboardNavigation_IngestStartStarTrackerVector(builder, numElems)

def OnboardNavigation_IngestAddDeltaPos(builder, deltaPos):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(deltaPos), 0)

def AddDeltaPos(builder, deltaPos):
    OnboardNavigation_IngestAddDeltaPos(builder, deltaPos)

def OnboardNavigation_IngestStartDeltaPosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeltaPosVector(builder, numElems):
    return OnboardNavigation_IngestStartDeltaPosVector(builder, numElems)

def OnboardNavigation_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnboardNavigation_IngestAddCreatedAt(builder, createdAt)

def OnboardNavigation_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnboardNavigation_IngestAddCreatedBy(builder, createdBy)

def OnboardNavigation_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnboardNavigation_IngestAddSource(builder, source)

def OnboardNavigation_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnboardNavigation_IngestAddOrigin(builder, origin)

def OnboardNavigation_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnboardNavigation_IngestAddOrigNetwork(builder, origNetwork)

def OnboardNavigation_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(22, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnboardNavigation_IngestAddDataMode(builder, dataMode)

def OnboardNavigation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnboardNavigation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class OnboardNavigation_IngestT(object):

    # OnboardNavigation_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.esId = None  # type: str
        self.starCatName = None  # type: str
        self.starCatLoadTime = None  # type: str
        self.idStateVector = None  # type: str
        self.ts = None  # type: List[str]
        self.referenceFrame = 0  # type: int
        self.sunSensor = None  # type: List[str]
        self.mag = None  # type: List[str]
        self.starTracker = None  # type: List[str]
        self.deltaPos = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onboardNavigationIngest = OnboardNavigation_Ingest()
        onboardNavigationIngest.Init(buf, pos)
        return cls.InitFromObj(onboardNavigationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onboardNavigationIngest):
        x = OnboardNavigation_IngestT()
        x._UnPack(onboardNavigationIngest)
        return x

    # OnboardNavigation_IngestT
    def _UnPack(self, onboardNavigationIngest):
        if onboardNavigationIngest is None:
            return
        self.id = onboardNavigationIngest.Id()
        self.classificationMarking = onboardNavigationIngest.ClassificationMarking()
        self.idOnOrbit = onboardNavigationIngest.IdOnOrbit()
        self.satNo = onboardNavigationIngest.SatNo()
        self.origObjectId = onboardNavigationIngest.OrigObjectId()
        self.startTime = onboardNavigationIngest.StartTime()
        self.endTime = onboardNavigationIngest.EndTime()
        self.esId = onboardNavigationIngest.EsId()
        self.starCatName = onboardNavigationIngest.StarCatName()
        self.starCatLoadTime = onboardNavigationIngest.StarCatLoadTime()
        self.idStateVector = onboardNavigationIngest.IdStateVector()
        if not onboardNavigationIngest.TsIsNone():
            self.ts = []
            for i in range(onboardNavigationIngest.TsLength()):
                self.ts.append(onboardNavigationIngest.Ts(i))
        self.referenceFrame = onboardNavigationIngest.ReferenceFrame()
        if not onboardNavigationIngest.SunSensorIsNone():
            self.sunSensor = []
            for i in range(onboardNavigationIngest.SunSensorLength()):
                self.sunSensor.append(onboardNavigationIngest.SunSensor(i))
        if not onboardNavigationIngest.MagIsNone():
            self.mag = []
            for i in range(onboardNavigationIngest.MagLength()):
                self.mag.append(onboardNavigationIngest.Mag(i))
        if not onboardNavigationIngest.StarTrackerIsNone():
            self.starTracker = []
            for i in range(onboardNavigationIngest.StarTrackerLength()):
                self.starTracker.append(onboardNavigationIngest.StarTracker(i))
        if not onboardNavigationIngest.DeltaPosIsNone():
            self.deltaPos = []
            for i in range(onboardNavigationIngest.DeltaPosLength()):
                self.deltaPos.append(onboardNavigationIngest.DeltaPos(i))
        self.createdAt = onboardNavigationIngest.CreatedAt()
        self.createdBy = onboardNavigationIngest.CreatedBy()
        self.source = onboardNavigationIngest.Source()
        self.origin = onboardNavigationIngest.Origin()
        self.origNetwork = onboardNavigationIngest.OrigNetwork()
        self.dataMode = onboardNavigationIngest.DataMode()

    # OnboardNavigation_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.esId is not None:
            esId = builder.CreateString(self.esId)
        if self.starCatName is not None:
            starCatName = builder.CreateString(self.starCatName)
        if self.starCatLoadTime is not None:
            starCatLoadTime = builder.CreateString(self.starCatLoadTime)
        if self.idStateVector is not None:
            idStateVector = builder.CreateString(self.idStateVector)
        if self.ts is not None:
            tslist = []
            for i in range(len(self.ts)):
                tslist.append(builder.CreateString(self.ts[i]))
            OnboardNavigation_IngestStartTsVector(builder, len(self.ts))
            for i in reversed(range(len(self.ts))):
                builder.PrependUOffsetTRelative(tslist[i])
            ts = builder.EndVector()
        if self.sunSensor is not None:
            sunSensorlist = []
            for i in range(len(self.sunSensor)):
                sunSensorlist.append(builder.CreateString(self.sunSensor[i]))
            OnboardNavigation_IngestStartSunSensorVector(builder, len(self.sunSensor))
            for i in reversed(range(len(self.sunSensor))):
                builder.PrependUOffsetTRelative(sunSensorlist[i])
            sunSensor = builder.EndVector()
        if self.mag is not None:
            maglist = []
            for i in range(len(self.mag)):
                maglist.append(builder.CreateString(self.mag[i]))
            OnboardNavigation_IngestStartMagVector(builder, len(self.mag))
            for i in reversed(range(len(self.mag))):
                builder.PrependUOffsetTRelative(maglist[i])
            mag = builder.EndVector()
        if self.starTracker is not None:
            starTrackerlist = []
            for i in range(len(self.starTracker)):
                starTrackerlist.append(builder.CreateString(self.starTracker[i]))
            OnboardNavigation_IngestStartStarTrackerVector(builder, len(self.starTracker))
            for i in reversed(range(len(self.starTracker))):
                builder.PrependUOffsetTRelative(starTrackerlist[i])
            starTracker = builder.EndVector()
        if self.deltaPos is not None:
            deltaPoslist = []
            for i in range(len(self.deltaPos)):
                deltaPoslist.append(builder.CreateString(self.deltaPos[i]))
            OnboardNavigation_IngestStartDeltaPosVector(builder, len(self.deltaPos))
            for i in reversed(range(len(self.deltaPos))):
                builder.PrependUOffsetTRelative(deltaPoslist[i])
            deltaPos = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnboardNavigation_IngestStart(builder)
        if self.id is not None:
            OnboardNavigation_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            OnboardNavigation_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            OnboardNavigation_IngestAddIdOnOrbit(builder, idOnOrbit)
        OnboardNavigation_IngestAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            OnboardNavigation_IngestAddOrigObjectId(builder, origObjectId)
        if self.startTime is not None:
            OnboardNavigation_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            OnboardNavigation_IngestAddEndTime(builder, endTime)
        if self.esId is not None:
            OnboardNavigation_IngestAddEsId(builder, esId)
        if self.starCatName is not None:
            OnboardNavigation_IngestAddStarCatName(builder, starCatName)
        if self.starCatLoadTime is not None:
            OnboardNavigation_IngestAddStarCatLoadTime(builder, starCatLoadTime)
        if self.idStateVector is not None:
            OnboardNavigation_IngestAddIdStateVector(builder, idStateVector)
        if self.ts is not None:
            OnboardNavigation_IngestAddTs(builder, ts)
        OnboardNavigation_IngestAddReferenceFrame(builder, self.referenceFrame)
        if self.sunSensor is not None:
            OnboardNavigation_IngestAddSunSensor(builder, sunSensor)
        if self.mag is not None:
            OnboardNavigation_IngestAddMag(builder, mag)
        if self.starTracker is not None:
            OnboardNavigation_IngestAddStarTracker(builder, starTracker)
        if self.deltaPos is not None:
            OnboardNavigation_IngestAddDeltaPos(builder, deltaPos)
        if self.createdAt is not None:
            OnboardNavigation_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnboardNavigation_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            OnboardNavigation_IngestAddSource(builder, source)
        if self.origin is not None:
            OnboardNavigation_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            OnboardNavigation_IngestAddOrigNetwork(builder, origNetwork)
        OnboardNavigation_IngestAddDataMode(builder, self.dataMode)
        onboardNavigationIngest = OnboardNavigation_IngestEnd(builder)
        return onboardNavigationIngest
