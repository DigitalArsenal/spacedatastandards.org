# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Medication specifics.
class EvacMedication_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacMedication_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacMedication_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacMedication_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacMedication_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
    # Example: /// Example: TYLENOL
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacMedication_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    # Example: /// Example: ARM LEFT BACK
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacMedication_Ingest
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Quantity of medicine or drug administered or recommended to be taken at a particular time.
    # Example: /// Example: 800mg
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacMedication_Ingest
    def Dose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Route of medication delivery (e.g. INJECTION, ORAL, etc.).
    # Example: /// Example: ORAL
    # Constraints: Minimum length = 0, Maximum length = 16
    # EvacMedication_Ingest
    def AdminRoute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time that the medication was administered in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacMedication_Ingest
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the patient's medication information.
    # Example: /// Example: Comments on the patient's medication information.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacMedication_Ingest
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacMedication_IngestStart(builder):
    builder.StartObject(6)

def Start(builder):
    EvacMedication_IngestStart(builder)

def EvacMedication_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacMedication_IngestAddType(builder, type)

def EvacMedication_IngestAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacMedication_IngestAddBodyPart(builder, bodyPart)

def EvacMedication_IngestAddDose(builder, dose):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dose), 0)

def AddDose(builder, dose):
    EvacMedication_IngestAddDose(builder, dose)

def EvacMedication_IngestAddAdminRoute(builder, adminRoute):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(adminRoute), 0)

def AddAdminRoute(builder, adminRoute):
    EvacMedication_IngestAddAdminRoute(builder, adminRoute)

def EvacMedication_IngestAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacMedication_IngestAddTime(builder, time)

def EvacMedication_IngestAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacMedication_IngestAddComments(builder, comments)

def EvacMedication_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacMedication_IngestEnd(builder)


class EvacMedication_IngestT(object):

    # EvacMedication_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.bodyPart = None  # type: str
        self.dose = None  # type: str
        self.adminRoute = None  # type: str
        self.time = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacMedicationIngest = EvacMedication_Ingest()
        evacMedicationIngest.Init(buf, pos)
        return cls.InitFromObj(evacMedicationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacMedicationIngest):
        x = EvacMedication_IngestT()
        x._UnPack(evacMedicationIngest)
        return x

    # EvacMedication_IngestT
    def _UnPack(self, evacMedicationIngest):
        if evacMedicationIngest is None:
            return
        self.type = evacMedicationIngest.Type()
        self.bodyPart = evacMedicationIngest.BodyPart()
        self.dose = evacMedicationIngest.Dose()
        self.adminRoute = evacMedicationIngest.AdminRoute()
        self.time = evacMedicationIngest.Time()
        self.comments = evacMedicationIngest.Comments()

    # EvacMedication_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.dose is not None:
            dose = builder.CreateString(self.dose)
        if self.adminRoute is not None:
            adminRoute = builder.CreateString(self.adminRoute)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacMedication_IngestStart(builder)
        if self.type is not None:
            EvacMedication_IngestAddType(builder, type)
        if self.bodyPart is not None:
            EvacMedication_IngestAddBodyPart(builder, bodyPart)
        if self.dose is not None:
            EvacMedication_IngestAddDose(builder, dose)
        if self.adminRoute is not None:
            EvacMedication_IngestAddAdminRoute(builder, adminRoute)
        if self.time is not None:
            EvacMedication_IngestAddTime(builder, time)
        if self.comments is not None:
            EvacMedication_IngestAddComments(builder, comments)
        evacMedicationIngest = EvacMedication_IngestEnd(builder)
        return evacMedicationIngest
