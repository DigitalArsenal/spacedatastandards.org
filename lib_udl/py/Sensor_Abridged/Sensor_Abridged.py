# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for electro-optical based sensor phenomenologies.
class Sensor_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sensor_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensor_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Sensor_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # Sensor_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Sensor_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique name of this sensor.
    # Example: /// Example: SENSOR_NAME
    # Constraints: Minimum length = 1, Maximum length = 128
    # Sensor_Abridged
    def SensorName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Sensor_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
    # Example: /// Example: 1234
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def SensorNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional short name for the sensor.
    # Example: /// Example: SNR-1
    # Constraints: Minimum length = 0, Maximum length = 5
    # Sensor_Abridged
    def ShortName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
    # Example: /// Example: observations
    # Constraints: Minimum length = 0, Maximum length = 128
    # Sensor_Abridged
    def DataControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
    # Example: /// Example: AF-ID
    # Constraints: Minimum length = 0, Maximum length = 8
    # Sensor_Abridged
    def AfId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sensor type at the site. Optional field, intended primarily for ASRs.
    # Example: /// Example: SENSOR_TYPE
    # Constraints: Minimum length = 0, Maximum length = 32
    # Sensor_Abridged
    def AsrType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensor_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Sensor_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensor_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensor_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensor_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional flag indicating if the sensor is active.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def Sensorcharacteristics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Sensor_Abridged
    def SensorcharacteristicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Sensor_Abridged
    def SensorcharacteristicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Collection of SensorStats which contain statistics of a sensor.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def SensorStats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Sensor_Abridged
    def SensorStatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Sensor_Abridged
    def SensorStatsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def SensorlimitsCollection(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Sensor_Abridged
    def SensorlimitsCollectionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Sensor_Abridged
    def SensorlimitsCollectionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent entity. idEntity is required for Put.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Sensor_Abridged
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def SensorObservationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Sensor_Abridged
    def SensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Sensor_AbridgedStart(builder):
    builder.StartObject(22)

def Start(builder):
    Sensor_AbridgedStart(builder)

def Sensor_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    Sensor_AbridgedAddIdSensor(builder, idSensor)

def Sensor_AbridgedAddSensorName(builder, sensorName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sensorName), 0)

def AddSensorName(builder, sensorName):
    Sensor_AbridgedAddSensorName(builder, sensorName)

def Sensor_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Sensor_AbridgedAddClassificationMarking(builder, classificationMarking)

def Sensor_AbridgedAddSensorNumber(builder, sensorNumber):
    builder.PrependInt32Slot(3, sensorNumber, 0)

def AddSensorNumber(builder, sensorNumber):
    Sensor_AbridgedAddSensorNumber(builder, sensorNumber)

def Sensor_AbridgedAddShortName(builder, shortName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(shortName), 0)

def AddShortName(builder, shortName):
    Sensor_AbridgedAddShortName(builder, shortName)

def Sensor_AbridgedAddDataControl(builder, dataControl):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dataControl), 0)

def AddDataControl(builder, dataControl):
    Sensor_AbridgedAddDataControl(builder, dataControl)

def Sensor_AbridgedAddAfId(builder, afId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(afId), 0)

def AddAfId(builder, afId):
    Sensor_AbridgedAddAfId(builder, afId)

def Sensor_AbridgedAddAsrType(builder, asrType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(asrType), 0)

def AddAsrType(builder, asrType):
    Sensor_AbridgedAddAsrType(builder, asrType)

def Sensor_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Sensor_AbridgedAddSource(builder, source)

def Sensor_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Sensor_AbridgedAddOrigin(builder, origin)

def Sensor_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Sensor_AbridgedAddOrigNetwork(builder, origNetwork)

def Sensor_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(11, dataMode, 0)

def AddDataMode(builder, dataMode):
    Sensor_AbridgedAddDataMode(builder, dataMode)

def Sensor_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Sensor_AbridgedAddCreatedAt(builder, createdAt)

def Sensor_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Sensor_AbridgedAddCreatedBy(builder, createdBy)

def Sensor_AbridgedAddActive(builder, active):
    builder.PrependBoolSlot(14, active, 0)

def AddActive(builder, active):
    Sensor_AbridgedAddActive(builder, active)

def Sensor_AbridgedAddSensorcharacteristics(builder, sensorcharacteristics):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(sensorcharacteristics), 0)

def AddSensorcharacteristics(builder, sensorcharacteristics):
    Sensor_AbridgedAddSensorcharacteristics(builder, sensorcharacteristics)

def Sensor_AbridgedStartSensorcharacteristicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSensorcharacteristicsVector(builder, numElems):
    return Sensor_AbridgedStartSensorcharacteristicsVector(builder, numElems)

def Sensor_AbridgedAddSensorStats(builder, sensorStats):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(sensorStats), 0)

def AddSensorStats(builder, sensorStats):
    Sensor_AbridgedAddSensorStats(builder, sensorStats)

def Sensor_AbridgedStartSensorStatsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSensorStatsVector(builder, numElems):
    return Sensor_AbridgedStartSensorStatsVector(builder, numElems)

def Sensor_AbridgedAddSensorlimitsCollection(builder, sensorlimitsCollection):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(sensorlimitsCollection), 0)

def AddSensorlimitsCollection(builder, sensorlimitsCollection):
    Sensor_AbridgedAddSensorlimitsCollection(builder, sensorlimitsCollection)

def Sensor_AbridgedStartSensorlimitsCollectionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSensorlimitsCollectionVector(builder, numElems):
    return Sensor_AbridgedStartSensorlimitsCollectionVector(builder, numElems)

def Sensor_AbridgedAddEntity(builder, entity):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)

def AddEntity(builder, entity):
    Sensor_AbridgedAddEntity(builder, entity)

def Sensor_AbridgedAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Sensor_AbridgedAddIdEntity(builder, idEntity)

def Sensor_AbridgedAddSensorObservationType(builder, sensorObservationType):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(sensorObservationType), 0)

def AddSensorObservationType(builder, sensorObservationType):
    Sensor_AbridgedAddSensorObservationType(builder, sensorObservationType)

def Sensor_AbridgedAddSensorType(builder, sensorType):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(sensorType), 0)

def AddSensorType(builder, sensorType):
    Sensor_AbridgedAddSensorType(builder, sensorType)

def Sensor_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Sensor_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class Sensor_AbridgedT(object):

    # Sensor_AbridgedT
    def __init__(self):
        self.idSensor = None  # type: str
        self.sensorName = None  # type: str
        self.classificationMarking = None  # type: str
        self.sensorNumber = 0  # type: int
        self.shortName = None  # type: str
        self.dataControl = None  # type: str
        self.afId = None  # type: str
        self.asrType = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.active = False  # type: bool
        self.sensorcharacteristics = None  # type: List[str]
        self.sensorStats = None  # type: List[str]
        self.sensorlimitsCollection = None  # type: List[str]
        self.entity = None  # type: str
        self.idEntity = None  # type: str
        self.sensorObservationType = None  # type: str
        self.sensorType = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorAbridged = Sensor_Abridged()
        sensorAbridged.Init(buf, pos)
        return cls.InitFromObj(sensorAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorAbridged):
        x = Sensor_AbridgedT()
        x._UnPack(sensorAbridged)
        return x

    # Sensor_AbridgedT
    def _UnPack(self, sensorAbridged):
        if sensorAbridged is None:
            return
        self.idSensor = sensorAbridged.IdSensor()
        self.sensorName = sensorAbridged.SensorName()
        self.classificationMarking = sensorAbridged.ClassificationMarking()
        self.sensorNumber = sensorAbridged.SensorNumber()
        self.shortName = sensorAbridged.ShortName()
        self.dataControl = sensorAbridged.DataControl()
        self.afId = sensorAbridged.AfId()
        self.asrType = sensorAbridged.AsrType()
        self.source = sensorAbridged.Source()
        self.origin = sensorAbridged.Origin()
        self.origNetwork = sensorAbridged.OrigNetwork()
        self.dataMode = sensorAbridged.DataMode()
        self.createdAt = sensorAbridged.CreatedAt()
        self.createdBy = sensorAbridged.CreatedBy()
        self.active = sensorAbridged.Active()
        if not sensorAbridged.SensorcharacteristicsIsNone():
            self.sensorcharacteristics = []
            for i in range(sensorAbridged.SensorcharacteristicsLength()):
                self.sensorcharacteristics.append(sensorAbridged.Sensorcharacteristics(i))
        if not sensorAbridged.SensorStatsIsNone():
            self.sensorStats = []
            for i in range(sensorAbridged.SensorStatsLength()):
                self.sensorStats.append(sensorAbridged.SensorStats(i))
        if not sensorAbridged.SensorlimitsCollectionIsNone():
            self.sensorlimitsCollection = []
            for i in range(sensorAbridged.SensorlimitsCollectionLength()):
                self.sensorlimitsCollection.append(sensorAbridged.SensorlimitsCollection(i))
        self.entity = sensorAbridged.Entity()
        self.idEntity = sensorAbridged.IdEntity()
        self.sensorObservationType = sensorAbridged.SensorObservationType()
        self.sensorType = sensorAbridged.SensorType()

    # Sensor_AbridgedT
    def Pack(self, builder):
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.sensorName is not None:
            sensorName = builder.CreateString(self.sensorName)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.shortName is not None:
            shortName = builder.CreateString(self.shortName)
        if self.dataControl is not None:
            dataControl = builder.CreateString(self.dataControl)
        if self.afId is not None:
            afId = builder.CreateString(self.afId)
        if self.asrType is not None:
            asrType = builder.CreateString(self.asrType)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sensorcharacteristics is not None:
            sensorcharacteristicslist = []
            for i in range(len(self.sensorcharacteristics)):
                sensorcharacteristicslist.append(builder.CreateString(self.sensorcharacteristics[i]))
            Sensor_AbridgedStartSensorcharacteristicsVector(builder, len(self.sensorcharacteristics))
            for i in reversed(range(len(self.sensorcharacteristics))):
                builder.PrependUOffsetTRelative(sensorcharacteristicslist[i])
            sensorcharacteristics = builder.EndVector()
        if self.sensorStats is not None:
            sensorStatslist = []
            for i in range(len(self.sensorStats)):
                sensorStatslist.append(builder.CreateString(self.sensorStats[i]))
            Sensor_AbridgedStartSensorStatsVector(builder, len(self.sensorStats))
            for i in reversed(range(len(self.sensorStats))):
                builder.PrependUOffsetTRelative(sensorStatslist[i])
            sensorStats = builder.EndVector()
        if self.sensorlimitsCollection is not None:
            sensorlimitsCollectionlist = []
            for i in range(len(self.sensorlimitsCollection)):
                sensorlimitsCollectionlist.append(builder.CreateString(self.sensorlimitsCollection[i]))
            Sensor_AbridgedStartSensorlimitsCollectionVector(builder, len(self.sensorlimitsCollection))
            for i in reversed(range(len(self.sensorlimitsCollection))):
                builder.PrependUOffsetTRelative(sensorlimitsCollectionlist[i])
            sensorlimitsCollection = builder.EndVector()
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.sensorObservationType is not None:
            sensorObservationType = builder.CreateString(self.sensorObservationType)
        if self.sensorType is not None:
            sensorType = builder.CreateString(self.sensorType)
        Sensor_AbridgedStart(builder)
        if self.idSensor is not None:
            Sensor_AbridgedAddIdSensor(builder, idSensor)
        if self.sensorName is not None:
            Sensor_AbridgedAddSensorName(builder, sensorName)
        if self.classificationMarking is not None:
            Sensor_AbridgedAddClassificationMarking(builder, classificationMarking)
        Sensor_AbridgedAddSensorNumber(builder, self.sensorNumber)
        if self.shortName is not None:
            Sensor_AbridgedAddShortName(builder, shortName)
        if self.dataControl is not None:
            Sensor_AbridgedAddDataControl(builder, dataControl)
        if self.afId is not None:
            Sensor_AbridgedAddAfId(builder, afId)
        if self.asrType is not None:
            Sensor_AbridgedAddAsrType(builder, asrType)
        if self.source is not None:
            Sensor_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Sensor_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Sensor_AbridgedAddOrigNetwork(builder, origNetwork)
        Sensor_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Sensor_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Sensor_AbridgedAddCreatedBy(builder, createdBy)
        Sensor_AbridgedAddActive(builder, self.active)
        if self.sensorcharacteristics is not None:
            Sensor_AbridgedAddSensorcharacteristics(builder, sensorcharacteristics)
        if self.sensorStats is not None:
            Sensor_AbridgedAddSensorStats(builder, sensorStats)
        if self.sensorlimitsCollection is not None:
            Sensor_AbridgedAddSensorlimitsCollection(builder, sensorlimitsCollection)
        if self.entity is not None:
            Sensor_AbridgedAddEntity(builder, entity)
        if self.idEntity is not None:
            Sensor_AbridgedAddIdEntity(builder, idEntity)
        if self.sensorObservationType is not None:
            Sensor_AbridgedAddSensorObservationType(builder, sensorObservationType)
        if self.sensorType is not None:
            Sensor_AbridgedAddSensorType(builder, sensorType)
        sensorAbridged = Sensor_AbridgedEnd(builder)
        return sensorAbridged
