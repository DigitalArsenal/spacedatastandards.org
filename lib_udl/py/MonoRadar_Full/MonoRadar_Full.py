# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
class MonoRadar_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MonoRadar_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMonoRadar_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MonoRadar_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # MonoRadar_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MONORADAR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # MonoRadar_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # MonoRadar_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Test target indicator.
    # Example: /// Example: TTI
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Tti(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the radar site or station providing the data.
    # Example: /// Example: REF-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # MonoRadar_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude, in kilometers, at time of observation (ts).
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # System Area Code.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Sac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # System Identification Code.
    # Example: /// Example: 40
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Sic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Aircraft identification from an aircraft equipped with a Mode S transponder.
    # Example: /// Example: TGT-ID
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Tgtid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
    # Example: /// Example: ADDR-ID
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Addr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
    # Example: /// Example: CAT48
    # Constraints: Minimum length = 1, Maximum length = 16
    # MonoRadar_Full
    def Msgfmt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
    # Example: /// Example: BCN
    # Constraints: Minimum length = 1, Maximum length = 16
    # MonoRadar_Full
    def Msgtyp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating military message.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Af(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating FAA/Civ message.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Faa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Spi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating whether AIMS present.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Aims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that target was detected using data from an MTI receiver.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Mti(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Number of beacon hits received on the target.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Bcnhits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Target detection time, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Msgts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Measured slant range to target from the observing site, in km.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Rng(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Az(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Azimuth Change Pulse count at target detection.
    # Example: /// Example: 100
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Acp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Measured height of the target, in km. (for 3D radars).
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Alt3d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mode-C altitude (uncorrected pressure altitude), in km.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Mc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Status of the mode-C validity bit.
    # Example: /// Example: MCV
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Mcv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator that the mode-C response was garbled.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Mcg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Mode-1 interrogation response (mission code).
    # Example: /// Example: MISSION_CODE
    # Constraints: Minimum length = 0, Maximum length = 128
    # MonoRadar_Full
    def M1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the mode-1 validity bit.
    # Example: /// Example: M1V
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def M1v(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator that the mode-1 response was garbled.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def M1g(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Mode-2 interrogation response (military identification code).
    # Example: /// Example: MILITARY_ID_CODE
    # Constraints: Minimum length = 0, Maximum length = 128
    # MonoRadar_Full
    def M2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the mode-2 validity bit.
    # Example: /// Example: M2V
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def M2v(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the mode-2 X-Pulse response validation.
    # Example: /// Example: M2XV
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def M2xv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator that the mode-2 response was garbled.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def M2g(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Mode-3/A interrogation response (aircraft identification).
    # Example: /// Example: AIRCRAFT_ID
    # Constraints: Minimum length = 0, Maximum length = 128
    # MonoRadar_Full
    def M3a(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the mode-3/A validity bit.
    # Example: /// Example: M3AV
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def M3av(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator that the mode-3/A response was garbled.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def M3ag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Status of the mode-3 X-Pulse response validation.
    # Example: /// Example: M3AXV
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def M3axv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mode-4 interrogation response (Identification Friend/Foe).
    # Example: /// Example: ID_FRIEND
    # Constraints: Minimum length = 0, Maximum length = 24
    # MonoRadar_Full
    def M4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the mode-4 validity bit.
    # Example: /// Example: M4V
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def M4v(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mode-4 D1 & D2 response status.
    # Example: /// Example: STATUS
    # Constraints: Minimum length = 0, Maximum length = 8
    # MonoRadar_Full
    def M4d1d2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mode-S Comm B message data.
    # Example: /// Example: MSCOMMB
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Mscommb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating military emergency.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Milemrgcy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # 7500 squawk present (hijack).
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Code7500(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # 7600 squawk present (loss of comm).
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Code7600(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # 7700 squawk present (general emergency).
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Code7700(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Target ground speed, in meters/second.
    # Example: /// Example: 30.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Grndspd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target heading, in degrees from true North at the target position.
    # Example: /// Example: 30.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Hdng(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
    # Example: /// Example: 30
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Trknum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Type of sensor(s) maintaining track.
    # Example: /// Example: RAD
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Rad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indication of Horizontal Maneuver detection.
    # Example: /// Example: MAH
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Mah(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Climbing/Descending mode indicator.
    # Example: /// Example: CDM
    # Constraints: Minimum length = 0, Maximum length = 24
    # MonoRadar_Full
    def Cdm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of local 2d-cartesian [x, y] coordinates of target, in km.
    # Example: /// Example: [1.2, 2.2]
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Cartpos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MonoRadar_Full
    def CartposLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MonoRadar_Full
    def CartposIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # Runlength of the primary surveillance radar track, in degrees.
    # Example: /// Example: 44.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Psrrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Runlength of the secondary surveillance radar track, in degrees.
    # Example: /// Example: 44.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Ssrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target range delta between PSR and SSR (reference PSR-SSR), in km.
    # Example: /// Example: 44.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Rngdelt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
    # Example: /// Example: 44.23
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Azdelt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Warning/Error Conditions and Target Classification.
    # Example: /// Example: ['WARNING', 'WARNING']
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Wectc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MonoRadar_Full
    def WectcLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MonoRadar_Full
    def WectcIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Mrgrpt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ARTS quality.
    # Example: /// Example: QUALITY
    # Constraints: Minimum length = 0, Maximum length = 64
    # MonoRadar_Full
    def Artsqual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track eligibility flag.
    # Example: /// Example: ELIGIBILITY
    # Constraints: Minimum length = 0, Maximum length = 24
    # MonoRadar_Full
    def Trkelig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Target confidence.
    # Example: /// Example: CONFIDENCE
    # Constraints: Minimum length = 0, Maximum length = 24
    # MonoRadar_Full
    def Tgtconf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Target correlation flag.
    # Example: /// Example: CORRELATION
    # Constraints: Minimum length = 0, Maximum length = 16
    # MonoRadar_Full
    def Tgtcorr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
    # Example: /// Example: 0.4
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Tis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # MonoRadar_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MonoRadar_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        return o == 0

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # MonoRadar_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # MonoRadar_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # MonoRadar_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # MonoRadar_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # MonoRadar_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # MonoRadar_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # MonoRadar_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MonoRadar_FullStart(builder):
    builder.StartObject(73)

def Start(builder):
    MonoRadar_FullStart(builder)

def MonoRadar_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    MonoRadar_FullAddId(builder, id)

def MonoRadar_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    MonoRadar_FullAddClassificationMarking(builder, classificationMarking)

def MonoRadar_FullAddTti(builder, tti):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tti), 0)

def AddTti(builder, tti):
    MonoRadar_FullAddTti(builder, tti)

def MonoRadar_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    MonoRadar_FullAddIdSensor(builder, idSensor)

def MonoRadar_FullAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(4, senlat, 0.0)

def AddSenlat(builder, senlat):
    MonoRadar_FullAddSenlat(builder, senlat)

def MonoRadar_FullAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(5, senlon, 0.0)

def AddSenlon(builder, senlon):
    MonoRadar_FullAddSenlon(builder, senlon)

def MonoRadar_FullAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(6, senalt, 0.0)

def AddSenalt(builder, senalt):
    MonoRadar_FullAddSenalt(builder, senalt)

def MonoRadar_FullAddSac(builder, sac):
    builder.PrependInt32Slot(7, sac, 0)

def AddSac(builder, sac):
    MonoRadar_FullAddSac(builder, sac)

def MonoRadar_FullAddSic(builder, sic):
    builder.PrependInt32Slot(8, sic, 0)

def AddSic(builder, sic):
    MonoRadar_FullAddSic(builder, sic)

def MonoRadar_FullAddTgtid(builder, tgtid):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tgtid), 0)

def AddTgtid(builder, tgtid):
    MonoRadar_FullAddTgtid(builder, tgtid)

def MonoRadar_FullAddAddr(builder, addr):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(addr), 0)

def AddAddr(builder, addr):
    MonoRadar_FullAddAddr(builder, addr)

def MonoRadar_FullAddMsgfmt(builder, msgfmt):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(msgfmt), 0)

def AddMsgfmt(builder, msgfmt):
    MonoRadar_FullAddMsgfmt(builder, msgfmt)

def MonoRadar_FullAddMsgtyp(builder, msgtyp):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(msgtyp), 0)

def AddMsgtyp(builder, msgtyp):
    MonoRadar_FullAddMsgtyp(builder, msgtyp)

def MonoRadar_FullAddAf(builder, af):
    builder.PrependBoolSlot(13, af, 0)

def AddAf(builder, af):
    MonoRadar_FullAddAf(builder, af)

def MonoRadar_FullAddFaa(builder, faa):
    builder.PrependBoolSlot(14, faa, 0)

def AddFaa(builder, faa):
    MonoRadar_FullAddFaa(builder, faa)

def MonoRadar_FullAddSpi(builder, spi):
    builder.PrependBoolSlot(15, spi, 0)

def AddSpi(builder, spi):
    MonoRadar_FullAddSpi(builder, spi)

def MonoRadar_FullAddAims(builder, aims):
    builder.PrependBoolSlot(16, aims, 0)

def AddAims(builder, aims):
    MonoRadar_FullAddAims(builder, aims)

def MonoRadar_FullAddMti(builder, mti):
    builder.PrependBoolSlot(17, mti, 0)

def AddMti(builder, mti):
    MonoRadar_FullAddMti(builder, mti)

def MonoRadar_FullAddBcnhits(builder, bcnhits):
    builder.PrependInt32Slot(18, bcnhits, 0)

def AddBcnhits(builder, bcnhits):
    MonoRadar_FullAddBcnhits(builder, bcnhits)

def MonoRadar_FullAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    MonoRadar_FullAddTs(builder, ts)

def MonoRadar_FullAddMsgts(builder, msgts):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(msgts), 0)

def AddMsgts(builder, msgts):
    MonoRadar_FullAddMsgts(builder, msgts)

def MonoRadar_FullAddRng(builder, rng):
    builder.PrependFloat64Slot(21, rng, 0.0)

def AddRng(builder, rng):
    MonoRadar_FullAddRng(builder, rng)

def MonoRadar_FullAddAz(builder, az):
    builder.PrependFloat64Slot(22, az, 0.0)

def AddAz(builder, az):
    MonoRadar_FullAddAz(builder, az)

def MonoRadar_FullAddAcp(builder, acp):
    builder.PrependInt32Slot(23, acp, 0)

def AddAcp(builder, acp):
    MonoRadar_FullAddAcp(builder, acp)

def MonoRadar_FullAddAlt3d(builder, alt3d):
    builder.PrependFloat64Slot(24, alt3d, 0.0)

def AddAlt3d(builder, alt3d):
    MonoRadar_FullAddAlt3d(builder, alt3d)

def MonoRadar_FullAddMc(builder, mc):
    builder.PrependFloat64Slot(25, mc, 0.0)

def AddMc(builder, mc):
    MonoRadar_FullAddMc(builder, mc)

def MonoRadar_FullAddMcv(builder, mcv):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(mcv), 0)

def AddMcv(builder, mcv):
    MonoRadar_FullAddMcv(builder, mcv)

def MonoRadar_FullAddMcg(builder, mcg):
    builder.PrependBoolSlot(27, mcg, 0)

def AddMcg(builder, mcg):
    MonoRadar_FullAddMcg(builder, mcg)

def MonoRadar_FullAddM1(builder, m1):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(m1), 0)

def AddM1(builder, m1):
    MonoRadar_FullAddM1(builder, m1)

def MonoRadar_FullAddM1v(builder, m1v):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(m1v), 0)

def AddM1v(builder, m1v):
    MonoRadar_FullAddM1v(builder, m1v)

def MonoRadar_FullAddM1g(builder, m1g):
    builder.PrependBoolSlot(30, m1g, 0)

def AddM1g(builder, m1g):
    MonoRadar_FullAddM1g(builder, m1g)

def MonoRadar_FullAddM2(builder, m2):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(m2), 0)

def AddM2(builder, m2):
    MonoRadar_FullAddM2(builder, m2)

def MonoRadar_FullAddM2v(builder, m2v):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(m2v), 0)

def AddM2v(builder, m2v):
    MonoRadar_FullAddM2v(builder, m2v)

def MonoRadar_FullAddM2xv(builder, m2xv):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(m2xv), 0)

def AddM2xv(builder, m2xv):
    MonoRadar_FullAddM2xv(builder, m2xv)

def MonoRadar_FullAddM2g(builder, m2g):
    builder.PrependBoolSlot(34, m2g, 0)

def AddM2g(builder, m2g):
    MonoRadar_FullAddM2g(builder, m2g)

def MonoRadar_FullAddM3a(builder, m3a):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(m3a), 0)

def AddM3a(builder, m3a):
    MonoRadar_FullAddM3a(builder, m3a)

def MonoRadar_FullAddM3av(builder, m3av):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(m3av), 0)

def AddM3av(builder, m3av):
    MonoRadar_FullAddM3av(builder, m3av)

def MonoRadar_FullAddM3ag(builder, m3ag):
    builder.PrependBoolSlot(37, m3ag, 0)

def AddM3ag(builder, m3ag):
    MonoRadar_FullAddM3ag(builder, m3ag)

def MonoRadar_FullAddM3axv(builder, m3axv):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(m3axv), 0)

def AddM3axv(builder, m3axv):
    MonoRadar_FullAddM3axv(builder, m3axv)

def MonoRadar_FullAddM4(builder, m4):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(m4), 0)

def AddM4(builder, m4):
    MonoRadar_FullAddM4(builder, m4)

def MonoRadar_FullAddM4v(builder, m4v):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(m4v), 0)

def AddM4v(builder, m4v):
    MonoRadar_FullAddM4v(builder, m4v)

def MonoRadar_FullAddM4d1d2(builder, m4d1d2):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(m4d1d2), 0)

def AddM4d1d2(builder, m4d1d2):
    MonoRadar_FullAddM4d1d2(builder, m4d1d2)

def MonoRadar_FullAddMscommb(builder, mscommb):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(mscommb), 0)

def AddMscommb(builder, mscommb):
    MonoRadar_FullAddMscommb(builder, mscommb)

def MonoRadar_FullAddMilemrgcy(builder, milemrgcy):
    builder.PrependBoolSlot(43, milemrgcy, 0)

def AddMilemrgcy(builder, milemrgcy):
    MonoRadar_FullAddMilemrgcy(builder, milemrgcy)

def MonoRadar_FullAddCode7500(builder, code7500):
    builder.PrependBoolSlot(44, code7500, 0)

def AddCode7500(builder, code7500):
    MonoRadar_FullAddCode7500(builder, code7500)

def MonoRadar_FullAddCode7600(builder, code7600):
    builder.PrependBoolSlot(45, code7600, 0)

def AddCode7600(builder, code7600):
    MonoRadar_FullAddCode7600(builder, code7600)

def MonoRadar_FullAddCode7700(builder, code7700):
    builder.PrependBoolSlot(46, code7700, 0)

def AddCode7700(builder, code7700):
    MonoRadar_FullAddCode7700(builder, code7700)

def MonoRadar_FullAddGrndspd(builder, grndspd):
    builder.PrependFloat64Slot(47, grndspd, 0.0)

def AddGrndspd(builder, grndspd):
    MonoRadar_FullAddGrndspd(builder, grndspd)

def MonoRadar_FullAddHdng(builder, hdng):
    builder.PrependFloat64Slot(48, hdng, 0.0)

def AddHdng(builder, hdng):
    MonoRadar_FullAddHdng(builder, hdng)

def MonoRadar_FullAddTrknum(builder, trknum):
    builder.PrependInt32Slot(49, trknum, 0)

def AddTrknum(builder, trknum):
    MonoRadar_FullAddTrknum(builder, trknum)

def MonoRadar_FullAddRad(builder, rad):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(rad), 0)

def AddRad(builder, rad):
    MonoRadar_FullAddRad(builder, rad)

def MonoRadar_FullAddMah(builder, mah):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(mah), 0)

def AddMah(builder, mah):
    MonoRadar_FullAddMah(builder, mah)

def MonoRadar_FullAddCdm(builder, cdm):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(cdm), 0)

def AddCdm(builder, cdm):
    MonoRadar_FullAddCdm(builder, cdm)

def MonoRadar_FullAddCartpos(builder, cartpos):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(cartpos), 0)

def AddCartpos(builder, cartpos):
    MonoRadar_FullAddCartpos(builder, cartpos)

def MonoRadar_FullStartCartposVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCartposVector(builder, numElems):
    return MonoRadar_FullStartCartposVector(builder, numElems)

def MonoRadar_FullAddPsrrl(builder, psrrl):
    builder.PrependFloat64Slot(54, psrrl, 0.0)

def AddPsrrl(builder, psrrl):
    MonoRadar_FullAddPsrrl(builder, psrrl)

def MonoRadar_FullAddSsrl(builder, ssrl):
    builder.PrependFloat64Slot(55, ssrl, 0.0)

def AddSsrl(builder, ssrl):
    MonoRadar_FullAddSsrl(builder, ssrl)

def MonoRadar_FullAddRngdelt(builder, rngdelt):
    builder.PrependFloat64Slot(56, rngdelt, 0.0)

def AddRngdelt(builder, rngdelt):
    MonoRadar_FullAddRngdelt(builder, rngdelt)

def MonoRadar_FullAddAzdelt(builder, azdelt):
    builder.PrependFloat64Slot(57, azdelt, 0.0)

def AddAzdelt(builder, azdelt):
    MonoRadar_FullAddAzdelt(builder, azdelt)

def MonoRadar_FullAddWectc(builder, wectc):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(wectc), 0)

def AddWectc(builder, wectc):
    MonoRadar_FullAddWectc(builder, wectc)

def MonoRadar_FullStartWectcVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWectcVector(builder, numElems):
    return MonoRadar_FullStartWectcVector(builder, numElems)

def MonoRadar_FullAddMrgrpt(builder, mrgrpt):
    builder.PrependBoolSlot(59, mrgrpt, 0)

def AddMrgrpt(builder, mrgrpt):
    MonoRadar_FullAddMrgrpt(builder, mrgrpt)

def MonoRadar_FullAddArtsqual(builder, artsqual):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(artsqual), 0)

def AddArtsqual(builder, artsqual):
    MonoRadar_FullAddArtsqual(builder, artsqual)

def MonoRadar_FullAddTrkelig(builder, trkelig):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(trkelig), 0)

def AddTrkelig(builder, trkelig):
    MonoRadar_FullAddTrkelig(builder, trkelig)

def MonoRadar_FullAddTgtconf(builder, tgtconf):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(tgtconf), 0)

def AddTgtconf(builder, tgtconf):
    MonoRadar_FullAddTgtconf(builder, tgtconf)

def MonoRadar_FullAddTgtcorr(builder, tgtcorr):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(tgtcorr), 0)

def AddTgtcorr(builder, tgtcorr):
    MonoRadar_FullAddTgtcorr(builder, tgtcorr)

def MonoRadar_FullAddTis(builder, tis):
    builder.PrependFloat64Slot(64, tis, 0.0)

def AddTis(builder, tis):
    MonoRadar_FullAddTis(builder, tis)

def MonoRadar_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    MonoRadar_FullAddTags(builder, tags)

def MonoRadar_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return MonoRadar_FullStartTagsVector(builder, numElems)

def MonoRadar_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    MonoRadar_FullAddOrigSensorId(builder, origSensorId)

def MonoRadar_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    MonoRadar_FullAddSource(builder, source)

def MonoRadar_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    MonoRadar_FullAddOrigin(builder, origin)

def MonoRadar_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(69, dataMode, 0)

def AddDataMode(builder, dataMode):
    MonoRadar_FullAddDataMode(builder, dataMode)

def MonoRadar_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    MonoRadar_FullAddCreatedAt(builder, createdAt)

def MonoRadar_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    MonoRadar_FullAddCreatedBy(builder, createdBy)

def MonoRadar_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    MonoRadar_FullAddOrigNetwork(builder, origNetwork)

def MonoRadar_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return MonoRadar_FullEnd(builder)

try:
    from typing import List
except:
    pass

class MonoRadar_FullT(object):

    # MonoRadar_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.tti = None  # type: str
        self.idSensor = None  # type: str
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.sac = 0  # type: int
        self.sic = 0  # type: int
        self.tgtid = None  # type: str
        self.addr = None  # type: str
        self.msgfmt = None  # type: str
        self.msgtyp = None  # type: str
        self.af = False  # type: bool
        self.faa = False  # type: bool
        self.spi = False  # type: bool
        self.aims = False  # type: bool
        self.mti = False  # type: bool
        self.bcnhits = 0  # type: int
        self.ts = None  # type: str
        self.msgts = None  # type: str
        self.rng = 0.0  # type: float
        self.az = 0.0  # type: float
        self.acp = 0  # type: int
        self.alt3d = 0.0  # type: float
        self.mc = 0.0  # type: float
        self.mcv = None  # type: str
        self.mcg = False  # type: bool
        self.m1 = None  # type: str
        self.m1v = None  # type: str
        self.m1g = False  # type: bool
        self.m2 = None  # type: str
        self.m2v = None  # type: str
        self.m2xv = None  # type: str
        self.m2g = False  # type: bool
        self.m3a = None  # type: str
        self.m3av = None  # type: str
        self.m3ag = False  # type: bool
        self.m3axv = None  # type: str
        self.m4 = None  # type: str
        self.m4v = None  # type: str
        self.m4d1d2 = None  # type: str
        self.mscommb = None  # type: str
        self.milemrgcy = False  # type: bool
        self.code7500 = False  # type: bool
        self.code7600 = False  # type: bool
        self.code7700 = False  # type: bool
        self.grndspd = 0.0  # type: float
        self.hdng = 0.0  # type: float
        self.trknum = 0  # type: int
        self.rad = None  # type: str
        self.mah = None  # type: str
        self.cdm = None  # type: str
        self.cartpos = None  # type: List[str]
        self.psrrl = 0.0  # type: float
        self.ssrl = 0.0  # type: float
        self.rngdelt = 0.0  # type: float
        self.azdelt = 0.0  # type: float
        self.wectc = None  # type: List[str]
        self.mrgrpt = False  # type: bool
        self.artsqual = None  # type: str
        self.trkelig = None  # type: str
        self.tgtconf = None  # type: str
        self.tgtcorr = None  # type: str
        self.tis = 0.0  # type: float
        self.tags = None  # type: List[str]
        self.origSensorId = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        monoRadarFull = MonoRadar_Full()
        monoRadarFull.Init(buf, pos)
        return cls.InitFromObj(monoRadarFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, monoRadarFull):
        x = MonoRadar_FullT()
        x._UnPack(monoRadarFull)
        return x

    # MonoRadar_FullT
    def _UnPack(self, monoRadarFull):
        if monoRadarFull is None:
            return
        self.id = monoRadarFull.Id()
        self.classificationMarking = monoRadarFull.ClassificationMarking()
        self.tti = monoRadarFull.Tti()
        self.idSensor = monoRadarFull.IdSensor()
        self.senlat = monoRadarFull.Senlat()
        self.senlon = monoRadarFull.Senlon()
        self.senalt = monoRadarFull.Senalt()
        self.sac = monoRadarFull.Sac()
        self.sic = monoRadarFull.Sic()
        self.tgtid = monoRadarFull.Tgtid()
        self.addr = monoRadarFull.Addr()
        self.msgfmt = monoRadarFull.Msgfmt()
        self.msgtyp = monoRadarFull.Msgtyp()
        self.af = monoRadarFull.Af()
        self.faa = monoRadarFull.Faa()
        self.spi = monoRadarFull.Spi()
        self.aims = monoRadarFull.Aims()
        self.mti = monoRadarFull.Mti()
        self.bcnhits = monoRadarFull.Bcnhits()
        self.ts = monoRadarFull.Ts()
        self.msgts = monoRadarFull.Msgts()
        self.rng = monoRadarFull.Rng()
        self.az = monoRadarFull.Az()
        self.acp = monoRadarFull.Acp()
        self.alt3d = monoRadarFull.Alt3d()
        self.mc = monoRadarFull.Mc()
        self.mcv = monoRadarFull.Mcv()
        self.mcg = monoRadarFull.Mcg()
        self.m1 = monoRadarFull.M1()
        self.m1v = monoRadarFull.M1v()
        self.m1g = monoRadarFull.M1g()
        self.m2 = monoRadarFull.M2()
        self.m2v = monoRadarFull.M2v()
        self.m2xv = monoRadarFull.M2xv()
        self.m2g = monoRadarFull.M2g()
        self.m3a = monoRadarFull.M3a()
        self.m3av = monoRadarFull.M3av()
        self.m3ag = monoRadarFull.M3ag()
        self.m3axv = monoRadarFull.M3axv()
        self.m4 = monoRadarFull.M4()
        self.m4v = monoRadarFull.M4v()
        self.m4d1d2 = monoRadarFull.M4d1d2()
        self.mscommb = monoRadarFull.Mscommb()
        self.milemrgcy = monoRadarFull.Milemrgcy()
        self.code7500 = monoRadarFull.Code7500()
        self.code7600 = monoRadarFull.Code7600()
        self.code7700 = monoRadarFull.Code7700()
        self.grndspd = monoRadarFull.Grndspd()
        self.hdng = monoRadarFull.Hdng()
        self.trknum = monoRadarFull.Trknum()
        self.rad = monoRadarFull.Rad()
        self.mah = monoRadarFull.Mah()
        self.cdm = monoRadarFull.Cdm()
        if not monoRadarFull.CartposIsNone():
            self.cartpos = []
            for i in range(monoRadarFull.CartposLength()):
                self.cartpos.append(monoRadarFull.Cartpos(i))
        self.psrrl = monoRadarFull.Psrrl()
        self.ssrl = monoRadarFull.Ssrl()
        self.rngdelt = monoRadarFull.Rngdelt()
        self.azdelt = monoRadarFull.Azdelt()
        if not monoRadarFull.WectcIsNone():
            self.wectc = []
            for i in range(monoRadarFull.WectcLength()):
                self.wectc.append(monoRadarFull.Wectc(i))
        self.mrgrpt = monoRadarFull.Mrgrpt()
        self.artsqual = monoRadarFull.Artsqual()
        self.trkelig = monoRadarFull.Trkelig()
        self.tgtconf = monoRadarFull.Tgtconf()
        self.tgtcorr = monoRadarFull.Tgtcorr()
        self.tis = monoRadarFull.Tis()
        if not monoRadarFull.TagsIsNone():
            self.tags = []
            for i in range(monoRadarFull.TagsLength()):
                self.tags.append(monoRadarFull.Tags(i))
        self.origSensorId = monoRadarFull.OrigSensorId()
        self.source = monoRadarFull.Source()
        self.origin = monoRadarFull.Origin()
        self.dataMode = monoRadarFull.DataMode()
        self.createdAt = monoRadarFull.CreatedAt()
        self.createdBy = monoRadarFull.CreatedBy()
        self.origNetwork = monoRadarFull.OrigNetwork()

    # MonoRadar_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.tti is not None:
            tti = builder.CreateString(self.tti)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.tgtid is not None:
            tgtid = builder.CreateString(self.tgtid)
        if self.addr is not None:
            addr = builder.CreateString(self.addr)
        if self.msgfmt is not None:
            msgfmt = builder.CreateString(self.msgfmt)
        if self.msgtyp is not None:
            msgtyp = builder.CreateString(self.msgtyp)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.msgts is not None:
            msgts = builder.CreateString(self.msgts)
        if self.mcv is not None:
            mcv = builder.CreateString(self.mcv)
        if self.m1 is not None:
            m1 = builder.CreateString(self.m1)
        if self.m1v is not None:
            m1v = builder.CreateString(self.m1v)
        if self.m2 is not None:
            m2 = builder.CreateString(self.m2)
        if self.m2v is not None:
            m2v = builder.CreateString(self.m2v)
        if self.m2xv is not None:
            m2xv = builder.CreateString(self.m2xv)
        if self.m3a is not None:
            m3a = builder.CreateString(self.m3a)
        if self.m3av is not None:
            m3av = builder.CreateString(self.m3av)
        if self.m3axv is not None:
            m3axv = builder.CreateString(self.m3axv)
        if self.m4 is not None:
            m4 = builder.CreateString(self.m4)
        if self.m4v is not None:
            m4v = builder.CreateString(self.m4v)
        if self.m4d1d2 is not None:
            m4d1d2 = builder.CreateString(self.m4d1d2)
        if self.mscommb is not None:
            mscommb = builder.CreateString(self.mscommb)
        if self.rad is not None:
            rad = builder.CreateString(self.rad)
        if self.mah is not None:
            mah = builder.CreateString(self.mah)
        if self.cdm is not None:
            cdm = builder.CreateString(self.cdm)
        if self.cartpos is not None:
            cartposlist = []
            for i in range(len(self.cartpos)):
                cartposlist.append(builder.CreateString(self.cartpos[i]))
            MonoRadar_FullStartCartposVector(builder, len(self.cartpos))
            for i in reversed(range(len(self.cartpos))):
                builder.PrependUOffsetTRelative(cartposlist[i])
            cartpos = builder.EndVector()
        if self.wectc is not None:
            wectclist = []
            for i in range(len(self.wectc)):
                wectclist.append(builder.CreateString(self.wectc[i]))
            MonoRadar_FullStartWectcVector(builder, len(self.wectc))
            for i in reversed(range(len(self.wectc))):
                builder.PrependUOffsetTRelative(wectclist[i])
            wectc = builder.EndVector()
        if self.artsqual is not None:
            artsqual = builder.CreateString(self.artsqual)
        if self.trkelig is not None:
            trkelig = builder.CreateString(self.trkelig)
        if self.tgtconf is not None:
            tgtconf = builder.CreateString(self.tgtconf)
        if self.tgtcorr is not None:
            tgtcorr = builder.CreateString(self.tgtcorr)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            MonoRadar_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        MonoRadar_FullStart(builder)
        if self.id is not None:
            MonoRadar_FullAddId(builder, id)
        if self.classificationMarking is not None:
            MonoRadar_FullAddClassificationMarking(builder, classificationMarking)
        if self.tti is not None:
            MonoRadar_FullAddTti(builder, tti)
        if self.idSensor is not None:
            MonoRadar_FullAddIdSensor(builder, idSensor)
        MonoRadar_FullAddSenlat(builder, self.senlat)
        MonoRadar_FullAddSenlon(builder, self.senlon)
        MonoRadar_FullAddSenalt(builder, self.senalt)
        MonoRadar_FullAddSac(builder, self.sac)
        MonoRadar_FullAddSic(builder, self.sic)
        if self.tgtid is not None:
            MonoRadar_FullAddTgtid(builder, tgtid)
        if self.addr is not None:
            MonoRadar_FullAddAddr(builder, addr)
        if self.msgfmt is not None:
            MonoRadar_FullAddMsgfmt(builder, msgfmt)
        if self.msgtyp is not None:
            MonoRadar_FullAddMsgtyp(builder, msgtyp)
        MonoRadar_FullAddAf(builder, self.af)
        MonoRadar_FullAddFaa(builder, self.faa)
        MonoRadar_FullAddSpi(builder, self.spi)
        MonoRadar_FullAddAims(builder, self.aims)
        MonoRadar_FullAddMti(builder, self.mti)
        MonoRadar_FullAddBcnhits(builder, self.bcnhits)
        if self.ts is not None:
            MonoRadar_FullAddTs(builder, ts)
        if self.msgts is not None:
            MonoRadar_FullAddMsgts(builder, msgts)
        MonoRadar_FullAddRng(builder, self.rng)
        MonoRadar_FullAddAz(builder, self.az)
        MonoRadar_FullAddAcp(builder, self.acp)
        MonoRadar_FullAddAlt3d(builder, self.alt3d)
        MonoRadar_FullAddMc(builder, self.mc)
        if self.mcv is not None:
            MonoRadar_FullAddMcv(builder, mcv)
        MonoRadar_FullAddMcg(builder, self.mcg)
        if self.m1 is not None:
            MonoRadar_FullAddM1(builder, m1)
        if self.m1v is not None:
            MonoRadar_FullAddM1v(builder, m1v)
        MonoRadar_FullAddM1g(builder, self.m1g)
        if self.m2 is not None:
            MonoRadar_FullAddM2(builder, m2)
        if self.m2v is not None:
            MonoRadar_FullAddM2v(builder, m2v)
        if self.m2xv is not None:
            MonoRadar_FullAddM2xv(builder, m2xv)
        MonoRadar_FullAddM2g(builder, self.m2g)
        if self.m3a is not None:
            MonoRadar_FullAddM3a(builder, m3a)
        if self.m3av is not None:
            MonoRadar_FullAddM3av(builder, m3av)
        MonoRadar_FullAddM3ag(builder, self.m3ag)
        if self.m3axv is not None:
            MonoRadar_FullAddM3axv(builder, m3axv)
        if self.m4 is not None:
            MonoRadar_FullAddM4(builder, m4)
        if self.m4v is not None:
            MonoRadar_FullAddM4v(builder, m4v)
        if self.m4d1d2 is not None:
            MonoRadar_FullAddM4d1d2(builder, m4d1d2)
        if self.mscommb is not None:
            MonoRadar_FullAddMscommb(builder, mscommb)
        MonoRadar_FullAddMilemrgcy(builder, self.milemrgcy)
        MonoRadar_FullAddCode7500(builder, self.code7500)
        MonoRadar_FullAddCode7600(builder, self.code7600)
        MonoRadar_FullAddCode7700(builder, self.code7700)
        MonoRadar_FullAddGrndspd(builder, self.grndspd)
        MonoRadar_FullAddHdng(builder, self.hdng)
        MonoRadar_FullAddTrknum(builder, self.trknum)
        if self.rad is not None:
            MonoRadar_FullAddRad(builder, rad)
        if self.mah is not None:
            MonoRadar_FullAddMah(builder, mah)
        if self.cdm is not None:
            MonoRadar_FullAddCdm(builder, cdm)
        if self.cartpos is not None:
            MonoRadar_FullAddCartpos(builder, cartpos)
        MonoRadar_FullAddPsrrl(builder, self.psrrl)
        MonoRadar_FullAddSsrl(builder, self.ssrl)
        MonoRadar_FullAddRngdelt(builder, self.rngdelt)
        MonoRadar_FullAddAzdelt(builder, self.azdelt)
        if self.wectc is not None:
            MonoRadar_FullAddWectc(builder, wectc)
        MonoRadar_FullAddMrgrpt(builder, self.mrgrpt)
        if self.artsqual is not None:
            MonoRadar_FullAddArtsqual(builder, artsqual)
        if self.trkelig is not None:
            MonoRadar_FullAddTrkelig(builder, trkelig)
        if self.tgtconf is not None:
            MonoRadar_FullAddTgtconf(builder, tgtconf)
        if self.tgtcorr is not None:
            MonoRadar_FullAddTgtcorr(builder, tgtcorr)
        MonoRadar_FullAddTis(builder, self.tis)
        if self.tags is not None:
            MonoRadar_FullAddTags(builder, tags)
        if self.origSensorId is not None:
            MonoRadar_FullAddOrigSensorId(builder, origSensorId)
        if self.source is not None:
            MonoRadar_FullAddSource(builder, source)
        if self.origin is not None:
            MonoRadar_FullAddOrigin(builder, origin)
        MonoRadar_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            MonoRadar_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            MonoRadar_FullAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            MonoRadar_FullAddOrigNetwork(builder, origNetwork)
        monoRadarFull = MonoRadar_FullEnd(builder)
        return monoRadarFull
