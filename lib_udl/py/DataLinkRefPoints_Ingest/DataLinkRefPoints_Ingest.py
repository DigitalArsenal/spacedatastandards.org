# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
class DataLinkRefPoints_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkRefPoints_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkRefPoints_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkRefPoints_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkRefPoints_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of data link reference point or grid origin.
    # Example: /// Example: DLRP
    # Constraints: Minimum length = 0, Maximum length = 7
    # DataLinkRefPoints_Ingest
    def RefPointType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier to designate a reference point.
    # Example: /// Example: L5
    # Constraints: Minimum length = 0, Maximum length = 20
    # DataLinkRefPoints_Ingest
    def RefDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The location name of the point of reference for this data link message.
    # Example: /// Example: FORT BRAGG
    # Constraints: Minimum length = 0, Maximum length = 20
    # DataLinkRefPoints_Ingest
    def RefLocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # DataLinkRefPoints_Ingest
    def RefLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # DataLinkRefPoints_Ingest
    def RefLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-08T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLinkRefPoints_Ingest
    def EffEventTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataLinkRefPoints_IngestStart(builder):
    builder.StartObject(6)

def Start(builder):
    DataLinkRefPoints_IngestStart(builder)

def DataLinkRefPoints_IngestAddRefPointType(builder, refPointType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(refPointType), 0)

def AddRefPointType(builder, refPointType):
    DataLinkRefPoints_IngestAddRefPointType(builder, refPointType)

def DataLinkRefPoints_IngestAddRefDes(builder, refDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(refDes), 0)

def AddRefDes(builder, refDes):
    DataLinkRefPoints_IngestAddRefDes(builder, refDes)

def DataLinkRefPoints_IngestAddRefLocName(builder, refLocName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(refLocName), 0)

def AddRefLocName(builder, refLocName):
    DataLinkRefPoints_IngestAddRefLocName(builder, refLocName)

def DataLinkRefPoints_IngestAddRefLat(builder, refLat):
    builder.PrependFloat64Slot(3, refLat, 0.0)

def AddRefLat(builder, refLat):
    DataLinkRefPoints_IngestAddRefLat(builder, refLat)

def DataLinkRefPoints_IngestAddRefLon(builder, refLon):
    builder.PrependFloat64Slot(4, refLon, 0.0)

def AddRefLon(builder, refLon):
    DataLinkRefPoints_IngestAddRefLon(builder, refLon)

def DataLinkRefPoints_IngestAddEffEventTime(builder, effEventTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(effEventTime), 0)

def AddEffEventTime(builder, effEventTime):
    DataLinkRefPoints_IngestAddEffEventTime(builder, effEventTime)

def DataLinkRefPoints_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkRefPoints_IngestEnd(builder)


class DataLinkRefPoints_IngestT(object):

    # DataLinkRefPoints_IngestT
    def __init__(self):
        self.refPointType = None  # type: str
        self.refDes = None  # type: str
        self.refLocName = None  # type: str
        self.refLat = 0.0  # type: float
        self.refLon = 0.0  # type: float
        self.effEventTime = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkRefPointsIngest = DataLinkRefPoints_Ingest()
        dataLinkRefPointsIngest.Init(buf, pos)
        return cls.InitFromObj(dataLinkRefPointsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkRefPointsIngest):
        x = DataLinkRefPoints_IngestT()
        x._UnPack(dataLinkRefPointsIngest)
        return x

    # DataLinkRefPoints_IngestT
    def _UnPack(self, dataLinkRefPointsIngest):
        if dataLinkRefPointsIngest is None:
            return
        self.refPointType = dataLinkRefPointsIngest.RefPointType()
        self.refDes = dataLinkRefPointsIngest.RefDes()
        self.refLocName = dataLinkRefPointsIngest.RefLocName()
        self.refLat = dataLinkRefPointsIngest.RefLat()
        self.refLon = dataLinkRefPointsIngest.RefLon()
        self.effEventTime = dataLinkRefPointsIngest.EffEventTime()

    # DataLinkRefPoints_IngestT
    def Pack(self, builder):
        if self.refPointType is not None:
            refPointType = builder.CreateString(self.refPointType)
        if self.refDes is not None:
            refDes = builder.CreateString(self.refDes)
        if self.refLocName is not None:
            refLocName = builder.CreateString(self.refLocName)
        if self.effEventTime is not None:
            effEventTime = builder.CreateString(self.effEventTime)
        DataLinkRefPoints_IngestStart(builder)
        if self.refPointType is not None:
            DataLinkRefPoints_IngestAddRefPointType(builder, refPointType)
        if self.refDes is not None:
            DataLinkRefPoints_IngestAddRefDes(builder, refDes)
        if self.refLocName is not None:
            DataLinkRefPoints_IngestAddRefLocName(builder, refLocName)
        DataLinkRefPoints_IngestAddRefLat(builder, self.refLat)
        DataLinkRefPoints_IngestAddRefLon(builder, self.refLon)
        if self.effEventTime is not None:
            DataLinkRefPoints_IngestAddEffEventTime(builder, effEventTime)
        dataLinkRefPointsIngest = DataLinkRefPoints_IngestEnd(builder)
        return dataLinkRefPointsIngest
