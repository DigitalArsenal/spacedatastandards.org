# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Multi dimensional array of trace generic data.
class IonoObservationTraceGeneric_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationTraceGeneric_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationTraceGeneric_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationTraceGeneric_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationTraceGeneric_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.
    # Example: /// Example: [[[1.23, 1.0903]]]
    # Constraints: No constraints specified.
    # IonoObservationTraceGeneric_Full
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationTraceGeneric_Full
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationTraceGeneric_Full
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Array of dimension names for trace generic data.
    # Example: /// Example: ['NAME1', 'NAME2']
    # Constraints: No constraints specified.
    # IonoObservationTraceGeneric_Full
    def DimensionName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationTraceGeneric_Full
    def DimensionNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationTraceGeneric_Full
    def DimensionNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Notes for the trace generic data.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservationTraceGeneric_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IonoObservationTraceGeneric_FullStart(builder):
    builder.StartObject(3)

def Start(builder):
    IonoObservationTraceGeneric_FullStart(builder)

def IonoObservationTraceGeneric_FullAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationTraceGeneric_FullAddData(builder, data)

def IonoObservationTraceGeneric_FullStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationTraceGeneric_FullStartDataVector(builder, numElems)

def IonoObservationTraceGeneric_FullAddDimensionName(builder, dimensionName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionName), 0)

def AddDimensionName(builder, dimensionName):
    IonoObservationTraceGeneric_FullAddDimensionName(builder, dimensionName)

def IonoObservationTraceGeneric_FullStartDimensionNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionNameVector(builder, numElems):
    return IonoObservationTraceGeneric_FullStartDimensionNameVector(builder, numElems)

def IonoObservationTraceGeneric_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    IonoObservationTraceGeneric_FullAddNotes(builder, notes)

def IonoObservationTraceGeneric_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationTraceGeneric_FullEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationTraceGeneric_FullT(object):

    # IonoObservationTraceGeneric_FullT
    def __init__(self):
        self.data = None  # type: List[str]
        self.dimensionName = None  # type: List[str]
        self.notes = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationTraceGenericFull = IonoObservationTraceGeneric_Full()
        ionoObservationTraceGenericFull.Init(buf, pos)
        return cls.InitFromObj(ionoObservationTraceGenericFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationTraceGenericFull):
        x = IonoObservationTraceGeneric_FullT()
        x._UnPack(ionoObservationTraceGenericFull)
        return x

    # IonoObservationTraceGeneric_FullT
    def _UnPack(self, ionoObservationTraceGenericFull):
        if ionoObservationTraceGenericFull is None:
            return
        if not ionoObservationTraceGenericFull.DataIsNone():
            self.data = []
            for i in range(ionoObservationTraceGenericFull.DataLength()):
                self.data.append(ionoObservationTraceGenericFull.Data(i))
        if not ionoObservationTraceGenericFull.DimensionNameIsNone():
            self.dimensionName = []
            for i in range(ionoObservationTraceGenericFull.DimensionNameLength()):
                self.dimensionName.append(ionoObservationTraceGenericFull.DimensionName(i))
        self.notes = ionoObservationTraceGenericFull.Notes()

    # IonoObservationTraceGeneric_FullT
    def Pack(self, builder):
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationTraceGeneric_FullStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        if self.dimensionName is not None:
            dimensionNamelist = []
            for i in range(len(self.dimensionName)):
                dimensionNamelist.append(builder.CreateString(self.dimensionName[i]))
            IonoObservationTraceGeneric_FullStartDimensionNameVector(builder, len(self.dimensionName))
            for i in reversed(range(len(self.dimensionName))):
                builder.PrependUOffsetTRelative(dimensionNamelist[i])
            dimensionName = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        IonoObservationTraceGeneric_FullStart(builder)
        if self.data is not None:
            IonoObservationTraceGeneric_FullAddData(builder, data)
        if self.dimensionName is not None:
            IonoObservationTraceGeneric_FullAddDimensionName(builder, dimensionName)
        if self.notes is not None:
            IonoObservationTraceGeneric_FullAddNotes(builder, notes)
        ionoObservationTraceGenericFull = IonoObservationTraceGeneric_FullEnd(builder)
        return ionoObservationTraceGenericFull
