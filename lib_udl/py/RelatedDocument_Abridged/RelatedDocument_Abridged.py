# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Related document ids.
class RelatedDocument_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RelatedDocument_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRelatedDocument_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RelatedDocument_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x45\x4C\x41", size_prefixed=size_prefixed)

    # RelatedDocument_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The document id of the related document.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # RelatedDocument_Abridged
    def DocumentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of data sources related to this document.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # RelatedDocument_Abridged
    def DataSourceRefs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RelatedDocument_Abridged
    def DataSourceRefsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RelatedDocument_Abridged
    def DataSourceRefsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def RelatedDocument_AbridgedStart(builder):
    builder.StartObject(2)

def Start(builder):
    RelatedDocument_AbridgedStart(builder)

def RelatedDocument_AbridgedAddDocumentId(builder, documentId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(documentId), 0)

def AddDocumentId(builder, documentId):
    RelatedDocument_AbridgedAddDocumentId(builder, documentId)

def RelatedDocument_AbridgedAddDataSourceRefs(builder, dataSourceRefs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dataSourceRefs), 0)

def AddDataSourceRefs(builder, dataSourceRefs):
    RelatedDocument_AbridgedAddDataSourceRefs(builder, dataSourceRefs)

def RelatedDocument_AbridgedStartDataSourceRefsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataSourceRefsVector(builder, numElems):
    return RelatedDocument_AbridgedStartDataSourceRefsVector(builder, numElems)

def RelatedDocument_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return RelatedDocument_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class RelatedDocument_AbridgedT(object):

    # RelatedDocument_AbridgedT
    def __init__(self):
        self.documentId = None  # type: str
        self.dataSourceRefs = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        relatedDocumentAbridged = RelatedDocument_Abridged()
        relatedDocumentAbridged.Init(buf, pos)
        return cls.InitFromObj(relatedDocumentAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, relatedDocumentAbridged):
        x = RelatedDocument_AbridgedT()
        x._UnPack(relatedDocumentAbridged)
        return x

    # RelatedDocument_AbridgedT
    def _UnPack(self, relatedDocumentAbridged):
        if relatedDocumentAbridged is None:
            return
        self.documentId = relatedDocumentAbridged.DocumentId()
        if not relatedDocumentAbridged.DataSourceRefsIsNone():
            self.dataSourceRefs = []
            for i in range(relatedDocumentAbridged.DataSourceRefsLength()):
                self.dataSourceRefs.append(relatedDocumentAbridged.DataSourceRefs(i))

    # RelatedDocument_AbridgedT
    def Pack(self, builder):
        if self.documentId is not None:
            documentId = builder.CreateString(self.documentId)
        if self.dataSourceRefs is not None:
            dataSourceRefslist = []
            for i in range(len(self.dataSourceRefs)):
                dataSourceRefslist.append(builder.CreateString(self.dataSourceRefs[i]))
            RelatedDocument_AbridgedStartDataSourceRefsVector(builder, len(self.dataSourceRefs))
            for i in reversed(range(len(self.dataSourceRefs))):
                builder.PrependUOffsetTRelative(dataSourceRefslist[i])
            dataSourceRefs = builder.EndVector()
        RelatedDocument_AbridgedStart(builder)
        if self.documentId is not None:
            RelatedDocument_AbridgedAddDocumentId(builder, documentId)
        if self.dataSourceRefs is not None:
            RelatedDocument_AbridgedAddDataSourceRefs(builder, dataSourceRefs)
        relatedDocumentAbridged = RelatedDocument_AbridgedEnd(builder)
        return relatedDocumentAbridged
