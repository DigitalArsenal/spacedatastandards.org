# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
class Sensorlimits_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sensorlimits_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorlimits_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Sensorlimits_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # Sensorlimits_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSORLIMITS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Sensorlimits_Ingest
    def IdSensorLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Sensorlimits_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensorlimits_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def UpperLeftAzimuthLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def UpperRightAzimuthLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def LowerRightAzimuthLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def LowerLeftAzimuthLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def LowerLeftElevationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def UpperLeftElevationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def LowerRightElevationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def UpperRightElevationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensorlimits_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensorlimits_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensorlimits_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensorlimits_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target sensor object.
    # Example: /// Example: SENSORLIMITS-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Sensorlimits_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Sensorlimits_IngestStart(builder):
    builder.StartObject(16)

def Start(builder):
    Sensorlimits_IngestStart(builder)

def Sensorlimits_IngestAddIdSensorLimits(builder, idSensorLimits):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idSensorLimits), 0)

def AddIdSensorLimits(builder, idSensorLimits):
    Sensorlimits_IngestAddIdSensorLimits(builder, idSensorLimits)

def Sensorlimits_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Sensorlimits_IngestAddClassificationMarking(builder, classificationMarking)

def Sensorlimits_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Sensorlimits_IngestAddOrigNetwork(builder, origNetwork)

def Sensorlimits_IngestAddUpperLeftAzimuthLimit(builder, upperLeftAzimuthLimit):
    builder.PrependFloat64Slot(3, upperLeftAzimuthLimit, 0.0)

def AddUpperLeftAzimuthLimit(builder, upperLeftAzimuthLimit):
    Sensorlimits_IngestAddUpperLeftAzimuthLimit(builder, upperLeftAzimuthLimit)

def Sensorlimits_IngestAddUpperRightAzimuthLimit(builder, upperRightAzimuthLimit):
    builder.PrependFloat64Slot(4, upperRightAzimuthLimit, 0.0)

def AddUpperRightAzimuthLimit(builder, upperRightAzimuthLimit):
    Sensorlimits_IngestAddUpperRightAzimuthLimit(builder, upperRightAzimuthLimit)

def Sensorlimits_IngestAddLowerRightAzimuthLimit(builder, lowerRightAzimuthLimit):
    builder.PrependFloat64Slot(5, lowerRightAzimuthLimit, 0.0)

def AddLowerRightAzimuthLimit(builder, lowerRightAzimuthLimit):
    Sensorlimits_IngestAddLowerRightAzimuthLimit(builder, lowerRightAzimuthLimit)

def Sensorlimits_IngestAddLowerLeftAzimuthLimit(builder, lowerLeftAzimuthLimit):
    builder.PrependFloat64Slot(6, lowerLeftAzimuthLimit, 0.0)

def AddLowerLeftAzimuthLimit(builder, lowerLeftAzimuthLimit):
    Sensorlimits_IngestAddLowerLeftAzimuthLimit(builder, lowerLeftAzimuthLimit)

def Sensorlimits_IngestAddLowerLeftElevationLimit(builder, lowerLeftElevationLimit):
    builder.PrependFloat64Slot(7, lowerLeftElevationLimit, 0.0)

def AddLowerLeftElevationLimit(builder, lowerLeftElevationLimit):
    Sensorlimits_IngestAddLowerLeftElevationLimit(builder, lowerLeftElevationLimit)

def Sensorlimits_IngestAddUpperLeftElevationLimit(builder, upperLeftElevationLimit):
    builder.PrependFloat64Slot(8, upperLeftElevationLimit, 0.0)

def AddUpperLeftElevationLimit(builder, upperLeftElevationLimit):
    Sensorlimits_IngestAddUpperLeftElevationLimit(builder, upperLeftElevationLimit)

def Sensorlimits_IngestAddLowerRightElevationLimit(builder, lowerRightElevationLimit):
    builder.PrependFloat64Slot(9, lowerRightElevationLimit, 0.0)

def AddLowerRightElevationLimit(builder, lowerRightElevationLimit):
    Sensorlimits_IngestAddLowerRightElevationLimit(builder, lowerRightElevationLimit)

def Sensorlimits_IngestAddUpperRightElevationLimit(builder, upperRightElevationLimit):
    builder.PrependFloat64Slot(10, upperRightElevationLimit, 0.0)

def AddUpperRightElevationLimit(builder, upperRightElevationLimit):
    Sensorlimits_IngestAddUpperRightElevationLimit(builder, upperRightElevationLimit)

def Sensorlimits_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Sensorlimits_IngestAddSource(builder, source)

def Sensorlimits_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(12, dataMode, 0)

def AddDataMode(builder, dataMode):
    Sensorlimits_IngestAddDataMode(builder, dataMode)

def Sensorlimits_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Sensorlimits_IngestAddCreatedAt(builder, createdAt)

def Sensorlimits_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Sensorlimits_IngestAddCreatedBy(builder, createdBy)

def Sensorlimits_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    Sensorlimits_IngestAddIdSensor(builder, idSensor)

def Sensorlimits_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Sensorlimits_IngestEnd(builder)


class Sensorlimits_IngestT(object):

    # Sensorlimits_IngestT
    def __init__(self):
        self.idSensorLimits = None  # type: str
        self.classificationMarking = None  # type: str
        self.origNetwork = None  # type: str
        self.upperLeftAzimuthLimit = 0.0  # type: float
        self.upperRightAzimuthLimit = 0.0  # type: float
        self.lowerRightAzimuthLimit = 0.0  # type: float
        self.lowerLeftAzimuthLimit = 0.0  # type: float
        self.lowerLeftElevationLimit = 0.0  # type: float
        self.upperLeftElevationLimit = 0.0  # type: float
        self.lowerRightElevationLimit = 0.0  # type: float
        self.upperRightElevationLimit = 0.0  # type: float
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.idSensor = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorlimitsIngest = Sensorlimits_Ingest()
        sensorlimitsIngest.Init(buf, pos)
        return cls.InitFromObj(sensorlimitsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorlimitsIngest):
        x = Sensorlimits_IngestT()
        x._UnPack(sensorlimitsIngest)
        return x

    # Sensorlimits_IngestT
    def _UnPack(self, sensorlimitsIngest):
        if sensorlimitsIngest is None:
            return
        self.idSensorLimits = sensorlimitsIngest.IdSensorLimits()
        self.classificationMarking = sensorlimitsIngest.ClassificationMarking()
        self.origNetwork = sensorlimitsIngest.OrigNetwork()
        self.upperLeftAzimuthLimit = sensorlimitsIngest.UpperLeftAzimuthLimit()
        self.upperRightAzimuthLimit = sensorlimitsIngest.UpperRightAzimuthLimit()
        self.lowerRightAzimuthLimit = sensorlimitsIngest.LowerRightAzimuthLimit()
        self.lowerLeftAzimuthLimit = sensorlimitsIngest.LowerLeftAzimuthLimit()
        self.lowerLeftElevationLimit = sensorlimitsIngest.LowerLeftElevationLimit()
        self.upperLeftElevationLimit = sensorlimitsIngest.UpperLeftElevationLimit()
        self.lowerRightElevationLimit = sensorlimitsIngest.LowerRightElevationLimit()
        self.upperRightElevationLimit = sensorlimitsIngest.UpperRightElevationLimit()
        self.source = sensorlimitsIngest.Source()
        self.dataMode = sensorlimitsIngest.DataMode()
        self.createdAt = sensorlimitsIngest.CreatedAt()
        self.createdBy = sensorlimitsIngest.CreatedBy()
        self.idSensor = sensorlimitsIngest.IdSensor()

    # Sensorlimits_IngestT
    def Pack(self, builder):
        if self.idSensorLimits is not None:
            idSensorLimits = builder.CreateString(self.idSensorLimits)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        Sensorlimits_IngestStart(builder)
        if self.idSensorLimits is not None:
            Sensorlimits_IngestAddIdSensorLimits(builder, idSensorLimits)
        if self.classificationMarking is not None:
            Sensorlimits_IngestAddClassificationMarking(builder, classificationMarking)
        if self.origNetwork is not None:
            Sensorlimits_IngestAddOrigNetwork(builder, origNetwork)
        Sensorlimits_IngestAddUpperLeftAzimuthLimit(builder, self.upperLeftAzimuthLimit)
        Sensorlimits_IngestAddUpperRightAzimuthLimit(builder, self.upperRightAzimuthLimit)
        Sensorlimits_IngestAddLowerRightAzimuthLimit(builder, self.lowerRightAzimuthLimit)
        Sensorlimits_IngestAddLowerLeftAzimuthLimit(builder, self.lowerLeftAzimuthLimit)
        Sensorlimits_IngestAddLowerLeftElevationLimit(builder, self.lowerLeftElevationLimit)
        Sensorlimits_IngestAddUpperLeftElevationLimit(builder, self.upperLeftElevationLimit)
        Sensorlimits_IngestAddLowerRightElevationLimit(builder, self.lowerRightElevationLimit)
        Sensorlimits_IngestAddUpperRightElevationLimit(builder, self.upperRightElevationLimit)
        if self.source is not None:
            Sensorlimits_IngestAddSource(builder, source)
        Sensorlimits_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Sensorlimits_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Sensorlimits_IngestAddCreatedBy(builder, createdBy)
        if self.idSensor is not None:
            Sensorlimits_IngestAddIdSensor(builder, idSensor)
        sensorlimitsIngest = Sensorlimits_IngestEnd(builder)
        return sensorlimitsIngest
