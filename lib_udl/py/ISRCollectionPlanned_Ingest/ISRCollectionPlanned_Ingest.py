# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Planned start and stop for the collection.
class ISRCollectionPlanned_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionPlanned_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionPlanned_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionPlanned_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionPlanned_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Start time of collection, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionPlanned_Ingest
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Stop time of collection, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionPlanned_Ingest
    def Stop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional start and stop for the collection.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionPlanned_Ingest
    def Additional(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollectionPlanned_Ingest
    def AdditionalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollectionPlanned_Ingest
    def AdditionalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ISRCollectionPlanned_IngestStart(builder):
    builder.StartObject(3)

def Start(builder):
    ISRCollectionPlanned_IngestStart(builder)

def ISRCollectionPlanned_IngestAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    ISRCollectionPlanned_IngestAddStart(builder, start)

def ISRCollectionPlanned_IngestAddStop(builder, stop):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stop), 0)

def AddStop(builder, stop):
    ISRCollectionPlanned_IngestAddStop(builder, stop)

def ISRCollectionPlanned_IngestAddAdditional(builder, additional):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(additional), 0)

def AddAdditional(builder, additional):
    ISRCollectionPlanned_IngestAddAdditional(builder, additional)

def ISRCollectionPlanned_IngestStartAdditionalVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAdditionalVector(builder, numElems):
    return ISRCollectionPlanned_IngestStartAdditionalVector(builder, numElems)

def ISRCollectionPlanned_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionPlanned_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class ISRCollectionPlanned_IngestT(object):

    # ISRCollectionPlanned_IngestT
    def __init__(self):
        self.start = None  # type: str
        self.stop = None  # type: str
        self.additional = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionPlannedIngest = ISRCollectionPlanned_Ingest()
        isrcollectionPlannedIngest.Init(buf, pos)
        return cls.InitFromObj(isrcollectionPlannedIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionPlannedIngest):
        x = ISRCollectionPlanned_IngestT()
        x._UnPack(isrcollectionPlannedIngest)
        return x

    # ISRCollectionPlanned_IngestT
    def _UnPack(self, isrcollectionPlannedIngest):
        if isrcollectionPlannedIngest is None:
            return
        self.start = isrcollectionPlannedIngest.Start()
        self.stop = isrcollectionPlannedIngest.Stop()
        if not isrcollectionPlannedIngest.AdditionalIsNone():
            self.additional = []
            for i in range(isrcollectionPlannedIngest.AdditionalLength()):
                self.additional.append(isrcollectionPlannedIngest.Additional(i))

    # ISRCollectionPlanned_IngestT
    def Pack(self, builder):
        if self.start is not None:
            start = builder.CreateString(self.start)
        if self.stop is not None:
            stop = builder.CreateString(self.stop)
        if self.additional is not None:
            additionallist = []
            for i in range(len(self.additional)):
                additionallist.append(builder.CreateString(self.additional[i]))
            ISRCollectionPlanned_IngestStartAdditionalVector(builder, len(self.additional))
            for i in reversed(range(len(self.additional))):
                builder.PrependUOffsetTRelative(additionallist[i])
            additional = builder.EndVector()
        ISRCollectionPlanned_IngestStart(builder)
        if self.start is not None:
            ISRCollectionPlanned_IngestAddStart(builder, start)
        if self.stop is not None:
            ISRCollectionPlanned_IngestAddStop(builder, stop)
        if self.additional is not None:
            ISRCollectionPlanned_IngestAddAdditional(builder, additional)
        isrcollectionPlannedIngest = ISRCollectionPlanned_IngestEnd(builder)
        return isrcollectionPlannedIngest
