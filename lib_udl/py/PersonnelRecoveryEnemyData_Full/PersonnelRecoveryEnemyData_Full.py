# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information detailing knowledge of enemies in the area.
class PersonnelRecoveryEnemyData_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PersonnelRecoveryEnemyData_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPersonnelRecoveryEnemyData_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PersonnelRecoveryEnemyData_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x45\x52\x53", size_prefixed=size_prefixed)

    # PersonnelRecoveryEnemyData_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
    # Example: /// Example: NORTHWEST
    # Constraints: Minimum length = 0, Maximum length = 32
    # PersonnelRecoveryEnemyData_Full
    def DirToEnemy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
    # Example: /// Example: SMALL ARMS
    # Constraints: Minimum length = 0, Maximum length = 32
    # PersonnelRecoveryEnemyData_Full
    def HostileFireType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comments provided by friendlies about the evac zone.
    # Example: /// Example: Comments from friendlies.
    # Constraints: Minimum length = 0, Maximum length = 128
    # PersonnelRecoveryEnemyData_Full
    def FriendliesRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hot Landing Zone remarks.
    # Example: /// Example: Hot Landing Zone remarks.
    # Constraints: Minimum length = 0, Maximum length = 128
    # PersonnelRecoveryEnemyData_Full
    def HlzRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PersonnelRecoveryEnemyData_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    PersonnelRecoveryEnemyData_FullStart(builder)

def PersonnelRecoveryEnemyData_FullAddDirToEnemy(builder, dirToEnemy):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dirToEnemy), 0)

def AddDirToEnemy(builder, dirToEnemy):
    PersonnelRecoveryEnemyData_FullAddDirToEnemy(builder, dirToEnemy)

def PersonnelRecoveryEnemyData_FullAddHostileFireType(builder, hostileFireType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hostileFireType), 0)

def AddHostileFireType(builder, hostileFireType):
    PersonnelRecoveryEnemyData_FullAddHostileFireType(builder, hostileFireType)

def PersonnelRecoveryEnemyData_FullAddFriendliesRemarks(builder, friendliesRemarks):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(friendliesRemarks), 0)

def AddFriendliesRemarks(builder, friendliesRemarks):
    PersonnelRecoveryEnemyData_FullAddFriendliesRemarks(builder, friendliesRemarks)

def PersonnelRecoveryEnemyData_FullAddHlzRemarks(builder, hlzRemarks):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(hlzRemarks), 0)

def AddHlzRemarks(builder, hlzRemarks):
    PersonnelRecoveryEnemyData_FullAddHlzRemarks(builder, hlzRemarks)

def PersonnelRecoveryEnemyData_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return PersonnelRecoveryEnemyData_FullEnd(builder)


class PersonnelRecoveryEnemyData_FullT(object):

    # PersonnelRecoveryEnemyData_FullT
    def __init__(self):
        self.dirToEnemy = None  # type: str
        self.hostileFireType = None  # type: str
        self.friendliesRemarks = None  # type: str
        self.hlzRemarks = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        personnelRecoveryEnemyDataFull = PersonnelRecoveryEnemyData_Full()
        personnelRecoveryEnemyDataFull.Init(buf, pos)
        return cls.InitFromObj(personnelRecoveryEnemyDataFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, personnelRecoveryEnemyDataFull):
        x = PersonnelRecoveryEnemyData_FullT()
        x._UnPack(personnelRecoveryEnemyDataFull)
        return x

    # PersonnelRecoveryEnemyData_FullT
    def _UnPack(self, personnelRecoveryEnemyDataFull):
        if personnelRecoveryEnemyDataFull is None:
            return
        self.dirToEnemy = personnelRecoveryEnemyDataFull.DirToEnemy()
        self.hostileFireType = personnelRecoveryEnemyDataFull.HostileFireType()
        self.friendliesRemarks = personnelRecoveryEnemyDataFull.FriendliesRemarks()
        self.hlzRemarks = personnelRecoveryEnemyDataFull.HlzRemarks()

    # PersonnelRecoveryEnemyData_FullT
    def Pack(self, builder):
        if self.dirToEnemy is not None:
            dirToEnemy = builder.CreateString(self.dirToEnemy)
        if self.hostileFireType is not None:
            hostileFireType = builder.CreateString(self.hostileFireType)
        if self.friendliesRemarks is not None:
            friendliesRemarks = builder.CreateString(self.friendliesRemarks)
        if self.hlzRemarks is not None:
            hlzRemarks = builder.CreateString(self.hlzRemarks)
        PersonnelRecoveryEnemyData_FullStart(builder)
        if self.dirToEnemy is not None:
            PersonnelRecoveryEnemyData_FullAddDirToEnemy(builder, dirToEnemy)
        if self.hostileFireType is not None:
            PersonnelRecoveryEnemyData_FullAddHostileFireType(builder, hostileFireType)
        if self.friendliesRemarks is not None:
            PersonnelRecoveryEnemyData_FullAddFriendliesRemarks(builder, friendliesRemarks)
        if self.hlzRemarks is not None:
            PersonnelRecoveryEnemyData_FullAddHlzRemarks(builder, hlzRemarks)
        personnelRecoveryEnemyDataFull = PersonnelRecoveryEnemyData_FullEnd(builder)
        return personnelRecoveryEnemyDataFull
