# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The parts associated with this support item.
class LogisticsParts_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsParts_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsParts_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsParts_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsParts_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Requested or supplied part number.
    # Example: /// Example: MS35338-42
    # Constraints: Minimum length = 0, Maximum length = 20
    # LogisticsParts_Ingest
    def PartNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The National Stock Number of the part being requested or supplied.
    # Example: /// Example: 5310-00-045-3299
    # Constraints: Minimum length = 0, Maximum length = 20
    # LogisticsParts_Ingest
    def NationalStockNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Code for a unit of measurement.
    # Example: /// Example: EA
    # Constraints: Minimum length = 0, Maximum length = 2
    # LogisticsParts_Ingest
    def MeasurementUnitCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
    # Example: /// Example: 5611UU001
    # Constraints: Minimum length = 0, Maximum length = 10
    # LogisticsParts_Ingest
    def WorkUnitCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
    # Example: /// Example: 1C-17A-4
    # Constraints: Minimum length = 0, Maximum length = 15
    # LogisticsParts_Ingest
    def TechnicalOrderText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Technical order manual figure number for the requested / supplied part.
    # Example: /// Example: 3
    # Constraints: Minimum length = 0, Maximum length = 7
    # LogisticsParts_Ingest
    def FigureNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Technical order manual index number for the requested part.
    # Example: /// Example: 4
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsParts_Ingest
    def IndexNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The person who validated the request for parts.
    # Example: /// Example: JOHN SMITH
    # Constraints: Minimum length = 0, Maximum length = 25
    # LogisticsParts_Ingest
    def RequestVerifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The person who validated that the sourced location has, and can supply, the requested parts.
    # Example: /// Example: JANE DOE
    # Constraints: Minimum length = 0, Maximum length = 25
    # LogisticsParts_Ingest
    def LocationVerifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The supply document number.
    # Example: /// Example: J223FU31908300
    # Constraints: Minimum length = 0, Maximum length = 17
    # LogisticsParts_Ingest
    def SupplyDocumentNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The supply stocks for this support item.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsParts_Ingest
    def LogisticsStocks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsParts_Ingest
    def LogisticsStocksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsParts_Ingest
    def LogisticsStocksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def LogisticsParts_IngestStart(builder):
    builder.StartObject(11)

def Start(builder):
    LogisticsParts_IngestStart(builder)

def LogisticsParts_IngestAddPartNumber(builder, partNumber):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(partNumber), 0)

def AddPartNumber(builder, partNumber):
    LogisticsParts_IngestAddPartNumber(builder, partNumber)

def LogisticsParts_IngestAddNationalStockNumber(builder, nationalStockNumber):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nationalStockNumber), 0)

def AddNationalStockNumber(builder, nationalStockNumber):
    LogisticsParts_IngestAddNationalStockNumber(builder, nationalStockNumber)

def LogisticsParts_IngestAddMeasurementUnitCode(builder, measurementUnitCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(measurementUnitCode), 0)

def AddMeasurementUnitCode(builder, measurementUnitCode):
    LogisticsParts_IngestAddMeasurementUnitCode(builder, measurementUnitCode)

def LogisticsParts_IngestAddWorkUnitCode(builder, workUnitCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(workUnitCode), 0)

def AddWorkUnitCode(builder, workUnitCode):
    LogisticsParts_IngestAddWorkUnitCode(builder, workUnitCode)

def LogisticsParts_IngestAddTechnicalOrderText(builder, technicalOrderText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(technicalOrderText), 0)

def AddTechnicalOrderText(builder, technicalOrderText):
    LogisticsParts_IngestAddTechnicalOrderText(builder, technicalOrderText)

def LogisticsParts_IngestAddFigureNumber(builder, figureNumber):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(figureNumber), 0)

def AddFigureNumber(builder, figureNumber):
    LogisticsParts_IngestAddFigureNumber(builder, figureNumber)

def LogisticsParts_IngestAddIndexNumber(builder, indexNumber):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(indexNumber), 0)

def AddIndexNumber(builder, indexNumber):
    LogisticsParts_IngestAddIndexNumber(builder, indexNumber)

def LogisticsParts_IngestAddRequestVerifier(builder, requestVerifier):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(requestVerifier), 0)

def AddRequestVerifier(builder, requestVerifier):
    LogisticsParts_IngestAddRequestVerifier(builder, requestVerifier)

def LogisticsParts_IngestAddLocationVerifier(builder, locationVerifier):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(locationVerifier), 0)

def AddLocationVerifier(builder, locationVerifier):
    LogisticsParts_IngestAddLocationVerifier(builder, locationVerifier)

def LogisticsParts_IngestAddSupplyDocumentNumber(builder, supplyDocumentNumber):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(supplyDocumentNumber), 0)

def AddSupplyDocumentNumber(builder, supplyDocumentNumber):
    LogisticsParts_IngestAddSupplyDocumentNumber(builder, supplyDocumentNumber)

def LogisticsParts_IngestAddLogisticsStocks(builder, logisticsStocks):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsStocks), 0)

def AddLogisticsStocks(builder, logisticsStocks):
    LogisticsParts_IngestAddLogisticsStocks(builder, logisticsStocks)

def LogisticsParts_IngestStartLogisticsStocksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsStocksVector(builder, numElems):
    return LogisticsParts_IngestStartLogisticsStocksVector(builder, numElems)

def LogisticsParts_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsParts_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class LogisticsParts_IngestT(object):

    # LogisticsParts_IngestT
    def __init__(self):
        self.partNumber = None  # type: str
        self.nationalStockNumber = None  # type: str
        self.measurementUnitCode = None  # type: str
        self.workUnitCode = None  # type: str
        self.technicalOrderText = None  # type: str
        self.figureNumber = None  # type: str
        self.indexNumber = None  # type: str
        self.requestVerifier = None  # type: str
        self.locationVerifier = None  # type: str
        self.supplyDocumentNumber = None  # type: str
        self.logisticsStocks = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsPartsIngest = LogisticsParts_Ingest()
        logisticsPartsIngest.Init(buf, pos)
        return cls.InitFromObj(logisticsPartsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsPartsIngest):
        x = LogisticsParts_IngestT()
        x._UnPack(logisticsPartsIngest)
        return x

    # LogisticsParts_IngestT
    def _UnPack(self, logisticsPartsIngest):
        if logisticsPartsIngest is None:
            return
        self.partNumber = logisticsPartsIngest.PartNumber()
        self.nationalStockNumber = logisticsPartsIngest.NationalStockNumber()
        self.measurementUnitCode = logisticsPartsIngest.MeasurementUnitCode()
        self.workUnitCode = logisticsPartsIngest.WorkUnitCode()
        self.technicalOrderText = logisticsPartsIngest.TechnicalOrderText()
        self.figureNumber = logisticsPartsIngest.FigureNumber()
        self.indexNumber = logisticsPartsIngest.IndexNumber()
        self.requestVerifier = logisticsPartsIngest.RequestVerifier()
        self.locationVerifier = logisticsPartsIngest.LocationVerifier()
        self.supplyDocumentNumber = logisticsPartsIngest.SupplyDocumentNumber()
        if not logisticsPartsIngest.LogisticsStocksIsNone():
            self.logisticsStocks = []
            for i in range(logisticsPartsIngest.LogisticsStocksLength()):
                self.logisticsStocks.append(logisticsPartsIngest.LogisticsStocks(i))

    # LogisticsParts_IngestT
    def Pack(self, builder):
        if self.partNumber is not None:
            partNumber = builder.CreateString(self.partNumber)
        if self.nationalStockNumber is not None:
            nationalStockNumber = builder.CreateString(self.nationalStockNumber)
        if self.measurementUnitCode is not None:
            measurementUnitCode = builder.CreateString(self.measurementUnitCode)
        if self.workUnitCode is not None:
            workUnitCode = builder.CreateString(self.workUnitCode)
        if self.technicalOrderText is not None:
            technicalOrderText = builder.CreateString(self.technicalOrderText)
        if self.figureNumber is not None:
            figureNumber = builder.CreateString(self.figureNumber)
        if self.indexNumber is not None:
            indexNumber = builder.CreateString(self.indexNumber)
        if self.requestVerifier is not None:
            requestVerifier = builder.CreateString(self.requestVerifier)
        if self.locationVerifier is not None:
            locationVerifier = builder.CreateString(self.locationVerifier)
        if self.supplyDocumentNumber is not None:
            supplyDocumentNumber = builder.CreateString(self.supplyDocumentNumber)
        if self.logisticsStocks is not None:
            logisticsStockslist = []
            for i in range(len(self.logisticsStocks)):
                logisticsStockslist.append(builder.CreateString(self.logisticsStocks[i]))
            LogisticsParts_IngestStartLogisticsStocksVector(builder, len(self.logisticsStocks))
            for i in reversed(range(len(self.logisticsStocks))):
                builder.PrependUOffsetTRelative(logisticsStockslist[i])
            logisticsStocks = builder.EndVector()
        LogisticsParts_IngestStart(builder)
        if self.partNumber is not None:
            LogisticsParts_IngestAddPartNumber(builder, partNumber)
        if self.nationalStockNumber is not None:
            LogisticsParts_IngestAddNationalStockNumber(builder, nationalStockNumber)
        if self.measurementUnitCode is not None:
            LogisticsParts_IngestAddMeasurementUnitCode(builder, measurementUnitCode)
        if self.workUnitCode is not None:
            LogisticsParts_IngestAddWorkUnitCode(builder, workUnitCode)
        if self.technicalOrderText is not None:
            LogisticsParts_IngestAddTechnicalOrderText(builder, technicalOrderText)
        if self.figureNumber is not None:
            LogisticsParts_IngestAddFigureNumber(builder, figureNumber)
        if self.indexNumber is not None:
            LogisticsParts_IngestAddIndexNumber(builder, indexNumber)
        if self.requestVerifier is not None:
            LogisticsParts_IngestAddRequestVerifier(builder, requestVerifier)
        if self.locationVerifier is not None:
            LogisticsParts_IngestAddLocationVerifier(builder, locationVerifier)
        if self.supplyDocumentNumber is not None:
            LogisticsParts_IngestAddSupplyDocumentNumber(builder, supplyDocumentNumber)
        if self.logisticsStocks is not None:
            LogisticsParts_IngestAddLogisticsStocks(builder, logisticsStocks)
        logisticsPartsIngest = LogisticsParts_IngestEnd(builder)
        return logisticsPartsIngest
