# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Data representing observed short wave infrared (SWIR) measurements.
class SWIR_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SWIR_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSWIR_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SWIR_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x57\x49\x52", size_prefixed=size_prefixed)

    # SWIR_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SWIR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SWIR_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SWIR_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object.
    # Example: /// Example: 45234
    # Constraints: Minimum length = 0, Maximum length = 36
    # SWIR_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data timestamp in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def SolarPhaseAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 70.55208
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 81.18191
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Location/name of the observing sensor.
    # Example: /// Example: AeroTel
    # Constraints: Minimum length = 0, Maximum length = 64
    # SWIR_Ingest
    def LocationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User comments concerning sensor or data limitations.
    # Example: /// Example: Example Comments
    # Constraints: Minimum length = 0, Maximum length = 64
    # SWIR_Ingest
    def BadWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.
    # Example: /// Example: [1.23, 4.56]
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def Wavelengths(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SWIR_Ingest
    def WavelengthsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SWIR_Ingest
    def WavelengthsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.
    # Example: /// Example: [1.23, 4.56]
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def AbsFluxes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SWIR_Ingest
    def AbsFluxesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SWIR_Ingest
    def AbsFluxesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.
    # Example: /// Example: [1.23, 4.56]
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def RatioWavelengths(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SWIR_Ingest
    def RatioWavelengthsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SWIR_Ingest
    def RatioWavelengthsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.
    # Example: /// Example: [1.23, 4.56]
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def FluxRatios(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SWIR_Ingest
    def FluxRatiosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SWIR_Ingest
    def FluxRatiosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # Original object ID or Catalog Number provided by source.
    # Example: /// Example: WildBlue-1
    # Constraints: Minimum length = 0, Maximum length = 36
    # SWIR_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SWIR_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SWIR_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 25544
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SWIR_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SWIR_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SWIR_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SWIR_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SWIR_IngestStart(builder):
    builder.StartObject(21)

def Start(builder):
    SWIR_IngestStart(builder)

def SWIR_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SWIR_IngestAddId(builder, id)

def SWIR_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SWIR_IngestAddClassificationMarking(builder, classificationMarking)

def SWIR_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    SWIR_IngestAddIdOnOrbit(builder, idOnOrbit)

def SWIR_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    SWIR_IngestAddTs(builder, ts)

def SWIR_IngestAddSolarPhaseAngle(builder, solarPhaseAngle):
    builder.PrependFloat64Slot(4, solarPhaseAngle, 0.0)

def AddSolarPhaseAngle(builder, solarPhaseAngle):
    SWIR_IngestAddSolarPhaseAngle(builder, solarPhaseAngle)

def SWIR_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(5, lat, 0.0)

def AddLat(builder, lat):
    SWIR_IngestAddLat(builder, lat)

def SWIR_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(6, lon, 0.0)

def AddLon(builder, lon):
    SWIR_IngestAddLon(builder, lon)

def SWIR_IngestAddLocationName(builder, locationName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(locationName), 0)

def AddLocationName(builder, locationName):
    SWIR_IngestAddLocationName(builder, locationName)

def SWIR_IngestAddBadWave(builder, badWave):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(badWave), 0)

def AddBadWave(builder, badWave):
    SWIR_IngestAddBadWave(builder, badWave)

def SWIR_IngestAddWavelengths(builder, wavelengths):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(wavelengths), 0)

def AddWavelengths(builder, wavelengths):
    SWIR_IngestAddWavelengths(builder, wavelengths)

def SWIR_IngestStartWavelengthsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWavelengthsVector(builder, numElems):
    return SWIR_IngestStartWavelengthsVector(builder, numElems)

def SWIR_IngestAddAbsFluxes(builder, absFluxes):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(absFluxes), 0)

def AddAbsFluxes(builder, absFluxes):
    SWIR_IngestAddAbsFluxes(builder, absFluxes)

def SWIR_IngestStartAbsFluxesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAbsFluxesVector(builder, numElems):
    return SWIR_IngestStartAbsFluxesVector(builder, numElems)

def SWIR_IngestAddRatioWavelengths(builder, ratioWavelengths):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ratioWavelengths), 0)

def AddRatioWavelengths(builder, ratioWavelengths):
    SWIR_IngestAddRatioWavelengths(builder, ratioWavelengths)

def SWIR_IngestStartRatioWavelengthsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRatioWavelengthsVector(builder, numElems):
    return SWIR_IngestStartRatioWavelengthsVector(builder, numElems)

def SWIR_IngestAddFluxRatios(builder, fluxRatios):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(fluxRatios), 0)

def AddFluxRatios(builder, fluxRatios):
    SWIR_IngestAddFluxRatios(builder, fluxRatios)

def SWIR_IngestStartFluxRatiosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFluxRatiosVector(builder, numElems):
    return SWIR_IngestStartFluxRatiosVector(builder, numElems)

def SWIR_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    SWIR_IngestAddOrigObjectId(builder, origObjectId)

def SWIR_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SWIR_IngestAddSource(builder, source)

def SWIR_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SWIR_IngestAddOrigin(builder, origin)

def SWIR_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(16, satNo, 0)

def AddSatNo(builder, satNo):
    SWIR_IngestAddSatNo(builder, satNo)

def SWIR_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    SWIR_IngestAddDataMode(builder, dataMode)

def SWIR_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SWIR_IngestAddCreatedAt(builder, createdAt)

def SWIR_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SWIR_IngestAddCreatedBy(builder, createdBy)

def SWIR_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SWIR_IngestAddOrigNetwork(builder, origNetwork)

def SWIR_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SWIR_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class SWIR_IngestT(object):

    # SWIR_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.ts = None  # type: str
        self.solarPhaseAngle = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.locationName = None  # type: str
        self.badWave = None  # type: str
        self.wavelengths = None  # type: List[str]
        self.absFluxes = None  # type: List[str]
        self.ratioWavelengths = None  # type: List[str]
        self.fluxRatios = None  # type: List[str]
        self.origObjectId = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.satNo = 0  # type: int
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        swirIngest = SWIR_Ingest()
        swirIngest.Init(buf, pos)
        return cls.InitFromObj(swirIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, swirIngest):
        x = SWIR_IngestT()
        x._UnPack(swirIngest)
        return x

    # SWIR_IngestT
    def _UnPack(self, swirIngest):
        if swirIngest is None:
            return
        self.id = swirIngest.Id()
        self.classificationMarking = swirIngest.ClassificationMarking()
        self.idOnOrbit = swirIngest.IdOnOrbit()
        self.ts = swirIngest.Ts()
        self.solarPhaseAngle = swirIngest.SolarPhaseAngle()
        self.lat = swirIngest.Lat()
        self.lon = swirIngest.Lon()
        self.locationName = swirIngest.LocationName()
        self.badWave = swirIngest.BadWave()
        if not swirIngest.WavelengthsIsNone():
            self.wavelengths = []
            for i in range(swirIngest.WavelengthsLength()):
                self.wavelengths.append(swirIngest.Wavelengths(i))
        if not swirIngest.AbsFluxesIsNone():
            self.absFluxes = []
            for i in range(swirIngest.AbsFluxesLength()):
                self.absFluxes.append(swirIngest.AbsFluxes(i))
        if not swirIngest.RatioWavelengthsIsNone():
            self.ratioWavelengths = []
            for i in range(swirIngest.RatioWavelengthsLength()):
                self.ratioWavelengths.append(swirIngest.RatioWavelengths(i))
        if not swirIngest.FluxRatiosIsNone():
            self.fluxRatios = []
            for i in range(swirIngest.FluxRatiosLength()):
                self.fluxRatios.append(swirIngest.FluxRatios(i))
        self.origObjectId = swirIngest.OrigObjectId()
        self.source = swirIngest.Source()
        self.origin = swirIngest.Origin()
        self.satNo = swirIngest.SatNo()
        self.dataMode = swirIngest.DataMode()
        self.createdAt = swirIngest.CreatedAt()
        self.createdBy = swirIngest.CreatedBy()
        self.origNetwork = swirIngest.OrigNetwork()

    # SWIR_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.locationName is not None:
            locationName = builder.CreateString(self.locationName)
        if self.badWave is not None:
            badWave = builder.CreateString(self.badWave)
        if self.wavelengths is not None:
            wavelengthslist = []
            for i in range(len(self.wavelengths)):
                wavelengthslist.append(builder.CreateString(self.wavelengths[i]))
            SWIR_IngestStartWavelengthsVector(builder, len(self.wavelengths))
            for i in reversed(range(len(self.wavelengths))):
                builder.PrependUOffsetTRelative(wavelengthslist[i])
            wavelengths = builder.EndVector()
        if self.absFluxes is not None:
            absFluxeslist = []
            for i in range(len(self.absFluxes)):
                absFluxeslist.append(builder.CreateString(self.absFluxes[i]))
            SWIR_IngestStartAbsFluxesVector(builder, len(self.absFluxes))
            for i in reversed(range(len(self.absFluxes))):
                builder.PrependUOffsetTRelative(absFluxeslist[i])
            absFluxes = builder.EndVector()
        if self.ratioWavelengths is not None:
            ratioWavelengthslist = []
            for i in range(len(self.ratioWavelengths)):
                ratioWavelengthslist.append(builder.CreateString(self.ratioWavelengths[i]))
            SWIR_IngestStartRatioWavelengthsVector(builder, len(self.ratioWavelengths))
            for i in reversed(range(len(self.ratioWavelengths))):
                builder.PrependUOffsetTRelative(ratioWavelengthslist[i])
            ratioWavelengths = builder.EndVector()
        if self.fluxRatios is not None:
            fluxRatioslist = []
            for i in range(len(self.fluxRatios)):
                fluxRatioslist.append(builder.CreateString(self.fluxRatios[i]))
            SWIR_IngestStartFluxRatiosVector(builder, len(self.fluxRatios))
            for i in reversed(range(len(self.fluxRatios))):
                builder.PrependUOffsetTRelative(fluxRatioslist[i])
            fluxRatios = builder.EndVector()
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SWIR_IngestStart(builder)
        if self.id is not None:
            SWIR_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            SWIR_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            SWIR_IngestAddIdOnOrbit(builder, idOnOrbit)
        if self.ts is not None:
            SWIR_IngestAddTs(builder, ts)
        SWIR_IngestAddSolarPhaseAngle(builder, self.solarPhaseAngle)
        SWIR_IngestAddLat(builder, self.lat)
        SWIR_IngestAddLon(builder, self.lon)
        if self.locationName is not None:
            SWIR_IngestAddLocationName(builder, locationName)
        if self.badWave is not None:
            SWIR_IngestAddBadWave(builder, badWave)
        if self.wavelengths is not None:
            SWIR_IngestAddWavelengths(builder, wavelengths)
        if self.absFluxes is not None:
            SWIR_IngestAddAbsFluxes(builder, absFluxes)
        if self.ratioWavelengths is not None:
            SWIR_IngestAddRatioWavelengths(builder, ratioWavelengths)
        if self.fluxRatios is not None:
            SWIR_IngestAddFluxRatios(builder, fluxRatios)
        if self.origObjectId is not None:
            SWIR_IngestAddOrigObjectId(builder, origObjectId)
        if self.source is not None:
            SWIR_IngestAddSource(builder, source)
        if self.origin is not None:
            SWIR_IngestAddOrigin(builder, origin)
        SWIR_IngestAddSatNo(builder, self.satNo)
        SWIR_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            SWIR_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SWIR_IngestAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            SWIR_IngestAddOrigNetwork(builder, origNetwork)
        swirIngest = SWIR_IngestEnd(builder)
        return swirIngest
