# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class ItemTracking_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ItemTracking_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsItemTracking_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ItemTracking_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x54\x45\x4D", size_prefixed=size_prefixed)

    # ItemTracking_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # ItemTracking_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # ItemTracking_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
    # Example: /// Example: ABC1234
    # Constraints: Minimum length = 1, Maximum length = 36
    # ItemTracking_Full
    def ScanCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    # Example: /// Example: bID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ItemTracking_Full
    def ScGenTool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the scanner or input device.
    # Example: /// Example: 2051M
    # Constraints: Minimum length = 1, Maximum length = 36
    # ItemTracking_Full
    def ScannerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-03-21T14:22:00.123Z
    # Constraints: No constraints specified.
    # ItemTracking_Full
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the item this record is associated with.
    # Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
    # Constraints: Minimum length = 0, Maximum length = 36
    # ItemTracking_Full
    def IdItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
    # Example: /// Example: CARGO
    # Constraints: Minimum length = 0, Maximum length = 32
    # ItemTracking_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude where the item was scanned, in degrees.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # ItemTracking_Full
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude where the item was scanned, in degrees.
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # ItemTracking_Full
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
    # Example: /// Example: TRANSIT
    # Constraints: Minimum length = 0, Maximum length = 64
    # ItemTracking_Full
    def ScanType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The United States distinguished visitor code of the person scanned, only applicable to people.
    # Example: /// Example: DV-4
    # Constraints: Minimum length = 0, Maximum length = 16
    # ItemTracking_Full
    def DvCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional notes or comments about the tracking data.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # ItemTracking_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of keys that may be associated with this tracked item.
    # Example: /// Example: ['tapeColor', 'hazmat']
    # Constraints: No constraints specified.
    # ItemTracking_Full
    def Keys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ItemTracking_Full
    def KeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ItemTracking_Full
    def KeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    # Example: /// Example: ['yellow', 'false']
    # Constraints: No constraints specified.
    # ItemTracking_Full
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ItemTracking_Full
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ItemTracking_Full
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2023-03-21T16:00:00.123Z
    # Constraints: No constraints specified.
    # ItemTracking_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # ItemTracking_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # ItemTracking_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # ItemTracking_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # ItemTracking_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # ItemTracking_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # ItemTracking_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ItemTracking_FullStart(builder):
    builder.StartObject(22)

def Start(builder):
    ItemTracking_FullStart(builder)

def ItemTracking_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ItemTracking_FullAddId(builder, id)

def ItemTracking_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    ItemTracking_FullAddClassificationMarking(builder, classificationMarking)

def ItemTracking_FullAddScanCode(builder, scanCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(scanCode), 0)

def AddScanCode(builder, scanCode):
    ItemTracking_FullAddScanCode(builder, scanCode)

def ItemTracking_FullAddScGenTool(builder, scGenTool):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scGenTool), 0)

def AddScGenTool(builder, scGenTool):
    ItemTracking_FullAddScGenTool(builder, scGenTool)

def ItemTracking_FullAddScannerId(builder, scannerId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scannerId), 0)

def AddScannerId(builder, scannerId):
    ItemTracking_FullAddScannerId(builder, scannerId)

def ItemTracking_FullAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    ItemTracking_FullAddTs(builder, ts)

def ItemTracking_FullAddIdItem(builder, idItem):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idItem), 0)

def AddIdItem(builder, idItem):
    ItemTracking_FullAddIdItem(builder, idItem)

def ItemTracking_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    ItemTracking_FullAddType(builder, type)

def ItemTracking_FullAddLat(builder, lat):
    builder.PrependFloat64Slot(8, lat, 0.0)

def AddLat(builder, lat):
    ItemTracking_FullAddLat(builder, lat)

def ItemTracking_FullAddLon(builder, lon):
    builder.PrependFloat64Slot(9, lon, 0.0)

def AddLon(builder, lon):
    ItemTracking_FullAddLon(builder, lon)

def ItemTracking_FullAddScanType(builder, scanType):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(scanType), 0)

def AddScanType(builder, scanType):
    ItemTracking_FullAddScanType(builder, scanType)

def ItemTracking_FullAddDvCode(builder, dvCode):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(dvCode), 0)

def AddDvCode(builder, dvCode):
    ItemTracking_FullAddDvCode(builder, dvCode)

def ItemTracking_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    ItemTracking_FullAddNotes(builder, notes)

def ItemTracking_FullAddKeys(builder, keys):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(keys), 0)

def AddKeys(builder, keys):
    ItemTracking_FullAddKeys(builder, keys)

def ItemTracking_FullStartKeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKeysVector(builder, numElems):
    return ItemTracking_FullStartKeysVector(builder, numElems)

def ItemTracking_FullAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    ItemTracking_FullAddValues(builder, values)

def ItemTracking_FullStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems):
    return ItemTracking_FullStartValuesVector(builder, numElems)

def ItemTracking_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    ItemTracking_FullAddCreatedAt(builder, createdAt)

def ItemTracking_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    ItemTracking_FullAddCreatedBy(builder, createdBy)

def ItemTracking_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    ItemTracking_FullAddSourceDl(builder, sourceDl)

def ItemTracking_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    ItemTracking_FullAddSource(builder, source)

def ItemTracking_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    ItemTracking_FullAddOrigin(builder, origin)

def ItemTracking_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    ItemTracking_FullAddOrigNetwork(builder, origNetwork)

def ItemTracking_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(21, dataMode, 0)

def AddDataMode(builder, dataMode):
    ItemTracking_FullAddDataMode(builder, dataMode)

def ItemTracking_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ItemTracking_FullEnd(builder)

try:
    from typing import List
except:
    pass

class ItemTracking_FullT(object):

    # ItemTracking_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.scanCode = None  # type: str
        self.scGenTool = None  # type: str
        self.scannerId = None  # type: str
        self.ts = None  # type: str
        self.idItem = None  # type: str
        self.type = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.scanType = None  # type: str
        self.dvCode = None  # type: str
        self.notes = None  # type: str
        self.keys = None  # type: List[str]
        self.values = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        itemTrackingFull = ItemTracking_Full()
        itemTrackingFull.Init(buf, pos)
        return cls.InitFromObj(itemTrackingFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, itemTrackingFull):
        x = ItemTracking_FullT()
        x._UnPack(itemTrackingFull)
        return x

    # ItemTracking_FullT
    def _UnPack(self, itemTrackingFull):
        if itemTrackingFull is None:
            return
        self.id = itemTrackingFull.Id()
        self.classificationMarking = itemTrackingFull.ClassificationMarking()
        self.scanCode = itemTrackingFull.ScanCode()
        self.scGenTool = itemTrackingFull.ScGenTool()
        self.scannerId = itemTrackingFull.ScannerId()
        self.ts = itemTrackingFull.Ts()
        self.idItem = itemTrackingFull.IdItem()
        self.type = itemTrackingFull.Type()
        self.lat = itemTrackingFull.Lat()
        self.lon = itemTrackingFull.Lon()
        self.scanType = itemTrackingFull.ScanType()
        self.dvCode = itemTrackingFull.DvCode()
        self.notes = itemTrackingFull.Notes()
        if not itemTrackingFull.KeysIsNone():
            self.keys = []
            for i in range(itemTrackingFull.KeysLength()):
                self.keys.append(itemTrackingFull.Keys(i))
        if not itemTrackingFull.ValuesIsNone():
            self.values = []
            for i in range(itemTrackingFull.ValuesLength()):
                self.values.append(itemTrackingFull.Values(i))
        self.createdAt = itemTrackingFull.CreatedAt()
        self.createdBy = itemTrackingFull.CreatedBy()
        self.sourceDl = itemTrackingFull.SourceDl()
        self.source = itemTrackingFull.Source()
        self.origin = itemTrackingFull.Origin()
        self.origNetwork = itemTrackingFull.OrigNetwork()
        self.dataMode = itemTrackingFull.DataMode()

    # ItemTracking_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.scanCode is not None:
            scanCode = builder.CreateString(self.scanCode)
        if self.scGenTool is not None:
            scGenTool = builder.CreateString(self.scGenTool)
        if self.scannerId is not None:
            scannerId = builder.CreateString(self.scannerId)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.idItem is not None:
            idItem = builder.CreateString(self.idItem)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.scanType is not None:
            scanType = builder.CreateString(self.scanType)
        if self.dvCode is not None:
            dvCode = builder.CreateString(self.dvCode)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.keys is not None:
            keyslist = []
            for i in range(len(self.keys)):
                keyslist.append(builder.CreateString(self.keys[i]))
            ItemTracking_FullStartKeysVector(builder, len(self.keys))
            for i in reversed(range(len(self.keys))):
                builder.PrependUOffsetTRelative(keyslist[i])
            keys = builder.EndVector()
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(builder.CreateString(self.values[i]))
            ItemTracking_FullStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        ItemTracking_FullStart(builder)
        if self.id is not None:
            ItemTracking_FullAddId(builder, id)
        if self.classificationMarking is not None:
            ItemTracking_FullAddClassificationMarking(builder, classificationMarking)
        if self.scanCode is not None:
            ItemTracking_FullAddScanCode(builder, scanCode)
        if self.scGenTool is not None:
            ItemTracking_FullAddScGenTool(builder, scGenTool)
        if self.scannerId is not None:
            ItemTracking_FullAddScannerId(builder, scannerId)
        if self.ts is not None:
            ItemTracking_FullAddTs(builder, ts)
        if self.idItem is not None:
            ItemTracking_FullAddIdItem(builder, idItem)
        if self.type is not None:
            ItemTracking_FullAddType(builder, type)
        ItemTracking_FullAddLat(builder, self.lat)
        ItemTracking_FullAddLon(builder, self.lon)
        if self.scanType is not None:
            ItemTracking_FullAddScanType(builder, scanType)
        if self.dvCode is not None:
            ItemTracking_FullAddDvCode(builder, dvCode)
        if self.notes is not None:
            ItemTracking_FullAddNotes(builder, notes)
        if self.keys is not None:
            ItemTracking_FullAddKeys(builder, keys)
        if self.values is not None:
            ItemTracking_FullAddValues(builder, values)
        if self.createdAt is not None:
            ItemTracking_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            ItemTracking_FullAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            ItemTracking_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            ItemTracking_FullAddSource(builder, source)
        if self.origin is not None:
            ItemTracking_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            ItemTracking_FullAddOrigNetwork(builder, origNetwork)
        ItemTracking_FullAddDataMode(builder, self.dataMode)
        itemTrackingFull = ItemTracking_FullEnd(builder)
        return itemTrackingFull
