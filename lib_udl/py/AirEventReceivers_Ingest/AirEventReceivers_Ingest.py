# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of receiver aircraft associated with this Air Event.
class AirEventReceivers_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirEventReceivers_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirEventReceivers_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirEventReceivers_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x45", size_prefixed=size_prefixed)

    # AirEventReceivers_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The UDL ID of the aircraft sortie this receiver is associated with for this event.
    # Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventReceivers_Ingest
    def IdReceiverSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the mission this receiver is associated with for this event.
    # Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventReceivers_Ingest
    def IdReceiverMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the airfield this receiver is associated with for this event.
    # Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventReceivers_Ingest
    def IdReceiverAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventReceivers_Ingest
    def ExternalReceiverId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Coordination record identifier of this receiver.
    # Example: /// Example: TTC601
    # Constraints: Minimum length = 0, Maximum length = 6
    # AirEventReceivers_Ingest
    def ReceiverCoord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Model Design Series designation of this receiver.
    # Example: /// Example: KC135R
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirEventReceivers_Ingest
    def ReceiverMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Air Mobility Command (AMC) mission identifier of this receiver.
    # Example: /// Example: 8PH000B1S052
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventReceivers_Ingest
    def AmcReceiverMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate mission identifier of this receiver provided by source.
    # Example: /// Example: 1UN05201L121
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirEventReceivers_Ingest
    def AltReceiverMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign assigned to this receiver.
    # Example: /// Example: BAKER
    # Constraints: Minimum length = 0, Maximum length = 24
    # AirEventReceivers_Ingest
    def ReceiverCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The wing or unit that owns this receiver.
    # Example: /// Example: 117ARW
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirEventReceivers_Ingest
    def ReceiverOwner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name and/or number of the point of contact for this receiver.
    # Example: /// Example: JOHN SMITH (555)555-5555
    # Constraints: Minimum length = 0, Maximum length = 68
    # AirEventReceivers_Ingest
    def ReceiverPoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifies the itinerary point of a mission that this receiver is linked to.
    # Example: /// Example: 825
    # Constraints: No constraints specified.
    # AirEventReceivers_Ingest
    def ReceiverLegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Location the receiver is deployed to for an air refueling event.
    # Example: /// Example: KOFF
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirEventReceivers_Ingest
    def ReceiverDeployedIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
    # Example: /// Example: DROGUE
    # Constraints: Minimum length = 0, Maximum length = 6
    # AirEventReceivers_Ingest
    def ReceiverDeliveryMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
    # Example: /// Example: 15000000.1
    # Constraints: No constraints specified.
    # AirEventReceivers_Ingest
    def FuelOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Position of this receiver within a group of receivers in an air refueling event.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # AirEventReceivers_Ingest
    def ReceiverCellPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Indicates the unique number by Unit ID, which identifies an air refueling event.
    # Example: /// Example: 1018
    # Constraints: Minimum length = 0, Maximum length = 15
    # AirEventReceivers_Ingest
    def SequenceNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
    # Example: /// Example: AMC
    # Constraints: Minimum length = 0, Maximum length = 3
    # AirEventReceivers_Ingest
    def RecOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of aircraft contained within one receiver coordination record for an air refueling event.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # AirEventReceivers_Ingest
    def NumRecAircraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Type of fuel being transferred to the receiver in an air refueling event.
    # Example: /// Example: JP8
    # Constraints: Minimum length = 0, Maximum length = 3
    # AirEventReceivers_Ingest
    def ReceiverFuelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the receiver exercise associated with an air refueling event.
    # Example: /// Example: NATO19
    # Constraints: Minimum length = 0, Maximum length = 12
    # AirEventReceivers_Ingest
    def ReceiverExercise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The package identifier for the receiver in an air refueling event.
    # Example: /// Example: 135
    # Constraints: Minimum length = 0, Maximum length = 3
    # AirEventReceivers_Ingest
    def PackageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AirEventReceivers_IngestStart(builder):
    builder.StartObject(22)

def Start(builder):
    AirEventReceivers_IngestStart(builder)

def AirEventReceivers_IngestAddIdReceiverSortie(builder, idReceiverSortie):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idReceiverSortie), 0)

def AddIdReceiverSortie(builder, idReceiverSortie):
    AirEventReceivers_IngestAddIdReceiverSortie(builder, idReceiverSortie)

def AirEventReceivers_IngestAddIdReceiverMission(builder, idReceiverMission):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idReceiverMission), 0)

def AddIdReceiverMission(builder, idReceiverMission):
    AirEventReceivers_IngestAddIdReceiverMission(builder, idReceiverMission)

def AirEventReceivers_IngestAddIdReceiverAirfield(builder, idReceiverAirfield):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idReceiverAirfield), 0)

def AddIdReceiverAirfield(builder, idReceiverAirfield):
    AirEventReceivers_IngestAddIdReceiverAirfield(builder, idReceiverAirfield)

def AirEventReceivers_IngestAddExternalReceiverId(builder, externalReceiverId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(externalReceiverId), 0)

def AddExternalReceiverId(builder, externalReceiverId):
    AirEventReceivers_IngestAddExternalReceiverId(builder, externalReceiverId)

def AirEventReceivers_IngestAddReceiverCoord(builder, receiverCoord):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(receiverCoord), 0)

def AddReceiverCoord(builder, receiverCoord):
    AirEventReceivers_IngestAddReceiverCoord(builder, receiverCoord)

def AirEventReceivers_IngestAddReceiverMds(builder, receiverMds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(receiverMds), 0)

def AddReceiverMds(builder, receiverMds):
    AirEventReceivers_IngestAddReceiverMds(builder, receiverMds)

def AirEventReceivers_IngestAddAmcReceiverMissionId(builder, amcReceiverMissionId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(amcReceiverMissionId), 0)

def AddAmcReceiverMissionId(builder, amcReceiverMissionId):
    AirEventReceivers_IngestAddAmcReceiverMissionId(builder, amcReceiverMissionId)

def AirEventReceivers_IngestAddAltReceiverMissionId(builder, altReceiverMissionId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(altReceiverMissionId), 0)

def AddAltReceiverMissionId(builder, altReceiverMissionId):
    AirEventReceivers_IngestAddAltReceiverMissionId(builder, altReceiverMissionId)

def AirEventReceivers_IngestAddReceiverCallSign(builder, receiverCallSign):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(receiverCallSign), 0)

def AddReceiverCallSign(builder, receiverCallSign):
    AirEventReceivers_IngestAddReceiverCallSign(builder, receiverCallSign)

def AirEventReceivers_IngestAddReceiverOwner(builder, receiverOwner):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(receiverOwner), 0)

def AddReceiverOwner(builder, receiverOwner):
    AirEventReceivers_IngestAddReceiverOwner(builder, receiverOwner)

def AirEventReceivers_IngestAddReceiverPoc(builder, receiverPoc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(receiverPoc), 0)

def AddReceiverPoc(builder, receiverPoc):
    AirEventReceivers_IngestAddReceiverPoc(builder, receiverPoc)

def AirEventReceivers_IngestAddReceiverLegNum(builder, receiverLegNum):
    builder.PrependInt32Slot(11, receiverLegNum, 0)

def AddReceiverLegNum(builder, receiverLegNum):
    AirEventReceivers_IngestAddReceiverLegNum(builder, receiverLegNum)

def AirEventReceivers_IngestAddReceiverDeployedIcao(builder, receiverDeployedIcao):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(receiverDeployedIcao), 0)

def AddReceiverDeployedIcao(builder, receiverDeployedIcao):
    AirEventReceivers_IngestAddReceiverDeployedIcao(builder, receiverDeployedIcao)

def AirEventReceivers_IngestAddReceiverDeliveryMethod(builder, receiverDeliveryMethod):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(receiverDeliveryMethod), 0)

def AddReceiverDeliveryMethod(builder, receiverDeliveryMethod):
    AirEventReceivers_IngestAddReceiverDeliveryMethod(builder, receiverDeliveryMethod)

def AirEventReceivers_IngestAddFuelOn(builder, fuelOn):
    builder.PrependFloat64Slot(14, fuelOn, 0.0)

def AddFuelOn(builder, fuelOn):
    AirEventReceivers_IngestAddFuelOn(builder, fuelOn)

def AirEventReceivers_IngestAddReceiverCellPosition(builder, receiverCellPosition):
    builder.PrependInt32Slot(15, receiverCellPosition, 0)

def AddReceiverCellPosition(builder, receiverCellPosition):
    AirEventReceivers_IngestAddReceiverCellPosition(builder, receiverCellPosition)

def AirEventReceivers_IngestAddSequenceNum(builder, sequenceNum):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(sequenceNum), 0)

def AddSequenceNum(builder, sequenceNum):
    AirEventReceivers_IngestAddSequenceNum(builder, sequenceNum)

def AirEventReceivers_IngestAddRecOrg(builder, recOrg):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(recOrg), 0)

def AddRecOrg(builder, recOrg):
    AirEventReceivers_IngestAddRecOrg(builder, recOrg)

def AirEventReceivers_IngestAddNumRecAircraft(builder, numRecAircraft):
    builder.PrependInt32Slot(18, numRecAircraft, 0)

def AddNumRecAircraft(builder, numRecAircraft):
    AirEventReceivers_IngestAddNumRecAircraft(builder, numRecAircraft)

def AirEventReceivers_IngestAddReceiverFuelType(builder, receiverFuelType):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(receiverFuelType), 0)

def AddReceiverFuelType(builder, receiverFuelType):
    AirEventReceivers_IngestAddReceiverFuelType(builder, receiverFuelType)

def AirEventReceivers_IngestAddReceiverExercise(builder, receiverExercise):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(receiverExercise), 0)

def AddReceiverExercise(builder, receiverExercise):
    AirEventReceivers_IngestAddReceiverExercise(builder, receiverExercise)

def AirEventReceivers_IngestAddPackageId(builder, packageId):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(packageId), 0)

def AddPackageId(builder, packageId):
    AirEventReceivers_IngestAddPackageId(builder, packageId)

def AirEventReceivers_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirEventReceivers_IngestEnd(builder)


class AirEventReceivers_IngestT(object):

    # AirEventReceivers_IngestT
    def __init__(self):
        self.idReceiverSortie = None  # type: str
        self.idReceiverMission = None  # type: str
        self.idReceiverAirfield = None  # type: str
        self.externalReceiverId = None  # type: str
        self.receiverCoord = None  # type: str
        self.receiverMds = None  # type: str
        self.amcReceiverMissionId = None  # type: str
        self.altReceiverMissionId = None  # type: str
        self.receiverCallSign = None  # type: str
        self.receiverOwner = None  # type: str
        self.receiverPoc = None  # type: str
        self.receiverLegNum = 0  # type: int
        self.receiverDeployedIcao = None  # type: str
        self.receiverDeliveryMethod = None  # type: str
        self.fuelOn = 0.0  # type: float
        self.receiverCellPosition = 0  # type: int
        self.sequenceNum = None  # type: str
        self.recOrg = None  # type: str
        self.numRecAircraft = 0  # type: int
        self.receiverFuelType = None  # type: str
        self.receiverExercise = None  # type: str
        self.packageId = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airEventReceiversIngest = AirEventReceivers_Ingest()
        airEventReceiversIngest.Init(buf, pos)
        return cls.InitFromObj(airEventReceiversIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airEventReceiversIngest):
        x = AirEventReceivers_IngestT()
        x._UnPack(airEventReceiversIngest)
        return x

    # AirEventReceivers_IngestT
    def _UnPack(self, airEventReceiversIngest):
        if airEventReceiversIngest is None:
            return
        self.idReceiverSortie = airEventReceiversIngest.IdReceiverSortie()
        self.idReceiverMission = airEventReceiversIngest.IdReceiverMission()
        self.idReceiverAirfield = airEventReceiversIngest.IdReceiverAirfield()
        self.externalReceiverId = airEventReceiversIngest.ExternalReceiverId()
        self.receiverCoord = airEventReceiversIngest.ReceiverCoord()
        self.receiverMds = airEventReceiversIngest.ReceiverMds()
        self.amcReceiverMissionId = airEventReceiversIngest.AmcReceiverMissionId()
        self.altReceiverMissionId = airEventReceiversIngest.AltReceiverMissionId()
        self.receiverCallSign = airEventReceiversIngest.ReceiverCallSign()
        self.receiverOwner = airEventReceiversIngest.ReceiverOwner()
        self.receiverPoc = airEventReceiversIngest.ReceiverPoc()
        self.receiverLegNum = airEventReceiversIngest.ReceiverLegNum()
        self.receiverDeployedIcao = airEventReceiversIngest.ReceiverDeployedIcao()
        self.receiverDeliveryMethod = airEventReceiversIngest.ReceiverDeliveryMethod()
        self.fuelOn = airEventReceiversIngest.FuelOn()
        self.receiverCellPosition = airEventReceiversIngest.ReceiverCellPosition()
        self.sequenceNum = airEventReceiversIngest.SequenceNum()
        self.recOrg = airEventReceiversIngest.RecOrg()
        self.numRecAircraft = airEventReceiversIngest.NumRecAircraft()
        self.receiverFuelType = airEventReceiversIngest.ReceiverFuelType()
        self.receiverExercise = airEventReceiversIngest.ReceiverExercise()
        self.packageId = airEventReceiversIngest.PackageId()

    # AirEventReceivers_IngestT
    def Pack(self, builder):
        if self.idReceiverSortie is not None:
            idReceiverSortie = builder.CreateString(self.idReceiverSortie)
        if self.idReceiverMission is not None:
            idReceiverMission = builder.CreateString(self.idReceiverMission)
        if self.idReceiverAirfield is not None:
            idReceiverAirfield = builder.CreateString(self.idReceiverAirfield)
        if self.externalReceiverId is not None:
            externalReceiverId = builder.CreateString(self.externalReceiverId)
        if self.receiverCoord is not None:
            receiverCoord = builder.CreateString(self.receiverCoord)
        if self.receiverMds is not None:
            receiverMds = builder.CreateString(self.receiverMds)
        if self.amcReceiverMissionId is not None:
            amcReceiverMissionId = builder.CreateString(self.amcReceiverMissionId)
        if self.altReceiverMissionId is not None:
            altReceiverMissionId = builder.CreateString(self.altReceiverMissionId)
        if self.receiverCallSign is not None:
            receiverCallSign = builder.CreateString(self.receiverCallSign)
        if self.receiverOwner is not None:
            receiverOwner = builder.CreateString(self.receiverOwner)
        if self.receiverPoc is not None:
            receiverPoc = builder.CreateString(self.receiverPoc)
        if self.receiverDeployedIcao is not None:
            receiverDeployedIcao = builder.CreateString(self.receiverDeployedIcao)
        if self.receiverDeliveryMethod is not None:
            receiverDeliveryMethod = builder.CreateString(self.receiverDeliveryMethod)
        if self.sequenceNum is not None:
            sequenceNum = builder.CreateString(self.sequenceNum)
        if self.recOrg is not None:
            recOrg = builder.CreateString(self.recOrg)
        if self.receiverFuelType is not None:
            receiverFuelType = builder.CreateString(self.receiverFuelType)
        if self.receiverExercise is not None:
            receiverExercise = builder.CreateString(self.receiverExercise)
        if self.packageId is not None:
            packageId = builder.CreateString(self.packageId)
        AirEventReceivers_IngestStart(builder)
        if self.idReceiverSortie is not None:
            AirEventReceivers_IngestAddIdReceiverSortie(builder, idReceiverSortie)
        if self.idReceiverMission is not None:
            AirEventReceivers_IngestAddIdReceiverMission(builder, idReceiverMission)
        if self.idReceiverAirfield is not None:
            AirEventReceivers_IngestAddIdReceiverAirfield(builder, idReceiverAirfield)
        if self.externalReceiverId is not None:
            AirEventReceivers_IngestAddExternalReceiverId(builder, externalReceiverId)
        if self.receiverCoord is not None:
            AirEventReceivers_IngestAddReceiverCoord(builder, receiverCoord)
        if self.receiverMds is not None:
            AirEventReceivers_IngestAddReceiverMds(builder, receiverMds)
        if self.amcReceiverMissionId is not None:
            AirEventReceivers_IngestAddAmcReceiverMissionId(builder, amcReceiverMissionId)
        if self.altReceiverMissionId is not None:
            AirEventReceivers_IngestAddAltReceiverMissionId(builder, altReceiverMissionId)
        if self.receiverCallSign is not None:
            AirEventReceivers_IngestAddReceiverCallSign(builder, receiverCallSign)
        if self.receiverOwner is not None:
            AirEventReceivers_IngestAddReceiverOwner(builder, receiverOwner)
        if self.receiverPoc is not None:
            AirEventReceivers_IngestAddReceiverPoc(builder, receiverPoc)
        AirEventReceivers_IngestAddReceiverLegNum(builder, self.receiverLegNum)
        if self.receiverDeployedIcao is not None:
            AirEventReceivers_IngestAddReceiverDeployedIcao(builder, receiverDeployedIcao)
        if self.receiverDeliveryMethod is not None:
            AirEventReceivers_IngestAddReceiverDeliveryMethod(builder, receiverDeliveryMethod)
        AirEventReceivers_IngestAddFuelOn(builder, self.fuelOn)
        AirEventReceivers_IngestAddReceiverCellPosition(builder, self.receiverCellPosition)
        if self.sequenceNum is not None:
            AirEventReceivers_IngestAddSequenceNum(builder, sequenceNum)
        if self.recOrg is not None:
            AirEventReceivers_IngestAddRecOrg(builder, recOrg)
        AirEventReceivers_IngestAddNumRecAircraft(builder, self.numRecAircraft)
        if self.receiverFuelType is not None:
            AirEventReceivers_IngestAddReceiverFuelType(builder, receiverFuelType)
        if self.receiverExercise is not None:
            AirEventReceivers_IngestAddReceiverExercise(builder, receiverExercise)
        if self.packageId is not None:
            AirEventReceivers_IngestAddPackageId(builder, packageId)
        airEventReceiversIngest = AirEventReceivers_IngestEnd(builder)
        return airEventReceiversIngest
