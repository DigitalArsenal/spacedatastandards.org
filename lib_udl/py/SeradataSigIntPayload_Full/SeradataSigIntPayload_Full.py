# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details for an sigint payload from  Seradata.
class SeradataSigIntPayload_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeradataSigIntPayload_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeradataSigIntPayload_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SeradataSigIntPayload_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x52\x41", size_prefixed=size_prefixed)

    # SeradataSigIntPayload_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SERADATASIGINTPAYLOAD-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataSigIntPayload_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SeradataSigIntPayload_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: spacecraftId
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataSigIntPayload_Full
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the Sensor record.
    # Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataSigIntPayload_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hosted for company/Organization Id.
    # Example: /// Example: hostedForCompanyOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataSigIntPayload_Full
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Manufacturer Organization Id.
    # Example: /// Example: manufacturerOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataSigIntPayload_Full
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SIGINT Payload type, e.g. Comint, Elint, etc.
    # Example: /// Example: Comint
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataSigIntPayload_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Swath Width in kilometers.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataSigIntPayload_Full
    def SwathWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ground Station info for this payload.
    # Example: /// Example: groundStations
    # Constraints: Minimum length = 0, Maximum length = 128
    # SeradataSigIntPayload_Full
    def GroundStations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground Station Locations for this payload.
    # Example: /// Example: groundStationLocations
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataSigIntPayload_Full
    def GroundStationLocations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Frequency coverage for this payload.
    # Example: /// Example: 1.1 to 3.3
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataSigIntPayload_Full
    def FrequencyCoverage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Positional Accuracy for this payload.
    # Example: /// Example: positionalAccuracy
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataSigIntPayload_Full
    def PositionalAccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Intercept parameters.
    # Example: /// Example: interceptParameters
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataSigIntPayload_Full
    def InterceptParameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor name from Seradata.
    # Example: /// Example: Sensor Name
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataSigIntPayload_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Payload notes.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SeradataSigIntPayload_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataSigIntPayload_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataSigIntPayload_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataSigIntPayload_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataSigIntPayload_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataSigIntPayload_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataSigIntPayload_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataSigIntPayload_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataSigIntPayload_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SeradataSigIntPayload_FullStart(builder):
    builder.StartObject(23)

def Start(builder):
    SeradataSigIntPayload_FullStart(builder)

def SeradataSigIntPayload_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SeradataSigIntPayload_FullAddId(builder, id)

def SeradataSigIntPayload_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SeradataSigIntPayload_FullAddClassificationMarking(builder, classificationMarking)

def SeradataSigIntPayload_FullAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    SeradataSigIntPayload_FullAddSpacecraftId(builder, spacecraftId)

def SeradataSigIntPayload_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SeradataSigIntPayload_FullAddIdSensor(builder, idSensor)

def SeradataSigIntPayload_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    SeradataSigIntPayload_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def SeradataSigIntPayload_FullAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SeradataSigIntPayload_FullAddManufacturerOrgId(builder, manufacturerOrgId)

def SeradataSigIntPayload_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    SeradataSigIntPayload_FullAddType(builder, type)

def SeradataSigIntPayload_FullAddSwathWidth(builder, swathWidth):
    builder.PrependFloat64Slot(7, swathWidth, 0.0)

def AddSwathWidth(builder, swathWidth):
    SeradataSigIntPayload_FullAddSwathWidth(builder, swathWidth)

def SeradataSigIntPayload_FullAddGroundStations(builder, groundStations):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(groundStations), 0)

def AddGroundStations(builder, groundStations):
    SeradataSigIntPayload_FullAddGroundStations(builder, groundStations)

def SeradataSigIntPayload_FullAddGroundStationLocations(builder, groundStationLocations):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(groundStationLocations), 0)

def AddGroundStationLocations(builder, groundStationLocations):
    SeradataSigIntPayload_FullAddGroundStationLocations(builder, groundStationLocations)

def SeradataSigIntPayload_FullAddFrequencyCoverage(builder, frequencyCoverage):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(frequencyCoverage), 0)

def AddFrequencyCoverage(builder, frequencyCoverage):
    SeradataSigIntPayload_FullAddFrequencyCoverage(builder, frequencyCoverage)

def SeradataSigIntPayload_FullAddPositionalAccuracy(builder, positionalAccuracy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(positionalAccuracy), 0)

def AddPositionalAccuracy(builder, positionalAccuracy):
    SeradataSigIntPayload_FullAddPositionalAccuracy(builder, positionalAccuracy)

def SeradataSigIntPayload_FullAddInterceptParameters(builder, interceptParameters):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(interceptParameters), 0)

def AddInterceptParameters(builder, interceptParameters):
    SeradataSigIntPayload_FullAddInterceptParameters(builder, interceptParameters)

def SeradataSigIntPayload_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SeradataSigIntPayload_FullAddName(builder, name)

def SeradataSigIntPayload_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    SeradataSigIntPayload_FullAddNotes(builder, notes)

def SeradataSigIntPayload_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SeradataSigIntPayload_FullAddCreatedAt(builder, createdAt)

def SeradataSigIntPayload_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SeradataSigIntPayload_FullAddCreatedBy(builder, createdBy)

def SeradataSigIntPayload_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SeradataSigIntPayload_FullAddUpdatedAt(builder, updatedAt)

def SeradataSigIntPayload_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SeradataSigIntPayload_FullAddUpdatedBy(builder, updatedBy)

def SeradataSigIntPayload_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SeradataSigIntPayload_FullAddSource(builder, source)

def SeradataSigIntPayload_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SeradataSigIntPayload_FullAddOrigin(builder, origin)

def SeradataSigIntPayload_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SeradataSigIntPayload_FullAddOrigNetwork(builder, origNetwork)

def SeradataSigIntPayload_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(22, dataMode, 0)

def AddDataMode(builder, dataMode):
    SeradataSigIntPayload_FullAddDataMode(builder, dataMode)

def SeradataSigIntPayload_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SeradataSigIntPayload_FullEnd(builder)


class SeradataSigIntPayload_FullT(object):

    # SeradataSigIntPayload_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.spacecraftId = None  # type: str
        self.idSensor = None  # type: str
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.type = None  # type: str
        self.swathWidth = 0.0  # type: float
        self.groundStations = None  # type: str
        self.groundStationLocations = None  # type: str
        self.frequencyCoverage = None  # type: str
        self.positionalAccuracy = None  # type: str
        self.interceptParameters = None  # type: str
        self.name = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seradataSigIntPayloadFull = SeradataSigIntPayload_Full()
        seradataSigIntPayloadFull.Init(buf, pos)
        return cls.InitFromObj(seradataSigIntPayloadFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seradataSigIntPayloadFull):
        x = SeradataSigIntPayload_FullT()
        x._UnPack(seradataSigIntPayloadFull)
        return x

    # SeradataSigIntPayload_FullT
    def _UnPack(self, seradataSigIntPayloadFull):
        if seradataSigIntPayloadFull is None:
            return
        self.id = seradataSigIntPayloadFull.Id()
        self.classificationMarking = seradataSigIntPayloadFull.ClassificationMarking()
        self.spacecraftId = seradataSigIntPayloadFull.SpacecraftId()
        self.idSensor = seradataSigIntPayloadFull.IdSensor()
        self.hostedForCompanyOrgId = seradataSigIntPayloadFull.HostedForCompanyOrgId()
        self.manufacturerOrgId = seradataSigIntPayloadFull.ManufacturerOrgId()
        self.type = seradataSigIntPayloadFull.Type()
        self.swathWidth = seradataSigIntPayloadFull.SwathWidth()
        self.groundStations = seradataSigIntPayloadFull.GroundStations()
        self.groundStationLocations = seradataSigIntPayloadFull.GroundStationLocations()
        self.frequencyCoverage = seradataSigIntPayloadFull.FrequencyCoverage()
        self.positionalAccuracy = seradataSigIntPayloadFull.PositionalAccuracy()
        self.interceptParameters = seradataSigIntPayloadFull.InterceptParameters()
        self.name = seradataSigIntPayloadFull.Name()
        self.notes = seradataSigIntPayloadFull.Notes()
        self.createdAt = seradataSigIntPayloadFull.CreatedAt()
        self.createdBy = seradataSigIntPayloadFull.CreatedBy()
        self.updatedAt = seradataSigIntPayloadFull.UpdatedAt()
        self.updatedBy = seradataSigIntPayloadFull.UpdatedBy()
        self.source = seradataSigIntPayloadFull.Source()
        self.origin = seradataSigIntPayloadFull.Origin()
        self.origNetwork = seradataSigIntPayloadFull.OrigNetwork()
        self.dataMode = seradataSigIntPayloadFull.DataMode()

    # SeradataSigIntPayload_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.groundStations is not None:
            groundStations = builder.CreateString(self.groundStations)
        if self.groundStationLocations is not None:
            groundStationLocations = builder.CreateString(self.groundStationLocations)
        if self.frequencyCoverage is not None:
            frequencyCoverage = builder.CreateString(self.frequencyCoverage)
        if self.positionalAccuracy is not None:
            positionalAccuracy = builder.CreateString(self.positionalAccuracy)
        if self.interceptParameters is not None:
            interceptParameters = builder.CreateString(self.interceptParameters)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SeradataSigIntPayload_FullStart(builder)
        if self.id is not None:
            SeradataSigIntPayload_FullAddId(builder, id)
        if self.classificationMarking is not None:
            SeradataSigIntPayload_FullAddClassificationMarking(builder, classificationMarking)
        if self.spacecraftId is not None:
            SeradataSigIntPayload_FullAddSpacecraftId(builder, spacecraftId)
        if self.idSensor is not None:
            SeradataSigIntPayload_FullAddIdSensor(builder, idSensor)
        if self.hostedForCompanyOrgId is not None:
            SeradataSigIntPayload_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            SeradataSigIntPayload_FullAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.type is not None:
            SeradataSigIntPayload_FullAddType(builder, type)
        SeradataSigIntPayload_FullAddSwathWidth(builder, self.swathWidth)
        if self.groundStations is not None:
            SeradataSigIntPayload_FullAddGroundStations(builder, groundStations)
        if self.groundStationLocations is not None:
            SeradataSigIntPayload_FullAddGroundStationLocations(builder, groundStationLocations)
        if self.frequencyCoverage is not None:
            SeradataSigIntPayload_FullAddFrequencyCoverage(builder, frequencyCoverage)
        if self.positionalAccuracy is not None:
            SeradataSigIntPayload_FullAddPositionalAccuracy(builder, positionalAccuracy)
        if self.interceptParameters is not None:
            SeradataSigIntPayload_FullAddInterceptParameters(builder, interceptParameters)
        if self.name is not None:
            SeradataSigIntPayload_FullAddName(builder, name)
        if self.notes is not None:
            SeradataSigIntPayload_FullAddNotes(builder, notes)
        if self.createdAt is not None:
            SeradataSigIntPayload_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SeradataSigIntPayload_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SeradataSigIntPayload_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SeradataSigIntPayload_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SeradataSigIntPayload_FullAddSource(builder, source)
        if self.origin is not None:
            SeradataSigIntPayload_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SeradataSigIntPayload_FullAddOrigNetwork(builder, origNetwork)
        SeradataSigIntPayload_FullAddDataMode(builder, self.dataMode)
        seradataSigIntPayloadFull = SeradataSigIntPayload_FullEnd(builder)
        return seradataSigIntPayloadFull
