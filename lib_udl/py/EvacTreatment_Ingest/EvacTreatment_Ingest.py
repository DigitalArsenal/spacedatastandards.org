# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Treatment information.
class EvacTreatment_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacTreatment_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacTreatment_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacTreatment_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacTreatment_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
    # Example: /// Example: BREATHING CHEST TUBE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacTreatment_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    # Example: /// Example: CHEST
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacTreatment_Ingest
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the treatment in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacTreatment_Ingest
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the patient's treatment information.
    # Example: /// Example: Comments on the treatment info.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacTreatment_Ingest
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacTreatment_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacTreatment_IngestStart(builder)

def EvacTreatment_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacTreatment_IngestAddType(builder, type)

def EvacTreatment_IngestAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacTreatment_IngestAddBodyPart(builder, bodyPart)

def EvacTreatment_IngestAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacTreatment_IngestAddTime(builder, time)

def EvacTreatment_IngestAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacTreatment_IngestAddComments(builder, comments)

def EvacTreatment_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacTreatment_IngestEnd(builder)


class EvacTreatment_IngestT(object):

    # EvacTreatment_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.bodyPart = None  # type: str
        self.time = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacTreatmentIngest = EvacTreatment_Ingest()
        evacTreatmentIngest.Init(buf, pos)
        return cls.InitFromObj(evacTreatmentIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacTreatmentIngest):
        x = EvacTreatment_IngestT()
        x._UnPack(evacTreatmentIngest)
        return x

    # EvacTreatment_IngestT
    def _UnPack(self, evacTreatmentIngest):
        if evacTreatmentIngest is None:
            return
        self.type = evacTreatmentIngest.Type()
        self.bodyPart = evacTreatmentIngest.BodyPart()
        self.time = evacTreatmentIngest.Time()
        self.comments = evacTreatmentIngest.Comments()

    # EvacTreatment_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacTreatment_IngestStart(builder)
        if self.type is not None:
            EvacTreatment_IngestAddType(builder, type)
        if self.bodyPart is not None:
            EvacTreatment_IngestAddBodyPart(builder, bodyPart)
        if self.time is not None:
            EvacTreatment_IngestAddTime(builder, time)
        if self.comments is not None:
            EvacTreatment_IngestAddComments(builder, comments)
        evacTreatmentIngest = EvacTreatment_IngestEnd(builder)
        return evacTreatmentIngest
