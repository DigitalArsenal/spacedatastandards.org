# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LogisticsTransportationPlans_Ingest

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
class LogisticsTransportationPlans_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsTransportationPlans_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsTransportationPlans_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LogisticsTransportationPlans_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    # Example: T89002
    # Constraints: Minimum length = 0, Maximum length = 10
    # LogisticsTransportationPlans_Ingest
    def PlansNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
    # Example: False
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def MissionChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Defines the transporation plan as either a deployment or redeployment.
    # Example: DEPLOY
    # Constraints: Minimum length = 0, Maximum length = 32
    # LogisticsTransportationPlans_Ingest
    def PlanDefinition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
    # Example: N
    # Constraints: Minimum length = 1, Maximum length = 1
    # LogisticsTransportationPlans_Ingest
    def StatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
    # Example: SMITH, JOHN
    # Constraints: Minimum length = 0, Maximum length = 32
    # LogisticsTransportationPlans_Ingest
    def Coordinator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
    # Example: TACC
    # Constraints: Minimum length = 0, Maximum length = 10
    # LogisticsTransportationPlans_Ingest
    def CoordinatorUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The origin location.
    # Example: KATL
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsTransportationPlans_Ingest
    def OriginIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-15T14:25:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def EstDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-15T14:25:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def EstArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Destination location ICAO.
    # Example: YBCS
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsTransportationPlans_Ingest
    def DestinationIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The identifier that represents a Logistics Master Record.
    # Example: L62126
    # Constraints: Minimum length = 0, Maximum length = 10
    # LogisticsTransportationPlans_Ingest
    def LogisticMasterRecordId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Contains the tail number displayed by GDSS2.
    # Example: 99209
    # Constraints: Minimum length = 0, Maximum length = 7
    # LogisticsTransportationPlans_Ingest
    def TpTailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    # Example: C17A
    # Constraints: Minimum length = 0, Maximum length = 8
    # LogisticsTransportationPlans_Ingest
    def TpAircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The major command for the current unit.
    # Example: HQAMC
    # Constraints: Minimum length = 0, Maximum length = 250
    # LogisticsTransportationPlans_Ingest
    def Majcom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-14T20:37:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def ApproxArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transportation plan duration, expressed in the format MMM:SS.
    # Example: 086:20
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsTransportationPlans_Ingest
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-14T19:37:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def ActDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-14T20:37:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def ClosedDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-14T20:37:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def CancelledDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
    # Example: NMCMU
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsTransportationPlans_Ingest
    def AircraftStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transportation plan enroute stops.
    # Example: 4
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def NumEnrouteStops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
    # Example: 9009209
    # Constraints: Minimum length = 0, Maximum length = 30
    # LogisticsTransportationPlans_Ingest
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of transloads for this Transportation Plan.
    # Example: 3
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def NumTransLoads(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
    # Example: 2023-07-14T20:37:00.123Z
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def LastChangedDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The transportation segments associated with this transportation plan.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def LogisticsSegments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsTransportationPlans_Ingest
    def LogisticsSegmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsTransportationPlans_Ingest
    def LogisticsSegmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Remarks associated with this transportation plan.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsTransportationPlans_Ingest
    def LogisticsTransportationPlansRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsTransportationPlans_Ingest
    def LogisticsTransportationPlansRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsTransportationPlans_Ingest
    def LogisticsTransportationPlansRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

def LogisticsTransportationPlans_IngestStart(builder):
    builder.StartObject(26)

def Start(builder):
    LogisticsTransportationPlans_IngestStart(builder)

def LogisticsTransportationPlans_IngestAddPlansNumber(builder, plansNumber):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(plansNumber), 0)

def AddPlansNumber(builder, plansNumber):
    LogisticsTransportationPlans_IngestAddPlansNumber(builder, plansNumber)

def LogisticsTransportationPlans_IngestAddMissionChange(builder, missionChange):
    builder.PrependBoolSlot(1, missionChange, 0)

def AddMissionChange(builder, missionChange):
    LogisticsTransportationPlans_IngestAddMissionChange(builder, missionChange)

def LogisticsTransportationPlans_IngestAddPlanDefinition(builder, planDefinition):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(planDefinition), 0)

def AddPlanDefinition(builder, planDefinition):
    LogisticsTransportationPlans_IngestAddPlanDefinition(builder, planDefinition)

def LogisticsTransportationPlans_IngestAddStatusCode(builder, statusCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(statusCode), 0)

def AddStatusCode(builder, statusCode):
    LogisticsTransportationPlans_IngestAddStatusCode(builder, statusCode)

def LogisticsTransportationPlans_IngestAddCoordinator(builder, coordinator):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(coordinator), 0)

def AddCoordinator(builder, coordinator):
    LogisticsTransportationPlans_IngestAddCoordinator(builder, coordinator)

def LogisticsTransportationPlans_IngestAddCoordinatorUnit(builder, coordinatorUnit):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(coordinatorUnit), 0)

def AddCoordinatorUnit(builder, coordinatorUnit):
    LogisticsTransportationPlans_IngestAddCoordinatorUnit(builder, coordinatorUnit)

def LogisticsTransportationPlans_IngestAddOriginIcao(builder, originIcao):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(originIcao), 0)

def AddOriginIcao(builder, originIcao):
    LogisticsTransportationPlans_IngestAddOriginIcao(builder, originIcao)

def LogisticsTransportationPlans_IngestAddEstDepTime(builder, estDepTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(estDepTime), 0)

def AddEstDepTime(builder, estDepTime):
    LogisticsTransportationPlans_IngestAddEstDepTime(builder, estDepTime)

def LogisticsTransportationPlans_IngestAddEstArrTime(builder, estArrTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(estArrTime), 0)

def AddEstArrTime(builder, estArrTime):
    LogisticsTransportationPlans_IngestAddEstArrTime(builder, estArrTime)

def LogisticsTransportationPlans_IngestAddDestinationIcao(builder, destinationIcao):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(destinationIcao), 0)

def AddDestinationIcao(builder, destinationIcao):
    LogisticsTransportationPlans_IngestAddDestinationIcao(builder, destinationIcao)

def LogisticsTransportationPlans_IngestAddLogisticMasterRecordId(builder, logisticMasterRecordId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(logisticMasterRecordId), 0)

def AddLogisticMasterRecordId(builder, logisticMasterRecordId):
    LogisticsTransportationPlans_IngestAddLogisticMasterRecordId(builder, logisticMasterRecordId)

def LogisticsTransportationPlans_IngestAddTpTailNumber(builder, tpTailNumber):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(tpTailNumber), 0)

def AddTpTailNumber(builder, tpTailNumber):
    LogisticsTransportationPlans_IngestAddTpTailNumber(builder, tpTailNumber)

def LogisticsTransportationPlans_IngestAddTpAircraftMds(builder, tpAircraftMds):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(tpAircraftMds), 0)

def AddTpAircraftMds(builder, tpAircraftMds):
    LogisticsTransportationPlans_IngestAddTpAircraftMds(builder, tpAircraftMds)

def LogisticsTransportationPlans_IngestAddMajcom(builder, majcom):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(majcom), 0)

def AddMajcom(builder, majcom):
    LogisticsTransportationPlans_IngestAddMajcom(builder, majcom)

def LogisticsTransportationPlans_IngestAddApproxArrTime(builder, approxArrTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(approxArrTime), 0)

def AddApproxArrTime(builder, approxArrTime):
    LogisticsTransportationPlans_IngestAddApproxArrTime(builder, approxArrTime)

def LogisticsTransportationPlans_IngestAddDuration(builder, duration):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(duration), 0)

def AddDuration(builder, duration):
    LogisticsTransportationPlans_IngestAddDuration(builder, duration)

def LogisticsTransportationPlans_IngestAddActDepTime(builder, actDepTime):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(actDepTime), 0)

def AddActDepTime(builder, actDepTime):
    LogisticsTransportationPlans_IngestAddActDepTime(builder, actDepTime)

def LogisticsTransportationPlans_IngestAddClosedDate(builder, closedDate):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(closedDate), 0)

def AddClosedDate(builder, closedDate):
    LogisticsTransportationPlans_IngestAddClosedDate(builder, closedDate)

def LogisticsTransportationPlans_IngestAddCancelledDate(builder, cancelledDate):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(cancelledDate), 0)

def AddCancelledDate(builder, cancelledDate):
    LogisticsTransportationPlans_IngestAddCancelledDate(builder, cancelledDate)

def LogisticsTransportationPlans_IngestAddAircraftStatus(builder, aircraftStatus):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftStatus), 0)

def AddAircraftStatus(builder, aircraftStatus):
    LogisticsTransportationPlans_IngestAddAircraftStatus(builder, aircraftStatus)

def LogisticsTransportationPlans_IngestAddNumEnrouteStops(builder, numEnrouteStops):
    builder.PrependInt32Slot(20, numEnrouteStops, 0)

def AddNumEnrouteStops(builder, numEnrouteStops):
    LogisticsTransportationPlans_IngestAddNumEnrouteStops(builder, numEnrouteStops)

def LogisticsTransportationPlans_IngestAddSerialNumber(builder, serialNumber):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(serialNumber), 0)

def AddSerialNumber(builder, serialNumber):
    LogisticsTransportationPlans_IngestAddSerialNumber(builder, serialNumber)

def LogisticsTransportationPlans_IngestAddNumTransLoads(builder, numTransLoads):
    builder.PrependInt32Slot(22, numTransLoads, 0)

def AddNumTransLoads(builder, numTransLoads):
    LogisticsTransportationPlans_IngestAddNumTransLoads(builder, numTransLoads)

def LogisticsTransportationPlans_IngestAddLastChangedDate(builder, lastChangedDate):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(lastChangedDate), 0)

def AddLastChangedDate(builder, lastChangedDate):
    LogisticsTransportationPlans_IngestAddLastChangedDate(builder, lastChangedDate)

def LogisticsTransportationPlans_IngestAddLogisticsSegments(builder, logisticsSegments):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsSegments), 0)

def AddLogisticsSegments(builder, logisticsSegments):
    LogisticsTransportationPlans_IngestAddLogisticsSegments(builder, logisticsSegments)

def LogisticsTransportationPlans_IngestStartLogisticsSegmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsSegmentsVector(builder, numElems):
    return LogisticsTransportationPlans_IngestStartLogisticsSegmentsVector(builder, numElems)

def LogisticsTransportationPlans_IngestAddLogisticsTransportationPlansRemarks(builder, logisticsTransportationPlansRemarks):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsTransportationPlansRemarks), 0)

def AddLogisticsTransportationPlansRemarks(builder, logisticsTransportationPlansRemarks):
    LogisticsTransportationPlans_IngestAddLogisticsTransportationPlansRemarks(builder, logisticsTransportationPlansRemarks)

def LogisticsTransportationPlans_IngestStartLogisticsTransportationPlansRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsTransportationPlansRemarksVector(builder, numElems):
    return LogisticsTransportationPlans_IngestStartLogisticsTransportationPlansRemarksVector(builder, numElems)

def LogisticsTransportationPlans_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsTransportationPlans_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class LogisticsTransportationPlans_IngestT(object):

    # LogisticsTransportationPlans_IngestT
    def __init__(self):
        self.plansNumber = None  # type: str
        self.missionChange = False  # type: bool
        self.planDefinition = None  # type: str
        self.statusCode = None  # type: str
        self.coordinator = None  # type: str
        self.coordinatorUnit = None  # type: str
        self.originICAO = None  # type: str
        self.estDepTime = None  # type: str
        self.estArrTime = None  # type: str
        self.destinationICAO = None  # type: str
        self.logisticMasterRecordId = None  # type: str
        self.tpTailNumber = None  # type: str
        self.tpAircraftMDS = None  # type: str
        self.majcom = None  # type: str
        self.approxArrTime = None  # type: str
        self.duration = None  # type: str
        self.actDepTime = None  # type: str
        self.closedDate = None  # type: str
        self.cancelledDate = None  # type: str
        self.aircraftStatus = None  # type: str
        self.numEnrouteStops = 0  # type: int
        self.serialNumber = None  # type: str
        self.numTransLoads = 0  # type: int
        self.lastChangedDate = None  # type: str
        self.logisticsSegments = None  # type: List[str]
        self.logisticsTransportationPlansRemarks = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsTransportationPlansIngest = LogisticsTransportationPlans_Ingest()
        logisticsTransportationPlansIngest.Init(buf, pos)
        return cls.InitFromObj(logisticsTransportationPlansIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsTransportationPlansIngest):
        x = LogisticsTransportationPlans_IngestT()
        x._UnPack(logisticsTransportationPlansIngest)
        return x

    # LogisticsTransportationPlans_IngestT
    def _UnPack(self, logisticsTransportationPlansIngest):
        if logisticsTransportationPlansIngest is None:
            return
        self.plansNumber = logisticsTransportationPlansIngest.PlansNumber()
        self.missionChange = logisticsTransportationPlansIngest.MissionChange()
        self.planDefinition = logisticsTransportationPlansIngest.PlanDefinition()
        self.statusCode = logisticsTransportationPlansIngest.StatusCode()
        self.coordinator = logisticsTransportationPlansIngest.Coordinator()
        self.coordinatorUnit = logisticsTransportationPlansIngest.CoordinatorUnit()
        self.originICAO = logisticsTransportationPlansIngest.OriginIcao()
        self.estDepTime = logisticsTransportationPlansIngest.EstDepTime()
        self.estArrTime = logisticsTransportationPlansIngest.EstArrTime()
        self.destinationICAO = logisticsTransportationPlansIngest.DestinationIcao()
        self.logisticMasterRecordId = logisticsTransportationPlansIngest.LogisticMasterRecordId()
        self.tpTailNumber = logisticsTransportationPlansIngest.TpTailNumber()
        self.tpAircraftMDS = logisticsTransportationPlansIngest.TpAircraftMds()
        self.majcom = logisticsTransportationPlansIngest.Majcom()
        self.approxArrTime = logisticsTransportationPlansIngest.ApproxArrTime()
        self.duration = logisticsTransportationPlansIngest.Duration()
        self.actDepTime = logisticsTransportationPlansIngest.ActDepTime()
        self.closedDate = logisticsTransportationPlansIngest.ClosedDate()
        self.cancelledDate = logisticsTransportationPlansIngest.CancelledDate()
        self.aircraftStatus = logisticsTransportationPlansIngest.AircraftStatus()
        self.numEnrouteStops = logisticsTransportationPlansIngest.NumEnrouteStops()
        self.serialNumber = logisticsTransportationPlansIngest.SerialNumber()
        self.numTransLoads = logisticsTransportationPlansIngest.NumTransLoads()
        self.lastChangedDate = logisticsTransportationPlansIngest.LastChangedDate()
        if not logisticsTransportationPlansIngest.LogisticsSegmentsIsNone():
            self.logisticsSegments = []
            for i in range(logisticsTransportationPlansIngest.LogisticsSegmentsLength()):
                self.logisticsSegments.append(logisticsTransportationPlansIngest.LogisticsSegments(i))
        if not logisticsTransportationPlansIngest.LogisticsTransportationPlansRemarksIsNone():
            self.logisticsTransportationPlansRemarks = []
            for i in range(logisticsTransportationPlansIngest.LogisticsTransportationPlansRemarksLength()):
                self.logisticsTransportationPlansRemarks.append(logisticsTransportationPlansIngest.LogisticsTransportationPlansRemarks(i))

    # LogisticsTransportationPlans_IngestT
    def Pack(self, builder):
        if self.plansNumber is not None:
            plansNumber = builder.CreateString(self.plansNumber)
        if self.planDefinition is not None:
            planDefinition = builder.CreateString(self.planDefinition)
        if self.statusCode is not None:
            statusCode = builder.CreateString(self.statusCode)
        if self.coordinator is not None:
            coordinator = builder.CreateString(self.coordinator)
        if self.coordinatorUnit is not None:
            coordinatorUnit = builder.CreateString(self.coordinatorUnit)
        if self.originICAO is not None:
            originICAO = builder.CreateString(self.originICAO)
        if self.estDepTime is not None:
            estDepTime = builder.CreateString(self.estDepTime)
        if self.estArrTime is not None:
            estArrTime = builder.CreateString(self.estArrTime)
        if self.destinationICAO is not None:
            destinationICAO = builder.CreateString(self.destinationICAO)
        if self.logisticMasterRecordId is not None:
            logisticMasterRecordId = builder.CreateString(self.logisticMasterRecordId)
        if self.tpTailNumber is not None:
            tpTailNumber = builder.CreateString(self.tpTailNumber)
        if self.tpAircraftMDS is not None:
            tpAircraftMDS = builder.CreateString(self.tpAircraftMDS)
        if self.majcom is not None:
            majcom = builder.CreateString(self.majcom)
        if self.approxArrTime is not None:
            approxArrTime = builder.CreateString(self.approxArrTime)
        if self.duration is not None:
            duration = builder.CreateString(self.duration)
        if self.actDepTime is not None:
            actDepTime = builder.CreateString(self.actDepTime)
        if self.closedDate is not None:
            closedDate = builder.CreateString(self.closedDate)
        if self.cancelledDate is not None:
            cancelledDate = builder.CreateString(self.cancelledDate)
        if self.aircraftStatus is not None:
            aircraftStatus = builder.CreateString(self.aircraftStatus)
        if self.serialNumber is not None:
            serialNumber = builder.CreateString(self.serialNumber)
        if self.lastChangedDate is not None:
            lastChangedDate = builder.CreateString(self.lastChangedDate)
        if self.logisticsSegments is not None:
            logisticsSegmentslist = []
            for i in range(len(self.logisticsSegments)):
                logisticsSegmentslist.append(builder.CreateString(self.logisticsSegments[i]))
            LogisticsTransportationPlans_IngestStartLogisticsSegmentsVector(builder, len(self.logisticsSegments))
            for i in reversed(range(len(self.logisticsSegments))):
                builder.PrependUOffsetTRelative(logisticsSegmentslist[i])
            logisticsSegments = builder.EndVector()
        if self.logisticsTransportationPlansRemarks is not None:
            logisticsTransportationPlansRemarkslist = []
            for i in range(len(self.logisticsTransportationPlansRemarks)):
                logisticsTransportationPlansRemarkslist.append(builder.CreateString(self.logisticsTransportationPlansRemarks[i]))
            LogisticsTransportationPlans_IngestStartLogisticsTransportationPlansRemarksVector(builder, len(self.logisticsTransportationPlansRemarks))
            for i in reversed(range(len(self.logisticsTransportationPlansRemarks))):
                builder.PrependUOffsetTRelative(logisticsTransportationPlansRemarkslist[i])
            logisticsTransportationPlansRemarks = builder.EndVector()
        LogisticsTransportationPlans_IngestStart(builder)
        if self.plansNumber is not None:
            LogisticsTransportationPlans_IngestAddPlansNumber(builder, plansNumber)
        LogisticsTransportationPlans_IngestAddMissionChange(builder, self.missionChange)
        if self.planDefinition is not None:
            LogisticsTransportationPlans_IngestAddPlanDefinition(builder, planDefinition)
        if self.statusCode is not None:
            LogisticsTransportationPlans_IngestAddStatusCode(builder, statusCode)
        if self.coordinator is not None:
            LogisticsTransportationPlans_IngestAddCoordinator(builder, coordinator)
        if self.coordinatorUnit is not None:
            LogisticsTransportationPlans_IngestAddCoordinatorUnit(builder, coordinatorUnit)
        if self.originICAO is not None:
            LogisticsTransportationPlans_IngestAddOriginIcao(builder, originICAO)
        if self.estDepTime is not None:
            LogisticsTransportationPlans_IngestAddEstDepTime(builder, estDepTime)
        if self.estArrTime is not None:
            LogisticsTransportationPlans_IngestAddEstArrTime(builder, estArrTime)
        if self.destinationICAO is not None:
            LogisticsTransportationPlans_IngestAddDestinationIcao(builder, destinationICAO)
        if self.logisticMasterRecordId is not None:
            LogisticsTransportationPlans_IngestAddLogisticMasterRecordId(builder, logisticMasterRecordId)
        if self.tpTailNumber is not None:
            LogisticsTransportationPlans_IngestAddTpTailNumber(builder, tpTailNumber)
        if self.tpAircraftMDS is not None:
            LogisticsTransportationPlans_IngestAddTpAircraftMds(builder, tpAircraftMDS)
        if self.majcom is not None:
            LogisticsTransportationPlans_IngestAddMajcom(builder, majcom)
        if self.approxArrTime is not None:
            LogisticsTransportationPlans_IngestAddApproxArrTime(builder, approxArrTime)
        if self.duration is not None:
            LogisticsTransportationPlans_IngestAddDuration(builder, duration)
        if self.actDepTime is not None:
            LogisticsTransportationPlans_IngestAddActDepTime(builder, actDepTime)
        if self.closedDate is not None:
            LogisticsTransportationPlans_IngestAddClosedDate(builder, closedDate)
        if self.cancelledDate is not None:
            LogisticsTransportationPlans_IngestAddCancelledDate(builder, cancelledDate)
        if self.aircraftStatus is not None:
            LogisticsTransportationPlans_IngestAddAircraftStatus(builder, aircraftStatus)
        LogisticsTransportationPlans_IngestAddNumEnrouteStops(builder, self.numEnrouteStops)
        if self.serialNumber is not None:
            LogisticsTransportationPlans_IngestAddSerialNumber(builder, serialNumber)
        LogisticsTransportationPlans_IngestAddNumTransLoads(builder, self.numTransLoads)
        if self.lastChangedDate is not None:
            LogisticsTransportationPlans_IngestAddLastChangedDate(builder, lastChangedDate)
        if self.logisticsSegments is not None:
            LogisticsTransportationPlans_IngestAddLogisticsSegments(builder, logisticsSegments)
        if self.logisticsTransportationPlansRemarks is not None:
            LogisticsTransportationPlans_IngestAddLogisticsTransportationPlansRemarks(builder, logisticsTransportationPlansRemarks)
        logisticsTransportationPlansIngest = LogisticsTransportationPlans_IngestEnd(builder)
        return logisticsTransportationPlansIngest
