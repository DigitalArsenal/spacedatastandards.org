# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Support items associated with this LogisticsSupport record.
class LogisticsSupportItems_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsSupportItems_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsSupportItems_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsSupportItems_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsSupportItems_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The type of recovery request needed. Contact the source provider for details.
    # Example: /// Example: E
    # Constraints: Minimum length = 1, Maximum length = 1
    # LogisticsSupportItems_Ingest
    def RecoveryRequestTypeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The request or record number for this item type (Equipent, Part, or MRT).
    # Example: /// Example: 89208
    # Constraints: Minimum length = 0, Maximum length = 5
    # LogisticsSupportItems_Ingest
    def RequestNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The technical order name of the part ordered.
    # Example: /// Example: HOIST ADAPTER KIT
    # Constraints: Minimum length = 0, Maximum length = 150
    # LogisticsSupportItems_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
    # Example: /// Example: FB44273196X501XXX
    # Constraints: Minimum length = 0, Maximum length = 17
    # LogisticsSupportItems_Ingest
    def ShipmentUnitId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
    # Example: /// Example: X400LA31949108
    # Constraints: Minimum length = 0, Maximum length = 17
    # LogisticsSupportItems_Ingest
    def RedeployShipmentUnitId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
    # Example: /// Example: 231942400
    # Constraints: Minimum length = 0, Maximum length = 12
    # LogisticsSupportItems_Ingest
    def JobControlNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
    # Example: /// Example: PHIK
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSupportItems_Ingest
    def SourceIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    # Example: /// Example: T89003
    # Constraints: Minimum length = 0, Maximum length = 10
    # LogisticsSupportItems_Ingest
    def DeployPlanNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
    # Example: /// Example: T89003
    # Constraints: Minimum length = 0, Maximum length = 10
    # LogisticsSupportItems_Ingest
    def RedeployPlanNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This element indicates whether or not the supplied item is contained within another item.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def Cannibalized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
    # Example: /// Example: SMITH, JOHN J
    # Constraints: Minimum length = 0, Maximum length = 68
    # LogisticsSupportItems_Ingest
    def SiPoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time the item is ready, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:04:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def ReadyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time the item is received, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:04:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def ReceivedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This element indicates if the supplied item is characterized as additional support.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def ResupportFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T19:04:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def ItemLastChangedDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The parts associated with this support item.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def LogisticsParts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupportItems_Ingest
    def LogisticsPartsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupportItems_Ingest
    def LogisticsPartsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # The specialties required to implement this support item.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def LogisticsSpecialties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupportItems_Ingest
    def LogisticsSpecialtiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupportItems_Ingest
    def LogisticsSpecialtiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Remarks associated with this support item.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupportItems_Ingest
    def LogisticsRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupportItems_Ingest
    def LogisticsRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupportItems_Ingest
    def LogisticsRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

def LogisticsSupportItems_IngestStart(builder):
    builder.StartObject(19)

def Start(builder):
    LogisticsSupportItems_IngestStart(builder)

def LogisticsSupportItems_IngestAddRecoveryRequestTypeCode(builder, recoveryRequestTypeCode):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(recoveryRequestTypeCode), 0)

def AddRecoveryRequestTypeCode(builder, recoveryRequestTypeCode):
    LogisticsSupportItems_IngestAddRecoveryRequestTypeCode(builder, recoveryRequestTypeCode)

def LogisticsSupportItems_IngestAddRequestNumber(builder, requestNumber):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(requestNumber), 0)

def AddRequestNumber(builder, requestNumber):
    LogisticsSupportItems_IngestAddRequestNumber(builder, requestNumber)

def LogisticsSupportItems_IngestAddQuantity(builder, quantity):
    builder.PrependInt32Slot(2, quantity, 0)

def AddQuantity(builder, quantity):
    LogisticsSupportItems_IngestAddQuantity(builder, quantity)

def LogisticsSupportItems_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    LogisticsSupportItems_IngestAddDescription(builder, description)

def LogisticsSupportItems_IngestAddShipmentUnitId(builder, shipmentUnitId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(shipmentUnitId), 0)

def AddShipmentUnitId(builder, shipmentUnitId):
    LogisticsSupportItems_IngestAddShipmentUnitId(builder, shipmentUnitId)

def LogisticsSupportItems_IngestAddRedeployShipmentUnitId(builder, redeployShipmentUnitId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(redeployShipmentUnitId), 0)

def AddRedeployShipmentUnitId(builder, redeployShipmentUnitId):
    LogisticsSupportItems_IngestAddRedeployShipmentUnitId(builder, redeployShipmentUnitId)

def LogisticsSupportItems_IngestAddJobControlNumber(builder, jobControlNumber):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(jobControlNumber), 0)

def AddJobControlNumber(builder, jobControlNumber):
    LogisticsSupportItems_IngestAddJobControlNumber(builder, jobControlNumber)

def LogisticsSupportItems_IngestAddSourceIcao(builder, sourceIcao):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(sourceIcao), 0)

def AddSourceIcao(builder, sourceIcao):
    LogisticsSupportItems_IngestAddSourceIcao(builder, sourceIcao)

def LogisticsSupportItems_IngestAddDeployPlanNumber(builder, deployPlanNumber):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(deployPlanNumber), 0)

def AddDeployPlanNumber(builder, deployPlanNumber):
    LogisticsSupportItems_IngestAddDeployPlanNumber(builder, deployPlanNumber)

def LogisticsSupportItems_IngestAddRedeployPlanNumber(builder, redeployPlanNumber):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(redeployPlanNumber), 0)

def AddRedeployPlanNumber(builder, redeployPlanNumber):
    LogisticsSupportItems_IngestAddRedeployPlanNumber(builder, redeployPlanNumber)

def LogisticsSupportItems_IngestAddCannibalized(builder, cannibalized):
    builder.PrependBoolSlot(10, cannibalized, 0)

def AddCannibalized(builder, cannibalized):
    LogisticsSupportItems_IngestAddCannibalized(builder, cannibalized)

def LogisticsSupportItems_IngestAddSiPoc(builder, siPoc):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(siPoc), 0)

def AddSiPoc(builder, siPoc):
    LogisticsSupportItems_IngestAddSiPoc(builder, siPoc)

def LogisticsSupportItems_IngestAddReadyTime(builder, readyTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(readyTime), 0)

def AddReadyTime(builder, readyTime):
    LogisticsSupportItems_IngestAddReadyTime(builder, readyTime)

def LogisticsSupportItems_IngestAddReceivedTime(builder, receivedTime):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(receivedTime), 0)

def AddReceivedTime(builder, receivedTime):
    LogisticsSupportItems_IngestAddReceivedTime(builder, receivedTime)

def LogisticsSupportItems_IngestAddResupportFlag(builder, resupportFlag):
    builder.PrependBoolSlot(14, resupportFlag, 0)

def AddResupportFlag(builder, resupportFlag):
    LogisticsSupportItems_IngestAddResupportFlag(builder, resupportFlag)

def LogisticsSupportItems_IngestAddItemLastChangedDate(builder, itemLastChangedDate):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(itemLastChangedDate), 0)

def AddItemLastChangedDate(builder, itemLastChangedDate):
    LogisticsSupportItems_IngestAddItemLastChangedDate(builder, itemLastChangedDate)

def LogisticsSupportItems_IngestAddLogisticsParts(builder, logisticsParts):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsParts), 0)

def AddLogisticsParts(builder, logisticsParts):
    LogisticsSupportItems_IngestAddLogisticsParts(builder, logisticsParts)

def LogisticsSupportItems_IngestStartLogisticsPartsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsPartsVector(builder, numElems):
    return LogisticsSupportItems_IngestStartLogisticsPartsVector(builder, numElems)

def LogisticsSupportItems_IngestAddLogisticsSpecialties(builder, logisticsSpecialties):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsSpecialties), 0)

def AddLogisticsSpecialties(builder, logisticsSpecialties):
    LogisticsSupportItems_IngestAddLogisticsSpecialties(builder, logisticsSpecialties)

def LogisticsSupportItems_IngestStartLogisticsSpecialtiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsSpecialtiesVector(builder, numElems):
    return LogisticsSupportItems_IngestStartLogisticsSpecialtiesVector(builder, numElems)

def LogisticsSupportItems_IngestAddLogisticsRemarks(builder, logisticsRemarks):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsRemarks), 0)

def AddLogisticsRemarks(builder, logisticsRemarks):
    LogisticsSupportItems_IngestAddLogisticsRemarks(builder, logisticsRemarks)

def LogisticsSupportItems_IngestStartLogisticsRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsRemarksVector(builder, numElems):
    return LogisticsSupportItems_IngestStartLogisticsRemarksVector(builder, numElems)

def LogisticsSupportItems_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsSupportItems_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class LogisticsSupportItems_IngestT(object):

    # LogisticsSupportItems_IngestT
    def __init__(self):
        self.recoveryRequestTypeCode = None  # type: str
        self.requestNumber = None  # type: str
        self.quantity = 0  # type: int
        self.description = None  # type: str
        self.shipmentUnitId = None  # type: str
        self.redeployShipmentUnitId = None  # type: str
        self.jobControlNumber = None  # type: str
        self.sourceIcao = None  # type: str
        self.deployPlanNumber = None  # type: str
        self.redeployPlanNumber = None  # type: str
        self.cannibalized = False  # type: bool
        self.siPoc = None  # type: str
        self.readyTime = None  # type: str
        self.receivedTime = None  # type: str
        self.resupportFlag = False  # type: bool
        self.itemLastChangedDate = None  # type: str
        self.logisticsParts = None  # type: List[str]
        self.logisticsSpecialties = None  # type: List[str]
        self.logisticsRemarks = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsSupportItemsIngest = LogisticsSupportItems_Ingest()
        logisticsSupportItemsIngest.Init(buf, pos)
        return cls.InitFromObj(logisticsSupportItemsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsSupportItemsIngest):
        x = LogisticsSupportItems_IngestT()
        x._UnPack(logisticsSupportItemsIngest)
        return x

    # LogisticsSupportItems_IngestT
    def _UnPack(self, logisticsSupportItemsIngest):
        if logisticsSupportItemsIngest is None:
            return
        self.recoveryRequestTypeCode = logisticsSupportItemsIngest.RecoveryRequestTypeCode()
        self.requestNumber = logisticsSupportItemsIngest.RequestNumber()
        self.quantity = logisticsSupportItemsIngest.Quantity()
        self.description = logisticsSupportItemsIngest.Description()
        self.shipmentUnitId = logisticsSupportItemsIngest.ShipmentUnitId()
        self.redeployShipmentUnitId = logisticsSupportItemsIngest.RedeployShipmentUnitId()
        self.jobControlNumber = logisticsSupportItemsIngest.JobControlNumber()
        self.sourceIcao = logisticsSupportItemsIngest.SourceIcao()
        self.deployPlanNumber = logisticsSupportItemsIngest.DeployPlanNumber()
        self.redeployPlanNumber = logisticsSupportItemsIngest.RedeployPlanNumber()
        self.cannibalized = logisticsSupportItemsIngest.Cannibalized()
        self.siPoc = logisticsSupportItemsIngest.SiPoc()
        self.readyTime = logisticsSupportItemsIngest.ReadyTime()
        self.receivedTime = logisticsSupportItemsIngest.ReceivedTime()
        self.resupportFlag = logisticsSupportItemsIngest.ResupportFlag()
        self.itemLastChangedDate = logisticsSupportItemsIngest.ItemLastChangedDate()
        if not logisticsSupportItemsIngest.LogisticsPartsIsNone():
            self.logisticsParts = []
            for i in range(logisticsSupportItemsIngest.LogisticsPartsLength()):
                self.logisticsParts.append(logisticsSupportItemsIngest.LogisticsParts(i))
        if not logisticsSupportItemsIngest.LogisticsSpecialtiesIsNone():
            self.logisticsSpecialties = []
            for i in range(logisticsSupportItemsIngest.LogisticsSpecialtiesLength()):
                self.logisticsSpecialties.append(logisticsSupportItemsIngest.LogisticsSpecialties(i))
        if not logisticsSupportItemsIngest.LogisticsRemarksIsNone():
            self.logisticsRemarks = []
            for i in range(logisticsSupportItemsIngest.LogisticsRemarksLength()):
                self.logisticsRemarks.append(logisticsSupportItemsIngest.LogisticsRemarks(i))

    # LogisticsSupportItems_IngestT
    def Pack(self, builder):
        if self.recoveryRequestTypeCode is not None:
            recoveryRequestTypeCode = builder.CreateString(self.recoveryRequestTypeCode)
        if self.requestNumber is not None:
            requestNumber = builder.CreateString(self.requestNumber)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.shipmentUnitId is not None:
            shipmentUnitId = builder.CreateString(self.shipmentUnitId)
        if self.redeployShipmentUnitId is not None:
            redeployShipmentUnitId = builder.CreateString(self.redeployShipmentUnitId)
        if self.jobControlNumber is not None:
            jobControlNumber = builder.CreateString(self.jobControlNumber)
        if self.sourceIcao is not None:
            sourceIcao = builder.CreateString(self.sourceIcao)
        if self.deployPlanNumber is not None:
            deployPlanNumber = builder.CreateString(self.deployPlanNumber)
        if self.redeployPlanNumber is not None:
            redeployPlanNumber = builder.CreateString(self.redeployPlanNumber)
        if self.siPoc is not None:
            siPoc = builder.CreateString(self.siPoc)
        if self.readyTime is not None:
            readyTime = builder.CreateString(self.readyTime)
        if self.receivedTime is not None:
            receivedTime = builder.CreateString(self.receivedTime)
        if self.itemLastChangedDate is not None:
            itemLastChangedDate = builder.CreateString(self.itemLastChangedDate)
        if self.logisticsParts is not None:
            logisticsPartslist = []
            for i in range(len(self.logisticsParts)):
                logisticsPartslist.append(builder.CreateString(self.logisticsParts[i]))
            LogisticsSupportItems_IngestStartLogisticsPartsVector(builder, len(self.logisticsParts))
            for i in reversed(range(len(self.logisticsParts))):
                builder.PrependUOffsetTRelative(logisticsPartslist[i])
            logisticsParts = builder.EndVector()
        if self.logisticsSpecialties is not None:
            logisticsSpecialtieslist = []
            for i in range(len(self.logisticsSpecialties)):
                logisticsSpecialtieslist.append(builder.CreateString(self.logisticsSpecialties[i]))
            LogisticsSupportItems_IngestStartLogisticsSpecialtiesVector(builder, len(self.logisticsSpecialties))
            for i in reversed(range(len(self.logisticsSpecialties))):
                builder.PrependUOffsetTRelative(logisticsSpecialtieslist[i])
            logisticsSpecialties = builder.EndVector()
        if self.logisticsRemarks is not None:
            logisticsRemarkslist = []
            for i in range(len(self.logisticsRemarks)):
                logisticsRemarkslist.append(builder.CreateString(self.logisticsRemarks[i]))
            LogisticsSupportItems_IngestStartLogisticsRemarksVector(builder, len(self.logisticsRemarks))
            for i in reversed(range(len(self.logisticsRemarks))):
                builder.PrependUOffsetTRelative(logisticsRemarkslist[i])
            logisticsRemarks = builder.EndVector()
        LogisticsSupportItems_IngestStart(builder)
        if self.recoveryRequestTypeCode is not None:
            LogisticsSupportItems_IngestAddRecoveryRequestTypeCode(builder, recoveryRequestTypeCode)
        if self.requestNumber is not None:
            LogisticsSupportItems_IngestAddRequestNumber(builder, requestNumber)
        LogisticsSupportItems_IngestAddQuantity(builder, self.quantity)
        if self.description is not None:
            LogisticsSupportItems_IngestAddDescription(builder, description)
        if self.shipmentUnitId is not None:
            LogisticsSupportItems_IngestAddShipmentUnitId(builder, shipmentUnitId)
        if self.redeployShipmentUnitId is not None:
            LogisticsSupportItems_IngestAddRedeployShipmentUnitId(builder, redeployShipmentUnitId)
        if self.jobControlNumber is not None:
            LogisticsSupportItems_IngestAddJobControlNumber(builder, jobControlNumber)
        if self.sourceIcao is not None:
            LogisticsSupportItems_IngestAddSourceIcao(builder, sourceIcao)
        if self.deployPlanNumber is not None:
            LogisticsSupportItems_IngestAddDeployPlanNumber(builder, deployPlanNumber)
        if self.redeployPlanNumber is not None:
            LogisticsSupportItems_IngestAddRedeployPlanNumber(builder, redeployPlanNumber)
        LogisticsSupportItems_IngestAddCannibalized(builder, self.cannibalized)
        if self.siPoc is not None:
            LogisticsSupportItems_IngestAddSiPoc(builder, siPoc)
        if self.readyTime is not None:
            LogisticsSupportItems_IngestAddReadyTime(builder, readyTime)
        if self.receivedTime is not None:
            LogisticsSupportItems_IngestAddReceivedTime(builder, receivedTime)
        LogisticsSupportItems_IngestAddResupportFlag(builder, self.resupportFlag)
        if self.itemLastChangedDate is not None:
            LogisticsSupportItems_IngestAddItemLastChangedDate(builder, itemLastChangedDate)
        if self.logisticsParts is not None:
            LogisticsSupportItems_IngestAddLogisticsParts(builder, logisticsParts)
        if self.logisticsSpecialties is not None:
            LogisticsSupportItems_IngestAddLogisticsSpecialties(builder, logisticsSpecialties)
        if self.logisticsRemarks is not None:
            LogisticsSupportItems_IngestAddLogisticsRemarks(builder, logisticsRemarks)
        logisticsSupportItemsIngest = LogisticsSupportItems_IngestEnd(builder)
        return logisticsSupportItemsIngest
