# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Medical condition causation information.
class EvacEtiology_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacEtiology_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacEtiology_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacEtiology_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacEtiology_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).
    # Example: /// Example: BURN
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacEtiology_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    # Example: /// Example: ARM LEFT FRONT
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacEtiology_Ingest
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the discovery of the etiology state in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-16T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacEtiology_Ingest
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the patient's etiology information.
    # Example: /// Example: Comments on the etiology info.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacEtiology_Ingest
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacEtiology_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacEtiology_IngestStart(builder)

def EvacEtiology_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacEtiology_IngestAddType(builder, type)

def EvacEtiology_IngestAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacEtiology_IngestAddBodyPart(builder, bodyPart)

def EvacEtiology_IngestAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacEtiology_IngestAddTime(builder, time)

def EvacEtiology_IngestAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacEtiology_IngestAddComments(builder, comments)

def EvacEtiology_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacEtiology_IngestEnd(builder)


class EvacEtiology_IngestT(object):

    # EvacEtiology_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.bodyPart = None  # type: str
        self.time = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacEtiologyIngest = EvacEtiology_Ingest()
        evacEtiologyIngest.Init(buf, pos)
        return cls.InitFromObj(evacEtiologyIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacEtiologyIngest):
        x = EvacEtiology_IngestT()
        x._UnPack(evacEtiologyIngest)
        return x

    # EvacEtiology_IngestT
    def _UnPack(self, evacEtiologyIngest):
        if evacEtiologyIngest is None:
            return
        self.type = evacEtiologyIngest.Type()
        self.bodyPart = evacEtiologyIngest.BodyPart()
        self.time = evacEtiologyIngest.Time()
        self.comments = evacEtiologyIngest.Comments()

    # EvacEtiology_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacEtiology_IngestStart(builder)
        if self.type is not None:
            EvacEtiology_IngestAddType(builder, type)
        if self.bodyPart is not None:
            EvacEtiology_IngestAddBodyPart(builder, bodyPart)
        if self.time is not None:
            EvacEtiology_IngestAddTime(builder, time)
        if self.comments is not None:
            EvacEtiology_IngestAddComments(builder, comments)
        evacEtiologyIngest = EvacEtiology_IngestEnd(builder)
        return evacEtiologyIngest
