# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of specific spacecraft battery types.
class Battery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Battery()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBattery(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BatteryBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x41\x54\x54", size_prefixed=size_prefixed)

    # Battery
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BATTERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Battery
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery name.
    # Example: /// Example: JAK-BATTERY-1479
    # Constraints: Minimum length = 1, Maximum length = 128
    # Battery
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Battery
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Battery
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Battery
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Battery
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Battery
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Battery
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Battery
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Battery
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Read-only collection of additional BatteryDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/batterydetails operations.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Battery
    def BatteryDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Battery
    def BatteryDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Battery
    def BatteryDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def BatteryStart(builder):
    builder.StartObject(11)

def Start(builder):
    BatteryStart(builder)

def BatteryAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    BatteryAddId(builder, id)

def BatteryAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    BatteryAddName(builder, name)

def BatteryAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    BatteryAddCreatedAt(builder, createdAt)

def BatteryAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    BatteryAddCreatedBy(builder, createdBy)

def BatteryAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    BatteryAddUpdatedAt(builder, updatedAt)

def BatteryAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    BatteryAddUpdatedBy(builder, updatedBy)

def BatteryAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    BatteryAddSource(builder, source)

def BatteryAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    BatteryAddOrigin(builder, origin)

def BatteryAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    BatteryAddOrigNetwork(builder, origNetwork)

def BatteryAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    BatteryAddDataMode(builder, dataMode)

def BatteryAddBatteryDetails(builder, batteryDetails):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(batteryDetails), 0)

def AddBatteryDetails(builder, batteryDetails):
    BatteryAddBatteryDetails(builder, batteryDetails)

def BatteryStartBatteryDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBatteryDetailsVector(builder, numElems):
    return BatteryStartBatteryDetailsVector(builder, numElems)

def BatteryEnd(builder):
    return builder.EndObject()

def End(builder):
    return BatteryEnd(builder)

try:
    from typing import List
except:
    pass

class BatteryT(object):

    # BatteryT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.batteryDetails = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        battery = Battery()
        battery.Init(buf, pos)
        return cls.InitFromObj(battery)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, battery):
        x = BatteryT()
        x._UnPack(battery)
        return x

    # BatteryT
    def _UnPack(self, battery):
        if battery is None:
            return
        self.id = battery.Id()
        self.name = battery.Name()
        self.createdAt = battery.CreatedAt()
        self.createdBy = battery.CreatedBy()
        self.updatedAt = battery.UpdatedAt()
        self.updatedBy = battery.UpdatedBy()
        self.source = battery.Source()
        self.origin = battery.Origin()
        self.origNetwork = battery.OrigNetwork()
        self.dataMode = battery.DataMode()
        if not battery.BatteryDetailsIsNone():
            self.batteryDetails = []
            for i in range(battery.BatteryDetailsLength()):
                self.batteryDetails.append(battery.BatteryDetails(i))

    # BatteryT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.batteryDetails is not None:
            batteryDetailslist = []
            for i in range(len(self.batteryDetails)):
                batteryDetailslist.append(builder.CreateString(self.batteryDetails[i]))
            BatteryStartBatteryDetailsVector(builder, len(self.batteryDetails))
            for i in reversed(range(len(self.batteryDetails))):
                builder.PrependUOffsetTRelative(batteryDetailslist[i])
            batteryDetails = builder.EndVector()
        BatteryStart(builder)
        if self.id is not None:
            BatteryAddId(builder, id)
        if self.name is not None:
            BatteryAddName(builder, name)
        if self.createdAt is not None:
            BatteryAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            BatteryAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            BatteryAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            BatteryAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            BatteryAddSource(builder, source)
        if self.origin is not None:
            BatteryAddOrigin(builder, origin)
        if self.origNetwork is not None:
            BatteryAddOrigNetwork(builder, origNetwork)
        BatteryAddDataMode(builder, self.dataMode)
        if self.batteryDetails is not None:
            BatteryAddBatteryDetails(builder, batteryDetails)
        battery = BatteryEnd(builder)
        return battery
