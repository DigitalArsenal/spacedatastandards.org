# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
class DataLinkMultiDuty_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkMultiDuty_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkMultiDuty_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkMultiDuty_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkMultiDuty_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Designated force of unit specified by ship name, unit call sign, or unit designator.
    # Example: /// Example: SHIP:STENNIS
    # Constraints: Minimum length = 0, Maximum length = 38
    # DataLinkMultiDuty_Full
    def UnitDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the person to be contacted for multilink coordination.
    # Example: /// Example: POPOVICH
    # Constraints: Minimum length = 0, Maximum length = 20
    # DataLinkMultiDuty_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The rank or position of the person to be contacted for multilink coordination.
    # Example: /// Example: LCDR
    # Constraints: Minimum length = 0, Maximum length = 16
    # DataLinkMultiDuty_Full
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
    # Example: /// Example: SICO
    # Constraints: Minimum length = 0, Maximum length = 4
    # DataLinkMultiDuty_Full
    def Duty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
    # Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    # Constraints: No constraints specified.
    # DataLinkMultiDuty_Full
    def DutyTeleFreqNums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLinkMultiDuty_Full
    def DutyTeleFreqNumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLinkMultiDuty_Full
    def DutyTeleFreqNumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLinkMultiDuty_Full
    def MultiDutyVoiceCoord(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLinkMultiDuty_Full
    def MultiDutyVoiceCoordLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLinkMultiDuty_Full
    def MultiDutyVoiceCoordIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def DataLinkMultiDuty_FullStart(builder):
    builder.StartObject(6)

def Start(builder):
    DataLinkMultiDuty_FullStart(builder)

def DataLinkMultiDuty_FullAddUnitDes(builder, unitDes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unitDes), 0)

def AddUnitDes(builder, unitDes):
    DataLinkMultiDuty_FullAddUnitDes(builder, unitDes)

def DataLinkMultiDuty_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    DataLinkMultiDuty_FullAddName(builder, name)

def DataLinkMultiDuty_FullAddRank(builder, rank):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rank), 0)

def AddRank(builder, rank):
    DataLinkMultiDuty_FullAddRank(builder, rank)

def DataLinkMultiDuty_FullAddDuty(builder, duty):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(duty), 0)

def AddDuty(builder, duty):
    DataLinkMultiDuty_FullAddDuty(builder, duty)

def DataLinkMultiDuty_FullAddDutyTeleFreqNums(builder, dutyTeleFreqNums):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dutyTeleFreqNums), 0)

def AddDutyTeleFreqNums(builder, dutyTeleFreqNums):
    DataLinkMultiDuty_FullAddDutyTeleFreqNums(builder, dutyTeleFreqNums)

def DataLinkMultiDuty_FullStartDutyTeleFreqNumsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDutyTeleFreqNumsVector(builder, numElems):
    return DataLinkMultiDuty_FullStartDutyTeleFreqNumsVector(builder, numElems)

def DataLinkMultiDuty_FullAddMultiDutyVoiceCoord(builder, multiDutyVoiceCoord):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(multiDutyVoiceCoord), 0)

def AddMultiDutyVoiceCoord(builder, multiDutyVoiceCoord):
    DataLinkMultiDuty_FullAddMultiDutyVoiceCoord(builder, multiDutyVoiceCoord)

def DataLinkMultiDuty_FullStartMultiDutyVoiceCoordVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMultiDutyVoiceCoordVector(builder, numElems):
    return DataLinkMultiDuty_FullStartMultiDutyVoiceCoordVector(builder, numElems)

def DataLinkMultiDuty_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkMultiDuty_FullEnd(builder)

try:
    from typing import List
except:
    pass

class DataLinkMultiDuty_FullT(object):

    # DataLinkMultiDuty_FullT
    def __init__(self):
        self.unitDes = None  # type: str
        self.name = None  # type: str
        self.rank = None  # type: str
        self.duty = None  # type: str
        self.dutyTeleFreqNums = None  # type: List[str]
        self.multiDutyVoiceCoord = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkMultiDutyFull = DataLinkMultiDuty_Full()
        dataLinkMultiDutyFull.Init(buf, pos)
        return cls.InitFromObj(dataLinkMultiDutyFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkMultiDutyFull):
        x = DataLinkMultiDuty_FullT()
        x._UnPack(dataLinkMultiDutyFull)
        return x

    # DataLinkMultiDuty_FullT
    def _UnPack(self, dataLinkMultiDutyFull):
        if dataLinkMultiDutyFull is None:
            return
        self.unitDes = dataLinkMultiDutyFull.UnitDes()
        self.name = dataLinkMultiDutyFull.Name()
        self.rank = dataLinkMultiDutyFull.Rank()
        self.duty = dataLinkMultiDutyFull.Duty()
        if not dataLinkMultiDutyFull.DutyTeleFreqNumsIsNone():
            self.dutyTeleFreqNums = []
            for i in range(dataLinkMultiDutyFull.DutyTeleFreqNumsLength()):
                self.dutyTeleFreqNums.append(dataLinkMultiDutyFull.DutyTeleFreqNums(i))
        if not dataLinkMultiDutyFull.MultiDutyVoiceCoordIsNone():
            self.multiDutyVoiceCoord = []
            for i in range(dataLinkMultiDutyFull.MultiDutyVoiceCoordLength()):
                self.multiDutyVoiceCoord.append(dataLinkMultiDutyFull.MultiDutyVoiceCoord(i))

    # DataLinkMultiDuty_FullT
    def Pack(self, builder):
        if self.unitDes is not None:
            unitDes = builder.CreateString(self.unitDes)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.rank is not None:
            rank = builder.CreateString(self.rank)
        if self.duty is not None:
            duty = builder.CreateString(self.duty)
        if self.dutyTeleFreqNums is not None:
            dutyTeleFreqNumslist = []
            for i in range(len(self.dutyTeleFreqNums)):
                dutyTeleFreqNumslist.append(builder.CreateString(self.dutyTeleFreqNums[i]))
            DataLinkMultiDuty_FullStartDutyTeleFreqNumsVector(builder, len(self.dutyTeleFreqNums))
            for i in reversed(range(len(self.dutyTeleFreqNums))):
                builder.PrependUOffsetTRelative(dutyTeleFreqNumslist[i])
            dutyTeleFreqNums = builder.EndVector()
        if self.multiDutyVoiceCoord is not None:
            multiDutyVoiceCoordlist = []
            for i in range(len(self.multiDutyVoiceCoord)):
                multiDutyVoiceCoordlist.append(builder.CreateString(self.multiDutyVoiceCoord[i]))
            DataLinkMultiDuty_FullStartMultiDutyVoiceCoordVector(builder, len(self.multiDutyVoiceCoord))
            for i in reversed(range(len(self.multiDutyVoiceCoord))):
                builder.PrependUOffsetTRelative(multiDutyVoiceCoordlist[i])
            multiDutyVoiceCoord = builder.EndVector()
        DataLinkMultiDuty_FullStart(builder)
        if self.unitDes is not None:
            DataLinkMultiDuty_FullAddUnitDes(builder, unitDes)
        if self.name is not None:
            DataLinkMultiDuty_FullAddName(builder, name)
        if self.rank is not None:
            DataLinkMultiDuty_FullAddRank(builder, rank)
        if self.duty is not None:
            DataLinkMultiDuty_FullAddDuty(builder, duty)
        if self.dutyTeleFreqNums is not None:
            DataLinkMultiDuty_FullAddDutyTeleFreqNums(builder, dutyTeleFreqNums)
        if self.multiDutyVoiceCoord is not None:
            DataLinkMultiDuty_FullAddMultiDutyVoiceCoord(builder, multiDutyVoiceCoord)
        dataLinkMultiDutyFull = DataLinkMultiDuty_FullEnd(builder)
        return dataLinkMultiDutyFull
