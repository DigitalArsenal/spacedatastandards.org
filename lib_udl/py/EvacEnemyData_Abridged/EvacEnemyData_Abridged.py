# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Data defining any enemy intelligence reported by the requestor.
class EvacEnemyData_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacEnemyData_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacEnemyData_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacEnemyData_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacEnemyData_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
    # Example: /// Example: NORTH
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacEnemyData_Abridged
    def DirToEnemy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
    # Example: /// Example: SMALL ARMS
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacEnemyData_Abridged
    def HostileFireType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comments provided by friendlies about the evac zone.
    # Example: /// Example: Comments from friendlies.
    # Constraints: Minimum length = 0, Maximum length = 128
    # EvacEnemyData_Abridged
    def FriendliesRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hot Landing Zone remarks.
    # Example: /// Example: Remarks about hot landing zone.
    # Constraints: Minimum length = 0, Maximum length = 128
    # EvacEnemyData_Abridged
    def HlzRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacEnemyData_AbridgedStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacEnemyData_AbridgedStart(builder)

def EvacEnemyData_AbridgedAddDirToEnemy(builder, dirToEnemy):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dirToEnemy), 0)

def AddDirToEnemy(builder, dirToEnemy):
    EvacEnemyData_AbridgedAddDirToEnemy(builder, dirToEnemy)

def EvacEnemyData_AbridgedAddHostileFireType(builder, hostileFireType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hostileFireType), 0)

def AddHostileFireType(builder, hostileFireType):
    EvacEnemyData_AbridgedAddHostileFireType(builder, hostileFireType)

def EvacEnemyData_AbridgedAddFriendliesRemarks(builder, friendliesRemarks):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(friendliesRemarks), 0)

def AddFriendliesRemarks(builder, friendliesRemarks):
    EvacEnemyData_AbridgedAddFriendliesRemarks(builder, friendliesRemarks)

def EvacEnemyData_AbridgedAddHlzRemarks(builder, hlzRemarks):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(hlzRemarks), 0)

def AddHlzRemarks(builder, hlzRemarks):
    EvacEnemyData_AbridgedAddHlzRemarks(builder, hlzRemarks)

def EvacEnemyData_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacEnemyData_AbridgedEnd(builder)


class EvacEnemyData_AbridgedT(object):

    # EvacEnemyData_AbridgedT
    def __init__(self):
        self.dirToEnemy = None  # type: str
        self.hostileFireType = None  # type: str
        self.friendliesRemarks = None  # type: str
        self.hlzRemarks = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacEnemyDataAbridged = EvacEnemyData_Abridged()
        evacEnemyDataAbridged.Init(buf, pos)
        return cls.InitFromObj(evacEnemyDataAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacEnemyDataAbridged):
        x = EvacEnemyData_AbridgedT()
        x._UnPack(evacEnemyDataAbridged)
        return x

    # EvacEnemyData_AbridgedT
    def _UnPack(self, evacEnemyDataAbridged):
        if evacEnemyDataAbridged is None:
            return
        self.dirToEnemy = evacEnemyDataAbridged.DirToEnemy()
        self.hostileFireType = evacEnemyDataAbridged.HostileFireType()
        self.friendliesRemarks = evacEnemyDataAbridged.FriendliesRemarks()
        self.hlzRemarks = evacEnemyDataAbridged.HlzRemarks()

    # EvacEnemyData_AbridgedT
    def Pack(self, builder):
        if self.dirToEnemy is not None:
            dirToEnemy = builder.CreateString(self.dirToEnemy)
        if self.hostileFireType is not None:
            hostileFireType = builder.CreateString(self.hostileFireType)
        if self.friendliesRemarks is not None:
            friendliesRemarks = builder.CreateString(self.friendliesRemarks)
        if self.hlzRemarks is not None:
            hlzRemarks = builder.CreateString(self.hlzRemarks)
        EvacEnemyData_AbridgedStart(builder)
        if self.dirToEnemy is not None:
            EvacEnemyData_AbridgedAddDirToEnemy(builder, dirToEnemy)
        if self.hostileFireType is not None:
            EvacEnemyData_AbridgedAddHostileFireType(builder, hostileFireType)
        if self.friendliesRemarks is not None:
            EvacEnemyData_AbridgedAddFriendliesRemarks(builder, friendliesRemarks)
        if self.hlzRemarks is not None:
            EvacEnemyData_AbridgedAddHlzRemarks(builder, hlzRemarks)
        evacEnemyDataAbridged = EvacEnemyData_AbridgedEnd(builder)
        return evacEnemyDataAbridged
