# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
class EngineDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EngineDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEngineDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EngineDetailsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4E\x47\x49", size_prefixed=size_prefixed)

    # EngineDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ENGINEDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EngineDetails
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent engine record.
    # Example: /// Example: ENGINE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EngineDetails
    def IdEngine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EngineDetails
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Engine type or family.
    # Example: /// Example: ENGINE_TYPE1
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def Family(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    # Example: /// Example: Pressure Fed
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def CycleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
    # Example: /// Example: Electric
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def CharacteristicType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization ID of the engine manufacturer.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EngineDetails
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Launch engine specific impulse in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails
    def SpecificImpulse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch engine maximum burn time in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails
    def BurnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine maximum thrust at sea level in Kilo-Newtons.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails
    def SeaLevelThrust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine maximum thrust in a vacuum in Kilo-Newtons.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails
    def VacuumThrust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine chamber pressure in bars.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails
    def ChamberPressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine nozzle expansion ratio.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails
    def NozzleExpansionRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine maximum number of firings.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # EngineDetails
    def MaxFirings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
    # Example: /// Example: Liquid
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def Propellant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
    # Example: /// Example: Liquid Oxygen
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def Oxidizer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes/Description of the engine.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EngineDetails
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EngineDetails
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # EngineDetails
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EngineDetails
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # EngineDetails
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # EngineDetails
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EngineDetails
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # EngineDetails
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EngineDetails
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EngineDetails
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

def EngineDetailsStart(builder):
    builder.StartObject(26)

def Start(builder):
    EngineDetailsStart(builder)

def EngineDetailsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EngineDetailsAddId(builder, id)

def EngineDetailsAddIdEngine(builder, idEngine):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idEngine), 0)

def AddIdEngine(builder, idEngine):
    EngineDetailsAddIdEngine(builder, idEngine)

def EngineDetailsAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EngineDetailsAddClassificationMarking(builder, classificationMarking)

def EngineDetailsAddFamily(builder, family):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(family), 0)

def AddFamily(builder, family):
    EngineDetailsAddFamily(builder, family)

def EngineDetailsAddCycleType(builder, cycleType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(cycleType), 0)

def AddCycleType(builder, cycleType):
    EngineDetailsAddCycleType(builder, cycleType)

def EngineDetailsAddCharacteristicType(builder, characteristicType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(characteristicType), 0)

def AddCharacteristicType(builder, characteristicType):
    EngineDetailsAddCharacteristicType(builder, characteristicType)

def EngineDetailsAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    EngineDetailsAddManufacturerOrgId(builder, manufacturerOrgId)

def EngineDetailsAddSpecificImpulse(builder, specificImpulse):
    builder.PrependFloat64Slot(7, specificImpulse, 0.0)

def AddSpecificImpulse(builder, specificImpulse):
    EngineDetailsAddSpecificImpulse(builder, specificImpulse)

def EngineDetailsAddBurnTime(builder, burnTime):
    builder.PrependFloat64Slot(8, burnTime, 0.0)

def AddBurnTime(builder, burnTime):
    EngineDetailsAddBurnTime(builder, burnTime)

def EngineDetailsAddSeaLevelThrust(builder, seaLevelThrust):
    builder.PrependFloat64Slot(9, seaLevelThrust, 0.0)

def AddSeaLevelThrust(builder, seaLevelThrust):
    EngineDetailsAddSeaLevelThrust(builder, seaLevelThrust)

def EngineDetailsAddVacuumThrust(builder, vacuumThrust):
    builder.PrependFloat64Slot(10, vacuumThrust, 0.0)

def AddVacuumThrust(builder, vacuumThrust):
    EngineDetailsAddVacuumThrust(builder, vacuumThrust)

def EngineDetailsAddChamberPressure(builder, chamberPressure):
    builder.PrependFloat64Slot(11, chamberPressure, 0.0)

def AddChamberPressure(builder, chamberPressure):
    EngineDetailsAddChamberPressure(builder, chamberPressure)

def EngineDetailsAddNozzleExpansionRatio(builder, nozzleExpansionRatio):
    builder.PrependFloat64Slot(12, nozzleExpansionRatio, 0.0)

def AddNozzleExpansionRatio(builder, nozzleExpansionRatio):
    EngineDetailsAddNozzleExpansionRatio(builder, nozzleExpansionRatio)

def EngineDetailsAddMaxFirings(builder, maxFirings):
    builder.PrependInt32Slot(13, maxFirings, 0)

def AddMaxFirings(builder, maxFirings):
    EngineDetailsAddMaxFirings(builder, maxFirings)

def EngineDetailsAddPropellant(builder, propellant):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(propellant), 0)

def AddPropellant(builder, propellant):
    EngineDetailsAddPropellant(builder, propellant)

def EngineDetailsAddOxidizer(builder, oxidizer):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(oxidizer), 0)

def AddOxidizer(builder, oxidizer):
    EngineDetailsAddOxidizer(builder, oxidizer)

def EngineDetailsAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    EngineDetailsAddNotes(builder, notes)

def EngineDetailsAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EngineDetailsAddCreatedAt(builder, createdAt)

def EngineDetailsAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EngineDetailsAddCreatedBy(builder, createdBy)

def EngineDetailsAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    EngineDetailsAddUpdatedAt(builder, updatedAt)

def EngineDetailsAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    EngineDetailsAddUpdatedBy(builder, updatedBy)

def EngineDetailsAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EngineDetailsAddSource(builder, source)

def EngineDetailsAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EngineDetailsAddOrigin(builder, origin)

def EngineDetailsAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EngineDetailsAddOrigNetwork(builder, origNetwork)

def EngineDetailsAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(24, dataMode, 0)

def AddDataMode(builder, dataMode):
    EngineDetailsAddDataMode(builder, dataMode)

def EngineDetailsAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    EngineDetailsAddTags(builder, tags)

def EngineDetailsStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return EngineDetailsStartTagsVector(builder, numElems)

def EngineDetailsEnd(builder):
    return builder.EndObject()

def End(builder):
    return EngineDetailsEnd(builder)

try:
    from typing import List
except:
    pass

class EngineDetailsT(object):

    # EngineDetailsT
    def __init__(self):
        self.id = None  # type: str
        self.idEngine = None  # type: str
        self.classificationMarking = None  # type: str
        self.family = None  # type: str
        self.cycleType = None  # type: str
        self.characteristicType = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.specificImpulse = 0.0  # type: float
        self.burnTime = 0.0  # type: float
        self.seaLevelThrust = 0.0  # type: float
        self.vacuumThrust = 0.0  # type: float
        self.chamberPressure = 0.0  # type: float
        self.nozzleExpansionRatio = 0.0  # type: float
        self.maxFirings = 0  # type: int
        self.propellant = None  # type: str
        self.oxidizer = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        engineDetails = EngineDetails()
        engineDetails.Init(buf, pos)
        return cls.InitFromObj(engineDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, engineDetails):
        x = EngineDetailsT()
        x._UnPack(engineDetails)
        return x

    # EngineDetailsT
    def _UnPack(self, engineDetails):
        if engineDetails is None:
            return
        self.id = engineDetails.Id()
        self.idEngine = engineDetails.IdEngine()
        self.classificationMarking = engineDetails.ClassificationMarking()
        self.family = engineDetails.Family()
        self.cycleType = engineDetails.CycleType()
        self.characteristicType = engineDetails.CharacteristicType()
        self.manufacturerOrgId = engineDetails.ManufacturerOrgId()
        self.specificImpulse = engineDetails.SpecificImpulse()
        self.burnTime = engineDetails.BurnTime()
        self.seaLevelThrust = engineDetails.SeaLevelThrust()
        self.vacuumThrust = engineDetails.VacuumThrust()
        self.chamberPressure = engineDetails.ChamberPressure()
        self.nozzleExpansionRatio = engineDetails.NozzleExpansionRatio()
        self.maxFirings = engineDetails.MaxFirings()
        self.propellant = engineDetails.Propellant()
        self.oxidizer = engineDetails.Oxidizer()
        self.notes = engineDetails.Notes()
        self.createdAt = engineDetails.CreatedAt()
        self.createdBy = engineDetails.CreatedBy()
        self.updatedAt = engineDetails.UpdatedAt()
        self.updatedBy = engineDetails.UpdatedBy()
        self.source = engineDetails.Source()
        self.origin = engineDetails.Origin()
        self.origNetwork = engineDetails.OrigNetwork()
        self.dataMode = engineDetails.DataMode()
        if not engineDetails.TagsIsNone():
            self.tags = []
            for i in range(engineDetails.TagsLength()):
                self.tags.append(engineDetails.Tags(i))

    # EngineDetailsT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idEngine is not None:
            idEngine = builder.CreateString(self.idEngine)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.family is not None:
            family = builder.CreateString(self.family)
        if self.cycleType is not None:
            cycleType = builder.CreateString(self.cycleType)
        if self.characteristicType is not None:
            characteristicType = builder.CreateString(self.characteristicType)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.propellant is not None:
            propellant = builder.CreateString(self.propellant)
        if self.oxidizer is not None:
            oxidizer = builder.CreateString(self.oxidizer)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            EngineDetailsStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        EngineDetailsStart(builder)
        if self.id is not None:
            EngineDetailsAddId(builder, id)
        if self.idEngine is not None:
            EngineDetailsAddIdEngine(builder, idEngine)
        if self.classificationMarking is not None:
            EngineDetailsAddClassificationMarking(builder, classificationMarking)
        if self.family is not None:
            EngineDetailsAddFamily(builder, family)
        if self.cycleType is not None:
            EngineDetailsAddCycleType(builder, cycleType)
        if self.characteristicType is not None:
            EngineDetailsAddCharacteristicType(builder, characteristicType)
        if self.manufacturerOrgId is not None:
            EngineDetailsAddManufacturerOrgId(builder, manufacturerOrgId)
        EngineDetailsAddSpecificImpulse(builder, self.specificImpulse)
        EngineDetailsAddBurnTime(builder, self.burnTime)
        EngineDetailsAddSeaLevelThrust(builder, self.seaLevelThrust)
        EngineDetailsAddVacuumThrust(builder, self.vacuumThrust)
        EngineDetailsAddChamberPressure(builder, self.chamberPressure)
        EngineDetailsAddNozzleExpansionRatio(builder, self.nozzleExpansionRatio)
        EngineDetailsAddMaxFirings(builder, self.maxFirings)
        if self.propellant is not None:
            EngineDetailsAddPropellant(builder, propellant)
        if self.oxidizer is not None:
            EngineDetailsAddOxidizer(builder, oxidizer)
        if self.notes is not None:
            EngineDetailsAddNotes(builder, notes)
        if self.createdAt is not None:
            EngineDetailsAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EngineDetailsAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            EngineDetailsAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            EngineDetailsAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            EngineDetailsAddSource(builder, source)
        if self.origin is not None:
            EngineDetailsAddOrigin(builder, origin)
        if self.origNetwork is not None:
            EngineDetailsAddOrigNetwork(builder, origNetwork)
        EngineDetailsAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            EngineDetailsAddTags(builder, tags)
        engineDetails = EngineDetailsEnd(builder)
        return engineDetails
