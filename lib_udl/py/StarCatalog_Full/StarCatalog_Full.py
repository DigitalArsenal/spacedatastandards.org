# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
class StarCatalog_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StarCatalog_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStarCatalog_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StarCatalog_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x54\x41\x52", size_prefixed=size_prefixed)

    # StarCatalog_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: STAR-CAT-DATASET-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # StarCatalog_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # StarCatalog_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of this object in the specific catalog associated with this record.
    # Example: /// Example: 12345
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def CsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
    # Example: /// Example: 12345
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def GncCatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The ID of this object in the Gaia DR3 Catalog.
    # Example: /// Example: 89012345678901
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Gaiadr3CatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # The ID of this object in the Hipparcos Catalog.
    # Example: /// Example: 12345
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def HipCatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The version of the catalog associated with this object.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def CatVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
    # Example: /// Example: 14.43
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Ra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
    # Example: /// Example: 509.466
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def RaUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
    # Example: /// Example: 21.8
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
    # Example: /// Example: 40.996
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def DecUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def PosUncFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Absolute stellar parallax of the source, in milliarcseconds.
    # Example: /// Example: -6.8
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Parallax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty of the stellar parallax, in milliarcseconds.
    # Example: /// Example: 82.35
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def ParallaxUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
    # Example: /// Example: 1000.45
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Pmra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty of proper motion in right ascension, in milliarcseconds/year.
    # Example: /// Example: 5.6
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def PmraUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
    # Example: /// Example: -970.1003
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Pmdec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty of proper motion in declination, in milliarcseconds/year.
    # Example: /// Example: 1.22
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def PmdecUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def PmUncFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
    # Example: /// Example: GAIADR3
    # Constraints: Minimum length = 1, Maximum length = 16
    # StarCatalog_Full
    def AstrometryOrigin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
    # Example: /// Example: 2016
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def StarEpoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gaia DR3 optical photometric G-band magnitude in the Vega scale.
    # Example: /// Example: 0.0046
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Gmag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
    # Example: /// Example: 0.00292
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def GmagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
    # Example: /// Example: 0.04559
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Bpmag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
    # Example: /// Example: 0.2227
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def BpmagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gaia DR3 optical Rp-band magnitude in the Vega scale.
    # Example: /// Example: 8.0047
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Rpmag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
    # Example: /// Example: 1.233
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def RpmagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
    # Example: /// Example: 9.515
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Jmag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
    # Example: /// Example: 7.559
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def JmagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
    # Example: /// Example: 13.545
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Kmag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
    # Example: /// Example: 0.052
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def KmagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
    # Example: /// Example: 12.126
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Hmag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
    # Example: /// Example: 5.722
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def HmagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating that the source exhibits variable magnitude.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def VarFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this is a multiple object source.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def MultFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The catalog ID of the nearest neighbor to this source.
    # Example: /// Example: 2456
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def NeighborId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def NeighborFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Distance between source and nearest neighbor, in arcseconds.
    # Example: /// Example: 201.406
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def NeighborDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def ShiftFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Photocentric shift caused by neighbors, in arcseconds.
    # Example: /// Example: 4.548
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def Shift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # StarCatalog_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # StarCatalog_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # StarCatalog_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # StarCatalog_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # StarCatalog_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 4
    # StarCatalog_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # StarCatalog_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def StarCatalog_FullStart(builder):
    builder.StartObject(48)

def Start(builder):
    StarCatalog_FullStart(builder)

def StarCatalog_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    StarCatalog_FullAddId(builder, id)

def StarCatalog_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    StarCatalog_FullAddClassificationMarking(builder, classificationMarking)

def StarCatalog_FullAddCsId(builder, csId):
    builder.PrependInt64Slot(2, csId, 0)

def AddCsId(builder, csId):
    StarCatalog_FullAddCsId(builder, csId)

def StarCatalog_FullAddGncCatId(builder, gncCatId):
    builder.PrependInt32Slot(3, gncCatId, 0)

def AddGncCatId(builder, gncCatId):
    StarCatalog_FullAddGncCatId(builder, gncCatId)

def StarCatalog_FullAddGaiadr3CatId(builder, gaiadr3CatId):
    builder.PrependInt64Slot(4, gaiadr3CatId, 0)

def AddGaiadr3CatId(builder, gaiadr3CatId):
    StarCatalog_FullAddGaiadr3CatId(builder, gaiadr3CatId)

def StarCatalog_FullAddHipCatId(builder, hipCatId):
    builder.PrependInt32Slot(5, hipCatId, 0)

def AddHipCatId(builder, hipCatId):
    StarCatalog_FullAddHipCatId(builder, hipCatId)

def StarCatalog_FullAddCatVersion(builder, catVersion):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(catVersion), 0)

def AddCatVersion(builder, catVersion):
    StarCatalog_FullAddCatVersion(builder, catVersion)

def StarCatalog_FullAddRa(builder, ra):
    builder.PrependFloat64Slot(7, ra, 0.0)

def AddRa(builder, ra):
    StarCatalog_FullAddRa(builder, ra)

def StarCatalog_FullAddRaUnc(builder, raUnc):
    builder.PrependFloat64Slot(8, raUnc, 0.0)

def AddRaUnc(builder, raUnc):
    StarCatalog_FullAddRaUnc(builder, raUnc)

def StarCatalog_FullAddDec(builder, dec):
    builder.PrependFloat64Slot(9, dec, 0.0)

def AddDec(builder, dec):
    StarCatalog_FullAddDec(builder, dec)

def StarCatalog_FullAddDecUnc(builder, decUnc):
    builder.PrependFloat64Slot(10, decUnc, 0.0)

def AddDecUnc(builder, decUnc):
    StarCatalog_FullAddDecUnc(builder, decUnc)

def StarCatalog_FullAddPosUncFlag(builder, posUncFlag):
    builder.PrependBoolSlot(11, posUncFlag, 0)

def AddPosUncFlag(builder, posUncFlag):
    StarCatalog_FullAddPosUncFlag(builder, posUncFlag)

def StarCatalog_FullAddParallax(builder, parallax):
    builder.PrependFloat64Slot(12, parallax, 0.0)

def AddParallax(builder, parallax):
    StarCatalog_FullAddParallax(builder, parallax)

def StarCatalog_FullAddParallaxUnc(builder, parallaxUnc):
    builder.PrependFloat64Slot(13, parallaxUnc, 0.0)

def AddParallaxUnc(builder, parallaxUnc):
    StarCatalog_FullAddParallaxUnc(builder, parallaxUnc)

def StarCatalog_FullAddPmra(builder, pmra):
    builder.PrependFloat64Slot(14, pmra, 0.0)

def AddPmra(builder, pmra):
    StarCatalog_FullAddPmra(builder, pmra)

def StarCatalog_FullAddPmraUnc(builder, pmraUnc):
    builder.PrependFloat64Slot(15, pmraUnc, 0.0)

def AddPmraUnc(builder, pmraUnc):
    StarCatalog_FullAddPmraUnc(builder, pmraUnc)

def StarCatalog_FullAddPmdec(builder, pmdec):
    builder.PrependFloat64Slot(16, pmdec, 0.0)

def AddPmdec(builder, pmdec):
    StarCatalog_FullAddPmdec(builder, pmdec)

def StarCatalog_FullAddPmdecUnc(builder, pmdecUnc):
    builder.PrependFloat64Slot(17, pmdecUnc, 0.0)

def AddPmdecUnc(builder, pmdecUnc):
    StarCatalog_FullAddPmdecUnc(builder, pmdecUnc)

def StarCatalog_FullAddPmUncFlag(builder, pmUncFlag):
    builder.PrependBoolSlot(18, pmUncFlag, 0)

def AddPmUncFlag(builder, pmUncFlag):
    StarCatalog_FullAddPmUncFlag(builder, pmUncFlag)

def StarCatalog_FullAddAstrometryOrigin(builder, astrometryOrigin):
    builder.PrependInt8Slot(19, astrometryOrigin, 0)

def AddAstrometryOrigin(builder, astrometryOrigin):
    StarCatalog_FullAddAstrometryOrigin(builder, astrometryOrigin)

def StarCatalog_FullAddStarEpoch(builder, starEpoch):
    builder.PrependFloat64Slot(20, starEpoch, 0.0)

def AddStarEpoch(builder, starEpoch):
    StarCatalog_FullAddStarEpoch(builder, starEpoch)

def StarCatalog_FullAddGmag(builder, gmag):
    builder.PrependFloat64Slot(21, gmag, 0.0)

def AddGmag(builder, gmag):
    StarCatalog_FullAddGmag(builder, gmag)

def StarCatalog_FullAddGmagUnc(builder, gmagUnc):
    builder.PrependFloat64Slot(22, gmagUnc, 0.0)

def AddGmagUnc(builder, gmagUnc):
    StarCatalog_FullAddGmagUnc(builder, gmagUnc)

def StarCatalog_FullAddBpmag(builder, bpmag):
    builder.PrependFloat64Slot(23, bpmag, 0.0)

def AddBpmag(builder, bpmag):
    StarCatalog_FullAddBpmag(builder, bpmag)

def StarCatalog_FullAddBpmagUnc(builder, bpmagUnc):
    builder.PrependFloat64Slot(24, bpmagUnc, 0.0)

def AddBpmagUnc(builder, bpmagUnc):
    StarCatalog_FullAddBpmagUnc(builder, bpmagUnc)

def StarCatalog_FullAddRpmag(builder, rpmag):
    builder.PrependFloat64Slot(25, rpmag, 0.0)

def AddRpmag(builder, rpmag):
    StarCatalog_FullAddRpmag(builder, rpmag)

def StarCatalog_FullAddRpmagUnc(builder, rpmagUnc):
    builder.PrependFloat64Slot(26, rpmagUnc, 0.0)

def AddRpmagUnc(builder, rpmagUnc):
    StarCatalog_FullAddRpmagUnc(builder, rpmagUnc)

def StarCatalog_FullAddJmag(builder, jmag):
    builder.PrependFloat64Slot(27, jmag, 0.0)

def AddJmag(builder, jmag):
    StarCatalog_FullAddJmag(builder, jmag)

def StarCatalog_FullAddJmagUnc(builder, jmagUnc):
    builder.PrependFloat64Slot(28, jmagUnc, 0.0)

def AddJmagUnc(builder, jmagUnc):
    StarCatalog_FullAddJmagUnc(builder, jmagUnc)

def StarCatalog_FullAddKmag(builder, kmag):
    builder.PrependFloat64Slot(29, kmag, 0.0)

def AddKmag(builder, kmag):
    StarCatalog_FullAddKmag(builder, kmag)

def StarCatalog_FullAddKmagUnc(builder, kmagUnc):
    builder.PrependFloat64Slot(30, kmagUnc, 0.0)

def AddKmagUnc(builder, kmagUnc):
    StarCatalog_FullAddKmagUnc(builder, kmagUnc)

def StarCatalog_FullAddHmag(builder, hmag):
    builder.PrependFloat64Slot(31, hmag, 0.0)

def AddHmag(builder, hmag):
    StarCatalog_FullAddHmag(builder, hmag)

def StarCatalog_FullAddHmagUnc(builder, hmagUnc):
    builder.PrependFloat64Slot(32, hmagUnc, 0.0)

def AddHmagUnc(builder, hmagUnc):
    StarCatalog_FullAddHmagUnc(builder, hmagUnc)

def StarCatalog_FullAddVarFlag(builder, varFlag):
    builder.PrependBoolSlot(33, varFlag, 0)

def AddVarFlag(builder, varFlag):
    StarCatalog_FullAddVarFlag(builder, varFlag)

def StarCatalog_FullAddMultFlag(builder, multFlag):
    builder.PrependBoolSlot(34, multFlag, 0)

def AddMultFlag(builder, multFlag):
    StarCatalog_FullAddMultFlag(builder, multFlag)

def StarCatalog_FullAddNeighborId(builder, neighborId):
    builder.PrependInt32Slot(35, neighborId, 0)

def AddNeighborId(builder, neighborId):
    StarCatalog_FullAddNeighborId(builder, neighborId)

def StarCatalog_FullAddNeighborFlag(builder, neighborFlag):
    builder.PrependBoolSlot(36, neighborFlag, 0)

def AddNeighborFlag(builder, neighborFlag):
    StarCatalog_FullAddNeighborFlag(builder, neighborFlag)

def StarCatalog_FullAddNeighborDistance(builder, neighborDistance):
    builder.PrependFloat64Slot(37, neighborDistance, 0.0)

def AddNeighborDistance(builder, neighborDistance):
    StarCatalog_FullAddNeighborDistance(builder, neighborDistance)

def StarCatalog_FullAddShiftFlag(builder, shiftFlag):
    builder.PrependBoolSlot(38, shiftFlag, 0)

def AddShiftFlag(builder, shiftFlag):
    StarCatalog_FullAddShiftFlag(builder, shiftFlag)

def StarCatalog_FullAddShift(builder, shift):
    builder.PrependFloat64Slot(39, shift, 0.0)

def AddShift(builder, shift):
    StarCatalog_FullAddShift(builder, shift)

def StarCatalog_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    StarCatalog_FullAddCreatedAt(builder, createdAt)

def StarCatalog_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    StarCatalog_FullAddCreatedBy(builder, createdBy)

def StarCatalog_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    StarCatalog_FullAddUpdatedAt(builder, updatedAt)

def StarCatalog_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    StarCatalog_FullAddUpdatedBy(builder, updatedBy)

def StarCatalog_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    StarCatalog_FullAddSource(builder, source)

def StarCatalog_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    StarCatalog_FullAddOrigin(builder, origin)

def StarCatalog_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    StarCatalog_FullAddOrigNetwork(builder, origNetwork)

def StarCatalog_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(47, dataMode, 0)

def AddDataMode(builder, dataMode):
    StarCatalog_FullAddDataMode(builder, dataMode)

def StarCatalog_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return StarCatalog_FullEnd(builder)


class StarCatalog_FullT(object):

    # StarCatalog_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.csId = 0  # type: int
        self.gncCatId = 0  # type: int
        self.gaiadr3CatId = 0  # type: int
        self.hipCatId = 0  # type: int
        self.catVersion = None  # type: str
        self.ra = 0.0  # type: float
        self.raUnc = 0.0  # type: float
        self.dec = 0.0  # type: float
        self.decUnc = 0.0  # type: float
        self.posUncFlag = False  # type: bool
        self.parallax = 0.0  # type: float
        self.parallaxUnc = 0.0  # type: float
        self.pmra = 0.0  # type: float
        self.pmraUnc = 0.0  # type: float
        self.pmdec = 0.0  # type: float
        self.pmdecUnc = 0.0  # type: float
        self.pmUncFlag = False  # type: bool
        self.astrometryOrigin = 0  # type: int
        self.starEpoch = 0.0  # type: float
        self.gmag = 0.0  # type: float
        self.gmagUnc = 0.0  # type: float
        self.bpmag = 0.0  # type: float
        self.bpmagUnc = 0.0  # type: float
        self.rpmag = 0.0  # type: float
        self.rpmagUnc = 0.0  # type: float
        self.jmag = 0.0  # type: float
        self.jmagUnc = 0.0  # type: float
        self.kmag = 0.0  # type: float
        self.kmagUnc = 0.0  # type: float
        self.hmag = 0.0  # type: float
        self.hmagUnc = 0.0  # type: float
        self.varFlag = False  # type: bool
        self.multFlag = False  # type: bool
        self.neighborId = 0  # type: int
        self.neighborFlag = False  # type: bool
        self.neighborDistance = 0.0  # type: float
        self.shiftFlag = False  # type: bool
        self.shift = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        starCatalogFull = StarCatalog_Full()
        starCatalogFull.Init(buf, pos)
        return cls.InitFromObj(starCatalogFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, starCatalogFull):
        x = StarCatalog_FullT()
        x._UnPack(starCatalogFull)
        return x

    # StarCatalog_FullT
    def _UnPack(self, starCatalogFull):
        if starCatalogFull is None:
            return
        self.id = starCatalogFull.Id()
        self.classificationMarking = starCatalogFull.ClassificationMarking()
        self.csId = starCatalogFull.CsId()
        self.gncCatId = starCatalogFull.GncCatId()
        self.gaiadr3CatId = starCatalogFull.Gaiadr3CatId()
        self.hipCatId = starCatalogFull.HipCatId()
        self.catVersion = starCatalogFull.CatVersion()
        self.ra = starCatalogFull.Ra()
        self.raUnc = starCatalogFull.RaUnc()
        self.dec = starCatalogFull.Dec()
        self.decUnc = starCatalogFull.DecUnc()
        self.posUncFlag = starCatalogFull.PosUncFlag()
        self.parallax = starCatalogFull.Parallax()
        self.parallaxUnc = starCatalogFull.ParallaxUnc()
        self.pmra = starCatalogFull.Pmra()
        self.pmraUnc = starCatalogFull.PmraUnc()
        self.pmdec = starCatalogFull.Pmdec()
        self.pmdecUnc = starCatalogFull.PmdecUnc()
        self.pmUncFlag = starCatalogFull.PmUncFlag()
        self.astrometryOrigin = starCatalogFull.AstrometryOrigin()
        self.starEpoch = starCatalogFull.StarEpoch()
        self.gmag = starCatalogFull.Gmag()
        self.gmagUnc = starCatalogFull.GmagUnc()
        self.bpmag = starCatalogFull.Bpmag()
        self.bpmagUnc = starCatalogFull.BpmagUnc()
        self.rpmag = starCatalogFull.Rpmag()
        self.rpmagUnc = starCatalogFull.RpmagUnc()
        self.jmag = starCatalogFull.Jmag()
        self.jmagUnc = starCatalogFull.JmagUnc()
        self.kmag = starCatalogFull.Kmag()
        self.kmagUnc = starCatalogFull.KmagUnc()
        self.hmag = starCatalogFull.Hmag()
        self.hmagUnc = starCatalogFull.HmagUnc()
        self.varFlag = starCatalogFull.VarFlag()
        self.multFlag = starCatalogFull.MultFlag()
        self.neighborId = starCatalogFull.NeighborId()
        self.neighborFlag = starCatalogFull.NeighborFlag()
        self.neighborDistance = starCatalogFull.NeighborDistance()
        self.shiftFlag = starCatalogFull.ShiftFlag()
        self.shift = starCatalogFull.Shift()
        self.createdAt = starCatalogFull.CreatedAt()
        self.createdBy = starCatalogFull.CreatedBy()
        self.updatedAt = starCatalogFull.UpdatedAt()
        self.updatedBy = starCatalogFull.UpdatedBy()
        self.source = starCatalogFull.Source()
        self.origin = starCatalogFull.Origin()
        self.origNetwork = starCatalogFull.OrigNetwork()
        self.dataMode = starCatalogFull.DataMode()

    # StarCatalog_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.catVersion is not None:
            catVersion = builder.CreateString(self.catVersion)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        StarCatalog_FullStart(builder)
        if self.id is not None:
            StarCatalog_FullAddId(builder, id)
        if self.classificationMarking is not None:
            StarCatalog_FullAddClassificationMarking(builder, classificationMarking)
        StarCatalog_FullAddCsId(builder, self.csId)
        StarCatalog_FullAddGncCatId(builder, self.gncCatId)
        StarCatalog_FullAddGaiadr3CatId(builder, self.gaiadr3CatId)
        StarCatalog_FullAddHipCatId(builder, self.hipCatId)
        if self.catVersion is not None:
            StarCatalog_FullAddCatVersion(builder, catVersion)
        StarCatalog_FullAddRa(builder, self.ra)
        StarCatalog_FullAddRaUnc(builder, self.raUnc)
        StarCatalog_FullAddDec(builder, self.dec)
        StarCatalog_FullAddDecUnc(builder, self.decUnc)
        StarCatalog_FullAddPosUncFlag(builder, self.posUncFlag)
        StarCatalog_FullAddParallax(builder, self.parallax)
        StarCatalog_FullAddParallaxUnc(builder, self.parallaxUnc)
        StarCatalog_FullAddPmra(builder, self.pmra)
        StarCatalog_FullAddPmraUnc(builder, self.pmraUnc)
        StarCatalog_FullAddPmdec(builder, self.pmdec)
        StarCatalog_FullAddPmdecUnc(builder, self.pmdecUnc)
        StarCatalog_FullAddPmUncFlag(builder, self.pmUncFlag)
        StarCatalog_FullAddAstrometryOrigin(builder, self.astrometryOrigin)
        StarCatalog_FullAddStarEpoch(builder, self.starEpoch)
        StarCatalog_FullAddGmag(builder, self.gmag)
        StarCatalog_FullAddGmagUnc(builder, self.gmagUnc)
        StarCatalog_FullAddBpmag(builder, self.bpmag)
        StarCatalog_FullAddBpmagUnc(builder, self.bpmagUnc)
        StarCatalog_FullAddRpmag(builder, self.rpmag)
        StarCatalog_FullAddRpmagUnc(builder, self.rpmagUnc)
        StarCatalog_FullAddJmag(builder, self.jmag)
        StarCatalog_FullAddJmagUnc(builder, self.jmagUnc)
        StarCatalog_FullAddKmag(builder, self.kmag)
        StarCatalog_FullAddKmagUnc(builder, self.kmagUnc)
        StarCatalog_FullAddHmag(builder, self.hmag)
        StarCatalog_FullAddHmagUnc(builder, self.hmagUnc)
        StarCatalog_FullAddVarFlag(builder, self.varFlag)
        StarCatalog_FullAddMultFlag(builder, self.multFlag)
        StarCatalog_FullAddNeighborId(builder, self.neighborId)
        StarCatalog_FullAddNeighborFlag(builder, self.neighborFlag)
        StarCatalog_FullAddNeighborDistance(builder, self.neighborDistance)
        StarCatalog_FullAddShiftFlag(builder, self.shiftFlag)
        StarCatalog_FullAddShift(builder, self.shift)
        if self.createdAt is not None:
            StarCatalog_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            StarCatalog_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            StarCatalog_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            StarCatalog_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            StarCatalog_FullAddSource(builder, source)
        if self.origin is not None:
            StarCatalog_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            StarCatalog_FullAddOrigNetwork(builder, origNetwork)
        StarCatalog_FullAddDataMode(builder, self.dataMode)
        starCatalogFull = StarCatalog_FullEnd(builder)
        return starCatalogFull
