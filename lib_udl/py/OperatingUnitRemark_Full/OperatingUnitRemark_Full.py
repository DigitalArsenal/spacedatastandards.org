# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
class OperatingUnitRemark_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OperatingUnitRemark_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperatingUnitRemark_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OperatingUnitRemark_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x50\x45\x52", size_prefixed=size_prefixed)

    # OperatingUnitRemark_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # OperatingUnitRemark_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OperatingUnitRemark_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the operating unit to which this remark applies.
    # Example: /// Example: OperatingUnit-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OperatingUnitRemark_Full
    def IdOperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the unit remark record from the originating system.
    # Example: /// Example: 123456ABC
    # Constraints: Minimum length = 0, Maximum length = 36
    # OperatingUnitRemark_Full
    def AltRmkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the remark.
    # Example: /// Example: Remark name
    # Constraints: Minimum length = 0, Maximum length = 64
    # OperatingUnitRemark_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
    # Example: /// Example: Restriction
    # Constraints: Minimum length = 0, Maximum length = 64
    # OperatingUnitRemark_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The text of the remark.
    # Example: /// Example: This is a remark
    # Constraints: Minimum length = 1, Maximum length = 16384
    # OperatingUnitRemark_Full
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
    # Example: /// Example: M
    # Constraints: Minimum length = 0, Maximum length = 16
    # OperatingUnitRemark_Full
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OperatingUnitRemark_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OperatingUnitRemark_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OperatingUnitRemark_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OperatingUnitRemark_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OperatingUnitRemark_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OperatingUnitRemark_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OperatingUnitRemark_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def OperatingUnitRemark_FullStart(builder):
    builder.StartObject(15)

def Start(builder):
    OperatingUnitRemark_FullStart(builder)

def OperatingUnitRemark_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OperatingUnitRemark_FullAddId(builder, id)

def OperatingUnitRemark_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OperatingUnitRemark_FullAddClassificationMarking(builder, classificationMarking)

def OperatingUnitRemark_FullAddIdOperatingUnit(builder, idOperatingUnit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOperatingUnit), 0)

def AddIdOperatingUnit(builder, idOperatingUnit):
    OperatingUnitRemark_FullAddIdOperatingUnit(builder, idOperatingUnit)

def OperatingUnitRemark_FullAddAltRmkId(builder, altRmkId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altRmkId), 0)

def AddAltRmkId(builder, altRmkId):
    OperatingUnitRemark_FullAddAltRmkId(builder, altRmkId)

def OperatingUnitRemark_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OperatingUnitRemark_FullAddName(builder, name)

def OperatingUnitRemark_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    OperatingUnitRemark_FullAddType(builder, type)

def OperatingUnitRemark_FullAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    OperatingUnitRemark_FullAddText(builder, text)

def OperatingUnitRemark_FullAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def AddCode(builder, code):
    OperatingUnitRemark_FullAddCode(builder, code)

def OperatingUnitRemark_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OperatingUnitRemark_FullAddCreatedAt(builder, createdAt)

def OperatingUnitRemark_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OperatingUnitRemark_FullAddCreatedBy(builder, createdBy)

def OperatingUnitRemark_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OperatingUnitRemark_FullAddUpdatedAt(builder, updatedAt)

def OperatingUnitRemark_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OperatingUnitRemark_FullAddUpdatedBy(builder, updatedBy)

def OperatingUnitRemark_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OperatingUnitRemark_FullAddSource(builder, source)

def OperatingUnitRemark_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OperatingUnitRemark_FullAddOrigin(builder, origin)

def OperatingUnitRemark_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(14, dataMode, 0)

def AddDataMode(builder, dataMode):
    OperatingUnitRemark_FullAddDataMode(builder, dataMode)

def OperatingUnitRemark_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return OperatingUnitRemark_FullEnd(builder)


class OperatingUnitRemark_FullT(object):

    # OperatingUnitRemark_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOperatingUnit = None  # type: str
        self.altRmkId = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.text = None  # type: str
        self.code = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operatingUnitRemarkFull = OperatingUnitRemark_Full()
        operatingUnitRemarkFull.Init(buf, pos)
        return cls.InitFromObj(operatingUnitRemarkFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, operatingUnitRemarkFull):
        x = OperatingUnitRemark_FullT()
        x._UnPack(operatingUnitRemarkFull)
        return x

    # OperatingUnitRemark_FullT
    def _UnPack(self, operatingUnitRemarkFull):
        if operatingUnitRemarkFull is None:
            return
        self.id = operatingUnitRemarkFull.Id()
        self.classificationMarking = operatingUnitRemarkFull.ClassificationMarking()
        self.idOperatingUnit = operatingUnitRemarkFull.IdOperatingUnit()
        self.altRmkId = operatingUnitRemarkFull.AltRmkId()
        self.name = operatingUnitRemarkFull.Name()
        self.type = operatingUnitRemarkFull.Type()
        self.text = operatingUnitRemarkFull.Text()
        self.code = operatingUnitRemarkFull.Code()
        self.createdAt = operatingUnitRemarkFull.CreatedAt()
        self.createdBy = operatingUnitRemarkFull.CreatedBy()
        self.updatedAt = operatingUnitRemarkFull.UpdatedAt()
        self.updatedBy = operatingUnitRemarkFull.UpdatedBy()
        self.source = operatingUnitRemarkFull.Source()
        self.origin = operatingUnitRemarkFull.Origin()
        self.dataMode = operatingUnitRemarkFull.DataMode()

    # OperatingUnitRemark_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOperatingUnit is not None:
            idOperatingUnit = builder.CreateString(self.idOperatingUnit)
        if self.altRmkId is not None:
            altRmkId = builder.CreateString(self.altRmkId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.code is not None:
            code = builder.CreateString(self.code)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        OperatingUnitRemark_FullStart(builder)
        if self.id is not None:
            OperatingUnitRemark_FullAddId(builder, id)
        if self.classificationMarking is not None:
            OperatingUnitRemark_FullAddClassificationMarking(builder, classificationMarking)
        if self.idOperatingUnit is not None:
            OperatingUnitRemark_FullAddIdOperatingUnit(builder, idOperatingUnit)
        if self.altRmkId is not None:
            OperatingUnitRemark_FullAddAltRmkId(builder, altRmkId)
        if self.name is not None:
            OperatingUnitRemark_FullAddName(builder, name)
        if self.type is not None:
            OperatingUnitRemark_FullAddType(builder, type)
        if self.text is not None:
            OperatingUnitRemark_FullAddText(builder, text)
        if self.code is not None:
            OperatingUnitRemark_FullAddCode(builder, code)
        if self.createdAt is not None:
            OperatingUnitRemark_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OperatingUnitRemark_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OperatingUnitRemark_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OperatingUnitRemark_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            OperatingUnitRemark_FullAddSource(builder, source)
        if self.origin is not None:
            OperatingUnitRemark_FullAddOrigin(builder, origin)
        OperatingUnitRemark_FullAddDataMode(builder, self.dataMode)
        operatingUnitRemarkFull = OperatingUnitRemark_FullEnd(builder)
        return operatingUnitRemarkFull
