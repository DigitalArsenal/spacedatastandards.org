# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of aircraft mission location information for this aircraft mission tasking.
class AircraftMissionLocationTasking_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftMissionLocationTasking_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftMissionLocationTasking_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftMissionLocationTasking_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftMissionLocationTasking_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The start time of this mission in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-10-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftMissionLocationTasking_Full
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of this mission in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-10-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftMissionLocationTasking_Full
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
    # Example: /// Example: KLSV
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftMissionLocationTasking_Full
    def MsnLocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The altitude for this mission represented as hundreds of feet above MSL.
    # Example: /// Example: 210
    # Constraints: No constraints specified.
    # AircraftMissionLocationTasking_Full
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The code for the priority assigned to this mission.
    # Example: /// Example: 1A
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftMissionLocationTasking_Full
    def AirMsnPri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The radius of the circle around the location being reported in feet.
    # Example: /// Example: 1000
    # Constraints: No constraints specified.
    # AircraftMissionLocationTasking_Full
    def AreaGeoRad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The location name for this mission.
    # Example: /// Example: PT ALFA
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionLocationTasking_Full
    def MsnLocPtName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
    # Example: /// Example: 35.123
    # Constraints: No constraints specified.
    # AircraftMissionLocationTasking_Full
    def MsnLocPtLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
    # Example: /// Example: 79.01
    # Constraints: No constraints specified.
    # AircraftMissionLocationTasking_Full
    def MsnLocPtLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
    # Example: /// Example: 330T-PT ALFA-50NM
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftMissionLocationTasking_Full
    def MsnLocPtBarT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AircraftMissionLocationTasking_FullStart(builder):
    builder.StartObject(10)

def Start(builder):
    AircraftMissionLocationTasking_FullStart(builder)

def AircraftMissionLocationTasking_FullAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    AircraftMissionLocationTasking_FullAddStartTime(builder, startTime)

def AircraftMissionLocationTasking_FullAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    AircraftMissionLocationTasking_FullAddEndTime(builder, endTime)

def AircraftMissionLocationTasking_FullAddMsnLocName(builder, msnLocName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(msnLocName), 0)

def AddMsnLocName(builder, msnLocName):
    AircraftMissionLocationTasking_FullAddMsnLocName(builder, msnLocName)

def AircraftMissionLocationTasking_FullAddAlt(builder, alt):
    builder.PrependInt32Slot(3, alt, 0)

def AddAlt(builder, alt):
    AircraftMissionLocationTasking_FullAddAlt(builder, alt)

def AircraftMissionLocationTasking_FullAddAirMsnPri(builder, airMsnPri):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(airMsnPri), 0)

def AddAirMsnPri(builder, airMsnPri):
    AircraftMissionLocationTasking_FullAddAirMsnPri(builder, airMsnPri)

def AircraftMissionLocationTasking_FullAddAreaGeoRad(builder, areaGeoRad):
    builder.PrependInt32Slot(5, areaGeoRad, 0)

def AddAreaGeoRad(builder, areaGeoRad):
    AircraftMissionLocationTasking_FullAddAreaGeoRad(builder, areaGeoRad)

def AircraftMissionLocationTasking_FullAddMsnLocPtName(builder, msnLocPtName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(msnLocPtName), 0)

def AddMsnLocPtName(builder, msnLocPtName):
    AircraftMissionLocationTasking_FullAddMsnLocPtName(builder, msnLocPtName)

def AircraftMissionLocationTasking_FullAddMsnLocPtLat(builder, msnLocPtLat):
    builder.PrependFloat64Slot(7, msnLocPtLat, 0.0)

def AddMsnLocPtLat(builder, msnLocPtLat):
    AircraftMissionLocationTasking_FullAddMsnLocPtLat(builder, msnLocPtLat)

def AircraftMissionLocationTasking_FullAddMsnLocPtLon(builder, msnLocPtLon):
    builder.PrependFloat64Slot(8, msnLocPtLon, 0.0)

def AddMsnLocPtLon(builder, msnLocPtLon):
    AircraftMissionLocationTasking_FullAddMsnLocPtLon(builder, msnLocPtLon)

def AircraftMissionLocationTasking_FullAddMsnLocPtBarT(builder, msnLocPtBarT):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(msnLocPtBarT), 0)

def AddMsnLocPtBarT(builder, msnLocPtBarT):
    AircraftMissionLocationTasking_FullAddMsnLocPtBarT(builder, msnLocPtBarT)

def AircraftMissionLocationTasking_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftMissionLocationTasking_FullEnd(builder)


class AircraftMissionLocationTasking_FullT(object):

    # AircraftMissionLocationTasking_FullT
    def __init__(self):
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.msnLocName = None  # type: str
        self.alt = 0  # type: int
        self.airMsnPri = None  # type: str
        self.areaGeoRad = 0  # type: int
        self.msnLocPtName = None  # type: str
        self.msnLocPtLat = 0.0  # type: float
        self.msnLocPtLon = 0.0  # type: float
        self.msnLocPtBarT = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftMissionLocationTaskingFull = AircraftMissionLocationTasking_Full()
        aircraftMissionLocationTaskingFull.Init(buf, pos)
        return cls.InitFromObj(aircraftMissionLocationTaskingFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftMissionLocationTaskingFull):
        x = AircraftMissionLocationTasking_FullT()
        x._UnPack(aircraftMissionLocationTaskingFull)
        return x

    # AircraftMissionLocationTasking_FullT
    def _UnPack(self, aircraftMissionLocationTaskingFull):
        if aircraftMissionLocationTaskingFull is None:
            return
        self.startTime = aircraftMissionLocationTaskingFull.StartTime()
        self.endTime = aircraftMissionLocationTaskingFull.EndTime()
        self.msnLocName = aircraftMissionLocationTaskingFull.MsnLocName()
        self.alt = aircraftMissionLocationTaskingFull.Alt()
        self.airMsnPri = aircraftMissionLocationTaskingFull.AirMsnPri()
        self.areaGeoRad = aircraftMissionLocationTaskingFull.AreaGeoRad()
        self.msnLocPtName = aircraftMissionLocationTaskingFull.MsnLocPtName()
        self.msnLocPtLat = aircraftMissionLocationTaskingFull.MsnLocPtLat()
        self.msnLocPtLon = aircraftMissionLocationTaskingFull.MsnLocPtLon()
        self.msnLocPtBarT = aircraftMissionLocationTaskingFull.MsnLocPtBarT()

    # AircraftMissionLocationTasking_FullT
    def Pack(self, builder):
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.msnLocName is not None:
            msnLocName = builder.CreateString(self.msnLocName)
        if self.airMsnPri is not None:
            airMsnPri = builder.CreateString(self.airMsnPri)
        if self.msnLocPtName is not None:
            msnLocPtName = builder.CreateString(self.msnLocPtName)
        if self.msnLocPtBarT is not None:
            msnLocPtBarT = builder.CreateString(self.msnLocPtBarT)
        AircraftMissionLocationTasking_FullStart(builder)
        if self.startTime is not None:
            AircraftMissionLocationTasking_FullAddStartTime(builder, startTime)
        if self.endTime is not None:
            AircraftMissionLocationTasking_FullAddEndTime(builder, endTime)
        if self.msnLocName is not None:
            AircraftMissionLocationTasking_FullAddMsnLocName(builder, msnLocName)
        AircraftMissionLocationTasking_FullAddAlt(builder, self.alt)
        if self.airMsnPri is not None:
            AircraftMissionLocationTasking_FullAddAirMsnPri(builder, airMsnPri)
        AircraftMissionLocationTasking_FullAddAreaGeoRad(builder, self.areaGeoRad)
        if self.msnLocPtName is not None:
            AircraftMissionLocationTasking_FullAddMsnLocPtName(builder, msnLocPtName)
        AircraftMissionLocationTasking_FullAddMsnLocPtLat(builder, self.msnLocPtLat)
        AircraftMissionLocationTasking_FullAddMsnLocPtLon(builder, self.msnLocPtLon)
        if self.msnLocPtBarT is not None:
            AircraftMissionLocationTasking_FullAddMsnLocPtBarT(builder, msnLocPtBarT)
        aircraftMissionLocationTaskingFull = AircraftMissionLocationTasking_FullEnd(builder)
        return aircraftMissionLocationTaskingFull
