# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details for a navigation payload from  Seradata.
class SeradataNavigation_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeradataNavigation_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeradataNavigation_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SeradataNavigation_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x52\x41", size_prefixed=size_prefixed)

    # SeradataNavigation_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SERADATANAVIGATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataNavigation_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SeradataNavigation_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the parent Navigation record.
    # Example: /// Example: idNavigation
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataNavigation_Abridged
    def IdNavigation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: spacecraftId
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataNavigation_Abridged
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hosted for company/Organization Id.
    # Example: /// Example: hostedForCompanyOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataNavigation_Abridged
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Manufacturer Organization Id.
    # Example: /// Example: manufacturerOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataNavigation_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Navigation payload type, e.g. WAAS, GAGAN, etc.
    # Example: /// Example: WAAS
    # Constraints: Minimum length = 0, Maximum length = 100
    # SeradataNavigation_Abridged
    def PayloadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Modes of operation.
    # Example: /// Example: Military
    # Constraints: Minimum length = 0, Maximum length = 100
    # SeradataNavigation_Abridged
    def Modes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Frequency for this payload.
    # Example: /// Example: 1234
    # Constraints: Minimum length = 0, Maximum length = 100
    # SeradataNavigation_Abridged
    def ModeFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Location accuracy in meters.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataNavigation_Abridged
    def LocationAccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: partnerSpacecraftId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataNavigation_Abridged
    def PartnerSpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Area of coverage, e.g. Worldwide, India, etc.
    # Example: /// Example: Worldwide
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataNavigation_Abridged
    def AreaCoverage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Payload notes.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SeradataNavigation_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor name from Seradata, e.g. WAAS GEO-5, etc.
    # Example: /// Example: WAAS GEO-5
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataNavigation_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
    # Example: /// Example: Rubidium
    # Constraints: Minimum length = 0, Maximum length = 20
    # SeradataNavigation_Abridged
    def ClockType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataNavigation_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataNavigation_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataNavigation_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataNavigation_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataNavigation_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataNavigation_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SeradataNavigation_AbridgedStart(builder):
    builder.StartObject(21)

def Start(builder):
    SeradataNavigation_AbridgedStart(builder)

def SeradataNavigation_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SeradataNavigation_AbridgedAddId(builder, id)

def SeradataNavigation_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SeradataNavigation_AbridgedAddClassificationMarking(builder, classificationMarking)

def SeradataNavigation_AbridgedAddIdNavigation(builder, idNavigation):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idNavigation), 0)

def AddIdNavigation(builder, idNavigation):
    SeradataNavigation_AbridgedAddIdNavigation(builder, idNavigation)

def SeradataNavigation_AbridgedAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    SeradataNavigation_AbridgedAddSpacecraftId(builder, spacecraftId)

def SeradataNavigation_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    SeradataNavigation_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def SeradataNavigation_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SeradataNavigation_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def SeradataNavigation_AbridgedAddPayloadType(builder, payloadType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(payloadType), 0)

def AddPayloadType(builder, payloadType):
    SeradataNavigation_AbridgedAddPayloadType(builder, payloadType)

def SeradataNavigation_AbridgedAddModes(builder, modes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(modes), 0)

def AddModes(builder, modes):
    SeradataNavigation_AbridgedAddModes(builder, modes)

def SeradataNavigation_AbridgedAddModeFrequency(builder, modeFrequency):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(modeFrequency), 0)

def AddModeFrequency(builder, modeFrequency):
    SeradataNavigation_AbridgedAddModeFrequency(builder, modeFrequency)

def SeradataNavigation_AbridgedAddLocationAccuracy(builder, locationAccuracy):
    builder.PrependFloat64Slot(9, locationAccuracy, 0.0)

def AddLocationAccuracy(builder, locationAccuracy):
    SeradataNavigation_AbridgedAddLocationAccuracy(builder, locationAccuracy)

def SeradataNavigation_AbridgedAddPartnerSpacecraftId(builder, partnerSpacecraftId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(partnerSpacecraftId), 0)

def AddPartnerSpacecraftId(builder, partnerSpacecraftId):
    SeradataNavigation_AbridgedAddPartnerSpacecraftId(builder, partnerSpacecraftId)

def SeradataNavigation_AbridgedAddAreaCoverage(builder, areaCoverage):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(areaCoverage), 0)

def AddAreaCoverage(builder, areaCoverage):
    SeradataNavigation_AbridgedAddAreaCoverage(builder, areaCoverage)

def SeradataNavigation_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    SeradataNavigation_AbridgedAddNotes(builder, notes)

def SeradataNavigation_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SeradataNavigation_AbridgedAddName(builder, name)

def SeradataNavigation_AbridgedAddClockType(builder, clockType):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(clockType), 0)

def AddClockType(builder, clockType):
    SeradataNavigation_AbridgedAddClockType(builder, clockType)

def SeradataNavigation_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SeradataNavigation_AbridgedAddCreatedAt(builder, createdAt)

def SeradataNavigation_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SeradataNavigation_AbridgedAddCreatedBy(builder, createdBy)

def SeradataNavigation_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SeradataNavigation_AbridgedAddSource(builder, source)

def SeradataNavigation_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SeradataNavigation_AbridgedAddOrigin(builder, origin)

def SeradataNavigation_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SeradataNavigation_AbridgedAddOrigNetwork(builder, origNetwork)

def SeradataNavigation_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(20, dataMode, 0)

def AddDataMode(builder, dataMode):
    SeradataNavigation_AbridgedAddDataMode(builder, dataMode)

def SeradataNavigation_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SeradataNavigation_AbridgedEnd(builder)


class SeradataNavigation_AbridgedT(object):

    # SeradataNavigation_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idNavigation = None  # type: str
        self.spacecraftId = None  # type: str
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.payloadType = None  # type: str
        self.modes = None  # type: str
        self.modeFrequency = None  # type: str
        self.locationAccuracy = 0.0  # type: float
        self.partnerSpacecraftId = None  # type: str
        self.areaCoverage = None  # type: str
        self.notes = None  # type: str
        self.name = None  # type: str
        self.clockType = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seradataNavigationAbridged = SeradataNavigation_Abridged()
        seradataNavigationAbridged.Init(buf, pos)
        return cls.InitFromObj(seradataNavigationAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seradataNavigationAbridged):
        x = SeradataNavigation_AbridgedT()
        x._UnPack(seradataNavigationAbridged)
        return x

    # SeradataNavigation_AbridgedT
    def _UnPack(self, seradataNavigationAbridged):
        if seradataNavigationAbridged is None:
            return
        self.id = seradataNavigationAbridged.Id()
        self.classificationMarking = seradataNavigationAbridged.ClassificationMarking()
        self.idNavigation = seradataNavigationAbridged.IdNavigation()
        self.spacecraftId = seradataNavigationAbridged.SpacecraftId()
        self.hostedForCompanyOrgId = seradataNavigationAbridged.HostedForCompanyOrgId()
        self.manufacturerOrgId = seradataNavigationAbridged.ManufacturerOrgId()
        self.payloadType = seradataNavigationAbridged.PayloadType()
        self.modes = seradataNavigationAbridged.Modes()
        self.modeFrequency = seradataNavigationAbridged.ModeFrequency()
        self.locationAccuracy = seradataNavigationAbridged.LocationAccuracy()
        self.partnerSpacecraftId = seradataNavigationAbridged.PartnerSpacecraftId()
        self.areaCoverage = seradataNavigationAbridged.AreaCoverage()
        self.notes = seradataNavigationAbridged.Notes()
        self.name = seradataNavigationAbridged.Name()
        self.clockType = seradataNavigationAbridged.ClockType()
        self.createdAt = seradataNavigationAbridged.CreatedAt()
        self.createdBy = seradataNavigationAbridged.CreatedBy()
        self.source = seradataNavigationAbridged.Source()
        self.origin = seradataNavigationAbridged.Origin()
        self.origNetwork = seradataNavigationAbridged.OrigNetwork()
        self.dataMode = seradataNavigationAbridged.DataMode()

    # SeradataNavigation_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idNavigation is not None:
            idNavigation = builder.CreateString(self.idNavigation)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.payloadType is not None:
            payloadType = builder.CreateString(self.payloadType)
        if self.modes is not None:
            modes = builder.CreateString(self.modes)
        if self.modeFrequency is not None:
            modeFrequency = builder.CreateString(self.modeFrequency)
        if self.partnerSpacecraftId is not None:
            partnerSpacecraftId = builder.CreateString(self.partnerSpacecraftId)
        if self.areaCoverage is not None:
            areaCoverage = builder.CreateString(self.areaCoverage)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.clockType is not None:
            clockType = builder.CreateString(self.clockType)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SeradataNavigation_AbridgedStart(builder)
        if self.id is not None:
            SeradataNavigation_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            SeradataNavigation_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idNavigation is not None:
            SeradataNavigation_AbridgedAddIdNavigation(builder, idNavigation)
        if self.spacecraftId is not None:
            SeradataNavigation_AbridgedAddSpacecraftId(builder, spacecraftId)
        if self.hostedForCompanyOrgId is not None:
            SeradataNavigation_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            SeradataNavigation_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.payloadType is not None:
            SeradataNavigation_AbridgedAddPayloadType(builder, payloadType)
        if self.modes is not None:
            SeradataNavigation_AbridgedAddModes(builder, modes)
        if self.modeFrequency is not None:
            SeradataNavigation_AbridgedAddModeFrequency(builder, modeFrequency)
        SeradataNavigation_AbridgedAddLocationAccuracy(builder, self.locationAccuracy)
        if self.partnerSpacecraftId is not None:
            SeradataNavigation_AbridgedAddPartnerSpacecraftId(builder, partnerSpacecraftId)
        if self.areaCoverage is not None:
            SeradataNavigation_AbridgedAddAreaCoverage(builder, areaCoverage)
        if self.notes is not None:
            SeradataNavigation_AbridgedAddNotes(builder, notes)
        if self.name is not None:
            SeradataNavigation_AbridgedAddName(builder, name)
        if self.clockType is not None:
            SeradataNavigation_AbridgedAddClockType(builder, clockType)
        if self.createdAt is not None:
            SeradataNavigation_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SeradataNavigation_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SeradataNavigation_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SeradataNavigation_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SeradataNavigation_AbridgedAddOrigNetwork(builder, origNetwork)
        SeradataNavigation_AbridgedAddDataMode(builder, self.dataMode)
        seradataNavigationAbridged = SeradataNavigation_AbridgedEnd(builder)
        return seradataNavigationAbridged
