# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.
class Manifold_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Manifold_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsManifold_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Manifold_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x41\x4E\x49", size_prefixed=size_prefixed)

    # Manifold_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MANIFOLD-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Manifold_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the parent object of interest.
    # Example: /// Example: OBJECTOFINTEREST-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Manifold_Ingest
    def IdObjectOfInterest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Manifold_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.
    # Example: /// Example: PENDING
    # Constraints: Minimum length = 0, Maximum length = 64
    # Manifold_Ingest
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Weight or probability of this manifold for prioritization purposes, between 0 and 1.
    # Example: /// Example: 0.3
    # Constraints: No constraints specified.
    # Manifold_Ingest
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Applied delta V for this manifold's calculations, in km/sec.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # Manifold_Ingest
    def DeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Applied delta V duration for this manifold's calculations in seconds.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # Manifold_Ingest
    def DeltaT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Manifold_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Manifold_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Manifold_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Manifold_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Manifold_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Manifold_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Manifold_IngestStart(builder):
    builder.StartObject(13)

def Start(builder):
    Manifold_IngestStart(builder)

def Manifold_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Manifold_IngestAddId(builder, id)

def Manifold_IngestAddIdObjectOfInterest(builder, idObjectOfInterest):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idObjectOfInterest), 0)

def AddIdObjectOfInterest(builder, idObjectOfInterest):
    Manifold_IngestAddIdObjectOfInterest(builder, idObjectOfInterest)

def Manifold_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Manifold_IngestAddClassificationMarking(builder, classificationMarking)

def Manifold_IngestAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    Manifold_IngestAddStatus(builder, status)

def Manifold_IngestAddWeight(builder, weight):
    builder.PrependFloat64Slot(4, weight, 0.0)

def AddWeight(builder, weight):
    Manifold_IngestAddWeight(builder, weight)

def Manifold_IngestAddDeltaV(builder, deltaV):
    builder.PrependFloat64Slot(5, deltaV, 0.0)

def AddDeltaV(builder, deltaV):
    Manifold_IngestAddDeltaV(builder, deltaV)

def Manifold_IngestAddDeltaT(builder, deltaT):
    builder.PrependFloat64Slot(6, deltaT, 0.0)

def AddDeltaT(builder, deltaT):
    Manifold_IngestAddDeltaT(builder, deltaT)

def Manifold_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Manifold_IngestAddCreatedAt(builder, createdAt)

def Manifold_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Manifold_IngestAddCreatedBy(builder, createdBy)

def Manifold_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Manifold_IngestAddSource(builder, source)

def Manifold_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Manifold_IngestAddOrigin(builder, origin)

def Manifold_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(11, dataMode, 0)

def AddDataMode(builder, dataMode):
    Manifold_IngestAddDataMode(builder, dataMode)

def Manifold_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Manifold_IngestAddOrigNetwork(builder, origNetwork)

def Manifold_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Manifold_IngestEnd(builder)


class Manifold_IngestT(object):

    # Manifold_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.idObjectOfInterest = None  # type: str
        self.classificationMarking = None  # type: str
        self.status = None  # type: str
        self.weight = 0.0  # type: float
        self.deltaV = 0.0  # type: float
        self.deltaT = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        manifoldIngest = Manifold_Ingest()
        manifoldIngest.Init(buf, pos)
        return cls.InitFromObj(manifoldIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, manifoldIngest):
        x = Manifold_IngestT()
        x._UnPack(manifoldIngest)
        return x

    # Manifold_IngestT
    def _UnPack(self, manifoldIngest):
        if manifoldIngest is None:
            return
        self.id = manifoldIngest.Id()
        self.idObjectOfInterest = manifoldIngest.IdObjectOfInterest()
        self.classificationMarking = manifoldIngest.ClassificationMarking()
        self.status = manifoldIngest.Status()
        self.weight = manifoldIngest.Weight()
        self.deltaV = manifoldIngest.DeltaV()
        self.deltaT = manifoldIngest.DeltaT()
        self.createdAt = manifoldIngest.CreatedAt()
        self.createdBy = manifoldIngest.CreatedBy()
        self.source = manifoldIngest.Source()
        self.origin = manifoldIngest.Origin()
        self.dataMode = manifoldIngest.DataMode()
        self.origNetwork = manifoldIngest.OrigNetwork()

    # Manifold_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idObjectOfInterest is not None:
            idObjectOfInterest = builder.CreateString(self.idObjectOfInterest)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Manifold_IngestStart(builder)
        if self.id is not None:
            Manifold_IngestAddId(builder, id)
        if self.idObjectOfInterest is not None:
            Manifold_IngestAddIdObjectOfInterest(builder, idObjectOfInterest)
        if self.classificationMarking is not None:
            Manifold_IngestAddClassificationMarking(builder, classificationMarking)
        if self.status is not None:
            Manifold_IngestAddStatus(builder, status)
        Manifold_IngestAddWeight(builder, self.weight)
        Manifold_IngestAddDeltaV(builder, self.deltaV)
        Manifold_IngestAddDeltaT(builder, self.deltaT)
        if self.createdAt is not None:
            Manifold_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Manifold_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Manifold_IngestAddSource(builder, source)
        if self.origin is not None:
            Manifold_IngestAddOrigin(builder, origin)
        Manifold_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            Manifold_IngestAddOrigNetwork(builder, origNetwork)
        manifoldIngest = Manifold_IngestEnd(builder)
        return manifoldIngest
