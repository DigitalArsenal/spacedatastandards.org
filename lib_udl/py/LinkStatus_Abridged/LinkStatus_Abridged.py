# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Captures link status.
class LinkStatus_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinkStatus_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinkStatus_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LinkStatus_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x49\x4E\x4B", size_prefixed=size_prefixed)

    # LinkStatus_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LINKSTATUS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LinkStatus_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LinkStatus_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
    # Example: /// Example: REF-ONORBIT1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LinkStatus_Abridged
    def IdOnOrbit1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
    # Example: /// Example: REF-ONORBIT2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LinkStatus_Abridged
    def IdOnOrbit2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def LinkStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def LinkStopTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
    # Example: /// Example: Fornax
    # Constraints: Minimum length = 0, Maximum length = 128
    # LinkStatus_Abridged
    def Constellation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name or description of the link.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 1, Maximum length = 64
    # LinkStatus_Abridged
    def LinkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of the link.
    # Example: /// Example: Example link
    # Constraints: Minimum length = 0, Maximum length = 64
    # LinkStatus_Abridged
    def LinkType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
    # Example: /// Example: MIL-KA
    # Constraints: Minimum length = 0, Maximum length = 24
    # LinkStatus_Abridged
    def Band(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
    # Example: /// Example: REF-BEAM1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LinkStatus_Abridged
    def IdBeam1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name or description of link endpoint-1, corresponding to beam-1.
    # Example: /// Example: Example endpoint
    # Constraints: Minimum length = 1, Maximum length = 64
    # LinkStatus_Abridged
    def EndPoint1Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def EndPoint1Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 80.23
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def EndPoint1Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
    # Example: /// Example: REF-BEAM2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LinkStatus_Abridged
    def IdBeam2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name or description of link endpoint-2, corresponding to beam-2.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 1, Maximum length = 64
    # LinkStatus_Abridged
    def EndPoint2Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def EndPoint2Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 80.23
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def EndPoint2Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The endpoint-1 to endpoint-2 data rate, in kbps.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def DataRate1To2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The endpoint-2 to endpoint-1 data rate, in kbps.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def DataRate2To1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
    # Example: /// Example: DEGRADED-WEATHER
    # Constraints: Minimum length = 0, Maximum length = 24
    # LinkStatus_Abridged
    def LinkState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The SYSCAP mission status of the system(s) forming the link.
    # Example: /// Example: Example status
    # Constraints: Minimum length = 0, Maximum length = 24
    # LinkStatus_Abridged
    def SysCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The OPSCAP mission status of the system(s) forming the link.
    # Example: /// Example: Example status
    # Constraints: Minimum length = 0, Maximum length = 24
    # LinkStatus_Abridged
    def OpsCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LinkStatus_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LinkStatus_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LinkStatus_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LinkStatus_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LinkStatus_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Satellite/catalog number of the target on-orbit primary object.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def SatNo1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Satellite/catalog number of the target on-orbit secondary object.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # LinkStatus_Abridged
    def SatNo2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LinkStatus_AbridgedStart(builder):
    builder.StartObject(31)

def Start(builder):
    LinkStatus_AbridgedStart(builder)

def LinkStatus_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LinkStatus_AbridgedAddId(builder, id)

def LinkStatus_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LinkStatus_AbridgedAddClassificationMarking(builder, classificationMarking)

def LinkStatus_AbridgedAddIdOnOrbit1(builder, idOnOrbit1):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit1), 0)

def AddIdOnOrbit1(builder, idOnOrbit1):
    LinkStatus_AbridgedAddIdOnOrbit1(builder, idOnOrbit1)

def LinkStatus_AbridgedAddIdOnOrbit2(builder, idOnOrbit2):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit2), 0)

def AddIdOnOrbit2(builder, idOnOrbit2):
    LinkStatus_AbridgedAddIdOnOrbit2(builder, idOnOrbit2)

def LinkStatus_AbridgedAddLinkStartTime(builder, linkStartTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(linkStartTime), 0)

def AddLinkStartTime(builder, linkStartTime):
    LinkStatus_AbridgedAddLinkStartTime(builder, linkStartTime)

def LinkStatus_AbridgedAddLinkStopTime(builder, linkStopTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(linkStopTime), 0)

def AddLinkStopTime(builder, linkStopTime):
    LinkStatus_AbridgedAddLinkStopTime(builder, linkStopTime)

def LinkStatus_AbridgedAddConstellation(builder, constellation):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(constellation), 0)

def AddConstellation(builder, constellation):
    LinkStatus_AbridgedAddConstellation(builder, constellation)

def LinkStatus_AbridgedAddLinkName(builder, linkName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(linkName), 0)

def AddLinkName(builder, linkName):
    LinkStatus_AbridgedAddLinkName(builder, linkName)

def LinkStatus_AbridgedAddLinkType(builder, linkType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(linkType), 0)

def AddLinkType(builder, linkType):
    LinkStatus_AbridgedAddLinkType(builder, linkType)

def LinkStatus_AbridgedAddBand(builder, band):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(band), 0)

def AddBand(builder, band):
    LinkStatus_AbridgedAddBand(builder, band)

def LinkStatus_AbridgedAddIdBeam1(builder, idBeam1):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(idBeam1), 0)

def AddIdBeam1(builder, idBeam1):
    LinkStatus_AbridgedAddIdBeam1(builder, idBeam1)

def LinkStatus_AbridgedAddEndPoint1Name(builder, endPoint1Name):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(endPoint1Name), 0)

def AddEndPoint1Name(builder, endPoint1Name):
    LinkStatus_AbridgedAddEndPoint1Name(builder, endPoint1Name)

def LinkStatus_AbridgedAddEndPoint1Lat(builder, endPoint1Lat):
    builder.PrependFloat64Slot(12, endPoint1Lat, 0.0)

def AddEndPoint1Lat(builder, endPoint1Lat):
    LinkStatus_AbridgedAddEndPoint1Lat(builder, endPoint1Lat)

def LinkStatus_AbridgedAddEndPoint1Lon(builder, endPoint1Lon):
    builder.PrependFloat64Slot(13, endPoint1Lon, 0.0)

def AddEndPoint1Lon(builder, endPoint1Lon):
    LinkStatus_AbridgedAddEndPoint1Lon(builder, endPoint1Lon)

def LinkStatus_AbridgedAddIdBeam2(builder, idBeam2):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(idBeam2), 0)

def AddIdBeam2(builder, idBeam2):
    LinkStatus_AbridgedAddIdBeam2(builder, idBeam2)

def LinkStatus_AbridgedAddEndPoint2Name(builder, endPoint2Name):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(endPoint2Name), 0)

def AddEndPoint2Name(builder, endPoint2Name):
    LinkStatus_AbridgedAddEndPoint2Name(builder, endPoint2Name)

def LinkStatus_AbridgedAddEndPoint2Lat(builder, endPoint2Lat):
    builder.PrependFloat64Slot(16, endPoint2Lat, 0.0)

def AddEndPoint2Lat(builder, endPoint2Lat):
    LinkStatus_AbridgedAddEndPoint2Lat(builder, endPoint2Lat)

def LinkStatus_AbridgedAddEndPoint2Lon(builder, endPoint2Lon):
    builder.PrependFloat64Slot(17, endPoint2Lon, 0.0)

def AddEndPoint2Lon(builder, endPoint2Lon):
    LinkStatus_AbridgedAddEndPoint2Lon(builder, endPoint2Lon)

def LinkStatus_AbridgedAddDataRate1To2(builder, dataRate1To2):
    builder.PrependFloat64Slot(18, dataRate1To2, 0.0)

def AddDataRate1To2(builder, dataRate1To2):
    LinkStatus_AbridgedAddDataRate1To2(builder, dataRate1To2)

def LinkStatus_AbridgedAddDataRate2To1(builder, dataRate2To1):
    builder.PrependFloat64Slot(19, dataRate2To1, 0.0)

def AddDataRate2To1(builder, dataRate2To1):
    LinkStatus_AbridgedAddDataRate2To1(builder, dataRate2To1)

def LinkStatus_AbridgedAddLinkState(builder, linkState):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(linkState), 0)

def AddLinkState(builder, linkState):
    LinkStatus_AbridgedAddLinkState(builder, linkState)

def LinkStatus_AbridgedAddSysCap(builder, sysCap):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(sysCap), 0)

def AddSysCap(builder, sysCap):
    LinkStatus_AbridgedAddSysCap(builder, sysCap)

def LinkStatus_AbridgedAddOpsCap(builder, opsCap):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(opsCap), 0)

def AddOpsCap(builder, opsCap):
    LinkStatus_AbridgedAddOpsCap(builder, opsCap)

def LinkStatus_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LinkStatus_AbridgedAddCreatedAt(builder, createdAt)

def LinkStatus_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LinkStatus_AbridgedAddCreatedBy(builder, createdBy)

def LinkStatus_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LinkStatus_AbridgedAddSource(builder, source)

def LinkStatus_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LinkStatus_AbridgedAddOrigin(builder, origin)

def LinkStatus_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LinkStatus_AbridgedAddOrigNetwork(builder, origNetwork)

def LinkStatus_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(28, dataMode, 0)

def AddDataMode(builder, dataMode):
    LinkStatus_AbridgedAddDataMode(builder, dataMode)

def LinkStatus_AbridgedAddSatNo1(builder, satNo1):
    builder.PrependInt32Slot(29, satNo1, 0)

def AddSatNo1(builder, satNo1):
    LinkStatus_AbridgedAddSatNo1(builder, satNo1)

def LinkStatus_AbridgedAddSatNo2(builder, satNo2):
    builder.PrependInt32Slot(30, satNo2, 0)

def AddSatNo2(builder, satNo2):
    LinkStatus_AbridgedAddSatNo2(builder, satNo2)

def LinkStatus_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return LinkStatus_AbridgedEnd(builder)


class LinkStatus_AbridgedT(object):

    # LinkStatus_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit1 = None  # type: str
        self.idOnOrbit2 = None  # type: str
        self.linkStartTime = None  # type: str
        self.linkStopTime = None  # type: str
        self.constellation = None  # type: str
        self.linkName = None  # type: str
        self.linkType = None  # type: str
        self.band = None  # type: str
        self.idBeam1 = None  # type: str
        self.endPoint1Name = None  # type: str
        self.endPoint1Lat = 0.0  # type: float
        self.endPoint1Lon = 0.0  # type: float
        self.idBeam2 = None  # type: str
        self.endPoint2Name = None  # type: str
        self.endPoint2Lat = 0.0  # type: float
        self.endPoint2Lon = 0.0  # type: float
        self.dataRate1To2 = 0.0  # type: float
        self.dataRate2To1 = 0.0  # type: float
        self.linkState = None  # type: str
        self.sysCap = None  # type: str
        self.opsCap = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.satNo1 = 0  # type: int
        self.satNo2 = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linkStatusAbridged = LinkStatus_Abridged()
        linkStatusAbridged.Init(buf, pos)
        return cls.InitFromObj(linkStatusAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, linkStatusAbridged):
        x = LinkStatus_AbridgedT()
        x._UnPack(linkStatusAbridged)
        return x

    # LinkStatus_AbridgedT
    def _UnPack(self, linkStatusAbridged):
        if linkStatusAbridged is None:
            return
        self.id = linkStatusAbridged.Id()
        self.classificationMarking = linkStatusAbridged.ClassificationMarking()
        self.idOnOrbit1 = linkStatusAbridged.IdOnOrbit1()
        self.idOnOrbit2 = linkStatusAbridged.IdOnOrbit2()
        self.linkStartTime = linkStatusAbridged.LinkStartTime()
        self.linkStopTime = linkStatusAbridged.LinkStopTime()
        self.constellation = linkStatusAbridged.Constellation()
        self.linkName = linkStatusAbridged.LinkName()
        self.linkType = linkStatusAbridged.LinkType()
        self.band = linkStatusAbridged.Band()
        self.idBeam1 = linkStatusAbridged.IdBeam1()
        self.endPoint1Name = linkStatusAbridged.EndPoint1Name()
        self.endPoint1Lat = linkStatusAbridged.EndPoint1Lat()
        self.endPoint1Lon = linkStatusAbridged.EndPoint1Lon()
        self.idBeam2 = linkStatusAbridged.IdBeam2()
        self.endPoint2Name = linkStatusAbridged.EndPoint2Name()
        self.endPoint2Lat = linkStatusAbridged.EndPoint2Lat()
        self.endPoint2Lon = linkStatusAbridged.EndPoint2Lon()
        self.dataRate1To2 = linkStatusAbridged.DataRate1To2()
        self.dataRate2To1 = linkStatusAbridged.DataRate2To1()
        self.linkState = linkStatusAbridged.LinkState()
        self.sysCap = linkStatusAbridged.SysCap()
        self.opsCap = linkStatusAbridged.OpsCap()
        self.createdAt = linkStatusAbridged.CreatedAt()
        self.createdBy = linkStatusAbridged.CreatedBy()
        self.source = linkStatusAbridged.Source()
        self.origin = linkStatusAbridged.Origin()
        self.origNetwork = linkStatusAbridged.OrigNetwork()
        self.dataMode = linkStatusAbridged.DataMode()
        self.satNo1 = linkStatusAbridged.SatNo1()
        self.satNo2 = linkStatusAbridged.SatNo2()

    # LinkStatus_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit1 is not None:
            idOnOrbit1 = builder.CreateString(self.idOnOrbit1)
        if self.idOnOrbit2 is not None:
            idOnOrbit2 = builder.CreateString(self.idOnOrbit2)
        if self.linkStartTime is not None:
            linkStartTime = builder.CreateString(self.linkStartTime)
        if self.linkStopTime is not None:
            linkStopTime = builder.CreateString(self.linkStopTime)
        if self.constellation is not None:
            constellation = builder.CreateString(self.constellation)
        if self.linkName is not None:
            linkName = builder.CreateString(self.linkName)
        if self.linkType is not None:
            linkType = builder.CreateString(self.linkType)
        if self.band is not None:
            band = builder.CreateString(self.band)
        if self.idBeam1 is not None:
            idBeam1 = builder.CreateString(self.idBeam1)
        if self.endPoint1Name is not None:
            endPoint1Name = builder.CreateString(self.endPoint1Name)
        if self.idBeam2 is not None:
            idBeam2 = builder.CreateString(self.idBeam2)
        if self.endPoint2Name is not None:
            endPoint2Name = builder.CreateString(self.endPoint2Name)
        if self.linkState is not None:
            linkState = builder.CreateString(self.linkState)
        if self.sysCap is not None:
            sysCap = builder.CreateString(self.sysCap)
        if self.opsCap is not None:
            opsCap = builder.CreateString(self.opsCap)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        LinkStatus_AbridgedStart(builder)
        if self.id is not None:
            LinkStatus_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            LinkStatus_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit1 is not None:
            LinkStatus_AbridgedAddIdOnOrbit1(builder, idOnOrbit1)
        if self.idOnOrbit2 is not None:
            LinkStatus_AbridgedAddIdOnOrbit2(builder, idOnOrbit2)
        if self.linkStartTime is not None:
            LinkStatus_AbridgedAddLinkStartTime(builder, linkStartTime)
        if self.linkStopTime is not None:
            LinkStatus_AbridgedAddLinkStopTime(builder, linkStopTime)
        if self.constellation is not None:
            LinkStatus_AbridgedAddConstellation(builder, constellation)
        if self.linkName is not None:
            LinkStatus_AbridgedAddLinkName(builder, linkName)
        if self.linkType is not None:
            LinkStatus_AbridgedAddLinkType(builder, linkType)
        if self.band is not None:
            LinkStatus_AbridgedAddBand(builder, band)
        if self.idBeam1 is not None:
            LinkStatus_AbridgedAddIdBeam1(builder, idBeam1)
        if self.endPoint1Name is not None:
            LinkStatus_AbridgedAddEndPoint1Name(builder, endPoint1Name)
        LinkStatus_AbridgedAddEndPoint1Lat(builder, self.endPoint1Lat)
        LinkStatus_AbridgedAddEndPoint1Lon(builder, self.endPoint1Lon)
        if self.idBeam2 is not None:
            LinkStatus_AbridgedAddIdBeam2(builder, idBeam2)
        if self.endPoint2Name is not None:
            LinkStatus_AbridgedAddEndPoint2Name(builder, endPoint2Name)
        LinkStatus_AbridgedAddEndPoint2Lat(builder, self.endPoint2Lat)
        LinkStatus_AbridgedAddEndPoint2Lon(builder, self.endPoint2Lon)
        LinkStatus_AbridgedAddDataRate1To2(builder, self.dataRate1To2)
        LinkStatus_AbridgedAddDataRate2To1(builder, self.dataRate2To1)
        if self.linkState is not None:
            LinkStatus_AbridgedAddLinkState(builder, linkState)
        if self.sysCap is not None:
            LinkStatus_AbridgedAddSysCap(builder, sysCap)
        if self.opsCap is not None:
            LinkStatus_AbridgedAddOpsCap(builder, opsCap)
        if self.createdAt is not None:
            LinkStatus_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LinkStatus_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            LinkStatus_AbridgedAddSource(builder, source)
        if self.origin is not None:
            LinkStatus_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            LinkStatus_AbridgedAddOrigNetwork(builder, origNetwork)
        LinkStatus_AbridgedAddDataMode(builder, self.dataMode)
        LinkStatus_AbridgedAddSatNo1(builder, self.satNo1)
        LinkStatus_AbridgedAddSatNo2(builder, self.satNo2)
        linkStatusAbridged = LinkStatus_AbridgedEnd(builder)
        return linkStatusAbridged
