# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.
class SolarArray_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SolarArray_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSolarArray_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SolarArray_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4F\x4C\x41", size_prefixed=size_prefixed)

    # SolarArray_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SOLARARRAY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SolarArray_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar Array name.
    # Example: /// Example: Solar1
    # Constraints: Minimum length = 1, Maximum length = 128
    # SolarArray_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SolarArray_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArray_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SolarArray_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArray_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArray_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArray_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArray_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArray_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SolarArray_Full
    def SolarArrayDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SolarArray_Full
    def SolarArrayDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SolarArray_Full
    def SolarArrayDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def SolarArray_FullStart(builder):
    builder.StartObject(11)

def Start(builder):
    SolarArray_FullStart(builder)

def SolarArray_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SolarArray_FullAddId(builder, id)

def SolarArray_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SolarArray_FullAddName(builder, name)

def SolarArray_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SolarArray_FullAddCreatedAt(builder, createdAt)

def SolarArray_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SolarArray_FullAddCreatedBy(builder, createdBy)

def SolarArray_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SolarArray_FullAddUpdatedAt(builder, updatedAt)

def SolarArray_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SolarArray_FullAddUpdatedBy(builder, updatedBy)

def SolarArray_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SolarArray_FullAddSource(builder, source)

def SolarArray_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SolarArray_FullAddOrigin(builder, origin)

def SolarArray_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SolarArray_FullAddOrigNetwork(builder, origNetwork)

def SolarArray_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    SolarArray_FullAddDataMode(builder, dataMode)

def SolarArray_FullAddSolarArrayDetails(builder, solarArrayDetails):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(solarArrayDetails), 0)

def AddSolarArrayDetails(builder, solarArrayDetails):
    SolarArray_FullAddSolarArrayDetails(builder, solarArrayDetails)

def SolarArray_FullStartSolarArrayDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSolarArrayDetailsVector(builder, numElems):
    return SolarArray_FullStartSolarArrayDetailsVector(builder, numElems)

def SolarArray_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SolarArray_FullEnd(builder)

try:
    from typing import List
except:
    pass

class SolarArray_FullT(object):

    # SolarArray_FullT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.solarArrayDetails = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        solarArrayFull = SolarArray_Full()
        solarArrayFull.Init(buf, pos)
        return cls.InitFromObj(solarArrayFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, solarArrayFull):
        x = SolarArray_FullT()
        x._UnPack(solarArrayFull)
        return x

    # SolarArray_FullT
    def _UnPack(self, solarArrayFull):
        if solarArrayFull is None:
            return
        self.id = solarArrayFull.Id()
        self.name = solarArrayFull.Name()
        self.createdAt = solarArrayFull.CreatedAt()
        self.createdBy = solarArrayFull.CreatedBy()
        self.updatedAt = solarArrayFull.UpdatedAt()
        self.updatedBy = solarArrayFull.UpdatedBy()
        self.source = solarArrayFull.Source()
        self.origin = solarArrayFull.Origin()
        self.origNetwork = solarArrayFull.OrigNetwork()
        self.dataMode = solarArrayFull.DataMode()
        if not solarArrayFull.SolarArrayDetailsIsNone():
            self.solarArrayDetails = []
            for i in range(solarArrayFull.SolarArrayDetailsLength()):
                self.solarArrayDetails.append(solarArrayFull.SolarArrayDetails(i))

    # SolarArray_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.solarArrayDetails is not None:
            solarArrayDetailslist = []
            for i in range(len(self.solarArrayDetails)):
                solarArrayDetailslist.append(builder.CreateString(self.solarArrayDetails[i]))
            SolarArray_FullStartSolarArrayDetailsVector(builder, len(self.solarArrayDetails))
            for i in reversed(range(len(self.solarArrayDetails))):
                builder.PrependUOffsetTRelative(solarArrayDetailslist[i])
            solarArrayDetails = builder.EndVector()
        SolarArray_FullStart(builder)
        if self.id is not None:
            SolarArray_FullAddId(builder, id)
        if self.name is not None:
            SolarArray_FullAddName(builder, name)
        if self.createdAt is not None:
            SolarArray_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SolarArray_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SolarArray_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SolarArray_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SolarArray_FullAddSource(builder, source)
        if self.origin is not None:
            SolarArray_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SolarArray_FullAddOrigNetwork(builder, origNetwork)
        SolarArray_FullAddDataMode(builder, self.dataMode)
        if self.solarArrayDetails is not None:
            SolarArray_FullAddSolarArrayDetails(builder, solarArrayDetails)
        solarArrayFull = SolarArray_FullEnd(builder)
        return solarArrayFull
