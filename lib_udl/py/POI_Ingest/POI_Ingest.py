# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
class POI_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = POI_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPOI_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def POI_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x4F\x49\x49", size_prefixed=size_prefixed)

    # POI_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: POI-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # POI_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # POI_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
    # Example: /// Example: BDA
    # Constraints: Minimum length = 0, Maximum length = 36
    # POI_Ingest
    def Pps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional mission ID related to the POI.
    # Example: /// Example: MSN-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # POI_Ingest
    def Msnid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Priority of the  POI target object.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # POI_Ingest
    def Pri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
    # Example: /// Example: TRK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # POI_Ingest
    def Trkid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
    # Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
    # Constraints: No constraints specified.
    # POI_Ingest
    def IdWeatherReport(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def IdWeatherReportLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def IdWeatherReportIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
    # Example: /// Example: POI-ID
    # Constraints: Minimum length = 1, Maximum length = 128
    # POI_Ingest
    def Poiid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the POI target object.
    # Example: /// Example: POI_NAME
    # Constraints: Minimum length = 1, Maximum length = 64
    # POI_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the POI target object.
    # Example: /// Example: Description of the object
    # Constraints: Minimum length = 0, Maximum length = 128
    # POI_Ingest
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
    # Example: /// Example: LIGHT_TANK
    # Constraints: Minimum length = 0, Maximum length = 24
    # POI_Ingest
    def Spec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 16
    # POI_Ingest
    def Ident(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
    # Example: /// Example: SURFACE
    # Constraints: Minimum length = 0, Maximum length = 24
    # POI_Ingest
    def Env(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
    # Example: /// Example: COMBAT_VEHICLE
    # Constraints: Minimum length = 0, Maximum length = 36
    # POI_Ingest
    def Plat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
    # Example: /// Example: TRAINING
    # Constraints: Minimum length = 0, Maximum length = 32
    # POI_Ingest
    def Activity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Activity/POI timestamp in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # POI_Ingest
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time of event validity (optional), in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # POI_Ingest
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Stale timestamp (optional), in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # POI_Ingest
    def Stale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # How the event point was generated, in CoT object heirarchy notation (optional, CoT).
    # Example: /// Example: h-g-i-g-o
    # Constraints: Minimum length = 0, Maximum length = 36
    # POI_Ingest
    def How(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Event type, in CoT object heirarchy notation (optional, CoT).
    # Example: /// Example: a-h-G
    # Constraints: Minimum length = 0, Maximum length = 36
    # POI_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Point height above ellipsoid (WGS-84), in meters.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Az(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def El(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height above lat/lon point, in meters (1-sigma, if representing linear error).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Le(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Ce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
    # Example: /// Example: [125.5, 85.1, 125.75]
    # Constraints: No constraints specified.
    # POI_Ingest
    def Elle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def ElleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def ElleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
    # Example: /// Example: Contact Info
    # Constraints: Minimum length = 0, Maximum length = 32
    # POI_Ingest
    def Cntct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # POI_Ingest
    def Conf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # List of URLs to before/after images of this Point of Interest entity.
    # Example: /// Example: ['URL1', 'URL2']
    # Constraints: No constraints specified.
    # POI_Ingest
    def Urls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def UrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def UrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # POI_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # POI_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # POI_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: Type1
    # Constraints: Minimum length = 0, Maximum length = 128
    # POI_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # POI_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # POI_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # POI_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # POI_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # POI_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # POI_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # POI_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # POI_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
    # Example: /// Example: ['GROUP1', 'GROUP2']
    # Constraints: No constraints specified.
    # POI_Ingest
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # ID/name of the platform or entity providing the POI data.
    # Example: /// Example: PLATFORM_NAME
    # Constraints: Minimum length = 0, Maximum length = 64
    # POI_Ingest
    def Asset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # POI_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        return o == 0

    # Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['TYPE1', 'TYPE2']
    # Constraints: No constraints specified.
    # POI_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
    # Example: /// Example: ['ID1', 'ID2']
    # Constraints: No constraints specified.
    # POI_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # POI_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # POI_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

    # The Basic Encyclopedia Number associated with the POI, if applicable.
    # Example: /// Example: 0427RT1030
    # Constraints: Minimum length = 0, Maximum length = 64
    # POI_Ingest
    def BeNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # POI_Ingest
    def Orientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # POI_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # POI_Ingest
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def POI_IngestStart(builder):
    builder.StartObject(52)

def Start(builder):
    POI_IngestStart(builder)

def POI_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    POI_IngestAddId(builder, id)

def POI_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    POI_IngestAddClassificationMarking(builder, classificationMarking)

def POI_IngestAddPps(builder, pps):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pps), 0)

def AddPps(builder, pps):
    POI_IngestAddPps(builder, pps)

def POI_IngestAddMsnid(builder, msnid):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msnid), 0)

def AddMsnid(builder, msnid):
    POI_IngestAddMsnid(builder, msnid)

def POI_IngestAddPri(builder, pri):
    builder.PrependInt32Slot(4, pri, 0)

def AddPri(builder, pri):
    POI_IngestAddPri(builder, pri)

def POI_IngestAddTrkid(builder, trkid):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(trkid), 0)

def AddTrkid(builder, trkid):
    POI_IngestAddTrkid(builder, trkid)

def POI_IngestAddIdWeatherReport(builder, idWeatherReport):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idWeatherReport), 0)

def AddIdWeatherReport(builder, idWeatherReport):
    POI_IngestAddIdWeatherReport(builder, idWeatherReport)

def POI_IngestStartIdWeatherReportVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIdWeatherReportVector(builder, numElems):
    return POI_IngestStartIdWeatherReportVector(builder, numElems)

def POI_IngestAddPoiid(builder, poiid):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(poiid), 0)

def AddPoiid(builder, poiid):
    POI_IngestAddPoiid(builder, poiid)

def POI_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    POI_IngestAddName(builder, name)

def POI_IngestAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def AddDesc(builder, desc):
    POI_IngestAddDesc(builder, desc)

def POI_IngestAddSpec(builder, spec):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(spec), 0)

def AddSpec(builder, spec):
    POI_IngestAddSpec(builder, spec)

def POI_IngestAddIdent(builder, ident):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ident), 0)

def AddIdent(builder, ident):
    POI_IngestAddIdent(builder, ident)

def POI_IngestAddEnv(builder, env):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(env), 0)

def AddEnv(builder, env):
    POI_IngestAddEnv(builder, env)

def POI_IngestAddPlat(builder, plat):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(plat), 0)

def AddPlat(builder, plat):
    POI_IngestAddPlat(builder, plat)

def POI_IngestAddActivity(builder, activity):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(activity), 0)

def AddActivity(builder, activity):
    POI_IngestAddActivity(builder, activity)

def POI_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    POI_IngestAddTs(builder, ts)

def POI_IngestAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    POI_IngestAddStart(builder, start)

def POI_IngestAddStale(builder, stale):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(stale), 0)

def AddStale(builder, stale):
    POI_IngestAddStale(builder, stale)

def POI_IngestAddHow(builder, how):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(how), 0)

def AddHow(builder, how):
    POI_IngestAddHow(builder, how)

def POI_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    POI_IngestAddType(builder, type)

def POI_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(20, lat, 0.0)

def AddLat(builder, lat):
    POI_IngestAddLat(builder, lat)

def POI_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(21, lon, 0.0)

def AddLon(builder, lon):
    POI_IngestAddLon(builder, lon)

def POI_IngestAddAlt(builder, alt):
    builder.PrependFloat64Slot(22, alt, 0.0)

def AddAlt(builder, alt):
    POI_IngestAddAlt(builder, alt)

def POI_IngestAddAz(builder, az):
    builder.PrependFloat64Slot(23, az, 0.0)

def AddAz(builder, az):
    POI_IngestAddAz(builder, az)

def POI_IngestAddEl(builder, el):
    builder.PrependFloat64Slot(24, el, 0.0)

def AddEl(builder, el):
    POI_IngestAddEl(builder, el)

def POI_IngestAddLe(builder, le):
    builder.PrependFloat64Slot(25, le, 0.0)

def AddLe(builder, le):
    POI_IngestAddLe(builder, le)

def POI_IngestAddCe(builder, ce):
    builder.PrependFloat64Slot(26, ce, 0.0)

def AddCe(builder, ce):
    POI_IngestAddCe(builder, ce)

def POI_IngestAddElle(builder, elle):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(elle), 0)

def AddElle(builder, elle):
    POI_IngestAddElle(builder, elle)

def POI_IngestStartElleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElleVector(builder, numElems):
    return POI_IngestStartElleVector(builder, numElems)

def POI_IngestAddCntct(builder, cntct):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(cntct), 0)

def AddCntct(builder, cntct):
    POI_IngestAddCntct(builder, cntct)

def POI_IngestAddConf(builder, conf):
    builder.PrependFloat64Slot(29, conf, 0.0)

def AddConf(builder, conf):
    POI_IngestAddConf(builder, conf)

def POI_IngestAddUrls(builder, urls):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(urls), 0)

def AddUrls(builder, urls):
    POI_IngestAddUrls(builder, urls)

def POI_IngestStartUrlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUrlsVector(builder, numElems):
    return POI_IngestStartUrlsVector(builder, numElems)

def POI_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    POI_IngestAddArea(builder, area)

def POI_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    POI_IngestAddAtext(builder, atext)

def POI_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    POI_IngestAddAgjson(builder, agjson)

def POI_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    POI_IngestAddAtype(builder, atype)

def POI_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(35, andims, 0)

def AddAndims(builder, andims):
    POI_IngestAddAndims(builder, andims)

def POI_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(36, asrid, 0)

def AddAsrid(builder, asrid):
    POI_IngestAddAsrid(builder, asrid)

def POI_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    POI_IngestAddCreatedAt(builder, createdAt)

def POI_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    POI_IngestAddCreatedBy(builder, createdBy)

def POI_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    POI_IngestAddSourceDl(builder, sourceDl)

def POI_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    POI_IngestAddSource(builder, source)

def POI_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(41, dataMode, 0)

def AddDataMode(builder, dataMode):
    POI_IngestAddDataMode(builder, dataMode)

def POI_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    POI_IngestAddOrigin(builder, origin)

def POI_IngestAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def AddGroups(builder, groups):
    POI_IngestAddGroups(builder, groups)

def POI_IngestStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGroupsVector(builder, numElems):
    return POI_IngestStartGroupsVector(builder, numElems)

def POI_IngestAddAsset(builder, asset):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(asset), 0)

def AddAsset(builder, asset):
    POI_IngestAddAsset(builder, asset)

def POI_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    POI_IngestAddTags(builder, tags)

def POI_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return POI_IngestStartTagsVector(builder, numElems)

def POI_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    POI_IngestAddSrcTyps(builder, srcTyps)

def POI_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return POI_IngestStartSrcTypsVector(builder, numElems)

def POI_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    POI_IngestAddSrcIds(builder, srcIds)

def POI_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return POI_IngestStartSrcIdsVector(builder, numElems)

def POI_IngestAddBeNumber(builder, beNumber):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(beNumber), 0)

def AddBeNumber(builder, beNumber):
    POI_IngestAddBeNumber(builder, beNumber)

def POI_IngestAddOrientation(builder, orientation):
    builder.PrependFloat64Slot(49, orientation, 0.0)

def AddOrientation(builder, orientation):
    POI_IngestAddOrientation(builder, orientation)

def POI_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    POI_IngestAddOrigNetwork(builder, origNetwork)

def POI_IngestAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    POI_IngestAddTransactionId(builder, transactionId)

def POI_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return POI_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class POI_IngestT(object):

    # POI_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.pps = None  # type: str
        self.msnid = None  # type: str
        self.pri = 0  # type: int
        self.trkid = None  # type: str
        self.idWeatherReport = None  # type: List[str]
        self.poiid = None  # type: str
        self.name = None  # type: str
        self.desc = None  # type: str
        self.spec = None  # type: str
        self.ident = None  # type: str
        self.env = None  # type: str
        self.plat = None  # type: str
        self.activity = None  # type: str
        self.ts = None  # type: str
        self.start = None  # type: str
        self.stale = None  # type: str
        self.how = None  # type: str
        self.type = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.az = 0.0  # type: float
        self.el = 0.0  # type: float
        self.le = 0.0  # type: float
        self.ce = 0.0  # type: float
        self.elle = None  # type: List[str]
        self.cntct = None  # type: str
        self.conf = 0.0  # type: float
        self.urls = None  # type: List[str]
        self.area = None  # type: str
        self.atext = None  # type: str
        self.agjson = None  # type: str
        self.atype = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.origin = None  # type: str
        self.groups = None  # type: List[str]
        self.asset = None  # type: str
        self.tags = None  # type: List[str]
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.beNumber = None  # type: str
        self.orientation = 0.0  # type: float
        self.origNetwork = None  # type: str
        self.transactionId = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        poiIngest = POI_Ingest()
        poiIngest.Init(buf, pos)
        return cls.InitFromObj(poiIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, poiIngest):
        x = POI_IngestT()
        x._UnPack(poiIngest)
        return x

    # POI_IngestT
    def _UnPack(self, poiIngest):
        if poiIngest is None:
            return
        self.id = poiIngest.Id()
        self.classificationMarking = poiIngest.ClassificationMarking()
        self.pps = poiIngest.Pps()
        self.msnid = poiIngest.Msnid()
        self.pri = poiIngest.Pri()
        self.trkid = poiIngest.Trkid()
        if not poiIngest.IdWeatherReportIsNone():
            self.idWeatherReport = []
            for i in range(poiIngest.IdWeatherReportLength()):
                self.idWeatherReport.append(poiIngest.IdWeatherReport(i))
        self.poiid = poiIngest.Poiid()
        self.name = poiIngest.Name()
        self.desc = poiIngest.Desc()
        self.spec = poiIngest.Spec()
        self.ident = poiIngest.Ident()
        self.env = poiIngest.Env()
        self.plat = poiIngest.Plat()
        self.activity = poiIngest.Activity()
        self.ts = poiIngest.Ts()
        self.start = poiIngest.Start()
        self.stale = poiIngest.Stale()
        self.how = poiIngest.How()
        self.type = poiIngest.Type()
        self.lat = poiIngest.Lat()
        self.lon = poiIngest.Lon()
        self.alt = poiIngest.Alt()
        self.az = poiIngest.Az()
        self.el = poiIngest.El()
        self.le = poiIngest.Le()
        self.ce = poiIngest.Ce()
        if not poiIngest.ElleIsNone():
            self.elle = []
            for i in range(poiIngest.ElleLength()):
                self.elle.append(poiIngest.Elle(i))
        self.cntct = poiIngest.Cntct()
        self.conf = poiIngest.Conf()
        if not poiIngest.UrlsIsNone():
            self.urls = []
            for i in range(poiIngest.UrlsLength()):
                self.urls.append(poiIngest.Urls(i))
        self.area = poiIngest.Area()
        self.atext = poiIngest.Atext()
        self.agjson = poiIngest.Agjson()
        self.atype = poiIngest.Atype()
        self.andims = poiIngest.Andims()
        self.asrid = poiIngest.Asrid()
        self.createdAt = poiIngest.CreatedAt()
        self.createdBy = poiIngest.CreatedBy()
        self.sourceDl = poiIngest.SourceDl()
        self.source = poiIngest.Source()
        self.dataMode = poiIngest.DataMode()
        self.origin = poiIngest.Origin()
        if not poiIngest.GroupsIsNone():
            self.groups = []
            for i in range(poiIngest.GroupsLength()):
                self.groups.append(poiIngest.Groups(i))
        self.asset = poiIngest.Asset()
        if not poiIngest.TagsIsNone():
            self.tags = []
            for i in range(poiIngest.TagsLength()):
                self.tags.append(poiIngest.Tags(i))
        if not poiIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(poiIngest.SrcTypsLength()):
                self.srcTyps.append(poiIngest.SrcTyps(i))
        if not poiIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(poiIngest.SrcIdsLength()):
                self.srcIds.append(poiIngest.SrcIds(i))
        self.beNumber = poiIngest.BeNumber()
        self.orientation = poiIngest.Orientation()
        self.origNetwork = poiIngest.OrigNetwork()
        self.transactionId = poiIngest.TransactionId()

    # POI_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.pps is not None:
            pps = builder.CreateString(self.pps)
        if self.msnid is not None:
            msnid = builder.CreateString(self.msnid)
        if self.trkid is not None:
            trkid = builder.CreateString(self.trkid)
        if self.idWeatherReport is not None:
            idWeatherReportlist = []
            for i in range(len(self.idWeatherReport)):
                idWeatherReportlist.append(builder.CreateString(self.idWeatherReport[i]))
            POI_IngestStartIdWeatherReportVector(builder, len(self.idWeatherReport))
            for i in reversed(range(len(self.idWeatherReport))):
                builder.PrependUOffsetTRelative(idWeatherReportlist[i])
            idWeatherReport = builder.EndVector()
        if self.poiid is not None:
            poiid = builder.CreateString(self.poiid)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.desc is not None:
            desc = builder.CreateString(self.desc)
        if self.spec is not None:
            spec = builder.CreateString(self.spec)
        if self.ident is not None:
            ident = builder.CreateString(self.ident)
        if self.env is not None:
            env = builder.CreateString(self.env)
        if self.plat is not None:
            plat = builder.CreateString(self.plat)
        if self.activity is not None:
            activity = builder.CreateString(self.activity)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.start is not None:
            start = builder.CreateString(self.start)
        if self.stale is not None:
            stale = builder.CreateString(self.stale)
        if self.how is not None:
            how = builder.CreateString(self.how)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.elle is not None:
            ellelist = []
            for i in range(len(self.elle)):
                ellelist.append(builder.CreateString(self.elle[i]))
            POI_IngestStartElleVector(builder, len(self.elle))
            for i in reversed(range(len(self.elle))):
                builder.PrependUOffsetTRelative(ellelist[i])
            elle = builder.EndVector()
        if self.cntct is not None:
            cntct = builder.CreateString(self.cntct)
        if self.urls is not None:
            urlslist = []
            for i in range(len(self.urls)):
                urlslist.append(builder.CreateString(self.urls[i]))
            POI_IngestStartUrlsVector(builder, len(self.urls))
            for i in reversed(range(len(self.urls))):
                builder.PrependUOffsetTRelative(urlslist[i])
            urls = builder.EndVector()
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(builder.CreateString(self.groups[i]))
            POI_IngestStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector()
        if self.asset is not None:
            asset = builder.CreateString(self.asset)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            POI_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            POI_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            POI_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.beNumber is not None:
            beNumber = builder.CreateString(self.beNumber)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        POI_IngestStart(builder)
        if self.id is not None:
            POI_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            POI_IngestAddClassificationMarking(builder, classificationMarking)
        if self.pps is not None:
            POI_IngestAddPps(builder, pps)
        if self.msnid is not None:
            POI_IngestAddMsnid(builder, msnid)
        POI_IngestAddPri(builder, self.pri)
        if self.trkid is not None:
            POI_IngestAddTrkid(builder, trkid)
        if self.idWeatherReport is not None:
            POI_IngestAddIdWeatherReport(builder, idWeatherReport)
        if self.poiid is not None:
            POI_IngestAddPoiid(builder, poiid)
        if self.name is not None:
            POI_IngestAddName(builder, name)
        if self.desc is not None:
            POI_IngestAddDesc(builder, desc)
        if self.spec is not None:
            POI_IngestAddSpec(builder, spec)
        if self.ident is not None:
            POI_IngestAddIdent(builder, ident)
        if self.env is not None:
            POI_IngestAddEnv(builder, env)
        if self.plat is not None:
            POI_IngestAddPlat(builder, plat)
        if self.activity is not None:
            POI_IngestAddActivity(builder, activity)
        if self.ts is not None:
            POI_IngestAddTs(builder, ts)
        if self.start is not None:
            POI_IngestAddStart(builder, start)
        if self.stale is not None:
            POI_IngestAddStale(builder, stale)
        if self.how is not None:
            POI_IngestAddHow(builder, how)
        if self.type is not None:
            POI_IngestAddType(builder, type)
        POI_IngestAddLat(builder, self.lat)
        POI_IngestAddLon(builder, self.lon)
        POI_IngestAddAlt(builder, self.alt)
        POI_IngestAddAz(builder, self.az)
        POI_IngestAddEl(builder, self.el)
        POI_IngestAddLe(builder, self.le)
        POI_IngestAddCe(builder, self.ce)
        if self.elle is not None:
            POI_IngestAddElle(builder, elle)
        if self.cntct is not None:
            POI_IngestAddCntct(builder, cntct)
        POI_IngestAddConf(builder, self.conf)
        if self.urls is not None:
            POI_IngestAddUrls(builder, urls)
        if self.area is not None:
            POI_IngestAddArea(builder, area)
        if self.atext is not None:
            POI_IngestAddAtext(builder, atext)
        if self.agjson is not None:
            POI_IngestAddAgjson(builder, agjson)
        if self.atype is not None:
            POI_IngestAddAtype(builder, atype)
        POI_IngestAddAndims(builder, self.andims)
        POI_IngestAddAsrid(builder, self.asrid)
        if self.createdAt is not None:
            POI_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            POI_IngestAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            POI_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            POI_IngestAddSource(builder, source)
        POI_IngestAddDataMode(builder, self.dataMode)
        if self.origin is not None:
            POI_IngestAddOrigin(builder, origin)
        if self.groups is not None:
            POI_IngestAddGroups(builder, groups)
        if self.asset is not None:
            POI_IngestAddAsset(builder, asset)
        if self.tags is not None:
            POI_IngestAddTags(builder, tags)
        if self.srcTyps is not None:
            POI_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            POI_IngestAddSrcIds(builder, srcIds)
        if self.beNumber is not None:
            POI_IngestAddBeNumber(builder, beNumber)
        POI_IngestAddOrientation(builder, self.orientation)
        if self.origNetwork is not None:
            POI_IngestAddOrigNetwork(builder, origNetwork)
        if self.transactionId is not None:
            POI_IngestAddTransactionId(builder, transactionId)
        poiIngest = POI_IngestEnd(builder)
        return poiIngest
