# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
class OpticalSOIObservation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpticalSOIObservation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpticalSOIObservation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OpticalSOIObservation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x50\x54\x49", size_prefixed=size_prefixed)

    # OpticalSOIObservation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Observation detection start time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.888456Z
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def ObStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
    # Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def IntensityTimes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def IntensityTimesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def IntensityTimesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def CurrentSpectralFilterNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Image exposure duration in seconds.
    # Example: /// Example: 0.455
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def ExpDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
    # Example: /// Example: [1.1, 1.1, 1.1]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def Intensities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def IntensitiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def IntensitiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
    # Example: /// Example: [0.32, 0.32, 0.32]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def ExtinctionCoeffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def ExtinctionCoeffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def ExtinctionCoeffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
    # Example: /// Example: [0.06, 0.06, 0.06]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def ExtinctionCoeffsUnc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def ExtinctionCoeffsUncLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def ExtinctionCoeffsUncIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    # Example: /// Example: [100625.375, 100625.375, 100625.375]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def SkyBgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def SkyBgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def SkyBgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    # Example: /// Example: [100625.375, 100625.375, 100625.375]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def LocalSkyBgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def LocalSkyBgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def LocalSkyBgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
    # Example: /// Example: [0.065, 0.065, 0.065]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def LocalSkyBgsUnc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def LocalSkyBgsUncLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def LocalSkyBgsUncIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Array of the number of detected stars in the FOV with a value for each element in the intensities field.
    # Example: /// Example: [6, 6, 6]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def NumDetectedStars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def NumDetectedStarsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def NumDetectedStarsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
    # Example: /// Example: [3, 3, 3]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def NumCorrelatedStars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def NumCorrelatedStarsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def NumCorrelatedStarsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
    # Example: /// Example: [24.711, 24.711, 24.711]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def ZeroPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def ZeroPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def ZeroPointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
    # Example: /// Example: [107.4, 107.4, 107.4]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def Ras(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def RasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def RasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
    # Example: /// Example: [-0.45, -0.45, -0.45]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def Declinations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def DeclinationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def DeclinationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
    # Example: /// Example: [0, 0, 0]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def RaRates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def RaRatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def RaRatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
    # Example: /// Example: [0.1, 0.2, 1]
    # Constraints: No constraints specified.
    # OpticalSOIObservation_Ingest
    def PercentSats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpticalSOIObservation_Ingest
    def PercentSatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpticalSOIObservation_Ingest
    def PercentSatsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def OpticalSOIObservation_IngestStart(builder):
    builder.StartObject(17)

def Start(builder):
    OpticalSOIObservation_IngestStart(builder)

def OpticalSOIObservation_IngestAddObStartTime(builder, obStartTime):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(obStartTime), 0)

def AddObStartTime(builder, obStartTime):
    OpticalSOIObservation_IngestAddObStartTime(builder, obStartTime)

def OpticalSOIObservation_IngestAddIntensityTimes(builder, intensityTimes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(intensityTimes), 0)

def AddIntensityTimes(builder, intensityTimes):
    OpticalSOIObservation_IngestAddIntensityTimes(builder, intensityTimes)

def OpticalSOIObservation_IngestStartIntensityTimesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntensityTimesVector(builder, numElems):
    return OpticalSOIObservation_IngestStartIntensityTimesVector(builder, numElems)

def OpticalSOIObservation_IngestAddCurrentSpectralFilterNum(builder, currentSpectralFilterNum):
    builder.PrependInt32Slot(2, currentSpectralFilterNum, 0)

def AddCurrentSpectralFilterNum(builder, currentSpectralFilterNum):
    OpticalSOIObservation_IngestAddCurrentSpectralFilterNum(builder, currentSpectralFilterNum)

def OpticalSOIObservation_IngestAddExpDuration(builder, expDuration):
    builder.PrependFloat64Slot(3, expDuration, 0.0)

def AddExpDuration(builder, expDuration):
    OpticalSOIObservation_IngestAddExpDuration(builder, expDuration)

def OpticalSOIObservation_IngestAddIntensities(builder, intensities):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(intensities), 0)

def AddIntensities(builder, intensities):
    OpticalSOIObservation_IngestAddIntensities(builder, intensities)

def OpticalSOIObservation_IngestStartIntensitiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntensitiesVector(builder, numElems):
    return OpticalSOIObservation_IngestStartIntensitiesVector(builder, numElems)

def OpticalSOIObservation_IngestAddExtinctionCoeffs(builder, extinctionCoeffs):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(extinctionCoeffs), 0)

def AddExtinctionCoeffs(builder, extinctionCoeffs):
    OpticalSOIObservation_IngestAddExtinctionCoeffs(builder, extinctionCoeffs)

def OpticalSOIObservation_IngestStartExtinctionCoeffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExtinctionCoeffsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartExtinctionCoeffsVector(builder, numElems)

def OpticalSOIObservation_IngestAddExtinctionCoeffsUnc(builder, extinctionCoeffsUnc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(extinctionCoeffsUnc), 0)

def AddExtinctionCoeffsUnc(builder, extinctionCoeffsUnc):
    OpticalSOIObservation_IngestAddExtinctionCoeffsUnc(builder, extinctionCoeffsUnc)

def OpticalSOIObservation_IngestStartExtinctionCoeffsUncVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExtinctionCoeffsUncVector(builder, numElems):
    return OpticalSOIObservation_IngestStartExtinctionCoeffsUncVector(builder, numElems)

def OpticalSOIObservation_IngestAddSkyBgs(builder, skyBgs):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skyBgs), 0)

def AddSkyBgs(builder, skyBgs):
    OpticalSOIObservation_IngestAddSkyBgs(builder, skyBgs)

def OpticalSOIObservation_IngestStartSkyBgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSkyBgsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartSkyBgsVector(builder, numElems)

def OpticalSOIObservation_IngestAddLocalSkyBgs(builder, localSkyBgs):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(localSkyBgs), 0)

def AddLocalSkyBgs(builder, localSkyBgs):
    OpticalSOIObservation_IngestAddLocalSkyBgs(builder, localSkyBgs)

def OpticalSOIObservation_IngestStartLocalSkyBgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLocalSkyBgsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartLocalSkyBgsVector(builder, numElems)

def OpticalSOIObservation_IngestAddLocalSkyBgsUnc(builder, localSkyBgsUnc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(localSkyBgsUnc), 0)

def AddLocalSkyBgsUnc(builder, localSkyBgsUnc):
    OpticalSOIObservation_IngestAddLocalSkyBgsUnc(builder, localSkyBgsUnc)

def OpticalSOIObservation_IngestStartLocalSkyBgsUncVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLocalSkyBgsUncVector(builder, numElems):
    return OpticalSOIObservation_IngestStartLocalSkyBgsUncVector(builder, numElems)

def OpticalSOIObservation_IngestAddNumDetectedStars(builder, numDetectedStars):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(numDetectedStars), 0)

def AddNumDetectedStars(builder, numDetectedStars):
    OpticalSOIObservation_IngestAddNumDetectedStars(builder, numDetectedStars)

def OpticalSOIObservation_IngestStartNumDetectedStarsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNumDetectedStarsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartNumDetectedStarsVector(builder, numElems)

def OpticalSOIObservation_IngestAddNumCorrelatedStars(builder, numCorrelatedStars):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(numCorrelatedStars), 0)

def AddNumCorrelatedStars(builder, numCorrelatedStars):
    OpticalSOIObservation_IngestAddNumCorrelatedStars(builder, numCorrelatedStars)

def OpticalSOIObservation_IngestStartNumCorrelatedStarsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNumCorrelatedStarsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartNumCorrelatedStarsVector(builder, numElems)

def OpticalSOIObservation_IngestAddZeroPoints(builder, zeroPoints):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(zeroPoints), 0)

def AddZeroPoints(builder, zeroPoints):
    OpticalSOIObservation_IngestAddZeroPoints(builder, zeroPoints)

def OpticalSOIObservation_IngestStartZeroPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartZeroPointsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartZeroPointsVector(builder, numElems)

def OpticalSOIObservation_IngestAddRas(builder, ras):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(ras), 0)

def AddRas(builder, ras):
    OpticalSOIObservation_IngestAddRas(builder, ras)

def OpticalSOIObservation_IngestStartRasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRasVector(builder, numElems):
    return OpticalSOIObservation_IngestStartRasVector(builder, numElems)

def OpticalSOIObservation_IngestAddDeclinations(builder, declinations):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(declinations), 0)

def AddDeclinations(builder, declinations):
    OpticalSOIObservation_IngestAddDeclinations(builder, declinations)

def OpticalSOIObservation_IngestStartDeclinationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeclinationsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartDeclinationsVector(builder, numElems)

def OpticalSOIObservation_IngestAddRaRates(builder, raRates):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(raRates), 0)

def AddRaRates(builder, raRates):
    OpticalSOIObservation_IngestAddRaRates(builder, raRates)

def OpticalSOIObservation_IngestStartRaRatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRaRatesVector(builder, numElems):
    return OpticalSOIObservation_IngestStartRaRatesVector(builder, numElems)

def OpticalSOIObservation_IngestAddPercentSats(builder, percentSats):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(percentSats), 0)

def AddPercentSats(builder, percentSats):
    OpticalSOIObservation_IngestAddPercentSats(builder, percentSats)

def OpticalSOIObservation_IngestStartPercentSatsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPercentSatsVector(builder, numElems):
    return OpticalSOIObservation_IngestStartPercentSatsVector(builder, numElems)

def OpticalSOIObservation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return OpticalSOIObservation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class OpticalSOIObservation_IngestT(object):

    # OpticalSOIObservation_IngestT
    def __init__(self):
        self.obStartTime = None  # type: str
        self.intensityTimes = None  # type: List[str]
        self.currentSpectralFilterNum = 0  # type: int
        self.expDuration = 0.0  # type: float
        self.intensities = None  # type: List[str]
        self.extinctionCoeffs = None  # type: List[str]
        self.extinctionCoeffsUnc = None  # type: List[str]
        self.skyBgs = None  # type: List[str]
        self.localSkyBgs = None  # type: List[str]
        self.localSkyBgsUnc = None  # type: List[str]
        self.numDetectedStars = None  # type: List[str]
        self.numCorrelatedStars = None  # type: List[str]
        self.zeroPoints = None  # type: List[str]
        self.ras = None  # type: List[str]
        self.declinations = None  # type: List[str]
        self.raRates = None  # type: List[str]
        self.percentSats = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        opticalSoiobservationIngest = OpticalSOIObservation_Ingest()
        opticalSoiobservationIngest.Init(buf, pos)
        return cls.InitFromObj(opticalSoiobservationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, opticalSoiobservationIngest):
        x = OpticalSOIObservation_IngestT()
        x._UnPack(opticalSoiobservationIngest)
        return x

    # OpticalSOIObservation_IngestT
    def _UnPack(self, opticalSoiobservationIngest):
        if opticalSoiobservationIngest is None:
            return
        self.obStartTime = opticalSoiobservationIngest.ObStartTime()
        if not opticalSoiobservationIngest.IntensityTimesIsNone():
            self.intensityTimes = []
            for i in range(opticalSoiobservationIngest.IntensityTimesLength()):
                self.intensityTimes.append(opticalSoiobservationIngest.IntensityTimes(i))
        self.currentSpectralFilterNum = opticalSoiobservationIngest.CurrentSpectralFilterNum()
        self.expDuration = opticalSoiobservationIngest.ExpDuration()
        if not opticalSoiobservationIngest.IntensitiesIsNone():
            self.intensities = []
            for i in range(opticalSoiobservationIngest.IntensitiesLength()):
                self.intensities.append(opticalSoiobservationIngest.Intensities(i))
        if not opticalSoiobservationIngest.ExtinctionCoeffsIsNone():
            self.extinctionCoeffs = []
            for i in range(opticalSoiobservationIngest.ExtinctionCoeffsLength()):
                self.extinctionCoeffs.append(opticalSoiobservationIngest.ExtinctionCoeffs(i))
        if not opticalSoiobservationIngest.ExtinctionCoeffsUncIsNone():
            self.extinctionCoeffsUnc = []
            for i in range(opticalSoiobservationIngest.ExtinctionCoeffsUncLength()):
                self.extinctionCoeffsUnc.append(opticalSoiobservationIngest.ExtinctionCoeffsUnc(i))
        if not opticalSoiobservationIngest.SkyBgsIsNone():
            self.skyBgs = []
            for i in range(opticalSoiobservationIngest.SkyBgsLength()):
                self.skyBgs.append(opticalSoiobservationIngest.SkyBgs(i))
        if not opticalSoiobservationIngest.LocalSkyBgsIsNone():
            self.localSkyBgs = []
            for i in range(opticalSoiobservationIngest.LocalSkyBgsLength()):
                self.localSkyBgs.append(opticalSoiobservationIngest.LocalSkyBgs(i))
        if not opticalSoiobservationIngest.LocalSkyBgsUncIsNone():
            self.localSkyBgsUnc = []
            for i in range(opticalSoiobservationIngest.LocalSkyBgsUncLength()):
                self.localSkyBgsUnc.append(opticalSoiobservationIngest.LocalSkyBgsUnc(i))
        if not opticalSoiobservationIngest.NumDetectedStarsIsNone():
            self.numDetectedStars = []
            for i in range(opticalSoiobservationIngest.NumDetectedStarsLength()):
                self.numDetectedStars.append(opticalSoiobservationIngest.NumDetectedStars(i))
        if not opticalSoiobservationIngest.NumCorrelatedStarsIsNone():
            self.numCorrelatedStars = []
            for i in range(opticalSoiobservationIngest.NumCorrelatedStarsLength()):
                self.numCorrelatedStars.append(opticalSoiobservationIngest.NumCorrelatedStars(i))
        if not opticalSoiobservationIngest.ZeroPointsIsNone():
            self.zeroPoints = []
            for i in range(opticalSoiobservationIngest.ZeroPointsLength()):
                self.zeroPoints.append(opticalSoiobservationIngest.ZeroPoints(i))
        if not opticalSoiobservationIngest.RasIsNone():
            self.ras = []
            for i in range(opticalSoiobservationIngest.RasLength()):
                self.ras.append(opticalSoiobservationIngest.Ras(i))
        if not opticalSoiobservationIngest.DeclinationsIsNone():
            self.declinations = []
            for i in range(opticalSoiobservationIngest.DeclinationsLength()):
                self.declinations.append(opticalSoiobservationIngest.Declinations(i))
        if not opticalSoiobservationIngest.RaRatesIsNone():
            self.raRates = []
            for i in range(opticalSoiobservationIngest.RaRatesLength()):
                self.raRates.append(opticalSoiobservationIngest.RaRates(i))
        if not opticalSoiobservationIngest.PercentSatsIsNone():
            self.percentSats = []
            for i in range(opticalSoiobservationIngest.PercentSatsLength()):
                self.percentSats.append(opticalSoiobservationIngest.PercentSats(i))

    # OpticalSOIObservation_IngestT
    def Pack(self, builder):
        if self.obStartTime is not None:
            obStartTime = builder.CreateString(self.obStartTime)
        if self.intensityTimes is not None:
            intensityTimeslist = []
            for i in range(len(self.intensityTimes)):
                intensityTimeslist.append(builder.CreateString(self.intensityTimes[i]))
            OpticalSOIObservation_IngestStartIntensityTimesVector(builder, len(self.intensityTimes))
            for i in reversed(range(len(self.intensityTimes))):
                builder.PrependUOffsetTRelative(intensityTimeslist[i])
            intensityTimes = builder.EndVector()
        if self.intensities is not None:
            intensitieslist = []
            for i in range(len(self.intensities)):
                intensitieslist.append(builder.CreateString(self.intensities[i]))
            OpticalSOIObservation_IngestStartIntensitiesVector(builder, len(self.intensities))
            for i in reversed(range(len(self.intensities))):
                builder.PrependUOffsetTRelative(intensitieslist[i])
            intensities = builder.EndVector()
        if self.extinctionCoeffs is not None:
            extinctionCoeffslist = []
            for i in range(len(self.extinctionCoeffs)):
                extinctionCoeffslist.append(builder.CreateString(self.extinctionCoeffs[i]))
            OpticalSOIObservation_IngestStartExtinctionCoeffsVector(builder, len(self.extinctionCoeffs))
            for i in reversed(range(len(self.extinctionCoeffs))):
                builder.PrependUOffsetTRelative(extinctionCoeffslist[i])
            extinctionCoeffs = builder.EndVector()
        if self.extinctionCoeffsUnc is not None:
            extinctionCoeffsUnclist = []
            for i in range(len(self.extinctionCoeffsUnc)):
                extinctionCoeffsUnclist.append(builder.CreateString(self.extinctionCoeffsUnc[i]))
            OpticalSOIObservation_IngestStartExtinctionCoeffsUncVector(builder, len(self.extinctionCoeffsUnc))
            for i in reversed(range(len(self.extinctionCoeffsUnc))):
                builder.PrependUOffsetTRelative(extinctionCoeffsUnclist[i])
            extinctionCoeffsUnc = builder.EndVector()
        if self.skyBgs is not None:
            skyBgslist = []
            for i in range(len(self.skyBgs)):
                skyBgslist.append(builder.CreateString(self.skyBgs[i]))
            OpticalSOIObservation_IngestStartSkyBgsVector(builder, len(self.skyBgs))
            for i in reversed(range(len(self.skyBgs))):
                builder.PrependUOffsetTRelative(skyBgslist[i])
            skyBgs = builder.EndVector()
        if self.localSkyBgs is not None:
            localSkyBgslist = []
            for i in range(len(self.localSkyBgs)):
                localSkyBgslist.append(builder.CreateString(self.localSkyBgs[i]))
            OpticalSOIObservation_IngestStartLocalSkyBgsVector(builder, len(self.localSkyBgs))
            for i in reversed(range(len(self.localSkyBgs))):
                builder.PrependUOffsetTRelative(localSkyBgslist[i])
            localSkyBgs = builder.EndVector()
        if self.localSkyBgsUnc is not None:
            localSkyBgsUnclist = []
            for i in range(len(self.localSkyBgsUnc)):
                localSkyBgsUnclist.append(builder.CreateString(self.localSkyBgsUnc[i]))
            OpticalSOIObservation_IngestStartLocalSkyBgsUncVector(builder, len(self.localSkyBgsUnc))
            for i in reversed(range(len(self.localSkyBgsUnc))):
                builder.PrependUOffsetTRelative(localSkyBgsUnclist[i])
            localSkyBgsUnc = builder.EndVector()
        if self.numDetectedStars is not None:
            numDetectedStarslist = []
            for i in range(len(self.numDetectedStars)):
                numDetectedStarslist.append(builder.CreateString(self.numDetectedStars[i]))
            OpticalSOIObservation_IngestStartNumDetectedStarsVector(builder, len(self.numDetectedStars))
            for i in reversed(range(len(self.numDetectedStars))):
                builder.PrependUOffsetTRelative(numDetectedStarslist[i])
            numDetectedStars = builder.EndVector()
        if self.numCorrelatedStars is not None:
            numCorrelatedStarslist = []
            for i in range(len(self.numCorrelatedStars)):
                numCorrelatedStarslist.append(builder.CreateString(self.numCorrelatedStars[i]))
            OpticalSOIObservation_IngestStartNumCorrelatedStarsVector(builder, len(self.numCorrelatedStars))
            for i in reversed(range(len(self.numCorrelatedStars))):
                builder.PrependUOffsetTRelative(numCorrelatedStarslist[i])
            numCorrelatedStars = builder.EndVector()
        if self.zeroPoints is not None:
            zeroPointslist = []
            for i in range(len(self.zeroPoints)):
                zeroPointslist.append(builder.CreateString(self.zeroPoints[i]))
            OpticalSOIObservation_IngestStartZeroPointsVector(builder, len(self.zeroPoints))
            for i in reversed(range(len(self.zeroPoints))):
                builder.PrependUOffsetTRelative(zeroPointslist[i])
            zeroPoints = builder.EndVector()
        if self.ras is not None:
            raslist = []
            for i in range(len(self.ras)):
                raslist.append(builder.CreateString(self.ras[i]))
            OpticalSOIObservation_IngestStartRasVector(builder, len(self.ras))
            for i in reversed(range(len(self.ras))):
                builder.PrependUOffsetTRelative(raslist[i])
            ras = builder.EndVector()
        if self.declinations is not None:
            declinationslist = []
            for i in range(len(self.declinations)):
                declinationslist.append(builder.CreateString(self.declinations[i]))
            OpticalSOIObservation_IngestStartDeclinationsVector(builder, len(self.declinations))
            for i in reversed(range(len(self.declinations))):
                builder.PrependUOffsetTRelative(declinationslist[i])
            declinations = builder.EndVector()
        if self.raRates is not None:
            raRateslist = []
            for i in range(len(self.raRates)):
                raRateslist.append(builder.CreateString(self.raRates[i]))
            OpticalSOIObservation_IngestStartRaRatesVector(builder, len(self.raRates))
            for i in reversed(range(len(self.raRates))):
                builder.PrependUOffsetTRelative(raRateslist[i])
            raRates = builder.EndVector()
        if self.percentSats is not None:
            percentSatslist = []
            for i in range(len(self.percentSats)):
                percentSatslist.append(builder.CreateString(self.percentSats[i]))
            OpticalSOIObservation_IngestStartPercentSatsVector(builder, len(self.percentSats))
            for i in reversed(range(len(self.percentSats))):
                builder.PrependUOffsetTRelative(percentSatslist[i])
            percentSats = builder.EndVector()
        OpticalSOIObservation_IngestStart(builder)
        if self.obStartTime is not None:
            OpticalSOIObservation_IngestAddObStartTime(builder, obStartTime)
        if self.intensityTimes is not None:
            OpticalSOIObservation_IngestAddIntensityTimes(builder, intensityTimes)
        OpticalSOIObservation_IngestAddCurrentSpectralFilterNum(builder, self.currentSpectralFilterNum)
        OpticalSOIObservation_IngestAddExpDuration(builder, self.expDuration)
        if self.intensities is not None:
            OpticalSOIObservation_IngestAddIntensities(builder, intensities)
        if self.extinctionCoeffs is not None:
            OpticalSOIObservation_IngestAddExtinctionCoeffs(builder, extinctionCoeffs)
        if self.extinctionCoeffsUnc is not None:
            OpticalSOIObservation_IngestAddExtinctionCoeffsUnc(builder, extinctionCoeffsUnc)
        if self.skyBgs is not None:
            OpticalSOIObservation_IngestAddSkyBgs(builder, skyBgs)
        if self.localSkyBgs is not None:
            OpticalSOIObservation_IngestAddLocalSkyBgs(builder, localSkyBgs)
        if self.localSkyBgsUnc is not None:
            OpticalSOIObservation_IngestAddLocalSkyBgsUnc(builder, localSkyBgsUnc)
        if self.numDetectedStars is not None:
            OpticalSOIObservation_IngestAddNumDetectedStars(builder, numDetectedStars)
        if self.numCorrelatedStars is not None:
            OpticalSOIObservation_IngestAddNumCorrelatedStars(builder, numCorrelatedStars)
        if self.zeroPoints is not None:
            OpticalSOIObservation_IngestAddZeroPoints(builder, zeroPoints)
        if self.ras is not None:
            OpticalSOIObservation_IngestAddRas(builder, ras)
        if self.declinations is not None:
            OpticalSOIObservation_IngestAddDeclinations(builder, declinations)
        if self.raRates is not None:
            OpticalSOIObservation_IngestAddRaRates(builder, raRates)
        if self.percentSats is not None:
            OpticalSOIObservation_IngestAddPercentSats(builder, percentSats)
        opticalSoiobservationIngest = OpticalSOIObservation_IngestEnd(builder)
        return opticalSoiobservationIngest
