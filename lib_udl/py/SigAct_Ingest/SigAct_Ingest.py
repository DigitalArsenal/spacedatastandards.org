# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
class SigAct_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SigAct_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSigAct_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SigAct_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x49\x47\x41", size_prefixed=size_prefixed)

    # SigAct_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SIGACT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SigAct_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SigAct_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source language of the significant event using the ISO 639-3, 3 character code definition.
    # Example: /// Example: eng
    # Constraints: Minimum length = 0, Maximum length = 4
    # SigAct_Ingest
    def SourceLanguage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # SigAct_Ingest
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The city in or near which this event occurred.
    # Example: /// Example: Austin
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def City(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The district in which this event occurred.
    # Example: /// Example: district 12
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def District(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The province in which this event occurred.
    # Example: /// Example: Province_Example
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def Province(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.31
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 90.23
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
    # &nbsp;&nbsp;4Q (grid zone designator, GZD)
    # &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
    # &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
    # Example: /// Example: 4QFJ12345678
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def Milgrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
    # Example: /// Example: Kabul
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def Theater(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: Minimum length = 0, Maximum length = 512
    # SigAct_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: Minimum length = 0, Maximum length = 512
    # SigAct_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: Minimum length = 0, Maximum length = 512
    # SigAct_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: Type1
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The approximate start time of the event, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:02:03.123Z
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def EventStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The approximate end time of the event, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:02:03.123Z
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def EventEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date of the report or filing.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def ReportDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A list of one or more actors involved in the event.
    # Example: /// Example: ['US', 'CAN']
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Actors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SigAct_Ingest
    def ActorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SigAct_Ingest
    def ActorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Number of civilians abducted in the activity.
    # Example: /// Example: 423
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CivAbd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of civilians detained in the activity.
    # Example: /// Example: 234
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CivDet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of civilians killed in the activity.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CivKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of civilians wounded in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CivWound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of coalition members abducted in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CoalAbd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of coalition members detained in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CoalDet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of coalition members killed in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CoalKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of coalition members wounded in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CoalWound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of enemy combatants abducted in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def EnemyAbd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of enemy combatants detained in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def EnemyDet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of enemy combatants killed in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def EnemyKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of friendlies abducted in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def FriendlyAbd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of friendlies in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def FriendlyDet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of friendlies killed in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def FriendlyKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of friendlies wounded in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def FriendlyWound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Host Nation members abducted in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def HostNatAbd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Host Nation members detained in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def HostNatDet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Host Nation members killed in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def HostNatKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of Host Nation members wounded in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def HostNatWound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side A members abducted in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideAabd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side A members detained in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideAdet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side A members killed in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideAkia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side A members wounded in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideAwound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side B members abducted in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideBabd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side B members detained in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideBdet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side B members killed in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideBkia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of side B members wounded in the activity.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def SideBwound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The name of the target.  The target may be an individual, an entity, or a country/region.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 64
    # SigAct_Ingest
    def Target(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A description of the event.
    # Example: /// Example: Example_Description
    # Constraints: Minimum length = 0, Maximum length = 4096
    # SigAct_Ingest
    def EventDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of event (e.g.  Military, Natural, Political, Social, etc.).
    # Example: /// Example: Military
    # Constraints: Minimum length = 0, Maximum length = 32
    # SigAct_Ingest
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
    # Example: /// Example: IED Explosion
    # Constraints: Minimum length = 0, Maximum length = 32
    # SigAct_Ingest
    def TypeOfAttack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that this attack was of a complex or coordinated nature.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def ComplexAttack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
    # Example: /// Example: NUMBER-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SigAct_Ingest
    def IdNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Estimate of the confidence that this event occurred.
    # Example: /// Example: 13
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Confidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Estimate of the accuracy that this event occurred as described/reported.
    # Example: /// Example: 13
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Accuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
    # 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Clarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
    # Example: /// Example: CAMEO_CODE
    # Constraints: Minimum length = 0, Maximum length = 32
    # SigAct_Ingest
    def CameoCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
    # Example: /// Example: Example_cameoBaseCode
    # Constraints: Minimum length = 0, Maximum length = 32
    # SigAct_Ingest
    def CameoBaseCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
    # Example: /// Example: Example_cameoRootCode
    # Constraints: Minimum length = 0, Maximum length = 32
    # SigAct_Ingest
    def CameoRootCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
    # Example: /// Example: 9.32
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Goldstein(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The source of the document or report.
    # Example: /// Example: Example_documentSource
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def DocumentSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The filename of the document or report.
    # Example: /// Example: Example_documentFilename
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def DocumentFilename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def HasAttachment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def Filesize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MD5 value of the file. The ingest/create operation will automatically generate the value.
    # Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
    # Constraints: Minimum length = 0, Maximum length = 256
    # SigAct_Ingest
    def ChecksumValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reporting unit.
    # Example: /// Example: Unit_1
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def RepUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reporting unit type.
    # Example: /// Example: Example_repUnitType
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def RepUnitType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The activity the unit was engaged in.
    # Example: /// Example: Example_Activity
    # Constraints: Minimum length = 0, Maximum length = 128
    # SigAct_Ingest
    def RepUnitActivity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def NumMentions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def NumSources(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def NumArticles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
    # Example: /// Example: 8.23
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def AvgTone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
    # Example: /// Example: Example_URL
    # Constraints: Minimum length = 0, Maximum length = 256
    # SigAct_Ingest
    def SourceUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Related document ids.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def RelatedDocs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SigAct_Ingest
    def RelatedDocsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SigAct_Ingest
    def RelatedDocsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        return o == 0

    # A summary of the event.
    # Example: /// Example: Example_Summary
    # Constraints: Minimum length = 0, Maximum length = 4096
    # SigAct_Ingest
    def Summary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes related to the documents or event.
    # Example: /// Example: Example_Notes
    # Constraints: Minimum length = 0, Maximum length = 4096
    # SigAct_Ingest
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: No constraints specified.
    # SigAct_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SigAct_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SigAct_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SigAct_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SigAct_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SigAct_IngestStart(builder):
    builder.StartObject(83)

def Start(builder):
    SigAct_IngestStart(builder)

def SigAct_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SigAct_IngestAddId(builder, id)

def SigAct_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SigAct_IngestAddClassificationMarking(builder, classificationMarking)

def SigAct_IngestAddSourceLanguage(builder, sourceLanguage):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(sourceLanguage), 0)

def AddSourceLanguage(builder, sourceLanguage):
    SigAct_IngestAddSourceLanguage(builder, sourceLanguage)

def SigAct_IngestAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    SigAct_IngestAddCountryCode(builder, countryCode)

def SigAct_IngestAddCity(builder, city):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(city), 0)

def AddCity(builder, city):
    SigAct_IngestAddCity(builder, city)

def SigAct_IngestAddDistrict(builder, district):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(district), 0)

def AddDistrict(builder, district):
    SigAct_IngestAddDistrict(builder, district)

def SigAct_IngestAddProvince(builder, province):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(province), 0)

def AddProvince(builder, province):
    SigAct_IngestAddProvince(builder, province)

def SigAct_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(7, lat, 0.0)

def AddLat(builder, lat):
    SigAct_IngestAddLat(builder, lat)

def SigAct_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(8, lon, 0.0)

def AddLon(builder, lon):
    SigAct_IngestAddLon(builder, lon)

def SigAct_IngestAddMilgrid(builder, milgrid):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(milgrid), 0)

def AddMilgrid(builder, milgrid):
    SigAct_IngestAddMilgrid(builder, milgrid)

def SigAct_IngestAddTheater(builder, theater):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(theater), 0)

def AddTheater(builder, theater):
    SigAct_IngestAddTheater(builder, theater)

def SigAct_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    SigAct_IngestAddArea(builder, area)

def SigAct_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    SigAct_IngestAddAtext(builder, atext)

def SigAct_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    SigAct_IngestAddAgjson(builder, agjson)

def SigAct_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    SigAct_IngestAddAtype(builder, atype)

def SigAct_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(15, andims, 0)

def AddAndims(builder, andims):
    SigAct_IngestAddAndims(builder, andims)

def SigAct_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(16, asrid, 0)

def AddAsrid(builder, asrid):
    SigAct_IngestAddAsrid(builder, asrid)

def SigAct_IngestAddEventStart(builder, eventStart):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(eventStart), 0)

def AddEventStart(builder, eventStart):
    SigAct_IngestAddEventStart(builder, eventStart)

def SigAct_IngestAddEventEnd(builder, eventEnd):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(eventEnd), 0)

def AddEventEnd(builder, eventEnd):
    SigAct_IngestAddEventEnd(builder, eventEnd)

def SigAct_IngestAddReportDate(builder, reportDate):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(reportDate), 0)

def AddReportDate(builder, reportDate):
    SigAct_IngestAddReportDate(builder, reportDate)

def SigAct_IngestAddActors(builder, actors):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(actors), 0)

def AddActors(builder, actors):
    SigAct_IngestAddActors(builder, actors)

def SigAct_IngestStartActorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActorsVector(builder, numElems):
    return SigAct_IngestStartActorsVector(builder, numElems)

def SigAct_IngestAddCivAbd(builder, civAbd):
    builder.PrependInt32Slot(21, civAbd, 0)

def AddCivAbd(builder, civAbd):
    SigAct_IngestAddCivAbd(builder, civAbd)

def SigAct_IngestAddCivDet(builder, civDet):
    builder.PrependInt32Slot(22, civDet, 0)

def AddCivDet(builder, civDet):
    SigAct_IngestAddCivDet(builder, civDet)

def SigAct_IngestAddCivKia(builder, civKia):
    builder.PrependInt32Slot(23, civKia, 0)

def AddCivKia(builder, civKia):
    SigAct_IngestAddCivKia(builder, civKia)

def SigAct_IngestAddCivWound(builder, civWound):
    builder.PrependInt32Slot(24, civWound, 0)

def AddCivWound(builder, civWound):
    SigAct_IngestAddCivWound(builder, civWound)

def SigAct_IngestAddCoalAbd(builder, coalAbd):
    builder.PrependInt32Slot(25, coalAbd, 0)

def AddCoalAbd(builder, coalAbd):
    SigAct_IngestAddCoalAbd(builder, coalAbd)

def SigAct_IngestAddCoalDet(builder, coalDet):
    builder.PrependInt32Slot(26, coalDet, 0)

def AddCoalDet(builder, coalDet):
    SigAct_IngestAddCoalDet(builder, coalDet)

def SigAct_IngestAddCoalKia(builder, coalKia):
    builder.PrependInt32Slot(27, coalKia, 0)

def AddCoalKia(builder, coalKia):
    SigAct_IngestAddCoalKia(builder, coalKia)

def SigAct_IngestAddCoalWound(builder, coalWound):
    builder.PrependInt32Slot(28, coalWound, 0)

def AddCoalWound(builder, coalWound):
    SigAct_IngestAddCoalWound(builder, coalWound)

def SigAct_IngestAddEnemyAbd(builder, enemyAbd):
    builder.PrependInt32Slot(29, enemyAbd, 0)

def AddEnemyAbd(builder, enemyAbd):
    SigAct_IngestAddEnemyAbd(builder, enemyAbd)

def SigAct_IngestAddEnemyDet(builder, enemyDet):
    builder.PrependInt32Slot(30, enemyDet, 0)

def AddEnemyDet(builder, enemyDet):
    SigAct_IngestAddEnemyDet(builder, enemyDet)

def SigAct_IngestAddEnemyKia(builder, enemyKia):
    builder.PrependInt32Slot(31, enemyKia, 0)

def AddEnemyKia(builder, enemyKia):
    SigAct_IngestAddEnemyKia(builder, enemyKia)

def SigAct_IngestAddFriendlyAbd(builder, friendlyAbd):
    builder.PrependInt32Slot(32, friendlyAbd, 0)

def AddFriendlyAbd(builder, friendlyAbd):
    SigAct_IngestAddFriendlyAbd(builder, friendlyAbd)

def SigAct_IngestAddFriendlyDet(builder, friendlyDet):
    builder.PrependInt32Slot(33, friendlyDet, 0)

def AddFriendlyDet(builder, friendlyDet):
    SigAct_IngestAddFriendlyDet(builder, friendlyDet)

def SigAct_IngestAddFriendlyKia(builder, friendlyKia):
    builder.PrependInt32Slot(34, friendlyKia, 0)

def AddFriendlyKia(builder, friendlyKia):
    SigAct_IngestAddFriendlyKia(builder, friendlyKia)

def SigAct_IngestAddFriendlyWound(builder, friendlyWound):
    builder.PrependInt32Slot(35, friendlyWound, 0)

def AddFriendlyWound(builder, friendlyWound):
    SigAct_IngestAddFriendlyWound(builder, friendlyWound)

def SigAct_IngestAddHostNatAbd(builder, hostNatAbd):
    builder.PrependInt32Slot(36, hostNatAbd, 0)

def AddHostNatAbd(builder, hostNatAbd):
    SigAct_IngestAddHostNatAbd(builder, hostNatAbd)

def SigAct_IngestAddHostNatDet(builder, hostNatDet):
    builder.PrependInt32Slot(37, hostNatDet, 0)

def AddHostNatDet(builder, hostNatDet):
    SigAct_IngestAddHostNatDet(builder, hostNatDet)

def SigAct_IngestAddHostNatKia(builder, hostNatKia):
    builder.PrependInt32Slot(38, hostNatKia, 0)

def AddHostNatKia(builder, hostNatKia):
    SigAct_IngestAddHostNatKia(builder, hostNatKia)

def SigAct_IngestAddHostNatWound(builder, hostNatWound):
    builder.PrependInt32Slot(39, hostNatWound, 0)

def AddHostNatWound(builder, hostNatWound):
    SigAct_IngestAddHostNatWound(builder, hostNatWound)

def SigAct_IngestAddSideAabd(builder, sideAabd):
    builder.PrependInt32Slot(40, sideAabd, 0)

def AddSideAabd(builder, sideAabd):
    SigAct_IngestAddSideAabd(builder, sideAabd)

def SigAct_IngestAddSideAdet(builder, sideAdet):
    builder.PrependInt32Slot(41, sideAdet, 0)

def AddSideAdet(builder, sideAdet):
    SigAct_IngestAddSideAdet(builder, sideAdet)

def SigAct_IngestAddSideAkia(builder, sideAkia):
    builder.PrependInt32Slot(42, sideAkia, 0)

def AddSideAkia(builder, sideAkia):
    SigAct_IngestAddSideAkia(builder, sideAkia)

def SigAct_IngestAddSideAwound(builder, sideAwound):
    builder.PrependInt32Slot(43, sideAwound, 0)

def AddSideAwound(builder, sideAwound):
    SigAct_IngestAddSideAwound(builder, sideAwound)

def SigAct_IngestAddSideBabd(builder, sideBabd):
    builder.PrependInt32Slot(44, sideBabd, 0)

def AddSideBabd(builder, sideBabd):
    SigAct_IngestAddSideBabd(builder, sideBabd)

def SigAct_IngestAddSideBdet(builder, sideBdet):
    builder.PrependInt32Slot(45, sideBdet, 0)

def AddSideBdet(builder, sideBdet):
    SigAct_IngestAddSideBdet(builder, sideBdet)

def SigAct_IngestAddSideBkia(builder, sideBkia):
    builder.PrependInt32Slot(46, sideBkia, 0)

def AddSideBkia(builder, sideBkia):
    SigAct_IngestAddSideBkia(builder, sideBkia)

def SigAct_IngestAddSideBwound(builder, sideBwound):
    builder.PrependInt32Slot(47, sideBwound, 0)

def AddSideBwound(builder, sideBwound):
    SigAct_IngestAddSideBwound(builder, sideBwound)

def SigAct_IngestAddTarget(builder, target):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(target), 0)

def AddTarget(builder, target):
    SigAct_IngestAddTarget(builder, target)

def SigAct_IngestAddEventDescription(builder, eventDescription):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(eventDescription), 0)

def AddEventDescription(builder, eventDescription):
    SigAct_IngestAddEventDescription(builder, eventDescription)

def SigAct_IngestAddEventType(builder, eventType):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(eventType), 0)

def AddEventType(builder, eventType):
    SigAct_IngestAddEventType(builder, eventType)

def SigAct_IngestAddTypeOfAttack(builder, typeOfAttack):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(typeOfAttack), 0)

def AddTypeOfAttack(builder, typeOfAttack):
    SigAct_IngestAddTypeOfAttack(builder, typeOfAttack)

def SigAct_IngestAddComplexAttack(builder, complexAttack):
    builder.PrependBoolSlot(52, complexAttack, 0)

def AddComplexAttack(builder, complexAttack):
    SigAct_IngestAddComplexAttack(builder, complexAttack)

def SigAct_IngestAddIdNumber(builder, idNumber):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(idNumber), 0)

def AddIdNumber(builder, idNumber):
    SigAct_IngestAddIdNumber(builder, idNumber)

def SigAct_IngestAddConfidence(builder, confidence):
    builder.PrependInt32Slot(54, confidence, 0)

def AddConfidence(builder, confidence):
    SigAct_IngestAddConfidence(builder, confidence)

def SigAct_IngestAddAccuracy(builder, accuracy):
    builder.PrependInt32Slot(55, accuracy, 0)

def AddAccuracy(builder, accuracy):
    SigAct_IngestAddAccuracy(builder, accuracy)

def SigAct_IngestAddClarity(builder, clarity):
    builder.PrependInt32Slot(56, clarity, 0)

def AddClarity(builder, clarity):
    SigAct_IngestAddClarity(builder, clarity)

def SigAct_IngestAddCameoCode(builder, cameoCode):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(cameoCode), 0)

def AddCameoCode(builder, cameoCode):
    SigAct_IngestAddCameoCode(builder, cameoCode)

def SigAct_IngestAddCameoBaseCode(builder, cameoBaseCode):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(cameoBaseCode), 0)

def AddCameoBaseCode(builder, cameoBaseCode):
    SigAct_IngestAddCameoBaseCode(builder, cameoBaseCode)

def SigAct_IngestAddCameoRootCode(builder, cameoRootCode):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(cameoRootCode), 0)

def AddCameoRootCode(builder, cameoRootCode):
    SigAct_IngestAddCameoRootCode(builder, cameoRootCode)

def SigAct_IngestAddGoldstein(builder, goldstein):
    builder.PrependFloat64Slot(60, goldstein, 0.0)

def AddGoldstein(builder, goldstein):
    SigAct_IngestAddGoldstein(builder, goldstein)

def SigAct_IngestAddDocumentSource(builder, documentSource):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(documentSource), 0)

def AddDocumentSource(builder, documentSource):
    SigAct_IngestAddDocumentSource(builder, documentSource)

def SigAct_IngestAddDocumentFilename(builder, documentFilename):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(documentFilename), 0)

def AddDocumentFilename(builder, documentFilename):
    SigAct_IngestAddDocumentFilename(builder, documentFilename)

def SigAct_IngestAddHasAttachment(builder, hasAttachment):
    builder.PrependBoolSlot(63, hasAttachment, 0)

def AddHasAttachment(builder, hasAttachment):
    SigAct_IngestAddHasAttachment(builder, hasAttachment)

def SigAct_IngestAddFilesize(builder, filesize):
    builder.PrependInt64Slot(64, filesize, 0)

def AddFilesize(builder, filesize):
    SigAct_IngestAddFilesize(builder, filesize)

def SigAct_IngestAddChecksumValue(builder, checksumValue):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(checksumValue), 0)

def AddChecksumValue(builder, checksumValue):
    SigAct_IngestAddChecksumValue(builder, checksumValue)

def SigAct_IngestAddRepUnit(builder, repUnit):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(repUnit), 0)

def AddRepUnit(builder, repUnit):
    SigAct_IngestAddRepUnit(builder, repUnit)

def SigAct_IngestAddRepUnitType(builder, repUnitType):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(repUnitType), 0)

def AddRepUnitType(builder, repUnitType):
    SigAct_IngestAddRepUnitType(builder, repUnitType)

def SigAct_IngestAddRepUnitActivity(builder, repUnitActivity):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(repUnitActivity), 0)

def AddRepUnitActivity(builder, repUnitActivity):
    SigAct_IngestAddRepUnitActivity(builder, repUnitActivity)

def SigAct_IngestAddNumMentions(builder, numMentions):
    builder.PrependInt32Slot(69, numMentions, 0)

def AddNumMentions(builder, numMentions):
    SigAct_IngestAddNumMentions(builder, numMentions)

def SigAct_IngestAddNumSources(builder, numSources):
    builder.PrependInt32Slot(70, numSources, 0)

def AddNumSources(builder, numSources):
    SigAct_IngestAddNumSources(builder, numSources)

def SigAct_IngestAddNumArticles(builder, numArticles):
    builder.PrependInt32Slot(71, numArticles, 0)

def AddNumArticles(builder, numArticles):
    SigAct_IngestAddNumArticles(builder, numArticles)

def SigAct_IngestAddAvgTone(builder, avgTone):
    builder.PrependFloat64Slot(72, avgTone, 0.0)

def AddAvgTone(builder, avgTone):
    SigAct_IngestAddAvgTone(builder, avgTone)

def SigAct_IngestAddSourceUrl(builder, sourceUrl):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(sourceUrl), 0)

def AddSourceUrl(builder, sourceUrl):
    SigAct_IngestAddSourceUrl(builder, sourceUrl)

def SigAct_IngestAddRelatedDocs(builder, relatedDocs):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(relatedDocs), 0)

def AddRelatedDocs(builder, relatedDocs):
    SigAct_IngestAddRelatedDocs(builder, relatedDocs)

def SigAct_IngestStartRelatedDocsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRelatedDocsVector(builder, numElems):
    return SigAct_IngestStartRelatedDocsVector(builder, numElems)

def SigAct_IngestAddSummary(builder, summary):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(summary), 0)

def AddSummary(builder, summary):
    SigAct_IngestAddSummary(builder, summary)

def SigAct_IngestAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    SigAct_IngestAddNotes(builder, notes)

def SigAct_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SigAct_IngestAddCreatedAt(builder, createdAt)

def SigAct_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SigAct_IngestAddCreatedBy(builder, createdBy)

def SigAct_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SigAct_IngestAddSource(builder, source)

def SigAct_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SigAct_IngestAddOrigin(builder, origin)

def SigAct_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(81, dataMode, 0)

def AddDataMode(builder, dataMode):
    SigAct_IngestAddDataMode(builder, dataMode)

def SigAct_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SigAct_IngestAddOrigNetwork(builder, origNetwork)

def SigAct_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SigAct_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class SigAct_IngestT(object):

    # SigAct_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.sourceLanguage = None  # type: str
        self.countryCode = None  # type: str
        self.city = None  # type: str
        self.district = None  # type: str
        self.province = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.milgrid = None  # type: str
        self.theater = None  # type: str
        self.area = None  # type: str
        self.atext = None  # type: str
        self.agjson = None  # type: str
        self.atype = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.eventStart = None  # type: str
        self.eventEnd = None  # type: str
        self.reportDate = None  # type: str
        self.actors = None  # type: List[str]
        self.civAbd = 0  # type: int
        self.civDet = 0  # type: int
        self.civKia = 0  # type: int
        self.civWound = 0  # type: int
        self.coalAbd = 0  # type: int
        self.coalDet = 0  # type: int
        self.coalKia = 0  # type: int
        self.coalWound = 0  # type: int
        self.enemyAbd = 0  # type: int
        self.enemyDet = 0  # type: int
        self.enemyKia = 0  # type: int
        self.friendlyAbd = 0  # type: int
        self.friendlyDet = 0  # type: int
        self.friendlyKia = 0  # type: int
        self.friendlyWound = 0  # type: int
        self.hostNatAbd = 0  # type: int
        self.hostNatDet = 0  # type: int
        self.hostNatKia = 0  # type: int
        self.hostNatWound = 0  # type: int
        self.sideAabd = 0  # type: int
        self.sideAdet = 0  # type: int
        self.sideAkia = 0  # type: int
        self.sideAwound = 0  # type: int
        self.sideBabd = 0  # type: int
        self.sideBdet = 0  # type: int
        self.sideBkia = 0  # type: int
        self.sideBwound = 0  # type: int
        self.target = None  # type: str
        self.eventDescription = None  # type: str
        self.eventType = None  # type: str
        self.typeOfAttack = None  # type: str
        self.complexAttack = False  # type: bool
        self.idNumber = None  # type: str
        self.confidence = 0  # type: int
        self.accuracy = 0  # type: int
        self.clarity = 0  # type: int
        self.cameoCode = None  # type: str
        self.cameoBaseCode = None  # type: str
        self.cameoRootCode = None  # type: str
        self.goldstein = 0.0  # type: float
        self.documentSource = None  # type: str
        self.documentFilename = None  # type: str
        self.hasAttachment = False  # type: bool
        self.filesize = 0  # type: int
        self.checksumValue = None  # type: str
        self.repUnit = None  # type: str
        self.repUnitType = None  # type: str
        self.repUnitActivity = None  # type: str
        self.numMentions = 0  # type: int
        self.numSources = 0  # type: int
        self.numArticles = 0  # type: int
        self.avgTone = 0.0  # type: float
        self.sourceUrl = None  # type: str
        self.relatedDocs = None  # type: List[str]
        self.summary = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sigActIngest = SigAct_Ingest()
        sigActIngest.Init(buf, pos)
        return cls.InitFromObj(sigActIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sigActIngest):
        x = SigAct_IngestT()
        x._UnPack(sigActIngest)
        return x

    # SigAct_IngestT
    def _UnPack(self, sigActIngest):
        if sigActIngest is None:
            return
        self.id = sigActIngest.Id()
        self.classificationMarking = sigActIngest.ClassificationMarking()
        self.sourceLanguage = sigActIngest.SourceLanguage()
        self.countryCode = sigActIngest.CountryCode()
        self.city = sigActIngest.City()
        self.district = sigActIngest.District()
        self.province = sigActIngest.Province()
        self.lat = sigActIngest.Lat()
        self.lon = sigActIngest.Lon()
        self.milgrid = sigActIngest.Milgrid()
        self.theater = sigActIngest.Theater()
        self.area = sigActIngest.Area()
        self.atext = sigActIngest.Atext()
        self.agjson = sigActIngest.Agjson()
        self.atype = sigActIngest.Atype()
        self.andims = sigActIngest.Andims()
        self.asrid = sigActIngest.Asrid()
        self.eventStart = sigActIngest.EventStart()
        self.eventEnd = sigActIngest.EventEnd()
        self.reportDate = sigActIngest.ReportDate()
        if not sigActIngest.ActorsIsNone():
            self.actors = []
            for i in range(sigActIngest.ActorsLength()):
                self.actors.append(sigActIngest.Actors(i))
        self.civAbd = sigActIngest.CivAbd()
        self.civDet = sigActIngest.CivDet()
        self.civKia = sigActIngest.CivKia()
        self.civWound = sigActIngest.CivWound()
        self.coalAbd = sigActIngest.CoalAbd()
        self.coalDet = sigActIngest.CoalDet()
        self.coalKia = sigActIngest.CoalKia()
        self.coalWound = sigActIngest.CoalWound()
        self.enemyAbd = sigActIngest.EnemyAbd()
        self.enemyDet = sigActIngest.EnemyDet()
        self.enemyKia = sigActIngest.EnemyKia()
        self.friendlyAbd = sigActIngest.FriendlyAbd()
        self.friendlyDet = sigActIngest.FriendlyDet()
        self.friendlyKia = sigActIngest.FriendlyKia()
        self.friendlyWound = sigActIngest.FriendlyWound()
        self.hostNatAbd = sigActIngest.HostNatAbd()
        self.hostNatDet = sigActIngest.HostNatDet()
        self.hostNatKia = sigActIngest.HostNatKia()
        self.hostNatWound = sigActIngest.HostNatWound()
        self.sideAabd = sigActIngest.SideAabd()
        self.sideAdet = sigActIngest.SideAdet()
        self.sideAkia = sigActIngest.SideAkia()
        self.sideAwound = sigActIngest.SideAwound()
        self.sideBabd = sigActIngest.SideBabd()
        self.sideBdet = sigActIngest.SideBdet()
        self.sideBkia = sigActIngest.SideBkia()
        self.sideBwound = sigActIngest.SideBwound()
        self.target = sigActIngest.Target()
        self.eventDescription = sigActIngest.EventDescription()
        self.eventType = sigActIngest.EventType()
        self.typeOfAttack = sigActIngest.TypeOfAttack()
        self.complexAttack = sigActIngest.ComplexAttack()
        self.idNumber = sigActIngest.IdNumber()
        self.confidence = sigActIngest.Confidence()
        self.accuracy = sigActIngest.Accuracy()
        self.clarity = sigActIngest.Clarity()
        self.cameoCode = sigActIngest.CameoCode()
        self.cameoBaseCode = sigActIngest.CameoBaseCode()
        self.cameoRootCode = sigActIngest.CameoRootCode()
        self.goldstein = sigActIngest.Goldstein()
        self.documentSource = sigActIngest.DocumentSource()
        self.documentFilename = sigActIngest.DocumentFilename()
        self.hasAttachment = sigActIngest.HasAttachment()
        self.filesize = sigActIngest.Filesize()
        self.checksumValue = sigActIngest.ChecksumValue()
        self.repUnit = sigActIngest.RepUnit()
        self.repUnitType = sigActIngest.RepUnitType()
        self.repUnitActivity = sigActIngest.RepUnitActivity()
        self.numMentions = sigActIngest.NumMentions()
        self.numSources = sigActIngest.NumSources()
        self.numArticles = sigActIngest.NumArticles()
        self.avgTone = sigActIngest.AvgTone()
        self.sourceUrl = sigActIngest.SourceUrl()
        if not sigActIngest.RelatedDocsIsNone():
            self.relatedDocs = []
            for i in range(sigActIngest.RelatedDocsLength()):
                self.relatedDocs.append(sigActIngest.RelatedDocs(i))
        self.summary = sigActIngest.Summary()
        self.notes = sigActIngest.Notes()
        self.createdAt = sigActIngest.CreatedAt()
        self.createdBy = sigActIngest.CreatedBy()
        self.source = sigActIngest.Source()
        self.origin = sigActIngest.Origin()
        self.dataMode = sigActIngest.DataMode()
        self.origNetwork = sigActIngest.OrigNetwork()

    # SigAct_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.sourceLanguage is not None:
            sourceLanguage = builder.CreateString(self.sourceLanguage)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.city is not None:
            city = builder.CreateString(self.city)
        if self.district is not None:
            district = builder.CreateString(self.district)
        if self.province is not None:
            province = builder.CreateString(self.province)
        if self.milgrid is not None:
            milgrid = builder.CreateString(self.milgrid)
        if self.theater is not None:
            theater = builder.CreateString(self.theater)
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.eventStart is not None:
            eventStart = builder.CreateString(self.eventStart)
        if self.eventEnd is not None:
            eventEnd = builder.CreateString(self.eventEnd)
        if self.reportDate is not None:
            reportDate = builder.CreateString(self.reportDate)
        if self.actors is not None:
            actorslist = []
            for i in range(len(self.actors)):
                actorslist.append(builder.CreateString(self.actors[i]))
            SigAct_IngestStartActorsVector(builder, len(self.actors))
            for i in reversed(range(len(self.actors))):
                builder.PrependUOffsetTRelative(actorslist[i])
            actors = builder.EndVector()
        if self.target is not None:
            target = builder.CreateString(self.target)
        if self.eventDescription is not None:
            eventDescription = builder.CreateString(self.eventDescription)
        if self.eventType is not None:
            eventType = builder.CreateString(self.eventType)
        if self.typeOfAttack is not None:
            typeOfAttack = builder.CreateString(self.typeOfAttack)
        if self.idNumber is not None:
            idNumber = builder.CreateString(self.idNumber)
        if self.cameoCode is not None:
            cameoCode = builder.CreateString(self.cameoCode)
        if self.cameoBaseCode is not None:
            cameoBaseCode = builder.CreateString(self.cameoBaseCode)
        if self.cameoRootCode is not None:
            cameoRootCode = builder.CreateString(self.cameoRootCode)
        if self.documentSource is not None:
            documentSource = builder.CreateString(self.documentSource)
        if self.documentFilename is not None:
            documentFilename = builder.CreateString(self.documentFilename)
        if self.checksumValue is not None:
            checksumValue = builder.CreateString(self.checksumValue)
        if self.repUnit is not None:
            repUnit = builder.CreateString(self.repUnit)
        if self.repUnitType is not None:
            repUnitType = builder.CreateString(self.repUnitType)
        if self.repUnitActivity is not None:
            repUnitActivity = builder.CreateString(self.repUnitActivity)
        if self.sourceUrl is not None:
            sourceUrl = builder.CreateString(self.sourceUrl)
        if self.relatedDocs is not None:
            relatedDocslist = []
            for i in range(len(self.relatedDocs)):
                relatedDocslist.append(builder.CreateString(self.relatedDocs[i]))
            SigAct_IngestStartRelatedDocsVector(builder, len(self.relatedDocs))
            for i in reversed(range(len(self.relatedDocs))):
                builder.PrependUOffsetTRelative(relatedDocslist[i])
            relatedDocs = builder.EndVector()
        if self.summary is not None:
            summary = builder.CreateString(self.summary)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SigAct_IngestStart(builder)
        if self.id is not None:
            SigAct_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            SigAct_IngestAddClassificationMarking(builder, classificationMarking)
        if self.sourceLanguage is not None:
            SigAct_IngestAddSourceLanguage(builder, sourceLanguage)
        if self.countryCode is not None:
            SigAct_IngestAddCountryCode(builder, countryCode)
        if self.city is not None:
            SigAct_IngestAddCity(builder, city)
        if self.district is not None:
            SigAct_IngestAddDistrict(builder, district)
        if self.province is not None:
            SigAct_IngestAddProvince(builder, province)
        SigAct_IngestAddLat(builder, self.lat)
        SigAct_IngestAddLon(builder, self.lon)
        if self.milgrid is not None:
            SigAct_IngestAddMilgrid(builder, milgrid)
        if self.theater is not None:
            SigAct_IngestAddTheater(builder, theater)
        if self.area is not None:
            SigAct_IngestAddArea(builder, area)
        if self.atext is not None:
            SigAct_IngestAddAtext(builder, atext)
        if self.agjson is not None:
            SigAct_IngestAddAgjson(builder, agjson)
        if self.atype is not None:
            SigAct_IngestAddAtype(builder, atype)
        SigAct_IngestAddAndims(builder, self.andims)
        SigAct_IngestAddAsrid(builder, self.asrid)
        if self.eventStart is not None:
            SigAct_IngestAddEventStart(builder, eventStart)
        if self.eventEnd is not None:
            SigAct_IngestAddEventEnd(builder, eventEnd)
        if self.reportDate is not None:
            SigAct_IngestAddReportDate(builder, reportDate)
        if self.actors is not None:
            SigAct_IngestAddActors(builder, actors)
        SigAct_IngestAddCivAbd(builder, self.civAbd)
        SigAct_IngestAddCivDet(builder, self.civDet)
        SigAct_IngestAddCivKia(builder, self.civKia)
        SigAct_IngestAddCivWound(builder, self.civWound)
        SigAct_IngestAddCoalAbd(builder, self.coalAbd)
        SigAct_IngestAddCoalDet(builder, self.coalDet)
        SigAct_IngestAddCoalKia(builder, self.coalKia)
        SigAct_IngestAddCoalWound(builder, self.coalWound)
        SigAct_IngestAddEnemyAbd(builder, self.enemyAbd)
        SigAct_IngestAddEnemyDet(builder, self.enemyDet)
        SigAct_IngestAddEnemyKia(builder, self.enemyKia)
        SigAct_IngestAddFriendlyAbd(builder, self.friendlyAbd)
        SigAct_IngestAddFriendlyDet(builder, self.friendlyDet)
        SigAct_IngestAddFriendlyKia(builder, self.friendlyKia)
        SigAct_IngestAddFriendlyWound(builder, self.friendlyWound)
        SigAct_IngestAddHostNatAbd(builder, self.hostNatAbd)
        SigAct_IngestAddHostNatDet(builder, self.hostNatDet)
        SigAct_IngestAddHostNatKia(builder, self.hostNatKia)
        SigAct_IngestAddHostNatWound(builder, self.hostNatWound)
        SigAct_IngestAddSideAabd(builder, self.sideAabd)
        SigAct_IngestAddSideAdet(builder, self.sideAdet)
        SigAct_IngestAddSideAkia(builder, self.sideAkia)
        SigAct_IngestAddSideAwound(builder, self.sideAwound)
        SigAct_IngestAddSideBabd(builder, self.sideBabd)
        SigAct_IngestAddSideBdet(builder, self.sideBdet)
        SigAct_IngestAddSideBkia(builder, self.sideBkia)
        SigAct_IngestAddSideBwound(builder, self.sideBwound)
        if self.target is not None:
            SigAct_IngestAddTarget(builder, target)
        if self.eventDescription is not None:
            SigAct_IngestAddEventDescription(builder, eventDescription)
        if self.eventType is not None:
            SigAct_IngestAddEventType(builder, eventType)
        if self.typeOfAttack is not None:
            SigAct_IngestAddTypeOfAttack(builder, typeOfAttack)
        SigAct_IngestAddComplexAttack(builder, self.complexAttack)
        if self.idNumber is not None:
            SigAct_IngestAddIdNumber(builder, idNumber)
        SigAct_IngestAddConfidence(builder, self.confidence)
        SigAct_IngestAddAccuracy(builder, self.accuracy)
        SigAct_IngestAddClarity(builder, self.clarity)
        if self.cameoCode is not None:
            SigAct_IngestAddCameoCode(builder, cameoCode)
        if self.cameoBaseCode is not None:
            SigAct_IngestAddCameoBaseCode(builder, cameoBaseCode)
        if self.cameoRootCode is not None:
            SigAct_IngestAddCameoRootCode(builder, cameoRootCode)
        SigAct_IngestAddGoldstein(builder, self.goldstein)
        if self.documentSource is not None:
            SigAct_IngestAddDocumentSource(builder, documentSource)
        if self.documentFilename is not None:
            SigAct_IngestAddDocumentFilename(builder, documentFilename)
        SigAct_IngestAddHasAttachment(builder, self.hasAttachment)
        SigAct_IngestAddFilesize(builder, self.filesize)
        if self.checksumValue is not None:
            SigAct_IngestAddChecksumValue(builder, checksumValue)
        if self.repUnit is not None:
            SigAct_IngestAddRepUnit(builder, repUnit)
        if self.repUnitType is not None:
            SigAct_IngestAddRepUnitType(builder, repUnitType)
        if self.repUnitActivity is not None:
            SigAct_IngestAddRepUnitActivity(builder, repUnitActivity)
        SigAct_IngestAddNumMentions(builder, self.numMentions)
        SigAct_IngestAddNumSources(builder, self.numSources)
        SigAct_IngestAddNumArticles(builder, self.numArticles)
        SigAct_IngestAddAvgTone(builder, self.avgTone)
        if self.sourceUrl is not None:
            SigAct_IngestAddSourceUrl(builder, sourceUrl)
        if self.relatedDocs is not None:
            SigAct_IngestAddRelatedDocs(builder, relatedDocs)
        if self.summary is not None:
            SigAct_IngestAddSummary(builder, summary)
        if self.notes is not None:
            SigAct_IngestAddNotes(builder, notes)
        if self.createdAt is not None:
            SigAct_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SigAct_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SigAct_IngestAddSource(builder, source)
        if self.origin is not None:
            SigAct_IngestAddOrigin(builder, origin)
        SigAct_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            SigAct_IngestAddOrigNetwork(builder, origNetwork)
        sigActIngest = SigAct_IngestEnd(builder)
        return sigActIngest
