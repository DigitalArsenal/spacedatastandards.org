# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
class EOObservation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EOObservation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEOObservation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EOObservation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4F\x4F\x42", size_prefixed=size_prefixed)

    # EOObservation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: EOOBSERVATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EOObservation_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EOObservation_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def CorrQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EOObservation_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EOObservation_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Sky Imagery.
    # Example: /// Example: SKYIMAGERY-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EOObservation_Ingest
    def IdSkyImagery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
    # Example: /// Example: AUTOTRACK
    # Constraints: Minimum length = 0, Maximum length = 24
    # EOObservation_Ingest
    def CollectMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EOObservation_Ingest
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EOObservation_Ingest
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the track to which this observation belongs.
    # Example: /// Example: TRACK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EOObservation_Ingest
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    # Example: /// Example: FIRST
    # Constraints: Minimum length = 0, Maximum length = 8
    # EOObservation_Ingest
    def ObPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EOObservation_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EOObservation_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Line of sight azimuth angle in degrees and topocentric frame.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight azimuth angle, in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def AzimuthUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor line of sight azimuth angle bias in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def AzimuthBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight azimuth in degrees per second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def AzimuthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight elevation in degrees and topocentric frame.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight elevation angle, in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ElevationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor line of sight elevation bias in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ElevationBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight elevation in degrees per second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ElevationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight range in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight range, in kilometers.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor line of sight range bias in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RangeBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight range in km/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight range rate, in kilometers/second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Ra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RaRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight right ascension angle, in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RaUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor line of sight right ascension bias in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def RaBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Declination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def DeclinationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight declination angle, in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def DeclinationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor line of sight declination angle bias in degrees.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def DeclinationBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Losx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Losy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Losz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight pointing in micro-radians.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def LosUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Losxvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Losyvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Loszvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at obTime (if mobile/onorbit) in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Seny(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senvelx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senvely(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Senvelz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
    # Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def SenQuat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EOObservation_Ingest
    def SenQuatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EOObservation_Ingest
    def SenQuatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # The number of RSOs detected in the sensor field of view.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def FovCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Image exposure duration in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ExpDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Zeroptd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Net object signature = counts / expDuration.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def NetObjSig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Net object signature uncertainty = counts uncertainty / expDuration.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def NetObjSigUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Calibrated magnitude in units of magnitudes.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Mag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Uncertainty of calibrated magnitude in units of magnitudes.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def MagUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def MagNormRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For GEO detections, the latitude in degrees north.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Geolat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For GEO detections, the longitude in degrees east.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Geolon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For GEO detections, the altitude in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Geoalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For GEO detections, the range in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Georange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def SkyBkgrnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def PrimaryExtinction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Primary Extinction Coefficient Uncertainty, in Magnitudes.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def PrimaryExtinctionUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def SolarPhaseAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def SolarEqPhaseAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Angle from the sun to the equatorial plane.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def SolarDecAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Shutter delay in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ShutterDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor timing bias in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def TimingBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # EOObservation_Ingest
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Intensity of the target for IR observations, in kw/sr/um.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Intensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Background intensity for IR observations, in kw/sr/um.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def BgIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: PROVIDED_DATA1
    # Constraints: Minimum length = 0, Maximum length = 64
    # EOObservation_Ingest
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # EOObservation_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EOObservation_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EOObservation_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EOObservation_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EOObservation_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # EOObservation_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def ZeroPtdUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def EoobservationDetails(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # EOObservation_Ingest
    def ReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # EOObservation_Ingest
    def SenReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating that the target object was in umbral eclipse at the time of this observation.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Umbra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Penumbra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # EOObservation_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EOObservation_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    # Example: /// Example: OPTICAL
    # Constraints: No constraints specified.
    # EOObservation_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EOObservation_IngestStart(builder):
    builder.StartObject(93)

def Start(builder):
    EOObservation_IngestStart(builder)

def EOObservation_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EOObservation_IngestAddId(builder, id)

def EOObservation_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EOObservation_IngestAddClassificationMarking(builder, classificationMarking)

def EOObservation_IngestAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    EOObservation_IngestAddObTime(builder, obTime)

def EOObservation_IngestAddCorrQuality(builder, corrQuality):
    builder.PrependFloat64Slot(3, corrQuality, 0.0)

def AddCorrQuality(builder, corrQuality):
    EOObservation_IngestAddCorrQuality(builder, corrQuality)

def EOObservation_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    EOObservation_IngestAddIdOnOrbit(builder, idOnOrbit)

def EOObservation_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    EOObservation_IngestAddIdSensor(builder, idSensor)

def EOObservation_IngestAddIdSkyImagery(builder, idSkyImagery):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idSkyImagery), 0)

def AddIdSkyImagery(builder, idSkyImagery):
    EOObservation_IngestAddIdSkyImagery(builder, idSkyImagery)

def EOObservation_IngestAddCollectMethod(builder, collectMethod):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(collectMethod), 0)

def AddCollectMethod(builder, collectMethod):
    EOObservation_IngestAddCollectMethod(builder, collectMethod)

def EOObservation_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(8, satNo, 0)

def AddSatNo(builder, satNo):
    EOObservation_IngestAddSatNo(builder, satNo)

def EOObservation_IngestAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    EOObservation_IngestAddTaskId(builder, taskId)

def EOObservation_IngestAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    EOObservation_IngestAddTransactionId(builder, transactionId)

def EOObservation_IngestAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    EOObservation_IngestAddTrackId(builder, trackId)

def EOObservation_IngestAddObPosition(builder, obPosition):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(obPosition), 0)

def AddObPosition(builder, obPosition):
    EOObservation_IngestAddObPosition(builder, obPosition)

def EOObservation_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    EOObservation_IngestAddOrigObjectId(builder, origObjectId)

def EOObservation_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    EOObservation_IngestAddOrigSensorId(builder, origSensorId)

def EOObservation_IngestAddUct(builder, uct):
    builder.PrependBoolSlot(15, uct, 0)

def AddUct(builder, uct):
    EOObservation_IngestAddUct(builder, uct)

def EOObservation_IngestAddAzimuth(builder, azimuth):
    builder.PrependFloat64Slot(16, azimuth, 0.0)

def AddAzimuth(builder, azimuth):
    EOObservation_IngestAddAzimuth(builder, azimuth)

def EOObservation_IngestAddAzimuthUnc(builder, azimuthUnc):
    builder.PrependFloat64Slot(17, azimuthUnc, 0.0)

def AddAzimuthUnc(builder, azimuthUnc):
    EOObservation_IngestAddAzimuthUnc(builder, azimuthUnc)

def EOObservation_IngestAddAzimuthBias(builder, azimuthBias):
    builder.PrependFloat64Slot(18, azimuthBias, 0.0)

def AddAzimuthBias(builder, azimuthBias):
    EOObservation_IngestAddAzimuthBias(builder, azimuthBias)

def EOObservation_IngestAddAzimuthRate(builder, azimuthRate):
    builder.PrependFloat64Slot(19, azimuthRate, 0.0)

def AddAzimuthRate(builder, azimuthRate):
    EOObservation_IngestAddAzimuthRate(builder, azimuthRate)

def EOObservation_IngestAddElevation(builder, elevation):
    builder.PrependFloat64Slot(20, elevation, 0.0)

def AddElevation(builder, elevation):
    EOObservation_IngestAddElevation(builder, elevation)

def EOObservation_IngestAddElevationUnc(builder, elevationUnc):
    builder.PrependFloat64Slot(21, elevationUnc, 0.0)

def AddElevationUnc(builder, elevationUnc):
    EOObservation_IngestAddElevationUnc(builder, elevationUnc)

def EOObservation_IngestAddElevationBias(builder, elevationBias):
    builder.PrependFloat64Slot(22, elevationBias, 0.0)

def AddElevationBias(builder, elevationBias):
    EOObservation_IngestAddElevationBias(builder, elevationBias)

def EOObservation_IngestAddElevationRate(builder, elevationRate):
    builder.PrependFloat64Slot(23, elevationRate, 0.0)

def AddElevationRate(builder, elevationRate):
    EOObservation_IngestAddElevationRate(builder, elevationRate)

def EOObservation_IngestAddRange(builder, range):
    builder.PrependFloat64Slot(24, range, 0.0)

def AddRange(builder, range):
    EOObservation_IngestAddRange(builder, range)

def EOObservation_IngestAddRangeUnc(builder, rangeUnc):
    builder.PrependFloat64Slot(25, rangeUnc, 0.0)

def AddRangeUnc(builder, rangeUnc):
    EOObservation_IngestAddRangeUnc(builder, rangeUnc)

def EOObservation_IngestAddRangeBias(builder, rangeBias):
    builder.PrependFloat64Slot(26, rangeBias, 0.0)

def AddRangeBias(builder, rangeBias):
    EOObservation_IngestAddRangeBias(builder, rangeBias)

def EOObservation_IngestAddRangeRate(builder, rangeRate):
    builder.PrependFloat64Slot(27, rangeRate, 0.0)

def AddRangeRate(builder, rangeRate):
    EOObservation_IngestAddRangeRate(builder, rangeRate)

def EOObservation_IngestAddRangeRateUnc(builder, rangeRateUnc):
    builder.PrependFloat64Slot(28, rangeRateUnc, 0.0)

def AddRangeRateUnc(builder, rangeRateUnc):
    EOObservation_IngestAddRangeRateUnc(builder, rangeRateUnc)

def EOObservation_IngestAddRa(builder, ra):
    builder.PrependFloat64Slot(29, ra, 0.0)

def AddRa(builder, ra):
    EOObservation_IngestAddRa(builder, ra)

def EOObservation_IngestAddRaRate(builder, raRate):
    builder.PrependFloat64Slot(30, raRate, 0.0)

def AddRaRate(builder, raRate):
    EOObservation_IngestAddRaRate(builder, raRate)

def EOObservation_IngestAddRaUnc(builder, raUnc):
    builder.PrependFloat64Slot(31, raUnc, 0.0)

def AddRaUnc(builder, raUnc):
    EOObservation_IngestAddRaUnc(builder, raUnc)

def EOObservation_IngestAddRaBias(builder, raBias):
    builder.PrependFloat64Slot(32, raBias, 0.0)

def AddRaBias(builder, raBias):
    EOObservation_IngestAddRaBias(builder, raBias)

def EOObservation_IngestAddDeclination(builder, declination):
    builder.PrependFloat64Slot(33, declination, 0.0)

def AddDeclination(builder, declination):
    EOObservation_IngestAddDeclination(builder, declination)

def EOObservation_IngestAddDeclinationRate(builder, declinationRate):
    builder.PrependFloat64Slot(34, declinationRate, 0.0)

def AddDeclinationRate(builder, declinationRate):
    EOObservation_IngestAddDeclinationRate(builder, declinationRate)

def EOObservation_IngestAddDeclinationUnc(builder, declinationUnc):
    builder.PrependFloat64Slot(35, declinationUnc, 0.0)

def AddDeclinationUnc(builder, declinationUnc):
    EOObservation_IngestAddDeclinationUnc(builder, declinationUnc)

def EOObservation_IngestAddDeclinationBias(builder, declinationBias):
    builder.PrependFloat64Slot(36, declinationBias, 0.0)

def AddDeclinationBias(builder, declinationBias):
    EOObservation_IngestAddDeclinationBias(builder, declinationBias)

def EOObservation_IngestAddLosx(builder, losx):
    builder.PrependFloat64Slot(37, losx, 0.0)

def AddLosx(builder, losx):
    EOObservation_IngestAddLosx(builder, losx)

def EOObservation_IngestAddLosy(builder, losy):
    builder.PrependFloat64Slot(38, losy, 0.0)

def AddLosy(builder, losy):
    EOObservation_IngestAddLosy(builder, losy)

def EOObservation_IngestAddLosz(builder, losz):
    builder.PrependFloat64Slot(39, losz, 0.0)

def AddLosz(builder, losz):
    EOObservation_IngestAddLosz(builder, losz)

def EOObservation_IngestAddLosUnc(builder, losUnc):
    builder.PrependFloat64Slot(40, losUnc, 0.0)

def AddLosUnc(builder, losUnc):
    EOObservation_IngestAddLosUnc(builder, losUnc)

def EOObservation_IngestAddLosxvel(builder, losxvel):
    builder.PrependFloat64Slot(41, losxvel, 0.0)

def AddLosxvel(builder, losxvel):
    EOObservation_IngestAddLosxvel(builder, losxvel)

def EOObservation_IngestAddLosyvel(builder, losyvel):
    builder.PrependFloat64Slot(42, losyvel, 0.0)

def AddLosyvel(builder, losyvel):
    EOObservation_IngestAddLosyvel(builder, losyvel)

def EOObservation_IngestAddLoszvel(builder, loszvel):
    builder.PrependFloat64Slot(43, loszvel, 0.0)

def AddLoszvel(builder, loszvel):
    EOObservation_IngestAddLoszvel(builder, loszvel)

def EOObservation_IngestAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(44, senlat, 0.0)

def AddSenlat(builder, senlat):
    EOObservation_IngestAddSenlat(builder, senlat)

def EOObservation_IngestAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(45, senlon, 0.0)

def AddSenlon(builder, senlon):
    EOObservation_IngestAddSenlon(builder, senlon)

def EOObservation_IngestAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(46, senalt, 0.0)

def AddSenalt(builder, senalt):
    EOObservation_IngestAddSenalt(builder, senalt)

def EOObservation_IngestAddSenx(builder, senx):
    builder.PrependFloat64Slot(47, senx, 0.0)

def AddSenx(builder, senx):
    EOObservation_IngestAddSenx(builder, senx)

def EOObservation_IngestAddSeny(builder, seny):
    builder.PrependFloat64Slot(48, seny, 0.0)

def AddSeny(builder, seny):
    EOObservation_IngestAddSeny(builder, seny)

def EOObservation_IngestAddSenz(builder, senz):
    builder.PrependFloat64Slot(49, senz, 0.0)

def AddSenz(builder, senz):
    EOObservation_IngestAddSenz(builder, senz)

def EOObservation_IngestAddSenvelx(builder, senvelx):
    builder.PrependFloat64Slot(50, senvelx, 0.0)

def AddSenvelx(builder, senvelx):
    EOObservation_IngestAddSenvelx(builder, senvelx)

def EOObservation_IngestAddSenvely(builder, senvely):
    builder.PrependFloat64Slot(51, senvely, 0.0)

def AddSenvely(builder, senvely):
    EOObservation_IngestAddSenvely(builder, senvely)

def EOObservation_IngestAddSenvelz(builder, senvelz):
    builder.PrependFloat64Slot(52, senvelz, 0.0)

def AddSenvelz(builder, senvelz):
    EOObservation_IngestAddSenvelz(builder, senvelz)

def EOObservation_IngestAddSenQuat(builder, senQuat):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(senQuat), 0)

def AddSenQuat(builder, senQuat):
    EOObservation_IngestAddSenQuat(builder, senQuat)

def EOObservation_IngestStartSenQuatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSenQuatVector(builder, numElems):
    return EOObservation_IngestStartSenQuatVector(builder, numElems)

def EOObservation_IngestAddFovCount(builder, fovCount):
    builder.PrependInt32Slot(54, fovCount, 0)

def AddFovCount(builder, fovCount):
    EOObservation_IngestAddFovCount(builder, fovCount)

def EOObservation_IngestAddExpDuration(builder, expDuration):
    builder.PrependFloat64Slot(55, expDuration, 0.0)

def AddExpDuration(builder, expDuration):
    EOObservation_IngestAddExpDuration(builder, expDuration)

def EOObservation_IngestAddZeroptd(builder, zeroptd):
    builder.PrependFloat64Slot(56, zeroptd, 0.0)

def AddZeroptd(builder, zeroptd):
    EOObservation_IngestAddZeroptd(builder, zeroptd)

def EOObservation_IngestAddNetObjSig(builder, netObjSig):
    builder.PrependFloat64Slot(57, netObjSig, 0.0)

def AddNetObjSig(builder, netObjSig):
    EOObservation_IngestAddNetObjSig(builder, netObjSig)

def EOObservation_IngestAddNetObjSigUnc(builder, netObjSigUnc):
    builder.PrependFloat64Slot(58, netObjSigUnc, 0.0)

def AddNetObjSigUnc(builder, netObjSigUnc):
    EOObservation_IngestAddNetObjSigUnc(builder, netObjSigUnc)

def EOObservation_IngestAddMag(builder, mag):
    builder.PrependFloat64Slot(59, mag, 0.0)

def AddMag(builder, mag):
    EOObservation_IngestAddMag(builder, mag)

def EOObservation_IngestAddMagUnc(builder, magUnc):
    builder.PrependFloat64Slot(60, magUnc, 0.0)

def AddMagUnc(builder, magUnc):
    EOObservation_IngestAddMagUnc(builder, magUnc)

def EOObservation_IngestAddMagNormRange(builder, magNormRange):
    builder.PrependFloat64Slot(61, magNormRange, 0.0)

def AddMagNormRange(builder, magNormRange):
    EOObservation_IngestAddMagNormRange(builder, magNormRange)

def EOObservation_IngestAddGeolat(builder, geolat):
    builder.PrependFloat64Slot(62, geolat, 0.0)

def AddGeolat(builder, geolat):
    EOObservation_IngestAddGeolat(builder, geolat)

def EOObservation_IngestAddGeolon(builder, geolon):
    builder.PrependFloat64Slot(63, geolon, 0.0)

def AddGeolon(builder, geolon):
    EOObservation_IngestAddGeolon(builder, geolon)

def EOObservation_IngestAddGeoalt(builder, geoalt):
    builder.PrependFloat64Slot(64, geoalt, 0.0)

def AddGeoalt(builder, geoalt):
    EOObservation_IngestAddGeoalt(builder, geoalt)

def EOObservation_IngestAddGeorange(builder, georange):
    builder.PrependFloat64Slot(65, georange, 0.0)

def AddGeorange(builder, georange):
    EOObservation_IngestAddGeorange(builder, georange)

def EOObservation_IngestAddSkyBkgrnd(builder, skyBkgrnd):
    builder.PrependFloat64Slot(66, skyBkgrnd, 0.0)

def AddSkyBkgrnd(builder, skyBkgrnd):
    EOObservation_IngestAddSkyBkgrnd(builder, skyBkgrnd)

def EOObservation_IngestAddPrimaryExtinction(builder, primaryExtinction):
    builder.PrependFloat64Slot(67, primaryExtinction, 0.0)

def AddPrimaryExtinction(builder, primaryExtinction):
    EOObservation_IngestAddPrimaryExtinction(builder, primaryExtinction)

def EOObservation_IngestAddPrimaryExtinctionUnc(builder, primaryExtinctionUnc):
    builder.PrependFloat64Slot(68, primaryExtinctionUnc, 0.0)

def AddPrimaryExtinctionUnc(builder, primaryExtinctionUnc):
    EOObservation_IngestAddPrimaryExtinctionUnc(builder, primaryExtinctionUnc)

def EOObservation_IngestAddSolarPhaseAngle(builder, solarPhaseAngle):
    builder.PrependFloat64Slot(69, solarPhaseAngle, 0.0)

def AddSolarPhaseAngle(builder, solarPhaseAngle):
    EOObservation_IngestAddSolarPhaseAngle(builder, solarPhaseAngle)

def EOObservation_IngestAddSolarEqPhaseAngle(builder, solarEqPhaseAngle):
    builder.PrependFloat64Slot(70, solarEqPhaseAngle, 0.0)

def AddSolarEqPhaseAngle(builder, solarEqPhaseAngle):
    EOObservation_IngestAddSolarEqPhaseAngle(builder, solarEqPhaseAngle)

def EOObservation_IngestAddSolarDecAngle(builder, solarDecAngle):
    builder.PrependFloat64Slot(71, solarDecAngle, 0.0)

def AddSolarDecAngle(builder, solarDecAngle):
    EOObservation_IngestAddSolarDecAngle(builder, solarDecAngle)

def EOObservation_IngestAddShutterDelay(builder, shutterDelay):
    builder.PrependFloat64Slot(72, shutterDelay, 0.0)

def AddShutterDelay(builder, shutterDelay):
    EOObservation_IngestAddShutterDelay(builder, shutterDelay)

def EOObservation_IngestAddTimingBias(builder, timingBias):
    builder.PrependFloat64Slot(73, timingBias, 0.0)

def AddTimingBias(builder, timingBias):
    EOObservation_IngestAddTimingBias(builder, timingBias)

def EOObservation_IngestAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    EOObservation_IngestAddRawFileUri(builder, rawFileUri)

def EOObservation_IngestAddIntensity(builder, intensity):
    builder.PrependFloat64Slot(75, intensity, 0.0)

def AddIntensity(builder, intensity):
    EOObservation_IngestAddIntensity(builder, intensity)

def EOObservation_IngestAddBgIntensity(builder, bgIntensity):
    builder.PrependFloat64Slot(76, bgIntensity, 0.0)

def AddBgIntensity(builder, bgIntensity):
    EOObservation_IngestAddBgIntensity(builder, bgIntensity)

def EOObservation_IngestAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    EOObservation_IngestAddDescriptor(builder, descriptor)

def EOObservation_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EOObservation_IngestAddSource(builder, source)

def EOObservation_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EOObservation_IngestAddOrigin(builder, origin)

def EOObservation_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(80, dataMode, 0)

def AddDataMode(builder, dataMode):
    EOObservation_IngestAddDataMode(builder, dataMode)

def EOObservation_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    EOObservation_IngestAddTags(builder, tags)

def EOObservation_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return EOObservation_IngestStartTagsVector(builder, numElems)

def EOObservation_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EOObservation_IngestAddCreatedAt(builder, createdAt)

def EOObservation_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EOObservation_IngestAddCreatedBy(builder, createdBy)

def EOObservation_IngestAddZeroPtdUnc(builder, zeroPtdUnc):
    builder.PrependFloat64Slot(84, zeroPtdUnc, 0.0)

def AddZeroPtdUnc(builder, zeroPtdUnc):
    EOObservation_IngestAddZeroPtdUnc(builder, zeroPtdUnc)

def EOObservation_IngestAddEoobservationDetails(builder, eoobservationDetails):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(eoobservationDetails), 0)

def AddEoobservationDetails(builder, eoobservationDetails):
    EOObservation_IngestAddEoobservationDetails(builder, eoobservationDetails)

def EOObservation_IngestAddReferenceFrame(builder, referenceFrame):
    builder.PrependInt8Slot(86, referenceFrame, 0)

def AddReferenceFrame(builder, referenceFrame):
    EOObservation_IngestAddReferenceFrame(builder, referenceFrame)

def EOObservation_IngestAddSenReferenceFrame(builder, senReferenceFrame):
    builder.PrependInt8Slot(87, senReferenceFrame, 0)

def AddSenReferenceFrame(builder, senReferenceFrame):
    EOObservation_IngestAddSenReferenceFrame(builder, senReferenceFrame)

def EOObservation_IngestAddUmbra(builder, umbra):
    builder.PrependBoolSlot(88, umbra, 0)

def AddUmbra(builder, umbra):
    EOObservation_IngestAddUmbra(builder, umbra)

def EOObservation_IngestAddPenumbra(builder, penumbra):
    builder.PrependBoolSlot(89, penumbra, 0)

def AddPenumbra(builder, penumbra):
    EOObservation_IngestAddPenumbra(builder, penumbra)

def EOObservation_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EOObservation_IngestAddOrigNetwork(builder, origNetwork)

def EOObservation_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(91, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    EOObservation_IngestAddSourceDl(builder, sourceDl)

def EOObservation_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EOObservation_IngestAddType(builder, type)

def EOObservation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EOObservation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class EOObservation_IngestT(object):

    # EOObservation_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.corrQuality = 0.0  # type: float
        self.idOnOrbit = None  # type: str
        self.idSensor = None  # type: str
        self.idSkyImagery = None  # type: str
        self.collectMethod = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.transactionId = None  # type: str
        self.trackId = None  # type: str
        self.obPosition = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId = None  # type: str
        self.uct = False  # type: bool
        self.azimuth = 0.0  # type: float
        self.azimuthUnc = 0.0  # type: float
        self.azimuthBias = 0.0  # type: float
        self.azimuthRate = 0.0  # type: float
        self.elevation = 0.0  # type: float
        self.elevationUnc = 0.0  # type: float
        self.elevationBias = 0.0  # type: float
        self.elevationRate = 0.0  # type: float
        self.range = 0.0  # type: float
        self.rangeUnc = 0.0  # type: float
        self.rangeBias = 0.0  # type: float
        self.rangeRate = 0.0  # type: float
        self.rangeRateUnc = 0.0  # type: float
        self.ra = 0.0  # type: float
        self.raRate = 0.0  # type: float
        self.raUnc = 0.0  # type: float
        self.raBias = 0.0  # type: float
        self.declination = 0.0  # type: float
        self.declinationRate = 0.0  # type: float
        self.declinationUnc = 0.0  # type: float
        self.declinationBias = 0.0  # type: float
        self.losx = 0.0  # type: float
        self.losy = 0.0  # type: float
        self.losz = 0.0  # type: float
        self.losUnc = 0.0  # type: float
        self.losxvel = 0.0  # type: float
        self.losyvel = 0.0  # type: float
        self.loszvel = 0.0  # type: float
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.senx = 0.0  # type: float
        self.seny = 0.0  # type: float
        self.senz = 0.0  # type: float
        self.senvelx = 0.0  # type: float
        self.senvely = 0.0  # type: float
        self.senvelz = 0.0  # type: float
        self.senQuat = None  # type: List[str]
        self.fovCount = 0  # type: int
        self.expDuration = 0.0  # type: float
        self.zeroptd = 0.0  # type: float
        self.netObjSig = 0.0  # type: float
        self.netObjSigUnc = 0.0  # type: float
        self.mag = 0.0  # type: float
        self.magUnc = 0.0  # type: float
        self.magNormRange = 0.0  # type: float
        self.geolat = 0.0  # type: float
        self.geolon = 0.0  # type: float
        self.geoalt = 0.0  # type: float
        self.georange = 0.0  # type: float
        self.skyBkgrnd = 0.0  # type: float
        self.primaryExtinction = 0.0  # type: float
        self.primaryExtinctionUnc = 0.0  # type: float
        self.solarPhaseAngle = 0.0  # type: float
        self.solarEqPhaseAngle = 0.0  # type: float
        self.solarDecAngle = 0.0  # type: float
        self.shutterDelay = 0.0  # type: float
        self.timingBias = 0.0  # type: float
        self.rawFileUri = None  # type: str
        self.intensity = 0.0  # type: float
        self.bgIntensity = 0.0  # type: float
        self.descriptor = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.zeroPtdUnc = 0.0  # type: float
        self.eoobservationDetails = None  # type: str
        self.referenceFrame = 0  # type: int
        self.senReferenceFrame = 0  # type: int
        self.umbra = False  # type: bool
        self.penumbra = False  # type: bool
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.type = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eoobservationIngest = EOObservation_Ingest()
        eoobservationIngest.Init(buf, pos)
        return cls.InitFromObj(eoobservationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, eoobservationIngest):
        x = EOObservation_IngestT()
        x._UnPack(eoobservationIngest)
        return x

    # EOObservation_IngestT
    def _UnPack(self, eoobservationIngest):
        if eoobservationIngest is None:
            return
        self.id = eoobservationIngest.Id()
        self.classificationMarking = eoobservationIngest.ClassificationMarking()
        self.obTime = eoobservationIngest.ObTime()
        self.corrQuality = eoobservationIngest.CorrQuality()
        self.idOnOrbit = eoobservationIngest.IdOnOrbit()
        self.idSensor = eoobservationIngest.IdSensor()
        self.idSkyImagery = eoobservationIngest.IdSkyImagery()
        self.collectMethod = eoobservationIngest.CollectMethod()
        self.satNo = eoobservationIngest.SatNo()
        self.taskId = eoobservationIngest.TaskId()
        self.transactionId = eoobservationIngest.TransactionId()
        self.trackId = eoobservationIngest.TrackId()
        self.obPosition = eoobservationIngest.ObPosition()
        self.origObjectId = eoobservationIngest.OrigObjectId()
        self.origSensorId = eoobservationIngest.OrigSensorId()
        self.uct = eoobservationIngest.Uct()
        self.azimuth = eoobservationIngest.Azimuth()
        self.azimuthUnc = eoobservationIngest.AzimuthUnc()
        self.azimuthBias = eoobservationIngest.AzimuthBias()
        self.azimuthRate = eoobservationIngest.AzimuthRate()
        self.elevation = eoobservationIngest.Elevation()
        self.elevationUnc = eoobservationIngest.ElevationUnc()
        self.elevationBias = eoobservationIngest.ElevationBias()
        self.elevationRate = eoobservationIngest.ElevationRate()
        self.range = eoobservationIngest.Range()
        self.rangeUnc = eoobservationIngest.RangeUnc()
        self.rangeBias = eoobservationIngest.RangeBias()
        self.rangeRate = eoobservationIngest.RangeRate()
        self.rangeRateUnc = eoobservationIngest.RangeRateUnc()
        self.ra = eoobservationIngest.Ra()
        self.raRate = eoobservationIngest.RaRate()
        self.raUnc = eoobservationIngest.RaUnc()
        self.raBias = eoobservationIngest.RaBias()
        self.declination = eoobservationIngest.Declination()
        self.declinationRate = eoobservationIngest.DeclinationRate()
        self.declinationUnc = eoobservationIngest.DeclinationUnc()
        self.declinationBias = eoobservationIngest.DeclinationBias()
        self.losx = eoobservationIngest.Losx()
        self.losy = eoobservationIngest.Losy()
        self.losz = eoobservationIngest.Losz()
        self.losUnc = eoobservationIngest.LosUnc()
        self.losxvel = eoobservationIngest.Losxvel()
        self.losyvel = eoobservationIngest.Losyvel()
        self.loszvel = eoobservationIngest.Loszvel()
        self.senlat = eoobservationIngest.Senlat()
        self.senlon = eoobservationIngest.Senlon()
        self.senalt = eoobservationIngest.Senalt()
        self.senx = eoobservationIngest.Senx()
        self.seny = eoobservationIngest.Seny()
        self.senz = eoobservationIngest.Senz()
        self.senvelx = eoobservationIngest.Senvelx()
        self.senvely = eoobservationIngest.Senvely()
        self.senvelz = eoobservationIngest.Senvelz()
        if not eoobservationIngest.SenQuatIsNone():
            self.senQuat = []
            for i in range(eoobservationIngest.SenQuatLength()):
                self.senQuat.append(eoobservationIngest.SenQuat(i))
        self.fovCount = eoobservationIngest.FovCount()
        self.expDuration = eoobservationIngest.ExpDuration()
        self.zeroptd = eoobservationIngest.Zeroptd()
        self.netObjSig = eoobservationIngest.NetObjSig()
        self.netObjSigUnc = eoobservationIngest.NetObjSigUnc()
        self.mag = eoobservationIngest.Mag()
        self.magUnc = eoobservationIngest.MagUnc()
        self.magNormRange = eoobservationIngest.MagNormRange()
        self.geolat = eoobservationIngest.Geolat()
        self.geolon = eoobservationIngest.Geolon()
        self.geoalt = eoobservationIngest.Geoalt()
        self.georange = eoobservationIngest.Georange()
        self.skyBkgrnd = eoobservationIngest.SkyBkgrnd()
        self.primaryExtinction = eoobservationIngest.PrimaryExtinction()
        self.primaryExtinctionUnc = eoobservationIngest.PrimaryExtinctionUnc()
        self.solarPhaseAngle = eoobservationIngest.SolarPhaseAngle()
        self.solarEqPhaseAngle = eoobservationIngest.SolarEqPhaseAngle()
        self.solarDecAngle = eoobservationIngest.SolarDecAngle()
        self.shutterDelay = eoobservationIngest.ShutterDelay()
        self.timingBias = eoobservationIngest.TimingBias()
        self.rawFileUri = eoobservationIngest.RawFileUri()
        self.intensity = eoobservationIngest.Intensity()
        self.bgIntensity = eoobservationIngest.BgIntensity()
        self.descriptor = eoobservationIngest.Descriptor()
        self.source = eoobservationIngest.Source()
        self.origin = eoobservationIngest.Origin()
        self.dataMode = eoobservationIngest.DataMode()
        if not eoobservationIngest.TagsIsNone():
            self.tags = []
            for i in range(eoobservationIngest.TagsLength()):
                self.tags.append(eoobservationIngest.Tags(i))
        self.createdAt = eoobservationIngest.CreatedAt()
        self.createdBy = eoobservationIngest.CreatedBy()
        self.zeroPtdUnc = eoobservationIngest.ZeroPtdUnc()
        self.eoobservationDetails = eoobservationIngest.EoobservationDetails()
        self.referenceFrame = eoobservationIngest.ReferenceFrame()
        self.senReferenceFrame = eoobservationIngest.SenReferenceFrame()
        self.umbra = eoobservationIngest.Umbra()
        self.penumbra = eoobservationIngest.Penumbra()
        self.origNetwork = eoobservationIngest.OrigNetwork()
        self.sourceDl = eoobservationIngest.SourceDl()
        self.type = eoobservationIngest.Type()

    # EOObservation_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.idSkyImagery is not None:
            idSkyImagery = builder.CreateString(self.idSkyImagery)
        if self.collectMethod is not None:
            collectMethod = builder.CreateString(self.collectMethod)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.obPosition is not None:
            obPosition = builder.CreateString(self.obPosition)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.senQuat is not None:
            senQuatlist = []
            for i in range(len(self.senQuat)):
                senQuatlist.append(builder.CreateString(self.senQuat[i]))
            EOObservation_IngestStartSenQuatVector(builder, len(self.senQuat))
            for i in reversed(range(len(self.senQuat))):
                builder.PrependUOffsetTRelative(senQuatlist[i])
            senQuat = builder.EndVector()
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            EOObservation_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.eoobservationDetails is not None:
            eoobservationDetails = builder.CreateString(self.eoobservationDetails)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.type is not None:
            type = builder.CreateString(self.type)
        EOObservation_IngestStart(builder)
        if self.id is not None:
            EOObservation_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            EOObservation_IngestAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            EOObservation_IngestAddObTime(builder, obTime)
        EOObservation_IngestAddCorrQuality(builder, self.corrQuality)
        if self.idOnOrbit is not None:
            EOObservation_IngestAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor is not None:
            EOObservation_IngestAddIdSensor(builder, idSensor)
        if self.idSkyImagery is not None:
            EOObservation_IngestAddIdSkyImagery(builder, idSkyImagery)
        if self.collectMethod is not None:
            EOObservation_IngestAddCollectMethod(builder, collectMethod)
        EOObservation_IngestAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            EOObservation_IngestAddTaskId(builder, taskId)
        if self.transactionId is not None:
            EOObservation_IngestAddTransactionId(builder, transactionId)
        if self.trackId is not None:
            EOObservation_IngestAddTrackId(builder, trackId)
        if self.obPosition is not None:
            EOObservation_IngestAddObPosition(builder, obPosition)
        if self.origObjectId is not None:
            EOObservation_IngestAddOrigObjectId(builder, origObjectId)
        if self.origSensorId is not None:
            EOObservation_IngestAddOrigSensorId(builder, origSensorId)
        EOObservation_IngestAddUct(builder, self.uct)
        EOObservation_IngestAddAzimuth(builder, self.azimuth)
        EOObservation_IngestAddAzimuthUnc(builder, self.azimuthUnc)
        EOObservation_IngestAddAzimuthBias(builder, self.azimuthBias)
        EOObservation_IngestAddAzimuthRate(builder, self.azimuthRate)
        EOObservation_IngestAddElevation(builder, self.elevation)
        EOObservation_IngestAddElevationUnc(builder, self.elevationUnc)
        EOObservation_IngestAddElevationBias(builder, self.elevationBias)
        EOObservation_IngestAddElevationRate(builder, self.elevationRate)
        EOObservation_IngestAddRange(builder, self.range)
        EOObservation_IngestAddRangeUnc(builder, self.rangeUnc)
        EOObservation_IngestAddRangeBias(builder, self.rangeBias)
        EOObservation_IngestAddRangeRate(builder, self.rangeRate)
        EOObservation_IngestAddRangeRateUnc(builder, self.rangeRateUnc)
        EOObservation_IngestAddRa(builder, self.ra)
        EOObservation_IngestAddRaRate(builder, self.raRate)
        EOObservation_IngestAddRaUnc(builder, self.raUnc)
        EOObservation_IngestAddRaBias(builder, self.raBias)
        EOObservation_IngestAddDeclination(builder, self.declination)
        EOObservation_IngestAddDeclinationRate(builder, self.declinationRate)
        EOObservation_IngestAddDeclinationUnc(builder, self.declinationUnc)
        EOObservation_IngestAddDeclinationBias(builder, self.declinationBias)
        EOObservation_IngestAddLosx(builder, self.losx)
        EOObservation_IngestAddLosy(builder, self.losy)
        EOObservation_IngestAddLosz(builder, self.losz)
        EOObservation_IngestAddLosUnc(builder, self.losUnc)
        EOObservation_IngestAddLosxvel(builder, self.losxvel)
        EOObservation_IngestAddLosyvel(builder, self.losyvel)
        EOObservation_IngestAddLoszvel(builder, self.loszvel)
        EOObservation_IngestAddSenlat(builder, self.senlat)
        EOObservation_IngestAddSenlon(builder, self.senlon)
        EOObservation_IngestAddSenalt(builder, self.senalt)
        EOObservation_IngestAddSenx(builder, self.senx)
        EOObservation_IngestAddSeny(builder, self.seny)
        EOObservation_IngestAddSenz(builder, self.senz)
        EOObservation_IngestAddSenvelx(builder, self.senvelx)
        EOObservation_IngestAddSenvely(builder, self.senvely)
        EOObservation_IngestAddSenvelz(builder, self.senvelz)
        if self.senQuat is not None:
            EOObservation_IngestAddSenQuat(builder, senQuat)
        EOObservation_IngestAddFovCount(builder, self.fovCount)
        EOObservation_IngestAddExpDuration(builder, self.expDuration)
        EOObservation_IngestAddZeroptd(builder, self.zeroptd)
        EOObservation_IngestAddNetObjSig(builder, self.netObjSig)
        EOObservation_IngestAddNetObjSigUnc(builder, self.netObjSigUnc)
        EOObservation_IngestAddMag(builder, self.mag)
        EOObservation_IngestAddMagUnc(builder, self.magUnc)
        EOObservation_IngestAddMagNormRange(builder, self.magNormRange)
        EOObservation_IngestAddGeolat(builder, self.geolat)
        EOObservation_IngestAddGeolon(builder, self.geolon)
        EOObservation_IngestAddGeoalt(builder, self.geoalt)
        EOObservation_IngestAddGeorange(builder, self.georange)
        EOObservation_IngestAddSkyBkgrnd(builder, self.skyBkgrnd)
        EOObservation_IngestAddPrimaryExtinction(builder, self.primaryExtinction)
        EOObservation_IngestAddPrimaryExtinctionUnc(builder, self.primaryExtinctionUnc)
        EOObservation_IngestAddSolarPhaseAngle(builder, self.solarPhaseAngle)
        EOObservation_IngestAddSolarEqPhaseAngle(builder, self.solarEqPhaseAngle)
        EOObservation_IngestAddSolarDecAngle(builder, self.solarDecAngle)
        EOObservation_IngestAddShutterDelay(builder, self.shutterDelay)
        EOObservation_IngestAddTimingBias(builder, self.timingBias)
        if self.rawFileUri is not None:
            EOObservation_IngestAddRawFileUri(builder, rawFileUri)
        EOObservation_IngestAddIntensity(builder, self.intensity)
        EOObservation_IngestAddBgIntensity(builder, self.bgIntensity)
        if self.descriptor is not None:
            EOObservation_IngestAddDescriptor(builder, descriptor)
        if self.source is not None:
            EOObservation_IngestAddSource(builder, source)
        if self.origin is not None:
            EOObservation_IngestAddOrigin(builder, origin)
        EOObservation_IngestAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            EOObservation_IngestAddTags(builder, tags)
        if self.createdAt is not None:
            EOObservation_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EOObservation_IngestAddCreatedBy(builder, createdBy)
        EOObservation_IngestAddZeroPtdUnc(builder, self.zeroPtdUnc)
        if self.eoobservationDetails is not None:
            EOObservation_IngestAddEoobservationDetails(builder, eoobservationDetails)
        EOObservation_IngestAddReferenceFrame(builder, self.referenceFrame)
        EOObservation_IngestAddSenReferenceFrame(builder, self.senReferenceFrame)
        EOObservation_IngestAddUmbra(builder, self.umbra)
        EOObservation_IngestAddPenumbra(builder, self.penumbra)
        if self.origNetwork is not None:
            EOObservation_IngestAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            EOObservation_IngestAddSourceDl(builder, sourceDl)
        if self.type is not None:
            EOObservation_IngestAddType(builder, type)
        eoobservationIngest = EOObservation_IngestEnd(builder)
        return eoobservationIngest
