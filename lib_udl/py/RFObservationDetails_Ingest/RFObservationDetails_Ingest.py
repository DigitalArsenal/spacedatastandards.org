# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
class RFObservationDetails_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RFObservationDetails_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRFObservationDetails_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RFObservationDetails_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x46\x4F\x42", size_prefixed=size_prefixed)

    # RFObservationDetails_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: RFOBSERVATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFObservationDetails_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFObservationDetails_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservationDetails_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservationDetails_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
    # Example: /// Example: RF
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFObservationDetails_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 32258
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservationDetails_Ingest
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the track to which this observation belongs.
    # Example: /// Example: TRACK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFObservationDetails_Ingest
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIG-OBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIG-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Optional identifier provided by observation source to indicate the transponder used for this measurement.
    # Example: /// Example: TRANSPONDER-A
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def Transponder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # azimuth angle in degrees and J2000 coordinate frame.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the azimuth angle measurement, in degrees.
    # Example: /// Example: 2.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def AzimuthUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the azimuth in degrees per second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def AzimuthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # elevation in degrees and J2000 coordinate frame.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the elevation angle measurement, in degrees.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ElevationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the elevation in degrees per second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ElevationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target range in km.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range measurement, in kilometers.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def RangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the range in km/sec.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def RangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range rate measurement, in kilometers/second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def RangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target track or apparent range in km.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def TrackRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.2
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 80.3
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ELINT notation.
    # Example: /// Example: Ex. ELINT
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservationDetails_Ingest
    def Elnot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Center carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Nominal or expected center carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def NominalFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Start carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def StartFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # End carrier frequency in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def EndFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured power of the center carrier frequency in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def RelativeCarrierPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured spectrum analyzer power of the center carrier frequency in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def SpectrumAnalyzerPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def RelativeNoiseFloor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Reference signal level, in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ReferenceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Pgri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Confidence in the signal and its measurements and characterization.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Confidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True if the signal is incoming, false if outgoing.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Incoming(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Switch Point of the RFObservation record.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def SwitchPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def BaudRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Nominal or expected signal to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def NominalSnr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The antenna pointing dependent polarizer angle, in degrees.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Polarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    # Example: /// Example: H
    # Constraints: Minimum length = 0, Maximum length = 16
    # RFObservationDetails_Ingest
    def PolarityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Channel of the RFObservation record.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Measured carrier power over noise (dBW/Hz).
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def PowerOverNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expected carrier power over noise (dBW/Hz).
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def NominalPowerOverNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expected bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def NominalBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Resolution bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ResolutionBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Video bandwidth in Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def VideoBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measured Equivalent Isotopically Radiated Power in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Eirp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Expected Equivalent Isotopically Radiated Power in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def NominalEirp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum measured PSD value of the trace in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def MinPsd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum measured PSD value of the trace in dBW.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def MaxPsd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frequency Shift of the RFObservation record.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def FrequencyShift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peak of the RFObservation record.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Peak(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Antenna name of the RFObservation record.
    # Example: /// Example: Antenna1
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def AntennaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
    # Example: /// Example: DETECTED
    # Constraints: Minimum length = 0, Maximum length = 32
    # RFObservationDetails_Ingest
    def DetectionStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    # Example: /// Example: SURVEY
    # Constraints: Minimum length = 0, Maximum length = 32
    # RFObservationDetails_Ingest
    def CollectionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # RFObservationDetails_Ingest
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFObservationDetails_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFObservationDetails_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFObservationDetails_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Noise power density, in dBW-Hz.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def NoisePwrDensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Carrier standard (e.g. DVB-S2, 802.11g, etc.).
    # Example: /// Example: DVB-S2
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservationDetails_Ingest
    def CarrierStandard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
    # Example: /// Example: Auto
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservationDetails_Ingest
    def Modulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def InnerCodingRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def OuterCodingRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Transmit pulse shaping filter typ (e.g. RRC).
    # Example: /// Example: RRC
    # Constraints: Minimum length = 0, Maximum length = 10
    # RFObservationDetails_Ingest
    def TransmitFilterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transmit pulse shaping filter roll-off value.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def TransmitFilterRollOff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Symbol to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def SymbolToNoiseRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The ratio of bit errors per number of received bits.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def BitErrorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFObservationDetails_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFObservationDetails_Ingest
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URL containing additional information on this observation.
    # Example: /// Example: https://some-url
    # Constraints: Minimum length = 0, Maximum length = 2048
    # RFObservationDetails_Ingest
    def Url(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Frequencies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def FrequenciesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def FrequenciesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        return o == 0

    # Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Powers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def PowersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def PowersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        return o == 0

    # Array of signal to noise ratios of the signals, in dB.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Snrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def SnrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def SnrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        return o == 0

    # Array of measurement confidences.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def Confidences(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def ConfidencesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def ConfidencesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        return o == 0

    # Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
    # Example: /// Example: ['DETECTED']
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def DetectionStatuses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def DetectionStatusesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def DetectionStatusesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        return o == 0

    # Array of chipRates.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ChipRates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def ChipRatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def ChipRatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        return o == 0

    # Array of code taps.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def CodeTaps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def CodeTapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def CodeTapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        return o == 0

    # Array of code fills.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def CodeFills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def CodeFillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def CodeFillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        return o == 0

    # Array of code lengths.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def CodeLengths(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def CodeLengthsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def CodeLengthsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        return o == 0

    # Array of pnOrder.
    # Example: /// Example: [1, 2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def PnOrders(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def PnOrdersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def PnOrdersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        return o == 0

    # Array of optional source provided identifiers of the measurements/signals.
    # Example: /// Example: ['ID1', 'ID2']
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def SignalIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def SignalIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def SignalIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        return o == 0

    # Array of measured signal baud rates.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def BaudRates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def BaudRatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def BaudRatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        return o == 0

    # Array of optional source provided telemetry identifiers of the measurements/signals.
    # Example: /// Example: ['ID1', 'ID2']
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def TelemetryIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def TelemetryIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def TelemetryIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        return o == 0

    # Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ConstellationXpoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def ConstellationXpointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def ConstellationXpointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        return o == 0

    # Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
    # Example: /// Example: [1.1, 2.2]
    # Constraints: No constraints specified.
    # RFObservationDetails_Ingest
    def ConstellationYpoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFObservationDetails_Ingest
    def ConstellationYpointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFObservationDetails_Ingest
    def ConstellationYpointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        return o == 0

def RFObservationDetails_IngestStart(builder):
    builder.StartObject(97)

def Start(builder):
    RFObservationDetails_IngestStart(builder)

def RFObservationDetails_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RFObservationDetails_IngestAddId(builder, id)

def RFObservationDetails_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RFObservationDetails_IngestAddClassificationMarking(builder, classificationMarking)

def RFObservationDetails_IngestAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    RFObservationDetails_IngestAddObTime(builder, obTime)

def RFObservationDetails_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    RFObservationDetails_IngestAddIdOnOrbit(builder, idOnOrbit)

def RFObservationDetails_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    RFObservationDetails_IngestAddIdSensor(builder, idSensor)

def RFObservationDetails_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    RFObservationDetails_IngestAddType(builder, type)

def RFObservationDetails_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    RFObservationDetails_IngestAddSatNo(builder, satNo)

def RFObservationDetails_IngestAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    RFObservationDetails_IngestAddTaskId(builder, taskId)

def RFObservationDetails_IngestAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    RFObservationDetails_IngestAddTransactionId(builder, transactionId)

def RFObservationDetails_IngestAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    RFObservationDetails_IngestAddTrackId(builder, trackId)

def RFObservationDetails_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    RFObservationDetails_IngestAddOrigObjectId(builder, origObjectId)

def RFObservationDetails_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    RFObservationDetails_IngestAddOrigSensorId(builder, origSensorId)

def RFObservationDetails_IngestAddUct(builder, uct):
    builder.PrependBoolSlot(12, uct, 0)

def AddUct(builder, uct):
    RFObservationDetails_IngestAddUct(builder, uct)

def RFObservationDetails_IngestAddTransponder(builder, transponder):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(transponder), 0)

def AddTransponder(builder, transponder):
    RFObservationDetails_IngestAddTransponder(builder, transponder)

def RFObservationDetails_IngestAddAzimuth(builder, azimuth):
    builder.PrependFloat64Slot(14, azimuth, 0.0)

def AddAzimuth(builder, azimuth):
    RFObservationDetails_IngestAddAzimuth(builder, azimuth)

def RFObservationDetails_IngestAddAzimuthUnc(builder, azimuthUnc):
    builder.PrependFloat64Slot(15, azimuthUnc, 0.0)

def AddAzimuthUnc(builder, azimuthUnc):
    RFObservationDetails_IngestAddAzimuthUnc(builder, azimuthUnc)

def RFObservationDetails_IngestAddAzimuthRate(builder, azimuthRate):
    builder.PrependFloat64Slot(16, azimuthRate, 0.0)

def AddAzimuthRate(builder, azimuthRate):
    RFObservationDetails_IngestAddAzimuthRate(builder, azimuthRate)

def RFObservationDetails_IngestAddElevation(builder, elevation):
    builder.PrependFloat64Slot(17, elevation, 0.0)

def AddElevation(builder, elevation):
    RFObservationDetails_IngestAddElevation(builder, elevation)

def RFObservationDetails_IngestAddElevationUnc(builder, elevationUnc):
    builder.PrependFloat64Slot(18, elevationUnc, 0.0)

def AddElevationUnc(builder, elevationUnc):
    RFObservationDetails_IngestAddElevationUnc(builder, elevationUnc)

def RFObservationDetails_IngestAddElevationRate(builder, elevationRate):
    builder.PrependFloat64Slot(19, elevationRate, 0.0)

def AddElevationRate(builder, elevationRate):
    RFObservationDetails_IngestAddElevationRate(builder, elevationRate)

def RFObservationDetails_IngestAddRange(builder, range):
    builder.PrependFloat64Slot(20, range, 0.0)

def AddRange(builder, range):
    RFObservationDetails_IngestAddRange(builder, range)

def RFObservationDetails_IngestAddRangeUnc(builder, rangeUnc):
    builder.PrependFloat64Slot(21, rangeUnc, 0.0)

def AddRangeUnc(builder, rangeUnc):
    RFObservationDetails_IngestAddRangeUnc(builder, rangeUnc)

def RFObservationDetails_IngestAddRangeRate(builder, rangeRate):
    builder.PrependFloat64Slot(22, rangeRate, 0.0)

def AddRangeRate(builder, rangeRate):
    RFObservationDetails_IngestAddRangeRate(builder, rangeRate)

def RFObservationDetails_IngestAddRangeRateUnc(builder, rangeRateUnc):
    builder.PrependFloat64Slot(23, rangeRateUnc, 0.0)

def AddRangeRateUnc(builder, rangeRateUnc):
    RFObservationDetails_IngestAddRangeRateUnc(builder, rangeRateUnc)

def RFObservationDetails_IngestAddTrackRange(builder, trackRange):
    builder.PrependFloat64Slot(24, trackRange, 0.0)

def AddTrackRange(builder, trackRange):
    RFObservationDetails_IngestAddTrackRange(builder, trackRange)

def RFObservationDetails_IngestAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(25, senlat, 0.0)

def AddSenlat(builder, senlat):
    RFObservationDetails_IngestAddSenlat(builder, senlat)

def RFObservationDetails_IngestAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(26, senlon, 0.0)

def AddSenlon(builder, senlon):
    RFObservationDetails_IngestAddSenlon(builder, senlon)

def RFObservationDetails_IngestAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(27, senalt, 0.0)

def AddSenalt(builder, senalt):
    RFObservationDetails_IngestAddSenalt(builder, senalt)

def RFObservationDetails_IngestAddElnot(builder, elnot):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(elnot), 0)

def AddElnot(builder, elnot):
    RFObservationDetails_IngestAddElnot(builder, elnot)

def RFObservationDetails_IngestAddFrequency(builder, frequency):
    builder.PrependFloat64Slot(29, frequency, 0.0)

def AddFrequency(builder, frequency):
    RFObservationDetails_IngestAddFrequency(builder, frequency)

def RFObservationDetails_IngestAddNominalFrequency(builder, nominalFrequency):
    builder.PrependFloat64Slot(30, nominalFrequency, 0.0)

def AddNominalFrequency(builder, nominalFrequency):
    RFObservationDetails_IngestAddNominalFrequency(builder, nominalFrequency)

def RFObservationDetails_IngestAddStartFrequency(builder, startFrequency):
    builder.PrependFloat64Slot(31, startFrequency, 0.0)

def AddStartFrequency(builder, startFrequency):
    RFObservationDetails_IngestAddStartFrequency(builder, startFrequency)

def RFObservationDetails_IngestAddEndFrequency(builder, endFrequency):
    builder.PrependFloat64Slot(32, endFrequency, 0.0)

def AddEndFrequency(builder, endFrequency):
    RFObservationDetails_IngestAddEndFrequency(builder, endFrequency)

def RFObservationDetails_IngestAddRelativeCarrierPower(builder, relativeCarrierPower):
    builder.PrependFloat64Slot(33, relativeCarrierPower, 0.0)

def AddRelativeCarrierPower(builder, relativeCarrierPower):
    RFObservationDetails_IngestAddRelativeCarrierPower(builder, relativeCarrierPower)

def RFObservationDetails_IngestAddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower):
    builder.PrependFloat64Slot(34, spectrumAnalyzerPower, 0.0)

def AddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower):
    RFObservationDetails_IngestAddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower)

def RFObservationDetails_IngestAddRelativeNoiseFloor(builder, relativeNoiseFloor):
    builder.PrependFloat64Slot(35, relativeNoiseFloor, 0.0)

def AddRelativeNoiseFloor(builder, relativeNoiseFloor):
    RFObservationDetails_IngestAddRelativeNoiseFloor(builder, relativeNoiseFloor)

def RFObservationDetails_IngestAddReferenceLevel(builder, referenceLevel):
    builder.PrependFloat64Slot(36, referenceLevel, 0.0)

def AddReferenceLevel(builder, referenceLevel):
    RFObservationDetails_IngestAddReferenceLevel(builder, referenceLevel)

def RFObservationDetails_IngestAddPgri(builder, pgri):
    builder.PrependFloat64Slot(37, pgri, 0.0)

def AddPgri(builder, pgri):
    RFObservationDetails_IngestAddPgri(builder, pgri)

def RFObservationDetails_IngestAddConfidence(builder, confidence):
    builder.PrependFloat64Slot(38, confidence, 0.0)

def AddConfidence(builder, confidence):
    RFObservationDetails_IngestAddConfidence(builder, confidence)

def RFObservationDetails_IngestAddIncoming(builder, incoming):
    builder.PrependBoolSlot(39, incoming, 0)

def AddIncoming(builder, incoming):
    RFObservationDetails_IngestAddIncoming(builder, incoming)

def RFObservationDetails_IngestAddSwitchPoint(builder, switchPoint):
    builder.PrependInt32Slot(40, switchPoint, 0)

def AddSwitchPoint(builder, switchPoint):
    RFObservationDetails_IngestAddSwitchPoint(builder, switchPoint)

def RFObservationDetails_IngestAddBaudRate(builder, baudRate):
    builder.PrependFloat64Slot(41, baudRate, 0.0)

def AddBaudRate(builder, baudRate):
    RFObservationDetails_IngestAddBaudRate(builder, baudRate)

def RFObservationDetails_IngestAddSnr(builder, snr):
    builder.PrependFloat64Slot(42, snr, 0.0)

def AddSnr(builder, snr):
    RFObservationDetails_IngestAddSnr(builder, snr)

def RFObservationDetails_IngestAddNominalSnr(builder, nominalSnr):
    builder.PrependFloat64Slot(43, nominalSnr, 0.0)

def AddNominalSnr(builder, nominalSnr):
    RFObservationDetails_IngestAddNominalSnr(builder, nominalSnr)

def RFObservationDetails_IngestAddPolarity(builder, polarity):
    builder.PrependFloat64Slot(44, polarity, 0.0)

def AddPolarity(builder, polarity):
    RFObservationDetails_IngestAddPolarity(builder, polarity)

def RFObservationDetails_IngestAddPolarityType(builder, polarityType):
    builder.PrependInt8Slot(45, polarityType, 0)

def AddPolarityType(builder, polarityType):
    RFObservationDetails_IngestAddPolarityType(builder, polarityType)

def RFObservationDetails_IngestAddChannel(builder, channel):
    builder.PrependInt32Slot(46, channel, 0)

def AddChannel(builder, channel):
    RFObservationDetails_IngestAddChannel(builder, channel)

def RFObservationDetails_IngestAddPowerOverNoise(builder, powerOverNoise):
    builder.PrependFloat64Slot(47, powerOverNoise, 0.0)

def AddPowerOverNoise(builder, powerOverNoise):
    RFObservationDetails_IngestAddPowerOverNoise(builder, powerOverNoise)

def RFObservationDetails_IngestAddNominalPowerOverNoise(builder, nominalPowerOverNoise):
    builder.PrependFloat64Slot(48, nominalPowerOverNoise, 0.0)

def AddNominalPowerOverNoise(builder, nominalPowerOverNoise):
    RFObservationDetails_IngestAddNominalPowerOverNoise(builder, nominalPowerOverNoise)

def RFObservationDetails_IngestAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(49, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    RFObservationDetails_IngestAddBandwidth(builder, bandwidth)

def RFObservationDetails_IngestAddNominalBandwidth(builder, nominalBandwidth):
    builder.PrependFloat64Slot(50, nominalBandwidth, 0.0)

def AddNominalBandwidth(builder, nominalBandwidth):
    RFObservationDetails_IngestAddNominalBandwidth(builder, nominalBandwidth)

def RFObservationDetails_IngestAddResolutionBandwidth(builder, resolutionBandwidth):
    builder.PrependFloat64Slot(51, resolutionBandwidth, 0.0)

def AddResolutionBandwidth(builder, resolutionBandwidth):
    RFObservationDetails_IngestAddResolutionBandwidth(builder, resolutionBandwidth)

def RFObservationDetails_IngestAddVideoBandwidth(builder, videoBandwidth):
    builder.PrependFloat64Slot(52, videoBandwidth, 0.0)

def AddVideoBandwidth(builder, videoBandwidth):
    RFObservationDetails_IngestAddVideoBandwidth(builder, videoBandwidth)

def RFObservationDetails_IngestAddEirp(builder, eirp):
    builder.PrependFloat64Slot(53, eirp, 0.0)

def AddEirp(builder, eirp):
    RFObservationDetails_IngestAddEirp(builder, eirp)

def RFObservationDetails_IngestAddNominalEirp(builder, nominalEirp):
    builder.PrependFloat64Slot(54, nominalEirp, 0.0)

def AddNominalEirp(builder, nominalEirp):
    RFObservationDetails_IngestAddNominalEirp(builder, nominalEirp)

def RFObservationDetails_IngestAddMinPsd(builder, minPsd):
    builder.PrependFloat64Slot(55, minPsd, 0.0)

def AddMinPsd(builder, minPsd):
    RFObservationDetails_IngestAddMinPsd(builder, minPsd)

def RFObservationDetails_IngestAddMaxPsd(builder, maxPsd):
    builder.PrependFloat64Slot(56, maxPsd, 0.0)

def AddMaxPsd(builder, maxPsd):
    RFObservationDetails_IngestAddMaxPsd(builder, maxPsd)

def RFObservationDetails_IngestAddFrequencyShift(builder, frequencyShift):
    builder.PrependFloat64Slot(57, frequencyShift, 0.0)

def AddFrequencyShift(builder, frequencyShift):
    RFObservationDetails_IngestAddFrequencyShift(builder, frequencyShift)

def RFObservationDetails_IngestAddPeak(builder, peak):
    builder.PrependBoolSlot(58, peak, 0)

def AddPeak(builder, peak):
    RFObservationDetails_IngestAddPeak(builder, peak)

def RFObservationDetails_IngestAddAntennaName(builder, antennaName):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(antennaName), 0)

def AddAntennaName(builder, antennaName):
    RFObservationDetails_IngestAddAntennaName(builder, antennaName)

def RFObservationDetails_IngestAddDetectionStatus(builder, detectionStatus):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(detectionStatus), 0)

def AddDetectionStatus(builder, detectionStatus):
    RFObservationDetails_IngestAddDetectionStatus(builder, detectionStatus)

def RFObservationDetails_IngestAddCollectionMode(builder, collectionMode):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(collectionMode), 0)

def AddCollectionMode(builder, collectionMode):
    RFObservationDetails_IngestAddCollectionMode(builder, collectionMode)

def RFObservationDetails_IngestAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    RFObservationDetails_IngestAddRawFileUri(builder, rawFileUri)

def RFObservationDetails_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RFObservationDetails_IngestAddSource(builder, source)

def RFObservationDetails_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RFObservationDetails_IngestAddOrigin(builder, origin)

def RFObservationDetails_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(65, dataMode, 0)

def AddDataMode(builder, dataMode):
    RFObservationDetails_IngestAddDataMode(builder, dataMode)

def RFObservationDetails_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    RFObservationDetails_IngestAddTags(builder, tags)

def RFObservationDetails_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return RFObservationDetails_IngestStartTagsVector(builder, numElems)

def RFObservationDetails_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RFObservationDetails_IngestAddCreatedAt(builder, createdAt)

def RFObservationDetails_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RFObservationDetails_IngestAddCreatedBy(builder, createdBy)

def RFObservationDetails_IngestAddNoisePwrDensity(builder, noisePwrDensity):
    builder.PrependFloat64Slot(69, noisePwrDensity, 0.0)

def AddNoisePwrDensity(builder, noisePwrDensity):
    RFObservationDetails_IngestAddNoisePwrDensity(builder, noisePwrDensity)

def RFObservationDetails_IngestAddCarrierStandard(builder, carrierStandard):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(carrierStandard), 0)

def AddCarrierStandard(builder, carrierStandard):
    RFObservationDetails_IngestAddCarrierStandard(builder, carrierStandard)

def RFObservationDetails_IngestAddModulation(builder, modulation):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(modulation), 0)

def AddModulation(builder, modulation):
    RFObservationDetails_IngestAddModulation(builder, modulation)

def RFObservationDetails_IngestAddInnerCodingRate(builder, innerCodingRate):
    builder.PrependInt32Slot(72, innerCodingRate, 0)

def AddInnerCodingRate(builder, innerCodingRate):
    RFObservationDetails_IngestAddInnerCodingRate(builder, innerCodingRate)

def RFObservationDetails_IngestAddOuterCodingRate(builder, outerCodingRate):
    builder.PrependInt32Slot(73, outerCodingRate, 0)

def AddOuterCodingRate(builder, outerCodingRate):
    RFObservationDetails_IngestAddOuterCodingRate(builder, outerCodingRate)

def RFObservationDetails_IngestAddTransmitFilterType(builder, transmitFilterType):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(transmitFilterType), 0)

def AddTransmitFilterType(builder, transmitFilterType):
    RFObservationDetails_IngestAddTransmitFilterType(builder, transmitFilterType)

def RFObservationDetails_IngestAddTransmitFilterRollOff(builder, transmitFilterRollOff):
    builder.PrependFloat64Slot(75, transmitFilterRollOff, 0.0)

def AddTransmitFilterRollOff(builder, transmitFilterRollOff):
    RFObservationDetails_IngestAddTransmitFilterRollOff(builder, transmitFilterRollOff)

def RFObservationDetails_IngestAddSymbolToNoiseRatio(builder, symbolToNoiseRatio):
    builder.PrependFloat64Slot(76, symbolToNoiseRatio, 0.0)

def AddSymbolToNoiseRatio(builder, symbolToNoiseRatio):
    RFObservationDetails_IngestAddSymbolToNoiseRatio(builder, symbolToNoiseRatio)

def RFObservationDetails_IngestAddBitErrorRate(builder, bitErrorRate):
    builder.PrependFloat64Slot(77, bitErrorRate, 0.0)

def AddBitErrorRate(builder, bitErrorRate):
    RFObservationDetails_IngestAddBitErrorRate(builder, bitErrorRate)

def RFObservationDetails_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    RFObservationDetails_IngestAddOrigNetwork(builder, origNetwork)

def RFObservationDetails_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    RFObservationDetails_IngestAddSourceDl(builder, sourceDl)

def RFObservationDetails_IngestAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    RFObservationDetails_IngestAddDescriptor(builder, descriptor)

def RFObservationDetails_IngestAddUrl(builder, url):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(url), 0)

def AddUrl(builder, url):
    RFObservationDetails_IngestAddUrl(builder, url)

def RFObservationDetails_IngestAddFrequencies(builder, frequencies):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(frequencies), 0)

def AddFrequencies(builder, frequencies):
    RFObservationDetails_IngestAddFrequencies(builder, frequencies)

def RFObservationDetails_IngestStartFrequenciesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFrequenciesVector(builder, numElems):
    return RFObservationDetails_IngestStartFrequenciesVector(builder, numElems)

def RFObservationDetails_IngestAddPowers(builder, powers):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(powers), 0)

def AddPowers(builder, powers):
    RFObservationDetails_IngestAddPowers(builder, powers)

def RFObservationDetails_IngestStartPowersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPowersVector(builder, numElems):
    return RFObservationDetails_IngestStartPowersVector(builder, numElems)

def RFObservationDetails_IngestAddSnrs(builder, snrs):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(snrs), 0)

def AddSnrs(builder, snrs):
    RFObservationDetails_IngestAddSnrs(builder, snrs)

def RFObservationDetails_IngestStartSnrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSnrsVector(builder, numElems):
    return RFObservationDetails_IngestStartSnrsVector(builder, numElems)

def RFObservationDetails_IngestAddConfidences(builder, confidences):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(confidences), 0)

def AddConfidences(builder, confidences):
    RFObservationDetails_IngestAddConfidences(builder, confidences)

def RFObservationDetails_IngestStartConfidencesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConfidencesVector(builder, numElems):
    return RFObservationDetails_IngestStartConfidencesVector(builder, numElems)

def RFObservationDetails_IngestAddDetectionStatuses(builder, detectionStatuses):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(detectionStatuses), 0)

def AddDetectionStatuses(builder, detectionStatuses):
    RFObservationDetails_IngestAddDetectionStatuses(builder, detectionStatuses)

def RFObservationDetails_IngestStartDetectionStatusesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDetectionStatusesVector(builder, numElems):
    return RFObservationDetails_IngestStartDetectionStatusesVector(builder, numElems)

def RFObservationDetails_IngestAddChipRates(builder, chipRates):
    builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(chipRates), 0)

def AddChipRates(builder, chipRates):
    RFObservationDetails_IngestAddChipRates(builder, chipRates)

def RFObservationDetails_IngestStartChipRatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChipRatesVector(builder, numElems):
    return RFObservationDetails_IngestStartChipRatesVector(builder, numElems)

def RFObservationDetails_IngestAddCodeTaps(builder, codeTaps):
    builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(codeTaps), 0)

def AddCodeTaps(builder, codeTaps):
    RFObservationDetails_IngestAddCodeTaps(builder, codeTaps)

def RFObservationDetails_IngestStartCodeTapsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCodeTapsVector(builder, numElems):
    return RFObservationDetails_IngestStartCodeTapsVector(builder, numElems)

def RFObservationDetails_IngestAddCodeFills(builder, codeFills):
    builder.PrependUOffsetTRelativeSlot(89, flatbuffers.number_types.UOffsetTFlags.py_type(codeFills), 0)

def AddCodeFills(builder, codeFills):
    RFObservationDetails_IngestAddCodeFills(builder, codeFills)

def RFObservationDetails_IngestStartCodeFillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCodeFillsVector(builder, numElems):
    return RFObservationDetails_IngestStartCodeFillsVector(builder, numElems)

def RFObservationDetails_IngestAddCodeLengths(builder, codeLengths):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(codeLengths), 0)

def AddCodeLengths(builder, codeLengths):
    RFObservationDetails_IngestAddCodeLengths(builder, codeLengths)

def RFObservationDetails_IngestStartCodeLengthsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCodeLengthsVector(builder, numElems):
    return RFObservationDetails_IngestStartCodeLengthsVector(builder, numElems)

def RFObservationDetails_IngestAddPnOrders(builder, pnOrders):
    builder.PrependUOffsetTRelativeSlot(91, flatbuffers.number_types.UOffsetTFlags.py_type(pnOrders), 0)

def AddPnOrders(builder, pnOrders):
    RFObservationDetails_IngestAddPnOrders(builder, pnOrders)

def RFObservationDetails_IngestStartPnOrdersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPnOrdersVector(builder, numElems):
    return RFObservationDetails_IngestStartPnOrdersVector(builder, numElems)

def RFObservationDetails_IngestAddSignalIds(builder, signalIds):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(signalIds), 0)

def AddSignalIds(builder, signalIds):
    RFObservationDetails_IngestAddSignalIds(builder, signalIds)

def RFObservationDetails_IngestStartSignalIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSignalIdsVector(builder, numElems):
    return RFObservationDetails_IngestStartSignalIdsVector(builder, numElems)

def RFObservationDetails_IngestAddBaudRates(builder, baudRates):
    builder.PrependUOffsetTRelativeSlot(93, flatbuffers.number_types.UOffsetTFlags.py_type(baudRates), 0)

def AddBaudRates(builder, baudRates):
    RFObservationDetails_IngestAddBaudRates(builder, baudRates)

def RFObservationDetails_IngestStartBaudRatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBaudRatesVector(builder, numElems):
    return RFObservationDetails_IngestStartBaudRatesVector(builder, numElems)

def RFObservationDetails_IngestAddTelemetryIds(builder, telemetryIds):
    builder.PrependUOffsetTRelativeSlot(94, flatbuffers.number_types.UOffsetTFlags.py_type(telemetryIds), 0)

def AddTelemetryIds(builder, telemetryIds):
    RFObservationDetails_IngestAddTelemetryIds(builder, telemetryIds)

def RFObservationDetails_IngestStartTelemetryIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTelemetryIdsVector(builder, numElems):
    return RFObservationDetails_IngestStartTelemetryIdsVector(builder, numElems)

def RFObservationDetails_IngestAddConstellationXpoints(builder, constellationXpoints):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(constellationXpoints), 0)

def AddConstellationXpoints(builder, constellationXpoints):
    RFObservationDetails_IngestAddConstellationXpoints(builder, constellationXpoints)

def RFObservationDetails_IngestStartConstellationXpointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConstellationXpointsVector(builder, numElems):
    return RFObservationDetails_IngestStartConstellationXpointsVector(builder, numElems)

def RFObservationDetails_IngestAddConstellationYpoints(builder, constellationYpoints):
    builder.PrependUOffsetTRelativeSlot(96, flatbuffers.number_types.UOffsetTFlags.py_type(constellationYpoints), 0)

def AddConstellationYpoints(builder, constellationYpoints):
    RFObservationDetails_IngestAddConstellationYpoints(builder, constellationYpoints)

def RFObservationDetails_IngestStartConstellationYpointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConstellationYpointsVector(builder, numElems):
    return RFObservationDetails_IngestStartConstellationYpointsVector(builder, numElems)

def RFObservationDetails_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return RFObservationDetails_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class RFObservationDetails_IngestT(object):

    # RFObservationDetails_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSensor = None  # type: str
        self.type = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.transactionId = None  # type: str
        self.trackId = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId = None  # type: str
        self.uct = False  # type: bool
        self.transponder = None  # type: str
        self.azimuth = 0.0  # type: float
        self.azimuthUnc = 0.0  # type: float
        self.azimuthRate = 0.0  # type: float
        self.elevation = 0.0  # type: float
        self.elevationUnc = 0.0  # type: float
        self.elevationRate = 0.0  # type: float
        self.range = 0.0  # type: float
        self.rangeUnc = 0.0  # type: float
        self.rangeRate = 0.0  # type: float
        self.rangeRateUnc = 0.0  # type: float
        self.trackRange = 0.0  # type: float
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.elnot = None  # type: str
        self.frequency = 0.0  # type: float
        self.nominalFrequency = 0.0  # type: float
        self.startFrequency = 0.0  # type: float
        self.endFrequency = 0.0  # type: float
        self.relativeCarrierPower = 0.0  # type: float
        self.spectrumAnalyzerPower = 0.0  # type: float
        self.relativeNoiseFloor = 0.0  # type: float
        self.referenceLevel = 0.0  # type: float
        self.pgri = 0.0  # type: float
        self.confidence = 0.0  # type: float
        self.incoming = False  # type: bool
        self.switchPoint = 0  # type: int
        self.baudRate = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.nominalSnr = 0.0  # type: float
        self.polarity = 0.0  # type: float
        self.polarityType = 0  # type: int
        self.channel = 0  # type: int
        self.powerOverNoise = 0.0  # type: float
        self.nominalPowerOverNoise = 0.0  # type: float
        self.bandwidth = 0.0  # type: float
        self.nominalBandwidth = 0.0  # type: float
        self.resolutionBandwidth = 0.0  # type: float
        self.videoBandwidth = 0.0  # type: float
        self.eirp = 0.0  # type: float
        self.nominalEirp = 0.0  # type: float
        self.minPsd = 0.0  # type: float
        self.maxPsd = 0.0  # type: float
        self.frequencyShift = 0.0  # type: float
        self.peak = False  # type: bool
        self.antennaName = None  # type: str
        self.detectionStatus = None  # type: str
        self.collectionMode = None  # type: str
        self.rawFileUri = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.noisePwrDensity = 0.0  # type: float
        self.carrierStandard = None  # type: str
        self.modulation = None  # type: str
        self.innerCodingRate = 0  # type: int
        self.outerCodingRate = 0  # type: int
        self.transmitFilterType = None  # type: str
        self.transmitFilterRollOff = 0.0  # type: float
        self.symbolToNoiseRatio = 0.0  # type: float
        self.bitErrorRate = 0.0  # type: float
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.descriptor = None  # type: str
        self.url = None  # type: str
        self.frequencies = None  # type: List[str]
        self.powers = None  # type: List[str]
        self.snrs = None  # type: List[str]
        self.confidences = None  # type: List[str]
        self.detectionStatuses = None  # type: List[str]
        self.chipRates = None  # type: List[str]
        self.codeTaps = None  # type: List[str]
        self.codeFills = None  # type: List[str]
        self.codeLengths = None  # type: List[str]
        self.pnOrders = None  # type: List[str]
        self.signalIds = None  # type: List[str]
        self.baudRates = None  # type: List[str]
        self.telemetryIds = None  # type: List[str]
        self.constellationXpoints = None  # type: List[str]
        self.constellationYpoints = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rfobservationDetailsIngest = RFObservationDetails_Ingest()
        rfobservationDetailsIngest.Init(buf, pos)
        return cls.InitFromObj(rfobservationDetailsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rfobservationDetailsIngest):
        x = RFObservationDetails_IngestT()
        x._UnPack(rfobservationDetailsIngest)
        return x

    # RFObservationDetails_IngestT
    def _UnPack(self, rfobservationDetailsIngest):
        if rfobservationDetailsIngest is None:
            return
        self.id = rfobservationDetailsIngest.Id()
        self.classificationMarking = rfobservationDetailsIngest.ClassificationMarking()
        self.obTime = rfobservationDetailsIngest.ObTime()
        self.idOnOrbit = rfobservationDetailsIngest.IdOnOrbit()
        self.idSensor = rfobservationDetailsIngest.IdSensor()
        self.type = rfobservationDetailsIngest.Type()
        self.satNo = rfobservationDetailsIngest.SatNo()
        self.taskId = rfobservationDetailsIngest.TaskId()
        self.transactionId = rfobservationDetailsIngest.TransactionId()
        self.trackId = rfobservationDetailsIngest.TrackId()
        self.origObjectId = rfobservationDetailsIngest.OrigObjectId()
        self.origSensorId = rfobservationDetailsIngest.OrigSensorId()
        self.uct = rfobservationDetailsIngest.Uct()
        self.transponder = rfobservationDetailsIngest.Transponder()
        self.azimuth = rfobservationDetailsIngest.Azimuth()
        self.azimuthUnc = rfobservationDetailsIngest.AzimuthUnc()
        self.azimuthRate = rfobservationDetailsIngest.AzimuthRate()
        self.elevation = rfobservationDetailsIngest.Elevation()
        self.elevationUnc = rfobservationDetailsIngest.ElevationUnc()
        self.elevationRate = rfobservationDetailsIngest.ElevationRate()
        self.range = rfobservationDetailsIngest.Range()
        self.rangeUnc = rfobservationDetailsIngest.RangeUnc()
        self.rangeRate = rfobservationDetailsIngest.RangeRate()
        self.rangeRateUnc = rfobservationDetailsIngest.RangeRateUnc()
        self.trackRange = rfobservationDetailsIngest.TrackRange()
        self.senlat = rfobservationDetailsIngest.Senlat()
        self.senlon = rfobservationDetailsIngest.Senlon()
        self.senalt = rfobservationDetailsIngest.Senalt()
        self.elnot = rfobservationDetailsIngest.Elnot()
        self.frequency = rfobservationDetailsIngest.Frequency()
        self.nominalFrequency = rfobservationDetailsIngest.NominalFrequency()
        self.startFrequency = rfobservationDetailsIngest.StartFrequency()
        self.endFrequency = rfobservationDetailsIngest.EndFrequency()
        self.relativeCarrierPower = rfobservationDetailsIngest.RelativeCarrierPower()
        self.spectrumAnalyzerPower = rfobservationDetailsIngest.SpectrumAnalyzerPower()
        self.relativeNoiseFloor = rfobservationDetailsIngest.RelativeNoiseFloor()
        self.referenceLevel = rfobservationDetailsIngest.ReferenceLevel()
        self.pgri = rfobservationDetailsIngest.Pgri()
        self.confidence = rfobservationDetailsIngest.Confidence()
        self.incoming = rfobservationDetailsIngest.Incoming()
        self.switchPoint = rfobservationDetailsIngest.SwitchPoint()
        self.baudRate = rfobservationDetailsIngest.BaudRate()
        self.snr = rfobservationDetailsIngest.Snr()
        self.nominalSnr = rfobservationDetailsIngest.NominalSnr()
        self.polarity = rfobservationDetailsIngest.Polarity()
        self.polarityType = rfobservationDetailsIngest.PolarityType()
        self.channel = rfobservationDetailsIngest.Channel()
        self.powerOverNoise = rfobservationDetailsIngest.PowerOverNoise()
        self.nominalPowerOverNoise = rfobservationDetailsIngest.NominalPowerOverNoise()
        self.bandwidth = rfobservationDetailsIngest.Bandwidth()
        self.nominalBandwidth = rfobservationDetailsIngest.NominalBandwidth()
        self.resolutionBandwidth = rfobservationDetailsIngest.ResolutionBandwidth()
        self.videoBandwidth = rfobservationDetailsIngest.VideoBandwidth()
        self.eirp = rfobservationDetailsIngest.Eirp()
        self.nominalEirp = rfobservationDetailsIngest.NominalEirp()
        self.minPsd = rfobservationDetailsIngest.MinPsd()
        self.maxPsd = rfobservationDetailsIngest.MaxPsd()
        self.frequencyShift = rfobservationDetailsIngest.FrequencyShift()
        self.peak = rfobservationDetailsIngest.Peak()
        self.antennaName = rfobservationDetailsIngest.AntennaName()
        self.detectionStatus = rfobservationDetailsIngest.DetectionStatus()
        self.collectionMode = rfobservationDetailsIngest.CollectionMode()
        self.rawFileUri = rfobservationDetailsIngest.RawFileUri()
        self.source = rfobservationDetailsIngest.Source()
        self.origin = rfobservationDetailsIngest.Origin()
        self.dataMode = rfobservationDetailsIngest.DataMode()
        if not rfobservationDetailsIngest.TagsIsNone():
            self.tags = []
            for i in range(rfobservationDetailsIngest.TagsLength()):
                self.tags.append(rfobservationDetailsIngest.Tags(i))
        self.createdAt = rfobservationDetailsIngest.CreatedAt()
        self.createdBy = rfobservationDetailsIngest.CreatedBy()
        self.noisePwrDensity = rfobservationDetailsIngest.NoisePwrDensity()
        self.carrierStandard = rfobservationDetailsIngest.CarrierStandard()
        self.modulation = rfobservationDetailsIngest.Modulation()
        self.innerCodingRate = rfobservationDetailsIngest.InnerCodingRate()
        self.outerCodingRate = rfobservationDetailsIngest.OuterCodingRate()
        self.transmitFilterType = rfobservationDetailsIngest.TransmitFilterType()
        self.transmitFilterRollOff = rfobservationDetailsIngest.TransmitFilterRollOff()
        self.symbolToNoiseRatio = rfobservationDetailsIngest.SymbolToNoiseRatio()
        self.bitErrorRate = rfobservationDetailsIngest.BitErrorRate()
        self.origNetwork = rfobservationDetailsIngest.OrigNetwork()
        self.sourceDl = rfobservationDetailsIngest.SourceDl()
        self.descriptor = rfobservationDetailsIngest.Descriptor()
        self.url = rfobservationDetailsIngest.Url()
        if not rfobservationDetailsIngest.FrequenciesIsNone():
            self.frequencies = []
            for i in range(rfobservationDetailsIngest.FrequenciesLength()):
                self.frequencies.append(rfobservationDetailsIngest.Frequencies(i))
        if not rfobservationDetailsIngest.PowersIsNone():
            self.powers = []
            for i in range(rfobservationDetailsIngest.PowersLength()):
                self.powers.append(rfobservationDetailsIngest.Powers(i))
        if not rfobservationDetailsIngest.SnrsIsNone():
            self.snrs = []
            for i in range(rfobservationDetailsIngest.SnrsLength()):
                self.snrs.append(rfobservationDetailsIngest.Snrs(i))
        if not rfobservationDetailsIngest.ConfidencesIsNone():
            self.confidences = []
            for i in range(rfobservationDetailsIngest.ConfidencesLength()):
                self.confidences.append(rfobservationDetailsIngest.Confidences(i))
        if not rfobservationDetailsIngest.DetectionStatusesIsNone():
            self.detectionStatuses = []
            for i in range(rfobservationDetailsIngest.DetectionStatusesLength()):
                self.detectionStatuses.append(rfobservationDetailsIngest.DetectionStatuses(i))
        if not rfobservationDetailsIngest.ChipRatesIsNone():
            self.chipRates = []
            for i in range(rfobservationDetailsIngest.ChipRatesLength()):
                self.chipRates.append(rfobservationDetailsIngest.ChipRates(i))
        if not rfobservationDetailsIngest.CodeTapsIsNone():
            self.codeTaps = []
            for i in range(rfobservationDetailsIngest.CodeTapsLength()):
                self.codeTaps.append(rfobservationDetailsIngest.CodeTaps(i))
        if not rfobservationDetailsIngest.CodeFillsIsNone():
            self.codeFills = []
            for i in range(rfobservationDetailsIngest.CodeFillsLength()):
                self.codeFills.append(rfobservationDetailsIngest.CodeFills(i))
        if not rfobservationDetailsIngest.CodeLengthsIsNone():
            self.codeLengths = []
            for i in range(rfobservationDetailsIngest.CodeLengthsLength()):
                self.codeLengths.append(rfobservationDetailsIngest.CodeLengths(i))
        if not rfobservationDetailsIngest.PnOrdersIsNone():
            self.pnOrders = []
            for i in range(rfobservationDetailsIngest.PnOrdersLength()):
                self.pnOrders.append(rfobservationDetailsIngest.PnOrders(i))
        if not rfobservationDetailsIngest.SignalIdsIsNone():
            self.signalIds = []
            for i in range(rfobservationDetailsIngest.SignalIdsLength()):
                self.signalIds.append(rfobservationDetailsIngest.SignalIds(i))
        if not rfobservationDetailsIngest.BaudRatesIsNone():
            self.baudRates = []
            for i in range(rfobservationDetailsIngest.BaudRatesLength()):
                self.baudRates.append(rfobservationDetailsIngest.BaudRates(i))
        if not rfobservationDetailsIngest.TelemetryIdsIsNone():
            self.telemetryIds = []
            for i in range(rfobservationDetailsIngest.TelemetryIdsLength()):
                self.telemetryIds.append(rfobservationDetailsIngest.TelemetryIds(i))
        if not rfobservationDetailsIngest.ConstellationXpointsIsNone():
            self.constellationXpoints = []
            for i in range(rfobservationDetailsIngest.ConstellationXpointsLength()):
                self.constellationXpoints.append(rfobservationDetailsIngest.ConstellationXpoints(i))
        if not rfobservationDetailsIngest.ConstellationYpointsIsNone():
            self.constellationYpoints = []
            for i in range(rfobservationDetailsIngest.ConstellationYpointsLength()):
                self.constellationYpoints.append(rfobservationDetailsIngest.ConstellationYpoints(i))

    # RFObservationDetails_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.transponder is not None:
            transponder = builder.CreateString(self.transponder)
        if self.elnot is not None:
            elnot = builder.CreateString(self.elnot)
        if self.antennaName is not None:
            antennaName = builder.CreateString(self.antennaName)
        if self.detectionStatus is not None:
            detectionStatus = builder.CreateString(self.detectionStatus)
        if self.collectionMode is not None:
            collectionMode = builder.CreateString(self.collectionMode)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            RFObservationDetails_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.carrierStandard is not None:
            carrierStandard = builder.CreateString(self.carrierStandard)
        if self.modulation is not None:
            modulation = builder.CreateString(self.modulation)
        if self.transmitFilterType is not None:
            transmitFilterType = builder.CreateString(self.transmitFilterType)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.url is not None:
            url = builder.CreateString(self.url)
        if self.frequencies is not None:
            frequencieslist = []
            for i in range(len(self.frequencies)):
                frequencieslist.append(builder.CreateString(self.frequencies[i]))
            RFObservationDetails_IngestStartFrequenciesVector(builder, len(self.frequencies))
            for i in reversed(range(len(self.frequencies))):
                builder.PrependUOffsetTRelative(frequencieslist[i])
            frequencies = builder.EndVector()
        if self.powers is not None:
            powerslist = []
            for i in range(len(self.powers)):
                powerslist.append(builder.CreateString(self.powers[i]))
            RFObservationDetails_IngestStartPowersVector(builder, len(self.powers))
            for i in reversed(range(len(self.powers))):
                builder.PrependUOffsetTRelative(powerslist[i])
            powers = builder.EndVector()
        if self.snrs is not None:
            snrslist = []
            for i in range(len(self.snrs)):
                snrslist.append(builder.CreateString(self.snrs[i]))
            RFObservationDetails_IngestStartSnrsVector(builder, len(self.snrs))
            for i in reversed(range(len(self.snrs))):
                builder.PrependUOffsetTRelative(snrslist[i])
            snrs = builder.EndVector()
        if self.confidences is not None:
            confidenceslist = []
            for i in range(len(self.confidences)):
                confidenceslist.append(builder.CreateString(self.confidences[i]))
            RFObservationDetails_IngestStartConfidencesVector(builder, len(self.confidences))
            for i in reversed(range(len(self.confidences))):
                builder.PrependUOffsetTRelative(confidenceslist[i])
            confidences = builder.EndVector()
        if self.detectionStatuses is not None:
            detectionStatuseslist = []
            for i in range(len(self.detectionStatuses)):
                detectionStatuseslist.append(builder.CreateString(self.detectionStatuses[i]))
            RFObservationDetails_IngestStartDetectionStatusesVector(builder, len(self.detectionStatuses))
            for i in reversed(range(len(self.detectionStatuses))):
                builder.PrependUOffsetTRelative(detectionStatuseslist[i])
            detectionStatuses = builder.EndVector()
        if self.chipRates is not None:
            chipRateslist = []
            for i in range(len(self.chipRates)):
                chipRateslist.append(builder.CreateString(self.chipRates[i]))
            RFObservationDetails_IngestStartChipRatesVector(builder, len(self.chipRates))
            for i in reversed(range(len(self.chipRates))):
                builder.PrependUOffsetTRelative(chipRateslist[i])
            chipRates = builder.EndVector()
        if self.codeTaps is not None:
            codeTapslist = []
            for i in range(len(self.codeTaps)):
                codeTapslist.append(builder.CreateString(self.codeTaps[i]))
            RFObservationDetails_IngestStartCodeTapsVector(builder, len(self.codeTaps))
            for i in reversed(range(len(self.codeTaps))):
                builder.PrependUOffsetTRelative(codeTapslist[i])
            codeTaps = builder.EndVector()
        if self.codeFills is not None:
            codeFillslist = []
            for i in range(len(self.codeFills)):
                codeFillslist.append(builder.CreateString(self.codeFills[i]))
            RFObservationDetails_IngestStartCodeFillsVector(builder, len(self.codeFills))
            for i in reversed(range(len(self.codeFills))):
                builder.PrependUOffsetTRelative(codeFillslist[i])
            codeFills = builder.EndVector()
        if self.codeLengths is not None:
            codeLengthslist = []
            for i in range(len(self.codeLengths)):
                codeLengthslist.append(builder.CreateString(self.codeLengths[i]))
            RFObservationDetails_IngestStartCodeLengthsVector(builder, len(self.codeLengths))
            for i in reversed(range(len(self.codeLengths))):
                builder.PrependUOffsetTRelative(codeLengthslist[i])
            codeLengths = builder.EndVector()
        if self.pnOrders is not None:
            pnOrderslist = []
            for i in range(len(self.pnOrders)):
                pnOrderslist.append(builder.CreateString(self.pnOrders[i]))
            RFObservationDetails_IngestStartPnOrdersVector(builder, len(self.pnOrders))
            for i in reversed(range(len(self.pnOrders))):
                builder.PrependUOffsetTRelative(pnOrderslist[i])
            pnOrders = builder.EndVector()
        if self.signalIds is not None:
            signalIdslist = []
            for i in range(len(self.signalIds)):
                signalIdslist.append(builder.CreateString(self.signalIds[i]))
            RFObservationDetails_IngestStartSignalIdsVector(builder, len(self.signalIds))
            for i in reversed(range(len(self.signalIds))):
                builder.PrependUOffsetTRelative(signalIdslist[i])
            signalIds = builder.EndVector()
        if self.baudRates is not None:
            baudRateslist = []
            for i in range(len(self.baudRates)):
                baudRateslist.append(builder.CreateString(self.baudRates[i]))
            RFObservationDetails_IngestStartBaudRatesVector(builder, len(self.baudRates))
            for i in reversed(range(len(self.baudRates))):
                builder.PrependUOffsetTRelative(baudRateslist[i])
            baudRates = builder.EndVector()
        if self.telemetryIds is not None:
            telemetryIdslist = []
            for i in range(len(self.telemetryIds)):
                telemetryIdslist.append(builder.CreateString(self.telemetryIds[i]))
            RFObservationDetails_IngestStartTelemetryIdsVector(builder, len(self.telemetryIds))
            for i in reversed(range(len(self.telemetryIds))):
                builder.PrependUOffsetTRelative(telemetryIdslist[i])
            telemetryIds = builder.EndVector()
        if self.constellationXpoints is not None:
            constellationXpointslist = []
            for i in range(len(self.constellationXpoints)):
                constellationXpointslist.append(builder.CreateString(self.constellationXpoints[i]))
            RFObservationDetails_IngestStartConstellationXpointsVector(builder, len(self.constellationXpoints))
            for i in reversed(range(len(self.constellationXpoints))):
                builder.PrependUOffsetTRelative(constellationXpointslist[i])
            constellationXpoints = builder.EndVector()
        if self.constellationYpoints is not None:
            constellationYpointslist = []
            for i in range(len(self.constellationYpoints)):
                constellationYpointslist.append(builder.CreateString(self.constellationYpoints[i]))
            RFObservationDetails_IngestStartConstellationYpointsVector(builder, len(self.constellationYpoints))
            for i in reversed(range(len(self.constellationYpoints))):
                builder.PrependUOffsetTRelative(constellationYpointslist[i])
            constellationYpoints = builder.EndVector()
        RFObservationDetails_IngestStart(builder)
        if self.id is not None:
            RFObservationDetails_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            RFObservationDetails_IngestAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            RFObservationDetails_IngestAddObTime(builder, obTime)
        if self.idOnOrbit is not None:
            RFObservationDetails_IngestAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor is not None:
            RFObservationDetails_IngestAddIdSensor(builder, idSensor)
        if self.type is not None:
            RFObservationDetails_IngestAddType(builder, type)
        RFObservationDetails_IngestAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            RFObservationDetails_IngestAddTaskId(builder, taskId)
        if self.transactionId is not None:
            RFObservationDetails_IngestAddTransactionId(builder, transactionId)
        if self.trackId is not None:
            RFObservationDetails_IngestAddTrackId(builder, trackId)
        if self.origObjectId is not None:
            RFObservationDetails_IngestAddOrigObjectId(builder, origObjectId)
        if self.origSensorId is not None:
            RFObservationDetails_IngestAddOrigSensorId(builder, origSensorId)
        RFObservationDetails_IngestAddUct(builder, self.uct)
        if self.transponder is not None:
            RFObservationDetails_IngestAddTransponder(builder, transponder)
        RFObservationDetails_IngestAddAzimuth(builder, self.azimuth)
        RFObservationDetails_IngestAddAzimuthUnc(builder, self.azimuthUnc)
        RFObservationDetails_IngestAddAzimuthRate(builder, self.azimuthRate)
        RFObservationDetails_IngestAddElevation(builder, self.elevation)
        RFObservationDetails_IngestAddElevationUnc(builder, self.elevationUnc)
        RFObservationDetails_IngestAddElevationRate(builder, self.elevationRate)
        RFObservationDetails_IngestAddRange(builder, self.range)
        RFObservationDetails_IngestAddRangeUnc(builder, self.rangeUnc)
        RFObservationDetails_IngestAddRangeRate(builder, self.rangeRate)
        RFObservationDetails_IngestAddRangeRateUnc(builder, self.rangeRateUnc)
        RFObservationDetails_IngestAddTrackRange(builder, self.trackRange)
        RFObservationDetails_IngestAddSenlat(builder, self.senlat)
        RFObservationDetails_IngestAddSenlon(builder, self.senlon)
        RFObservationDetails_IngestAddSenalt(builder, self.senalt)
        if self.elnot is not None:
            RFObservationDetails_IngestAddElnot(builder, elnot)
        RFObservationDetails_IngestAddFrequency(builder, self.frequency)
        RFObservationDetails_IngestAddNominalFrequency(builder, self.nominalFrequency)
        RFObservationDetails_IngestAddStartFrequency(builder, self.startFrequency)
        RFObservationDetails_IngestAddEndFrequency(builder, self.endFrequency)
        RFObservationDetails_IngestAddRelativeCarrierPower(builder, self.relativeCarrierPower)
        RFObservationDetails_IngestAddSpectrumAnalyzerPower(builder, self.spectrumAnalyzerPower)
        RFObservationDetails_IngestAddRelativeNoiseFloor(builder, self.relativeNoiseFloor)
        RFObservationDetails_IngestAddReferenceLevel(builder, self.referenceLevel)
        RFObservationDetails_IngestAddPgri(builder, self.pgri)
        RFObservationDetails_IngestAddConfidence(builder, self.confidence)
        RFObservationDetails_IngestAddIncoming(builder, self.incoming)
        RFObservationDetails_IngestAddSwitchPoint(builder, self.switchPoint)
        RFObservationDetails_IngestAddBaudRate(builder, self.baudRate)
        RFObservationDetails_IngestAddSnr(builder, self.snr)
        RFObservationDetails_IngestAddNominalSnr(builder, self.nominalSnr)
        RFObservationDetails_IngestAddPolarity(builder, self.polarity)
        RFObservationDetails_IngestAddPolarityType(builder, self.polarityType)
        RFObservationDetails_IngestAddChannel(builder, self.channel)
        RFObservationDetails_IngestAddPowerOverNoise(builder, self.powerOverNoise)
        RFObservationDetails_IngestAddNominalPowerOverNoise(builder, self.nominalPowerOverNoise)
        RFObservationDetails_IngestAddBandwidth(builder, self.bandwidth)
        RFObservationDetails_IngestAddNominalBandwidth(builder, self.nominalBandwidth)
        RFObservationDetails_IngestAddResolutionBandwidth(builder, self.resolutionBandwidth)
        RFObservationDetails_IngestAddVideoBandwidth(builder, self.videoBandwidth)
        RFObservationDetails_IngestAddEirp(builder, self.eirp)
        RFObservationDetails_IngestAddNominalEirp(builder, self.nominalEirp)
        RFObservationDetails_IngestAddMinPsd(builder, self.minPsd)
        RFObservationDetails_IngestAddMaxPsd(builder, self.maxPsd)
        RFObservationDetails_IngestAddFrequencyShift(builder, self.frequencyShift)
        RFObservationDetails_IngestAddPeak(builder, self.peak)
        if self.antennaName is not None:
            RFObservationDetails_IngestAddAntennaName(builder, antennaName)
        if self.detectionStatus is not None:
            RFObservationDetails_IngestAddDetectionStatus(builder, detectionStatus)
        if self.collectionMode is not None:
            RFObservationDetails_IngestAddCollectionMode(builder, collectionMode)
        if self.rawFileUri is not None:
            RFObservationDetails_IngestAddRawFileUri(builder, rawFileUri)
        if self.source is not None:
            RFObservationDetails_IngestAddSource(builder, source)
        if self.origin is not None:
            RFObservationDetails_IngestAddOrigin(builder, origin)
        RFObservationDetails_IngestAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            RFObservationDetails_IngestAddTags(builder, tags)
        if self.createdAt is not None:
            RFObservationDetails_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RFObservationDetails_IngestAddCreatedBy(builder, createdBy)
        RFObservationDetails_IngestAddNoisePwrDensity(builder, self.noisePwrDensity)
        if self.carrierStandard is not None:
            RFObservationDetails_IngestAddCarrierStandard(builder, carrierStandard)
        if self.modulation is not None:
            RFObservationDetails_IngestAddModulation(builder, modulation)
        RFObservationDetails_IngestAddInnerCodingRate(builder, self.innerCodingRate)
        RFObservationDetails_IngestAddOuterCodingRate(builder, self.outerCodingRate)
        if self.transmitFilterType is not None:
            RFObservationDetails_IngestAddTransmitFilterType(builder, transmitFilterType)
        RFObservationDetails_IngestAddTransmitFilterRollOff(builder, self.transmitFilterRollOff)
        RFObservationDetails_IngestAddSymbolToNoiseRatio(builder, self.symbolToNoiseRatio)
        RFObservationDetails_IngestAddBitErrorRate(builder, self.bitErrorRate)
        if self.origNetwork is not None:
            RFObservationDetails_IngestAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            RFObservationDetails_IngestAddSourceDl(builder, sourceDl)
        if self.descriptor is not None:
            RFObservationDetails_IngestAddDescriptor(builder, descriptor)
        if self.url is not None:
            RFObservationDetails_IngestAddUrl(builder, url)
        if self.frequencies is not None:
            RFObservationDetails_IngestAddFrequencies(builder, frequencies)
        if self.powers is not None:
            RFObservationDetails_IngestAddPowers(builder, powers)
        if self.snrs is not None:
            RFObservationDetails_IngestAddSnrs(builder, snrs)
        if self.confidences is not None:
            RFObservationDetails_IngestAddConfidences(builder, confidences)
        if self.detectionStatuses is not None:
            RFObservationDetails_IngestAddDetectionStatuses(builder, detectionStatuses)
        if self.chipRates is not None:
            RFObservationDetails_IngestAddChipRates(builder, chipRates)
        if self.codeTaps is not None:
            RFObservationDetails_IngestAddCodeTaps(builder, codeTaps)
        if self.codeFills is not None:
            RFObservationDetails_IngestAddCodeFills(builder, codeFills)
        if self.codeLengths is not None:
            RFObservationDetails_IngestAddCodeLengths(builder, codeLengths)
        if self.pnOrders is not None:
            RFObservationDetails_IngestAddPnOrders(builder, pnOrders)
        if self.signalIds is not None:
            RFObservationDetails_IngestAddSignalIds(builder, signalIds)
        if self.baudRates is not None:
            RFObservationDetails_IngestAddBaudRates(builder, baudRates)
        if self.telemetryIds is not None:
            RFObservationDetails_IngestAddTelemetryIds(builder, telemetryIds)
        if self.constellationXpoints is not None:
            RFObservationDetails_IngestAddConstellationXpoints(builder, constellationXpoints)
        if self.constellationYpoints is not None:
            RFObservationDetails_IngestAddConstellationYpoints(builder, constellationYpoints)
        rfobservationDetailsIngest = RFObservationDetails_IngestEnd(builder)
        return rfobservationDetailsIngest
