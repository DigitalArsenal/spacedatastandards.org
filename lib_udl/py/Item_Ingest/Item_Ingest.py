# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class Item_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Item_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsItem_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Item_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x54\x45\x4D", size_prefixed=size_prefixed)

    # Item_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
    # Constraints: Minimum length = 1, Maximum length = 36
    # Item_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Item_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the air load plan this item is associated with.
    # Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
    # Constraints: Minimum length = 0, Maximum length = 36
    # Item_Ingest
    def IdAirLoadPlan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
    # Example: /// Example: 12345ABCD
    # Constraints: Minimum length = 1, Maximum length = 36
    # Item_Ingest
    def ScanCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
    # Example: /// Example: bID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Item_Ingest
    def ScGenTool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
    # Example: /// Example: CARGO
    # Constraints: Minimum length = 1, Maximum length = 32
    # Item_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
    # Example: /// Example: PALLET
    # Constraints: Minimum length = 0, Maximum length = 32
    # Item_Ingest
    def CargoType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the item. Applicable for equipment and cargo item types only.
    # Example: /// Example: Product Name
    # Constraints: Minimum length = 0, Maximum length = 100
    # Item_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
    # Example: /// Example: RMS
    # Constraints: Minimum length = 0, Maximum length = 36
    # Item_Ingest
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The departure code or location where this item has left or is leaving.
    # Example: /// Example: CHS
    # Constraints: Minimum length = 0, Maximum length = 36
    # Item_Ingest
    def Departure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the unit receiving this item.
    # Example: /// Example: 50 SBN
    # Constraints: Minimum length = 0, Maximum length = 100
    # Item_Ingest
    def ReceivingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The military branch receiving this item.
    # Example: /// Example: Air Force
    # Constraints: Minimum length = 0, Maximum length = 32
    # Item_Ingest
    def ReceivingBranch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
    # Example: /// Example: 2023-03-13
    # Constraints: No constraints specified.
    # Item_Ingest
    def LastArrDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unit line number of this item.
    # Example: /// Example: T01ME01
    # Constraints: Minimum length = 0, Maximum length = 16
    # Item_Ingest
    def Uln(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Weight of the item in kilograms (if item is a passenger, include on-person bags).
    # Example: /// Example: 5443.335
    # Constraints: No constraints specified.
    # Item_Ingest
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-03-13T16:06:00.123Z
    # Constraints: No constraints specified.
    # Item_Ingest
    def WeightTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The classification code of the commodity or group of commodities.
    # Example: /// Example: 2304116
    # Constraints: Minimum length = 0, Maximum length = 50
    # Item_Ingest
    def CommodityCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
    # Example: /// Example: STCC
    # Constraints: Minimum length = 0, Maximum length = 36
    # Item_Ingest
    def CommoditySys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The code denoting the type of material item.
    # Example: /// Example: 530500234
    # Constraints: Minimum length = 0, Maximum length = 36
    # Item_Ingest
    def ProductCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
    # Example: /// Example: NSN
    # Constraints: Minimum length = 0, Maximum length = 32
    # Item_Ingest
    def ProductSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Width of the cargo in meters. Applicable for cargo item types only.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Item_Ingest
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Length of the cargo in meters. Applicable for cargo item types only.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Item_Ingest
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height of the cargo in meters. Applicable for cargo item types only.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Item_Ingest
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The volume of the item, in cubic meters. Applicable for cargo item types only.
    # Example: /// Example: 7.8902
    # Constraints: No constraints specified.
    # Item_Ingest
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Center of gravity position of the item, measured from the item's front datum, in centimeters.
    # Example: /// Example: 112.014
    # Constraints: No constraints specified.
    # Item_Ingest
    def Cg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
    # Example: /// Example: 412.1
    # Constraints: No constraints specified.
    # Item_Ingest
    def Fs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
    # Example: /// Example: 3.1
    # Constraints: No constraints specified.
    # Item_Ingest
    def CenterlineOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
    # Example: /// Example: 4000.1
    # Constraints: No constraints specified.
    # Item_Ingest
    def Moment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Item_Ingest
    def Airdrop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Transportation Control Number of the cargo. Applicable for cargo item types only.
    # Example: /// Example: M1358232245912XXX
    # Constraints: Minimum length = 0, Maximum length = 17
    # Item_Ingest
    def Tcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of UN hazard classes or division codes that apply to this item.
    # Example: /// Example: [1.1, 1.2]
    # Constraints: No constraints specified.
    # Item_Ingest
    def HazCodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Item_Ingest
    def HazCodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Item_Ingest
    def HazCodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Net explosive weight of the item, in kilograms.
    # Example: /// Example: 51.437
    # Constraints: No constraints specified.
    # Item_Ingest
    def NetExpWt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating this item acts as a container and contains additional items.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Item_Ingest
    def Container(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Array of tracking identifiers that are contained within this item.
    # Example: /// Example: ['2UJ8843K', '745YV1T65']
    # Constraints: No constraints specified.
    # Item_Ingest
    def ItemContains(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Item_Ingest
    def ItemContainsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Item_Ingest
    def ItemContainsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # Item_Ingest
    def NumPalletPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # United States Distinguished Visitor Code, only applicable to people.
    # Example: /// Example: DV-2
    # Constraints: Minimum length = 0, Maximum length = 16
    # Item_Ingest
    def DvCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional notes or comments about this item.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Item_Ingest
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
    # Example: /// Example: ['key1', 'key2']
    # Constraints: No constraints specified.
    # Item_Ingest
    def Keys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Item_Ingest
    def KeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Item_Ingest
    def KeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
    # Example: /// Example: ['value1', 'value2']
    # Constraints: No constraints specified.
    # Item_Ingest
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Item_Ingest
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Item_Ingest
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
    # Example: /// Example: Alt Data Format
    # Constraints: Minimum length = 0, Maximum length = 100
    # Item_Ingest
    def AltDataFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
    # Example: /// Example: Accepting System
    # Constraints: Minimum length = 0, Maximum length = 100
    # Item_Ingest
    def AccSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional data required to find this item in the accepting system.
    # Example: /// Example: Accepting System Notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Item_Ingest
    def AccSysNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
    # Example: /// Example: ['System key1', 'System key2']
    # Constraints: No constraints specified.
    # Item_Ingest
    def AccSysKeys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Item_Ingest
    def AccSysKeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Item_Ingest
    def AccSysKeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        return o == 0

    # Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
    # Example: /// Example: ['System value1', 'System value2']
    # Constraints: No constraints specified.
    # Item_Ingest
    def AccSysValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Item_Ingest
    def AccSysValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Item_Ingest
    def AccSysValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2023-03-21T16:00:00.123Z
    # Constraints: No constraints specified.
    # Item_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Item_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Item_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # Item_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Item_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Item_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Item_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Item_IngestStart(builder):
    builder.StartObject(51)

def Start(builder):
    Item_IngestStart(builder)

def Item_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Item_IngestAddId(builder, id)

def Item_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Item_IngestAddClassificationMarking(builder, classificationMarking)

def Item_IngestAddIdAirLoadPlan(builder, idAirLoadPlan):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idAirLoadPlan), 0)

def AddIdAirLoadPlan(builder, idAirLoadPlan):
    Item_IngestAddIdAirLoadPlan(builder, idAirLoadPlan)

def Item_IngestAddScanCode(builder, scanCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scanCode), 0)

def AddScanCode(builder, scanCode):
    Item_IngestAddScanCode(builder, scanCode)

def Item_IngestAddScGenTool(builder, scGenTool):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scGenTool), 0)

def AddScGenTool(builder, scGenTool):
    Item_IngestAddScGenTool(builder, scGenTool)

def Item_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Item_IngestAddType(builder, type)

def Item_IngestAddCargoType(builder, cargoType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cargoType), 0)

def AddCargoType(builder, cargoType):
    Item_IngestAddCargoType(builder, cargoType)

def Item_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Item_IngestAddName(builder, name)

def Item_IngestAddDestination(builder, destination):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(destination), 0)

def AddDestination(builder, destination):
    Item_IngestAddDestination(builder, destination)

def Item_IngestAddDeparture(builder, departure):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(departure), 0)

def AddDeparture(builder, departure):
    Item_IngestAddDeparture(builder, departure)

def Item_IngestAddReceivingUnit(builder, receivingUnit):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(receivingUnit), 0)

def AddReceivingUnit(builder, receivingUnit):
    Item_IngestAddReceivingUnit(builder, receivingUnit)

def Item_IngestAddReceivingBranch(builder, receivingBranch):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(receivingBranch), 0)

def AddReceivingBranch(builder, receivingBranch):
    Item_IngestAddReceivingBranch(builder, receivingBranch)

def Item_IngestAddLastArrDate(builder, lastArrDate):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(lastArrDate), 0)

def AddLastArrDate(builder, lastArrDate):
    Item_IngestAddLastArrDate(builder, lastArrDate)

def Item_IngestAddUln(builder, uln):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(uln), 0)

def AddUln(builder, uln):
    Item_IngestAddUln(builder, uln)

def Item_IngestAddWeight(builder, weight):
    builder.PrependFloat64Slot(14, weight, 0.0)

def AddWeight(builder, weight):
    Item_IngestAddWeight(builder, weight)

def Item_IngestAddWeightTs(builder, weightTs):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(weightTs), 0)

def AddWeightTs(builder, weightTs):
    Item_IngestAddWeightTs(builder, weightTs)

def Item_IngestAddCommodityCode(builder, commodityCode):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(commodityCode), 0)

def AddCommodityCode(builder, commodityCode):
    Item_IngestAddCommodityCode(builder, commodityCode)

def Item_IngestAddCommoditySys(builder, commoditySys):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(commoditySys), 0)

def AddCommoditySys(builder, commoditySys):
    Item_IngestAddCommoditySys(builder, commoditySys)

def Item_IngestAddProductCode(builder, productCode):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(productCode), 0)

def AddProductCode(builder, productCode):
    Item_IngestAddProductCode(builder, productCode)

def Item_IngestAddProductSys(builder, productSys):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(productSys), 0)

def AddProductSys(builder, productSys):
    Item_IngestAddProductSys(builder, productSys)

def Item_IngestAddWidth(builder, width):
    builder.PrependFloat64Slot(20, width, 0.0)

def AddWidth(builder, width):
    Item_IngestAddWidth(builder, width)

def Item_IngestAddLength(builder, length):
    builder.PrependFloat64Slot(21, length, 0.0)

def AddLength(builder, length):
    Item_IngestAddLength(builder, length)

def Item_IngestAddHeight(builder, height):
    builder.PrependFloat64Slot(22, height, 0.0)

def AddHeight(builder, height):
    Item_IngestAddHeight(builder, height)

def Item_IngestAddVolume(builder, volume):
    builder.PrependFloat64Slot(23, volume, 0.0)

def AddVolume(builder, volume):
    Item_IngestAddVolume(builder, volume)

def Item_IngestAddCg(builder, cg):
    builder.PrependFloat64Slot(24, cg, 0.0)

def AddCg(builder, cg):
    Item_IngestAddCg(builder, cg)

def Item_IngestAddFs(builder, fs):
    builder.PrependFloat64Slot(25, fs, 0.0)

def AddFs(builder, fs):
    Item_IngestAddFs(builder, fs)

def Item_IngestAddCenterlineOffset(builder, centerlineOffset):
    builder.PrependFloat64Slot(26, centerlineOffset, 0.0)

def AddCenterlineOffset(builder, centerlineOffset):
    Item_IngestAddCenterlineOffset(builder, centerlineOffset)

def Item_IngestAddMoment(builder, moment):
    builder.PrependFloat64Slot(27, moment, 0.0)

def AddMoment(builder, moment):
    Item_IngestAddMoment(builder, moment)

def Item_IngestAddAirdrop(builder, airdrop):
    builder.PrependBoolSlot(28, airdrop, 0)

def AddAirdrop(builder, airdrop):
    Item_IngestAddAirdrop(builder, airdrop)

def Item_IngestAddTcn(builder, tcn):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(tcn), 0)

def AddTcn(builder, tcn):
    Item_IngestAddTcn(builder, tcn)

def Item_IngestAddHazCodes(builder, hazCodes):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(hazCodes), 0)

def AddHazCodes(builder, hazCodes):
    Item_IngestAddHazCodes(builder, hazCodes)

def Item_IngestStartHazCodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHazCodesVector(builder, numElems):
    return Item_IngestStartHazCodesVector(builder, numElems)

def Item_IngestAddNetExpWt(builder, netExpWt):
    builder.PrependFloat64Slot(31, netExpWt, 0.0)

def AddNetExpWt(builder, netExpWt):
    Item_IngestAddNetExpWt(builder, netExpWt)

def Item_IngestAddContainer(builder, container):
    builder.PrependBoolSlot(32, container, 0)

def AddContainer(builder, container):
    Item_IngestAddContainer(builder, container)

def Item_IngestAddItemContains(builder, itemContains):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(itemContains), 0)

def AddItemContains(builder, itemContains):
    Item_IngestAddItemContains(builder, itemContains)

def Item_IngestStartItemContainsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemContainsVector(builder, numElems):
    return Item_IngestStartItemContainsVector(builder, numElems)

def Item_IngestAddNumPalletPos(builder, numPalletPos):
    builder.PrependInt32Slot(34, numPalletPos, 0)

def AddNumPalletPos(builder, numPalletPos):
    Item_IngestAddNumPalletPos(builder, numPalletPos)

def Item_IngestAddDvCode(builder, dvCode):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(dvCode), 0)

def AddDvCode(builder, dvCode):
    Item_IngestAddDvCode(builder, dvCode)

def Item_IngestAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Item_IngestAddNotes(builder, notes)

def Item_IngestAddKeys(builder, keys):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(keys), 0)

def AddKeys(builder, keys):
    Item_IngestAddKeys(builder, keys)

def Item_IngestStartKeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKeysVector(builder, numElems):
    return Item_IngestStartKeysVector(builder, numElems)

def Item_IngestAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    Item_IngestAddValues(builder, values)

def Item_IngestStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems):
    return Item_IngestStartValuesVector(builder, numElems)

def Item_IngestAddAltDataFormat(builder, altDataFormat):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(altDataFormat), 0)

def AddAltDataFormat(builder, altDataFormat):
    Item_IngestAddAltDataFormat(builder, altDataFormat)

def Item_IngestAddAccSystem(builder, accSystem):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(accSystem), 0)

def AddAccSystem(builder, accSystem):
    Item_IngestAddAccSystem(builder, accSystem)

def Item_IngestAddAccSysNotes(builder, accSysNotes):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(accSysNotes), 0)

def AddAccSysNotes(builder, accSysNotes):
    Item_IngestAddAccSysNotes(builder, accSysNotes)

def Item_IngestAddAccSysKeys(builder, accSysKeys):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(accSysKeys), 0)

def AddAccSysKeys(builder, accSysKeys):
    Item_IngestAddAccSysKeys(builder, accSysKeys)

def Item_IngestStartAccSysKeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAccSysKeysVector(builder, numElems):
    return Item_IngestStartAccSysKeysVector(builder, numElems)

def Item_IngestAddAccSysValues(builder, accSysValues):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(accSysValues), 0)

def AddAccSysValues(builder, accSysValues):
    Item_IngestAddAccSysValues(builder, accSysValues)

def Item_IngestStartAccSysValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAccSysValuesVector(builder, numElems):
    return Item_IngestStartAccSysValuesVector(builder, numElems)

def Item_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Item_IngestAddCreatedAt(builder, createdAt)

def Item_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Item_IngestAddCreatedBy(builder, createdBy)

def Item_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    Item_IngestAddSourceDl(builder, sourceDl)

def Item_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Item_IngestAddSource(builder, source)

def Item_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Item_IngestAddOrigin(builder, origin)

def Item_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Item_IngestAddOrigNetwork(builder, origNetwork)

def Item_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(50, dataMode, 0)

def AddDataMode(builder, dataMode):
    Item_IngestAddDataMode(builder, dataMode)

def Item_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Item_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class Item_IngestT(object):

    # Item_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idAirLoadPlan = None  # type: str
        self.scanCode = None  # type: str
        self.scGenTool = None  # type: str
        self.type = None  # type: str
        self.cargoType = None  # type: str
        self.name = None  # type: str
        self.destination = None  # type: str
        self.departure = None  # type: str
        self.receivingUnit = None  # type: str
        self.receivingBranch = None  # type: str
        self.lastArrDate = None  # type: str
        self.uln = None  # type: str
        self.weight = 0.0  # type: float
        self.weightTs = None  # type: str
        self.commodityCode = None  # type: str
        self.commoditySys = None  # type: str
        self.productCode = None  # type: str
        self.productSys = None  # type: str
        self.width = 0.0  # type: float
        self.length = 0.0  # type: float
        self.height = 0.0  # type: float
        self.volume = 0.0  # type: float
        self.cg = 0.0  # type: float
        self.fs = 0.0  # type: float
        self.centerlineOffset = 0.0  # type: float
        self.moment = 0.0  # type: float
        self.airdrop = False  # type: bool
        self.tcn = None  # type: str
        self.hazCodes = None  # type: List[str]
        self.netExpWt = 0.0  # type: float
        self.container = False  # type: bool
        self.itemContains = None  # type: List[str]
        self.numPalletPos = 0  # type: int
        self.dvCode = None  # type: str
        self.notes = None  # type: str
        self.keys = None  # type: List[str]
        self.values = None  # type: List[str]
        self.altDataFormat = None  # type: str
        self.accSystem = None  # type: str
        self.accSysNotes = None  # type: str
        self.accSysKeys = None  # type: List[str]
        self.accSysValues = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        itemIngest = Item_Ingest()
        itemIngest.Init(buf, pos)
        return cls.InitFromObj(itemIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, itemIngest):
        x = Item_IngestT()
        x._UnPack(itemIngest)
        return x

    # Item_IngestT
    def _UnPack(self, itemIngest):
        if itemIngest is None:
            return
        self.id = itemIngest.Id()
        self.classificationMarking = itemIngest.ClassificationMarking()
        self.idAirLoadPlan = itemIngest.IdAirLoadPlan()
        self.scanCode = itemIngest.ScanCode()
        self.scGenTool = itemIngest.ScGenTool()
        self.type = itemIngest.Type()
        self.cargoType = itemIngest.CargoType()
        self.name = itemIngest.Name()
        self.destination = itemIngest.Destination()
        self.departure = itemIngest.Departure()
        self.receivingUnit = itemIngest.ReceivingUnit()
        self.receivingBranch = itemIngest.ReceivingBranch()
        self.lastArrDate = itemIngest.LastArrDate()
        self.uln = itemIngest.Uln()
        self.weight = itemIngest.Weight()
        self.weightTs = itemIngest.WeightTs()
        self.commodityCode = itemIngest.CommodityCode()
        self.commoditySys = itemIngest.CommoditySys()
        self.productCode = itemIngest.ProductCode()
        self.productSys = itemIngest.ProductSys()
        self.width = itemIngest.Width()
        self.length = itemIngest.Length()
        self.height = itemIngest.Height()
        self.volume = itemIngest.Volume()
        self.cg = itemIngest.Cg()
        self.fs = itemIngest.Fs()
        self.centerlineOffset = itemIngest.CenterlineOffset()
        self.moment = itemIngest.Moment()
        self.airdrop = itemIngest.Airdrop()
        self.tcn = itemIngest.Tcn()
        if not itemIngest.HazCodesIsNone():
            self.hazCodes = []
            for i in range(itemIngest.HazCodesLength()):
                self.hazCodes.append(itemIngest.HazCodes(i))
        self.netExpWt = itemIngest.NetExpWt()
        self.container = itemIngest.Container()
        if not itemIngest.ItemContainsIsNone():
            self.itemContains = []
            for i in range(itemIngest.ItemContainsLength()):
                self.itemContains.append(itemIngest.ItemContains(i))
        self.numPalletPos = itemIngest.NumPalletPos()
        self.dvCode = itemIngest.DvCode()
        self.notes = itemIngest.Notes()
        if not itemIngest.KeysIsNone():
            self.keys = []
            for i in range(itemIngest.KeysLength()):
                self.keys.append(itemIngest.Keys(i))
        if not itemIngest.ValuesIsNone():
            self.values = []
            for i in range(itemIngest.ValuesLength()):
                self.values.append(itemIngest.Values(i))
        self.altDataFormat = itemIngest.AltDataFormat()
        self.accSystem = itemIngest.AccSystem()
        self.accSysNotes = itemIngest.AccSysNotes()
        if not itemIngest.AccSysKeysIsNone():
            self.accSysKeys = []
            for i in range(itemIngest.AccSysKeysLength()):
                self.accSysKeys.append(itemIngest.AccSysKeys(i))
        if not itemIngest.AccSysValuesIsNone():
            self.accSysValues = []
            for i in range(itemIngest.AccSysValuesLength()):
                self.accSysValues.append(itemIngest.AccSysValues(i))
        self.createdAt = itemIngest.CreatedAt()
        self.createdBy = itemIngest.CreatedBy()
        self.sourceDl = itemIngest.SourceDl()
        self.source = itemIngest.Source()
        self.origin = itemIngest.Origin()
        self.origNetwork = itemIngest.OrigNetwork()
        self.dataMode = itemIngest.DataMode()

    # Item_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idAirLoadPlan is not None:
            idAirLoadPlan = builder.CreateString(self.idAirLoadPlan)
        if self.scanCode is not None:
            scanCode = builder.CreateString(self.scanCode)
        if self.scGenTool is not None:
            scGenTool = builder.CreateString(self.scGenTool)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.cargoType is not None:
            cargoType = builder.CreateString(self.cargoType)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.destination is not None:
            destination = builder.CreateString(self.destination)
        if self.departure is not None:
            departure = builder.CreateString(self.departure)
        if self.receivingUnit is not None:
            receivingUnit = builder.CreateString(self.receivingUnit)
        if self.receivingBranch is not None:
            receivingBranch = builder.CreateString(self.receivingBranch)
        if self.lastArrDate is not None:
            lastArrDate = builder.CreateString(self.lastArrDate)
        if self.uln is not None:
            uln = builder.CreateString(self.uln)
        if self.weightTs is not None:
            weightTs = builder.CreateString(self.weightTs)
        if self.commodityCode is not None:
            commodityCode = builder.CreateString(self.commodityCode)
        if self.commoditySys is not None:
            commoditySys = builder.CreateString(self.commoditySys)
        if self.productCode is not None:
            productCode = builder.CreateString(self.productCode)
        if self.productSys is not None:
            productSys = builder.CreateString(self.productSys)
        if self.tcn is not None:
            tcn = builder.CreateString(self.tcn)
        if self.hazCodes is not None:
            hazCodeslist = []
            for i in range(len(self.hazCodes)):
                hazCodeslist.append(builder.CreateString(self.hazCodes[i]))
            Item_IngestStartHazCodesVector(builder, len(self.hazCodes))
            for i in reversed(range(len(self.hazCodes))):
                builder.PrependUOffsetTRelative(hazCodeslist[i])
            hazCodes = builder.EndVector()
        if self.itemContains is not None:
            itemContainslist = []
            for i in range(len(self.itemContains)):
                itemContainslist.append(builder.CreateString(self.itemContains[i]))
            Item_IngestStartItemContainsVector(builder, len(self.itemContains))
            for i in reversed(range(len(self.itemContains))):
                builder.PrependUOffsetTRelative(itemContainslist[i])
            itemContains = builder.EndVector()
        if self.dvCode is not None:
            dvCode = builder.CreateString(self.dvCode)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.keys is not None:
            keyslist = []
            for i in range(len(self.keys)):
                keyslist.append(builder.CreateString(self.keys[i]))
            Item_IngestStartKeysVector(builder, len(self.keys))
            for i in reversed(range(len(self.keys))):
                builder.PrependUOffsetTRelative(keyslist[i])
            keys = builder.EndVector()
        if self.values is not None:
            valueslist = []
            for i in range(len(self.values)):
                valueslist.append(builder.CreateString(self.values[i]))
            Item_IngestStartValuesVector(builder, len(self.values))
            for i in reversed(range(len(self.values))):
                builder.PrependUOffsetTRelative(valueslist[i])
            values = builder.EndVector()
        if self.altDataFormat is not None:
            altDataFormat = builder.CreateString(self.altDataFormat)
        if self.accSystem is not None:
            accSystem = builder.CreateString(self.accSystem)
        if self.accSysNotes is not None:
            accSysNotes = builder.CreateString(self.accSysNotes)
        if self.accSysKeys is not None:
            accSysKeyslist = []
            for i in range(len(self.accSysKeys)):
                accSysKeyslist.append(builder.CreateString(self.accSysKeys[i]))
            Item_IngestStartAccSysKeysVector(builder, len(self.accSysKeys))
            for i in reversed(range(len(self.accSysKeys))):
                builder.PrependUOffsetTRelative(accSysKeyslist[i])
            accSysKeys = builder.EndVector()
        if self.accSysValues is not None:
            accSysValueslist = []
            for i in range(len(self.accSysValues)):
                accSysValueslist.append(builder.CreateString(self.accSysValues[i]))
            Item_IngestStartAccSysValuesVector(builder, len(self.accSysValues))
            for i in reversed(range(len(self.accSysValues))):
                builder.PrependUOffsetTRelative(accSysValueslist[i])
            accSysValues = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Item_IngestStart(builder)
        if self.id is not None:
            Item_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            Item_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idAirLoadPlan is not None:
            Item_IngestAddIdAirLoadPlan(builder, idAirLoadPlan)
        if self.scanCode is not None:
            Item_IngestAddScanCode(builder, scanCode)
        if self.scGenTool is not None:
            Item_IngestAddScGenTool(builder, scGenTool)
        if self.type is not None:
            Item_IngestAddType(builder, type)
        if self.cargoType is not None:
            Item_IngestAddCargoType(builder, cargoType)
        if self.name is not None:
            Item_IngestAddName(builder, name)
        if self.destination is not None:
            Item_IngestAddDestination(builder, destination)
        if self.departure is not None:
            Item_IngestAddDeparture(builder, departure)
        if self.receivingUnit is not None:
            Item_IngestAddReceivingUnit(builder, receivingUnit)
        if self.receivingBranch is not None:
            Item_IngestAddReceivingBranch(builder, receivingBranch)
        if self.lastArrDate is not None:
            Item_IngestAddLastArrDate(builder, lastArrDate)
        if self.uln is not None:
            Item_IngestAddUln(builder, uln)
        Item_IngestAddWeight(builder, self.weight)
        if self.weightTs is not None:
            Item_IngestAddWeightTs(builder, weightTs)
        if self.commodityCode is not None:
            Item_IngestAddCommodityCode(builder, commodityCode)
        if self.commoditySys is not None:
            Item_IngestAddCommoditySys(builder, commoditySys)
        if self.productCode is not None:
            Item_IngestAddProductCode(builder, productCode)
        if self.productSys is not None:
            Item_IngestAddProductSys(builder, productSys)
        Item_IngestAddWidth(builder, self.width)
        Item_IngestAddLength(builder, self.length)
        Item_IngestAddHeight(builder, self.height)
        Item_IngestAddVolume(builder, self.volume)
        Item_IngestAddCg(builder, self.cg)
        Item_IngestAddFs(builder, self.fs)
        Item_IngestAddCenterlineOffset(builder, self.centerlineOffset)
        Item_IngestAddMoment(builder, self.moment)
        Item_IngestAddAirdrop(builder, self.airdrop)
        if self.tcn is not None:
            Item_IngestAddTcn(builder, tcn)
        if self.hazCodes is not None:
            Item_IngestAddHazCodes(builder, hazCodes)
        Item_IngestAddNetExpWt(builder, self.netExpWt)
        Item_IngestAddContainer(builder, self.container)
        if self.itemContains is not None:
            Item_IngestAddItemContains(builder, itemContains)
        Item_IngestAddNumPalletPos(builder, self.numPalletPos)
        if self.dvCode is not None:
            Item_IngestAddDvCode(builder, dvCode)
        if self.notes is not None:
            Item_IngestAddNotes(builder, notes)
        if self.keys is not None:
            Item_IngestAddKeys(builder, keys)
        if self.values is not None:
            Item_IngestAddValues(builder, values)
        if self.altDataFormat is not None:
            Item_IngestAddAltDataFormat(builder, altDataFormat)
        if self.accSystem is not None:
            Item_IngestAddAccSystem(builder, accSystem)
        if self.accSysNotes is not None:
            Item_IngestAddAccSysNotes(builder, accSysNotes)
        if self.accSysKeys is not None:
            Item_IngestAddAccSysKeys(builder, accSysKeys)
        if self.accSysValues is not None:
            Item_IngestAddAccSysValues(builder, accSysValues)
        if self.createdAt is not None:
            Item_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Item_IngestAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            Item_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            Item_IngestAddSource(builder, source)
        if self.origin is not None:
            Item_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Item_IngestAddOrigNetwork(builder, origNetwork)
        Item_IngestAddDataMode(builder, self.dataMode)
        itemIngest = Item_IngestEnd(builder)
        return itemIngest
