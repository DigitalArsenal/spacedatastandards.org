# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Provides a means of sending Basic Character Set alphanumeric text messages.
class MtiFreeText_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MtiFreeText_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMtiFreeText_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MtiFreeText_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x54\x49\x46", size_prefixed=size_prefixed)

    # MtiFreeText_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The originator of the Free Text message.
    # Example: /// Example: ORIGINATOR
    # Constraints: Minimum length = 0, Maximum length = 1024
    # MtiFreeText_Abridged
    def F1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The recipient for which the Free Text message is intended.
    # Example: /// Example: RECIPIENT
    # Constraints: Minimum length = 0, Maximum length = 128
    # MtiFreeText_Abridged
    def F2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Free text data message.
    # Example: /// Example: TEXT
    # Constraints: Minimum length = 0, Maximum length = 1024
    # MtiFreeText_Abridged
    def F3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MtiFreeText_AbridgedStart(builder):
    builder.StartObject(3)

def Start(builder):
    MtiFreeText_AbridgedStart(builder)

def MtiFreeText_AbridgedAddF1(builder, f1):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(f1), 0)

def AddF1(builder, f1):
    MtiFreeText_AbridgedAddF1(builder, f1)

def MtiFreeText_AbridgedAddF2(builder, f2):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(f2), 0)

def AddF2(builder, f2):
    MtiFreeText_AbridgedAddF2(builder, f2)

def MtiFreeText_AbridgedAddF3(builder, f3):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(f3), 0)

def AddF3(builder, f3):
    MtiFreeText_AbridgedAddF3(builder, f3)

def MtiFreeText_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return MtiFreeText_AbridgedEnd(builder)


class MtiFreeText_AbridgedT(object):

    # MtiFreeText_AbridgedT
    def __init__(self):
        self.f1 = None  # type: str
        self.f2 = None  # type: str
        self.f3 = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtiFreeTextAbridged = MtiFreeText_Abridged()
        mtiFreeTextAbridged.Init(buf, pos)
        return cls.InitFromObj(mtiFreeTextAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtiFreeTextAbridged):
        x = MtiFreeText_AbridgedT()
        x._UnPack(mtiFreeTextAbridged)
        return x

    # MtiFreeText_AbridgedT
    def _UnPack(self, mtiFreeTextAbridged):
        if mtiFreeTextAbridged is None:
            return
        self.f1 = mtiFreeTextAbridged.F1()
        self.f2 = mtiFreeTextAbridged.F2()
        self.f3 = mtiFreeTextAbridged.F3()

    # MtiFreeText_AbridgedT
    def Pack(self, builder):
        if self.f1 is not None:
            f1 = builder.CreateString(self.f1)
        if self.f2 is not None:
            f2 = builder.CreateString(self.f2)
        if self.f3 is not None:
            f3 = builder.CreateString(self.f3)
        MtiFreeText_AbridgedStart(builder)
        if self.f1 is not None:
            MtiFreeText_AbridgedAddF1(builder, f1)
        if self.f2 is not None:
            MtiFreeText_AbridgedAddF2(builder, f2)
        if self.f3 is not None:
            MtiFreeText_AbridgedAddF3(builder, f3)
        mtiFreeTextAbridged = MtiFreeText_AbridgedEnd(builder)
        return mtiFreeTextAbridged
