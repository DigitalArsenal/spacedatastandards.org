# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Points identified within the route.
class RoutePoints_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RoutePoints_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRoutePoints_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RoutePoints_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x4F\x55\x54", size_prefixed=size_prefixed)

    # RoutePoints_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # RoutePoints_Full
    def PtSequenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
    # Example: /// Example: EP
    # Constraints: Minimum length = 0, Maximum length = 16
    # RoutePoints_Full
    def PtTypeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
    # Example: /// Example: ENTRY POINT
    # Constraints: Minimum length = 0, Maximum length = 36
    # RoutePoints_Full
    def PtTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of a waypoint which identifies the location of the point.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 0, Maximum length = 32
    # RoutePoints_Full
    def WaypointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # RoutePoints_Full
    def DafifPt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RoutePoints_Full
    def PtLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # RoutePoints_Full
    def PtLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
    # Example: /// Example: 7.35
    # Constraints: No constraints specified.
    # RoutePoints_Full
    def MagDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The length of the course from the Navigational Aid (NAVAID) in nautical miles.
    # Example: /// Example: 100.2
    # Constraints: No constraints specified.
    # RoutePoints_Full
    def NavaidLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Navigational Aid (NAVAID) identification code.
    # Example: /// Example: HTO
    # Constraints: Minimum length = 0, Maximum length = 16
    # RoutePoints_Full
    def Navaid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
    # Example: /// Example: NL
    # Constraints: Minimum length = 0, Maximum length = 4
    # RoutePoints_Full
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
    # Example: /// Example: IZ
    # Constraints: Minimum length = 0, Maximum length = 16
    # RoutePoints_Full
    def AltCountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
    # Example: /// Example: VORTAC
    # Constraints: Minimum length = 0, Maximum length = 12
    # RoutePoints_Full
    def NavaidType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RoutePoints_FullStart(builder):
    builder.StartObject(13)

def Start(builder):
    RoutePoints_FullStart(builder)

def RoutePoints_FullAddPtSequenceId(builder, ptSequenceId):
    builder.PrependInt32Slot(0, ptSequenceId, 0)

def AddPtSequenceId(builder, ptSequenceId):
    RoutePoints_FullAddPtSequenceId(builder, ptSequenceId)

def RoutePoints_FullAddPtTypeCode(builder, ptTypeCode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ptTypeCode), 0)

def AddPtTypeCode(builder, ptTypeCode):
    RoutePoints_FullAddPtTypeCode(builder, ptTypeCode)

def RoutePoints_FullAddPtTypeName(builder, ptTypeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ptTypeName), 0)

def AddPtTypeName(builder, ptTypeName):
    RoutePoints_FullAddPtTypeName(builder, ptTypeName)

def RoutePoints_FullAddWaypointName(builder, waypointName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(waypointName), 0)

def AddWaypointName(builder, waypointName):
    RoutePoints_FullAddWaypointName(builder, waypointName)

def RoutePoints_FullAddDafifPt(builder, dafifPt):
    builder.PrependBoolSlot(4, dafifPt, 0)

def AddDafifPt(builder, dafifPt):
    RoutePoints_FullAddDafifPt(builder, dafifPt)

def RoutePoints_FullAddPtLat(builder, ptLat):
    builder.PrependFloat64Slot(5, ptLat, 0.0)

def AddPtLat(builder, ptLat):
    RoutePoints_FullAddPtLat(builder, ptLat)

def RoutePoints_FullAddPtLon(builder, ptLon):
    builder.PrependFloat64Slot(6, ptLon, 0.0)

def AddPtLon(builder, ptLon):
    RoutePoints_FullAddPtLon(builder, ptLon)

def RoutePoints_FullAddMagDec(builder, magDec):
    builder.PrependFloat64Slot(7, magDec, 0.0)

def AddMagDec(builder, magDec):
    RoutePoints_FullAddMagDec(builder, magDec)

def RoutePoints_FullAddNavaidLength(builder, navaidLength):
    builder.PrependFloat64Slot(8, navaidLength, 0.0)

def AddNavaidLength(builder, navaidLength):
    RoutePoints_FullAddNavaidLength(builder, navaidLength)

def RoutePoints_FullAddNavaid(builder, navaid):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(navaid), 0)

def AddNavaid(builder, navaid):
    RoutePoints_FullAddNavaid(builder, navaid)

def RoutePoints_FullAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    RoutePoints_FullAddCountryCode(builder, countryCode)

def RoutePoints_FullAddAltCountryCode(builder, altCountryCode):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(altCountryCode), 0)

def AddAltCountryCode(builder, altCountryCode):
    RoutePoints_FullAddAltCountryCode(builder, altCountryCode)

def RoutePoints_FullAddNavaidType(builder, navaidType):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(navaidType), 0)

def AddNavaidType(builder, navaidType):
    RoutePoints_FullAddNavaidType(builder, navaidType)

def RoutePoints_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return RoutePoints_FullEnd(builder)


class RoutePoints_FullT(object):

    # RoutePoints_FullT
    def __init__(self):
        self.ptSequenceId = 0  # type: int
        self.ptTypeCode = None  # type: str
        self.ptTypeName = None  # type: str
        self.waypointName = None  # type: str
        self.dafifPt = False  # type: bool
        self.ptLat = 0.0  # type: float
        self.ptLon = 0.0  # type: float
        self.magDec = 0.0  # type: float
        self.navaidLength = 0.0  # type: float
        self.navaid = None  # type: str
        self.countryCode = None  # type: str
        self.altCountryCode = None  # type: str
        self.navaidType = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        routePointsFull = RoutePoints_Full()
        routePointsFull.Init(buf, pos)
        return cls.InitFromObj(routePointsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, routePointsFull):
        x = RoutePoints_FullT()
        x._UnPack(routePointsFull)
        return x

    # RoutePoints_FullT
    def _UnPack(self, routePointsFull):
        if routePointsFull is None:
            return
        self.ptSequenceId = routePointsFull.PtSequenceId()
        self.ptTypeCode = routePointsFull.PtTypeCode()
        self.ptTypeName = routePointsFull.PtTypeName()
        self.waypointName = routePointsFull.WaypointName()
        self.dafifPt = routePointsFull.DafifPt()
        self.ptLat = routePointsFull.PtLat()
        self.ptLon = routePointsFull.PtLon()
        self.magDec = routePointsFull.MagDec()
        self.navaidLength = routePointsFull.NavaidLength()
        self.navaid = routePointsFull.Navaid()
        self.countryCode = routePointsFull.CountryCode()
        self.altCountryCode = routePointsFull.AltCountryCode()
        self.navaidType = routePointsFull.NavaidType()

    # RoutePoints_FullT
    def Pack(self, builder):
        if self.ptTypeCode is not None:
            ptTypeCode = builder.CreateString(self.ptTypeCode)
        if self.ptTypeName is not None:
            ptTypeName = builder.CreateString(self.ptTypeName)
        if self.waypointName is not None:
            waypointName = builder.CreateString(self.waypointName)
        if self.navaid is not None:
            navaid = builder.CreateString(self.navaid)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.altCountryCode is not None:
            altCountryCode = builder.CreateString(self.altCountryCode)
        if self.navaidType is not None:
            navaidType = builder.CreateString(self.navaidType)
        RoutePoints_FullStart(builder)
        RoutePoints_FullAddPtSequenceId(builder, self.ptSequenceId)
        if self.ptTypeCode is not None:
            RoutePoints_FullAddPtTypeCode(builder, ptTypeCode)
        if self.ptTypeName is not None:
            RoutePoints_FullAddPtTypeName(builder, ptTypeName)
        if self.waypointName is not None:
            RoutePoints_FullAddWaypointName(builder, waypointName)
        RoutePoints_FullAddDafifPt(builder, self.dafifPt)
        RoutePoints_FullAddPtLat(builder, self.ptLat)
        RoutePoints_FullAddPtLon(builder, self.ptLon)
        RoutePoints_FullAddMagDec(builder, self.magDec)
        RoutePoints_FullAddNavaidLength(builder, self.navaidLength)
        if self.navaid is not None:
            RoutePoints_FullAddNavaid(builder, navaid)
        if self.countryCode is not None:
            RoutePoints_FullAddCountryCode(builder, countryCode)
        if self.altCountryCode is not None:
            RoutePoints_FullAddAltCountryCode(builder, altCountryCode)
        if self.navaidType is not None:
            RoutePoints_FullAddNavaidType(builder, navaidType)
        routePointsFull = RoutePoints_FullEnd(builder)
        return routePointsFull
