# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A request for various effects on a target.
class EffectRequest_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EffectRequest_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEffectRequest_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EffectRequest_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x46\x46\x45", size_prefixed=size_prefixed)

    # EffectRequest_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: EFFECTREQUEST-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EffectRequest_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EffectRequest_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The extenal system identifier of this request. A human readable unique id.
    # Example: /// Example: EXTERNALREQUEST-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EffectRequest_Ingest
    def ExternalRequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
    # Example: /// Example: ['COVER', 'DECEIVE']
    # Constraints: No constraints specified.
    # EffectRequest_Ingest
    def EffectList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectRequest_Ingest
    def EffectListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectRequest_Ingest
    def EffectListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
    # Example: /// Example: CREATED
    # Constraints: Minimum length = 0, Maximum length = 24
    # EffectRequest_Ingest
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specific descriptive instantiation of the effect, e.g., playbook to be used.
    # Example: /// Example: Example Notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # EffectRequest_Ingest
    def Context(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time the effect should start, in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectRequest_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time the effect should end, in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectRequest_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
    # BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
    # IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
    # NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
    # NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
    # Example: /// Example: NoLaterThan
    # Constraints: Minimum length = 0, Maximum length = 24
    # EffectRequest_Ingest
    def DeadlineType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source type of the targetId identifier (POI, TRACK).
    # Example: /// Example: POI
    # Constraints: Minimum length = 0, Maximum length = 24
    # EffectRequest_Ingest
    def TargetSrcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    # Example: /// Example: TARGETSRC-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EffectRequest_Ingest
    def TargetSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The priority (LOW, MEDIUM, HIGH) of this request.
    # Example: /// Example: LOW
    # Constraints: Minimum length = 0, Maximum length = 24
    # EffectRequest_Ingest
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type or class of the preference model used to evaluate this offer.
    # Example: /// Example: Preference model
    # Constraints: Minimum length = 0, Maximum length = 256
    # EffectRequest_Ingest
    def ModelClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
    # Example: /// Example: ['COST', 'RISK']
    # Constraints: No constraints specified.
    # EffectRequest_Ingest
    def MetricTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectRequest_Ingest
    def MetricTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectRequest_Ingest
    def MetricTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
    # Example: /// Example: [0.5, 0.6]
    # Constraints: No constraints specified.
    # EffectRequest_Ingest
    def MetricWeights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectRequest_Ingest
    def MetricWeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectRequest_Ingest
    def MetricWeightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EffectRequest_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectRequest_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # EffectRequest_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectRequest_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EffectRequest_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # EffectRequest_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EffectRequest_IngestStart(builder):
    builder.StartObject(21)

def Start(builder):
    EffectRequest_IngestStart(builder)

def EffectRequest_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EffectRequest_IngestAddId(builder, id)

def EffectRequest_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EffectRequest_IngestAddClassificationMarking(builder, classificationMarking)

def EffectRequest_IngestAddExternalRequestId(builder, externalRequestId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(externalRequestId), 0)

def AddExternalRequestId(builder, externalRequestId):
    EffectRequest_IngestAddExternalRequestId(builder, externalRequestId)

def EffectRequest_IngestAddEffectList(builder, effectList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(effectList), 0)

def AddEffectList(builder, effectList):
    EffectRequest_IngestAddEffectList(builder, effectList)

def EffectRequest_IngestStartEffectListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEffectListVector(builder, numElems):
    return EffectRequest_IngestStartEffectListVector(builder, numElems)

def EffectRequest_IngestAddState(builder, state):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)

def AddState(builder, state):
    EffectRequest_IngestAddState(builder, state)

def EffectRequest_IngestAddContext(builder, context):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(context), 0)

def AddContext(builder, context):
    EffectRequest_IngestAddContext(builder, context)

def EffectRequest_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    EffectRequest_IngestAddStartTime(builder, startTime)

def EffectRequest_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    EffectRequest_IngestAddEndTime(builder, endTime)

def EffectRequest_IngestAddDeadlineType(builder, deadlineType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(deadlineType), 0)

def AddDeadlineType(builder, deadlineType):
    EffectRequest_IngestAddDeadlineType(builder, deadlineType)

def EffectRequest_IngestAddTargetSrcType(builder, targetSrcType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(targetSrcType), 0)

def AddTargetSrcType(builder, targetSrcType):
    EffectRequest_IngestAddTargetSrcType(builder, targetSrcType)

def EffectRequest_IngestAddTargetSrcId(builder, targetSrcId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(targetSrcId), 0)

def AddTargetSrcId(builder, targetSrcId):
    EffectRequest_IngestAddTargetSrcId(builder, targetSrcId)

def EffectRequest_IngestAddPriority(builder, priority):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)

def AddPriority(builder, priority):
    EffectRequest_IngestAddPriority(builder, priority)

def EffectRequest_IngestAddModelClass(builder, modelClass):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(modelClass), 0)

def AddModelClass(builder, modelClass):
    EffectRequest_IngestAddModelClass(builder, modelClass)

def EffectRequest_IngestAddMetricTypes(builder, metricTypes):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(metricTypes), 0)

def AddMetricTypes(builder, metricTypes):
    EffectRequest_IngestAddMetricTypes(builder, metricTypes)

def EffectRequest_IngestStartMetricTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetricTypesVector(builder, numElems):
    return EffectRequest_IngestStartMetricTypesVector(builder, numElems)

def EffectRequest_IngestAddMetricWeights(builder, metricWeights):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(metricWeights), 0)

def AddMetricWeights(builder, metricWeights):
    EffectRequest_IngestAddMetricWeights(builder, metricWeights)

def EffectRequest_IngestStartMetricWeightsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetricWeightsVector(builder, numElems):
    return EffectRequest_IngestStartMetricWeightsVector(builder, numElems)

def EffectRequest_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EffectRequest_IngestAddCreatedAt(builder, createdAt)

def EffectRequest_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EffectRequest_IngestAddCreatedBy(builder, createdBy)

def EffectRequest_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EffectRequest_IngestAddSource(builder, source)

def EffectRequest_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EffectRequest_IngestAddOrigin(builder, origin)

def EffectRequest_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(19, dataMode, 0)

def AddDataMode(builder, dataMode):
    EffectRequest_IngestAddDataMode(builder, dataMode)

def EffectRequest_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EffectRequest_IngestAddOrigNetwork(builder, origNetwork)

def EffectRequest_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EffectRequest_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class EffectRequest_IngestT(object):

    # EffectRequest_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.externalRequestId = None  # type: str
        self.effectList = None  # type: List[str]
        self.state = None  # type: str
        self.context = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.deadlineType = None  # type: str
        self.targetSrcType = None  # type: str
        self.targetSrcId = None  # type: str
        self.priority = None  # type: str
        self.modelClass = None  # type: str
        self.metricTypes = None  # type: List[str]
        self.metricWeights = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        effectRequestIngest = EffectRequest_Ingest()
        effectRequestIngest.Init(buf, pos)
        return cls.InitFromObj(effectRequestIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, effectRequestIngest):
        x = EffectRequest_IngestT()
        x._UnPack(effectRequestIngest)
        return x

    # EffectRequest_IngestT
    def _UnPack(self, effectRequestIngest):
        if effectRequestIngest is None:
            return
        self.id = effectRequestIngest.Id()
        self.classificationMarking = effectRequestIngest.ClassificationMarking()
        self.externalRequestId = effectRequestIngest.ExternalRequestId()
        if not effectRequestIngest.EffectListIsNone():
            self.effectList = []
            for i in range(effectRequestIngest.EffectListLength()):
                self.effectList.append(effectRequestIngest.EffectList(i))
        self.state = effectRequestIngest.State()
        self.context = effectRequestIngest.Context()
        self.startTime = effectRequestIngest.StartTime()
        self.endTime = effectRequestIngest.EndTime()
        self.deadlineType = effectRequestIngest.DeadlineType()
        self.targetSrcType = effectRequestIngest.TargetSrcType()
        self.targetSrcId = effectRequestIngest.TargetSrcId()
        self.priority = effectRequestIngest.Priority()
        self.modelClass = effectRequestIngest.ModelClass()
        if not effectRequestIngest.MetricTypesIsNone():
            self.metricTypes = []
            for i in range(effectRequestIngest.MetricTypesLength()):
                self.metricTypes.append(effectRequestIngest.MetricTypes(i))
        if not effectRequestIngest.MetricWeightsIsNone():
            self.metricWeights = []
            for i in range(effectRequestIngest.MetricWeightsLength()):
                self.metricWeights.append(effectRequestIngest.MetricWeights(i))
        self.createdAt = effectRequestIngest.CreatedAt()
        self.createdBy = effectRequestIngest.CreatedBy()
        self.source = effectRequestIngest.Source()
        self.origin = effectRequestIngest.Origin()
        self.dataMode = effectRequestIngest.DataMode()
        self.origNetwork = effectRequestIngest.OrigNetwork()

    # EffectRequest_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.externalRequestId is not None:
            externalRequestId = builder.CreateString(self.externalRequestId)
        if self.effectList is not None:
            effectListlist = []
            for i in range(len(self.effectList)):
                effectListlist.append(builder.CreateString(self.effectList[i]))
            EffectRequest_IngestStartEffectListVector(builder, len(self.effectList))
            for i in reversed(range(len(self.effectList))):
                builder.PrependUOffsetTRelative(effectListlist[i])
            effectList = builder.EndVector()
        if self.state is not None:
            state = builder.CreateString(self.state)
        if self.context is not None:
            context = builder.CreateString(self.context)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.deadlineType is not None:
            deadlineType = builder.CreateString(self.deadlineType)
        if self.targetSrcType is not None:
            targetSrcType = builder.CreateString(self.targetSrcType)
        if self.targetSrcId is not None:
            targetSrcId = builder.CreateString(self.targetSrcId)
        if self.priority is not None:
            priority = builder.CreateString(self.priority)
        if self.modelClass is not None:
            modelClass = builder.CreateString(self.modelClass)
        if self.metricTypes is not None:
            metricTypeslist = []
            for i in range(len(self.metricTypes)):
                metricTypeslist.append(builder.CreateString(self.metricTypes[i]))
            EffectRequest_IngestStartMetricTypesVector(builder, len(self.metricTypes))
            for i in reversed(range(len(self.metricTypes))):
                builder.PrependUOffsetTRelative(metricTypeslist[i])
            metricTypes = builder.EndVector()
        if self.metricWeights is not None:
            metricWeightslist = []
            for i in range(len(self.metricWeights)):
                metricWeightslist.append(builder.CreateString(self.metricWeights[i]))
            EffectRequest_IngestStartMetricWeightsVector(builder, len(self.metricWeights))
            for i in reversed(range(len(self.metricWeights))):
                builder.PrependUOffsetTRelative(metricWeightslist[i])
            metricWeights = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        EffectRequest_IngestStart(builder)
        if self.id is not None:
            EffectRequest_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            EffectRequest_IngestAddClassificationMarking(builder, classificationMarking)
        if self.externalRequestId is not None:
            EffectRequest_IngestAddExternalRequestId(builder, externalRequestId)
        if self.effectList is not None:
            EffectRequest_IngestAddEffectList(builder, effectList)
        if self.state is not None:
            EffectRequest_IngestAddState(builder, state)
        if self.context is not None:
            EffectRequest_IngestAddContext(builder, context)
        if self.startTime is not None:
            EffectRequest_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            EffectRequest_IngestAddEndTime(builder, endTime)
        if self.deadlineType is not None:
            EffectRequest_IngestAddDeadlineType(builder, deadlineType)
        if self.targetSrcType is not None:
            EffectRequest_IngestAddTargetSrcType(builder, targetSrcType)
        if self.targetSrcId is not None:
            EffectRequest_IngestAddTargetSrcId(builder, targetSrcId)
        if self.priority is not None:
            EffectRequest_IngestAddPriority(builder, priority)
        if self.modelClass is not None:
            EffectRequest_IngestAddModelClass(builder, modelClass)
        if self.metricTypes is not None:
            EffectRequest_IngestAddMetricTypes(builder, metricTypes)
        if self.metricWeights is not None:
            EffectRequest_IngestAddMetricWeights(builder, metricWeights)
        if self.createdAt is not None:
            EffectRequest_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EffectRequest_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            EffectRequest_IngestAddSource(builder, source)
        if self.origin is not None:
            EffectRequest_IngestAddOrigin(builder, origin)
        EffectRequest_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            EffectRequest_IngestAddOrigNetwork(builder, origNetwork)
        effectRequestIngest = EffectRequest_IngestEnd(builder)
        return effectRequestIngest
