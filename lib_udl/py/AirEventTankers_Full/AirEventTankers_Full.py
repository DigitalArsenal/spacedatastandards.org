# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of tanker aircraft associated with this Air Event.
class AirEventTankers_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirEventTankers_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirEventTankers_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirEventTankers_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x45", size_prefixed=size_prefixed)

    # AirEventTankers_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The UDL ID of the aircraft sortie this tanker is associated with for this event.
    # Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventTankers_Full
    def IdTankerSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the mission this tanker is associated with for this event.
    # Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventTankers_Full
    def IdTankerMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the airfield this tanker is associated with for this event.
    # Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventTankers_Full
    def IdTankerAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventTankers_Full
    def ExternalTankerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Coordination record identifier of this tanker.
    # Example: /// Example: TTC601
    # Constraints: Minimum length = 0, Maximum length = 6
    # AirEventTankers_Full
    def TankerCoord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Model Design Series designation of this tanker.
    # Example: /// Example: KC135R
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirEventTankers_Full
    def TankerMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Air Mobility Command (AMC) mission identifier of this tanker.
    # Example: /// Example: 8PH000B1S052
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEventTankers_Full
    def AmcTankerMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate mission identifier of this tanker provided by source.
    # Example: /// Example: 1UN05201L121
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirEventTankers_Full
    def AltTankerMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign assigned to this tanker.
    # Example: /// Example: BAKER
    # Constraints: Minimum length = 0, Maximum length = 24
    # AirEventTankers_Full
    def TankerCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The wing or unit that owns this tanker.
    # Example: /// Example: 117ARW
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirEventTankers_Full
    def TankerOwner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name and/or number of the point of contact for this tanker.
    # Example: /// Example: JOHN SMITH (555)555-5555
    # Constraints: Minimum length = 0, Maximum length = 68
    # AirEventTankers_Full
    def TankerPoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifies the itinerary point of a mission that this tanker is linked to.
    # Example: /// Example: 825
    # Constraints: No constraints specified.
    # AirEventTankers_Full
    def TankerLegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Location the tanker has been deployed to in preparation for an air refueling event.
    # Example: /// Example: KOFF
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirEventTankers_Full
    def TankerDeployedIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
    # Example: /// Example: DROGUE
    # Constraints: Minimum length = 0, Maximum length = 6
    # AirEventTankers_Full
    def TankerDeliveryMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
    # Example: /// Example: 15000000.1
    # Constraints: No constraints specified.
    # AirEventTankers_Full
    def FuelOff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Position of this tanker within a group of tankers in an air refueling event.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # AirEventTankers_Full
    def TankerCellPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Type of fuel being transferred from the tanker in an air refueling event.
    # Example: /// Example: JP8
    # Constraints: Minimum length = 0, Maximum length = 3
    # AirEventTankers_Full
    def TankerFuelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that this tanker is flying a dual role mission in an air refueling event.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AirEventTankers_Full
    def DualRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AirEventTankers_FullStart(builder):
    builder.StartObject(18)

def Start(builder):
    AirEventTankers_FullStart(builder)

def AirEventTankers_FullAddIdTankerSortie(builder, idTankerSortie):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idTankerSortie), 0)

def AddIdTankerSortie(builder, idTankerSortie):
    AirEventTankers_FullAddIdTankerSortie(builder, idTankerSortie)

def AirEventTankers_FullAddIdTankerMission(builder, idTankerMission):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idTankerMission), 0)

def AddIdTankerMission(builder, idTankerMission):
    AirEventTankers_FullAddIdTankerMission(builder, idTankerMission)

def AirEventTankers_FullAddIdTankerAirfield(builder, idTankerAirfield):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idTankerAirfield), 0)

def AddIdTankerAirfield(builder, idTankerAirfield):
    AirEventTankers_FullAddIdTankerAirfield(builder, idTankerAirfield)

def AirEventTankers_FullAddExternalTankerId(builder, externalTankerId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(externalTankerId), 0)

def AddExternalTankerId(builder, externalTankerId):
    AirEventTankers_FullAddExternalTankerId(builder, externalTankerId)

def AirEventTankers_FullAddTankerCoord(builder, tankerCoord):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tankerCoord), 0)

def AddTankerCoord(builder, tankerCoord):
    AirEventTankers_FullAddTankerCoord(builder, tankerCoord)

def AirEventTankers_FullAddTankerMds(builder, tankerMds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tankerMds), 0)

def AddTankerMds(builder, tankerMds):
    AirEventTankers_FullAddTankerMds(builder, tankerMds)

def AirEventTankers_FullAddAmcTankerMissionId(builder, amcTankerMissionId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(amcTankerMissionId), 0)

def AddAmcTankerMissionId(builder, amcTankerMissionId):
    AirEventTankers_FullAddAmcTankerMissionId(builder, amcTankerMissionId)

def AirEventTankers_FullAddAltTankerMissionId(builder, altTankerMissionId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(altTankerMissionId), 0)

def AddAltTankerMissionId(builder, altTankerMissionId):
    AirEventTankers_FullAddAltTankerMissionId(builder, altTankerMissionId)

def AirEventTankers_FullAddTankerCallSign(builder, tankerCallSign):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tankerCallSign), 0)

def AddTankerCallSign(builder, tankerCallSign):
    AirEventTankers_FullAddTankerCallSign(builder, tankerCallSign)

def AirEventTankers_FullAddTankerOwner(builder, tankerOwner):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tankerOwner), 0)

def AddTankerOwner(builder, tankerOwner):
    AirEventTankers_FullAddTankerOwner(builder, tankerOwner)

def AirEventTankers_FullAddTankerPoc(builder, tankerPoc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(tankerPoc), 0)

def AddTankerPoc(builder, tankerPoc):
    AirEventTankers_FullAddTankerPoc(builder, tankerPoc)

def AirEventTankers_FullAddTankerLegNum(builder, tankerLegNum):
    builder.PrependInt32Slot(11, tankerLegNum, 0)

def AddTankerLegNum(builder, tankerLegNum):
    AirEventTankers_FullAddTankerLegNum(builder, tankerLegNum)

def AirEventTankers_FullAddTankerDeployedIcao(builder, tankerDeployedIcao):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(tankerDeployedIcao), 0)

def AddTankerDeployedIcao(builder, tankerDeployedIcao):
    AirEventTankers_FullAddTankerDeployedIcao(builder, tankerDeployedIcao)

def AirEventTankers_FullAddTankerDeliveryMethod(builder, tankerDeliveryMethod):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(tankerDeliveryMethod), 0)

def AddTankerDeliveryMethod(builder, tankerDeliveryMethod):
    AirEventTankers_FullAddTankerDeliveryMethod(builder, tankerDeliveryMethod)

def AirEventTankers_FullAddFuelOff(builder, fuelOff):
    builder.PrependFloat64Slot(14, fuelOff, 0.0)

def AddFuelOff(builder, fuelOff):
    AirEventTankers_FullAddFuelOff(builder, fuelOff)

def AirEventTankers_FullAddTankerCellPosition(builder, tankerCellPosition):
    builder.PrependInt32Slot(15, tankerCellPosition, 0)

def AddTankerCellPosition(builder, tankerCellPosition):
    AirEventTankers_FullAddTankerCellPosition(builder, tankerCellPosition)

def AirEventTankers_FullAddTankerFuelType(builder, tankerFuelType):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(tankerFuelType), 0)

def AddTankerFuelType(builder, tankerFuelType):
    AirEventTankers_FullAddTankerFuelType(builder, tankerFuelType)

def AirEventTankers_FullAddDualRole(builder, dualRole):
    builder.PrependBoolSlot(17, dualRole, 0)

def AddDualRole(builder, dualRole):
    AirEventTankers_FullAddDualRole(builder, dualRole)

def AirEventTankers_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirEventTankers_FullEnd(builder)


class AirEventTankers_FullT(object):

    # AirEventTankers_FullT
    def __init__(self):
        self.idTankerSortie = None  # type: str
        self.idTankerMission = None  # type: str
        self.idTankerAirfield = None  # type: str
        self.externalTankerId = None  # type: str
        self.tankerCoord = None  # type: str
        self.tankerMds = None  # type: str
        self.amcTankerMissionId = None  # type: str
        self.altTankerMissionId = None  # type: str
        self.tankerCallSign = None  # type: str
        self.tankerOwner = None  # type: str
        self.tankerPoc = None  # type: str
        self.tankerLegNum = 0  # type: int
        self.tankerDeployedIcao = None  # type: str
        self.tankerDeliveryMethod = None  # type: str
        self.fuelOff = 0.0  # type: float
        self.tankerCellPosition = 0  # type: int
        self.tankerFuelType = None  # type: str
        self.dualRole = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airEventTankersFull = AirEventTankers_Full()
        airEventTankersFull.Init(buf, pos)
        return cls.InitFromObj(airEventTankersFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airEventTankersFull):
        x = AirEventTankers_FullT()
        x._UnPack(airEventTankersFull)
        return x

    # AirEventTankers_FullT
    def _UnPack(self, airEventTankersFull):
        if airEventTankersFull is None:
            return
        self.idTankerSortie = airEventTankersFull.IdTankerSortie()
        self.idTankerMission = airEventTankersFull.IdTankerMission()
        self.idTankerAirfield = airEventTankersFull.IdTankerAirfield()
        self.externalTankerId = airEventTankersFull.ExternalTankerId()
        self.tankerCoord = airEventTankersFull.TankerCoord()
        self.tankerMds = airEventTankersFull.TankerMds()
        self.amcTankerMissionId = airEventTankersFull.AmcTankerMissionId()
        self.altTankerMissionId = airEventTankersFull.AltTankerMissionId()
        self.tankerCallSign = airEventTankersFull.TankerCallSign()
        self.tankerOwner = airEventTankersFull.TankerOwner()
        self.tankerPoc = airEventTankersFull.TankerPoc()
        self.tankerLegNum = airEventTankersFull.TankerLegNum()
        self.tankerDeployedIcao = airEventTankersFull.TankerDeployedIcao()
        self.tankerDeliveryMethod = airEventTankersFull.TankerDeliveryMethod()
        self.fuelOff = airEventTankersFull.FuelOff()
        self.tankerCellPosition = airEventTankersFull.TankerCellPosition()
        self.tankerFuelType = airEventTankersFull.TankerFuelType()
        self.dualRole = airEventTankersFull.DualRole()

    # AirEventTankers_FullT
    def Pack(self, builder):
        if self.idTankerSortie is not None:
            idTankerSortie = builder.CreateString(self.idTankerSortie)
        if self.idTankerMission is not None:
            idTankerMission = builder.CreateString(self.idTankerMission)
        if self.idTankerAirfield is not None:
            idTankerAirfield = builder.CreateString(self.idTankerAirfield)
        if self.externalTankerId is not None:
            externalTankerId = builder.CreateString(self.externalTankerId)
        if self.tankerCoord is not None:
            tankerCoord = builder.CreateString(self.tankerCoord)
        if self.tankerMds is not None:
            tankerMds = builder.CreateString(self.tankerMds)
        if self.amcTankerMissionId is not None:
            amcTankerMissionId = builder.CreateString(self.amcTankerMissionId)
        if self.altTankerMissionId is not None:
            altTankerMissionId = builder.CreateString(self.altTankerMissionId)
        if self.tankerCallSign is not None:
            tankerCallSign = builder.CreateString(self.tankerCallSign)
        if self.tankerOwner is not None:
            tankerOwner = builder.CreateString(self.tankerOwner)
        if self.tankerPoc is not None:
            tankerPoc = builder.CreateString(self.tankerPoc)
        if self.tankerDeployedIcao is not None:
            tankerDeployedIcao = builder.CreateString(self.tankerDeployedIcao)
        if self.tankerDeliveryMethod is not None:
            tankerDeliveryMethod = builder.CreateString(self.tankerDeliveryMethod)
        if self.tankerFuelType is not None:
            tankerFuelType = builder.CreateString(self.tankerFuelType)
        AirEventTankers_FullStart(builder)
        if self.idTankerSortie is not None:
            AirEventTankers_FullAddIdTankerSortie(builder, idTankerSortie)
        if self.idTankerMission is not None:
            AirEventTankers_FullAddIdTankerMission(builder, idTankerMission)
        if self.idTankerAirfield is not None:
            AirEventTankers_FullAddIdTankerAirfield(builder, idTankerAirfield)
        if self.externalTankerId is not None:
            AirEventTankers_FullAddExternalTankerId(builder, externalTankerId)
        if self.tankerCoord is not None:
            AirEventTankers_FullAddTankerCoord(builder, tankerCoord)
        if self.tankerMds is not None:
            AirEventTankers_FullAddTankerMds(builder, tankerMds)
        if self.amcTankerMissionId is not None:
            AirEventTankers_FullAddAmcTankerMissionId(builder, amcTankerMissionId)
        if self.altTankerMissionId is not None:
            AirEventTankers_FullAddAltTankerMissionId(builder, altTankerMissionId)
        if self.tankerCallSign is not None:
            AirEventTankers_FullAddTankerCallSign(builder, tankerCallSign)
        if self.tankerOwner is not None:
            AirEventTankers_FullAddTankerOwner(builder, tankerOwner)
        if self.tankerPoc is not None:
            AirEventTankers_FullAddTankerPoc(builder, tankerPoc)
        AirEventTankers_FullAddTankerLegNum(builder, self.tankerLegNum)
        if self.tankerDeployedIcao is not None:
            AirEventTankers_FullAddTankerDeployedIcao(builder, tankerDeployedIcao)
        if self.tankerDeliveryMethod is not None:
            AirEventTankers_FullAddTankerDeliveryMethod(builder, tankerDeliveryMethod)
        AirEventTankers_FullAddFuelOff(builder, self.fuelOff)
        AirEventTankers_FullAddTankerCellPosition(builder, self.tankerCellPosition)
        if self.tankerFuelType is not None:
            AirEventTankers_FullAddTankerFuelType(builder, tankerFuelType)
        AirEventTankers_FullAddDualRole(builder, self.dualRole)
        airEventTankersFull = AirEventTankers_FullEnd(builder)
        return airEventTankersFull
