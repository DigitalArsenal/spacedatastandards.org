# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// List of COA metrics associated with this effect response.
class EffectResponseMetrics_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EffectResponseMetrics_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEffectResponseMetrics_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EffectResponseMetrics_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x46\x46\x45", size_prefixed=size_prefixed)

    # EffectResponseMetrics_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
    # Example: /// Example: GoalAchievement
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponseMetrics_Ingest
    def MetricType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The metric score specific to its domain.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # EffectResponseMetrics_Ingest
    def DomainValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The metric score adjusted to be relative and comparable to other domains.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # EffectResponseMetrics_Ingest
    def RelativeValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The metric that was used to score this task.
    # Example: /// Example: Example metric
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EffectResponseMetrics_Ingest
    def Provenance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EffectResponseMetrics_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    EffectResponseMetrics_IngestStart(builder)

def EffectResponseMetrics_IngestAddMetricType(builder, metricType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(metricType), 0)

def AddMetricType(builder, metricType):
    EffectResponseMetrics_IngestAddMetricType(builder, metricType)

def EffectResponseMetrics_IngestAddDomainValue(builder, domainValue):
    builder.PrependFloat64Slot(1, domainValue, 0.0)

def AddDomainValue(builder, domainValue):
    EffectResponseMetrics_IngestAddDomainValue(builder, domainValue)

def EffectResponseMetrics_IngestAddRelativeValue(builder, relativeValue):
    builder.PrependFloat64Slot(2, relativeValue, 0.0)

def AddRelativeValue(builder, relativeValue):
    EffectResponseMetrics_IngestAddRelativeValue(builder, relativeValue)

def EffectResponseMetrics_IngestAddProvenance(builder, provenance):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(provenance), 0)

def AddProvenance(builder, provenance):
    EffectResponseMetrics_IngestAddProvenance(builder, provenance)

def EffectResponseMetrics_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EffectResponseMetrics_IngestEnd(builder)


class EffectResponseMetrics_IngestT(object):

    # EffectResponseMetrics_IngestT
    def __init__(self):
        self.metricType = None  # type: str
        self.domainValue = 0.0  # type: float
        self.relativeValue = 0.0  # type: float
        self.provenance = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        effectResponseMetricsIngest = EffectResponseMetrics_Ingest()
        effectResponseMetricsIngest.Init(buf, pos)
        return cls.InitFromObj(effectResponseMetricsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, effectResponseMetricsIngest):
        x = EffectResponseMetrics_IngestT()
        x._UnPack(effectResponseMetricsIngest)
        return x

    # EffectResponseMetrics_IngestT
    def _UnPack(self, effectResponseMetricsIngest):
        if effectResponseMetricsIngest is None:
            return
        self.metricType = effectResponseMetricsIngest.MetricType()
        self.domainValue = effectResponseMetricsIngest.DomainValue()
        self.relativeValue = effectResponseMetricsIngest.RelativeValue()
        self.provenance = effectResponseMetricsIngest.Provenance()

    # EffectResponseMetrics_IngestT
    def Pack(self, builder):
        if self.metricType is not None:
            metricType = builder.CreateString(self.metricType)
        if self.provenance is not None:
            provenance = builder.CreateString(self.provenance)
        EffectResponseMetrics_IngestStart(builder)
        if self.metricType is not None:
            EffectResponseMetrics_IngestAddMetricType(builder, metricType)
        EffectResponseMetrics_IngestAddDomainValue(builder, self.domainValue)
        EffectResponseMetrics_IngestAddRelativeValue(builder, self.relativeValue)
        if self.provenance is not None:
            EffectResponseMetrics_IngestAddProvenance(builder, provenance)
        effectResponseMetricsIngest = EffectResponseMetrics_IngestEnd(builder)
        return effectResponseMetricsIngest
