# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model object representing on-orbit objects or satellites in the system.
class Onorbit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Onorbit()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbit(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # Onorbit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Onorbit
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Onorbit
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Onorbit
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Common name of the on-orbit object.
    # Example: /// Example: Example common name
    # Constraints: Minimum length = 0, Maximum length = 128
    # Onorbit
    def CommonName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Constellation to which this satellite belongs.
    # Example: /// Example: Big Dipper
    # Constraints: Minimum length = 0, Maximum length = 128
    # Onorbit
    def Constellation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
    # Example: /// Example: 2021123ABC
    # Constraints: Minimum length = 0, Maximum length = 45
    # Onorbit
    def IntlDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date of launch.
    # Example: /// Example: 2018-01-01
    # Constraints: No constraints specified.
    # Onorbit
    def LaunchDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date of decay.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Onorbit
    def DecayDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
    # Example: /// Example: PAYLOAD
    # Constraints: Minimum length = 0, Maximum length = 32
    # Onorbit
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Onorbit
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission number of the on-orbit object.
    # Example: /// Example: Expedition 1
    # Constraints: Minimum length = 0, Maximum length = 128
    # Onorbit
    def MissionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
    # Example: /// Example: Lunar
    # Constraints: Minimum length = 0, Maximum length = 45
    # Onorbit
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Estimated lifetime of the on-orbit payload, if known.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # Onorbit
    def LifetimeYears(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Alternate name of the on-orbit object.
    # Example: /// Example: Alternate Name
    # Constraints: Minimum length = 0, Maximum length = 64
    # Onorbit
    def AltName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Onorbit
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Onorbit
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Onorbit
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Onorbit
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Onorbit
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Onorbit
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Id of the associated launchSite entity.
    # Example: /// Example: LAUNCHSITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Onorbit
    def LaunchSiteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only collection of antennas on this on-orbit object.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Onorbit
    def Antennas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Onorbit
    def AntennasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Onorbit
    def AntennasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # Read-only collection of batteries on this on-orbit object.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Onorbit
    def Batteries(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Onorbit
    def BatteriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Onorbit
    def BatteriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Read-only collection of solar arrays on this on-orbit object.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Onorbit
    def SolarArrays(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Onorbit
    def SolarArraysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Onorbit
    def SolarArraysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Read-only collection of thrusters (engines) on this on-orbit object.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Onorbit
    def Thrusters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Onorbit
    def ThrustersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Onorbit
    def ThrustersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Read-only collection of details for this on-orbit object.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Onorbit
    def OnorbitDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Onorbit
    def OnorbitDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Onorbit
    def OnorbitDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: No constraints specified.
    # Onorbit
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Onorbit
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitStart(builder):
    builder.StartObject(28)

def Start(builder):
    OnorbitStart(builder)

def OnorbitAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitAddIdOnOrbit(builder, idOnOrbit)

def OnorbitAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitAddClassificationMarking(builder, classificationMarking)

def OnorbitAddSatNo(builder, satNo):
    builder.PrependInt32Slot(2, satNo, 0)

def AddSatNo(builder, satNo):
    OnorbitAddSatNo(builder, satNo)

def OnorbitAddCommonName(builder, commonName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(commonName), 0)

def AddCommonName(builder, commonName):
    OnorbitAddCommonName(builder, commonName)

def OnorbitAddConstellation(builder, constellation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(constellation), 0)

def AddConstellation(builder, constellation):
    OnorbitAddConstellation(builder, constellation)

def OnorbitAddIntlDes(builder, intlDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(intlDes), 0)

def AddIntlDes(builder, intlDes):
    OnorbitAddIntlDes(builder, intlDes)

def OnorbitAddLaunchDate(builder, launchDate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(launchDate), 0)

def AddLaunchDate(builder, launchDate):
    OnorbitAddLaunchDate(builder, launchDate)

def OnorbitAddDecayDate(builder, decayDate):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decayDate), 0)

def AddDecayDate(builder, decayDate):
    OnorbitAddDecayDate(builder, decayDate)

def OnorbitAddObjectType(builder, objectType):
    builder.PrependInt8Slot(8, objectType, 0)

def AddObjectType(builder, objectType):
    OnorbitAddObjectType(builder, objectType)

def OnorbitAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitAddOrigin(builder, origin)

def OnorbitAddMissionNumber(builder, missionNumber):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(missionNumber), 0)

def AddMissionNumber(builder, missionNumber):
    OnorbitAddMissionNumber(builder, missionNumber)

def OnorbitAddCategory(builder, category):
    builder.PrependInt8Slot(11, category, 0)

def AddCategory(builder, category):
    OnorbitAddCategory(builder, category)

def OnorbitAddLifetimeYears(builder, lifetimeYears):
    builder.PrependInt32Slot(12, lifetimeYears, 0)

def AddLifetimeYears(builder, lifetimeYears):
    OnorbitAddLifetimeYears(builder, lifetimeYears)

def OnorbitAddAltName(builder, altName):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(altName), 0)

def AddAltName(builder, altName):
    OnorbitAddAltName(builder, altName)

def OnorbitAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitAddCreatedAt(builder, createdAt)

def OnorbitAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitAddCreatedBy(builder, createdBy)

def OnorbitAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OnorbitAddUpdatedAt(builder, updatedAt)

def OnorbitAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OnorbitAddUpdatedBy(builder, updatedBy)

def OnorbitAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitAddSource(builder, source)

def OnorbitAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(19, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitAddDataMode(builder, dataMode)

def OnorbitAddLaunchSiteId(builder, launchSiteId):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(launchSiteId), 0)

def AddLaunchSiteId(builder, launchSiteId):
    OnorbitAddLaunchSiteId(builder, launchSiteId)

def OnorbitAddAntennas(builder, antennas):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(antennas), 0)

def AddAntennas(builder, antennas):
    OnorbitAddAntennas(builder, antennas)

def OnorbitStartAntennasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAntennasVector(builder, numElems):
    return OnorbitStartAntennasVector(builder, numElems)

def OnorbitAddBatteries(builder, batteries):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(batteries), 0)

def AddBatteries(builder, batteries):
    OnorbitAddBatteries(builder, batteries)

def OnorbitStartBatteriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBatteriesVector(builder, numElems):
    return OnorbitStartBatteriesVector(builder, numElems)

def OnorbitAddSolarArrays(builder, solarArrays):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(solarArrays), 0)

def AddSolarArrays(builder, solarArrays):
    OnorbitAddSolarArrays(builder, solarArrays)

def OnorbitStartSolarArraysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSolarArraysVector(builder, numElems):
    return OnorbitStartSolarArraysVector(builder, numElems)

def OnorbitAddThrusters(builder, thrusters):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(thrusters), 0)

def AddThrusters(builder, thrusters):
    OnorbitAddThrusters(builder, thrusters)

def OnorbitStartThrustersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartThrustersVector(builder, numElems):
    return OnorbitStartThrustersVector(builder, numElems)

def OnorbitAddOnorbitDetails(builder, onorbitDetails):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(onorbitDetails), 0)

def AddOnorbitDetails(builder, onorbitDetails):
    OnorbitAddOnorbitDetails(builder, onorbitDetails)

def OnorbitStartOnorbitDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOnorbitDetailsVector(builder, numElems):
    return OnorbitStartOnorbitDetailsVector(builder, numElems)

def OnorbitAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    OnorbitAddCountryCode(builder, countryCode)

def OnorbitAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitAddOrigNetwork(builder, origNetwork)

def OnorbitEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitEnd(builder)

try:
    from typing import List
except:
    pass

class OnorbitT(object):

    # OnorbitT
    def __init__(self):
        self.idOnOrbit = None  # type: str
        self.classificationMarking = None  # type: str
        self.satNo = 0  # type: int
        self.commonName = None  # type: str
        self.constellation = None  # type: str
        self.intlDes = None  # type: str
        self.launchDate = None  # type: str
        self.decayDate = None  # type: str
        self.objectType = 0  # type: int
        self.origin = None  # type: str
        self.missionNumber = None  # type: str
        self.category = 0  # type: int
        self.lifetimeYears = 0  # type: int
        self.altName = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.launchSiteId = None  # type: str
        self.antennas = None  # type: List[str]
        self.batteries = None  # type: List[str]
        self.solarArrays = None  # type: List[str]
        self.thrusters = None  # type: List[str]
        self.onorbitDetails = None  # type: List[str]
        self.countryCode = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbit = Onorbit()
        onorbit.Init(buf, pos)
        return cls.InitFromObj(onorbit)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbit):
        x = OnorbitT()
        x._UnPack(onorbit)
        return x

    # OnorbitT
    def _UnPack(self, onorbit):
        if onorbit is None:
            return
        self.idOnOrbit = onorbit.IdOnOrbit()
        self.classificationMarking = onorbit.ClassificationMarking()
        self.satNo = onorbit.SatNo()
        self.commonName = onorbit.CommonName()
        self.constellation = onorbit.Constellation()
        self.intlDes = onorbit.IntlDes()
        self.launchDate = onorbit.LaunchDate()
        self.decayDate = onorbit.DecayDate()
        self.objectType = onorbit.ObjectType()
        self.origin = onorbit.Origin()
        self.missionNumber = onorbit.MissionNumber()
        self.category = onorbit.Category()
        self.lifetimeYears = onorbit.LifetimeYears()
        self.altName = onorbit.AltName()
        self.createdAt = onorbit.CreatedAt()
        self.createdBy = onorbit.CreatedBy()
        self.updatedAt = onorbit.UpdatedAt()
        self.updatedBy = onorbit.UpdatedBy()
        self.source = onorbit.Source()
        self.dataMode = onorbit.DataMode()
        self.launchSiteId = onorbit.LaunchSiteId()
        if not onorbit.AntennasIsNone():
            self.antennas = []
            for i in range(onorbit.AntennasLength()):
                self.antennas.append(onorbit.Antennas(i))
        if not onorbit.BatteriesIsNone():
            self.batteries = []
            for i in range(onorbit.BatteriesLength()):
                self.batteries.append(onorbit.Batteries(i))
        if not onorbit.SolarArraysIsNone():
            self.solarArrays = []
            for i in range(onorbit.SolarArraysLength()):
                self.solarArrays.append(onorbit.SolarArrays(i))
        if not onorbit.ThrustersIsNone():
            self.thrusters = []
            for i in range(onorbit.ThrustersLength()):
                self.thrusters.append(onorbit.Thrusters(i))
        if not onorbit.OnorbitDetailsIsNone():
            self.onorbitDetails = []
            for i in range(onorbit.OnorbitDetailsLength()):
                self.onorbitDetails.append(onorbit.OnorbitDetails(i))
        self.countryCode = onorbit.CountryCode()
        self.origNetwork = onorbit.OrigNetwork()

    # OnorbitT
    def Pack(self, builder):
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.commonName is not None:
            commonName = builder.CreateString(self.commonName)
        if self.constellation is not None:
            constellation = builder.CreateString(self.constellation)
        if self.intlDes is not None:
            intlDes = builder.CreateString(self.intlDes)
        if self.launchDate is not None:
            launchDate = builder.CreateString(self.launchDate)
        if self.decayDate is not None:
            decayDate = builder.CreateString(self.decayDate)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.missionNumber is not None:
            missionNumber = builder.CreateString(self.missionNumber)
        if self.altName is not None:
            altName = builder.CreateString(self.altName)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.launchSiteId is not None:
            launchSiteId = builder.CreateString(self.launchSiteId)
        if self.antennas is not None:
            antennaslist = []
            for i in range(len(self.antennas)):
                antennaslist.append(builder.CreateString(self.antennas[i]))
            OnorbitStartAntennasVector(builder, len(self.antennas))
            for i in reversed(range(len(self.antennas))):
                builder.PrependUOffsetTRelative(antennaslist[i])
            antennas = builder.EndVector()
        if self.batteries is not None:
            batterieslist = []
            for i in range(len(self.batteries)):
                batterieslist.append(builder.CreateString(self.batteries[i]))
            OnorbitStartBatteriesVector(builder, len(self.batteries))
            for i in reversed(range(len(self.batteries))):
                builder.PrependUOffsetTRelative(batterieslist[i])
            batteries = builder.EndVector()
        if self.solarArrays is not None:
            solarArrayslist = []
            for i in range(len(self.solarArrays)):
                solarArrayslist.append(builder.CreateString(self.solarArrays[i]))
            OnorbitStartSolarArraysVector(builder, len(self.solarArrays))
            for i in reversed(range(len(self.solarArrays))):
                builder.PrependUOffsetTRelative(solarArrayslist[i])
            solarArrays = builder.EndVector()
        if self.thrusters is not None:
            thrusterslist = []
            for i in range(len(self.thrusters)):
                thrusterslist.append(builder.CreateString(self.thrusters[i]))
            OnorbitStartThrustersVector(builder, len(self.thrusters))
            for i in reversed(range(len(self.thrusters))):
                builder.PrependUOffsetTRelative(thrusterslist[i])
            thrusters = builder.EndVector()
        if self.onorbitDetails is not None:
            onorbitDetailslist = []
            for i in range(len(self.onorbitDetails)):
                onorbitDetailslist.append(builder.CreateString(self.onorbitDetails[i]))
            OnorbitStartOnorbitDetailsVector(builder, len(self.onorbitDetails))
            for i in reversed(range(len(self.onorbitDetails))):
                builder.PrependUOffsetTRelative(onorbitDetailslist[i])
            onorbitDetails = builder.EndVector()
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitStart(builder)
        if self.idOnOrbit is not None:
            OnorbitAddIdOnOrbit(builder, idOnOrbit)
        if self.classificationMarking is not None:
            OnorbitAddClassificationMarking(builder, classificationMarking)
        OnorbitAddSatNo(builder, self.satNo)
        if self.commonName is not None:
            OnorbitAddCommonName(builder, commonName)
        if self.constellation is not None:
            OnorbitAddConstellation(builder, constellation)
        if self.intlDes is not None:
            OnorbitAddIntlDes(builder, intlDes)
        if self.launchDate is not None:
            OnorbitAddLaunchDate(builder, launchDate)
        if self.decayDate is not None:
            OnorbitAddDecayDate(builder, decayDate)
        OnorbitAddObjectType(builder, self.objectType)
        if self.origin is not None:
            OnorbitAddOrigin(builder, origin)
        if self.missionNumber is not None:
            OnorbitAddMissionNumber(builder, missionNumber)
        OnorbitAddCategory(builder, self.category)
        OnorbitAddLifetimeYears(builder, self.lifetimeYears)
        if self.altName is not None:
            OnorbitAddAltName(builder, altName)
        if self.createdAt is not None:
            OnorbitAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OnorbitAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OnorbitAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            OnorbitAddSource(builder, source)
        OnorbitAddDataMode(builder, self.dataMode)
        if self.launchSiteId is not None:
            OnorbitAddLaunchSiteId(builder, launchSiteId)
        if self.antennas is not None:
            OnorbitAddAntennas(builder, antennas)
        if self.batteries is not None:
            OnorbitAddBatteries(builder, batteries)
        if self.solarArrays is not None:
            OnorbitAddSolarArrays(builder, solarArrays)
        if self.thrusters is not None:
            OnorbitAddThrusters(builder, thrusters)
        if self.onorbitDetails is not None:
            OnorbitAddOnorbitDetails(builder, onorbitDetails)
        if self.countryCode is not None:
            OnorbitAddCountryCode(builder, countryCode)
        if self.origNetwork is not None:
            OnorbitAddOrigNetwork(builder, origNetwork)
        onorbit = OnorbitEnd(builder)
        return onorbit
