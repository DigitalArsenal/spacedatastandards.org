# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
class BeamContour_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BeamContour_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBeamContour_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BeamContour_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x45\x41\x4D", size_prefixed=size_prefixed)

    # BeamContour_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BEAMCONTOUR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BeamContour_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # BeamContour_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the beam.
    # Example: /// Example: REF-BEAM-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BeamContour_Abridged
    def IdBeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
    # Example: /// Example: BORESIGHT
    # Constraints: Minimum length = 1, Maximum length = 16
    # BeamContour_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The index number of this contour. The value is required if type = CONTOUR.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def ContourIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
    # Example: /// Example: 17.1
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The region name within the service area.
    # Example: /// Example: Example region name
    # Constraints: Minimum length = 0, Maximum length = 24
    # BeamContour_Abridged
    def RegionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def GeographyText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def GeographyJson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected.
    # Example: /// Example: ST_Polygon
    # Constraints: Minimum length = 0, Maximum length = 128
    # BeamContour_Abridged
    def GeographyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def GeographyNdims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 4326
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def GeographySrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # BeamContour_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # BeamContour_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # BeamContour_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # BeamContour_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # BeamContour_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # BeamContour_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def BeamContour_AbridgedStart(builder):
    builder.StartObject(18)

def Start(builder):
    BeamContour_AbridgedStart(builder)

def BeamContour_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    BeamContour_AbridgedAddId(builder, id)

def BeamContour_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    BeamContour_AbridgedAddClassificationMarking(builder, classificationMarking)

def BeamContour_AbridgedAddIdBeam(builder, idBeam):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idBeam), 0)

def AddIdBeam(builder, idBeam):
    BeamContour_AbridgedAddIdBeam(builder, idBeam)

def BeamContour_AbridgedAddType(builder, type):
    builder.PrependInt8Slot(3, type, 0)

def AddType(builder, type):
    BeamContour_AbridgedAddType(builder, type)

def BeamContour_AbridgedAddContourIdx(builder, contourIdx):
    builder.PrependInt32Slot(4, contourIdx, 0)

def AddContourIdx(builder, contourIdx):
    BeamContour_AbridgedAddContourIdx(builder, contourIdx)

def BeamContour_AbridgedAddGain(builder, gain):
    builder.PrependFloat64Slot(5, gain, 0.0)

def AddGain(builder, gain):
    BeamContour_AbridgedAddGain(builder, gain)

def BeamContour_AbridgedAddRegionName(builder, regionName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(regionName), 0)

def AddRegionName(builder, regionName):
    BeamContour_AbridgedAddRegionName(builder, regionName)

def BeamContour_AbridgedAddGeographyText(builder, geographyText):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(geographyText), 0)

def AddGeographyText(builder, geographyText):
    BeamContour_AbridgedAddGeographyText(builder, geographyText)

def BeamContour_AbridgedAddGeographyJson(builder, geographyJson):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(geographyJson), 0)

def AddGeographyJson(builder, geographyJson):
    BeamContour_AbridgedAddGeographyJson(builder, geographyJson)

def BeamContour_AbridgedAddGeographyType(builder, geographyType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(geographyType), 0)

def AddGeographyType(builder, geographyType):
    BeamContour_AbridgedAddGeographyType(builder, geographyType)

def BeamContour_AbridgedAddGeographyNdims(builder, geographyNdims):
    builder.PrependInt32Slot(10, geographyNdims, 0)

def AddGeographyNdims(builder, geographyNdims):
    BeamContour_AbridgedAddGeographyNdims(builder, geographyNdims)

def BeamContour_AbridgedAddGeographySrid(builder, geographySrid):
    builder.PrependInt32Slot(11, geographySrid, 0)

def AddGeographySrid(builder, geographySrid):
    BeamContour_AbridgedAddGeographySrid(builder, geographySrid)

def BeamContour_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    BeamContour_AbridgedAddCreatedAt(builder, createdAt)

def BeamContour_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    BeamContour_AbridgedAddCreatedBy(builder, createdBy)

def BeamContour_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    BeamContour_AbridgedAddSource(builder, source)

def BeamContour_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    BeamContour_AbridgedAddOrigin(builder, origin)

def BeamContour_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    BeamContour_AbridgedAddOrigNetwork(builder, origNetwork)

def BeamContour_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    BeamContour_AbridgedAddDataMode(builder, dataMode)

def BeamContour_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return BeamContour_AbridgedEnd(builder)


class BeamContour_AbridgedT(object):

    # BeamContour_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idBeam = None  # type: str
        self.type = 0  # type: int
        self.contourIdx = 0  # type: int
        self.gain = 0.0  # type: float
        self.regionName = None  # type: str
        self.geographyText = None  # type: str
        self.geographyJson = None  # type: str
        self.geographyType = None  # type: str
        self.geographyNdims = 0  # type: int
        self.geographySrid = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        beamContourAbridged = BeamContour_Abridged()
        beamContourAbridged.Init(buf, pos)
        return cls.InitFromObj(beamContourAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, beamContourAbridged):
        x = BeamContour_AbridgedT()
        x._UnPack(beamContourAbridged)
        return x

    # BeamContour_AbridgedT
    def _UnPack(self, beamContourAbridged):
        if beamContourAbridged is None:
            return
        self.id = beamContourAbridged.Id()
        self.classificationMarking = beamContourAbridged.ClassificationMarking()
        self.idBeam = beamContourAbridged.IdBeam()
        self.type = beamContourAbridged.Type()
        self.contourIdx = beamContourAbridged.ContourIdx()
        self.gain = beamContourAbridged.Gain()
        self.regionName = beamContourAbridged.RegionName()
        self.geographyText = beamContourAbridged.GeographyText()
        self.geographyJson = beamContourAbridged.GeographyJson()
        self.geographyType = beamContourAbridged.GeographyType()
        self.geographyNdims = beamContourAbridged.GeographyNdims()
        self.geographySrid = beamContourAbridged.GeographySrid()
        self.createdAt = beamContourAbridged.CreatedAt()
        self.createdBy = beamContourAbridged.CreatedBy()
        self.source = beamContourAbridged.Source()
        self.origin = beamContourAbridged.Origin()
        self.origNetwork = beamContourAbridged.OrigNetwork()
        self.dataMode = beamContourAbridged.DataMode()

    # BeamContour_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idBeam is not None:
            idBeam = builder.CreateString(self.idBeam)
        if self.regionName is not None:
            regionName = builder.CreateString(self.regionName)
        if self.geographyText is not None:
            geographyText = builder.CreateString(self.geographyText)
        if self.geographyJson is not None:
            geographyJson = builder.CreateString(self.geographyJson)
        if self.geographyType is not None:
            geographyType = builder.CreateString(self.geographyType)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        BeamContour_AbridgedStart(builder)
        if self.id is not None:
            BeamContour_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            BeamContour_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idBeam is not None:
            BeamContour_AbridgedAddIdBeam(builder, idBeam)
        BeamContour_AbridgedAddType(builder, self.type)
        BeamContour_AbridgedAddContourIdx(builder, self.contourIdx)
        BeamContour_AbridgedAddGain(builder, self.gain)
        if self.regionName is not None:
            BeamContour_AbridgedAddRegionName(builder, regionName)
        if self.geographyText is not None:
            BeamContour_AbridgedAddGeographyText(builder, geographyText)
        if self.geographyJson is not None:
            BeamContour_AbridgedAddGeographyJson(builder, geographyJson)
        if self.geographyType is not None:
            BeamContour_AbridgedAddGeographyType(builder, geographyType)
        BeamContour_AbridgedAddGeographyNdims(builder, self.geographyNdims)
        BeamContour_AbridgedAddGeographySrid(builder, self.geographySrid)
        if self.createdAt is not None:
            BeamContour_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            BeamContour_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            BeamContour_AbridgedAddSource(builder, source)
        if self.origin is not None:
            BeamContour_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            BeamContour_AbridgedAddOrigNetwork(builder, origNetwork)
        BeamContour_AbridgedAddDataMode(builder, self.dataMode)
        beamContourAbridged = BeamContour_AbridgedEnd(builder)
        return beamContourAbridged
