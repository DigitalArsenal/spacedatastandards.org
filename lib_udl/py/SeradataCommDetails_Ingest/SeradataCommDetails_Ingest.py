# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Seradata-compiled information on communications payloads.
class SeradataCommDetails_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeradataCommDetails_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeradataCommDetails_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SeradataCommDetails_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x52\x41", size_prefixed=size_prefixed)

    # SeradataCommDetails_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SERADATACOMMDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataCommDetails_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the parent Comm record.
    # Example: /// Example: idComm
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataCommDetails_Ingest
    def IdComm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SeradataCommDetails_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: spacecraftId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataCommDetails_Ingest
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    # Example: /// Example: X
    # Constraints: Minimum length = 0, Maximum length = 5
    # SeradataCommDetails_Ingest
    def Band(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solid state power amplifier, in Watts.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def SolidStatePowerAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm travelingWaveTubeAmplifier in Watts.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def TravelingWaveTubeAmplifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm gatewayUplinkFrom in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def GatewayUplinkFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm gatewayUplinkTo in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def GatewayUplinkTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm gatewayDownlinkFrom in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def GatewayDownlinkFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm gatewayDownlinkTo in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def GatewayDownlinkTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm polarization.
    # Example: /// Example: polarization
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataCommDetails_Ingest
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Effective isotropic radiated power in dB.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def Eirp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm bandwidth in Mhz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm numOperationalTransponders.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def NumOperationalTransponders(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Comm numSpareTransponders.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def NumSpareTransponders(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Comm hostedForCompanyOrgId.
    # Example: /// Example: hostedForCompanyOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataCommDetails_Ingest
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comm manufacturerOrgId.
    # Example: /// Example: manufacturerOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataCommDetails_Ingest
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comm tradeLeaseOrgId.
    # Example: /// Example: tradeLeaseOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataCommDetails_Ingest
    def TradeLeaseOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comm num36MhzEquivalentTransponders.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def Num36MhzEquivalentTransponders(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Comm htsNumUserSpotBeams.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def HtsNumUserSpotBeams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Comm htsUserDownlinkBandwidthPerBeam in Mhz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def HtsUserDownlinkBandwidthPerBeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm htsUserUplinkBandwidthPerBeam in Mhz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def HtsUserUplinkBandwidthPerBeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def EstHtsTotalUserDownlinkBandwidthPerBeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def EstHtsTotalUserUplinkBandwidthPerBeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm estimated HtsTotalCapacity in Gbps.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def EstHtsTotalCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm userDownlinkFrom in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def UserDownlinkFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm userDownlinkTo in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def UserDownlinkTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm userUplinkFrom in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def UserUplinkFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Comm userUplinkTo in Ghz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def UserUplinkTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Payload notes.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SeradataCommDetails_Ingest
    def PayloadNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataCommDetails_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataCommDetails_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataCommDetails_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataCommDetails_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataCommDetails_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataCommDetails_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SeradataCommDetails_IngestStart(builder):
    builder.StartObject(37)

def Start(builder):
    SeradataCommDetails_IngestStart(builder)

def SeradataCommDetails_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SeradataCommDetails_IngestAddId(builder, id)

def SeradataCommDetails_IngestAddIdComm(builder, idComm):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idComm), 0)

def AddIdComm(builder, idComm):
    SeradataCommDetails_IngestAddIdComm(builder, idComm)

def SeradataCommDetails_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SeradataCommDetails_IngestAddClassificationMarking(builder, classificationMarking)

def SeradataCommDetails_IngestAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    SeradataCommDetails_IngestAddSpacecraftId(builder, spacecraftId)

def SeradataCommDetails_IngestAddBand(builder, band):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(band), 0)

def AddBand(builder, band):
    SeradataCommDetails_IngestAddBand(builder, band)

def SeradataCommDetails_IngestAddSolidStatePowerAmp(builder, solidStatePowerAmp):
    builder.PrependFloat64Slot(5, solidStatePowerAmp, 0.0)

def AddSolidStatePowerAmp(builder, solidStatePowerAmp):
    SeradataCommDetails_IngestAddSolidStatePowerAmp(builder, solidStatePowerAmp)

def SeradataCommDetails_IngestAddTravelingWaveTubeAmplifier(builder, travelingWaveTubeAmplifier):
    builder.PrependFloat64Slot(6, travelingWaveTubeAmplifier, 0.0)

def AddTravelingWaveTubeAmplifier(builder, travelingWaveTubeAmplifier):
    SeradataCommDetails_IngestAddTravelingWaveTubeAmplifier(builder, travelingWaveTubeAmplifier)

def SeradataCommDetails_IngestAddGatewayUplinkFrom(builder, gatewayUplinkFrom):
    builder.PrependFloat64Slot(7, gatewayUplinkFrom, 0.0)

def AddGatewayUplinkFrom(builder, gatewayUplinkFrom):
    SeradataCommDetails_IngestAddGatewayUplinkFrom(builder, gatewayUplinkFrom)

def SeradataCommDetails_IngestAddGatewayUplinkTo(builder, gatewayUplinkTo):
    builder.PrependFloat64Slot(8, gatewayUplinkTo, 0.0)

def AddGatewayUplinkTo(builder, gatewayUplinkTo):
    SeradataCommDetails_IngestAddGatewayUplinkTo(builder, gatewayUplinkTo)

def SeradataCommDetails_IngestAddGatewayDownlinkFrom(builder, gatewayDownlinkFrom):
    builder.PrependFloat64Slot(9, gatewayDownlinkFrom, 0.0)

def AddGatewayDownlinkFrom(builder, gatewayDownlinkFrom):
    SeradataCommDetails_IngestAddGatewayDownlinkFrom(builder, gatewayDownlinkFrom)

def SeradataCommDetails_IngestAddGatewayDownlinkTo(builder, gatewayDownlinkTo):
    builder.PrependFloat64Slot(10, gatewayDownlinkTo, 0.0)

def AddGatewayDownlinkTo(builder, gatewayDownlinkTo):
    SeradataCommDetails_IngestAddGatewayDownlinkTo(builder, gatewayDownlinkTo)

def SeradataCommDetails_IngestAddPolarization(builder, polarization):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(polarization), 0)

def AddPolarization(builder, polarization):
    SeradataCommDetails_IngestAddPolarization(builder, polarization)

def SeradataCommDetails_IngestAddEirp(builder, eirp):
    builder.PrependFloat64Slot(12, eirp, 0.0)

def AddEirp(builder, eirp):
    SeradataCommDetails_IngestAddEirp(builder, eirp)

def SeradataCommDetails_IngestAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(13, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    SeradataCommDetails_IngestAddBandwidth(builder, bandwidth)

def SeradataCommDetails_IngestAddNumOperationalTransponders(builder, numOperationalTransponders):
    builder.PrependInt32Slot(14, numOperationalTransponders, 0)

def AddNumOperationalTransponders(builder, numOperationalTransponders):
    SeradataCommDetails_IngestAddNumOperationalTransponders(builder, numOperationalTransponders)

def SeradataCommDetails_IngestAddNumSpareTransponders(builder, numSpareTransponders):
    builder.PrependInt32Slot(15, numSpareTransponders, 0)

def AddNumSpareTransponders(builder, numSpareTransponders):
    SeradataCommDetails_IngestAddNumSpareTransponders(builder, numSpareTransponders)

def SeradataCommDetails_IngestAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    SeradataCommDetails_IngestAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def SeradataCommDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SeradataCommDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId)

def SeradataCommDetails_IngestAddTradeLeaseOrgId(builder, tradeLeaseOrgId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(tradeLeaseOrgId), 0)

def AddTradeLeaseOrgId(builder, tradeLeaseOrgId):
    SeradataCommDetails_IngestAddTradeLeaseOrgId(builder, tradeLeaseOrgId)

def SeradataCommDetails_IngestAddNum36MhzEquivalentTransponders(builder, num36MhzEquivalentTransponders):
    builder.PrependInt32Slot(19, num36MhzEquivalentTransponders, 0)

def AddNum36MhzEquivalentTransponders(builder, num36MhzEquivalentTransponders):
    SeradataCommDetails_IngestAddNum36MhzEquivalentTransponders(builder, num36MhzEquivalentTransponders)

def SeradataCommDetails_IngestAddHtsNumUserSpotBeams(builder, htsNumUserSpotBeams):
    builder.PrependInt32Slot(20, htsNumUserSpotBeams, 0)

def AddHtsNumUserSpotBeams(builder, htsNumUserSpotBeams):
    SeradataCommDetails_IngestAddHtsNumUserSpotBeams(builder, htsNumUserSpotBeams)

def SeradataCommDetails_IngestAddHtsUserDownlinkBandwidthPerBeam(builder, htsUserDownlinkBandwidthPerBeam):
    builder.PrependFloat64Slot(21, htsUserDownlinkBandwidthPerBeam, 0.0)

def AddHtsUserDownlinkBandwidthPerBeam(builder, htsUserDownlinkBandwidthPerBeam):
    SeradataCommDetails_IngestAddHtsUserDownlinkBandwidthPerBeam(builder, htsUserDownlinkBandwidthPerBeam)

def SeradataCommDetails_IngestAddHtsUserUplinkBandwidthPerBeam(builder, htsUserUplinkBandwidthPerBeam):
    builder.PrependFloat64Slot(22, htsUserUplinkBandwidthPerBeam, 0.0)

def AddHtsUserUplinkBandwidthPerBeam(builder, htsUserUplinkBandwidthPerBeam):
    SeradataCommDetails_IngestAddHtsUserUplinkBandwidthPerBeam(builder, htsUserUplinkBandwidthPerBeam)

def SeradataCommDetails_IngestAddEstHtsTotalUserDownlinkBandwidthPerBeam(builder, estHtsTotalUserDownlinkBandwidthPerBeam):
    builder.PrependFloat64Slot(23, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0)

def AddEstHtsTotalUserDownlinkBandwidthPerBeam(builder, estHtsTotalUserDownlinkBandwidthPerBeam):
    SeradataCommDetails_IngestAddEstHtsTotalUserDownlinkBandwidthPerBeam(builder, estHtsTotalUserDownlinkBandwidthPerBeam)

def SeradataCommDetails_IngestAddEstHtsTotalUserUplinkBandwidthPerBeam(builder, estHtsTotalUserUplinkBandwidthPerBeam):
    builder.PrependFloat64Slot(24, estHtsTotalUserUplinkBandwidthPerBeam, 0.0)

def AddEstHtsTotalUserUplinkBandwidthPerBeam(builder, estHtsTotalUserUplinkBandwidthPerBeam):
    SeradataCommDetails_IngestAddEstHtsTotalUserUplinkBandwidthPerBeam(builder, estHtsTotalUserUplinkBandwidthPerBeam)

def SeradataCommDetails_IngestAddEstHtsTotalCapacity(builder, estHtsTotalCapacity):
    builder.PrependFloat64Slot(25, estHtsTotalCapacity, 0.0)

def AddEstHtsTotalCapacity(builder, estHtsTotalCapacity):
    SeradataCommDetails_IngestAddEstHtsTotalCapacity(builder, estHtsTotalCapacity)

def SeradataCommDetails_IngestAddUserDownlinkFrom(builder, userDownlinkFrom):
    builder.PrependFloat64Slot(26, userDownlinkFrom, 0.0)

def AddUserDownlinkFrom(builder, userDownlinkFrom):
    SeradataCommDetails_IngestAddUserDownlinkFrom(builder, userDownlinkFrom)

def SeradataCommDetails_IngestAddUserDownlinkTo(builder, userDownlinkTo):
    builder.PrependFloat64Slot(27, userDownlinkTo, 0.0)

def AddUserDownlinkTo(builder, userDownlinkTo):
    SeradataCommDetails_IngestAddUserDownlinkTo(builder, userDownlinkTo)

def SeradataCommDetails_IngestAddUserUplinkFrom(builder, userUplinkFrom):
    builder.PrependFloat64Slot(28, userUplinkFrom, 0.0)

def AddUserUplinkFrom(builder, userUplinkFrom):
    SeradataCommDetails_IngestAddUserUplinkFrom(builder, userUplinkFrom)

def SeradataCommDetails_IngestAddUserUplinkTo(builder, userUplinkTo):
    builder.PrependFloat64Slot(29, userUplinkTo, 0.0)

def AddUserUplinkTo(builder, userUplinkTo):
    SeradataCommDetails_IngestAddUserUplinkTo(builder, userUplinkTo)

def SeradataCommDetails_IngestAddPayloadNotes(builder, payloadNotes):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(payloadNotes), 0)

def AddPayloadNotes(builder, payloadNotes):
    SeradataCommDetails_IngestAddPayloadNotes(builder, payloadNotes)

def SeradataCommDetails_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SeradataCommDetails_IngestAddSource(builder, source)

def SeradataCommDetails_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SeradataCommDetails_IngestAddOrigin(builder, origin)

def SeradataCommDetails_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SeradataCommDetails_IngestAddOrigNetwork(builder, origNetwork)

def SeradataCommDetails_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(34, dataMode, 0)

def AddDataMode(builder, dataMode):
    SeradataCommDetails_IngestAddDataMode(builder, dataMode)

def SeradataCommDetails_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SeradataCommDetails_IngestAddCreatedAt(builder, createdAt)

def SeradataCommDetails_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SeradataCommDetails_IngestAddCreatedBy(builder, createdBy)

def SeradataCommDetails_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SeradataCommDetails_IngestEnd(builder)


class SeradataCommDetails_IngestT(object):

    # SeradataCommDetails_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.idComm = None  # type: str
        self.classificationMarking = None  # type: str
        self.spacecraftId = None  # type: str
        self.band = None  # type: str
        self.solidStatePowerAmp = 0.0  # type: float
        self.travelingWaveTubeAmplifier = 0.0  # type: float
        self.gatewayUplinkFrom = 0.0  # type: float
        self.gatewayUplinkTo = 0.0  # type: float
        self.gatewayDownlinkFrom = 0.0  # type: float
        self.gatewayDownlinkTo = 0.0  # type: float
        self.polarization = None  # type: str
        self.eirp = 0.0  # type: float
        self.bandwidth = 0.0  # type: float
        self.numOperationalTransponders = 0  # type: int
        self.numSpareTransponders = 0  # type: int
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.tradeLeaseOrgId = None  # type: str
        self.num36MhzEquivalentTransponders = 0  # type: int
        self.htsNumUserSpotBeams = 0  # type: int
        self.htsUserDownlinkBandwidthPerBeam = 0.0  # type: float
        self.htsUserUplinkBandwidthPerBeam = 0.0  # type: float
        self.estHtsTotalUserDownlinkBandwidthPerBeam = 0.0  # type: float
        self.estHtsTotalUserUplinkBandwidthPerBeam = 0.0  # type: float
        self.estHtsTotalCapacity = 0.0  # type: float
        self.userDownlinkFrom = 0.0  # type: float
        self.userDownlinkTo = 0.0  # type: float
        self.userUplinkFrom = 0.0  # type: float
        self.userUplinkTo = 0.0  # type: float
        self.payloadNotes = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seradataCommDetailsIngest = SeradataCommDetails_Ingest()
        seradataCommDetailsIngest.Init(buf, pos)
        return cls.InitFromObj(seradataCommDetailsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seradataCommDetailsIngest):
        x = SeradataCommDetails_IngestT()
        x._UnPack(seradataCommDetailsIngest)
        return x

    # SeradataCommDetails_IngestT
    def _UnPack(self, seradataCommDetailsIngest):
        if seradataCommDetailsIngest is None:
            return
        self.id = seradataCommDetailsIngest.Id()
        self.idComm = seradataCommDetailsIngest.IdComm()
        self.classificationMarking = seradataCommDetailsIngest.ClassificationMarking()
        self.spacecraftId = seradataCommDetailsIngest.SpacecraftId()
        self.band = seradataCommDetailsIngest.Band()
        self.solidStatePowerAmp = seradataCommDetailsIngest.SolidStatePowerAmp()
        self.travelingWaveTubeAmplifier = seradataCommDetailsIngest.TravelingWaveTubeAmplifier()
        self.gatewayUplinkFrom = seradataCommDetailsIngest.GatewayUplinkFrom()
        self.gatewayUplinkTo = seradataCommDetailsIngest.GatewayUplinkTo()
        self.gatewayDownlinkFrom = seradataCommDetailsIngest.GatewayDownlinkFrom()
        self.gatewayDownlinkTo = seradataCommDetailsIngest.GatewayDownlinkTo()
        self.polarization = seradataCommDetailsIngest.Polarization()
        self.eirp = seradataCommDetailsIngest.Eirp()
        self.bandwidth = seradataCommDetailsIngest.Bandwidth()
        self.numOperationalTransponders = seradataCommDetailsIngest.NumOperationalTransponders()
        self.numSpareTransponders = seradataCommDetailsIngest.NumSpareTransponders()
        self.hostedForCompanyOrgId = seradataCommDetailsIngest.HostedForCompanyOrgId()
        self.manufacturerOrgId = seradataCommDetailsIngest.ManufacturerOrgId()
        self.tradeLeaseOrgId = seradataCommDetailsIngest.TradeLeaseOrgId()
        self.num36MhzEquivalentTransponders = seradataCommDetailsIngest.Num36MhzEquivalentTransponders()
        self.htsNumUserSpotBeams = seradataCommDetailsIngest.HtsNumUserSpotBeams()
        self.htsUserDownlinkBandwidthPerBeam = seradataCommDetailsIngest.HtsUserDownlinkBandwidthPerBeam()
        self.htsUserUplinkBandwidthPerBeam = seradataCommDetailsIngest.HtsUserUplinkBandwidthPerBeam()
        self.estHtsTotalUserDownlinkBandwidthPerBeam = seradataCommDetailsIngest.EstHtsTotalUserDownlinkBandwidthPerBeam()
        self.estHtsTotalUserUplinkBandwidthPerBeam = seradataCommDetailsIngest.EstHtsTotalUserUplinkBandwidthPerBeam()
        self.estHtsTotalCapacity = seradataCommDetailsIngest.EstHtsTotalCapacity()
        self.userDownlinkFrom = seradataCommDetailsIngest.UserDownlinkFrom()
        self.userDownlinkTo = seradataCommDetailsIngest.UserDownlinkTo()
        self.userUplinkFrom = seradataCommDetailsIngest.UserUplinkFrom()
        self.userUplinkTo = seradataCommDetailsIngest.UserUplinkTo()
        self.payloadNotes = seradataCommDetailsIngest.PayloadNotes()
        self.source = seradataCommDetailsIngest.Source()
        self.origin = seradataCommDetailsIngest.Origin()
        self.origNetwork = seradataCommDetailsIngest.OrigNetwork()
        self.dataMode = seradataCommDetailsIngest.DataMode()
        self.createdAt = seradataCommDetailsIngest.CreatedAt()
        self.createdBy = seradataCommDetailsIngest.CreatedBy()

    # SeradataCommDetails_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idComm is not None:
            idComm = builder.CreateString(self.idComm)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.band is not None:
            band = builder.CreateString(self.band)
        if self.polarization is not None:
            polarization = builder.CreateString(self.polarization)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.tradeLeaseOrgId is not None:
            tradeLeaseOrgId = builder.CreateString(self.tradeLeaseOrgId)
        if self.payloadNotes is not None:
            payloadNotes = builder.CreateString(self.payloadNotes)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        SeradataCommDetails_IngestStart(builder)
        if self.id is not None:
            SeradataCommDetails_IngestAddId(builder, id)
        if self.idComm is not None:
            SeradataCommDetails_IngestAddIdComm(builder, idComm)
        if self.classificationMarking is not None:
            SeradataCommDetails_IngestAddClassificationMarking(builder, classificationMarking)
        if self.spacecraftId is not None:
            SeradataCommDetails_IngestAddSpacecraftId(builder, spacecraftId)
        if self.band is not None:
            SeradataCommDetails_IngestAddBand(builder, band)
        SeradataCommDetails_IngestAddSolidStatePowerAmp(builder, self.solidStatePowerAmp)
        SeradataCommDetails_IngestAddTravelingWaveTubeAmplifier(builder, self.travelingWaveTubeAmplifier)
        SeradataCommDetails_IngestAddGatewayUplinkFrom(builder, self.gatewayUplinkFrom)
        SeradataCommDetails_IngestAddGatewayUplinkTo(builder, self.gatewayUplinkTo)
        SeradataCommDetails_IngestAddGatewayDownlinkFrom(builder, self.gatewayDownlinkFrom)
        SeradataCommDetails_IngestAddGatewayDownlinkTo(builder, self.gatewayDownlinkTo)
        if self.polarization is not None:
            SeradataCommDetails_IngestAddPolarization(builder, polarization)
        SeradataCommDetails_IngestAddEirp(builder, self.eirp)
        SeradataCommDetails_IngestAddBandwidth(builder, self.bandwidth)
        SeradataCommDetails_IngestAddNumOperationalTransponders(builder, self.numOperationalTransponders)
        SeradataCommDetails_IngestAddNumSpareTransponders(builder, self.numSpareTransponders)
        if self.hostedForCompanyOrgId is not None:
            SeradataCommDetails_IngestAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            SeradataCommDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.tradeLeaseOrgId is not None:
            SeradataCommDetails_IngestAddTradeLeaseOrgId(builder, tradeLeaseOrgId)
        SeradataCommDetails_IngestAddNum36MhzEquivalentTransponders(builder, self.num36MhzEquivalentTransponders)
        SeradataCommDetails_IngestAddHtsNumUserSpotBeams(builder, self.htsNumUserSpotBeams)
        SeradataCommDetails_IngestAddHtsUserDownlinkBandwidthPerBeam(builder, self.htsUserDownlinkBandwidthPerBeam)
        SeradataCommDetails_IngestAddHtsUserUplinkBandwidthPerBeam(builder, self.htsUserUplinkBandwidthPerBeam)
        SeradataCommDetails_IngestAddEstHtsTotalUserDownlinkBandwidthPerBeam(builder, self.estHtsTotalUserDownlinkBandwidthPerBeam)
        SeradataCommDetails_IngestAddEstHtsTotalUserUplinkBandwidthPerBeam(builder, self.estHtsTotalUserUplinkBandwidthPerBeam)
        SeradataCommDetails_IngestAddEstHtsTotalCapacity(builder, self.estHtsTotalCapacity)
        SeradataCommDetails_IngestAddUserDownlinkFrom(builder, self.userDownlinkFrom)
        SeradataCommDetails_IngestAddUserDownlinkTo(builder, self.userDownlinkTo)
        SeradataCommDetails_IngestAddUserUplinkFrom(builder, self.userUplinkFrom)
        SeradataCommDetails_IngestAddUserUplinkTo(builder, self.userUplinkTo)
        if self.payloadNotes is not None:
            SeradataCommDetails_IngestAddPayloadNotes(builder, payloadNotes)
        if self.source is not None:
            SeradataCommDetails_IngestAddSource(builder, source)
        if self.origin is not None:
            SeradataCommDetails_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SeradataCommDetails_IngestAddOrigNetwork(builder, origNetwork)
        SeradataCommDetails_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            SeradataCommDetails_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SeradataCommDetails_IngestAddCreatedBy(builder, createdBy)
        seradataCommDetailsIngest = SeradataCommDetails_IngestEnd(builder)
        return seradataCommDetailsIngest
