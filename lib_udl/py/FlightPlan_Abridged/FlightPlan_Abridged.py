# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
class FlightPlan_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlan_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlan_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlan_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlan_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
    # Constraints: Minimum length = 1, Maximum length = 36
    # FlightPlan_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # FlightPlan_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
    # Example: /// Example: AJM7939B1123
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def AmcMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL unique identifier of the aircraft sortie associated with this flight plan.
    # Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def IdSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL unique identifier of the aircraft associated with this flight plan.
    # Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def IdAircraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The leg number of this flight plan.
    # Example: /// Example: 100
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def LegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The UDL unique identifier of the departure airfield associated with this flight plan.
    # Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def IdDepAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: KSLV
    # Constraints: Minimum length = 1, Maximum length = 36
    # FlightPlan_Abridged
    def DepAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL unique identifier of the arrival airfield associated with this flight plan.
    # Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def IdArrAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 1, Maximum length = 36
    # FlightPlan_Abridged
    def ArrAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source ID of the flight plan from the generating system.
    # Example: /// Example: AFMAPP20322347140001
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-05-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def GenTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    # Example: /// Example: KC-130 HERCULES
    # Constraints: Minimum length = 0, Maximum length = 128
    # FlightPlan_Abridged
    def AircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft associated with this flight plan.
    # Example: /// Example: 77187
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlan_Abridged
    def TailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign assigned to the aircraft for this flight plan.
    # Example: /// Example: HKY629
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-05-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def WxValidStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-05-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def WxValidEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-05-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def EstDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The percent degrade due to drag for this aircraft.
    # Example: /// Example: 16.9
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def DragIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The fuel degrade percentage used for this mission.
    # Example: /// Example: 10.3
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def FuelDegrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Operating weight of the aircraft in pounds.
    # Example: /// Example: 251830.5
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def OpWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    # Example: /// Example: 44.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def MsnIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
    # Example: /// Example: 180000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def RampFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to start engines and taxi to the end of the runway in pounds.
    # Example: /// Example: 1500.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def TaxiFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
    # Example: /// Example: 178500.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def TakeoffFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required from brake release to Top of Climb in pounds.
    # Example: /// Example: 7000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ClimbFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time required from brake release to Top of Climb expressed as HH:MM.
    # Example: /// Example: 00:13
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlan_Abridged
    def ClimbTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional fuel burned at Top of Climb in pounds.
    # Example: /// Example: 500.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def HoldDownFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional fuel burned at Top of Climb for icing in pounds.
    # Example: /// Example: 1000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def TocIceFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel remaining at Top of Climb in pounds.
    # Example: /// Example: 160000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def TocFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly from Top of Climb to Top of Descent in pounds.
    # Example: /// Example: 155000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def EnrouteFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
    # Example: /// Example: 06:30
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlan_Abridged
    def EnrouteTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
    # Example: /// Example: 1000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ThunderAvoidFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional fuel burned at Top of Descent for icing in pounds.
    # Example: /// Example: 2000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def TodIceFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional fuel burned at Top of Descent for the operational condition in pounds.
    # Example: /// Example: 5000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def OpConditionFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel remaining at Top of Descent in pounds.
    # Example: /// Example: 32000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def TodFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional fuel burned at landing/missed approach for an early descent in pounds.
    # Example: /// Example: 500.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def EarlyDescentFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional fuel burned at landing/missed approach for icing during arrival in pounds.
    # Example: /// Example: 1000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ArrIceFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional fuel burned at the destination for holding in pounds.
    # Example: /// Example: 6000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def HoldFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional time for holding at the destination expressed as HH:MM.
    # Example: /// Example: 01:00
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlan_Abridged
    def HoldTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Fuel burned from the initial approach point to landing in pounds.
    # Example: /// Example: 3000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def AppLandingFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel planned to be burned during the flight in pounds.
    # Example: /// Example: 145000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def BurnedFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel planned to be remaining on the airplane at landing in pounds.
    # Example: /// Example: 19000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def LandingFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum fuel on board required to divert in pounds.
    # Example: /// Example: 25000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def MinDivertFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly to alternate landing site 1 and land in pounds.
    # Example: /// Example: 6000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ArrAlternate1Fuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly to alternate landing site 2 and land in pounds.
    # Example: /// Example: 6000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ArrAlternate2Fuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of contingency fuel in pounds.
    # Example: /// Example: 3000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ContingencyFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of reserve fuel in pounds.
    # Example: /// Example: 10000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def ReserveFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
    # Example: /// Example: 20000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def DepressFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of unusable fuel in pounds.
    # Example: /// Example: 2300.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def UnusableFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of unidentified extra fuel required to get to min landing in pounds.
    # Example: /// Example: 5000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def UnidentExtraFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of identified extra fuel carried and not available in the burn plan in pounds.
    # Example: /// Example: 5000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def IdentExtraFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total fuel remaining at alternate landing site 1 in pounds.
    # Example: /// Example: 18000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def RemAlternate1Fuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total fuel remaining at alternate landing site 2 in pounds.
    # Example: /// Example: 18000.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def RemAlternate2Fuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total endurance time based on the fuel on board expressed as HH:MM.
    # Example: /// Example: 08:45
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlan_Abridged
    def EnduranceTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the planned Standard Instrument Departure (SID) procedure.
    # Example: /// Example: RENV3B
    # Constraints: Minimum length = 0, Maximum length = 32
    # FlightPlan_Abridged
    def Sid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the planned Standard Terminal Arrival (STAR) procedure.
    # Example: /// Example: ADANA
    # Constraints: Minimum length = 0, Maximum length = 32
    # FlightPlan_Abridged
    def Star(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
    # Example: /// Example: Failed by FAA SAPT 184022AUG2022
    # Constraints: Minimum length = 0, Maximum length = 128
    # FlightPlan_Abridged
    def GpsRaim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The departure runway for this flight.
    # Example: /// Example: 05L
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def DepRunway(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The arrival runway for this flight.
    # Example: /// Example: 05L
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def ArrRunway(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
    # Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
    # GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
    # ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
    # Constraints: Minimum length = 0, Maximum length = 1024
    # FlightPlan_Abridged
    def RouteString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
    # Example: /// Example: ['US', 'CA', 'UK']
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def CountryCodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def CountryCodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def CountryCodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # The Extended Operations (ETOPS) rating used to calculate this flight plan.
    # Example: /// Example: 85 MINUTES
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlan_Abridged
    def EtopsRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
    # Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def EtopsAirfields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def EtopsAirfieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def EtopsAirfieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        return o == 0

    # Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
    # Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def EtopsAltAirfields(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def EtopsAltAirfieldsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def EtopsAltAirfieldsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        return o == 0

    # The Extended Operations (ETOPS) validity window for the alternate airfield.
    # Example: /// Example: LPLA: 0317Z-0722Z
    # Constraints: Minimum length = 0, Maximum length = 64
    # FlightPlan_Abridged
    def EtopsValWindow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks from the planners concerning this flight plan.
    # Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
    # Constraints: Minimum length = 0, Maximum length = 512
    # FlightPlan_Abridged
    def PlannerRemark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks about the planned cargo associated with this flight plan.
    # Example: /// Example: Expecting 55,000 lbs. If different, call us.
    # Constraints: Minimum length = 0, Maximum length = 512
    # FlightPlan_Abridged
    def CargoRemark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    # Example: /// Example: -1.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def WindFac1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def WindFac2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    # Example: /// Example: 5.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def WindFacAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
    # Example: /// Example: 16.1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def AvgTempDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of Air Traffic Control (ATC) addresses.
    # Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def AtcAddresses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def AtcAddressesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def AtcAddressesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        return o == 0

    # Air Traffic Control address filing the flight plan.
    # Example: /// Example: ETARYXYX
    # Constraints: Minimum length = 0, Maximum length = 24
    # FlightPlan_Abridged
    def Originator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of aircraft flying this flight plan.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def NumAircraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The flight rules this flight plan is being filed under.
    # Example: /// Example: l
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def FlightRules(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of flight (MILITARY, CIVILIAN, etc).
    # Example: /// Example: MILITARY
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlan_Abridged
    def FlightType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
    # Example: /// Example: N0305
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def InitialCruiseSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
    # Example: /// Example: F270
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def InitialFlightLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: EDDS
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def ArrAlternate1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: EDDM
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def ArrAlternate2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: LFPO
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def DepAlternate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
    # Example: /// Example: MEDIUM
    # Constraints: Minimum length = 0, Maximum length = 8
    # FlightPlan_Abridged
    def WakeTurbCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
    # Example: /// Example: SDFGHIRTUWXYZ/H
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlan_Abridged
    def Equipment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional remarks for air traffic control for this flight.
    # Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
    # Constraints: Minimum length = 0, Maximum length = 64
    # FlightPlan_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # FlightPlan_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # FlightPlan_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # FlightPlan_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # FlightPlan_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # FlightPlan_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # FlightPlan_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Collection of air refueling events occurring on this flight.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def AirRefuelEvents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def AirRefuelEventsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def AirRefuelEventsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        return o == 0

    # Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def FlightPlanMessages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def FlightPlanMessagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def FlightPlanMessagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        return o == 0

    # Collection of waypoints associated with this flight plan.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def FlightPlanWaypoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def FlightPlanWaypointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def FlightPlanWaypointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        return o == 0

    # Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # FlightPlan_Abridged
    def FlightPlanPointGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlan_Abridged
    def FlightPlanPointGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlan_Abridged
    def FlightPlanPointGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        return o == 0

def FlightPlan_AbridgedStart(builder):
    builder.StartObject(96)

def Start(builder):
    FlightPlan_AbridgedStart(builder)

def FlightPlan_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    FlightPlan_AbridgedAddId(builder, id)

def FlightPlan_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    FlightPlan_AbridgedAddClassificationMarking(builder, classificationMarking)

def FlightPlan_AbridgedAddAmcMissionId(builder, amcMissionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(amcMissionId), 0)

def AddAmcMissionId(builder, amcMissionId):
    FlightPlan_AbridgedAddAmcMissionId(builder, amcMissionId)

def FlightPlan_AbridgedAddIdSortie(builder, idSortie):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSortie), 0)

def AddIdSortie(builder, idSortie):
    FlightPlan_AbridgedAddIdSortie(builder, idSortie)

def FlightPlan_AbridgedAddIdAircraft(builder, idAircraft):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idAircraft), 0)

def AddIdAircraft(builder, idAircraft):
    FlightPlan_AbridgedAddIdAircraft(builder, idAircraft)

def FlightPlan_AbridgedAddLegNum(builder, legNum):
    builder.PrependInt32Slot(5, legNum, 0)

def AddLegNum(builder, legNum):
    FlightPlan_AbridgedAddLegNum(builder, legNum)

def FlightPlan_AbridgedAddIdDepAirfield(builder, idDepAirfield):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idDepAirfield), 0)

def AddIdDepAirfield(builder, idDepAirfield):
    FlightPlan_AbridgedAddIdDepAirfield(builder, idDepAirfield)

def FlightPlan_AbridgedAddDepAirfield(builder, depAirfield):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(depAirfield), 0)

def AddDepAirfield(builder, depAirfield):
    FlightPlan_AbridgedAddDepAirfield(builder, depAirfield)

def FlightPlan_AbridgedAddIdArrAirfield(builder, idArrAirfield):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(idArrAirfield), 0)

def AddIdArrAirfield(builder, idArrAirfield):
    FlightPlan_AbridgedAddIdArrAirfield(builder, idArrAirfield)

def FlightPlan_AbridgedAddArrAirfield(builder, arrAirfield):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(arrAirfield), 0)

def AddArrAirfield(builder, arrAirfield):
    FlightPlan_AbridgedAddArrAirfield(builder, arrAirfield)

def FlightPlan_AbridgedAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    FlightPlan_AbridgedAddExternalId(builder, externalId)

def FlightPlan_AbridgedAddGenTs(builder, genTs):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(genTs), 0)

def AddGenTs(builder, genTs):
    FlightPlan_AbridgedAddGenTs(builder, genTs)

def FlightPlan_AbridgedAddAircraftMds(builder, aircraftMds):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftMds), 0)

def AddAircraftMds(builder, aircraftMds):
    FlightPlan_AbridgedAddAircraftMds(builder, aircraftMds)

def FlightPlan_AbridgedAddTailNumber(builder, tailNumber):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(tailNumber), 0)

def AddTailNumber(builder, tailNumber):
    FlightPlan_AbridgedAddTailNumber(builder, tailNumber)

def FlightPlan_AbridgedAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    FlightPlan_AbridgedAddCallSign(builder, callSign)

def FlightPlan_AbridgedAddWxValidStart(builder, wxValidStart):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(wxValidStart), 0)

def AddWxValidStart(builder, wxValidStart):
    FlightPlan_AbridgedAddWxValidStart(builder, wxValidStart)

def FlightPlan_AbridgedAddWxValidEnd(builder, wxValidEnd):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(wxValidEnd), 0)

def AddWxValidEnd(builder, wxValidEnd):
    FlightPlan_AbridgedAddWxValidEnd(builder, wxValidEnd)

def FlightPlan_AbridgedAddEstDepTime(builder, estDepTime):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(estDepTime), 0)

def AddEstDepTime(builder, estDepTime):
    FlightPlan_AbridgedAddEstDepTime(builder, estDepTime)

def FlightPlan_AbridgedAddDragIndex(builder, dragIndex):
    builder.PrependFloat64Slot(18, dragIndex, 0.0)

def AddDragIndex(builder, dragIndex):
    FlightPlan_AbridgedAddDragIndex(builder, dragIndex)

def FlightPlan_AbridgedAddFuelDegrade(builder, fuelDegrade):
    builder.PrependFloat64Slot(19, fuelDegrade, 0.0)

def AddFuelDegrade(builder, fuelDegrade):
    FlightPlan_AbridgedAddFuelDegrade(builder, fuelDegrade)

def FlightPlan_AbridgedAddOpWeight(builder, opWeight):
    builder.PrependFloat64Slot(20, opWeight, 0.0)

def AddOpWeight(builder, opWeight):
    FlightPlan_AbridgedAddOpWeight(builder, opWeight)

def FlightPlan_AbridgedAddMsnIndex(builder, msnIndex):
    builder.PrependFloat64Slot(21, msnIndex, 0.0)

def AddMsnIndex(builder, msnIndex):
    FlightPlan_AbridgedAddMsnIndex(builder, msnIndex)

def FlightPlan_AbridgedAddRampFuel(builder, rampFuel):
    builder.PrependFloat64Slot(22, rampFuel, 0.0)

def AddRampFuel(builder, rampFuel):
    FlightPlan_AbridgedAddRampFuel(builder, rampFuel)

def FlightPlan_AbridgedAddTaxiFuel(builder, taxiFuel):
    builder.PrependFloat64Slot(23, taxiFuel, 0.0)

def AddTaxiFuel(builder, taxiFuel):
    FlightPlan_AbridgedAddTaxiFuel(builder, taxiFuel)

def FlightPlan_AbridgedAddTakeoffFuel(builder, takeoffFuel):
    builder.PrependFloat64Slot(24, takeoffFuel, 0.0)

def AddTakeoffFuel(builder, takeoffFuel):
    FlightPlan_AbridgedAddTakeoffFuel(builder, takeoffFuel)

def FlightPlan_AbridgedAddClimbFuel(builder, climbFuel):
    builder.PrependFloat64Slot(25, climbFuel, 0.0)

def AddClimbFuel(builder, climbFuel):
    FlightPlan_AbridgedAddClimbFuel(builder, climbFuel)

def FlightPlan_AbridgedAddClimbTime(builder, climbTime):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(climbTime), 0)

def AddClimbTime(builder, climbTime):
    FlightPlan_AbridgedAddClimbTime(builder, climbTime)

def FlightPlan_AbridgedAddHoldDownFuel(builder, holdDownFuel):
    builder.PrependFloat64Slot(27, holdDownFuel, 0.0)

def AddHoldDownFuel(builder, holdDownFuel):
    FlightPlan_AbridgedAddHoldDownFuel(builder, holdDownFuel)

def FlightPlan_AbridgedAddTocIceFuel(builder, tocIceFuel):
    builder.PrependFloat64Slot(28, tocIceFuel, 0.0)

def AddTocIceFuel(builder, tocIceFuel):
    FlightPlan_AbridgedAddTocIceFuel(builder, tocIceFuel)

def FlightPlan_AbridgedAddTocFuel(builder, tocFuel):
    builder.PrependFloat64Slot(29, tocFuel, 0.0)

def AddTocFuel(builder, tocFuel):
    FlightPlan_AbridgedAddTocFuel(builder, tocFuel)

def FlightPlan_AbridgedAddEnrouteFuel(builder, enrouteFuel):
    builder.PrependFloat64Slot(30, enrouteFuel, 0.0)

def AddEnrouteFuel(builder, enrouteFuel):
    FlightPlan_AbridgedAddEnrouteFuel(builder, enrouteFuel)

def FlightPlan_AbridgedAddEnrouteTime(builder, enrouteTime):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(enrouteTime), 0)

def AddEnrouteTime(builder, enrouteTime):
    FlightPlan_AbridgedAddEnrouteTime(builder, enrouteTime)

def FlightPlan_AbridgedAddThunderAvoidFuel(builder, thunderAvoidFuel):
    builder.PrependFloat64Slot(32, thunderAvoidFuel, 0.0)

def AddThunderAvoidFuel(builder, thunderAvoidFuel):
    FlightPlan_AbridgedAddThunderAvoidFuel(builder, thunderAvoidFuel)

def FlightPlan_AbridgedAddTodIceFuel(builder, todIceFuel):
    builder.PrependFloat64Slot(33, todIceFuel, 0.0)

def AddTodIceFuel(builder, todIceFuel):
    FlightPlan_AbridgedAddTodIceFuel(builder, todIceFuel)

def FlightPlan_AbridgedAddOpConditionFuel(builder, opConditionFuel):
    builder.PrependFloat64Slot(34, opConditionFuel, 0.0)

def AddOpConditionFuel(builder, opConditionFuel):
    FlightPlan_AbridgedAddOpConditionFuel(builder, opConditionFuel)

def FlightPlan_AbridgedAddTodFuel(builder, todFuel):
    builder.PrependFloat64Slot(35, todFuel, 0.0)

def AddTodFuel(builder, todFuel):
    FlightPlan_AbridgedAddTodFuel(builder, todFuel)

def FlightPlan_AbridgedAddEarlyDescentFuel(builder, earlyDescentFuel):
    builder.PrependFloat64Slot(36, earlyDescentFuel, 0.0)

def AddEarlyDescentFuel(builder, earlyDescentFuel):
    FlightPlan_AbridgedAddEarlyDescentFuel(builder, earlyDescentFuel)

def FlightPlan_AbridgedAddArrIceFuel(builder, arrIceFuel):
    builder.PrependFloat64Slot(37, arrIceFuel, 0.0)

def AddArrIceFuel(builder, arrIceFuel):
    FlightPlan_AbridgedAddArrIceFuel(builder, arrIceFuel)

def FlightPlan_AbridgedAddHoldFuel(builder, holdFuel):
    builder.PrependFloat64Slot(38, holdFuel, 0.0)

def AddHoldFuel(builder, holdFuel):
    FlightPlan_AbridgedAddHoldFuel(builder, holdFuel)

def FlightPlan_AbridgedAddHoldTime(builder, holdTime):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(holdTime), 0)

def AddHoldTime(builder, holdTime):
    FlightPlan_AbridgedAddHoldTime(builder, holdTime)

def FlightPlan_AbridgedAddAppLandingFuel(builder, appLandingFuel):
    builder.PrependFloat64Slot(40, appLandingFuel, 0.0)

def AddAppLandingFuel(builder, appLandingFuel):
    FlightPlan_AbridgedAddAppLandingFuel(builder, appLandingFuel)

def FlightPlan_AbridgedAddBurnedFuel(builder, burnedFuel):
    builder.PrependFloat64Slot(41, burnedFuel, 0.0)

def AddBurnedFuel(builder, burnedFuel):
    FlightPlan_AbridgedAddBurnedFuel(builder, burnedFuel)

def FlightPlan_AbridgedAddLandingFuel(builder, landingFuel):
    builder.PrependFloat64Slot(42, landingFuel, 0.0)

def AddLandingFuel(builder, landingFuel):
    FlightPlan_AbridgedAddLandingFuel(builder, landingFuel)

def FlightPlan_AbridgedAddMinDivertFuel(builder, minDivertFuel):
    builder.PrependFloat64Slot(43, minDivertFuel, 0.0)

def AddMinDivertFuel(builder, minDivertFuel):
    FlightPlan_AbridgedAddMinDivertFuel(builder, minDivertFuel)

def FlightPlan_AbridgedAddArrAlternate1Fuel(builder, arrAlternate1Fuel):
    builder.PrependFloat64Slot(44, arrAlternate1Fuel, 0.0)

def AddArrAlternate1Fuel(builder, arrAlternate1Fuel):
    FlightPlan_AbridgedAddArrAlternate1Fuel(builder, arrAlternate1Fuel)

def FlightPlan_AbridgedAddArrAlternate2Fuel(builder, arrAlternate2Fuel):
    builder.PrependFloat64Slot(45, arrAlternate2Fuel, 0.0)

def AddArrAlternate2Fuel(builder, arrAlternate2Fuel):
    FlightPlan_AbridgedAddArrAlternate2Fuel(builder, arrAlternate2Fuel)

def FlightPlan_AbridgedAddContingencyFuel(builder, contingencyFuel):
    builder.PrependFloat64Slot(46, contingencyFuel, 0.0)

def AddContingencyFuel(builder, contingencyFuel):
    FlightPlan_AbridgedAddContingencyFuel(builder, contingencyFuel)

def FlightPlan_AbridgedAddReserveFuel(builder, reserveFuel):
    builder.PrependFloat64Slot(47, reserveFuel, 0.0)

def AddReserveFuel(builder, reserveFuel):
    FlightPlan_AbridgedAddReserveFuel(builder, reserveFuel)

def FlightPlan_AbridgedAddDepressFuel(builder, depressFuel):
    builder.PrependFloat64Slot(48, depressFuel, 0.0)

def AddDepressFuel(builder, depressFuel):
    FlightPlan_AbridgedAddDepressFuel(builder, depressFuel)

def FlightPlan_AbridgedAddUnusableFuel(builder, unusableFuel):
    builder.PrependFloat64Slot(49, unusableFuel, 0.0)

def AddUnusableFuel(builder, unusableFuel):
    FlightPlan_AbridgedAddUnusableFuel(builder, unusableFuel)

def FlightPlan_AbridgedAddUnidentExtraFuel(builder, unidentExtraFuel):
    builder.PrependFloat64Slot(50, unidentExtraFuel, 0.0)

def AddUnidentExtraFuel(builder, unidentExtraFuel):
    FlightPlan_AbridgedAddUnidentExtraFuel(builder, unidentExtraFuel)

def FlightPlan_AbridgedAddIdentExtraFuel(builder, identExtraFuel):
    builder.PrependFloat64Slot(51, identExtraFuel, 0.0)

def AddIdentExtraFuel(builder, identExtraFuel):
    FlightPlan_AbridgedAddIdentExtraFuel(builder, identExtraFuel)

def FlightPlan_AbridgedAddRemAlternate1Fuel(builder, remAlternate1Fuel):
    builder.PrependFloat64Slot(52, remAlternate1Fuel, 0.0)

def AddRemAlternate1Fuel(builder, remAlternate1Fuel):
    FlightPlan_AbridgedAddRemAlternate1Fuel(builder, remAlternate1Fuel)

def FlightPlan_AbridgedAddRemAlternate2Fuel(builder, remAlternate2Fuel):
    builder.PrependFloat64Slot(53, remAlternate2Fuel, 0.0)

def AddRemAlternate2Fuel(builder, remAlternate2Fuel):
    FlightPlan_AbridgedAddRemAlternate2Fuel(builder, remAlternate2Fuel)

def FlightPlan_AbridgedAddEnduranceTime(builder, enduranceTime):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(enduranceTime), 0)

def AddEnduranceTime(builder, enduranceTime):
    FlightPlan_AbridgedAddEnduranceTime(builder, enduranceTime)

def FlightPlan_AbridgedAddSid(builder, sid):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(sid), 0)

def AddSid(builder, sid):
    FlightPlan_AbridgedAddSid(builder, sid)

def FlightPlan_AbridgedAddStar(builder, star):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(star), 0)

def AddStar(builder, star):
    FlightPlan_AbridgedAddStar(builder, star)

def FlightPlan_AbridgedAddGpsRaim(builder, gpsRaim):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(gpsRaim), 0)

def AddGpsRaim(builder, gpsRaim):
    FlightPlan_AbridgedAddGpsRaim(builder, gpsRaim)

def FlightPlan_AbridgedAddDepRunway(builder, depRunway):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(depRunway), 0)

def AddDepRunway(builder, depRunway):
    FlightPlan_AbridgedAddDepRunway(builder, depRunway)

def FlightPlan_AbridgedAddArrRunway(builder, arrRunway):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(arrRunway), 0)

def AddArrRunway(builder, arrRunway):
    FlightPlan_AbridgedAddArrRunway(builder, arrRunway)

def FlightPlan_AbridgedAddRouteString(builder, routeString):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(routeString), 0)

def AddRouteString(builder, routeString):
    FlightPlan_AbridgedAddRouteString(builder, routeString)

def FlightPlan_AbridgedAddCountryCodes(builder, countryCodes):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(countryCodes), 0)

def AddCountryCodes(builder, countryCodes):
    FlightPlan_AbridgedAddCountryCodes(builder, countryCodes)

def FlightPlan_AbridgedStartCountryCodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCountryCodesVector(builder, numElems):
    return FlightPlan_AbridgedStartCountryCodesVector(builder, numElems)

def FlightPlan_AbridgedAddEtopsRating(builder, etopsRating):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(etopsRating), 0)

def AddEtopsRating(builder, etopsRating):
    FlightPlan_AbridgedAddEtopsRating(builder, etopsRating)

def FlightPlan_AbridgedAddEtopsAirfields(builder, etopsAirfields):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(etopsAirfields), 0)

def AddEtopsAirfields(builder, etopsAirfields):
    FlightPlan_AbridgedAddEtopsAirfields(builder, etopsAirfields)

def FlightPlan_AbridgedStartEtopsAirfieldsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEtopsAirfieldsVector(builder, numElems):
    return FlightPlan_AbridgedStartEtopsAirfieldsVector(builder, numElems)

def FlightPlan_AbridgedAddEtopsAltAirfields(builder, etopsAltAirfields):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(etopsAltAirfields), 0)

def AddEtopsAltAirfields(builder, etopsAltAirfields):
    FlightPlan_AbridgedAddEtopsAltAirfields(builder, etopsAltAirfields)

def FlightPlan_AbridgedStartEtopsAltAirfieldsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEtopsAltAirfieldsVector(builder, numElems):
    return FlightPlan_AbridgedStartEtopsAltAirfieldsVector(builder, numElems)

def FlightPlan_AbridgedAddEtopsValWindow(builder, etopsValWindow):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(etopsValWindow), 0)

def AddEtopsValWindow(builder, etopsValWindow):
    FlightPlan_AbridgedAddEtopsValWindow(builder, etopsValWindow)

def FlightPlan_AbridgedAddPlannerRemark(builder, plannerRemark):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(plannerRemark), 0)

def AddPlannerRemark(builder, plannerRemark):
    FlightPlan_AbridgedAddPlannerRemark(builder, plannerRemark)

def FlightPlan_AbridgedAddCargoRemark(builder, cargoRemark):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(cargoRemark), 0)

def AddCargoRemark(builder, cargoRemark):
    FlightPlan_AbridgedAddCargoRemark(builder, cargoRemark)

def FlightPlan_AbridgedAddWindFac1(builder, windFac1):
    builder.PrependFloat64Slot(68, windFac1, 0.0)

def AddWindFac1(builder, windFac1):
    FlightPlan_AbridgedAddWindFac1(builder, windFac1)

def FlightPlan_AbridgedAddWindFac2(builder, windFac2):
    builder.PrependFloat64Slot(69, windFac2, 0.0)

def AddWindFac2(builder, windFac2):
    FlightPlan_AbridgedAddWindFac2(builder, windFac2)

def FlightPlan_AbridgedAddWindFacAvg(builder, windFacAvg):
    builder.PrependFloat64Slot(70, windFacAvg, 0.0)

def AddWindFacAvg(builder, windFacAvg):
    FlightPlan_AbridgedAddWindFacAvg(builder, windFacAvg)

def FlightPlan_AbridgedAddAvgTempDev(builder, avgTempDev):
    builder.PrependFloat64Slot(71, avgTempDev, 0.0)

def AddAvgTempDev(builder, avgTempDev):
    FlightPlan_AbridgedAddAvgTempDev(builder, avgTempDev)

def FlightPlan_AbridgedAddAtcAddresses(builder, atcAddresses):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(atcAddresses), 0)

def AddAtcAddresses(builder, atcAddresses):
    FlightPlan_AbridgedAddAtcAddresses(builder, atcAddresses)

def FlightPlan_AbridgedStartAtcAddressesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAtcAddressesVector(builder, numElems):
    return FlightPlan_AbridgedStartAtcAddressesVector(builder, numElems)

def FlightPlan_AbridgedAddOriginator(builder, originator):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(originator), 0)

def AddOriginator(builder, originator):
    FlightPlan_AbridgedAddOriginator(builder, originator)

def FlightPlan_AbridgedAddNumAircraft(builder, numAircraft):
    builder.PrependInt32Slot(74, numAircraft, 0)

def AddNumAircraft(builder, numAircraft):
    FlightPlan_AbridgedAddNumAircraft(builder, numAircraft)

def FlightPlan_AbridgedAddFlightRules(builder, flightRules):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(flightRules), 0)

def AddFlightRules(builder, flightRules):
    FlightPlan_AbridgedAddFlightRules(builder, flightRules)

def FlightPlan_AbridgedAddFlightType(builder, flightType):
    builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(flightType), 0)

def AddFlightType(builder, flightType):
    FlightPlan_AbridgedAddFlightType(builder, flightType)

def FlightPlan_AbridgedAddInitialCruiseSpeed(builder, initialCruiseSpeed):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(initialCruiseSpeed), 0)

def AddInitialCruiseSpeed(builder, initialCruiseSpeed):
    FlightPlan_AbridgedAddInitialCruiseSpeed(builder, initialCruiseSpeed)

def FlightPlan_AbridgedAddInitialFlightLevel(builder, initialFlightLevel):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(initialFlightLevel), 0)

def AddInitialFlightLevel(builder, initialFlightLevel):
    FlightPlan_AbridgedAddInitialFlightLevel(builder, initialFlightLevel)

def FlightPlan_AbridgedAddArrAlternate1(builder, arrAlternate1):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(arrAlternate1), 0)

def AddArrAlternate1(builder, arrAlternate1):
    FlightPlan_AbridgedAddArrAlternate1(builder, arrAlternate1)

def FlightPlan_AbridgedAddArrAlternate2(builder, arrAlternate2):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(arrAlternate2), 0)

def AddArrAlternate2(builder, arrAlternate2):
    FlightPlan_AbridgedAddArrAlternate2(builder, arrAlternate2)

def FlightPlan_AbridgedAddDepAlternate(builder, depAlternate):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(depAlternate), 0)

def AddDepAlternate(builder, depAlternate):
    FlightPlan_AbridgedAddDepAlternate(builder, depAlternate)

def FlightPlan_AbridgedAddWakeTurbCat(builder, wakeTurbCat):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(wakeTurbCat), 0)

def AddWakeTurbCat(builder, wakeTurbCat):
    FlightPlan_AbridgedAddWakeTurbCat(builder, wakeTurbCat)

def FlightPlan_AbridgedAddEquipment(builder, equipment):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(equipment), 0)

def AddEquipment(builder, equipment):
    FlightPlan_AbridgedAddEquipment(builder, equipment)

def FlightPlan_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    FlightPlan_AbridgedAddNotes(builder, notes)

def FlightPlan_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    FlightPlan_AbridgedAddCreatedAt(builder, createdAt)

def FlightPlan_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    FlightPlan_AbridgedAddCreatedBy(builder, createdBy)

def FlightPlan_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    FlightPlan_AbridgedAddSourceDl(builder, sourceDl)

def FlightPlan_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    FlightPlan_AbridgedAddSource(builder, source)

def FlightPlan_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(89, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    FlightPlan_AbridgedAddOrigin(builder, origin)

def FlightPlan_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    FlightPlan_AbridgedAddOrigNetwork(builder, origNetwork)

def FlightPlan_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(91, dataMode, 0)

def AddDataMode(builder, dataMode):
    FlightPlan_AbridgedAddDataMode(builder, dataMode)

def FlightPlan_AbridgedAddAirRefuelEvents(builder, airRefuelEvents):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(airRefuelEvents), 0)

def AddAirRefuelEvents(builder, airRefuelEvents):
    FlightPlan_AbridgedAddAirRefuelEvents(builder, airRefuelEvents)

def FlightPlan_AbridgedStartAirRefuelEventsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAirRefuelEventsVector(builder, numElems):
    return FlightPlan_AbridgedStartAirRefuelEventsVector(builder, numElems)

def FlightPlan_AbridgedAddFlightPlanMessages(builder, flightPlanMessages):
    builder.PrependUOffsetTRelativeSlot(93, flatbuffers.number_types.UOffsetTFlags.py_type(flightPlanMessages), 0)

def AddFlightPlanMessages(builder, flightPlanMessages):
    FlightPlan_AbridgedAddFlightPlanMessages(builder, flightPlanMessages)

def FlightPlan_AbridgedStartFlightPlanMessagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlightPlanMessagesVector(builder, numElems):
    return FlightPlan_AbridgedStartFlightPlanMessagesVector(builder, numElems)

def FlightPlan_AbridgedAddFlightPlanWaypoints(builder, flightPlanWaypoints):
    builder.PrependUOffsetTRelativeSlot(94, flatbuffers.number_types.UOffsetTFlags.py_type(flightPlanWaypoints), 0)

def AddFlightPlanWaypoints(builder, flightPlanWaypoints):
    FlightPlan_AbridgedAddFlightPlanWaypoints(builder, flightPlanWaypoints)

def FlightPlan_AbridgedStartFlightPlanWaypointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlightPlanWaypointsVector(builder, numElems):
    return FlightPlan_AbridgedStartFlightPlanWaypointsVector(builder, numElems)

def FlightPlan_AbridgedAddFlightPlanPointGroups(builder, flightPlanPointGroups):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(flightPlanPointGroups), 0)

def AddFlightPlanPointGroups(builder, flightPlanPointGroups):
    FlightPlan_AbridgedAddFlightPlanPointGroups(builder, flightPlanPointGroups)

def FlightPlan_AbridgedStartFlightPlanPointGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlightPlanPointGroupsVector(builder, numElems):
    return FlightPlan_AbridgedStartFlightPlanPointGroupsVector(builder, numElems)

def FlightPlan_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlan_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class FlightPlan_AbridgedT(object):

    # FlightPlan_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.amcMissionId = None  # type: str
        self.idSortie = None  # type: str
        self.idAircraft = None  # type: str
        self.legNum = 0  # type: int
        self.idDepAirfield = None  # type: str
        self.depAirfield = None  # type: str
        self.idArrAirfield = None  # type: str
        self.arrAirfield = None  # type: str
        self.externalId = None  # type: str
        self.genTs = None  # type: str
        self.aircraftMds = None  # type: str
        self.tailNumber = None  # type: str
        self.callSign = None  # type: str
        self.wxValidStart = None  # type: str
        self.wxValidEnd = None  # type: str
        self.estDepTime = None  # type: str
        self.dragIndex = 0.0  # type: float
        self.fuelDegrade = 0.0  # type: float
        self.opWeight = 0.0  # type: float
        self.msnIndex = 0.0  # type: float
        self.rampFuel = 0.0  # type: float
        self.taxiFuel = 0.0  # type: float
        self.takeoffFuel = 0.0  # type: float
        self.climbFuel = 0.0  # type: float
        self.climbTime = None  # type: str
        self.holdDownFuel = 0.0  # type: float
        self.tocIceFuel = 0.0  # type: float
        self.tocFuel = 0.0  # type: float
        self.enrouteFuel = 0.0  # type: float
        self.enrouteTime = None  # type: str
        self.thunderAvoidFuel = 0.0  # type: float
        self.todIceFuel = 0.0  # type: float
        self.opConditionFuel = 0.0  # type: float
        self.todFuel = 0.0  # type: float
        self.earlyDescentFuel = 0.0  # type: float
        self.arrIceFuel = 0.0  # type: float
        self.holdFuel = 0.0  # type: float
        self.holdTime = None  # type: str
        self.appLandingFuel = 0.0  # type: float
        self.burnedFuel = 0.0  # type: float
        self.landingFuel = 0.0  # type: float
        self.minDivertFuel = 0.0  # type: float
        self.arrAlternate1Fuel = 0.0  # type: float
        self.arrAlternate2Fuel = 0.0  # type: float
        self.contingencyFuel = 0.0  # type: float
        self.reserveFuel = 0.0  # type: float
        self.depressFuel = 0.0  # type: float
        self.unusableFuel = 0.0  # type: float
        self.unidentExtraFuel = 0.0  # type: float
        self.identExtraFuel = 0.0  # type: float
        self.remAlternate1Fuel = 0.0  # type: float
        self.remAlternate2Fuel = 0.0  # type: float
        self.enduranceTime = None  # type: str
        self.sid = None  # type: str
        self.star = None  # type: str
        self.gpsRaim = None  # type: str
        self.depRunway = None  # type: str
        self.arrRunway = None  # type: str
        self.routeString = None  # type: str
        self.countryCodes = None  # type: List[str]
        self.etopsRating = None  # type: str
        self.etopsAirfields = None  # type: List[str]
        self.etopsAltAirfields = None  # type: List[str]
        self.etopsValWindow = None  # type: str
        self.plannerRemark = None  # type: str
        self.cargoRemark = None  # type: str
        self.windFac1 = 0.0  # type: float
        self.windFac2 = 0.0  # type: float
        self.windFacAvg = 0.0  # type: float
        self.avgTempDev = 0.0  # type: float
        self.atcAddresses = None  # type: List[str]
        self.originator = None  # type: str
        self.numAircraft = 0  # type: int
        self.flightRules = None  # type: str
        self.flightType = None  # type: str
        self.initialCruiseSpeed = None  # type: str
        self.initialFlightLevel = None  # type: str
        self.arrAlternate1 = None  # type: str
        self.arrAlternate2 = None  # type: str
        self.depAlternate = None  # type: str
        self.wakeTurbCat = None  # type: str
        self.equipment = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.airRefuelEvents = None  # type: List[str]
        self.flightPlanMessages = None  # type: List[str]
        self.flightPlanWaypoints = None  # type: List[str]
        self.flightPlanPointGroups = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanAbridged = FlightPlan_Abridged()
        flightPlanAbridged.Init(buf, pos)
        return cls.InitFromObj(flightPlanAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanAbridged):
        x = FlightPlan_AbridgedT()
        x._UnPack(flightPlanAbridged)
        return x

    # FlightPlan_AbridgedT
    def _UnPack(self, flightPlanAbridged):
        if flightPlanAbridged is None:
            return
        self.id = flightPlanAbridged.Id()
        self.classificationMarking = flightPlanAbridged.ClassificationMarking()
        self.amcMissionId = flightPlanAbridged.AmcMissionId()
        self.idSortie = flightPlanAbridged.IdSortie()
        self.idAircraft = flightPlanAbridged.IdAircraft()
        self.legNum = flightPlanAbridged.LegNum()
        self.idDepAirfield = flightPlanAbridged.IdDepAirfield()
        self.depAirfield = flightPlanAbridged.DepAirfield()
        self.idArrAirfield = flightPlanAbridged.IdArrAirfield()
        self.arrAirfield = flightPlanAbridged.ArrAirfield()
        self.externalId = flightPlanAbridged.ExternalId()
        self.genTs = flightPlanAbridged.GenTs()
        self.aircraftMds = flightPlanAbridged.AircraftMds()
        self.tailNumber = flightPlanAbridged.TailNumber()
        self.callSign = flightPlanAbridged.CallSign()
        self.wxValidStart = flightPlanAbridged.WxValidStart()
        self.wxValidEnd = flightPlanAbridged.WxValidEnd()
        self.estDepTime = flightPlanAbridged.EstDepTime()
        self.dragIndex = flightPlanAbridged.DragIndex()
        self.fuelDegrade = flightPlanAbridged.FuelDegrade()
        self.opWeight = flightPlanAbridged.OpWeight()
        self.msnIndex = flightPlanAbridged.MsnIndex()
        self.rampFuel = flightPlanAbridged.RampFuel()
        self.taxiFuel = flightPlanAbridged.TaxiFuel()
        self.takeoffFuel = flightPlanAbridged.TakeoffFuel()
        self.climbFuel = flightPlanAbridged.ClimbFuel()
        self.climbTime = flightPlanAbridged.ClimbTime()
        self.holdDownFuel = flightPlanAbridged.HoldDownFuel()
        self.tocIceFuel = flightPlanAbridged.TocIceFuel()
        self.tocFuel = flightPlanAbridged.TocFuel()
        self.enrouteFuel = flightPlanAbridged.EnrouteFuel()
        self.enrouteTime = flightPlanAbridged.EnrouteTime()
        self.thunderAvoidFuel = flightPlanAbridged.ThunderAvoidFuel()
        self.todIceFuel = flightPlanAbridged.TodIceFuel()
        self.opConditionFuel = flightPlanAbridged.OpConditionFuel()
        self.todFuel = flightPlanAbridged.TodFuel()
        self.earlyDescentFuel = flightPlanAbridged.EarlyDescentFuel()
        self.arrIceFuel = flightPlanAbridged.ArrIceFuel()
        self.holdFuel = flightPlanAbridged.HoldFuel()
        self.holdTime = flightPlanAbridged.HoldTime()
        self.appLandingFuel = flightPlanAbridged.AppLandingFuel()
        self.burnedFuel = flightPlanAbridged.BurnedFuel()
        self.landingFuel = flightPlanAbridged.LandingFuel()
        self.minDivertFuel = flightPlanAbridged.MinDivertFuel()
        self.arrAlternate1Fuel = flightPlanAbridged.ArrAlternate1Fuel()
        self.arrAlternate2Fuel = flightPlanAbridged.ArrAlternate2Fuel()
        self.contingencyFuel = flightPlanAbridged.ContingencyFuel()
        self.reserveFuel = flightPlanAbridged.ReserveFuel()
        self.depressFuel = flightPlanAbridged.DepressFuel()
        self.unusableFuel = flightPlanAbridged.UnusableFuel()
        self.unidentExtraFuel = flightPlanAbridged.UnidentExtraFuel()
        self.identExtraFuel = flightPlanAbridged.IdentExtraFuel()
        self.remAlternate1Fuel = flightPlanAbridged.RemAlternate1Fuel()
        self.remAlternate2Fuel = flightPlanAbridged.RemAlternate2Fuel()
        self.enduranceTime = flightPlanAbridged.EnduranceTime()
        self.sid = flightPlanAbridged.Sid()
        self.star = flightPlanAbridged.Star()
        self.gpsRaim = flightPlanAbridged.GpsRaim()
        self.depRunway = flightPlanAbridged.DepRunway()
        self.arrRunway = flightPlanAbridged.ArrRunway()
        self.routeString = flightPlanAbridged.RouteString()
        if not flightPlanAbridged.CountryCodesIsNone():
            self.countryCodes = []
            for i in range(flightPlanAbridged.CountryCodesLength()):
                self.countryCodes.append(flightPlanAbridged.CountryCodes(i))
        self.etopsRating = flightPlanAbridged.EtopsRating()
        if not flightPlanAbridged.EtopsAirfieldsIsNone():
            self.etopsAirfields = []
            for i in range(flightPlanAbridged.EtopsAirfieldsLength()):
                self.etopsAirfields.append(flightPlanAbridged.EtopsAirfields(i))
        if not flightPlanAbridged.EtopsAltAirfieldsIsNone():
            self.etopsAltAirfields = []
            for i in range(flightPlanAbridged.EtopsAltAirfieldsLength()):
                self.etopsAltAirfields.append(flightPlanAbridged.EtopsAltAirfields(i))
        self.etopsValWindow = flightPlanAbridged.EtopsValWindow()
        self.plannerRemark = flightPlanAbridged.PlannerRemark()
        self.cargoRemark = flightPlanAbridged.CargoRemark()
        self.windFac1 = flightPlanAbridged.WindFac1()
        self.windFac2 = flightPlanAbridged.WindFac2()
        self.windFacAvg = flightPlanAbridged.WindFacAvg()
        self.avgTempDev = flightPlanAbridged.AvgTempDev()
        if not flightPlanAbridged.AtcAddressesIsNone():
            self.atcAddresses = []
            for i in range(flightPlanAbridged.AtcAddressesLength()):
                self.atcAddresses.append(flightPlanAbridged.AtcAddresses(i))
        self.originator = flightPlanAbridged.Originator()
        self.numAircraft = flightPlanAbridged.NumAircraft()
        self.flightRules = flightPlanAbridged.FlightRules()
        self.flightType = flightPlanAbridged.FlightType()
        self.initialCruiseSpeed = flightPlanAbridged.InitialCruiseSpeed()
        self.initialFlightLevel = flightPlanAbridged.InitialFlightLevel()
        self.arrAlternate1 = flightPlanAbridged.ArrAlternate1()
        self.arrAlternate2 = flightPlanAbridged.ArrAlternate2()
        self.depAlternate = flightPlanAbridged.DepAlternate()
        self.wakeTurbCat = flightPlanAbridged.WakeTurbCat()
        self.equipment = flightPlanAbridged.Equipment()
        self.notes = flightPlanAbridged.Notes()
        self.createdAt = flightPlanAbridged.CreatedAt()
        self.createdBy = flightPlanAbridged.CreatedBy()
        self.sourceDl = flightPlanAbridged.SourceDl()
        self.source = flightPlanAbridged.Source()
        self.origin = flightPlanAbridged.Origin()
        self.origNetwork = flightPlanAbridged.OrigNetwork()
        self.dataMode = flightPlanAbridged.DataMode()
        if not flightPlanAbridged.AirRefuelEventsIsNone():
            self.airRefuelEvents = []
            for i in range(flightPlanAbridged.AirRefuelEventsLength()):
                self.airRefuelEvents.append(flightPlanAbridged.AirRefuelEvents(i))
        if not flightPlanAbridged.FlightPlanMessagesIsNone():
            self.flightPlanMessages = []
            for i in range(flightPlanAbridged.FlightPlanMessagesLength()):
                self.flightPlanMessages.append(flightPlanAbridged.FlightPlanMessages(i))
        if not flightPlanAbridged.FlightPlanWaypointsIsNone():
            self.flightPlanWaypoints = []
            for i in range(flightPlanAbridged.FlightPlanWaypointsLength()):
                self.flightPlanWaypoints.append(flightPlanAbridged.FlightPlanWaypoints(i))
        if not flightPlanAbridged.FlightPlanPointGroupsIsNone():
            self.flightPlanPointGroups = []
            for i in range(flightPlanAbridged.FlightPlanPointGroupsLength()):
                self.flightPlanPointGroups.append(flightPlanAbridged.FlightPlanPointGroups(i))

    # FlightPlan_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.amcMissionId is not None:
            amcMissionId = builder.CreateString(self.amcMissionId)
        if self.idSortie is not None:
            idSortie = builder.CreateString(self.idSortie)
        if self.idAircraft is not None:
            idAircraft = builder.CreateString(self.idAircraft)
        if self.idDepAirfield is not None:
            idDepAirfield = builder.CreateString(self.idDepAirfield)
        if self.depAirfield is not None:
            depAirfield = builder.CreateString(self.depAirfield)
        if self.idArrAirfield is not None:
            idArrAirfield = builder.CreateString(self.idArrAirfield)
        if self.arrAirfield is not None:
            arrAirfield = builder.CreateString(self.arrAirfield)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.genTs is not None:
            genTs = builder.CreateString(self.genTs)
        if self.aircraftMds is not None:
            aircraftMds = builder.CreateString(self.aircraftMds)
        if self.tailNumber is not None:
            tailNumber = builder.CreateString(self.tailNumber)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.wxValidStart is not None:
            wxValidStart = builder.CreateString(self.wxValidStart)
        if self.wxValidEnd is not None:
            wxValidEnd = builder.CreateString(self.wxValidEnd)
        if self.estDepTime is not None:
            estDepTime = builder.CreateString(self.estDepTime)
        if self.climbTime is not None:
            climbTime = builder.CreateString(self.climbTime)
        if self.enrouteTime is not None:
            enrouteTime = builder.CreateString(self.enrouteTime)
        if self.holdTime is not None:
            holdTime = builder.CreateString(self.holdTime)
        if self.enduranceTime is not None:
            enduranceTime = builder.CreateString(self.enduranceTime)
        if self.sid is not None:
            sid = builder.CreateString(self.sid)
        if self.star is not None:
            star = builder.CreateString(self.star)
        if self.gpsRaim is not None:
            gpsRaim = builder.CreateString(self.gpsRaim)
        if self.depRunway is not None:
            depRunway = builder.CreateString(self.depRunway)
        if self.arrRunway is not None:
            arrRunway = builder.CreateString(self.arrRunway)
        if self.routeString is not None:
            routeString = builder.CreateString(self.routeString)
        if self.countryCodes is not None:
            countryCodeslist = []
            for i in range(len(self.countryCodes)):
                countryCodeslist.append(builder.CreateString(self.countryCodes[i]))
            FlightPlan_AbridgedStartCountryCodesVector(builder, len(self.countryCodes))
            for i in reversed(range(len(self.countryCodes))):
                builder.PrependUOffsetTRelative(countryCodeslist[i])
            countryCodes = builder.EndVector()
        if self.etopsRating is not None:
            etopsRating = builder.CreateString(self.etopsRating)
        if self.etopsAirfields is not None:
            etopsAirfieldslist = []
            for i in range(len(self.etopsAirfields)):
                etopsAirfieldslist.append(builder.CreateString(self.etopsAirfields[i]))
            FlightPlan_AbridgedStartEtopsAirfieldsVector(builder, len(self.etopsAirfields))
            for i in reversed(range(len(self.etopsAirfields))):
                builder.PrependUOffsetTRelative(etopsAirfieldslist[i])
            etopsAirfields = builder.EndVector()
        if self.etopsAltAirfields is not None:
            etopsAltAirfieldslist = []
            for i in range(len(self.etopsAltAirfields)):
                etopsAltAirfieldslist.append(builder.CreateString(self.etopsAltAirfields[i]))
            FlightPlan_AbridgedStartEtopsAltAirfieldsVector(builder, len(self.etopsAltAirfields))
            for i in reversed(range(len(self.etopsAltAirfields))):
                builder.PrependUOffsetTRelative(etopsAltAirfieldslist[i])
            etopsAltAirfields = builder.EndVector()
        if self.etopsValWindow is not None:
            etopsValWindow = builder.CreateString(self.etopsValWindow)
        if self.plannerRemark is not None:
            plannerRemark = builder.CreateString(self.plannerRemark)
        if self.cargoRemark is not None:
            cargoRemark = builder.CreateString(self.cargoRemark)
        if self.atcAddresses is not None:
            atcAddresseslist = []
            for i in range(len(self.atcAddresses)):
                atcAddresseslist.append(builder.CreateString(self.atcAddresses[i]))
            FlightPlan_AbridgedStartAtcAddressesVector(builder, len(self.atcAddresses))
            for i in reversed(range(len(self.atcAddresses))):
                builder.PrependUOffsetTRelative(atcAddresseslist[i])
            atcAddresses = builder.EndVector()
        if self.originator is not None:
            originator = builder.CreateString(self.originator)
        if self.flightRules is not None:
            flightRules = builder.CreateString(self.flightRules)
        if self.flightType is not None:
            flightType = builder.CreateString(self.flightType)
        if self.initialCruiseSpeed is not None:
            initialCruiseSpeed = builder.CreateString(self.initialCruiseSpeed)
        if self.initialFlightLevel is not None:
            initialFlightLevel = builder.CreateString(self.initialFlightLevel)
        if self.arrAlternate1 is not None:
            arrAlternate1 = builder.CreateString(self.arrAlternate1)
        if self.arrAlternate2 is not None:
            arrAlternate2 = builder.CreateString(self.arrAlternate2)
        if self.depAlternate is not None:
            depAlternate = builder.CreateString(self.depAlternate)
        if self.wakeTurbCat is not None:
            wakeTurbCat = builder.CreateString(self.wakeTurbCat)
        if self.equipment is not None:
            equipment = builder.CreateString(self.equipment)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.airRefuelEvents is not None:
            airRefuelEventslist = []
            for i in range(len(self.airRefuelEvents)):
                airRefuelEventslist.append(builder.CreateString(self.airRefuelEvents[i]))
            FlightPlan_AbridgedStartAirRefuelEventsVector(builder, len(self.airRefuelEvents))
            for i in reversed(range(len(self.airRefuelEvents))):
                builder.PrependUOffsetTRelative(airRefuelEventslist[i])
            airRefuelEvents = builder.EndVector()
        if self.flightPlanMessages is not None:
            flightPlanMessageslist = []
            for i in range(len(self.flightPlanMessages)):
                flightPlanMessageslist.append(builder.CreateString(self.flightPlanMessages[i]))
            FlightPlan_AbridgedStartFlightPlanMessagesVector(builder, len(self.flightPlanMessages))
            for i in reversed(range(len(self.flightPlanMessages))):
                builder.PrependUOffsetTRelative(flightPlanMessageslist[i])
            flightPlanMessages = builder.EndVector()
        if self.flightPlanWaypoints is not None:
            flightPlanWaypointslist = []
            for i in range(len(self.flightPlanWaypoints)):
                flightPlanWaypointslist.append(builder.CreateString(self.flightPlanWaypoints[i]))
            FlightPlan_AbridgedStartFlightPlanWaypointsVector(builder, len(self.flightPlanWaypoints))
            for i in reversed(range(len(self.flightPlanWaypoints))):
                builder.PrependUOffsetTRelative(flightPlanWaypointslist[i])
            flightPlanWaypoints = builder.EndVector()
        if self.flightPlanPointGroups is not None:
            flightPlanPointGroupslist = []
            for i in range(len(self.flightPlanPointGroups)):
                flightPlanPointGroupslist.append(builder.CreateString(self.flightPlanPointGroups[i]))
            FlightPlan_AbridgedStartFlightPlanPointGroupsVector(builder, len(self.flightPlanPointGroups))
            for i in reversed(range(len(self.flightPlanPointGroups))):
                builder.PrependUOffsetTRelative(flightPlanPointGroupslist[i])
            flightPlanPointGroups = builder.EndVector()
        FlightPlan_AbridgedStart(builder)
        if self.id is not None:
            FlightPlan_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            FlightPlan_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.amcMissionId is not None:
            FlightPlan_AbridgedAddAmcMissionId(builder, amcMissionId)
        if self.idSortie is not None:
            FlightPlan_AbridgedAddIdSortie(builder, idSortie)
        if self.idAircraft is not None:
            FlightPlan_AbridgedAddIdAircraft(builder, idAircraft)
        FlightPlan_AbridgedAddLegNum(builder, self.legNum)
        if self.idDepAirfield is not None:
            FlightPlan_AbridgedAddIdDepAirfield(builder, idDepAirfield)
        if self.depAirfield is not None:
            FlightPlan_AbridgedAddDepAirfield(builder, depAirfield)
        if self.idArrAirfield is not None:
            FlightPlan_AbridgedAddIdArrAirfield(builder, idArrAirfield)
        if self.arrAirfield is not None:
            FlightPlan_AbridgedAddArrAirfield(builder, arrAirfield)
        if self.externalId is not None:
            FlightPlan_AbridgedAddExternalId(builder, externalId)
        if self.genTs is not None:
            FlightPlan_AbridgedAddGenTs(builder, genTs)
        if self.aircraftMds is not None:
            FlightPlan_AbridgedAddAircraftMds(builder, aircraftMds)
        if self.tailNumber is not None:
            FlightPlan_AbridgedAddTailNumber(builder, tailNumber)
        if self.callSign is not None:
            FlightPlan_AbridgedAddCallSign(builder, callSign)
        if self.wxValidStart is not None:
            FlightPlan_AbridgedAddWxValidStart(builder, wxValidStart)
        if self.wxValidEnd is not None:
            FlightPlan_AbridgedAddWxValidEnd(builder, wxValidEnd)
        if self.estDepTime is not None:
            FlightPlan_AbridgedAddEstDepTime(builder, estDepTime)
        FlightPlan_AbridgedAddDragIndex(builder, self.dragIndex)
        FlightPlan_AbridgedAddFuelDegrade(builder, self.fuelDegrade)
        FlightPlan_AbridgedAddOpWeight(builder, self.opWeight)
        FlightPlan_AbridgedAddMsnIndex(builder, self.msnIndex)
        FlightPlan_AbridgedAddRampFuel(builder, self.rampFuel)
        FlightPlan_AbridgedAddTaxiFuel(builder, self.taxiFuel)
        FlightPlan_AbridgedAddTakeoffFuel(builder, self.takeoffFuel)
        FlightPlan_AbridgedAddClimbFuel(builder, self.climbFuel)
        if self.climbTime is not None:
            FlightPlan_AbridgedAddClimbTime(builder, climbTime)
        FlightPlan_AbridgedAddHoldDownFuel(builder, self.holdDownFuel)
        FlightPlan_AbridgedAddTocIceFuel(builder, self.tocIceFuel)
        FlightPlan_AbridgedAddTocFuel(builder, self.tocFuel)
        FlightPlan_AbridgedAddEnrouteFuel(builder, self.enrouteFuel)
        if self.enrouteTime is not None:
            FlightPlan_AbridgedAddEnrouteTime(builder, enrouteTime)
        FlightPlan_AbridgedAddThunderAvoidFuel(builder, self.thunderAvoidFuel)
        FlightPlan_AbridgedAddTodIceFuel(builder, self.todIceFuel)
        FlightPlan_AbridgedAddOpConditionFuel(builder, self.opConditionFuel)
        FlightPlan_AbridgedAddTodFuel(builder, self.todFuel)
        FlightPlan_AbridgedAddEarlyDescentFuel(builder, self.earlyDescentFuel)
        FlightPlan_AbridgedAddArrIceFuel(builder, self.arrIceFuel)
        FlightPlan_AbridgedAddHoldFuel(builder, self.holdFuel)
        if self.holdTime is not None:
            FlightPlan_AbridgedAddHoldTime(builder, holdTime)
        FlightPlan_AbridgedAddAppLandingFuel(builder, self.appLandingFuel)
        FlightPlan_AbridgedAddBurnedFuel(builder, self.burnedFuel)
        FlightPlan_AbridgedAddLandingFuel(builder, self.landingFuel)
        FlightPlan_AbridgedAddMinDivertFuel(builder, self.minDivertFuel)
        FlightPlan_AbridgedAddArrAlternate1Fuel(builder, self.arrAlternate1Fuel)
        FlightPlan_AbridgedAddArrAlternate2Fuel(builder, self.arrAlternate2Fuel)
        FlightPlan_AbridgedAddContingencyFuel(builder, self.contingencyFuel)
        FlightPlan_AbridgedAddReserveFuel(builder, self.reserveFuel)
        FlightPlan_AbridgedAddDepressFuel(builder, self.depressFuel)
        FlightPlan_AbridgedAddUnusableFuel(builder, self.unusableFuel)
        FlightPlan_AbridgedAddUnidentExtraFuel(builder, self.unidentExtraFuel)
        FlightPlan_AbridgedAddIdentExtraFuel(builder, self.identExtraFuel)
        FlightPlan_AbridgedAddRemAlternate1Fuel(builder, self.remAlternate1Fuel)
        FlightPlan_AbridgedAddRemAlternate2Fuel(builder, self.remAlternate2Fuel)
        if self.enduranceTime is not None:
            FlightPlan_AbridgedAddEnduranceTime(builder, enduranceTime)
        if self.sid is not None:
            FlightPlan_AbridgedAddSid(builder, sid)
        if self.star is not None:
            FlightPlan_AbridgedAddStar(builder, star)
        if self.gpsRaim is not None:
            FlightPlan_AbridgedAddGpsRaim(builder, gpsRaim)
        if self.depRunway is not None:
            FlightPlan_AbridgedAddDepRunway(builder, depRunway)
        if self.arrRunway is not None:
            FlightPlan_AbridgedAddArrRunway(builder, arrRunway)
        if self.routeString is not None:
            FlightPlan_AbridgedAddRouteString(builder, routeString)
        if self.countryCodes is not None:
            FlightPlan_AbridgedAddCountryCodes(builder, countryCodes)
        if self.etopsRating is not None:
            FlightPlan_AbridgedAddEtopsRating(builder, etopsRating)
        if self.etopsAirfields is not None:
            FlightPlan_AbridgedAddEtopsAirfields(builder, etopsAirfields)
        if self.etopsAltAirfields is not None:
            FlightPlan_AbridgedAddEtopsAltAirfields(builder, etopsAltAirfields)
        if self.etopsValWindow is not None:
            FlightPlan_AbridgedAddEtopsValWindow(builder, etopsValWindow)
        if self.plannerRemark is not None:
            FlightPlan_AbridgedAddPlannerRemark(builder, plannerRemark)
        if self.cargoRemark is not None:
            FlightPlan_AbridgedAddCargoRemark(builder, cargoRemark)
        FlightPlan_AbridgedAddWindFac1(builder, self.windFac1)
        FlightPlan_AbridgedAddWindFac2(builder, self.windFac2)
        FlightPlan_AbridgedAddWindFacAvg(builder, self.windFacAvg)
        FlightPlan_AbridgedAddAvgTempDev(builder, self.avgTempDev)
        if self.atcAddresses is not None:
            FlightPlan_AbridgedAddAtcAddresses(builder, atcAddresses)
        if self.originator is not None:
            FlightPlan_AbridgedAddOriginator(builder, originator)
        FlightPlan_AbridgedAddNumAircraft(builder, self.numAircraft)
        if self.flightRules is not None:
            FlightPlan_AbridgedAddFlightRules(builder, flightRules)
        if self.flightType is not None:
            FlightPlan_AbridgedAddFlightType(builder, flightType)
        if self.initialCruiseSpeed is not None:
            FlightPlan_AbridgedAddInitialCruiseSpeed(builder, initialCruiseSpeed)
        if self.initialFlightLevel is not None:
            FlightPlan_AbridgedAddInitialFlightLevel(builder, initialFlightLevel)
        if self.arrAlternate1 is not None:
            FlightPlan_AbridgedAddArrAlternate1(builder, arrAlternate1)
        if self.arrAlternate2 is not None:
            FlightPlan_AbridgedAddArrAlternate2(builder, arrAlternate2)
        if self.depAlternate is not None:
            FlightPlan_AbridgedAddDepAlternate(builder, depAlternate)
        if self.wakeTurbCat is not None:
            FlightPlan_AbridgedAddWakeTurbCat(builder, wakeTurbCat)
        if self.equipment is not None:
            FlightPlan_AbridgedAddEquipment(builder, equipment)
        if self.notes is not None:
            FlightPlan_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            FlightPlan_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            FlightPlan_AbridgedAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            FlightPlan_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            FlightPlan_AbridgedAddSource(builder, source)
        if self.origin is not None:
            FlightPlan_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            FlightPlan_AbridgedAddOrigNetwork(builder, origNetwork)
        FlightPlan_AbridgedAddDataMode(builder, self.dataMode)
        if self.airRefuelEvents is not None:
            FlightPlan_AbridgedAddAirRefuelEvents(builder, airRefuelEvents)
        if self.flightPlanMessages is not None:
            FlightPlan_AbridgedAddFlightPlanMessages(builder, flightPlanMessages)
        if self.flightPlanWaypoints is not None:
            FlightPlan_AbridgedAddFlightPlanWaypoints(builder, flightPlanWaypoints)
        if self.flightPlanPointGroups is not None:
            FlightPlan_AbridgedAddFlightPlanPointGroups(builder, flightPlanPointGroups)
        flightPlanAbridged = FlightPlan_AbridgedEnd(builder)
        return flightPlanAbridged
