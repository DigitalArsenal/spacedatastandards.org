# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details for an early warning payload from  Seradata.
class SeradataEarlyWarning_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeradataEarlyWarning_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeradataEarlyWarning_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SeradataEarlyWarning_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x52\x41", size_prefixed=size_prefixed)

    # SeradataEarlyWarning_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SERADATAEARLYWARNING-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataEarlyWarning_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SeradataEarlyWarning_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the parent IR record.
    # Example: /// Example: idIR
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataEarlyWarning_Full
    def IdIr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: spacecraftId
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataEarlyWarning_Full
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hosted for company/Organization Id.
    # Example: /// Example: hostedForCompanyOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataEarlyWarning_Full
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Manufacturer Organization Id.
    # Example: /// Example: manufacturerOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataEarlyWarning_Full
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
    # Example: /// Example: Infra red telescope
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataEarlyWarning_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Spectral Bands, e.g. Infra-Red.
    # Example: /// Example: Infra-Red
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataEarlyWarning_Full
    def SpectralBands(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Frequency Limits for this IR.
    # Example: /// Example: frequencyLimits
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataEarlyWarning_Full
    def FrequencyLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Best resolution for this IR in meters.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataEarlyWarning_Full
    def BestResolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ground Station info for this IR.
    # Example: /// Example: groundStations
    # Constraints: Minimum length = 0, Maximum length = 128
    # SeradataEarlyWarning_Full
    def GroundStations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground Station Locations for this IR.
    # Example: /// Example: groundStationLocations
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataEarlyWarning_Full
    def GroundStationLocations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Missile Launch Phase Detection Ability.
    # Example: /// Example: missileLaunchPhaseDetectionAbility
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataEarlyWarning_Full
    def MissileLaunchPhaseDetectionAbility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Is the sensor Earth Pointing.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SeradataEarlyWarning_Full
    def EarthPointing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: partnerSpacecraftId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataEarlyWarning_Full
    def PartnerSpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Payload notes.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SeradataEarlyWarning_Full
    def PayloadNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataEarlyWarning_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataEarlyWarning_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataEarlyWarning_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataEarlyWarning_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataEarlyWarning_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataEarlyWarning_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # SeradataEarlyWarning_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataEarlyWarning_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SeradataEarlyWarning_FullStart(builder):
    builder.StartObject(24)

def Start(builder):
    SeradataEarlyWarning_FullStart(builder)

def SeradataEarlyWarning_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SeradataEarlyWarning_FullAddId(builder, id)

def SeradataEarlyWarning_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SeradataEarlyWarning_FullAddClassificationMarking(builder, classificationMarking)

def SeradataEarlyWarning_FullAddIdIr(builder, idIr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idIr), 0)

def AddIdIr(builder, idIr):
    SeradataEarlyWarning_FullAddIdIr(builder, idIr)

def SeradataEarlyWarning_FullAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    SeradataEarlyWarning_FullAddSpacecraftId(builder, spacecraftId)

def SeradataEarlyWarning_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    SeradataEarlyWarning_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def SeradataEarlyWarning_FullAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SeradataEarlyWarning_FullAddManufacturerOrgId(builder, manufacturerOrgId)

def SeradataEarlyWarning_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SeradataEarlyWarning_FullAddName(builder, name)

def SeradataEarlyWarning_FullAddSpectralBands(builder, spectralBands):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(spectralBands), 0)

def AddSpectralBands(builder, spectralBands):
    SeradataEarlyWarning_FullAddSpectralBands(builder, spectralBands)

def SeradataEarlyWarning_FullAddFrequencyLimits(builder, frequencyLimits):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(frequencyLimits), 0)

def AddFrequencyLimits(builder, frequencyLimits):
    SeradataEarlyWarning_FullAddFrequencyLimits(builder, frequencyLimits)

def SeradataEarlyWarning_FullAddBestResolution(builder, bestResolution):
    builder.PrependFloat64Slot(9, bestResolution, 0.0)

def AddBestResolution(builder, bestResolution):
    SeradataEarlyWarning_FullAddBestResolution(builder, bestResolution)

def SeradataEarlyWarning_FullAddGroundStations(builder, groundStations):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(groundStations), 0)

def AddGroundStations(builder, groundStations):
    SeradataEarlyWarning_FullAddGroundStations(builder, groundStations)

def SeradataEarlyWarning_FullAddGroundStationLocations(builder, groundStationLocations):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(groundStationLocations), 0)

def AddGroundStationLocations(builder, groundStationLocations):
    SeradataEarlyWarning_FullAddGroundStationLocations(builder, groundStationLocations)

def SeradataEarlyWarning_FullAddMissileLaunchPhaseDetectionAbility(builder, missileLaunchPhaseDetectionAbility):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(missileLaunchPhaseDetectionAbility), 0)

def AddMissileLaunchPhaseDetectionAbility(builder, missileLaunchPhaseDetectionAbility):
    SeradataEarlyWarning_FullAddMissileLaunchPhaseDetectionAbility(builder, missileLaunchPhaseDetectionAbility)

def SeradataEarlyWarning_FullAddEarthPointing(builder, earthPointing):
    builder.PrependBoolSlot(13, earthPointing, 0)

def AddEarthPointing(builder, earthPointing):
    SeradataEarlyWarning_FullAddEarthPointing(builder, earthPointing)

def SeradataEarlyWarning_FullAddPartnerSpacecraftId(builder, partnerSpacecraftId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(partnerSpacecraftId), 0)

def AddPartnerSpacecraftId(builder, partnerSpacecraftId):
    SeradataEarlyWarning_FullAddPartnerSpacecraftId(builder, partnerSpacecraftId)

def SeradataEarlyWarning_FullAddPayloadNotes(builder, payloadNotes):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(payloadNotes), 0)

def AddPayloadNotes(builder, payloadNotes):
    SeradataEarlyWarning_FullAddPayloadNotes(builder, payloadNotes)

def SeradataEarlyWarning_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SeradataEarlyWarning_FullAddCreatedAt(builder, createdAt)

def SeradataEarlyWarning_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SeradataEarlyWarning_FullAddCreatedBy(builder, createdBy)

def SeradataEarlyWarning_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SeradataEarlyWarning_FullAddUpdatedAt(builder, updatedAt)

def SeradataEarlyWarning_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SeradataEarlyWarning_FullAddUpdatedBy(builder, updatedBy)

def SeradataEarlyWarning_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SeradataEarlyWarning_FullAddSource(builder, source)

def SeradataEarlyWarning_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SeradataEarlyWarning_FullAddOrigin(builder, origin)

def SeradataEarlyWarning_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SeradataEarlyWarning_FullAddOrigNetwork(builder, origNetwork)

def SeradataEarlyWarning_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(23, dataMode, 0)

def AddDataMode(builder, dataMode):
    SeradataEarlyWarning_FullAddDataMode(builder, dataMode)

def SeradataEarlyWarning_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SeradataEarlyWarning_FullEnd(builder)


class SeradataEarlyWarning_FullT(object):

    # SeradataEarlyWarning_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idIr = None  # type: str
        self.spacecraftId = None  # type: str
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.name = None  # type: str
        self.spectralBands = None  # type: str
        self.frequencyLimits = None  # type: str
        self.bestResolution = 0.0  # type: float
        self.groundStations = None  # type: str
        self.groundStationLocations = None  # type: str
        self.missileLaunchPhaseDetectionAbility = None  # type: str
        self.earthPointing = False  # type: bool
        self.partnerSpacecraftId = None  # type: str
        self.payloadNotes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seradataEarlyWarningFull = SeradataEarlyWarning_Full()
        seradataEarlyWarningFull.Init(buf, pos)
        return cls.InitFromObj(seradataEarlyWarningFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seradataEarlyWarningFull):
        x = SeradataEarlyWarning_FullT()
        x._UnPack(seradataEarlyWarningFull)
        return x

    # SeradataEarlyWarning_FullT
    def _UnPack(self, seradataEarlyWarningFull):
        if seradataEarlyWarningFull is None:
            return
        self.id = seradataEarlyWarningFull.Id()
        self.classificationMarking = seradataEarlyWarningFull.ClassificationMarking()
        self.idIr = seradataEarlyWarningFull.IdIr()
        self.spacecraftId = seradataEarlyWarningFull.SpacecraftId()
        self.hostedForCompanyOrgId = seradataEarlyWarningFull.HostedForCompanyOrgId()
        self.manufacturerOrgId = seradataEarlyWarningFull.ManufacturerOrgId()
        self.name = seradataEarlyWarningFull.Name()
        self.spectralBands = seradataEarlyWarningFull.SpectralBands()
        self.frequencyLimits = seradataEarlyWarningFull.FrequencyLimits()
        self.bestResolution = seradataEarlyWarningFull.BestResolution()
        self.groundStations = seradataEarlyWarningFull.GroundStations()
        self.groundStationLocations = seradataEarlyWarningFull.GroundStationLocations()
        self.missileLaunchPhaseDetectionAbility = seradataEarlyWarningFull.MissileLaunchPhaseDetectionAbility()
        self.earthPointing = seradataEarlyWarningFull.EarthPointing()
        self.partnerSpacecraftId = seradataEarlyWarningFull.PartnerSpacecraftId()
        self.payloadNotes = seradataEarlyWarningFull.PayloadNotes()
        self.createdAt = seradataEarlyWarningFull.CreatedAt()
        self.createdBy = seradataEarlyWarningFull.CreatedBy()
        self.updatedAt = seradataEarlyWarningFull.UpdatedAt()
        self.updatedBy = seradataEarlyWarningFull.UpdatedBy()
        self.source = seradataEarlyWarningFull.Source()
        self.origin = seradataEarlyWarningFull.Origin()
        self.origNetwork = seradataEarlyWarningFull.OrigNetwork()
        self.dataMode = seradataEarlyWarningFull.DataMode()

    # SeradataEarlyWarning_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idIr is not None:
            idIr = builder.CreateString(self.idIr)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.spectralBands is not None:
            spectralBands = builder.CreateString(self.spectralBands)
        if self.frequencyLimits is not None:
            frequencyLimits = builder.CreateString(self.frequencyLimits)
        if self.groundStations is not None:
            groundStations = builder.CreateString(self.groundStations)
        if self.groundStationLocations is not None:
            groundStationLocations = builder.CreateString(self.groundStationLocations)
        if self.missileLaunchPhaseDetectionAbility is not None:
            missileLaunchPhaseDetectionAbility = builder.CreateString(self.missileLaunchPhaseDetectionAbility)
        if self.partnerSpacecraftId is not None:
            partnerSpacecraftId = builder.CreateString(self.partnerSpacecraftId)
        if self.payloadNotes is not None:
            payloadNotes = builder.CreateString(self.payloadNotes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SeradataEarlyWarning_FullStart(builder)
        if self.id is not None:
            SeradataEarlyWarning_FullAddId(builder, id)
        if self.classificationMarking is not None:
            SeradataEarlyWarning_FullAddClassificationMarking(builder, classificationMarking)
        if self.idIr is not None:
            SeradataEarlyWarning_FullAddIdIr(builder, idIr)
        if self.spacecraftId is not None:
            SeradataEarlyWarning_FullAddSpacecraftId(builder, spacecraftId)
        if self.hostedForCompanyOrgId is not None:
            SeradataEarlyWarning_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            SeradataEarlyWarning_FullAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.name is not None:
            SeradataEarlyWarning_FullAddName(builder, name)
        if self.spectralBands is not None:
            SeradataEarlyWarning_FullAddSpectralBands(builder, spectralBands)
        if self.frequencyLimits is not None:
            SeradataEarlyWarning_FullAddFrequencyLimits(builder, frequencyLimits)
        SeradataEarlyWarning_FullAddBestResolution(builder, self.bestResolution)
        if self.groundStations is not None:
            SeradataEarlyWarning_FullAddGroundStations(builder, groundStations)
        if self.groundStationLocations is not None:
            SeradataEarlyWarning_FullAddGroundStationLocations(builder, groundStationLocations)
        if self.missileLaunchPhaseDetectionAbility is not None:
            SeradataEarlyWarning_FullAddMissileLaunchPhaseDetectionAbility(builder, missileLaunchPhaseDetectionAbility)
        SeradataEarlyWarning_FullAddEarthPointing(builder, self.earthPointing)
        if self.partnerSpacecraftId is not None:
            SeradataEarlyWarning_FullAddPartnerSpacecraftId(builder, partnerSpacecraftId)
        if self.payloadNotes is not None:
            SeradataEarlyWarning_FullAddPayloadNotes(builder, payloadNotes)
        if self.createdAt is not None:
            SeradataEarlyWarning_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SeradataEarlyWarning_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SeradataEarlyWarning_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SeradataEarlyWarning_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SeradataEarlyWarning_FullAddSource(builder, source)
        if self.origin is not None:
            SeradataEarlyWarning_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SeradataEarlyWarning_FullAddOrigNetwork(builder, origNetwork)
        SeradataEarlyWarning_FullAddDataMode(builder, self.dataMode)
        seradataEarlyWarningFull = SeradataEarlyWarning_FullEnd(builder)
        return seradataEarlyWarningFull
