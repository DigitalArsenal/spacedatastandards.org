# automatically generated by the FlatBuffers compiler, do not modify

# namespace: EvacTreatment_Full

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Treatment information.
class EvacTreatment_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacTreatment_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacTreatment_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EvacTreatment_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
    # Example: BREATHING CHEST TUBE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacTreatment_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    # Example: CHEST
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacTreatment_Full
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the treatment in ISO 8601 UTC format.
    # Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacTreatment_Full
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the patient's treatment information.
    # Example: Comments on the treatment info.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacTreatment_Full
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacTreatment_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacTreatment_FullStart(builder)

def EvacTreatment_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacTreatment_FullAddType(builder, type)

def EvacTreatment_FullAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacTreatment_FullAddBodyPart(builder, bodyPart)

def EvacTreatment_FullAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacTreatment_FullAddTime(builder, time)

def EvacTreatment_FullAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacTreatment_FullAddComments(builder, comments)

def EvacTreatment_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacTreatment_FullEnd(builder)


class EvacTreatment_FullT(object):

    # EvacTreatment_FullT
    def __init__(self):
        self.type = None  # type: str
        self.bodyPart = None  # type: str
        self.time = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacTreatmentFull = EvacTreatment_Full()
        evacTreatmentFull.Init(buf, pos)
        return cls.InitFromObj(evacTreatmentFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacTreatmentFull):
        x = EvacTreatment_FullT()
        x._UnPack(evacTreatmentFull)
        return x

    # EvacTreatment_FullT
    def _UnPack(self, evacTreatmentFull):
        if evacTreatmentFull is None:
            return
        self.type = evacTreatmentFull.Type()
        self.bodyPart = evacTreatmentFull.BodyPart()
        self.time = evacTreatmentFull.Time()
        self.comments = evacTreatmentFull.Comments()

    # EvacTreatment_FullT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacTreatment_FullStart(builder)
        if self.type is not None:
            EvacTreatment_FullAddType(builder, type)
        if self.bodyPart is not None:
            EvacTreatment_FullAddBodyPart(builder, bodyPart)
        if self.time is not None:
            EvacTreatment_FullAddTime(builder, time)
        if self.comments is not None:
            EvacTreatment_FullAddComments(builder, comments)
        evacTreatmentFull = EvacTreatment_FullEnd(builder)
        return evacTreatmentFull
