# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for Crew Member data.
class CrewMembers_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CrewMembers_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCrewMembers_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CrewMembers_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x52\x45\x57", size_prefixed=size_prefixed)

    # CrewMembers_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The last name of the crew member.
    # Example: /// Example: Smith
    # Constraints: Minimum length = 0, Maximum length = 64
    # CrewMembers_Ingest
    def LastName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The first name of the crew member.
    # Example: /// Example: Freddie
    # Constraints: Minimum length = 0, Maximum length = 64
    # CrewMembers_Ingest
    def FirstName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The middle initial of the crew member.
    # Example: /// Example: G
    # Constraints: Minimum length = 0, Maximum length = 1
    # CrewMembers_Ingest
    def MiddleInitial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the crew member assigned by the originating source.
    # Example: /// Example: 12345678abc
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def MemberId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this crew member is a civilian or non-military person.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # CrewMembers_Ingest
    def Civilian(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating this person is the aircraft commander.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # CrewMembers_Ingest
    def Commander(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Last four digits of the crew member's social security number.
    # Example: /// Example: 1234
    # Constraints: Minimum length = 0, Maximum length = 4
    # CrewMembers_Ingest
    def Last4Ssn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The crew member's 10-digit DoD ID number.
    # Example: /// Example: 0123456789
    # Constraints: Minimum length = 0, Maximum length = 10
    # CrewMembers_Ingest
    def DodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The duty position of the crew member.
    # Example: /// Example: IP
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def DutyPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The crew position of the crew member.
    # Example: /// Example: EP A
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def CrewPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
    # Example: /// Example: AIRCREW
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def MemberType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The military branch assignment of the crew member.
    # Example: /// Example: Air Force
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def Branch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The rank of the crew member.
    # Example: /// Example: Capt
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The wing the crew member serves.
    # Example: /// Example: 60AMW
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def Wing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The squadron the crew member serves.
    # Example: /// Example: 21AS
    # Constraints: Minimum length = 0, Maximum length = 32
    # CrewMembers_Ingest
    def Squadron(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning the crew member.
    # Example: /// Example: Crew member remark
    # Constraints: Minimum length = 0, Maximum length = 512
    # CrewMembers_Ingest
    def MemberRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Mattermost username of this crew member.
    # Example: /// Example: fgsmith
    # Constraints: Minimum length = 0, Maximum length = 64
    # CrewMembers_Ingest
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CrewMembers_IngestStart(builder):
    builder.StartObject(17)

def Start(builder):
    CrewMembers_IngestStart(builder)

def CrewMembers_IngestAddLastName(builder, lastName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lastName), 0)

def AddLastName(builder, lastName):
    CrewMembers_IngestAddLastName(builder, lastName)

def CrewMembers_IngestAddFirstName(builder, firstName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(firstName), 0)

def AddFirstName(builder, firstName):
    CrewMembers_IngestAddFirstName(builder, firstName)

def CrewMembers_IngestAddMiddleInitial(builder, middleInitial):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(middleInitial), 0)

def AddMiddleInitial(builder, middleInitial):
    CrewMembers_IngestAddMiddleInitial(builder, middleInitial)

def CrewMembers_IngestAddMemberId(builder, memberId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(memberId), 0)

def AddMemberId(builder, memberId):
    CrewMembers_IngestAddMemberId(builder, memberId)

def CrewMembers_IngestAddCivilian(builder, civilian):
    builder.PrependBoolSlot(4, civilian, 0)

def AddCivilian(builder, civilian):
    CrewMembers_IngestAddCivilian(builder, civilian)

def CrewMembers_IngestAddCommander(builder, commander):
    builder.PrependBoolSlot(5, commander, 0)

def AddCommander(builder, commander):
    CrewMembers_IngestAddCommander(builder, commander)

def CrewMembers_IngestAddLast4Ssn(builder, last4Ssn):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(last4Ssn), 0)

def AddLast4Ssn(builder, last4Ssn):
    CrewMembers_IngestAddLast4Ssn(builder, last4Ssn)

def CrewMembers_IngestAddDodId(builder, dodId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dodId), 0)

def AddDodId(builder, dodId):
    CrewMembers_IngestAddDodId(builder, dodId)

def CrewMembers_IngestAddDutyPosition(builder, dutyPosition):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(dutyPosition), 0)

def AddDutyPosition(builder, dutyPosition):
    CrewMembers_IngestAddDutyPosition(builder, dutyPosition)

def CrewMembers_IngestAddCrewPosition(builder, crewPosition):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(crewPosition), 0)

def AddCrewPosition(builder, crewPosition):
    CrewMembers_IngestAddCrewPosition(builder, crewPosition)

def CrewMembers_IngestAddMemberType(builder, memberType):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(memberType), 0)

def AddMemberType(builder, memberType):
    CrewMembers_IngestAddMemberType(builder, memberType)

def CrewMembers_IngestAddBranch(builder, branch):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(branch), 0)

def AddBranch(builder, branch):
    CrewMembers_IngestAddBranch(builder, branch)

def CrewMembers_IngestAddRank(builder, rank):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(rank), 0)

def AddRank(builder, rank):
    CrewMembers_IngestAddRank(builder, rank)

def CrewMembers_IngestAddWing(builder, wing):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(wing), 0)

def AddWing(builder, wing):
    CrewMembers_IngestAddWing(builder, wing)

def CrewMembers_IngestAddSquadron(builder, squadron):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(squadron), 0)

def AddSquadron(builder, squadron):
    CrewMembers_IngestAddSquadron(builder, squadron)

def CrewMembers_IngestAddMemberRemarks(builder, memberRemarks):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(memberRemarks), 0)

def AddMemberRemarks(builder, memberRemarks):
    CrewMembers_IngestAddMemberRemarks(builder, memberRemarks)

def CrewMembers_IngestAddUsername(builder, username):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)

def AddUsername(builder, username):
    CrewMembers_IngestAddUsername(builder, username)

def CrewMembers_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return CrewMembers_IngestEnd(builder)


class CrewMembers_IngestT(object):

    # CrewMembers_IngestT
    def __init__(self):
        self.lastName = None  # type: str
        self.firstName = None  # type: str
        self.middleInitial = None  # type: str
        self.memberId = None  # type: str
        self.civilian = False  # type: bool
        self.commander = False  # type: bool
        self.last4Ssn = None  # type: str
        self.dodId = None  # type: str
        self.dutyPosition = None  # type: str
        self.crewPosition = None  # type: str
        self.memberType = None  # type: str
        self.branch = None  # type: str
        self.rank = None  # type: str
        self.wing = None  # type: str
        self.squadron = None  # type: str
        self.memberRemarks = None  # type: str
        self.username = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        crewMembersIngest = CrewMembers_Ingest()
        crewMembersIngest.Init(buf, pos)
        return cls.InitFromObj(crewMembersIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, crewMembersIngest):
        x = CrewMembers_IngestT()
        x._UnPack(crewMembersIngest)
        return x

    # CrewMembers_IngestT
    def _UnPack(self, crewMembersIngest):
        if crewMembersIngest is None:
            return
        self.lastName = crewMembersIngest.LastName()
        self.firstName = crewMembersIngest.FirstName()
        self.middleInitial = crewMembersIngest.MiddleInitial()
        self.memberId = crewMembersIngest.MemberId()
        self.civilian = crewMembersIngest.Civilian()
        self.commander = crewMembersIngest.Commander()
        self.last4Ssn = crewMembersIngest.Last4Ssn()
        self.dodId = crewMembersIngest.DodId()
        self.dutyPosition = crewMembersIngest.DutyPosition()
        self.crewPosition = crewMembersIngest.CrewPosition()
        self.memberType = crewMembersIngest.MemberType()
        self.branch = crewMembersIngest.Branch()
        self.rank = crewMembersIngest.Rank()
        self.wing = crewMembersIngest.Wing()
        self.squadron = crewMembersIngest.Squadron()
        self.memberRemarks = crewMembersIngest.MemberRemarks()
        self.username = crewMembersIngest.Username()

    # CrewMembers_IngestT
    def Pack(self, builder):
        if self.lastName is not None:
            lastName = builder.CreateString(self.lastName)
        if self.firstName is not None:
            firstName = builder.CreateString(self.firstName)
        if self.middleInitial is not None:
            middleInitial = builder.CreateString(self.middleInitial)
        if self.memberId is not None:
            memberId = builder.CreateString(self.memberId)
        if self.last4Ssn is not None:
            last4Ssn = builder.CreateString(self.last4Ssn)
        if self.dodId is not None:
            dodId = builder.CreateString(self.dodId)
        if self.dutyPosition is not None:
            dutyPosition = builder.CreateString(self.dutyPosition)
        if self.crewPosition is not None:
            crewPosition = builder.CreateString(self.crewPosition)
        if self.memberType is not None:
            memberType = builder.CreateString(self.memberType)
        if self.branch is not None:
            branch = builder.CreateString(self.branch)
        if self.rank is not None:
            rank = builder.CreateString(self.rank)
        if self.wing is not None:
            wing = builder.CreateString(self.wing)
        if self.squadron is not None:
            squadron = builder.CreateString(self.squadron)
        if self.memberRemarks is not None:
            memberRemarks = builder.CreateString(self.memberRemarks)
        if self.username is not None:
            username = builder.CreateString(self.username)
        CrewMembers_IngestStart(builder)
        if self.lastName is not None:
            CrewMembers_IngestAddLastName(builder, lastName)
        if self.firstName is not None:
            CrewMembers_IngestAddFirstName(builder, firstName)
        if self.middleInitial is not None:
            CrewMembers_IngestAddMiddleInitial(builder, middleInitial)
        if self.memberId is not None:
            CrewMembers_IngestAddMemberId(builder, memberId)
        CrewMembers_IngestAddCivilian(builder, self.civilian)
        CrewMembers_IngestAddCommander(builder, self.commander)
        if self.last4Ssn is not None:
            CrewMembers_IngestAddLast4Ssn(builder, last4Ssn)
        if self.dodId is not None:
            CrewMembers_IngestAddDodId(builder, dodId)
        if self.dutyPosition is not None:
            CrewMembers_IngestAddDutyPosition(builder, dutyPosition)
        if self.crewPosition is not None:
            CrewMembers_IngestAddCrewPosition(builder, crewPosition)
        if self.memberType is not None:
            CrewMembers_IngestAddMemberType(builder, memberType)
        if self.branch is not None:
            CrewMembers_IngestAddBranch(builder, branch)
        if self.rank is not None:
            CrewMembers_IngestAddRank(builder, rank)
        if self.wing is not None:
            CrewMembers_IngestAddWing(builder, wing)
        if self.squadron is not None:
            CrewMembers_IngestAddSquadron(builder, squadron)
        if self.memberRemarks is not None:
            CrewMembers_IngestAddMemberRemarks(builder, memberRemarks)
        if self.username is not None:
            CrewMembers_IngestAddUsername(builder, username)
        crewMembersIngest = CrewMembers_IngestEnd(builder)
        return crewMembersIngest
