# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
class AttitudeData_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AttitudeData_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAttitudeData_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AttitudeData_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x54\x54\x49", size_prefixed=size_prefixed)

    # AttitudeData_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ATTITUDEDATA-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeData_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AttitudeData_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent AttitudeSet associated with this record.
    # Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeData_Ingest
    def AsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the on-orbit satellite to which this attitude record applies.
    # Example: /// Example: 41947
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeData_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the on-orbit object to which this attitude record applies.
    # Example: /// Example: 41947
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: D6593
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeData_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
    # Example: /// Example: 2022-03-07T14:51:39.653043Z
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Label specifying type of rotational motion of target.
    # Example: /// Example: PROSOL_MOTION
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeData_Ingest
    def MotionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Quaternion vector component 1.
    # Example: /// Example: 0.0312
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Q1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Quaternion vector component 2.
    # Example: /// Example: 0.7854
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Q2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Quaternion vector component 3.
    # Example: /// Example: 0.3916
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Q3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Quaternion scalar component.
    # Example: /// Example: 0.4783
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Qc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Derivative of quaternion vector component 1.
    # Example: /// Example: 0.0043
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Q1Dot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Derivative of quaternion vector component 2.
    # Example: /// Example: 0.06
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Q2Dot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Derivative of quaternion vector component 3.
    # Example: /// Example: 0.499
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Q3Dot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Derivative of quaternion scalar component.
    # Example: /// Example: 0.011
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def QcDot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
    # Example: /// Example: [139.753]
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def XAngle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AttitudeData_Ingest
    def XAngleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AttitudeData_Ingest
    def XAngleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
    # Example: /// Example: [25.066]
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def YAngle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AttitudeData_Ingest
    def YAngleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AttitudeData_Ingest
    def YAngleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
    # Example: /// Example: [-53.368]
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def ZAngle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AttitudeData_Ingest
    def ZAngleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AttitudeData_Ingest
    def ZAngleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
    # Example: /// Example: [0.105]
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def XRate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AttitudeData_Ingest
    def XRateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AttitudeData_Ingest
    def XRateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
    # Example: /// Example: [0.032]
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def YRate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AttitudeData_Ingest
    def YRateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AttitudeData_Ingest
    def YRateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
    # Example: /// Example: [0.022]
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def ZRate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AttitudeData_Ingest
    def ZRateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AttitudeData_Ingest
    def ZRateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # Precession axis right ascension (ECI J2000 frame) in degrees.
    # Example: /// Example: -173.75
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Ra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Precession axis declination (ECI J2000 frame) in degrees.
    # Example: /// Example: 0.799
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def Declination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Coning angle in degrees.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def ConingAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Precession period in seconds.
    # Example: /// Example: 36.1
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def PrecPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spin period in seconds.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def SpinPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-07-05T12:00:00.123Z
    # Constraints: No constraints specified.
    # AttitudeData_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AttitudeData_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeData_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AttitudeData_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AttitudeData_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AttitudeData_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AttitudeData_IngestStart(builder):
    builder.StartObject(33)

def Start(builder):
    AttitudeData_IngestStart(builder)

def AttitudeData_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AttitudeData_IngestAddId(builder, id)

def AttitudeData_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AttitudeData_IngestAddClassificationMarking(builder, classificationMarking)

def AttitudeData_IngestAddAsId(builder, asId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(asId), 0)

def AddAsId(builder, asId):
    AttitudeData_IngestAddAsId(builder, asId)

def AttitudeData_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    AttitudeData_IngestAddIdOnOrbit(builder, idOnOrbit)

def AttitudeData_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(4, satNo, 0)

def AddSatNo(builder, satNo):
    AttitudeData_IngestAddSatNo(builder, satNo)

def AttitudeData_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    AttitudeData_IngestAddOrigObjectId(builder, origObjectId)

def AttitudeData_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    AttitudeData_IngestAddTs(builder, ts)

def AttitudeData_IngestAddMotionType(builder, motionType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(motionType), 0)

def AddMotionType(builder, motionType):
    AttitudeData_IngestAddMotionType(builder, motionType)

def AttitudeData_IngestAddQ1(builder, q1):
    builder.PrependFloat64Slot(8, q1, 0.0)

def AddQ1(builder, q1):
    AttitudeData_IngestAddQ1(builder, q1)

def AttitudeData_IngestAddQ2(builder, q2):
    builder.PrependFloat64Slot(9, q2, 0.0)

def AddQ2(builder, q2):
    AttitudeData_IngestAddQ2(builder, q2)

def AttitudeData_IngestAddQ3(builder, q3):
    builder.PrependFloat64Slot(10, q3, 0.0)

def AddQ3(builder, q3):
    AttitudeData_IngestAddQ3(builder, q3)

def AttitudeData_IngestAddQc(builder, qc):
    builder.PrependFloat64Slot(11, qc, 0.0)

def AddQc(builder, qc):
    AttitudeData_IngestAddQc(builder, qc)

def AttitudeData_IngestAddQ1Dot(builder, q1Dot):
    builder.PrependFloat64Slot(12, q1Dot, 0.0)

def AddQ1Dot(builder, q1Dot):
    AttitudeData_IngestAddQ1Dot(builder, q1Dot)

def AttitudeData_IngestAddQ2Dot(builder, q2Dot):
    builder.PrependFloat64Slot(13, q2Dot, 0.0)

def AddQ2Dot(builder, q2Dot):
    AttitudeData_IngestAddQ2Dot(builder, q2Dot)

def AttitudeData_IngestAddQ3Dot(builder, q3Dot):
    builder.PrependFloat64Slot(14, q3Dot, 0.0)

def AddQ3Dot(builder, q3Dot):
    AttitudeData_IngestAddQ3Dot(builder, q3Dot)

def AttitudeData_IngestAddQcDot(builder, qcDot):
    builder.PrependFloat64Slot(15, qcDot, 0.0)

def AddQcDot(builder, qcDot):
    AttitudeData_IngestAddQcDot(builder, qcDot)

def AttitudeData_IngestAddXAngle(builder, xAngle):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(xAngle), 0)

def AddXAngle(builder, xAngle):
    AttitudeData_IngestAddXAngle(builder, xAngle)

def AttitudeData_IngestStartXAngleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXAngleVector(builder, numElems):
    return AttitudeData_IngestStartXAngleVector(builder, numElems)

def AttitudeData_IngestAddYAngle(builder, yAngle):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(yAngle), 0)

def AddYAngle(builder, yAngle):
    AttitudeData_IngestAddYAngle(builder, yAngle)

def AttitudeData_IngestStartYAngleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartYAngleVector(builder, numElems):
    return AttitudeData_IngestStartYAngleVector(builder, numElems)

def AttitudeData_IngestAddZAngle(builder, zAngle):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(zAngle), 0)

def AddZAngle(builder, zAngle):
    AttitudeData_IngestAddZAngle(builder, zAngle)

def AttitudeData_IngestStartZAngleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartZAngleVector(builder, numElems):
    return AttitudeData_IngestStartZAngleVector(builder, numElems)

def AttitudeData_IngestAddXRate(builder, xRate):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(xRate), 0)

def AddXRate(builder, xRate):
    AttitudeData_IngestAddXRate(builder, xRate)

def AttitudeData_IngestStartXRateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartXRateVector(builder, numElems):
    return AttitudeData_IngestStartXRateVector(builder, numElems)

def AttitudeData_IngestAddYRate(builder, yRate):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(yRate), 0)

def AddYRate(builder, yRate):
    AttitudeData_IngestAddYRate(builder, yRate)

def AttitudeData_IngestStartYRateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartYRateVector(builder, numElems):
    return AttitudeData_IngestStartYRateVector(builder, numElems)

def AttitudeData_IngestAddZRate(builder, zRate):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(zRate), 0)

def AddZRate(builder, zRate):
    AttitudeData_IngestAddZRate(builder, zRate)

def AttitudeData_IngestStartZRateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartZRateVector(builder, numElems):
    return AttitudeData_IngestStartZRateVector(builder, numElems)

def AttitudeData_IngestAddRa(builder, ra):
    builder.PrependFloat64Slot(22, ra, 0.0)

def AddRa(builder, ra):
    AttitudeData_IngestAddRa(builder, ra)

def AttitudeData_IngestAddDeclination(builder, declination):
    builder.PrependFloat64Slot(23, declination, 0.0)

def AddDeclination(builder, declination):
    AttitudeData_IngestAddDeclination(builder, declination)

def AttitudeData_IngestAddConingAngle(builder, coningAngle):
    builder.PrependFloat64Slot(24, coningAngle, 0.0)

def AddConingAngle(builder, coningAngle):
    AttitudeData_IngestAddConingAngle(builder, coningAngle)

def AttitudeData_IngestAddPrecPeriod(builder, precPeriod):
    builder.PrependFloat64Slot(25, precPeriod, 0.0)

def AddPrecPeriod(builder, precPeriod):
    AttitudeData_IngestAddPrecPeriod(builder, precPeriod)

def AttitudeData_IngestAddSpinPeriod(builder, spinPeriod):
    builder.PrependFloat64Slot(26, spinPeriod, 0.0)

def AddSpinPeriod(builder, spinPeriod):
    AttitudeData_IngestAddSpinPeriod(builder, spinPeriod)

def AttitudeData_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AttitudeData_IngestAddCreatedAt(builder, createdAt)

def AttitudeData_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AttitudeData_IngestAddCreatedBy(builder, createdBy)

def AttitudeData_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AttitudeData_IngestAddSource(builder, source)

def AttitudeData_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AttitudeData_IngestAddOrigin(builder, origin)

def AttitudeData_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(31, dataMode, 0)

def AddDataMode(builder, dataMode):
    AttitudeData_IngestAddDataMode(builder, dataMode)

def AttitudeData_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AttitudeData_IngestAddOrigNetwork(builder, origNetwork)

def AttitudeData_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AttitudeData_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class AttitudeData_IngestT(object):

    # AttitudeData_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.asId = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.ts = None  # type: str
        self.motionType = None  # type: str
        self.q1 = 0.0  # type: float
        self.q2 = 0.0  # type: float
        self.q3 = 0.0  # type: float
        self.qc = 0.0  # type: float
        self.q1Dot = 0.0  # type: float
        self.q2Dot = 0.0  # type: float
        self.q3Dot = 0.0  # type: float
        self.qcDot = 0.0  # type: float
        self.xAngle = None  # type: List[str]
        self.yAngle = None  # type: List[str]
        self.zAngle = None  # type: List[str]
        self.xRate = None  # type: List[str]
        self.yRate = None  # type: List[str]
        self.zRate = None  # type: List[str]
        self.ra = 0.0  # type: float
        self.declination = 0.0  # type: float
        self.coningAngle = 0.0  # type: float
        self.precPeriod = 0.0  # type: float
        self.spinPeriod = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        attitudeDataIngest = AttitudeData_Ingest()
        attitudeDataIngest.Init(buf, pos)
        return cls.InitFromObj(attitudeDataIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, attitudeDataIngest):
        x = AttitudeData_IngestT()
        x._UnPack(attitudeDataIngest)
        return x

    # AttitudeData_IngestT
    def _UnPack(self, attitudeDataIngest):
        if attitudeDataIngest is None:
            return
        self.id = attitudeDataIngest.Id()
        self.classificationMarking = attitudeDataIngest.ClassificationMarking()
        self.asId = attitudeDataIngest.AsId()
        self.idOnOrbit = attitudeDataIngest.IdOnOrbit()
        self.satNo = attitudeDataIngest.SatNo()
        self.origObjectId = attitudeDataIngest.OrigObjectId()
        self.ts = attitudeDataIngest.Ts()
        self.motionType = attitudeDataIngest.MotionType()
        self.q1 = attitudeDataIngest.Q1()
        self.q2 = attitudeDataIngest.Q2()
        self.q3 = attitudeDataIngest.Q3()
        self.qc = attitudeDataIngest.Qc()
        self.q1Dot = attitudeDataIngest.Q1Dot()
        self.q2Dot = attitudeDataIngest.Q2Dot()
        self.q3Dot = attitudeDataIngest.Q3Dot()
        self.qcDot = attitudeDataIngest.QcDot()
        if not attitudeDataIngest.XAngleIsNone():
            self.xAngle = []
            for i in range(attitudeDataIngest.XAngleLength()):
                self.xAngle.append(attitudeDataIngest.XAngle(i))
        if not attitudeDataIngest.YAngleIsNone():
            self.yAngle = []
            for i in range(attitudeDataIngest.YAngleLength()):
                self.yAngle.append(attitudeDataIngest.YAngle(i))
        if not attitudeDataIngest.ZAngleIsNone():
            self.zAngle = []
            for i in range(attitudeDataIngest.ZAngleLength()):
                self.zAngle.append(attitudeDataIngest.ZAngle(i))
        if not attitudeDataIngest.XRateIsNone():
            self.xRate = []
            for i in range(attitudeDataIngest.XRateLength()):
                self.xRate.append(attitudeDataIngest.XRate(i))
        if not attitudeDataIngest.YRateIsNone():
            self.yRate = []
            for i in range(attitudeDataIngest.YRateLength()):
                self.yRate.append(attitudeDataIngest.YRate(i))
        if not attitudeDataIngest.ZRateIsNone():
            self.zRate = []
            for i in range(attitudeDataIngest.ZRateLength()):
                self.zRate.append(attitudeDataIngest.ZRate(i))
        self.ra = attitudeDataIngest.Ra()
        self.declination = attitudeDataIngest.Declination()
        self.coningAngle = attitudeDataIngest.ConingAngle()
        self.precPeriod = attitudeDataIngest.PrecPeriod()
        self.spinPeriod = attitudeDataIngest.SpinPeriod()
        self.createdAt = attitudeDataIngest.CreatedAt()
        self.createdBy = attitudeDataIngest.CreatedBy()
        self.source = attitudeDataIngest.Source()
        self.origin = attitudeDataIngest.Origin()
        self.dataMode = attitudeDataIngest.DataMode()
        self.origNetwork = attitudeDataIngest.OrigNetwork()

    # AttitudeData_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.asId is not None:
            asId = builder.CreateString(self.asId)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.motionType is not None:
            motionType = builder.CreateString(self.motionType)
        if self.xAngle is not None:
            xAnglelist = []
            for i in range(len(self.xAngle)):
                xAnglelist.append(builder.CreateString(self.xAngle[i]))
            AttitudeData_IngestStartXAngleVector(builder, len(self.xAngle))
            for i in reversed(range(len(self.xAngle))):
                builder.PrependUOffsetTRelative(xAnglelist[i])
            xAngle = builder.EndVector()
        if self.yAngle is not None:
            yAnglelist = []
            for i in range(len(self.yAngle)):
                yAnglelist.append(builder.CreateString(self.yAngle[i]))
            AttitudeData_IngestStartYAngleVector(builder, len(self.yAngle))
            for i in reversed(range(len(self.yAngle))):
                builder.PrependUOffsetTRelative(yAnglelist[i])
            yAngle = builder.EndVector()
        if self.zAngle is not None:
            zAnglelist = []
            for i in range(len(self.zAngle)):
                zAnglelist.append(builder.CreateString(self.zAngle[i]))
            AttitudeData_IngestStartZAngleVector(builder, len(self.zAngle))
            for i in reversed(range(len(self.zAngle))):
                builder.PrependUOffsetTRelative(zAnglelist[i])
            zAngle = builder.EndVector()
        if self.xRate is not None:
            xRatelist = []
            for i in range(len(self.xRate)):
                xRatelist.append(builder.CreateString(self.xRate[i]))
            AttitudeData_IngestStartXRateVector(builder, len(self.xRate))
            for i in reversed(range(len(self.xRate))):
                builder.PrependUOffsetTRelative(xRatelist[i])
            xRate = builder.EndVector()
        if self.yRate is not None:
            yRatelist = []
            for i in range(len(self.yRate)):
                yRatelist.append(builder.CreateString(self.yRate[i]))
            AttitudeData_IngestStartYRateVector(builder, len(self.yRate))
            for i in reversed(range(len(self.yRate))):
                builder.PrependUOffsetTRelative(yRatelist[i])
            yRate = builder.EndVector()
        if self.zRate is not None:
            zRatelist = []
            for i in range(len(self.zRate)):
                zRatelist.append(builder.CreateString(self.zRate[i]))
            AttitudeData_IngestStartZRateVector(builder, len(self.zRate))
            for i in reversed(range(len(self.zRate))):
                builder.PrependUOffsetTRelative(zRatelist[i])
            zRate = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AttitudeData_IngestStart(builder)
        if self.id is not None:
            AttitudeData_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            AttitudeData_IngestAddClassificationMarking(builder, classificationMarking)
        if self.asId is not None:
            AttitudeData_IngestAddAsId(builder, asId)
        if self.idOnOrbit is not None:
            AttitudeData_IngestAddIdOnOrbit(builder, idOnOrbit)
        AttitudeData_IngestAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            AttitudeData_IngestAddOrigObjectId(builder, origObjectId)
        if self.ts is not None:
            AttitudeData_IngestAddTs(builder, ts)
        if self.motionType is not None:
            AttitudeData_IngestAddMotionType(builder, motionType)
        AttitudeData_IngestAddQ1(builder, self.q1)
        AttitudeData_IngestAddQ2(builder, self.q2)
        AttitudeData_IngestAddQ3(builder, self.q3)
        AttitudeData_IngestAddQc(builder, self.qc)
        AttitudeData_IngestAddQ1Dot(builder, self.q1Dot)
        AttitudeData_IngestAddQ2Dot(builder, self.q2Dot)
        AttitudeData_IngestAddQ3Dot(builder, self.q3Dot)
        AttitudeData_IngestAddQcDot(builder, self.qcDot)
        if self.xAngle is not None:
            AttitudeData_IngestAddXAngle(builder, xAngle)
        if self.yAngle is not None:
            AttitudeData_IngestAddYAngle(builder, yAngle)
        if self.zAngle is not None:
            AttitudeData_IngestAddZAngle(builder, zAngle)
        if self.xRate is not None:
            AttitudeData_IngestAddXRate(builder, xRate)
        if self.yRate is not None:
            AttitudeData_IngestAddYRate(builder, yRate)
        if self.zRate is not None:
            AttitudeData_IngestAddZRate(builder, zRate)
        AttitudeData_IngestAddRa(builder, self.ra)
        AttitudeData_IngestAddDeclination(builder, self.declination)
        AttitudeData_IngestAddConingAngle(builder, self.coningAngle)
        AttitudeData_IngestAddPrecPeriod(builder, self.precPeriod)
        AttitudeData_IngestAddSpinPeriod(builder, self.spinPeriod)
        if self.createdAt is not None:
            AttitudeData_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AttitudeData_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            AttitudeData_IngestAddSource(builder, source)
        if self.origin is not None:
            AttitudeData_IngestAddOrigin(builder, origin)
        AttitudeData_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AttitudeData_IngestAddOrigNetwork(builder, origNetwork)
        attitudeDataIngest = AttitudeData_IngestEnd(builder)
        return attitudeDataIngest
