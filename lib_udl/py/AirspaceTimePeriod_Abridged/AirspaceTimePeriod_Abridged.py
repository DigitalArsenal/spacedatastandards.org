# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The timePeriod set describes the effective datetime for a given airspace control means.
class AirspaceTimePeriod_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirspaceTimePeriod_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirspaceTimePeriod_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirspaceTimePeriod_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x53", size_prefixed=size_prefixed)

    # AirspaceTimePeriod_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
    # Example: /// Example: DISCRETE
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceTimePeriod_Abridged
    def TimeMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start time designating that the airspace control order is active.
    # Example: /// Example: 141325ZFEB2002
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceTimePeriod_Abridged
    def TimeStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
    # Example: /// Example: 141325ZFEB2002
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceTimePeriod_Abridged
    def TimeEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
    # Example: /// Example: ['WEEKLY']
    # Constraints: No constraints specified.
    # AirspaceTimePeriod_Abridged
    def IntFreq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceTimePeriod_Abridged
    def IntFreqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceTimePeriod_Abridged
    def IntFreqIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
    # Example: /// Example: ['65WK']
    # Constraints: No constraints specified.
    # AirspaceTimePeriod_Abridged
    def IntDur(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceTimePeriod_Abridged
    def IntDurLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceTimePeriod_Abridged
    def IntDurIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def AirspaceTimePeriod_AbridgedStart(builder):
    builder.StartObject(5)

def Start(builder):
    AirspaceTimePeriod_AbridgedStart(builder)

def AirspaceTimePeriod_AbridgedAddTimeMode(builder, timeMode):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timeMode), 0)

def AddTimeMode(builder, timeMode):
    AirspaceTimePeriod_AbridgedAddTimeMode(builder, timeMode)

def AirspaceTimePeriod_AbridgedAddTimeStart(builder, timeStart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timeStart), 0)

def AddTimeStart(builder, timeStart):
    AirspaceTimePeriod_AbridgedAddTimeStart(builder, timeStart)

def AirspaceTimePeriod_AbridgedAddTimeEnd(builder, timeEnd):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(timeEnd), 0)

def AddTimeEnd(builder, timeEnd):
    AirspaceTimePeriod_AbridgedAddTimeEnd(builder, timeEnd)

def AirspaceTimePeriod_AbridgedAddIntFreq(builder, intFreq):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(intFreq), 0)

def AddIntFreq(builder, intFreq):
    AirspaceTimePeriod_AbridgedAddIntFreq(builder, intFreq)

def AirspaceTimePeriod_AbridgedStartIntFreqVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntFreqVector(builder, numElems):
    return AirspaceTimePeriod_AbridgedStartIntFreqVector(builder, numElems)

def AirspaceTimePeriod_AbridgedAddIntDur(builder, intDur):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(intDur), 0)

def AddIntDur(builder, intDur):
    AirspaceTimePeriod_AbridgedAddIntDur(builder, intDur)

def AirspaceTimePeriod_AbridgedStartIntDurVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntDurVector(builder, numElems):
    return AirspaceTimePeriod_AbridgedStartIntDurVector(builder, numElems)

def AirspaceTimePeriod_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirspaceTimePeriod_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AirspaceTimePeriod_AbridgedT(object):

    # AirspaceTimePeriod_AbridgedT
    def __init__(self):
        self.timeMode = None  # type: str
        self.timeStart = None  # type: str
        self.timeEnd = None  # type: str
        self.intFreq = None  # type: List[str]
        self.intDur = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airspaceTimePeriodAbridged = AirspaceTimePeriod_Abridged()
        airspaceTimePeriodAbridged.Init(buf, pos)
        return cls.InitFromObj(airspaceTimePeriodAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airspaceTimePeriodAbridged):
        x = AirspaceTimePeriod_AbridgedT()
        x._UnPack(airspaceTimePeriodAbridged)
        return x

    # AirspaceTimePeriod_AbridgedT
    def _UnPack(self, airspaceTimePeriodAbridged):
        if airspaceTimePeriodAbridged is None:
            return
        self.timeMode = airspaceTimePeriodAbridged.TimeMode()
        self.timeStart = airspaceTimePeriodAbridged.TimeStart()
        self.timeEnd = airspaceTimePeriodAbridged.TimeEnd()
        if not airspaceTimePeriodAbridged.IntFreqIsNone():
            self.intFreq = []
            for i in range(airspaceTimePeriodAbridged.IntFreqLength()):
                self.intFreq.append(airspaceTimePeriodAbridged.IntFreq(i))
        if not airspaceTimePeriodAbridged.IntDurIsNone():
            self.intDur = []
            for i in range(airspaceTimePeriodAbridged.IntDurLength()):
                self.intDur.append(airspaceTimePeriodAbridged.IntDur(i))

    # AirspaceTimePeriod_AbridgedT
    def Pack(self, builder):
        if self.timeMode is not None:
            timeMode = builder.CreateString(self.timeMode)
        if self.timeStart is not None:
            timeStart = builder.CreateString(self.timeStart)
        if self.timeEnd is not None:
            timeEnd = builder.CreateString(self.timeEnd)
        if self.intFreq is not None:
            intFreqlist = []
            for i in range(len(self.intFreq)):
                intFreqlist.append(builder.CreateString(self.intFreq[i]))
            AirspaceTimePeriod_AbridgedStartIntFreqVector(builder, len(self.intFreq))
            for i in reversed(range(len(self.intFreq))):
                builder.PrependUOffsetTRelative(intFreqlist[i])
            intFreq = builder.EndVector()
        if self.intDur is not None:
            intDurlist = []
            for i in range(len(self.intDur)):
                intDurlist.append(builder.CreateString(self.intDur[i]))
            AirspaceTimePeriod_AbridgedStartIntDurVector(builder, len(self.intDur))
            for i in reversed(range(len(self.intDur))):
                builder.PrependUOffsetTRelative(intDurlist[i])
            intDur = builder.EndVector()
        AirspaceTimePeriod_AbridgedStart(builder)
        if self.timeMode is not None:
            AirspaceTimePeriod_AbridgedAddTimeMode(builder, timeMode)
        if self.timeStart is not None:
            AirspaceTimePeriod_AbridgedAddTimeStart(builder, timeStart)
        if self.timeEnd is not None:
            AirspaceTimePeriod_AbridgedAddTimeEnd(builder, timeEnd)
        if self.intFreq is not None:
            AirspaceTimePeriod_AbridgedAddIntFreq(builder, intFreq)
        if self.intDur is not None:
            AirspaceTimePeriod_AbridgedAddIntDur(builder, intDur)
        airspaceTimePeriodAbridged = AirspaceTimePeriod_AbridgedEnd(builder)
        return airspaceTimePeriodAbridged
