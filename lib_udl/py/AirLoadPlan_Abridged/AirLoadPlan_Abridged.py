# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
class AirLoadPlan_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirLoadPlan_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirLoadPlan_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirLoadPlan_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x4C", size_prefixed=size_prefixed)

    # AirLoadPlan_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirLoadPlan_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirLoadPlan_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirLoadPlan_Abridged
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the mission this record is associated with.
    # Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirLoadPlan_Abridged
    def IdMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission number of the mission supporting this load plan.
    # Example: /// Example: AJM123456123
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirLoadPlan_Abridged
    def MissionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL ID of the aircraft sortie this record is associated with.
    # Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirLoadPlan_Abridged
    def IdSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The leg number of the mission supporting this load plan.
    # Example: /// Example: 200
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def LegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The call sign of the mission supporting this load plan.
    # Example: /// Example: RCH1234
    # Constraints: Minimum length = 0, Maximum length = 24
    # AirLoadPlan_Abridged
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft supporting this load plan.
    # Example: /// Example: 77187
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirLoadPlan_Abridged
    def TailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Model Design Series designation of the aircraft supporting this load plan.
    # Example: /// Example: C17A
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirLoadPlan_Abridged
    def AircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The departure International Civil Organization (ICAO) code of the departure airfield.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirLoadPlan_Abridged
    def DepIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
    # Example: /// Example: W99
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirLoadPlan_Abridged
    def DepAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
    # Example: /// Example: 2023-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def EstDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The arrival International Civil Organization (ICAO) code of the landing airfield.
    # Example: /// Example: ETAR
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirLoadPlan_Abridged
    def ArrIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
    # Example: /// Example: W99
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirLoadPlan_Abridged
    def ArrAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def EstArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of crew members on the aircraft.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CrewSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
    # Example: /// Example: C-1
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirLoadPlan_Abridged
    def CargoConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
    # Example: /// Example: Standard
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirLoadPlan_Abridged
    def EquipConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
    # Example: /// Example: ER
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirLoadPlan_Abridged
    def TankConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def BasicWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def BasicMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The weight of usable fuel on board the aircraft, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def FuelWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def FuelMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated weight of usable fuel upon landing, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def EstLandingFuelWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def EstLandingFuelMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The basic weight of the aircraft including passengers and equipment, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def OperatingWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def OperatingMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The weight of the cargo on board the aircraft, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CargoWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CargoMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def ZeroFuelWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def ZeroFuelMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
    # Example: /// Example: 39.5
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def ZeroFuelCg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def GrossWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def GrossMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
    # Example: /// Example: 38.8
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def GrossCg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The gross weight of the aircraft upon landing, in kilograms.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def LandingWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
    # Example: /// Example: 2500.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def LandingMoment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
    # Example: /// Example: 38.2
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def LandingCg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CargoBayFsmin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
    # Example: /// Example: 20
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CargoBayFsmax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Width of the cargo bay, in meters.
    # Example: /// Example: 3.1
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CargoBayWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2023-03-21T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirLoadPlan_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirLoadPlan_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirLoadPlan_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: source
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirLoadPlan_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirLoadPlan_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirLoadPlan_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirLoadPlan_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirLoadPlan_AbridgedStart(builder):
    builder.StartObject(49)

def Start(builder):
    AirLoadPlan_AbridgedStart(builder)

def AirLoadPlan_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirLoadPlan_AbridgedAddId(builder, id)

def AirLoadPlan_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirLoadPlan_AbridgedAddClassificationMarking(builder, classificationMarking)

def AirLoadPlan_AbridgedAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    AirLoadPlan_AbridgedAddExternalId(builder, externalId)

def AirLoadPlan_AbridgedAddIdMission(builder, idMission):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idMission), 0)

def AddIdMission(builder, idMission):
    AirLoadPlan_AbridgedAddIdMission(builder, idMission)

def AirLoadPlan_AbridgedAddMissionNumber(builder, missionNumber):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionNumber), 0)

def AddMissionNumber(builder, missionNumber):
    AirLoadPlan_AbridgedAddMissionNumber(builder, missionNumber)

def AirLoadPlan_AbridgedAddIdSortie(builder, idSortie):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSortie), 0)

def AddIdSortie(builder, idSortie):
    AirLoadPlan_AbridgedAddIdSortie(builder, idSortie)

def AirLoadPlan_AbridgedAddLegNum(builder, legNum):
    builder.PrependInt32Slot(6, legNum, 0)

def AddLegNum(builder, legNum):
    AirLoadPlan_AbridgedAddLegNum(builder, legNum)

def AirLoadPlan_AbridgedAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    AirLoadPlan_AbridgedAddCallSign(builder, callSign)

def AirLoadPlan_AbridgedAddTailNumber(builder, tailNumber):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tailNumber), 0)

def AddTailNumber(builder, tailNumber):
    AirLoadPlan_AbridgedAddTailNumber(builder, tailNumber)

def AirLoadPlan_AbridgedAddAircraftMds(builder, aircraftMds):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftMds), 0)

def AddAircraftMds(builder, aircraftMds):
    AirLoadPlan_AbridgedAddAircraftMds(builder, aircraftMds)

def AirLoadPlan_AbridgedAddDepIcao(builder, depIcao):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(depIcao), 0)

def AddDepIcao(builder, depIcao):
    AirLoadPlan_AbridgedAddDepIcao(builder, depIcao)

def AirLoadPlan_AbridgedAddDepAirfield(builder, depAirfield):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(depAirfield), 0)

def AddDepAirfield(builder, depAirfield):
    AirLoadPlan_AbridgedAddDepAirfield(builder, depAirfield)

def AirLoadPlan_AbridgedAddEstDepTime(builder, estDepTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(estDepTime), 0)

def AddEstDepTime(builder, estDepTime):
    AirLoadPlan_AbridgedAddEstDepTime(builder, estDepTime)

def AirLoadPlan_AbridgedAddArrIcao(builder, arrIcao):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(arrIcao), 0)

def AddArrIcao(builder, arrIcao):
    AirLoadPlan_AbridgedAddArrIcao(builder, arrIcao)

def AirLoadPlan_AbridgedAddArrAirfield(builder, arrAirfield):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(arrAirfield), 0)

def AddArrAirfield(builder, arrAirfield):
    AirLoadPlan_AbridgedAddArrAirfield(builder, arrAirfield)

def AirLoadPlan_AbridgedAddEstArrTime(builder, estArrTime):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(estArrTime), 0)

def AddEstArrTime(builder, estArrTime):
    AirLoadPlan_AbridgedAddEstArrTime(builder, estArrTime)

def AirLoadPlan_AbridgedAddCrewSize(builder, crewSize):
    builder.PrependInt32Slot(16, crewSize, 0)

def AddCrewSize(builder, crewSize):
    AirLoadPlan_AbridgedAddCrewSize(builder, crewSize)

def AirLoadPlan_AbridgedAddCargoConfig(builder, cargoConfig):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(cargoConfig), 0)

def AddCargoConfig(builder, cargoConfig):
    AirLoadPlan_AbridgedAddCargoConfig(builder, cargoConfig)

def AirLoadPlan_AbridgedAddEquipConfig(builder, equipConfig):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(equipConfig), 0)

def AddEquipConfig(builder, equipConfig):
    AirLoadPlan_AbridgedAddEquipConfig(builder, equipConfig)

def AirLoadPlan_AbridgedAddTankConfig(builder, tankConfig):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(tankConfig), 0)

def AddTankConfig(builder, tankConfig):
    AirLoadPlan_AbridgedAddTankConfig(builder, tankConfig)

def AirLoadPlan_AbridgedAddBasicWeight(builder, basicWeight):
    builder.PrependFloat64Slot(20, basicWeight, 0.0)

def AddBasicWeight(builder, basicWeight):
    AirLoadPlan_AbridgedAddBasicWeight(builder, basicWeight)

def AirLoadPlan_AbridgedAddBasicMoment(builder, basicMoment):
    builder.PrependFloat64Slot(21, basicMoment, 0.0)

def AddBasicMoment(builder, basicMoment):
    AirLoadPlan_AbridgedAddBasicMoment(builder, basicMoment)

def AirLoadPlan_AbridgedAddFuelWeight(builder, fuelWeight):
    builder.PrependFloat64Slot(22, fuelWeight, 0.0)

def AddFuelWeight(builder, fuelWeight):
    AirLoadPlan_AbridgedAddFuelWeight(builder, fuelWeight)

def AirLoadPlan_AbridgedAddFuelMoment(builder, fuelMoment):
    builder.PrependFloat64Slot(23, fuelMoment, 0.0)

def AddFuelMoment(builder, fuelMoment):
    AirLoadPlan_AbridgedAddFuelMoment(builder, fuelMoment)

def AirLoadPlan_AbridgedAddEstLandingFuelWeight(builder, estLandingFuelWeight):
    builder.PrependFloat64Slot(24, estLandingFuelWeight, 0.0)

def AddEstLandingFuelWeight(builder, estLandingFuelWeight):
    AirLoadPlan_AbridgedAddEstLandingFuelWeight(builder, estLandingFuelWeight)

def AirLoadPlan_AbridgedAddEstLandingFuelMoment(builder, estLandingFuelMoment):
    builder.PrependFloat64Slot(25, estLandingFuelMoment, 0.0)

def AddEstLandingFuelMoment(builder, estLandingFuelMoment):
    AirLoadPlan_AbridgedAddEstLandingFuelMoment(builder, estLandingFuelMoment)

def AirLoadPlan_AbridgedAddOperatingWeight(builder, operatingWeight):
    builder.PrependFloat64Slot(26, operatingWeight, 0.0)

def AddOperatingWeight(builder, operatingWeight):
    AirLoadPlan_AbridgedAddOperatingWeight(builder, operatingWeight)

def AirLoadPlan_AbridgedAddOperatingMoment(builder, operatingMoment):
    builder.PrependFloat64Slot(27, operatingMoment, 0.0)

def AddOperatingMoment(builder, operatingMoment):
    AirLoadPlan_AbridgedAddOperatingMoment(builder, operatingMoment)

def AirLoadPlan_AbridgedAddCargoWeight(builder, cargoWeight):
    builder.PrependFloat64Slot(28, cargoWeight, 0.0)

def AddCargoWeight(builder, cargoWeight):
    AirLoadPlan_AbridgedAddCargoWeight(builder, cargoWeight)

def AirLoadPlan_AbridgedAddCargoMoment(builder, cargoMoment):
    builder.PrependFloat64Slot(29, cargoMoment, 0.0)

def AddCargoMoment(builder, cargoMoment):
    AirLoadPlan_AbridgedAddCargoMoment(builder, cargoMoment)

def AirLoadPlan_AbridgedAddZeroFuelWeight(builder, zeroFuelWeight):
    builder.PrependFloat64Slot(30, zeroFuelWeight, 0.0)

def AddZeroFuelWeight(builder, zeroFuelWeight):
    AirLoadPlan_AbridgedAddZeroFuelWeight(builder, zeroFuelWeight)

def AirLoadPlan_AbridgedAddZeroFuelMoment(builder, zeroFuelMoment):
    builder.PrependFloat64Slot(31, zeroFuelMoment, 0.0)

def AddZeroFuelMoment(builder, zeroFuelMoment):
    AirLoadPlan_AbridgedAddZeroFuelMoment(builder, zeroFuelMoment)

def AirLoadPlan_AbridgedAddZeroFuelCg(builder, zeroFuelCg):
    builder.PrependFloat64Slot(32, zeroFuelCg, 0.0)

def AddZeroFuelCg(builder, zeroFuelCg):
    AirLoadPlan_AbridgedAddZeroFuelCg(builder, zeroFuelCg)

def AirLoadPlan_AbridgedAddGrossWeight(builder, grossWeight):
    builder.PrependFloat64Slot(33, grossWeight, 0.0)

def AddGrossWeight(builder, grossWeight):
    AirLoadPlan_AbridgedAddGrossWeight(builder, grossWeight)

def AirLoadPlan_AbridgedAddGrossMoment(builder, grossMoment):
    builder.PrependFloat64Slot(34, grossMoment, 0.0)

def AddGrossMoment(builder, grossMoment):
    AirLoadPlan_AbridgedAddGrossMoment(builder, grossMoment)

def AirLoadPlan_AbridgedAddGrossCg(builder, grossCg):
    builder.PrependFloat64Slot(35, grossCg, 0.0)

def AddGrossCg(builder, grossCg):
    AirLoadPlan_AbridgedAddGrossCg(builder, grossCg)

def AirLoadPlan_AbridgedAddLandingWeight(builder, landingWeight):
    builder.PrependFloat64Slot(36, landingWeight, 0.0)

def AddLandingWeight(builder, landingWeight):
    AirLoadPlan_AbridgedAddLandingWeight(builder, landingWeight)

def AirLoadPlan_AbridgedAddLandingMoment(builder, landingMoment):
    builder.PrependFloat64Slot(37, landingMoment, 0.0)

def AddLandingMoment(builder, landingMoment):
    AirLoadPlan_AbridgedAddLandingMoment(builder, landingMoment)

def AirLoadPlan_AbridgedAddLandingCg(builder, landingCg):
    builder.PrependFloat64Slot(38, landingCg, 0.0)

def AddLandingCg(builder, landingCg):
    AirLoadPlan_AbridgedAddLandingCg(builder, landingCg)

def AirLoadPlan_AbridgedAddCargoBayFsmin(builder, cargoBayFsmin):
    builder.PrependInt32Slot(39, cargoBayFsmin, 0)

def AddCargoBayFsmin(builder, cargoBayFsmin):
    AirLoadPlan_AbridgedAddCargoBayFsmin(builder, cargoBayFsmin)

def AirLoadPlan_AbridgedAddCargoBayFsmax(builder, cargoBayFsmax):
    builder.PrependInt32Slot(40, cargoBayFsmax, 0)

def AddCargoBayFsmax(builder, cargoBayFsmax):
    AirLoadPlan_AbridgedAddCargoBayFsmax(builder, cargoBayFsmax)

def AirLoadPlan_AbridgedAddCargoBayWidth(builder, cargoBayWidth):
    builder.PrependFloat64Slot(41, cargoBayWidth, 0.0)

def AddCargoBayWidth(builder, cargoBayWidth):
    AirLoadPlan_AbridgedAddCargoBayWidth(builder, cargoBayWidth)

def AirLoadPlan_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirLoadPlan_AbridgedAddCreatedAt(builder, createdAt)

def AirLoadPlan_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirLoadPlan_AbridgedAddCreatedBy(builder, createdBy)

def AirLoadPlan_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirLoadPlan_AbridgedAddSourceDl(builder, sourceDl)

def AirLoadPlan_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirLoadPlan_AbridgedAddSource(builder, source)

def AirLoadPlan_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirLoadPlan_AbridgedAddOrigin(builder, origin)

def AirLoadPlan_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirLoadPlan_AbridgedAddOrigNetwork(builder, origNetwork)

def AirLoadPlan_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(48, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirLoadPlan_AbridgedAddDataMode(builder, dataMode)

def AirLoadPlan_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirLoadPlan_AbridgedEnd(builder)


class AirLoadPlan_AbridgedT(object):

    # AirLoadPlan_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.externalId = None  # type: str
        self.idMission = None  # type: str
        self.missionNumber = None  # type: str
        self.idSortie = None  # type: str
        self.legNum = 0  # type: int
        self.callSign = None  # type: str
        self.tailNumber = None  # type: str
        self.aircraftMds = None  # type: str
        self.depIcao = None  # type: str
        self.depAirfield = None  # type: str
        self.estDepTime = None  # type: str
        self.arrIcao = None  # type: str
        self.arrAirfield = None  # type: str
        self.estArrTime = None  # type: str
        self.crewSize = 0  # type: int
        self.cargoConfig = None  # type: str
        self.equipConfig = None  # type: str
        self.tankConfig = None  # type: str
        self.basicWeight = 0.0  # type: float
        self.basicMoment = 0.0  # type: float
        self.fuelWeight = 0.0  # type: float
        self.fuelMoment = 0.0  # type: float
        self.estLandingFuelWeight = 0.0  # type: float
        self.estLandingFuelMoment = 0.0  # type: float
        self.operatingWeight = 0.0  # type: float
        self.operatingMoment = 0.0  # type: float
        self.cargoWeight = 0.0  # type: float
        self.cargoMoment = 0.0  # type: float
        self.zeroFuelWeight = 0.0  # type: float
        self.zeroFuelMoment = 0.0  # type: float
        self.zeroFuelCg = 0.0  # type: float
        self.grossWeight = 0.0  # type: float
        self.grossMoment = 0.0  # type: float
        self.grossCg = 0.0  # type: float
        self.landingWeight = 0.0  # type: float
        self.landingMoment = 0.0  # type: float
        self.landingCg = 0.0  # type: float
        self.cargoBayFsmin = 0  # type: int
        self.cargoBayFsmax = 0  # type: int
        self.cargoBayWidth = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airLoadPlanAbridged = AirLoadPlan_Abridged()
        airLoadPlanAbridged.Init(buf, pos)
        return cls.InitFromObj(airLoadPlanAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airLoadPlanAbridged):
        x = AirLoadPlan_AbridgedT()
        x._UnPack(airLoadPlanAbridged)
        return x

    # AirLoadPlan_AbridgedT
    def _UnPack(self, airLoadPlanAbridged):
        if airLoadPlanAbridged is None:
            return
        self.id = airLoadPlanAbridged.Id()
        self.classificationMarking = airLoadPlanAbridged.ClassificationMarking()
        self.externalId = airLoadPlanAbridged.ExternalId()
        self.idMission = airLoadPlanAbridged.IdMission()
        self.missionNumber = airLoadPlanAbridged.MissionNumber()
        self.idSortie = airLoadPlanAbridged.IdSortie()
        self.legNum = airLoadPlanAbridged.LegNum()
        self.callSign = airLoadPlanAbridged.CallSign()
        self.tailNumber = airLoadPlanAbridged.TailNumber()
        self.aircraftMds = airLoadPlanAbridged.AircraftMds()
        self.depIcao = airLoadPlanAbridged.DepIcao()
        self.depAirfield = airLoadPlanAbridged.DepAirfield()
        self.estDepTime = airLoadPlanAbridged.EstDepTime()
        self.arrIcao = airLoadPlanAbridged.ArrIcao()
        self.arrAirfield = airLoadPlanAbridged.ArrAirfield()
        self.estArrTime = airLoadPlanAbridged.EstArrTime()
        self.crewSize = airLoadPlanAbridged.CrewSize()
        self.cargoConfig = airLoadPlanAbridged.CargoConfig()
        self.equipConfig = airLoadPlanAbridged.EquipConfig()
        self.tankConfig = airLoadPlanAbridged.TankConfig()
        self.basicWeight = airLoadPlanAbridged.BasicWeight()
        self.basicMoment = airLoadPlanAbridged.BasicMoment()
        self.fuelWeight = airLoadPlanAbridged.FuelWeight()
        self.fuelMoment = airLoadPlanAbridged.FuelMoment()
        self.estLandingFuelWeight = airLoadPlanAbridged.EstLandingFuelWeight()
        self.estLandingFuelMoment = airLoadPlanAbridged.EstLandingFuelMoment()
        self.operatingWeight = airLoadPlanAbridged.OperatingWeight()
        self.operatingMoment = airLoadPlanAbridged.OperatingMoment()
        self.cargoWeight = airLoadPlanAbridged.CargoWeight()
        self.cargoMoment = airLoadPlanAbridged.CargoMoment()
        self.zeroFuelWeight = airLoadPlanAbridged.ZeroFuelWeight()
        self.zeroFuelMoment = airLoadPlanAbridged.ZeroFuelMoment()
        self.zeroFuelCg = airLoadPlanAbridged.ZeroFuelCg()
        self.grossWeight = airLoadPlanAbridged.GrossWeight()
        self.grossMoment = airLoadPlanAbridged.GrossMoment()
        self.grossCg = airLoadPlanAbridged.GrossCg()
        self.landingWeight = airLoadPlanAbridged.LandingWeight()
        self.landingMoment = airLoadPlanAbridged.LandingMoment()
        self.landingCg = airLoadPlanAbridged.LandingCg()
        self.cargoBayFsmin = airLoadPlanAbridged.CargoBayFsmin()
        self.cargoBayFsmax = airLoadPlanAbridged.CargoBayFsmax()
        self.cargoBayWidth = airLoadPlanAbridged.CargoBayWidth()
        self.createdAt = airLoadPlanAbridged.CreatedAt()
        self.createdBy = airLoadPlanAbridged.CreatedBy()
        self.sourceDl = airLoadPlanAbridged.SourceDl()
        self.source = airLoadPlanAbridged.Source()
        self.origin = airLoadPlanAbridged.Origin()
        self.origNetwork = airLoadPlanAbridged.OrigNetwork()
        self.dataMode = airLoadPlanAbridged.DataMode()

    # AirLoadPlan_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.idMission is not None:
            idMission = builder.CreateString(self.idMission)
        if self.missionNumber is not None:
            missionNumber = builder.CreateString(self.missionNumber)
        if self.idSortie is not None:
            idSortie = builder.CreateString(self.idSortie)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.tailNumber is not None:
            tailNumber = builder.CreateString(self.tailNumber)
        if self.aircraftMds is not None:
            aircraftMds = builder.CreateString(self.aircraftMds)
        if self.depIcao is not None:
            depIcao = builder.CreateString(self.depIcao)
        if self.depAirfield is not None:
            depAirfield = builder.CreateString(self.depAirfield)
        if self.estDepTime is not None:
            estDepTime = builder.CreateString(self.estDepTime)
        if self.arrIcao is not None:
            arrIcao = builder.CreateString(self.arrIcao)
        if self.arrAirfield is not None:
            arrAirfield = builder.CreateString(self.arrAirfield)
        if self.estArrTime is not None:
            estArrTime = builder.CreateString(self.estArrTime)
        if self.cargoConfig is not None:
            cargoConfig = builder.CreateString(self.cargoConfig)
        if self.equipConfig is not None:
            equipConfig = builder.CreateString(self.equipConfig)
        if self.tankConfig is not None:
            tankConfig = builder.CreateString(self.tankConfig)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirLoadPlan_AbridgedStart(builder)
        if self.id is not None:
            AirLoadPlan_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AirLoadPlan_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.externalId is not None:
            AirLoadPlan_AbridgedAddExternalId(builder, externalId)
        if self.idMission is not None:
            AirLoadPlan_AbridgedAddIdMission(builder, idMission)
        if self.missionNumber is not None:
            AirLoadPlan_AbridgedAddMissionNumber(builder, missionNumber)
        if self.idSortie is not None:
            AirLoadPlan_AbridgedAddIdSortie(builder, idSortie)
        AirLoadPlan_AbridgedAddLegNum(builder, self.legNum)
        if self.callSign is not None:
            AirLoadPlan_AbridgedAddCallSign(builder, callSign)
        if self.tailNumber is not None:
            AirLoadPlan_AbridgedAddTailNumber(builder, tailNumber)
        if self.aircraftMds is not None:
            AirLoadPlan_AbridgedAddAircraftMds(builder, aircraftMds)
        if self.depIcao is not None:
            AirLoadPlan_AbridgedAddDepIcao(builder, depIcao)
        if self.depAirfield is not None:
            AirLoadPlan_AbridgedAddDepAirfield(builder, depAirfield)
        if self.estDepTime is not None:
            AirLoadPlan_AbridgedAddEstDepTime(builder, estDepTime)
        if self.arrIcao is not None:
            AirLoadPlan_AbridgedAddArrIcao(builder, arrIcao)
        if self.arrAirfield is not None:
            AirLoadPlan_AbridgedAddArrAirfield(builder, arrAirfield)
        if self.estArrTime is not None:
            AirLoadPlan_AbridgedAddEstArrTime(builder, estArrTime)
        AirLoadPlan_AbridgedAddCrewSize(builder, self.crewSize)
        if self.cargoConfig is not None:
            AirLoadPlan_AbridgedAddCargoConfig(builder, cargoConfig)
        if self.equipConfig is not None:
            AirLoadPlan_AbridgedAddEquipConfig(builder, equipConfig)
        if self.tankConfig is not None:
            AirLoadPlan_AbridgedAddTankConfig(builder, tankConfig)
        AirLoadPlan_AbridgedAddBasicWeight(builder, self.basicWeight)
        AirLoadPlan_AbridgedAddBasicMoment(builder, self.basicMoment)
        AirLoadPlan_AbridgedAddFuelWeight(builder, self.fuelWeight)
        AirLoadPlan_AbridgedAddFuelMoment(builder, self.fuelMoment)
        AirLoadPlan_AbridgedAddEstLandingFuelWeight(builder, self.estLandingFuelWeight)
        AirLoadPlan_AbridgedAddEstLandingFuelMoment(builder, self.estLandingFuelMoment)
        AirLoadPlan_AbridgedAddOperatingWeight(builder, self.operatingWeight)
        AirLoadPlan_AbridgedAddOperatingMoment(builder, self.operatingMoment)
        AirLoadPlan_AbridgedAddCargoWeight(builder, self.cargoWeight)
        AirLoadPlan_AbridgedAddCargoMoment(builder, self.cargoMoment)
        AirLoadPlan_AbridgedAddZeroFuelWeight(builder, self.zeroFuelWeight)
        AirLoadPlan_AbridgedAddZeroFuelMoment(builder, self.zeroFuelMoment)
        AirLoadPlan_AbridgedAddZeroFuelCg(builder, self.zeroFuelCg)
        AirLoadPlan_AbridgedAddGrossWeight(builder, self.grossWeight)
        AirLoadPlan_AbridgedAddGrossMoment(builder, self.grossMoment)
        AirLoadPlan_AbridgedAddGrossCg(builder, self.grossCg)
        AirLoadPlan_AbridgedAddLandingWeight(builder, self.landingWeight)
        AirLoadPlan_AbridgedAddLandingMoment(builder, self.landingMoment)
        AirLoadPlan_AbridgedAddLandingCg(builder, self.landingCg)
        AirLoadPlan_AbridgedAddCargoBayFsmin(builder, self.cargoBayFsmin)
        AirLoadPlan_AbridgedAddCargoBayFsmax(builder, self.cargoBayFsmax)
        AirLoadPlan_AbridgedAddCargoBayWidth(builder, self.cargoBayWidth)
        if self.createdAt is not None:
            AirLoadPlan_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirLoadPlan_AbridgedAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            AirLoadPlan_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirLoadPlan_AbridgedAddSource(builder, source)
        if self.origin is not None:
            AirLoadPlan_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirLoadPlan_AbridgedAddOrigNetwork(builder, origNetwork)
        AirLoadPlan_AbridgedAddDataMode(builder, self.dataMode)
        airLoadPlanAbridged = AirLoadPlan_AbridgedEnd(builder)
        return airLoadPlanAbridged
