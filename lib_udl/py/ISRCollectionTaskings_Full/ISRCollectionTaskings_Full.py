# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Individual taskings to complete the mission.
class ISRCollectionTaskings_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionTaskings_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionTaskings_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionTaskings_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionTaskings_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tasking Unique Identifier.
    # Example: /// Example: ISRCOLLECTIONTASKINGS-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ISRCollectionTaskings_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of tasking.
    # Example: /// Example: Deliberate
    # Constraints: Minimum length = 1, Maximum length = 16
    # ISRCollectionTaskings_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Type of collection tasked.
    # Example: /// Example: Simultaneous
    # Constraints: Minimum length = 1, Maximum length = 16
    # ISRCollectionTaskings_Full
    def CollectionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Human readable definition of this taskings Area Of Responsibility.
    # Example: /// Example: Kandahar
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingAor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Eight line.
    # Example: /// Example: No example provided.
    # Constraints: Minimum length = 0, Maximum length = 256
    # ISRCollectionTaskings_Full
    def EightLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Primary type of intelligence to be collected during the mission.
    # Example: /// Example: Sig
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingPrimaryIntelDiscipline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sub category of primary intelligence to be collected.
    # Example: /// Example: FMV
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingPrimarySubCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of tasking intelligence to be collected second.
    # Example: /// Example: Intelligence_2
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingSecondaryIntelDiscipline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission sub category for secondary intelligence discipline to be collected.
    # Example: /// Example: Convoy
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingSecondarySubCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # What is the primary objective(Role) of this task.
    # Example: /// Example: Provide Targeting of Lead Vehicle
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tasking operation name.
    # Example: /// Example: OP-HONEY-BADGER
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingOperation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tasking Priority (1-n).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def TaskingPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Military Base to transmit the dissemination of this data.
    # Example: /// Example: ENVOYS
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingSupportedUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tasking emphasis.
    # Example: /// Example: EMPHASIS
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingEmphasis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of retasking, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def TaskingRetaskTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def TaskingStartPointLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def TaskingStartPointLong(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Tasking geographical collection area.
    # Example: /// Example: AREA
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def TaskingCollectionArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Joint Operations Area.
    # Example: /// Example: AREA
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingJoa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A synchronization matrix is used to organize the logistics synchronization process during a mission.
    # Example: /// Example: MATRIX
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingSyncMatrixBin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
    # Example: /// Example: CODE
    # Constraints: Minimum length = 0, Maximum length = 4
    # ISRCollectionTaskings_Full
    def TaskingCountry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Region of the tasking.
    # Example: /// Example: REGION
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingRegion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subregion of the tasking.
    # Example: /// Example: SUBREGION
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def TaskingSubRegion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Value of the Sensitive Reconnaissance Operations Track.
    # Example: /// Example: SRO
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTaskings_Full
    def SroTrack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Free text field for the user to specify special instructions needed for this collection.
    # Example: /// Example: TEXT
    # Constraints: Minimum length = 0, Maximum length = 256
    # ISRCollectionTaskings_Full
    def SpecialComGuidance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def CollectionPeriods(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tasking desired collection requirements.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionTaskings_Full
    def TaskingCollectionRequirements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollectionTaskings_Full
    def TaskingCollectionRequirementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollectionTaskings_Full
    def TaskingCollectionRequirementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

def ISRCollectionTaskings_FullStart(builder):
    builder.StartObject(27)

def Start(builder):
    ISRCollectionTaskings_FullStart(builder)

def ISRCollectionTaskings_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ISRCollectionTaskings_FullAddId(builder, id)

def ISRCollectionTaskings_FullAddType(builder, type):
    builder.PrependInt8Slot(1, type, 0)

def AddType(builder, type):
    ISRCollectionTaskings_FullAddType(builder, type)

def ISRCollectionTaskings_FullAddCollectionType(builder, collectionType):
    builder.PrependInt8Slot(2, collectionType, 0)

def AddCollectionType(builder, collectionType):
    ISRCollectionTaskings_FullAddCollectionType(builder, collectionType)

def ISRCollectionTaskings_FullAddTaskingAor(builder, taskingAor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(taskingAor), 0)

def AddTaskingAor(builder, taskingAor):
    ISRCollectionTaskings_FullAddTaskingAor(builder, taskingAor)

def ISRCollectionTaskings_FullAddEightLine(builder, eightLine):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(eightLine), 0)

def AddEightLine(builder, eightLine):
    ISRCollectionTaskings_FullAddEightLine(builder, eightLine)

def ISRCollectionTaskings_FullAddTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDiscipline):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(taskingPrimaryIntelDiscipline), 0)

def AddTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDiscipline):
    ISRCollectionTaskings_FullAddTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDiscipline)

def ISRCollectionTaskings_FullAddTaskingPrimarySubCategory(builder, taskingPrimarySubCategory):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(taskingPrimarySubCategory), 0)

def AddTaskingPrimarySubCategory(builder, taskingPrimarySubCategory):
    ISRCollectionTaskings_FullAddTaskingPrimarySubCategory(builder, taskingPrimarySubCategory)

def ISRCollectionTaskings_FullAddTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDiscipline):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskingSecondaryIntelDiscipline), 0)

def AddTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDiscipline):
    ISRCollectionTaskings_FullAddTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDiscipline)

def ISRCollectionTaskings_FullAddTaskingSecondarySubCategory(builder, taskingSecondarySubCategory):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(taskingSecondarySubCategory), 0)

def AddTaskingSecondarySubCategory(builder, taskingSecondarySubCategory):
    ISRCollectionTaskings_FullAddTaskingSecondarySubCategory(builder, taskingSecondarySubCategory)

def ISRCollectionTaskings_FullAddTaskingRole(builder, taskingRole):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(taskingRole), 0)

def AddTaskingRole(builder, taskingRole):
    ISRCollectionTaskings_FullAddTaskingRole(builder, taskingRole)

def ISRCollectionTaskings_FullAddTaskingOperation(builder, taskingOperation):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(taskingOperation), 0)

def AddTaskingOperation(builder, taskingOperation):
    ISRCollectionTaskings_FullAddTaskingOperation(builder, taskingOperation)

def ISRCollectionTaskings_FullAddTaskingPriority(builder, taskingPriority):
    builder.PrependFloat64Slot(11, taskingPriority, 0.0)

def AddTaskingPriority(builder, taskingPriority):
    ISRCollectionTaskings_FullAddTaskingPriority(builder, taskingPriority)

def ISRCollectionTaskings_FullAddTaskingSupportedUnit(builder, taskingSupportedUnit):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(taskingSupportedUnit), 0)

def AddTaskingSupportedUnit(builder, taskingSupportedUnit):
    ISRCollectionTaskings_FullAddTaskingSupportedUnit(builder, taskingSupportedUnit)

def ISRCollectionTaskings_FullAddTaskingEmphasis(builder, taskingEmphasis):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(taskingEmphasis), 0)

def AddTaskingEmphasis(builder, taskingEmphasis):
    ISRCollectionTaskings_FullAddTaskingEmphasis(builder, taskingEmphasis)

def ISRCollectionTaskings_FullAddTaskingRetaskTime(builder, taskingRetaskTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(taskingRetaskTime), 0)

def AddTaskingRetaskTime(builder, taskingRetaskTime):
    ISRCollectionTaskings_FullAddTaskingRetaskTime(builder, taskingRetaskTime)

def ISRCollectionTaskings_FullAddTaskingStartPointLat(builder, taskingStartPointLat):
    builder.PrependFloat64Slot(15, taskingStartPointLat, 0.0)

def AddTaskingStartPointLat(builder, taskingStartPointLat):
    ISRCollectionTaskings_FullAddTaskingStartPointLat(builder, taskingStartPointLat)

def ISRCollectionTaskings_FullAddTaskingStartPointLong(builder, taskingStartPointLong):
    builder.PrependFloat64Slot(16, taskingStartPointLong, 0.0)

def AddTaskingStartPointLong(builder, taskingStartPointLong):
    ISRCollectionTaskings_FullAddTaskingStartPointLong(builder, taskingStartPointLong)

def ISRCollectionTaskings_FullAddTaskingCollectionArea(builder, taskingCollectionArea):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(taskingCollectionArea), 0)

def AddTaskingCollectionArea(builder, taskingCollectionArea):
    ISRCollectionTaskings_FullAddTaskingCollectionArea(builder, taskingCollectionArea)

def ISRCollectionTaskings_FullAddTaskingJoa(builder, taskingJoa):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(taskingJoa), 0)

def AddTaskingJoa(builder, taskingJoa):
    ISRCollectionTaskings_FullAddTaskingJoa(builder, taskingJoa)

def ISRCollectionTaskings_FullAddTaskingSyncMatrixBin(builder, taskingSyncMatrixBin):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(taskingSyncMatrixBin), 0)

def AddTaskingSyncMatrixBin(builder, taskingSyncMatrixBin):
    ISRCollectionTaskings_FullAddTaskingSyncMatrixBin(builder, taskingSyncMatrixBin)

def ISRCollectionTaskings_FullAddTaskingCountry(builder, taskingCountry):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(taskingCountry), 0)

def AddTaskingCountry(builder, taskingCountry):
    ISRCollectionTaskings_FullAddTaskingCountry(builder, taskingCountry)

def ISRCollectionTaskings_FullAddTaskingRegion(builder, taskingRegion):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(taskingRegion), 0)

def AddTaskingRegion(builder, taskingRegion):
    ISRCollectionTaskings_FullAddTaskingRegion(builder, taskingRegion)

def ISRCollectionTaskings_FullAddTaskingSubRegion(builder, taskingSubRegion):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(taskingSubRegion), 0)

def AddTaskingSubRegion(builder, taskingSubRegion):
    ISRCollectionTaskings_FullAddTaskingSubRegion(builder, taskingSubRegion)

def ISRCollectionTaskings_FullAddSroTrack(builder, sroTrack):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(sroTrack), 0)

def AddSroTrack(builder, sroTrack):
    ISRCollectionTaskings_FullAddSroTrack(builder, sroTrack)

def ISRCollectionTaskings_FullAddSpecialComGuidance(builder, specialComGuidance):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(specialComGuidance), 0)

def AddSpecialComGuidance(builder, specialComGuidance):
    ISRCollectionTaskings_FullAddSpecialComGuidance(builder, specialComGuidance)

def ISRCollectionTaskings_FullAddCollectionPeriods(builder, collectionPeriods):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(collectionPeriods), 0)

def AddCollectionPeriods(builder, collectionPeriods):
    ISRCollectionTaskings_FullAddCollectionPeriods(builder, collectionPeriods)

def ISRCollectionTaskings_FullAddTaskingCollectionRequirements(builder, taskingCollectionRequirements):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(taskingCollectionRequirements), 0)

def AddTaskingCollectionRequirements(builder, taskingCollectionRequirements):
    ISRCollectionTaskings_FullAddTaskingCollectionRequirements(builder, taskingCollectionRequirements)

def ISRCollectionTaskings_FullStartTaskingCollectionRequirementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTaskingCollectionRequirementsVector(builder, numElems):
    return ISRCollectionTaskings_FullStartTaskingCollectionRequirementsVector(builder, numElems)

def ISRCollectionTaskings_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionTaskings_FullEnd(builder)

try:
    from typing import List
except:
    pass

class ISRCollectionTaskings_FullT(object):

    # ISRCollectionTaskings_FullT
    def __init__(self):
        self.id = None  # type: str
        self.type = 0  # type: int
        self.collectionType = 0  # type: int
        self.taskingAor = None  # type: str
        self.eightLine = None  # type: str
        self.taskingPrimaryIntelDiscipline = None  # type: str
        self.taskingPrimarySubCategory = None  # type: str
        self.taskingSecondaryIntelDiscipline = None  # type: str
        self.taskingSecondarySubCategory = None  # type: str
        self.taskingRole = None  # type: str
        self.taskingOperation = None  # type: str
        self.taskingPriority = 0.0  # type: float
        self.taskingSupportedUnit = None  # type: str
        self.taskingEmphasis = None  # type: str
        self.taskingRetaskTime = None  # type: str
        self.taskingStartPointLat = 0.0  # type: float
        self.taskingStartPointLong = 0.0  # type: float
        self.taskingCollectionArea = None  # type: str
        self.taskingJoa = None  # type: str
        self.taskingSyncMatrixBin = None  # type: str
        self.taskingCountry = None  # type: str
        self.taskingRegion = None  # type: str
        self.taskingSubRegion = None  # type: str
        self.sroTrack = None  # type: str
        self.specialComGuidance = None  # type: str
        self.collectionPeriods = None  # type: str
        self.taskingCollectionRequirements = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionTaskingsFull = ISRCollectionTaskings_Full()
        isrcollectionTaskingsFull.Init(buf, pos)
        return cls.InitFromObj(isrcollectionTaskingsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionTaskingsFull):
        x = ISRCollectionTaskings_FullT()
        x._UnPack(isrcollectionTaskingsFull)
        return x

    # ISRCollectionTaskings_FullT
    def _UnPack(self, isrcollectionTaskingsFull):
        if isrcollectionTaskingsFull is None:
            return
        self.id = isrcollectionTaskingsFull.Id()
        self.type = isrcollectionTaskingsFull.Type()
        self.collectionType = isrcollectionTaskingsFull.CollectionType()
        self.taskingAor = isrcollectionTaskingsFull.TaskingAor()
        self.eightLine = isrcollectionTaskingsFull.EightLine()
        self.taskingPrimaryIntelDiscipline = isrcollectionTaskingsFull.TaskingPrimaryIntelDiscipline()
        self.taskingPrimarySubCategory = isrcollectionTaskingsFull.TaskingPrimarySubCategory()
        self.taskingSecondaryIntelDiscipline = isrcollectionTaskingsFull.TaskingSecondaryIntelDiscipline()
        self.taskingSecondarySubCategory = isrcollectionTaskingsFull.TaskingSecondarySubCategory()
        self.taskingRole = isrcollectionTaskingsFull.TaskingRole()
        self.taskingOperation = isrcollectionTaskingsFull.TaskingOperation()
        self.taskingPriority = isrcollectionTaskingsFull.TaskingPriority()
        self.taskingSupportedUnit = isrcollectionTaskingsFull.TaskingSupportedUnit()
        self.taskingEmphasis = isrcollectionTaskingsFull.TaskingEmphasis()
        self.taskingRetaskTime = isrcollectionTaskingsFull.TaskingRetaskTime()
        self.taskingStartPointLat = isrcollectionTaskingsFull.TaskingStartPointLat()
        self.taskingStartPointLong = isrcollectionTaskingsFull.TaskingStartPointLong()
        self.taskingCollectionArea = isrcollectionTaskingsFull.TaskingCollectionArea()
        self.taskingJoa = isrcollectionTaskingsFull.TaskingJoa()
        self.taskingSyncMatrixBin = isrcollectionTaskingsFull.TaskingSyncMatrixBin()
        self.taskingCountry = isrcollectionTaskingsFull.TaskingCountry()
        self.taskingRegion = isrcollectionTaskingsFull.TaskingRegion()
        self.taskingSubRegion = isrcollectionTaskingsFull.TaskingSubRegion()
        self.sroTrack = isrcollectionTaskingsFull.SroTrack()
        self.specialComGuidance = isrcollectionTaskingsFull.SpecialComGuidance()
        self.collectionPeriods = isrcollectionTaskingsFull.CollectionPeriods()
        if not isrcollectionTaskingsFull.TaskingCollectionRequirementsIsNone():
            self.taskingCollectionRequirements = []
            for i in range(isrcollectionTaskingsFull.TaskingCollectionRequirementsLength()):
                self.taskingCollectionRequirements.append(isrcollectionTaskingsFull.TaskingCollectionRequirements(i))

    # ISRCollectionTaskings_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.taskingAor is not None:
            taskingAor = builder.CreateString(self.taskingAor)
        if self.eightLine is not None:
            eightLine = builder.CreateString(self.eightLine)
        if self.taskingPrimaryIntelDiscipline is not None:
            taskingPrimaryIntelDiscipline = builder.CreateString(self.taskingPrimaryIntelDiscipline)
        if self.taskingPrimarySubCategory is not None:
            taskingPrimarySubCategory = builder.CreateString(self.taskingPrimarySubCategory)
        if self.taskingSecondaryIntelDiscipline is not None:
            taskingSecondaryIntelDiscipline = builder.CreateString(self.taskingSecondaryIntelDiscipline)
        if self.taskingSecondarySubCategory is not None:
            taskingSecondarySubCategory = builder.CreateString(self.taskingSecondarySubCategory)
        if self.taskingRole is not None:
            taskingRole = builder.CreateString(self.taskingRole)
        if self.taskingOperation is not None:
            taskingOperation = builder.CreateString(self.taskingOperation)
        if self.taskingSupportedUnit is not None:
            taskingSupportedUnit = builder.CreateString(self.taskingSupportedUnit)
        if self.taskingEmphasis is not None:
            taskingEmphasis = builder.CreateString(self.taskingEmphasis)
        if self.taskingRetaskTime is not None:
            taskingRetaskTime = builder.CreateString(self.taskingRetaskTime)
        if self.taskingCollectionArea is not None:
            taskingCollectionArea = builder.CreateString(self.taskingCollectionArea)
        if self.taskingJoa is not None:
            taskingJoa = builder.CreateString(self.taskingJoa)
        if self.taskingSyncMatrixBin is not None:
            taskingSyncMatrixBin = builder.CreateString(self.taskingSyncMatrixBin)
        if self.taskingCountry is not None:
            taskingCountry = builder.CreateString(self.taskingCountry)
        if self.taskingRegion is not None:
            taskingRegion = builder.CreateString(self.taskingRegion)
        if self.taskingSubRegion is not None:
            taskingSubRegion = builder.CreateString(self.taskingSubRegion)
        if self.sroTrack is not None:
            sroTrack = builder.CreateString(self.sroTrack)
        if self.specialComGuidance is not None:
            specialComGuidance = builder.CreateString(self.specialComGuidance)
        if self.collectionPeriods is not None:
            collectionPeriods = builder.CreateString(self.collectionPeriods)
        if self.taskingCollectionRequirements is not None:
            taskingCollectionRequirementslist = []
            for i in range(len(self.taskingCollectionRequirements)):
                taskingCollectionRequirementslist.append(builder.CreateString(self.taskingCollectionRequirements[i]))
            ISRCollectionTaskings_FullStartTaskingCollectionRequirementsVector(builder, len(self.taskingCollectionRequirements))
            for i in reversed(range(len(self.taskingCollectionRequirements))):
                builder.PrependUOffsetTRelative(taskingCollectionRequirementslist[i])
            taskingCollectionRequirements = builder.EndVector()
        ISRCollectionTaskings_FullStart(builder)
        if self.id is not None:
            ISRCollectionTaskings_FullAddId(builder, id)
        ISRCollectionTaskings_FullAddType(builder, self.type)
        ISRCollectionTaskings_FullAddCollectionType(builder, self.collectionType)
        if self.taskingAor is not None:
            ISRCollectionTaskings_FullAddTaskingAor(builder, taskingAor)
        if self.eightLine is not None:
            ISRCollectionTaskings_FullAddEightLine(builder, eightLine)
        if self.taskingPrimaryIntelDiscipline is not None:
            ISRCollectionTaskings_FullAddTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDiscipline)
        if self.taskingPrimarySubCategory is not None:
            ISRCollectionTaskings_FullAddTaskingPrimarySubCategory(builder, taskingPrimarySubCategory)
        if self.taskingSecondaryIntelDiscipline is not None:
            ISRCollectionTaskings_FullAddTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDiscipline)
        if self.taskingSecondarySubCategory is not None:
            ISRCollectionTaskings_FullAddTaskingSecondarySubCategory(builder, taskingSecondarySubCategory)
        if self.taskingRole is not None:
            ISRCollectionTaskings_FullAddTaskingRole(builder, taskingRole)
        if self.taskingOperation is not None:
            ISRCollectionTaskings_FullAddTaskingOperation(builder, taskingOperation)
        ISRCollectionTaskings_FullAddTaskingPriority(builder, self.taskingPriority)
        if self.taskingSupportedUnit is not None:
            ISRCollectionTaskings_FullAddTaskingSupportedUnit(builder, taskingSupportedUnit)
        if self.taskingEmphasis is not None:
            ISRCollectionTaskings_FullAddTaskingEmphasis(builder, taskingEmphasis)
        if self.taskingRetaskTime is not None:
            ISRCollectionTaskings_FullAddTaskingRetaskTime(builder, taskingRetaskTime)
        ISRCollectionTaskings_FullAddTaskingStartPointLat(builder, self.taskingStartPointLat)
        ISRCollectionTaskings_FullAddTaskingStartPointLong(builder, self.taskingStartPointLong)
        if self.taskingCollectionArea is not None:
            ISRCollectionTaskings_FullAddTaskingCollectionArea(builder, taskingCollectionArea)
        if self.taskingJoa is not None:
            ISRCollectionTaskings_FullAddTaskingJoa(builder, taskingJoa)
        if self.taskingSyncMatrixBin is not None:
            ISRCollectionTaskings_FullAddTaskingSyncMatrixBin(builder, taskingSyncMatrixBin)
        if self.taskingCountry is not None:
            ISRCollectionTaskings_FullAddTaskingCountry(builder, taskingCountry)
        if self.taskingRegion is not None:
            ISRCollectionTaskings_FullAddTaskingRegion(builder, taskingRegion)
        if self.taskingSubRegion is not None:
            ISRCollectionTaskings_FullAddTaskingSubRegion(builder, taskingSubRegion)
        if self.sroTrack is not None:
            ISRCollectionTaskings_FullAddSroTrack(builder, sroTrack)
        if self.specialComGuidance is not None:
            ISRCollectionTaskings_FullAddSpecialComGuidance(builder, specialComGuidance)
        if self.collectionPeriods is not None:
            ISRCollectionTaskings_FullAddCollectionPeriods(builder, collectionPeriods)
        if self.taskingCollectionRequirements is not None:
            ISRCollectionTaskings_FullAddTaskingCollectionRequirements(builder, taskingCollectionRequirements)
        isrcollectionTaskingsFull = ISRCollectionTaskings_FullEnd(builder)
        return isrcollectionTaskingsFull
