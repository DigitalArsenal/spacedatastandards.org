# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model object representing on-orbit objects or satellites in the system.
class Onorbit_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Onorbit_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbit_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Onorbit_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # Onorbit_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Onorbit_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Onorbit_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Onorbit_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Common name of the on-orbit object.
    # Example: /// Example: Example common name
    # Constraints: Minimum length = 0, Maximum length = 128
    # Onorbit_Abridged
    def CommonName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Constellation to which this satellite belongs.
    # Example: /// Example: Big Dipper
    # Constraints: Minimum length = 0, Maximum length = 128
    # Onorbit_Abridged
    def Constellation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
    # Example: /// Example: 2021123ABC
    # Constraints: Minimum length = 0, Maximum length = 45
    # Onorbit_Abridged
    def IntlDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date of launch.
    # Example: /// Example: 2018-01-01
    # Constraints: No constraints specified.
    # Onorbit_Abridged
    def LaunchDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date of decay.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Onorbit_Abridged
    def DecayDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
    # Example: /// Example: PAYLOAD
    # Constraints: Minimum length = 0, Maximum length = 32
    # Onorbit_Abridged
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Onorbit_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission number of the on-orbit object.
    # Example: /// Example: Expedition 1
    # Constraints: Minimum length = 0, Maximum length = 128
    # Onorbit_Abridged
    def MissionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
    # Example: /// Example: Lunar
    # Constraints: Minimum length = 0, Maximum length = 45
    # Onorbit_Abridged
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Estimated lifetime of the on-orbit payload, if known.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # Onorbit_Abridged
    def LifetimeYears(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Alternate name of the on-orbit object.
    # Example: /// Example: Alternate Name
    # Constraints: Minimum length = 0, Maximum length = 64
    # Onorbit_Abridged
    def AltName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Onorbit_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Onorbit_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Onorbit_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Onorbit_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Id of the associated launchSite entity.
    # Example: /// Example: LAUNCHSITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Onorbit_Abridged
    def LaunchSiteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: No constraints specified.
    # Onorbit_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Onorbit_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Onorbit_AbridgedStart(builder):
    builder.StartObject(21)

def Start(builder):
    Onorbit_AbridgedStart(builder)

def Onorbit_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    Onorbit_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def Onorbit_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Onorbit_AbridgedAddClassificationMarking(builder, classificationMarking)

def Onorbit_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(2, satNo, 0)

def AddSatNo(builder, satNo):
    Onorbit_AbridgedAddSatNo(builder, satNo)

def Onorbit_AbridgedAddCommonName(builder, commonName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(commonName), 0)

def AddCommonName(builder, commonName):
    Onorbit_AbridgedAddCommonName(builder, commonName)

def Onorbit_AbridgedAddConstellation(builder, constellation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(constellation), 0)

def AddConstellation(builder, constellation):
    Onorbit_AbridgedAddConstellation(builder, constellation)

def Onorbit_AbridgedAddIntlDes(builder, intlDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(intlDes), 0)

def AddIntlDes(builder, intlDes):
    Onorbit_AbridgedAddIntlDes(builder, intlDes)

def Onorbit_AbridgedAddLaunchDate(builder, launchDate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(launchDate), 0)

def AddLaunchDate(builder, launchDate):
    Onorbit_AbridgedAddLaunchDate(builder, launchDate)

def Onorbit_AbridgedAddDecayDate(builder, decayDate):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decayDate), 0)

def AddDecayDate(builder, decayDate):
    Onorbit_AbridgedAddDecayDate(builder, decayDate)

def Onorbit_AbridgedAddObjectType(builder, objectType):
    builder.PrependInt8Slot(8, objectType, 0)

def AddObjectType(builder, objectType):
    Onorbit_AbridgedAddObjectType(builder, objectType)

def Onorbit_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Onorbit_AbridgedAddOrigin(builder, origin)

def Onorbit_AbridgedAddMissionNumber(builder, missionNumber):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(missionNumber), 0)

def AddMissionNumber(builder, missionNumber):
    Onorbit_AbridgedAddMissionNumber(builder, missionNumber)

def Onorbit_AbridgedAddCategory(builder, category):
    builder.PrependInt8Slot(11, category, 0)

def AddCategory(builder, category):
    Onorbit_AbridgedAddCategory(builder, category)

def Onorbit_AbridgedAddLifetimeYears(builder, lifetimeYears):
    builder.PrependInt32Slot(12, lifetimeYears, 0)

def AddLifetimeYears(builder, lifetimeYears):
    Onorbit_AbridgedAddLifetimeYears(builder, lifetimeYears)

def Onorbit_AbridgedAddAltName(builder, altName):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(altName), 0)

def AddAltName(builder, altName):
    Onorbit_AbridgedAddAltName(builder, altName)

def Onorbit_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Onorbit_AbridgedAddCreatedAt(builder, createdAt)

def Onorbit_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Onorbit_AbridgedAddCreatedBy(builder, createdBy)

def Onorbit_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Onorbit_AbridgedAddSource(builder, source)

def Onorbit_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    Onorbit_AbridgedAddDataMode(builder, dataMode)

def Onorbit_AbridgedAddLaunchSiteId(builder, launchSiteId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(launchSiteId), 0)

def AddLaunchSiteId(builder, launchSiteId):
    Onorbit_AbridgedAddLaunchSiteId(builder, launchSiteId)

def Onorbit_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Onorbit_AbridgedAddCountryCode(builder, countryCode)

def Onorbit_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Onorbit_AbridgedAddOrigNetwork(builder, origNetwork)

def Onorbit_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Onorbit_AbridgedEnd(builder)


class Onorbit_AbridgedT(object):

    # Onorbit_AbridgedT
    def __init__(self):
        self.idOnOrbit = None  # type: str
        self.classificationMarking = None  # type: str
        self.satNo = 0  # type: int
        self.commonName = None  # type: str
        self.constellation = None  # type: str
        self.intlDes = None  # type: str
        self.launchDate = None  # type: str
        self.decayDate = None  # type: str
        self.objectType = 0  # type: int
        self.origin = None  # type: str
        self.missionNumber = None  # type: str
        self.category = 0  # type: int
        self.lifetimeYears = 0  # type: int
        self.altName = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.launchSiteId = None  # type: str
        self.countryCode = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitAbridged = Onorbit_Abridged()
        onorbitAbridged.Init(buf, pos)
        return cls.InitFromObj(onorbitAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitAbridged):
        x = Onorbit_AbridgedT()
        x._UnPack(onorbitAbridged)
        return x

    # Onorbit_AbridgedT
    def _UnPack(self, onorbitAbridged):
        if onorbitAbridged is None:
            return
        self.idOnOrbit = onorbitAbridged.IdOnOrbit()
        self.classificationMarking = onorbitAbridged.ClassificationMarking()
        self.satNo = onorbitAbridged.SatNo()
        self.commonName = onorbitAbridged.CommonName()
        self.constellation = onorbitAbridged.Constellation()
        self.intlDes = onorbitAbridged.IntlDes()
        self.launchDate = onorbitAbridged.LaunchDate()
        self.decayDate = onorbitAbridged.DecayDate()
        self.objectType = onorbitAbridged.ObjectType()
        self.origin = onorbitAbridged.Origin()
        self.missionNumber = onorbitAbridged.MissionNumber()
        self.category = onorbitAbridged.Category()
        self.lifetimeYears = onorbitAbridged.LifetimeYears()
        self.altName = onorbitAbridged.AltName()
        self.createdAt = onorbitAbridged.CreatedAt()
        self.createdBy = onorbitAbridged.CreatedBy()
        self.source = onorbitAbridged.Source()
        self.dataMode = onorbitAbridged.DataMode()
        self.launchSiteId = onorbitAbridged.LaunchSiteId()
        self.countryCode = onorbitAbridged.CountryCode()
        self.origNetwork = onorbitAbridged.OrigNetwork()

    # Onorbit_AbridgedT
    def Pack(self, builder):
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.commonName is not None:
            commonName = builder.CreateString(self.commonName)
        if self.constellation is not None:
            constellation = builder.CreateString(self.constellation)
        if self.intlDes is not None:
            intlDes = builder.CreateString(self.intlDes)
        if self.launchDate is not None:
            launchDate = builder.CreateString(self.launchDate)
        if self.decayDate is not None:
            decayDate = builder.CreateString(self.decayDate)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.missionNumber is not None:
            missionNumber = builder.CreateString(self.missionNumber)
        if self.altName is not None:
            altName = builder.CreateString(self.altName)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.launchSiteId is not None:
            launchSiteId = builder.CreateString(self.launchSiteId)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Onorbit_AbridgedStart(builder)
        if self.idOnOrbit is not None:
            Onorbit_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.classificationMarking is not None:
            Onorbit_AbridgedAddClassificationMarking(builder, classificationMarking)
        Onorbit_AbridgedAddSatNo(builder, self.satNo)
        if self.commonName is not None:
            Onorbit_AbridgedAddCommonName(builder, commonName)
        if self.constellation is not None:
            Onorbit_AbridgedAddConstellation(builder, constellation)
        if self.intlDes is not None:
            Onorbit_AbridgedAddIntlDes(builder, intlDes)
        if self.launchDate is not None:
            Onorbit_AbridgedAddLaunchDate(builder, launchDate)
        if self.decayDate is not None:
            Onorbit_AbridgedAddDecayDate(builder, decayDate)
        Onorbit_AbridgedAddObjectType(builder, self.objectType)
        if self.origin is not None:
            Onorbit_AbridgedAddOrigin(builder, origin)
        if self.missionNumber is not None:
            Onorbit_AbridgedAddMissionNumber(builder, missionNumber)
        Onorbit_AbridgedAddCategory(builder, self.category)
        Onorbit_AbridgedAddLifetimeYears(builder, self.lifetimeYears)
        if self.altName is not None:
            Onorbit_AbridgedAddAltName(builder, altName)
        if self.createdAt is not None:
            Onorbit_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Onorbit_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Onorbit_AbridgedAddSource(builder, source)
        Onorbit_AbridgedAddDataMode(builder, self.dataMode)
        if self.launchSiteId is not None:
            Onorbit_AbridgedAddLaunchSiteId(builder, launchSiteId)
        if self.countryCode is not None:
            Onorbit_AbridgedAddCountryCode(builder, countryCode)
        if self.origNetwork is not None:
            Onorbit_AbridgedAddOrigNetwork(builder, origNetwork)
        onorbitAbridged = Onorbit_AbridgedEnd(builder)
        return onorbitAbridged
