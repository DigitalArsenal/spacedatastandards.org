# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.
class Location_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Location_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLocation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Location_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x43\x41", size_prefixed=size_prefixed)

    # Location_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the location, auto-generated by the system.
    # Example: /// Example: LOCATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Location_Ingest
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Location_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Location name.
    # Example: /// Example: Example location
    # Constraints: Minimum length = 1, Maximum length = 128
    # Location_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 16
    # Location_Ingest
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # Location_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # Location_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Altitude of the location, in kilometers.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # Location_Ingest
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Location_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Location_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Location_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Location_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Location_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Location_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Location_IngestStart(builder):
    builder.StartObject(13)

def Start(builder):
    Location_IngestStart(builder)

def Location_IngestAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    Location_IngestAddIdLocation(builder, idLocation)

def Location_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Location_IngestAddClassificationMarking(builder, classificationMarking)

def Location_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Location_IngestAddName(builder, name)

def Location_IngestAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Location_IngestAddCountryCode(builder, countryCode)

def Location_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(4, lat, 0.0)

def AddLat(builder, lat):
    Location_IngestAddLat(builder, lat)

def Location_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(5, lon, 0.0)

def AddLon(builder, lon):
    Location_IngestAddLon(builder, lon)

def Location_IngestAddAltitude(builder, altitude):
    builder.PrependFloat64Slot(6, altitude, 0.0)

def AddAltitude(builder, altitude):
    Location_IngestAddAltitude(builder, altitude)

def Location_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Location_IngestAddCreatedAt(builder, createdAt)

def Location_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Location_IngestAddCreatedBy(builder, createdBy)

def Location_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Location_IngestAddSource(builder, source)

def Location_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Location_IngestAddOrigin(builder, origin)

def Location_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(11, dataMode, 0)

def AddDataMode(builder, dataMode):
    Location_IngestAddDataMode(builder, dataMode)

def Location_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Location_IngestAddOrigNetwork(builder, origNetwork)

def Location_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Location_IngestEnd(builder)


class Location_IngestT(object):

    # Location_IngestT
    def __init__(self):
        self.idLocation = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.countryCode = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.altitude = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        locationIngest = Location_Ingest()
        locationIngest.Init(buf, pos)
        return cls.InitFromObj(locationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, locationIngest):
        x = Location_IngestT()
        x._UnPack(locationIngest)
        return x

    # Location_IngestT
    def _UnPack(self, locationIngest):
        if locationIngest is None:
            return
        self.idLocation = locationIngest.IdLocation()
        self.classificationMarking = locationIngest.ClassificationMarking()
        self.name = locationIngest.Name()
        self.countryCode = locationIngest.CountryCode()
        self.lat = locationIngest.Lat()
        self.lon = locationIngest.Lon()
        self.altitude = locationIngest.Altitude()
        self.createdAt = locationIngest.CreatedAt()
        self.createdBy = locationIngest.CreatedBy()
        self.source = locationIngest.Source()
        self.origin = locationIngest.Origin()
        self.dataMode = locationIngest.DataMode()
        self.origNetwork = locationIngest.OrigNetwork()

    # Location_IngestT
    def Pack(self, builder):
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Location_IngestStart(builder)
        if self.idLocation is not None:
            Location_IngestAddIdLocation(builder, idLocation)
        if self.classificationMarking is not None:
            Location_IngestAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            Location_IngestAddName(builder, name)
        if self.countryCode is not None:
            Location_IngestAddCountryCode(builder, countryCode)
        Location_IngestAddLat(builder, self.lat)
        Location_IngestAddLon(builder, self.lon)
        Location_IngestAddAltitude(builder, self.altitude)
        if self.createdAt is not None:
            Location_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Location_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Location_IngestAddSource(builder, source)
        if self.origin is not None:
            Location_IngestAddOrigin(builder, origin)
        Location_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            Location_IngestAddOrigNetwork(builder, origNetwork)
        locationIngest = Location_IngestEnd(builder)
        return locationIngest
