# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
class ECPSDR_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ECPSDR_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsECPSDR_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ECPSDR_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x43\x50\x53", size_prefixed=size_prefixed)

    # ECPSDR_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ECPSDR-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # ECPSDR_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # ECPSDR_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the on-orbit satellite hosting the sensor.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ECPSDR_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the on-orbit satellite hosting the sensor.
    # Example: /// Example: 101
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ECPSDR_Full
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ECPSDR_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # ECPSDR_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of data associated with this record (STANDARD, TRANSIENT).
    # Example: /// Example: STANDARD
    # Constraints: Minimum length = 1, Maximum length = 12
    # ECPSDR_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MsgTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of the observation, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def Retransmit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The sensor mode associated with this measurements (NORMAL, TEST).
    # Example: /// Example: TEST
    # Constraints: Minimum length = 0, Maximum length = 12
    # ECPSDR_Full
    def SenMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def DosBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def Asl5VcurrMon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def Dsl5VcurrMon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Power supply temperature monitor.  This is sensor status telemetry.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def PsTempMon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def CdsPlateVmon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CDS reference voltage monitor.  See vRef for conversion factor to Volts.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def CdsRefVmon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unitless sensor mounting plate temperature.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MpTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def VRef(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Photodiode 1 signal level.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def Pd1SigLev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Photodiode 2 signal level.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def Pd2SigLev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of ESD triggers, low byte of 2-byte counter.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def EsdTrigCountL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of ESD triggers, high byte of 2-byte counter.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def EsdTrigCountH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def LowLetL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def LowLetM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet1L(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet1M(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet2L(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet2M(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet3L(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet3M(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet4L(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def MedLet4M(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def HiLetL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def HiLetM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SurfDosL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SurfDosM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SurfDosH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SurfDosChargeL(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SurfDosChargeH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Surface dosimeter status byte.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def SurfDosStat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CDS throttle number of seconds between CDS transient capture readouts.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def CdsThrottle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def CdsThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def Checksum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of 144 digitized samples of ESD waveform for transient packets.
    # Example: /// Example: [1, 2, 3]
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def TransientData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ECPSDR_Full
    def TransientDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ECPSDR_Full
    def TransientDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # ECPSDR_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # ECPSDR_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # ECPSDR_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # ECPSDR_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # ECPSDR_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # ECPSDR_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ECPSDR_Full
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ECPSDR_FullStart(builder):
    builder.StartObject(55)

def Start(builder):
    ECPSDR_FullStart(builder)

def ECPSDR_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ECPSDR_FullAddId(builder, id)

def ECPSDR_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    ECPSDR_FullAddClassificationMarking(builder, classificationMarking)

def ECPSDR_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    ECPSDR_FullAddIdOnOrbit(builder, idOnOrbit)

def ECPSDR_FullAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    ECPSDR_FullAddSatNo(builder, satNo)

def ECPSDR_FullAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    ECPSDR_FullAddOrigObjectId(builder, origObjectId)

def ECPSDR_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    ECPSDR_FullAddIdSensor(builder, idSensor)

def ECPSDR_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    ECPSDR_FullAddOrigSensorId(builder, origSensorId)

def ECPSDR_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    ECPSDR_FullAddType(builder, type)

def ECPSDR_FullAddMsgTime(builder, msgTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(msgTime), 0)

def AddMsgTime(builder, msgTime):
    ECPSDR_FullAddMsgTime(builder, msgTime)

def ECPSDR_FullAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    ECPSDR_FullAddObTime(builder, obTime)

def ECPSDR_FullAddRetransmit(builder, retransmit):
    builder.PrependBoolSlot(10, retransmit, 0)

def AddRetransmit(builder, retransmit):
    ECPSDR_FullAddRetransmit(builder, retransmit)

def ECPSDR_FullAddSenMode(builder, senMode):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(senMode), 0)

def AddSenMode(builder, senMode):
    ECPSDR_FullAddSenMode(builder, senMode)

def ECPSDR_FullAddDosBias(builder, dosBias):
    builder.PrependInt32Slot(12, dosBias, 0)

def AddDosBias(builder, dosBias):
    ECPSDR_FullAddDosBias(builder, dosBias)

def ECPSDR_FullAddAsl5VcurrMon(builder, asl5VcurrMon):
    builder.PrependInt32Slot(13, asl5VcurrMon, 0)

def AddAsl5VcurrMon(builder, asl5VcurrMon):
    ECPSDR_FullAddAsl5VcurrMon(builder, asl5VcurrMon)

def ECPSDR_FullAddDsl5VcurrMon(builder, dsl5VcurrMon):
    builder.PrependInt32Slot(14, dsl5VcurrMon, 0)

def AddDsl5VcurrMon(builder, dsl5VcurrMon):
    ECPSDR_FullAddDsl5VcurrMon(builder, dsl5VcurrMon)

def ECPSDR_FullAddPsTempMon(builder, psTempMon):
    builder.PrependInt32Slot(15, psTempMon, 0)

def AddPsTempMon(builder, psTempMon):
    ECPSDR_FullAddPsTempMon(builder, psTempMon)

def ECPSDR_FullAddCdsPlateVmon(builder, cdsPlateVmon):
    builder.PrependInt32Slot(16, cdsPlateVmon, 0)

def AddCdsPlateVmon(builder, cdsPlateVmon):
    ECPSDR_FullAddCdsPlateVmon(builder, cdsPlateVmon)

def ECPSDR_FullAddCdsRefVmon(builder, cdsRefVmon):
    builder.PrependInt32Slot(17, cdsRefVmon, 0)

def AddCdsRefVmon(builder, cdsRefVmon):
    ECPSDR_FullAddCdsRefVmon(builder, cdsRefVmon)

def ECPSDR_FullAddMpTemp(builder, mpTemp):
    builder.PrependInt32Slot(18, mpTemp, 0)

def AddMpTemp(builder, mpTemp):
    ECPSDR_FullAddMpTemp(builder, mpTemp)

def ECPSDR_FullAddVRef(builder, vRef):
    builder.PrependInt32Slot(19, vRef, 0)

def AddVRef(builder, vRef):
    ECPSDR_FullAddVRef(builder, vRef)

def ECPSDR_FullAddPd1SigLev(builder, pd1SigLev):
    builder.PrependInt32Slot(20, pd1SigLev, 0)

def AddPd1SigLev(builder, pd1SigLev):
    ECPSDR_FullAddPd1SigLev(builder, pd1SigLev)

def ECPSDR_FullAddPd2SigLev(builder, pd2SigLev):
    builder.PrependInt32Slot(21, pd2SigLev, 0)

def AddPd2SigLev(builder, pd2SigLev):
    ECPSDR_FullAddPd2SigLev(builder, pd2SigLev)

def ECPSDR_FullAddEsdTrigCountL(builder, esdTrigCountL):
    builder.PrependInt32Slot(22, esdTrigCountL, 0)

def AddEsdTrigCountL(builder, esdTrigCountL):
    ECPSDR_FullAddEsdTrigCountL(builder, esdTrigCountL)

def ECPSDR_FullAddEsdTrigCountH(builder, esdTrigCountH):
    builder.PrependInt32Slot(23, esdTrigCountH, 0)

def AddEsdTrigCountH(builder, esdTrigCountH):
    ECPSDR_FullAddEsdTrigCountH(builder, esdTrigCountH)

def ECPSDR_FullAddLowLetL(builder, lowLetL):
    builder.PrependInt32Slot(24, lowLetL, 0)

def AddLowLetL(builder, lowLetL):
    ECPSDR_FullAddLowLetL(builder, lowLetL)

def ECPSDR_FullAddLowLetM(builder, lowLetM):
    builder.PrependInt32Slot(25, lowLetM, 0)

def AddLowLetM(builder, lowLetM):
    ECPSDR_FullAddLowLetM(builder, lowLetM)

def ECPSDR_FullAddMedLet1L(builder, medLet1L):
    builder.PrependInt32Slot(26, medLet1L, 0)

def AddMedLet1L(builder, medLet1L):
    ECPSDR_FullAddMedLet1L(builder, medLet1L)

def ECPSDR_FullAddMedLet1M(builder, medLet1M):
    builder.PrependInt32Slot(27, medLet1M, 0)

def AddMedLet1M(builder, medLet1M):
    ECPSDR_FullAddMedLet1M(builder, medLet1M)

def ECPSDR_FullAddMedLet2L(builder, medLet2L):
    builder.PrependInt32Slot(28, medLet2L, 0)

def AddMedLet2L(builder, medLet2L):
    ECPSDR_FullAddMedLet2L(builder, medLet2L)

def ECPSDR_FullAddMedLet2M(builder, medLet2M):
    builder.PrependInt32Slot(29, medLet2M, 0)

def AddMedLet2M(builder, medLet2M):
    ECPSDR_FullAddMedLet2M(builder, medLet2M)

def ECPSDR_FullAddMedLet3L(builder, medLet3L):
    builder.PrependInt32Slot(30, medLet3L, 0)

def AddMedLet3L(builder, medLet3L):
    ECPSDR_FullAddMedLet3L(builder, medLet3L)

def ECPSDR_FullAddMedLet3M(builder, medLet3M):
    builder.PrependInt32Slot(31, medLet3M, 0)

def AddMedLet3M(builder, medLet3M):
    ECPSDR_FullAddMedLet3M(builder, medLet3M)

def ECPSDR_FullAddMedLet4L(builder, medLet4L):
    builder.PrependInt32Slot(32, medLet4L, 0)

def AddMedLet4L(builder, medLet4L):
    ECPSDR_FullAddMedLet4L(builder, medLet4L)

def ECPSDR_FullAddMedLet4M(builder, medLet4M):
    builder.PrependInt32Slot(33, medLet4M, 0)

def AddMedLet4M(builder, medLet4M):
    ECPSDR_FullAddMedLet4M(builder, medLet4M)

def ECPSDR_FullAddHiLetL(builder, hiLetL):
    builder.PrependInt32Slot(34, hiLetL, 0)

def AddHiLetL(builder, hiLetL):
    ECPSDR_FullAddHiLetL(builder, hiLetL)

def ECPSDR_FullAddHiLetM(builder, hiLetM):
    builder.PrependInt32Slot(35, hiLetM, 0)

def AddHiLetM(builder, hiLetM):
    ECPSDR_FullAddHiLetM(builder, hiLetM)

def ECPSDR_FullAddSurfDosL(builder, surfDosL):
    builder.PrependInt32Slot(36, surfDosL, 0)

def AddSurfDosL(builder, surfDosL):
    ECPSDR_FullAddSurfDosL(builder, surfDosL)

def ECPSDR_FullAddSurfDosM(builder, surfDosM):
    builder.PrependInt32Slot(37, surfDosM, 0)

def AddSurfDosM(builder, surfDosM):
    ECPSDR_FullAddSurfDosM(builder, surfDosM)

def ECPSDR_FullAddSurfDosH(builder, surfDosH):
    builder.PrependInt32Slot(38, surfDosH, 0)

def AddSurfDosH(builder, surfDosH):
    ECPSDR_FullAddSurfDosH(builder, surfDosH)

def ECPSDR_FullAddSurfDosChargeL(builder, surfDosChargeL):
    builder.PrependInt32Slot(39, surfDosChargeL, 0)

def AddSurfDosChargeL(builder, surfDosChargeL):
    ECPSDR_FullAddSurfDosChargeL(builder, surfDosChargeL)

def ECPSDR_FullAddSurfDosChargeH(builder, surfDosChargeH):
    builder.PrependInt32Slot(40, surfDosChargeH, 0)

def AddSurfDosChargeH(builder, surfDosChargeH):
    ECPSDR_FullAddSurfDosChargeH(builder, surfDosChargeH)

def ECPSDR_FullAddSurfDosStat(builder, surfDosStat):
    builder.PrependInt32Slot(41, surfDosStat, 0)

def AddSurfDosStat(builder, surfDosStat):
    ECPSDR_FullAddSurfDosStat(builder, surfDosStat)

def ECPSDR_FullAddCdsThrottle(builder, cdsThrottle):
    builder.PrependInt32Slot(42, cdsThrottle, 0)

def AddCdsThrottle(builder, cdsThrottle):
    ECPSDR_FullAddCdsThrottle(builder, cdsThrottle)

def ECPSDR_FullAddCdsThreshold(builder, cdsThreshold):
    builder.PrependInt32Slot(43, cdsThreshold, 0)

def AddCdsThreshold(builder, cdsThreshold):
    ECPSDR_FullAddCdsThreshold(builder, cdsThreshold)

def ECPSDR_FullAddChecksum(builder, checksum):
    builder.PrependInt32Slot(44, checksum, 0)

def AddChecksum(builder, checksum):
    ECPSDR_FullAddChecksum(builder, checksum)

def ECPSDR_FullAddTransientData(builder, transientData):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(transientData), 0)

def AddTransientData(builder, transientData):
    ECPSDR_FullAddTransientData(builder, transientData)

def ECPSDR_FullStartTransientDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTransientDataVector(builder, numElems):
    return ECPSDR_FullStartTransientDataVector(builder, numElems)

def ECPSDR_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    ECPSDR_FullAddCreatedAt(builder, createdAt)

def ECPSDR_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    ECPSDR_FullAddCreatedBy(builder, createdBy)

def ECPSDR_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    ECPSDR_FullAddUpdatedAt(builder, updatedAt)

def ECPSDR_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    ECPSDR_FullAddUpdatedBy(builder, updatedBy)

def ECPSDR_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    ECPSDR_FullAddSource(builder, source)

def ECPSDR_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    ECPSDR_FullAddOrigin(builder, origin)

def ECPSDR_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    ECPSDR_FullAddOrigNetwork(builder, origNetwork)

def ECPSDR_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(53, dataMode, 0)

def AddDataMode(builder, dataMode):
    ECPSDR_FullAddDataMode(builder, dataMode)

def ECPSDR_FullAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    ECPSDR_FullAddOnOrbit(builder, onOrbit)

def ECPSDR_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ECPSDR_FullEnd(builder)

try:
    from typing import List
except:
    pass

class ECPSDR_FullT(object):

    # ECPSDR_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.type = None  # type: str
        self.msgTime = None  # type: str
        self.obTime = None  # type: str
        self.retransmit = False  # type: bool
        self.senMode = None  # type: str
        self.dosBias = 0  # type: int
        self.asl5VcurrMon = 0  # type: int
        self.dsl5VcurrMon = 0  # type: int
        self.psTempMon = 0  # type: int
        self.cdsPlateVmon = 0  # type: int
        self.cdsRefVmon = 0  # type: int
        self.mpTemp = 0  # type: int
        self.vRef = 0  # type: int
        self.pd1SigLev = 0  # type: int
        self.pd2SigLev = 0  # type: int
        self.esdTrigCountL = 0  # type: int
        self.esdTrigCountH = 0  # type: int
        self.lowLetL = 0  # type: int
        self.lowLetM = 0  # type: int
        self.medLet1L = 0  # type: int
        self.medLet1M = 0  # type: int
        self.medLet2L = 0  # type: int
        self.medLet2M = 0  # type: int
        self.medLet3L = 0  # type: int
        self.medLet3M = 0  # type: int
        self.medLet4L = 0  # type: int
        self.medLet4M = 0  # type: int
        self.hiLetL = 0  # type: int
        self.hiLetM = 0  # type: int
        self.surfDosL = 0  # type: int
        self.surfDosM = 0  # type: int
        self.surfDosH = 0  # type: int
        self.surfDosChargeL = 0  # type: int
        self.surfDosChargeH = 0  # type: int
        self.surfDosStat = 0  # type: int
        self.cdsThrottle = 0  # type: int
        self.cdsThreshold = 0  # type: int
        self.checksum = 0  # type: int
        self.transientData = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.onOrbit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ecpsdrFull = ECPSDR_Full()
        ecpsdrFull.Init(buf, pos)
        return cls.InitFromObj(ecpsdrFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ecpsdrFull):
        x = ECPSDR_FullT()
        x._UnPack(ecpsdrFull)
        return x

    # ECPSDR_FullT
    def _UnPack(self, ecpsdrFull):
        if ecpsdrFull is None:
            return
        self.id = ecpsdrFull.Id()
        self.classificationMarking = ecpsdrFull.ClassificationMarking()
        self.idOnOrbit = ecpsdrFull.IdOnOrbit()
        self.satNo = ecpsdrFull.SatNo()
        self.origObjectId = ecpsdrFull.OrigObjectId()
        self.idSensor = ecpsdrFull.IdSensor()
        self.origSensorId = ecpsdrFull.OrigSensorId()
        self.type = ecpsdrFull.Type()
        self.msgTime = ecpsdrFull.MsgTime()
        self.obTime = ecpsdrFull.ObTime()
        self.retransmit = ecpsdrFull.Retransmit()
        self.senMode = ecpsdrFull.SenMode()
        self.dosBias = ecpsdrFull.DosBias()
        self.asl5VcurrMon = ecpsdrFull.Asl5VcurrMon()
        self.dsl5VcurrMon = ecpsdrFull.Dsl5VcurrMon()
        self.psTempMon = ecpsdrFull.PsTempMon()
        self.cdsPlateVmon = ecpsdrFull.CdsPlateVmon()
        self.cdsRefVmon = ecpsdrFull.CdsRefVmon()
        self.mpTemp = ecpsdrFull.MpTemp()
        self.vRef = ecpsdrFull.VRef()
        self.pd1SigLev = ecpsdrFull.Pd1SigLev()
        self.pd2SigLev = ecpsdrFull.Pd2SigLev()
        self.esdTrigCountL = ecpsdrFull.EsdTrigCountL()
        self.esdTrigCountH = ecpsdrFull.EsdTrigCountH()
        self.lowLetL = ecpsdrFull.LowLetL()
        self.lowLetM = ecpsdrFull.LowLetM()
        self.medLet1L = ecpsdrFull.MedLet1L()
        self.medLet1M = ecpsdrFull.MedLet1M()
        self.medLet2L = ecpsdrFull.MedLet2L()
        self.medLet2M = ecpsdrFull.MedLet2M()
        self.medLet3L = ecpsdrFull.MedLet3L()
        self.medLet3M = ecpsdrFull.MedLet3M()
        self.medLet4L = ecpsdrFull.MedLet4L()
        self.medLet4M = ecpsdrFull.MedLet4M()
        self.hiLetL = ecpsdrFull.HiLetL()
        self.hiLetM = ecpsdrFull.HiLetM()
        self.surfDosL = ecpsdrFull.SurfDosL()
        self.surfDosM = ecpsdrFull.SurfDosM()
        self.surfDosH = ecpsdrFull.SurfDosH()
        self.surfDosChargeL = ecpsdrFull.SurfDosChargeL()
        self.surfDosChargeH = ecpsdrFull.SurfDosChargeH()
        self.surfDosStat = ecpsdrFull.SurfDosStat()
        self.cdsThrottle = ecpsdrFull.CdsThrottle()
        self.cdsThreshold = ecpsdrFull.CdsThreshold()
        self.checksum = ecpsdrFull.Checksum()
        if not ecpsdrFull.TransientDataIsNone():
            self.transientData = []
            for i in range(ecpsdrFull.TransientDataLength()):
                self.transientData.append(ecpsdrFull.TransientData(i))
        self.createdAt = ecpsdrFull.CreatedAt()
        self.createdBy = ecpsdrFull.CreatedBy()
        self.updatedAt = ecpsdrFull.UpdatedAt()
        self.updatedBy = ecpsdrFull.UpdatedBy()
        self.source = ecpsdrFull.Source()
        self.origin = ecpsdrFull.Origin()
        self.origNetwork = ecpsdrFull.OrigNetwork()
        self.dataMode = ecpsdrFull.DataMode()
        self.onOrbit = ecpsdrFull.OnOrbit()

    # ECPSDR_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.msgTime is not None:
            msgTime = builder.CreateString(self.msgTime)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.senMode is not None:
            senMode = builder.CreateString(self.senMode)
        if self.transientData is not None:
            transientDatalist = []
            for i in range(len(self.transientData)):
                transientDatalist.append(builder.CreateString(self.transientData[i]))
            ECPSDR_FullStartTransientDataVector(builder, len(self.transientData))
            for i in reversed(range(len(self.transientData))):
                builder.PrependUOffsetTRelative(transientDatalist[i])
            transientData = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        ECPSDR_FullStart(builder)
        if self.id is not None:
            ECPSDR_FullAddId(builder, id)
        if self.classificationMarking is not None:
            ECPSDR_FullAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            ECPSDR_FullAddIdOnOrbit(builder, idOnOrbit)
        ECPSDR_FullAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            ECPSDR_FullAddOrigObjectId(builder, origObjectId)
        if self.idSensor is not None:
            ECPSDR_FullAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            ECPSDR_FullAddOrigSensorId(builder, origSensorId)
        if self.type is not None:
            ECPSDR_FullAddType(builder, type)
        if self.msgTime is not None:
            ECPSDR_FullAddMsgTime(builder, msgTime)
        if self.obTime is not None:
            ECPSDR_FullAddObTime(builder, obTime)
        ECPSDR_FullAddRetransmit(builder, self.retransmit)
        if self.senMode is not None:
            ECPSDR_FullAddSenMode(builder, senMode)
        ECPSDR_FullAddDosBias(builder, self.dosBias)
        ECPSDR_FullAddAsl5VcurrMon(builder, self.asl5VcurrMon)
        ECPSDR_FullAddDsl5VcurrMon(builder, self.dsl5VcurrMon)
        ECPSDR_FullAddPsTempMon(builder, self.psTempMon)
        ECPSDR_FullAddCdsPlateVmon(builder, self.cdsPlateVmon)
        ECPSDR_FullAddCdsRefVmon(builder, self.cdsRefVmon)
        ECPSDR_FullAddMpTemp(builder, self.mpTemp)
        ECPSDR_FullAddVRef(builder, self.vRef)
        ECPSDR_FullAddPd1SigLev(builder, self.pd1SigLev)
        ECPSDR_FullAddPd2SigLev(builder, self.pd2SigLev)
        ECPSDR_FullAddEsdTrigCountL(builder, self.esdTrigCountL)
        ECPSDR_FullAddEsdTrigCountH(builder, self.esdTrigCountH)
        ECPSDR_FullAddLowLetL(builder, self.lowLetL)
        ECPSDR_FullAddLowLetM(builder, self.lowLetM)
        ECPSDR_FullAddMedLet1L(builder, self.medLet1L)
        ECPSDR_FullAddMedLet1M(builder, self.medLet1M)
        ECPSDR_FullAddMedLet2L(builder, self.medLet2L)
        ECPSDR_FullAddMedLet2M(builder, self.medLet2M)
        ECPSDR_FullAddMedLet3L(builder, self.medLet3L)
        ECPSDR_FullAddMedLet3M(builder, self.medLet3M)
        ECPSDR_FullAddMedLet4L(builder, self.medLet4L)
        ECPSDR_FullAddMedLet4M(builder, self.medLet4M)
        ECPSDR_FullAddHiLetL(builder, self.hiLetL)
        ECPSDR_FullAddHiLetM(builder, self.hiLetM)
        ECPSDR_FullAddSurfDosL(builder, self.surfDosL)
        ECPSDR_FullAddSurfDosM(builder, self.surfDosM)
        ECPSDR_FullAddSurfDosH(builder, self.surfDosH)
        ECPSDR_FullAddSurfDosChargeL(builder, self.surfDosChargeL)
        ECPSDR_FullAddSurfDosChargeH(builder, self.surfDosChargeH)
        ECPSDR_FullAddSurfDosStat(builder, self.surfDosStat)
        ECPSDR_FullAddCdsThrottle(builder, self.cdsThrottle)
        ECPSDR_FullAddCdsThreshold(builder, self.cdsThreshold)
        ECPSDR_FullAddChecksum(builder, self.checksum)
        if self.transientData is not None:
            ECPSDR_FullAddTransientData(builder, transientData)
        if self.createdAt is not None:
            ECPSDR_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            ECPSDR_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            ECPSDR_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            ECPSDR_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            ECPSDR_FullAddSource(builder, source)
        if self.origin is not None:
            ECPSDR_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            ECPSDR_FullAddOrigNetwork(builder, origNetwork)
        ECPSDR_FullAddDataMode(builder, self.dataMode)
        if self.onOrbit is not None:
            ECPSDR_FullAddOnOrbit(builder, onOrbit)
        ecpsdrFull = ECPSDR_FullEnd(builder)
        return ecpsdrFull
