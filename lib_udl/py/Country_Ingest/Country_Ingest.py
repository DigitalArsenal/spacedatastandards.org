# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A Country may represent countries, multi-national consortiums, and international organizations.
class Country_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Country_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCountry_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Country_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x55\x4E", size_prefixed=size_prefixed)

    # Country_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
    # Example: /// Example: US
    # Constraints: Minimum length = 1, Maximum length = 4
    # Country_Ingest
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country name.
    # Example: /// Example: UNITED STATES
    # Constraints: Minimum length = 0, Maximum length = 128
    # Country_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 2
    # Country_Ingest
    def FipsCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
    # Example: /// Example: USA
    # Constraints: Minimum length = 0, Maximum length = 3
    # Country_Ingest
    def Iso3Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # 3 Digit or other alternate country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Country_Ingest
    def CodeAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Country_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Country_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Country_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Country_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Country_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Country_IngestStart(builder):
    builder.StartObject(10)

def Start(builder):
    Country_IngestStart(builder)

def Country_IngestAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def AddCode(builder, code):
    Country_IngestAddCode(builder, code)

def Country_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Country_IngestAddName(builder, name)

def Country_IngestAddFipsCode(builder, fipsCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fipsCode), 0)

def AddFipsCode(builder, fipsCode):
    Country_IngestAddFipsCode(builder, fipsCode)

def Country_IngestAddIso3Code(builder, iso3Code):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iso3Code), 0)

def AddIso3Code(builder, iso3Code):
    Country_IngestAddIso3Code(builder, iso3Code)

def Country_IngestAddCodeAlt(builder, codeAlt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(codeAlt), 0)

def AddCodeAlt(builder, codeAlt):
    Country_IngestAddCodeAlt(builder, codeAlt)

def Country_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Country_IngestAddCreatedAt(builder, createdAt)

def Country_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Country_IngestAddCreatedBy(builder, createdBy)

def Country_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Country_IngestAddSource(builder, source)

def Country_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Country_IngestAddOrigNetwork(builder, origNetwork)

def Country_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    Country_IngestAddDataMode(builder, dataMode)

def Country_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Country_IngestEnd(builder)


class Country_IngestT(object):

    # Country_IngestT
    def __init__(self):
        self.code = None  # type: str
        self.name = None  # type: str
        self.fipsCode = None  # type: str
        self.iso3Code = None  # type: str
        self.codeAlt = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        countryIngest = Country_Ingest()
        countryIngest.Init(buf, pos)
        return cls.InitFromObj(countryIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, countryIngest):
        x = Country_IngestT()
        x._UnPack(countryIngest)
        return x

    # Country_IngestT
    def _UnPack(self, countryIngest):
        if countryIngest is None:
            return
        self.code = countryIngest.Code()
        self.name = countryIngest.Name()
        self.fipsCode = countryIngest.FipsCode()
        self.iso3Code = countryIngest.Iso3Code()
        self.codeAlt = countryIngest.CodeAlt()
        self.createdAt = countryIngest.CreatedAt()
        self.createdBy = countryIngest.CreatedBy()
        self.source = countryIngest.Source()
        self.origNetwork = countryIngest.OrigNetwork()
        self.dataMode = countryIngest.DataMode()

    # Country_IngestT
    def Pack(self, builder):
        if self.code is not None:
            code = builder.CreateString(self.code)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.fipsCode is not None:
            fipsCode = builder.CreateString(self.fipsCode)
        if self.iso3Code is not None:
            iso3Code = builder.CreateString(self.iso3Code)
        if self.codeAlt is not None:
            codeAlt = builder.CreateString(self.codeAlt)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Country_IngestStart(builder)
        if self.code is not None:
            Country_IngestAddCode(builder, code)
        if self.name is not None:
            Country_IngestAddName(builder, name)
        if self.fipsCode is not None:
            Country_IngestAddFipsCode(builder, fipsCode)
        if self.iso3Code is not None:
            Country_IngestAddIso3Code(builder, iso3Code)
        if self.codeAlt is not None:
            Country_IngestAddCodeAlt(builder, codeAlt)
        if self.createdAt is not None:
            Country_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Country_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Country_IngestAddSource(builder, source)
        if self.origNetwork is not None:
            Country_IngestAddOrigNetwork(builder, origNetwork)
        Country_IngestAddDataMode(builder, self.dataMode)
        countryIngest = Country_IngestEnd(builder)
        return countryIngest
