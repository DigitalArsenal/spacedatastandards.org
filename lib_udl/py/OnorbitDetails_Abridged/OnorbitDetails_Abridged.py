# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Contains details of the OnOrbit object.
class OnorbitDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the parent Onorbit record.
    # Example: /// Example: REF-ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitDetails_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def LastObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current/latest visual magnitude in M.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def Vismag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum visual magnitude in M.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def VismagMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum visual magnitude in M.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def VismagMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean visual magnitude in M.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def VismagMean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Current/latest radar cross section in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def Rcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum radar cross section in meters squared.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def RcsMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum radar cross section in meters squared.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def RcsMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mean radar cross section in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def RcsMean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total beginning of life delta V of the spacecraft, in meters per second.
    # Example: /// Example: 1000.1
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def BolDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum delta V available for this on-orbit spacecraft, in meters per second.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def MaxDeltaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
    # Example: /// Example: 50.1
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def DeltaVunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated maximum burn duration for the object, in seconds.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def EstDeltaVduration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of distinct missions the spacecraft performs.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def NumMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
    # Example: /// Example: ['Weather', 'Space Weather']
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def MissionTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails_Abridged
    def MissionTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails_Abridged
    def MissionTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Type of the bus on the spacecraft.
    # Example: /// Example: A2100
    # Constraints: Minimum length = 0, Maximum length = 32
    # OnorbitDetails_Abridged
    def BusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
    # Example: /// Example: 90.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def GeoSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GEO drift rate, if applicable in degrees per day.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def DriftRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft dry mass (without fuel or disposables) in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def DryMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Mass of fuel and disposables at launch time in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def AdditionalMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def LaunchMassMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Nominal mass of spacecraft and fuel at launch time, in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def LaunchMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
    # Example: /// Example: 15.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def LaunchMassMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft beginning of life fuel mass, in orbit, in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def BolFuelMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated total current mass of the spacecraft, in kilograms.
    # Example: /// Example: 500
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def CurrentMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
    # Example: /// Example: 50.1
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def TotalMassUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft deployed area of solar array in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def SolarArrayArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def Maneuverable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Estimated remaining fuel for the object in kilograms.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def FuelRemaining(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average cross sectional area in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def CrossSection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average cross sectional area of the bus in meters squared.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def BusCrossSection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def MaxRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def ColaRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def AdeptRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of sub-satellites or deployable objects on the spacecraft.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def NumDeployable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
    # Example: /// Example: ['GOES-18A', 'GOES-18B']
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def DepNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails_Abridged
    def DepNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails_Abridged
    def DepNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    # Example: /// Example: [20, 21]
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def DepEstMasses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails_Abridged
    def DepEstMassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails_Abridged
    def DepEstMassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
    # Example: /// Example: [10, 5]
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def DepMassUncs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitDetails_Abridged
    def DepMassUncsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitDetails_Abridged
    def DepMassUncsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the source who last provided an observation for this idOnOrbit.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitDetails_Abridged
    def LastObSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitDetails_AbridgedStart(builder):
    builder.StartObject(48)

def Start(builder):
    OnorbitDetails_AbridgedStart(builder)

def OnorbitDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitDetails_AbridgedAddId(builder, id)

def OnorbitDetails_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitDetails_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def OnorbitDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def OnorbitDetails_AbridgedAddLastObTime(builder, lastObTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lastObTime), 0)

def AddLastObTime(builder, lastObTime):
    OnorbitDetails_AbridgedAddLastObTime(builder, lastObTime)

def OnorbitDetails_AbridgedAddVismag(builder, vismag):
    builder.PrependFloat64Slot(4, vismag, 0.0)

def AddVismag(builder, vismag):
    OnorbitDetails_AbridgedAddVismag(builder, vismag)

def OnorbitDetails_AbridgedAddVismagMin(builder, vismagMin):
    builder.PrependFloat64Slot(5, vismagMin, 0.0)

def AddVismagMin(builder, vismagMin):
    OnorbitDetails_AbridgedAddVismagMin(builder, vismagMin)

def OnorbitDetails_AbridgedAddVismagMax(builder, vismagMax):
    builder.PrependFloat64Slot(6, vismagMax, 0.0)

def AddVismagMax(builder, vismagMax):
    OnorbitDetails_AbridgedAddVismagMax(builder, vismagMax)

def OnorbitDetails_AbridgedAddVismagMean(builder, vismagMean):
    builder.PrependFloat64Slot(7, vismagMean, 0.0)

def AddVismagMean(builder, vismagMean):
    OnorbitDetails_AbridgedAddVismagMean(builder, vismagMean)

def OnorbitDetails_AbridgedAddRcs(builder, rcs):
    builder.PrependFloat64Slot(8, rcs, 0.0)

def AddRcs(builder, rcs):
    OnorbitDetails_AbridgedAddRcs(builder, rcs)

def OnorbitDetails_AbridgedAddRcsMin(builder, rcsMin):
    builder.PrependFloat64Slot(9, rcsMin, 0.0)

def AddRcsMin(builder, rcsMin):
    OnorbitDetails_AbridgedAddRcsMin(builder, rcsMin)

def OnorbitDetails_AbridgedAddRcsMax(builder, rcsMax):
    builder.PrependFloat64Slot(10, rcsMax, 0.0)

def AddRcsMax(builder, rcsMax):
    OnorbitDetails_AbridgedAddRcsMax(builder, rcsMax)

def OnorbitDetails_AbridgedAddRcsMean(builder, rcsMean):
    builder.PrependFloat64Slot(11, rcsMean, 0.0)

def AddRcsMean(builder, rcsMean):
    OnorbitDetails_AbridgedAddRcsMean(builder, rcsMean)

def OnorbitDetails_AbridgedAddBolDeltaV(builder, bolDeltaV):
    builder.PrependFloat64Slot(12, bolDeltaV, 0.0)

def AddBolDeltaV(builder, bolDeltaV):
    OnorbitDetails_AbridgedAddBolDeltaV(builder, bolDeltaV)

def OnorbitDetails_AbridgedAddMaxDeltaV(builder, maxDeltaV):
    builder.PrependFloat64Slot(13, maxDeltaV, 0.0)

def AddMaxDeltaV(builder, maxDeltaV):
    OnorbitDetails_AbridgedAddMaxDeltaV(builder, maxDeltaV)

def OnorbitDetails_AbridgedAddDeltaVunc(builder, deltaVunc):
    builder.PrependFloat64Slot(14, deltaVunc, 0.0)

def AddDeltaVunc(builder, deltaVunc):
    OnorbitDetails_AbridgedAddDeltaVunc(builder, deltaVunc)

def OnorbitDetails_AbridgedAddEstDeltaVduration(builder, estDeltaVduration):
    builder.PrependFloat64Slot(15, estDeltaVduration, 0.0)

def AddEstDeltaVduration(builder, estDeltaVduration):
    OnorbitDetails_AbridgedAddEstDeltaVduration(builder, estDeltaVduration)

def OnorbitDetails_AbridgedAddNumMission(builder, numMission):
    builder.PrependInt32Slot(16, numMission, 0)

def AddNumMission(builder, numMission):
    OnorbitDetails_AbridgedAddNumMission(builder, numMission)

def OnorbitDetails_AbridgedAddMissionTypes(builder, missionTypes):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(missionTypes), 0)

def AddMissionTypes(builder, missionTypes):
    OnorbitDetails_AbridgedAddMissionTypes(builder, missionTypes)

def OnorbitDetails_AbridgedStartMissionTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMissionTypesVector(builder, numElems):
    return OnorbitDetails_AbridgedStartMissionTypesVector(builder, numElems)

def OnorbitDetails_AbridgedAddBusType(builder, busType):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(busType), 0)

def AddBusType(builder, busType):
    OnorbitDetails_AbridgedAddBusType(builder, busType)

def OnorbitDetails_AbridgedAddGeoSlot(builder, geoSlot):
    builder.PrependFloat64Slot(19, geoSlot, 0.0)

def AddGeoSlot(builder, geoSlot):
    OnorbitDetails_AbridgedAddGeoSlot(builder, geoSlot)

def OnorbitDetails_AbridgedAddDriftRate(builder, driftRate):
    builder.PrependFloat64Slot(20, driftRate, 0.0)

def AddDriftRate(builder, driftRate):
    OnorbitDetails_AbridgedAddDriftRate(builder, driftRate)

def OnorbitDetails_AbridgedAddDryMass(builder, dryMass):
    builder.PrependFloat64Slot(21, dryMass, 0.0)

def AddDryMass(builder, dryMass):
    OnorbitDetails_AbridgedAddDryMass(builder, dryMass)

def OnorbitDetails_AbridgedAddAdditionalMass(builder, additionalMass):
    builder.PrependFloat64Slot(22, additionalMass, 0.0)

def AddAdditionalMass(builder, additionalMass):
    OnorbitDetails_AbridgedAddAdditionalMass(builder, additionalMass)

def OnorbitDetails_AbridgedAddLaunchMassMin(builder, launchMassMin):
    builder.PrependFloat64Slot(23, launchMassMin, 0.0)

def AddLaunchMassMin(builder, launchMassMin):
    OnorbitDetails_AbridgedAddLaunchMassMin(builder, launchMassMin)

def OnorbitDetails_AbridgedAddLaunchMass(builder, launchMass):
    builder.PrependFloat64Slot(24, launchMass, 0.0)

def AddLaunchMass(builder, launchMass):
    OnorbitDetails_AbridgedAddLaunchMass(builder, launchMass)

def OnorbitDetails_AbridgedAddLaunchMassMax(builder, launchMassMax):
    builder.PrependFloat64Slot(25, launchMassMax, 0.0)

def AddLaunchMassMax(builder, launchMassMax):
    OnorbitDetails_AbridgedAddLaunchMassMax(builder, launchMassMax)

def OnorbitDetails_AbridgedAddBolFuelMass(builder, bolFuelMass):
    builder.PrependFloat64Slot(26, bolFuelMass, 0.0)

def AddBolFuelMass(builder, bolFuelMass):
    OnorbitDetails_AbridgedAddBolFuelMass(builder, bolFuelMass)

def OnorbitDetails_AbridgedAddCurrentMass(builder, currentMass):
    builder.PrependFloat64Slot(27, currentMass, 0.0)

def AddCurrentMass(builder, currentMass):
    OnorbitDetails_AbridgedAddCurrentMass(builder, currentMass)

def OnorbitDetails_AbridgedAddTotalMassUnc(builder, totalMassUnc):
    builder.PrependFloat64Slot(28, totalMassUnc, 0.0)

def AddTotalMassUnc(builder, totalMassUnc):
    OnorbitDetails_AbridgedAddTotalMassUnc(builder, totalMassUnc)

def OnorbitDetails_AbridgedAddSolarArrayArea(builder, solarArrayArea):
    builder.PrependFloat64Slot(29, solarArrayArea, 0.0)

def AddSolarArrayArea(builder, solarArrayArea):
    OnorbitDetails_AbridgedAddSolarArrayArea(builder, solarArrayArea)

def OnorbitDetails_AbridgedAddManeuverable(builder, maneuverable):
    builder.PrependBoolSlot(30, maneuverable, 0)

def AddManeuverable(builder, maneuverable):
    OnorbitDetails_AbridgedAddManeuverable(builder, maneuverable)

def OnorbitDetails_AbridgedAddFuelRemaining(builder, fuelRemaining):
    builder.PrependFloat64Slot(31, fuelRemaining, 0.0)

def AddFuelRemaining(builder, fuelRemaining):
    OnorbitDetails_AbridgedAddFuelRemaining(builder, fuelRemaining)

def OnorbitDetails_AbridgedAddCrossSection(builder, crossSection):
    builder.PrependFloat64Slot(32, crossSection, 0.0)

def AddCrossSection(builder, crossSection):
    OnorbitDetails_AbridgedAddCrossSection(builder, crossSection)

def OnorbitDetails_AbridgedAddBusCrossSection(builder, busCrossSection):
    builder.PrependFloat64Slot(33, busCrossSection, 0.0)

def AddBusCrossSection(builder, busCrossSection):
    OnorbitDetails_AbridgedAddBusCrossSection(builder, busCrossSection)

def OnorbitDetails_AbridgedAddMaxRadius(builder, maxRadius):
    builder.PrependFloat64Slot(34, maxRadius, 0.0)

def AddMaxRadius(builder, maxRadius):
    OnorbitDetails_AbridgedAddMaxRadius(builder, maxRadius)

def OnorbitDetails_AbridgedAddColaRadius(builder, colaRadius):
    builder.PrependFloat64Slot(35, colaRadius, 0.0)

def AddColaRadius(builder, colaRadius):
    OnorbitDetails_AbridgedAddColaRadius(builder, colaRadius)

def OnorbitDetails_AbridgedAddAdeptRadius(builder, adeptRadius):
    builder.PrependFloat64Slot(36, adeptRadius, 0.0)

def AddAdeptRadius(builder, adeptRadius):
    OnorbitDetails_AbridgedAddAdeptRadius(builder, adeptRadius)

def OnorbitDetails_AbridgedAddNumDeployable(builder, numDeployable):
    builder.PrependInt32Slot(37, numDeployable, 0)

def AddNumDeployable(builder, numDeployable):
    OnorbitDetails_AbridgedAddNumDeployable(builder, numDeployable)

def OnorbitDetails_AbridgedAddDepNames(builder, depNames):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(depNames), 0)

def AddDepNames(builder, depNames):
    OnorbitDetails_AbridgedAddDepNames(builder, depNames)

def OnorbitDetails_AbridgedStartDepNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDepNamesVector(builder, numElems):
    return OnorbitDetails_AbridgedStartDepNamesVector(builder, numElems)

def OnorbitDetails_AbridgedAddDepEstMasses(builder, depEstMasses):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(depEstMasses), 0)

def AddDepEstMasses(builder, depEstMasses):
    OnorbitDetails_AbridgedAddDepEstMasses(builder, depEstMasses)

def OnorbitDetails_AbridgedStartDepEstMassesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDepEstMassesVector(builder, numElems):
    return OnorbitDetails_AbridgedStartDepEstMassesVector(builder, numElems)

def OnorbitDetails_AbridgedAddDepMassUncs(builder, depMassUncs):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(depMassUncs), 0)

def AddDepMassUncs(builder, depMassUncs):
    OnorbitDetails_AbridgedAddDepMassUncs(builder, depMassUncs)

def OnorbitDetails_AbridgedStartDepMassUncsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDepMassUncsVector(builder, numElems):
    return OnorbitDetails_AbridgedStartDepMassUncsVector(builder, numElems)

def OnorbitDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitDetails_AbridgedAddSource(builder, source)

def OnorbitDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitDetails_AbridgedAddOrigin(builder, origin)

def OnorbitDetails_AbridgedAddLastObSource(builder, lastObSource):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(lastObSource), 0)

def AddLastObSource(builder, lastObSource):
    OnorbitDetails_AbridgedAddLastObSource(builder, lastObSource)

def OnorbitDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(44, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitDetails_AbridgedAddDataMode(builder, dataMode)

def OnorbitDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitDetails_AbridgedAddCreatedAt(builder, createdAt)

def OnorbitDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitDetails_AbridgedAddCreatedBy(builder, createdBy)

def OnorbitDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def OnorbitDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitDetails_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class OnorbitDetails_AbridgedT(object):

    # OnorbitDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idOnOrbit = None  # type: str
        self.classificationMarking = None  # type: str
        self.lastObTime = None  # type: str
        self.vismag = 0.0  # type: float
        self.vismagMin = 0.0  # type: float
        self.vismagMax = 0.0  # type: float
        self.vismagMean = 0.0  # type: float
        self.rcs = 0.0  # type: float
        self.rcsMin = 0.0  # type: float
        self.rcsMax = 0.0  # type: float
        self.rcsMean = 0.0  # type: float
        self.bolDeltaV = 0.0  # type: float
        self.maxDeltaV = 0.0  # type: float
        self.deltaVunc = 0.0  # type: float
        self.estDeltaVduration = 0.0  # type: float
        self.numMission = 0  # type: int
        self.missionTypes = None  # type: List[str]
        self.busType = None  # type: str
        self.geoSlot = 0.0  # type: float
        self.driftRate = 0.0  # type: float
        self.dryMass = 0.0  # type: float
        self.additionalMass = 0.0  # type: float
        self.launchMassMin = 0.0  # type: float
        self.launchMass = 0.0  # type: float
        self.launchMassMax = 0.0  # type: float
        self.bolFuelMass = 0.0  # type: float
        self.currentMass = 0.0  # type: float
        self.totalMassUnc = 0.0  # type: float
        self.solarArrayArea = 0.0  # type: float
        self.maneuverable = False  # type: bool
        self.fuelRemaining = 0.0  # type: float
        self.crossSection = 0.0  # type: float
        self.busCrossSection = 0.0  # type: float
        self.maxRadius = 0.0  # type: float
        self.colaRadius = 0.0  # type: float
        self.adeptRadius = 0.0  # type: float
        self.numDeployable = 0  # type: int
        self.depNames = None  # type: List[str]
        self.depEstMasses = None  # type: List[str]
        self.depMassUncs = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.lastObSource = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitDetailsAbridged = OnorbitDetails_Abridged()
        onorbitDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(onorbitDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitDetailsAbridged):
        x = OnorbitDetails_AbridgedT()
        x._UnPack(onorbitDetailsAbridged)
        return x

    # OnorbitDetails_AbridgedT
    def _UnPack(self, onorbitDetailsAbridged):
        if onorbitDetailsAbridged is None:
            return
        self.id = onorbitDetailsAbridged.Id()
        self.idOnOrbit = onorbitDetailsAbridged.IdOnOrbit()
        self.classificationMarking = onorbitDetailsAbridged.ClassificationMarking()
        self.lastObTime = onorbitDetailsAbridged.LastObTime()
        self.vismag = onorbitDetailsAbridged.Vismag()
        self.vismagMin = onorbitDetailsAbridged.VismagMin()
        self.vismagMax = onorbitDetailsAbridged.VismagMax()
        self.vismagMean = onorbitDetailsAbridged.VismagMean()
        self.rcs = onorbitDetailsAbridged.Rcs()
        self.rcsMin = onorbitDetailsAbridged.RcsMin()
        self.rcsMax = onorbitDetailsAbridged.RcsMax()
        self.rcsMean = onorbitDetailsAbridged.RcsMean()
        self.bolDeltaV = onorbitDetailsAbridged.BolDeltaV()
        self.maxDeltaV = onorbitDetailsAbridged.MaxDeltaV()
        self.deltaVunc = onorbitDetailsAbridged.DeltaVunc()
        self.estDeltaVduration = onorbitDetailsAbridged.EstDeltaVduration()
        self.numMission = onorbitDetailsAbridged.NumMission()
        if not onorbitDetailsAbridged.MissionTypesIsNone():
            self.missionTypes = []
            for i in range(onorbitDetailsAbridged.MissionTypesLength()):
                self.missionTypes.append(onorbitDetailsAbridged.MissionTypes(i))
        self.busType = onorbitDetailsAbridged.BusType()
        self.geoSlot = onorbitDetailsAbridged.GeoSlot()
        self.driftRate = onorbitDetailsAbridged.DriftRate()
        self.dryMass = onorbitDetailsAbridged.DryMass()
        self.additionalMass = onorbitDetailsAbridged.AdditionalMass()
        self.launchMassMin = onorbitDetailsAbridged.LaunchMassMin()
        self.launchMass = onorbitDetailsAbridged.LaunchMass()
        self.launchMassMax = onorbitDetailsAbridged.LaunchMassMax()
        self.bolFuelMass = onorbitDetailsAbridged.BolFuelMass()
        self.currentMass = onorbitDetailsAbridged.CurrentMass()
        self.totalMassUnc = onorbitDetailsAbridged.TotalMassUnc()
        self.solarArrayArea = onorbitDetailsAbridged.SolarArrayArea()
        self.maneuverable = onorbitDetailsAbridged.Maneuverable()
        self.fuelRemaining = onorbitDetailsAbridged.FuelRemaining()
        self.crossSection = onorbitDetailsAbridged.CrossSection()
        self.busCrossSection = onorbitDetailsAbridged.BusCrossSection()
        self.maxRadius = onorbitDetailsAbridged.MaxRadius()
        self.colaRadius = onorbitDetailsAbridged.ColaRadius()
        self.adeptRadius = onorbitDetailsAbridged.AdeptRadius()
        self.numDeployable = onorbitDetailsAbridged.NumDeployable()
        if not onorbitDetailsAbridged.DepNamesIsNone():
            self.depNames = []
            for i in range(onorbitDetailsAbridged.DepNamesLength()):
                self.depNames.append(onorbitDetailsAbridged.DepNames(i))
        if not onorbitDetailsAbridged.DepEstMassesIsNone():
            self.depEstMasses = []
            for i in range(onorbitDetailsAbridged.DepEstMassesLength()):
                self.depEstMasses.append(onorbitDetailsAbridged.DepEstMasses(i))
        if not onorbitDetailsAbridged.DepMassUncsIsNone():
            self.depMassUncs = []
            for i in range(onorbitDetailsAbridged.DepMassUncsLength()):
                self.depMassUncs.append(onorbitDetailsAbridged.DepMassUncs(i))
        self.source = onorbitDetailsAbridged.Source()
        self.origin = onorbitDetailsAbridged.Origin()
        self.lastObSource = onorbitDetailsAbridged.LastObSource()
        self.dataMode = onorbitDetailsAbridged.DataMode()
        self.createdAt = onorbitDetailsAbridged.CreatedAt()
        self.createdBy = onorbitDetailsAbridged.CreatedBy()
        self.origNetwork = onorbitDetailsAbridged.OrigNetwork()

    # OnorbitDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.lastObTime is not None:
            lastObTime = builder.CreateString(self.lastObTime)
        if self.missionTypes is not None:
            missionTypeslist = []
            for i in range(len(self.missionTypes)):
                missionTypeslist.append(builder.CreateString(self.missionTypes[i]))
            OnorbitDetails_AbridgedStartMissionTypesVector(builder, len(self.missionTypes))
            for i in reversed(range(len(self.missionTypes))):
                builder.PrependUOffsetTRelative(missionTypeslist[i])
            missionTypes = builder.EndVector()
        if self.busType is not None:
            busType = builder.CreateString(self.busType)
        if self.depNames is not None:
            depNameslist = []
            for i in range(len(self.depNames)):
                depNameslist.append(builder.CreateString(self.depNames[i]))
            OnorbitDetails_AbridgedStartDepNamesVector(builder, len(self.depNames))
            for i in reversed(range(len(self.depNames))):
                builder.PrependUOffsetTRelative(depNameslist[i])
            depNames = builder.EndVector()
        if self.depEstMasses is not None:
            depEstMasseslist = []
            for i in range(len(self.depEstMasses)):
                depEstMasseslist.append(builder.CreateString(self.depEstMasses[i]))
            OnorbitDetails_AbridgedStartDepEstMassesVector(builder, len(self.depEstMasses))
            for i in reversed(range(len(self.depEstMasses))):
                builder.PrependUOffsetTRelative(depEstMasseslist[i])
            depEstMasses = builder.EndVector()
        if self.depMassUncs is not None:
            depMassUncslist = []
            for i in range(len(self.depMassUncs)):
                depMassUncslist.append(builder.CreateString(self.depMassUncs[i]))
            OnorbitDetails_AbridgedStartDepMassUncsVector(builder, len(self.depMassUncs))
            for i in reversed(range(len(self.depMassUncs))):
                builder.PrependUOffsetTRelative(depMassUncslist[i])
            depMassUncs = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.lastObSource is not None:
            lastObSource = builder.CreateString(self.lastObSource)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitDetails_AbridgedStart(builder)
        if self.id is not None:
            OnorbitDetails_AbridgedAddId(builder, id)
        if self.idOnOrbit is not None:
            OnorbitDetails_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.classificationMarking is not None:
            OnorbitDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.lastObTime is not None:
            OnorbitDetails_AbridgedAddLastObTime(builder, lastObTime)
        OnorbitDetails_AbridgedAddVismag(builder, self.vismag)
        OnorbitDetails_AbridgedAddVismagMin(builder, self.vismagMin)
        OnorbitDetails_AbridgedAddVismagMax(builder, self.vismagMax)
        OnorbitDetails_AbridgedAddVismagMean(builder, self.vismagMean)
        OnorbitDetails_AbridgedAddRcs(builder, self.rcs)
        OnorbitDetails_AbridgedAddRcsMin(builder, self.rcsMin)
        OnorbitDetails_AbridgedAddRcsMax(builder, self.rcsMax)
        OnorbitDetails_AbridgedAddRcsMean(builder, self.rcsMean)
        OnorbitDetails_AbridgedAddBolDeltaV(builder, self.bolDeltaV)
        OnorbitDetails_AbridgedAddMaxDeltaV(builder, self.maxDeltaV)
        OnorbitDetails_AbridgedAddDeltaVunc(builder, self.deltaVunc)
        OnorbitDetails_AbridgedAddEstDeltaVduration(builder, self.estDeltaVduration)
        OnorbitDetails_AbridgedAddNumMission(builder, self.numMission)
        if self.missionTypes is not None:
            OnorbitDetails_AbridgedAddMissionTypes(builder, missionTypes)
        if self.busType is not None:
            OnorbitDetails_AbridgedAddBusType(builder, busType)
        OnorbitDetails_AbridgedAddGeoSlot(builder, self.geoSlot)
        OnorbitDetails_AbridgedAddDriftRate(builder, self.driftRate)
        OnorbitDetails_AbridgedAddDryMass(builder, self.dryMass)
        OnorbitDetails_AbridgedAddAdditionalMass(builder, self.additionalMass)
        OnorbitDetails_AbridgedAddLaunchMassMin(builder, self.launchMassMin)
        OnorbitDetails_AbridgedAddLaunchMass(builder, self.launchMass)
        OnorbitDetails_AbridgedAddLaunchMassMax(builder, self.launchMassMax)
        OnorbitDetails_AbridgedAddBolFuelMass(builder, self.bolFuelMass)
        OnorbitDetails_AbridgedAddCurrentMass(builder, self.currentMass)
        OnorbitDetails_AbridgedAddTotalMassUnc(builder, self.totalMassUnc)
        OnorbitDetails_AbridgedAddSolarArrayArea(builder, self.solarArrayArea)
        OnorbitDetails_AbridgedAddManeuverable(builder, self.maneuverable)
        OnorbitDetails_AbridgedAddFuelRemaining(builder, self.fuelRemaining)
        OnorbitDetails_AbridgedAddCrossSection(builder, self.crossSection)
        OnorbitDetails_AbridgedAddBusCrossSection(builder, self.busCrossSection)
        OnorbitDetails_AbridgedAddMaxRadius(builder, self.maxRadius)
        OnorbitDetails_AbridgedAddColaRadius(builder, self.colaRadius)
        OnorbitDetails_AbridgedAddAdeptRadius(builder, self.adeptRadius)
        OnorbitDetails_AbridgedAddNumDeployable(builder, self.numDeployable)
        if self.depNames is not None:
            OnorbitDetails_AbridgedAddDepNames(builder, depNames)
        if self.depEstMasses is not None:
            OnorbitDetails_AbridgedAddDepEstMasses(builder, depEstMasses)
        if self.depMassUncs is not None:
            OnorbitDetails_AbridgedAddDepMassUncs(builder, depMassUncs)
        if self.source is not None:
            OnorbitDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            OnorbitDetails_AbridgedAddOrigin(builder, origin)
        if self.lastObSource is not None:
            OnorbitDetails_AbridgedAddLastObSource(builder, lastObSource)
        OnorbitDetails_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            OnorbitDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitDetails_AbridgedAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            OnorbitDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        onorbitDetailsAbridged = OnorbitDetails_AbridgedEnd(builder)
        return onorbitDetailsAbridged
