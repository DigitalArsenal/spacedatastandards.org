# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details for an radar payload from  Seradata.
class SeradataRadarPayload_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeradataRadarPayload_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeradataRadarPayload_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SeradataRadarPayload_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x52\x41", size_prefixed=size_prefixed)

    # SeradataRadarPayload_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SERADATARADARPAYLOAD-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataRadarPayload_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SeradataRadarPayload_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: 12345
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataRadarPayload_Abridged
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the Sensor record.
    # Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataRadarPayload_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hosted for company/Organization Id.
    # Example: /// Example: hostedForCompanyOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataRadarPayload_Abridged
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Manufacturer Organization Id.
    # Example: /// Example: manufacturerOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataRadarPayload_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Radar category, e.g. SAR, Surface Search, etc.
    # Example: /// Example: SAR
    # Constraints: Minimum length = 0, Maximum length = 20
    # SeradataRadarPayload_Abridged
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
    # Example: /// Example: ALT
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    # Example: /// Example: X
    # Constraints: Minimum length = 0, Maximum length = 10
    # SeradataRadarPayload_Abridged
    def FrequencyBand(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Frequency in giga hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Wave length in meters.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def WaveLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Best resolution in meters.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def BestResolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Swath width in kilometers.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def SwathWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Recorder size, e.g. 256.
    # Example: /// Example: 256
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def RecorderSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Field of view of this radar in kilometers.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def FieldOfView(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Field of regard of this radar in degrees.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def FieldOfRegard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Point method for this radar, e.g. Spacecraft.
    # Example: /// Example: Spacecraft
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def PointingMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground Station info for this payload.
    # Example: /// Example: groundStations
    # Constraints: Minimum length = 0, Maximum length = 128
    # SeradataRadarPayload_Abridged
    def GroundStations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground Station Locations for this payload.
    # Example: /// Example: 51,42N-44,35E
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataRadarPayload_Abridged
    def GroundStationLocations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transmit polarization, e.g. Lin Dual, Lin vert, etc.
    # Example: /// Example: Lin Dual
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def TransmitPolarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Receive polarization, e.g. Lin Dual, Lin vert, etc.
    # Example: /// Example: Lin Dual
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def ReceivePolarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Duty cycle.
    # Example: /// Example: dutyCycle
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def DutyCycle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Partner seradata-spacecraft.
    # Example: /// Example: partnerSpacecraft
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataRadarPayload_Abridged
    def PartnerSpacecraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Constellation interferometric capability.
    # Example: /// Example: constellationInterferometricCapability
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataRadarPayload_Abridged
    def ConstellationInterferometricCapability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Payload notes.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SeradataRadarPayload_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Radar bandwidth in mega hertz.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataRadarPayload_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataRadarPayload_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataRadarPayload_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataRadarPayload_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataRadarPayload_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataRadarPayload_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SeradataRadarPayload_AbridgedStart(builder):
    builder.StartObject(32)

def Start(builder):
    SeradataRadarPayload_AbridgedStart(builder)

def SeradataRadarPayload_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SeradataRadarPayload_AbridgedAddId(builder, id)

def SeradataRadarPayload_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SeradataRadarPayload_AbridgedAddClassificationMarking(builder, classificationMarking)

def SeradataRadarPayload_AbridgedAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    SeradataRadarPayload_AbridgedAddSpacecraftId(builder, spacecraftId)

def SeradataRadarPayload_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SeradataRadarPayload_AbridgedAddIdSensor(builder, idSensor)

def SeradataRadarPayload_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    SeradataRadarPayload_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def SeradataRadarPayload_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SeradataRadarPayload_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def SeradataRadarPayload_AbridgedAddCategory(builder, category):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)

def AddCategory(builder, category):
    SeradataRadarPayload_AbridgedAddCategory(builder, category)

def SeradataRadarPayload_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SeradataRadarPayload_AbridgedAddName(builder, name)

def SeradataRadarPayload_AbridgedAddFrequencyBand(builder, frequencyBand):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(frequencyBand), 0)

def AddFrequencyBand(builder, frequencyBand):
    SeradataRadarPayload_AbridgedAddFrequencyBand(builder, frequencyBand)

def SeradataRadarPayload_AbridgedAddFrequency(builder, frequency):
    builder.PrependFloat64Slot(9, frequency, 0.0)

def AddFrequency(builder, frequency):
    SeradataRadarPayload_AbridgedAddFrequency(builder, frequency)

def SeradataRadarPayload_AbridgedAddWaveLength(builder, waveLength):
    builder.PrependFloat64Slot(10, waveLength, 0.0)

def AddWaveLength(builder, waveLength):
    SeradataRadarPayload_AbridgedAddWaveLength(builder, waveLength)

def SeradataRadarPayload_AbridgedAddBestResolution(builder, bestResolution):
    builder.PrependFloat64Slot(11, bestResolution, 0.0)

def AddBestResolution(builder, bestResolution):
    SeradataRadarPayload_AbridgedAddBestResolution(builder, bestResolution)

def SeradataRadarPayload_AbridgedAddSwathWidth(builder, swathWidth):
    builder.PrependFloat64Slot(12, swathWidth, 0.0)

def AddSwathWidth(builder, swathWidth):
    SeradataRadarPayload_AbridgedAddSwathWidth(builder, swathWidth)

def SeradataRadarPayload_AbridgedAddRecorderSize(builder, recorderSize):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(recorderSize), 0)

def AddRecorderSize(builder, recorderSize):
    SeradataRadarPayload_AbridgedAddRecorderSize(builder, recorderSize)

def SeradataRadarPayload_AbridgedAddFieldOfView(builder, fieldOfView):
    builder.PrependFloat64Slot(14, fieldOfView, 0.0)

def AddFieldOfView(builder, fieldOfView):
    SeradataRadarPayload_AbridgedAddFieldOfView(builder, fieldOfView)

def SeradataRadarPayload_AbridgedAddFieldOfRegard(builder, fieldOfRegard):
    builder.PrependFloat64Slot(15, fieldOfRegard, 0.0)

def AddFieldOfRegard(builder, fieldOfRegard):
    SeradataRadarPayload_AbridgedAddFieldOfRegard(builder, fieldOfRegard)

def SeradataRadarPayload_AbridgedAddPointingMethod(builder, pointingMethod):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(pointingMethod), 0)

def AddPointingMethod(builder, pointingMethod):
    SeradataRadarPayload_AbridgedAddPointingMethod(builder, pointingMethod)

def SeradataRadarPayload_AbridgedAddGroundStations(builder, groundStations):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(groundStations), 0)

def AddGroundStations(builder, groundStations):
    SeradataRadarPayload_AbridgedAddGroundStations(builder, groundStations)

def SeradataRadarPayload_AbridgedAddGroundStationLocations(builder, groundStationLocations):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(groundStationLocations), 0)

def AddGroundStationLocations(builder, groundStationLocations):
    SeradataRadarPayload_AbridgedAddGroundStationLocations(builder, groundStationLocations)

def SeradataRadarPayload_AbridgedAddTransmitPolarization(builder, transmitPolarization):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(transmitPolarization), 0)

def AddTransmitPolarization(builder, transmitPolarization):
    SeradataRadarPayload_AbridgedAddTransmitPolarization(builder, transmitPolarization)

def SeradataRadarPayload_AbridgedAddReceivePolarization(builder, receivePolarization):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(receivePolarization), 0)

def AddReceivePolarization(builder, receivePolarization):
    SeradataRadarPayload_AbridgedAddReceivePolarization(builder, receivePolarization)

def SeradataRadarPayload_AbridgedAddDutyCycle(builder, dutyCycle):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(dutyCycle), 0)

def AddDutyCycle(builder, dutyCycle):
    SeradataRadarPayload_AbridgedAddDutyCycle(builder, dutyCycle)

def SeradataRadarPayload_AbridgedAddPartnerSpacecraft(builder, partnerSpacecraft):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(partnerSpacecraft), 0)

def AddPartnerSpacecraft(builder, partnerSpacecraft):
    SeradataRadarPayload_AbridgedAddPartnerSpacecraft(builder, partnerSpacecraft)

def SeradataRadarPayload_AbridgedAddConstellationInterferometricCapability(builder, constellationInterferometricCapability):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(constellationInterferometricCapability), 0)

def AddConstellationInterferometricCapability(builder, constellationInterferometricCapability):
    SeradataRadarPayload_AbridgedAddConstellationInterferometricCapability(builder, constellationInterferometricCapability)

def SeradataRadarPayload_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    SeradataRadarPayload_AbridgedAddNotes(builder, notes)

def SeradataRadarPayload_AbridgedAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(25, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    SeradataRadarPayload_AbridgedAddBandwidth(builder, bandwidth)

def SeradataRadarPayload_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SeradataRadarPayload_AbridgedAddCreatedAt(builder, createdAt)

def SeradataRadarPayload_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SeradataRadarPayload_AbridgedAddCreatedBy(builder, createdBy)

def SeradataRadarPayload_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SeradataRadarPayload_AbridgedAddSource(builder, source)

def SeradataRadarPayload_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SeradataRadarPayload_AbridgedAddOrigin(builder, origin)

def SeradataRadarPayload_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SeradataRadarPayload_AbridgedAddOrigNetwork(builder, origNetwork)

def SeradataRadarPayload_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(31, dataMode, 0)

def AddDataMode(builder, dataMode):
    SeradataRadarPayload_AbridgedAddDataMode(builder, dataMode)

def SeradataRadarPayload_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SeradataRadarPayload_AbridgedEnd(builder)


class SeradataRadarPayload_AbridgedT(object):

    # SeradataRadarPayload_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.spacecraftId = None  # type: str
        self.idSensor = None  # type: str
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.category = None  # type: str
        self.name = None  # type: str
        self.frequencyBand = None  # type: str
        self.frequency = 0.0  # type: float
        self.waveLength = 0.0  # type: float
        self.bestResolution = 0.0  # type: float
        self.swathWidth = 0.0  # type: float
        self.recorderSize = None  # type: str
        self.fieldOfView = 0.0  # type: float
        self.fieldOfRegard = 0.0  # type: float
        self.pointingMethod = None  # type: str
        self.groundStations = None  # type: str
        self.groundStationLocations = None  # type: str
        self.transmitPolarization = None  # type: str
        self.receivePolarization = None  # type: str
        self.dutyCycle = None  # type: str
        self.partnerSpacecraft = None  # type: str
        self.constellationInterferometricCapability = None  # type: str
        self.notes = None  # type: str
        self.bandwidth = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seradataRadarPayloadAbridged = SeradataRadarPayload_Abridged()
        seradataRadarPayloadAbridged.Init(buf, pos)
        return cls.InitFromObj(seradataRadarPayloadAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seradataRadarPayloadAbridged):
        x = SeradataRadarPayload_AbridgedT()
        x._UnPack(seradataRadarPayloadAbridged)
        return x

    # SeradataRadarPayload_AbridgedT
    def _UnPack(self, seradataRadarPayloadAbridged):
        if seradataRadarPayloadAbridged is None:
            return
        self.id = seradataRadarPayloadAbridged.Id()
        self.classificationMarking = seradataRadarPayloadAbridged.ClassificationMarking()
        self.spacecraftId = seradataRadarPayloadAbridged.SpacecraftId()
        self.idSensor = seradataRadarPayloadAbridged.IdSensor()
        self.hostedForCompanyOrgId = seradataRadarPayloadAbridged.HostedForCompanyOrgId()
        self.manufacturerOrgId = seradataRadarPayloadAbridged.ManufacturerOrgId()
        self.category = seradataRadarPayloadAbridged.Category()
        self.name = seradataRadarPayloadAbridged.Name()
        self.frequencyBand = seradataRadarPayloadAbridged.FrequencyBand()
        self.frequency = seradataRadarPayloadAbridged.Frequency()
        self.waveLength = seradataRadarPayloadAbridged.WaveLength()
        self.bestResolution = seradataRadarPayloadAbridged.BestResolution()
        self.swathWidth = seradataRadarPayloadAbridged.SwathWidth()
        self.recorderSize = seradataRadarPayloadAbridged.RecorderSize()
        self.fieldOfView = seradataRadarPayloadAbridged.FieldOfView()
        self.fieldOfRegard = seradataRadarPayloadAbridged.FieldOfRegard()
        self.pointingMethod = seradataRadarPayloadAbridged.PointingMethod()
        self.groundStations = seradataRadarPayloadAbridged.GroundStations()
        self.groundStationLocations = seradataRadarPayloadAbridged.GroundStationLocations()
        self.transmitPolarization = seradataRadarPayloadAbridged.TransmitPolarization()
        self.receivePolarization = seradataRadarPayloadAbridged.ReceivePolarization()
        self.dutyCycle = seradataRadarPayloadAbridged.DutyCycle()
        self.partnerSpacecraft = seradataRadarPayloadAbridged.PartnerSpacecraft()
        self.constellationInterferometricCapability = seradataRadarPayloadAbridged.ConstellationInterferometricCapability()
        self.notes = seradataRadarPayloadAbridged.Notes()
        self.bandwidth = seradataRadarPayloadAbridged.Bandwidth()
        self.createdAt = seradataRadarPayloadAbridged.CreatedAt()
        self.createdBy = seradataRadarPayloadAbridged.CreatedBy()
        self.source = seradataRadarPayloadAbridged.Source()
        self.origin = seradataRadarPayloadAbridged.Origin()
        self.origNetwork = seradataRadarPayloadAbridged.OrigNetwork()
        self.dataMode = seradataRadarPayloadAbridged.DataMode()

    # SeradataRadarPayload_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.category is not None:
            category = builder.CreateString(self.category)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.frequencyBand is not None:
            frequencyBand = builder.CreateString(self.frequencyBand)
        if self.recorderSize is not None:
            recorderSize = builder.CreateString(self.recorderSize)
        if self.pointingMethod is not None:
            pointingMethod = builder.CreateString(self.pointingMethod)
        if self.groundStations is not None:
            groundStations = builder.CreateString(self.groundStations)
        if self.groundStationLocations is not None:
            groundStationLocations = builder.CreateString(self.groundStationLocations)
        if self.transmitPolarization is not None:
            transmitPolarization = builder.CreateString(self.transmitPolarization)
        if self.receivePolarization is not None:
            receivePolarization = builder.CreateString(self.receivePolarization)
        if self.dutyCycle is not None:
            dutyCycle = builder.CreateString(self.dutyCycle)
        if self.partnerSpacecraft is not None:
            partnerSpacecraft = builder.CreateString(self.partnerSpacecraft)
        if self.constellationInterferometricCapability is not None:
            constellationInterferometricCapability = builder.CreateString(self.constellationInterferometricCapability)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SeradataRadarPayload_AbridgedStart(builder)
        if self.id is not None:
            SeradataRadarPayload_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            SeradataRadarPayload_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.spacecraftId is not None:
            SeradataRadarPayload_AbridgedAddSpacecraftId(builder, spacecraftId)
        if self.idSensor is not None:
            SeradataRadarPayload_AbridgedAddIdSensor(builder, idSensor)
        if self.hostedForCompanyOrgId is not None:
            SeradataRadarPayload_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            SeradataRadarPayload_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.category is not None:
            SeradataRadarPayload_AbridgedAddCategory(builder, category)
        if self.name is not None:
            SeradataRadarPayload_AbridgedAddName(builder, name)
        if self.frequencyBand is not None:
            SeradataRadarPayload_AbridgedAddFrequencyBand(builder, frequencyBand)
        SeradataRadarPayload_AbridgedAddFrequency(builder, self.frequency)
        SeradataRadarPayload_AbridgedAddWaveLength(builder, self.waveLength)
        SeradataRadarPayload_AbridgedAddBestResolution(builder, self.bestResolution)
        SeradataRadarPayload_AbridgedAddSwathWidth(builder, self.swathWidth)
        if self.recorderSize is not None:
            SeradataRadarPayload_AbridgedAddRecorderSize(builder, recorderSize)
        SeradataRadarPayload_AbridgedAddFieldOfView(builder, self.fieldOfView)
        SeradataRadarPayload_AbridgedAddFieldOfRegard(builder, self.fieldOfRegard)
        if self.pointingMethod is not None:
            SeradataRadarPayload_AbridgedAddPointingMethod(builder, pointingMethod)
        if self.groundStations is not None:
            SeradataRadarPayload_AbridgedAddGroundStations(builder, groundStations)
        if self.groundStationLocations is not None:
            SeradataRadarPayload_AbridgedAddGroundStationLocations(builder, groundStationLocations)
        if self.transmitPolarization is not None:
            SeradataRadarPayload_AbridgedAddTransmitPolarization(builder, transmitPolarization)
        if self.receivePolarization is not None:
            SeradataRadarPayload_AbridgedAddReceivePolarization(builder, receivePolarization)
        if self.dutyCycle is not None:
            SeradataRadarPayload_AbridgedAddDutyCycle(builder, dutyCycle)
        if self.partnerSpacecraft is not None:
            SeradataRadarPayload_AbridgedAddPartnerSpacecraft(builder, partnerSpacecraft)
        if self.constellationInterferometricCapability is not None:
            SeradataRadarPayload_AbridgedAddConstellationInterferometricCapability(builder, constellationInterferometricCapability)
        if self.notes is not None:
            SeradataRadarPayload_AbridgedAddNotes(builder, notes)
        SeradataRadarPayload_AbridgedAddBandwidth(builder, self.bandwidth)
        if self.createdAt is not None:
            SeradataRadarPayload_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SeradataRadarPayload_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SeradataRadarPayload_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SeradataRadarPayload_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SeradataRadarPayload_AbridgedAddOrigNetwork(builder, origNetwork)
        SeradataRadarPayload_AbridgedAddDataMode(builder, self.dataMode)
        seradataRadarPayloadAbridged = SeradataRadarPayload_AbridgedEnd(builder)
        return seradataRadarPayloadAbridged
