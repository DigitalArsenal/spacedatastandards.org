# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
class BatteryDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BatteryDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBatteryDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def BatteryDetailsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x41\x54\x54", size_prefixed=size_prefixed)

    # BatteryDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BATTERYDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BatteryDetails
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent battery type record.
    # Example: /// Example: BATTERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # BatteryDetails
    def IdBattery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # BatteryDetails
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
    # Example: /// Example: Ni-Cd
    # Constraints: Minimum length = 0, Maximum length = 32
    # BatteryDetails
    def Technology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery capacity in Ah.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # BatteryDetails
    def Capacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Depth of discharge as a percentage/fraction.
    # Example: /// Example: 0.2
    # Constraints: No constraints specified.
    # BatteryDetails
    def DischargeDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Battery model number or name.
    # Example: /// Example: 11212
    # Constraints: Minimum length = 0, Maximum length = 128
    # BatteryDetails
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Battery description/notes.
    # Example: /// Example: example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # BatteryDetails
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the organization that manufactures the battery.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # BatteryDetails
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # BatteryDetails
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # BatteryDetails
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # BatteryDetails
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # BatteryDetails
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # BatteryDetails
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # BatteryDetails
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # BatteryDetails
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # BatteryDetails
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # BatteryDetails
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # BatteryDetails
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BatteryDetails
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # BatteryDetails
    def ManufacturerOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BatteryDetailsStart(builder):
    builder.StartObject(19)

def Start(builder):
    BatteryDetailsStart(builder)

def BatteryDetailsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    BatteryDetailsAddId(builder, id)

def BatteryDetailsAddIdBattery(builder, idBattery):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idBattery), 0)

def AddIdBattery(builder, idBattery):
    BatteryDetailsAddIdBattery(builder, idBattery)

def BatteryDetailsAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    BatteryDetailsAddClassificationMarking(builder, classificationMarking)

def BatteryDetailsAddTechnology(builder, technology):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(technology), 0)

def AddTechnology(builder, technology):
    BatteryDetailsAddTechnology(builder, technology)

def BatteryDetailsAddCapacity(builder, capacity):
    builder.PrependFloat64Slot(4, capacity, 0.0)

def AddCapacity(builder, capacity):
    BatteryDetailsAddCapacity(builder, capacity)

def BatteryDetailsAddDischargeDepth(builder, dischargeDepth):
    builder.PrependFloat64Slot(5, dischargeDepth, 0.0)

def AddDischargeDepth(builder, dischargeDepth):
    BatteryDetailsAddDischargeDepth(builder, dischargeDepth)

def BatteryDetailsAddModel(builder, model):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(model), 0)

def AddModel(builder, model):
    BatteryDetailsAddModel(builder, model)

def BatteryDetailsAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    BatteryDetailsAddDescription(builder, description)

def BatteryDetailsAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    BatteryDetailsAddManufacturerOrgId(builder, manufacturerOrgId)

def BatteryDetailsAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    BatteryDetailsAddCreatedAt(builder, createdAt)

def BatteryDetailsAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    BatteryDetailsAddCreatedBy(builder, createdBy)

def BatteryDetailsAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    BatteryDetailsAddUpdatedAt(builder, updatedAt)

def BatteryDetailsAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    BatteryDetailsAddUpdatedBy(builder, updatedBy)

def BatteryDetailsAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    BatteryDetailsAddSource(builder, source)

def BatteryDetailsAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    BatteryDetailsAddOrigin(builder, origin)

def BatteryDetailsAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    BatteryDetailsAddOrigNetwork(builder, origNetwork)

def BatteryDetailsAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(16, dataMode, 0)

def AddDataMode(builder, dataMode):
    BatteryDetailsAddDataMode(builder, dataMode)

def BatteryDetailsAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    BatteryDetailsAddTags(builder, tags)

def BatteryDetailsStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return BatteryDetailsStartTagsVector(builder, numElems)

def BatteryDetailsAddManufacturerOrg(builder, manufacturerOrg):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrg), 0)

def AddManufacturerOrg(builder, manufacturerOrg):
    BatteryDetailsAddManufacturerOrg(builder, manufacturerOrg)

def BatteryDetailsEnd(builder):
    return builder.EndObject()

def End(builder):
    return BatteryDetailsEnd(builder)

try:
    from typing import List
except:
    pass

class BatteryDetailsT(object):

    # BatteryDetailsT
    def __init__(self):
        self.id = None  # type: str
        self.idBattery = None  # type: str
        self.classificationMarking = None  # type: str
        self.technology = None  # type: str
        self.capacity = 0.0  # type: float
        self.dischargeDepth = 0.0  # type: float
        self.model = None  # type: str
        self.description = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.manufacturerOrg = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        batteryDetails = BatteryDetails()
        batteryDetails.Init(buf, pos)
        return cls.InitFromObj(batteryDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, batteryDetails):
        x = BatteryDetailsT()
        x._UnPack(batteryDetails)
        return x

    # BatteryDetailsT
    def _UnPack(self, batteryDetails):
        if batteryDetails is None:
            return
        self.id = batteryDetails.Id()
        self.idBattery = batteryDetails.IdBattery()
        self.classificationMarking = batteryDetails.ClassificationMarking()
        self.technology = batteryDetails.Technology()
        self.capacity = batteryDetails.Capacity()
        self.dischargeDepth = batteryDetails.DischargeDepth()
        self.model = batteryDetails.Model()
        self.description = batteryDetails.Description()
        self.manufacturerOrgId = batteryDetails.ManufacturerOrgId()
        self.createdAt = batteryDetails.CreatedAt()
        self.createdBy = batteryDetails.CreatedBy()
        self.updatedAt = batteryDetails.UpdatedAt()
        self.updatedBy = batteryDetails.UpdatedBy()
        self.source = batteryDetails.Source()
        self.origin = batteryDetails.Origin()
        self.origNetwork = batteryDetails.OrigNetwork()
        self.dataMode = batteryDetails.DataMode()
        if not batteryDetails.TagsIsNone():
            self.tags = []
            for i in range(batteryDetails.TagsLength()):
                self.tags.append(batteryDetails.Tags(i))
        self.manufacturerOrg = batteryDetails.ManufacturerOrg()

    # BatteryDetailsT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idBattery is not None:
            idBattery = builder.CreateString(self.idBattery)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.technology is not None:
            technology = builder.CreateString(self.technology)
        if self.model is not None:
            model = builder.CreateString(self.model)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            BatteryDetailsStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.manufacturerOrg is not None:
            manufacturerOrg = builder.CreateString(self.manufacturerOrg)
        BatteryDetailsStart(builder)
        if self.id is not None:
            BatteryDetailsAddId(builder, id)
        if self.idBattery is not None:
            BatteryDetailsAddIdBattery(builder, idBattery)
        if self.classificationMarking is not None:
            BatteryDetailsAddClassificationMarking(builder, classificationMarking)
        if self.technology is not None:
            BatteryDetailsAddTechnology(builder, technology)
        BatteryDetailsAddCapacity(builder, self.capacity)
        BatteryDetailsAddDischargeDepth(builder, self.dischargeDepth)
        if self.model is not None:
            BatteryDetailsAddModel(builder, model)
        if self.description is not None:
            BatteryDetailsAddDescription(builder, description)
        if self.manufacturerOrgId is not None:
            BatteryDetailsAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.createdAt is not None:
            BatteryDetailsAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            BatteryDetailsAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            BatteryDetailsAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            BatteryDetailsAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            BatteryDetailsAddSource(builder, source)
        if self.origin is not None:
            BatteryDetailsAddOrigin(builder, origin)
        if self.origNetwork is not None:
            BatteryDetailsAddOrigNetwork(builder, origNetwork)
        BatteryDetailsAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            BatteryDetailsAddTags(builder, tags)
        if self.manufacturerOrg is not None:
            BatteryDetailsAddManufacturerOrg(builder, manufacturerOrg)
        batteryDetails = BatteryDetailsEnd(builder)
        return batteryDetails
