# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CollectRequest_Abridged

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.
class CollectRequest_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CollectRequest_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCollectRequest_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CollectRequest_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: COLLECTREQUEST-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # CollectRequest_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # CollectRequest_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.
    # Example: da98671b-34db-47bf-8c8d-7c668b92c800
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdParentReq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of external message from which this request originated.
    # Example: SU67
    # Constraints: Minimum length = 0, Maximum length = 16
    # CollectRequest_Abridged
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
    # Example: 2024-04-25T08:17:01.346Z
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def MsgCreateDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
    # Example: DWELL
    # Constraints: Minimum length = 1, Maximum length = 36
    # CollectRequest_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.
    # Example: REF-PLAN-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdPlan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Index number (integer) for records within a collection plan or schedule.
    # Example: 8
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def PlanIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.
    # Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.
    # Example: DWELL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def DwellId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: EXTERNAL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.
    # Example: REF-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.
    # Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # CollectRequest_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.
    # Example: RADAR
    # Constraints: Minimum length = 0, Maximum length = 24
    # CollectRequest_Abridged
    def ObType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).
    # Example: EMERGENCY
    # Constraints: Minimum length = 0, Maximum length = 24
    # CollectRequest_Abridged
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.
    # Example: 4
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def TaskCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.
    # Example: T
    # Constraints: Minimum length = 0, Maximum length = 1
    # CollectRequest_Abridged
    def Suffix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating that this collect request is UCT follow-up.
    # Example: False
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def UctFollowUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.
    # Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.
    # Example: 2018-01-01T18:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object for this request.
    # Example: REF-ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object for this request.
    # Example: 101
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tasking group to which the target object is assigned.
    # Example: 729
    # Constraints: Minimum length = 0, Maximum length = 16
    # CollectRequest_Abridged
    def TaskGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.
    # Example: 3
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Iron(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
    # Example: GEO
    # Constraints: Minimum length = 0, Maximum length = 12
    # CollectRequest_Abridged
    def OrbitRegime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The minimum object (diameter) size, in meters, to be reported.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def TargetSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def RcsMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Radar Cross-Section of the target, in m^2.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Rcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum Radar Cross-Section of the target, in m^2.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def RcsMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def FreqMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated or expected emission frequency of the target, in MHz.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Freq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum frequency of interest, in MHz.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def FreqMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The RF polarization (H, LHC, RHC, V).
    # Example: H
    # Constraints: Minimum length = 0, Maximum length = 4
    # CollectRequest_Abridged
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def VisMagMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The estimated or expected visual magnitude of the target, in Magnitudes (M).
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def VisMag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def VisMagMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The spectral model used for the irradiance calculation.
    # Example: Example Model
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def SpectralModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The fraction of solar energy reflected from target.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Reflectance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The target object irradiance value.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Irradiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For optical sensors, the requested number of frames to capture at each sensor step.
    # Example: 6
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def NumFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # For optical sensors, the frame rate of the camera, in Hz.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def FrameRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # For optical sensors, the integration time per camera frame, in milliseconds.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def IntegrationTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.
    # Example: 3
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def NumTracks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of requested observations on the target.
    # Example: 9
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def NumObs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.
    # Example: 11
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).
    # Example: SCAN
    # Constraints: Minimum length = 0, Maximum length = 24
    # CollectRequest_Abridged
    def SrchPattern(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
    # Example: Example direction
    # Constraints: Minimum length = 0, Maximum length = 24
    # CollectRequest_Abridged
    def Scenario(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the UDL Elset of the object associated with this request.
    # Example: REF-ELSET-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
    # Example: REF-MANIFOLD-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdManifold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the UDL State Vector of the object or central vector associated with this request.
    # Example: STATEVECTOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def IdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the UDL Ephemeris Set of the object associated with this request.
    # Example: ES-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # CollectRequest_Abridged
    def EsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Epoch time, in ISO 8601 UTC format, of the orbital elements.
    # Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Epoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def SemiMajorAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Eccentricity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Inclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Raan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def ArgOfPerigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def TrueAnomoly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed right ascension angle, in degrees, for search or target acquisition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Ra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed declination angle, in degrees, for search or target acquisition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed azimuth angle, in degrees, for search or target acquisition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Az(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected or directed elevation angle, in degrees, for search or target acquisition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def El(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The expected acquisition range or defined center range, in km.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def ExtentAz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def ExtentEl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extent of the range, in km, from center range to define a spatial volume.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def ExtentRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def StopLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def StopLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def StopAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum inclination, in degrees, to be used in search operations.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def SrchInc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def XAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def YAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.
    # Example: 1.1
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def OrientAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The customer for this request.
    # Example: Bluestaq
    # Constraints: Minimum length = 0, Maximum length = 64
    # CollectRequest_Abridged
    def Customer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes or comments associated with this request.
    # Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # CollectRequest_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # CollectRequest_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # CollectRequest_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: Example source
    # Constraints: Minimum length = 0, Maximum length = 64
    # CollectRequest_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # CollectRequest_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    # Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # CollectRequest_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def StateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # CollectRequest_Abridged
    def Elset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CollectRequest_AbridgedStart(builder):
    builder.StartObject(87)

def Start(builder):
    CollectRequest_AbridgedStart(builder)

def CollectRequest_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    CollectRequest_AbridgedAddId(builder, id)

def CollectRequest_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    CollectRequest_AbridgedAddClassificationMarking(builder, classificationMarking)

def CollectRequest_AbridgedAddIdParentReq(builder, idParentReq):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idParentReq), 0)

def AddIdParentReq(builder, idParentReq):
    CollectRequest_AbridgedAddIdParentReq(builder, idParentReq)

def CollectRequest_AbridgedAddMsgType(builder, msgType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgType), 0)

def AddMsgType(builder, msgType):
    CollectRequest_AbridgedAddMsgType(builder, msgType)

def CollectRequest_AbridgedAddMsgCreateDate(builder, msgCreateDate):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(msgCreateDate), 0)

def AddMsgCreateDate(builder, msgCreateDate):
    CollectRequest_AbridgedAddMsgCreateDate(builder, msgCreateDate)

def CollectRequest_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    CollectRequest_AbridgedAddType(builder, type)

def CollectRequest_AbridgedAddIdPlan(builder, idPlan):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idPlan), 0)

def AddIdPlan(builder, idPlan):
    CollectRequest_AbridgedAddIdPlan(builder, idPlan)

def CollectRequest_AbridgedAddPlanIndex(builder, planIndex):
    builder.PrependInt32Slot(7, planIndex, 0)

def AddPlanIndex(builder, planIndex):
    CollectRequest_AbridgedAddPlanIndex(builder, planIndex)

def CollectRequest_AbridgedAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    CollectRequest_AbridgedAddTaskId(builder, taskId)

def CollectRequest_AbridgedAddDwellId(builder, dwellId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(dwellId), 0)

def AddDwellId(builder, dwellId):
    CollectRequest_AbridgedAddDwellId(builder, dwellId)

def CollectRequest_AbridgedAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    CollectRequest_AbridgedAddExternalId(builder, externalId)

def CollectRequest_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    CollectRequest_AbridgedAddIdSensor(builder, idSensor)

def CollectRequest_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    CollectRequest_AbridgedAddOrigSensorId(builder, origSensorId)

def CollectRequest_AbridgedAddObType(builder, obType):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(obType), 0)

def AddObType(builder, obType):
    CollectRequest_AbridgedAddObType(builder, obType)

def CollectRequest_AbridgedAddPriority(builder, priority):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)

def AddPriority(builder, priority):
    CollectRequest_AbridgedAddPriority(builder, priority)

def CollectRequest_AbridgedAddTaskCategory(builder, taskCategory):
    builder.PrependInt32Slot(15, taskCategory, 0)

def AddTaskCategory(builder, taskCategory):
    CollectRequest_AbridgedAddTaskCategory(builder, taskCategory)

def CollectRequest_AbridgedAddSuffix(builder, suffix):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(suffix), 0)

def AddSuffix(builder, suffix):
    CollectRequest_AbridgedAddSuffix(builder, suffix)

def CollectRequest_AbridgedAddUctFollowUp(builder, uctFollowUp):
    builder.PrependBoolSlot(17, uctFollowUp, 0)

def AddUctFollowUp(builder, uctFollowUp):
    CollectRequest_AbridgedAddUctFollowUp(builder, uctFollowUp)

def CollectRequest_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    CollectRequest_AbridgedAddStartTime(builder, startTime)

def CollectRequest_AbridgedAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    CollectRequest_AbridgedAddEndTime(builder, endTime)

def CollectRequest_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    CollectRequest_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def CollectRequest_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(21, satNo, 0)

def AddSatNo(builder, satNo):
    CollectRequest_AbridgedAddSatNo(builder, satNo)

def CollectRequest_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    CollectRequest_AbridgedAddOrigObjectId(builder, origObjectId)

def CollectRequest_AbridgedAddTaskGroup(builder, taskGroup):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(taskGroup), 0)

def AddTaskGroup(builder, taskGroup):
    CollectRequest_AbridgedAddTaskGroup(builder, taskGroup)

def CollectRequest_AbridgedAddIron(builder, iron):
    builder.PrependInt32Slot(24, iron, 0)

def AddIron(builder, iron):
    CollectRequest_AbridgedAddIron(builder, iron)

def CollectRequest_AbridgedAddOrbitRegime(builder, orbitRegime):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(orbitRegime), 0)

def AddOrbitRegime(builder, orbitRegime):
    CollectRequest_AbridgedAddOrbitRegime(builder, orbitRegime)

def CollectRequest_AbridgedAddTargetSize(builder, targetSize):
    builder.PrependFloat64Slot(26, targetSize, 0.0)

def AddTargetSize(builder, targetSize):
    CollectRequest_AbridgedAddTargetSize(builder, targetSize)

def CollectRequest_AbridgedAddRcsMin(builder, rcsMin):
    builder.PrependFloat64Slot(27, rcsMin, 0.0)

def AddRcsMin(builder, rcsMin):
    CollectRequest_AbridgedAddRcsMin(builder, rcsMin)

def CollectRequest_AbridgedAddRcs(builder, rcs):
    builder.PrependFloat64Slot(28, rcs, 0.0)

def AddRcs(builder, rcs):
    CollectRequest_AbridgedAddRcs(builder, rcs)

def CollectRequest_AbridgedAddRcsMax(builder, rcsMax):
    builder.PrependFloat64Slot(29, rcsMax, 0.0)

def AddRcsMax(builder, rcsMax):
    CollectRequest_AbridgedAddRcsMax(builder, rcsMax)

def CollectRequest_AbridgedAddFreqMin(builder, freqMin):
    builder.PrependFloat64Slot(30, freqMin, 0.0)

def AddFreqMin(builder, freqMin):
    CollectRequest_AbridgedAddFreqMin(builder, freqMin)

def CollectRequest_AbridgedAddFreq(builder, freq):
    builder.PrependFloat64Slot(31, freq, 0.0)

def AddFreq(builder, freq):
    CollectRequest_AbridgedAddFreq(builder, freq)

def CollectRequest_AbridgedAddFreqMax(builder, freqMax):
    builder.PrependFloat64Slot(32, freqMax, 0.0)

def AddFreqMax(builder, freqMax):
    CollectRequest_AbridgedAddFreqMax(builder, freqMax)

def CollectRequest_AbridgedAddPolarization(builder, polarization):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(polarization), 0)

def AddPolarization(builder, polarization):
    CollectRequest_AbridgedAddPolarization(builder, polarization)

def CollectRequest_AbridgedAddVisMagMin(builder, visMagMin):
    builder.PrependFloat64Slot(34, visMagMin, 0.0)

def AddVisMagMin(builder, visMagMin):
    CollectRequest_AbridgedAddVisMagMin(builder, visMagMin)

def CollectRequest_AbridgedAddVisMag(builder, visMag):
    builder.PrependFloat64Slot(35, visMag, 0.0)

def AddVisMag(builder, visMag):
    CollectRequest_AbridgedAddVisMag(builder, visMag)

def CollectRequest_AbridgedAddVisMagMax(builder, visMagMax):
    builder.PrependFloat64Slot(36, visMagMax, 0.0)

def AddVisMagMax(builder, visMagMax):
    CollectRequest_AbridgedAddVisMagMax(builder, visMagMax)

def CollectRequest_AbridgedAddSpectralModel(builder, spectralModel):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(spectralModel), 0)

def AddSpectralModel(builder, spectralModel):
    CollectRequest_AbridgedAddSpectralModel(builder, spectralModel)

def CollectRequest_AbridgedAddReflectance(builder, reflectance):
    builder.PrependFloat64Slot(38, reflectance, 0.0)

def AddReflectance(builder, reflectance):
    CollectRequest_AbridgedAddReflectance(builder, reflectance)

def CollectRequest_AbridgedAddIrradiance(builder, irradiance):
    builder.PrependFloat64Slot(39, irradiance, 0.0)

def AddIrradiance(builder, irradiance):
    CollectRequest_AbridgedAddIrradiance(builder, irradiance)

def CollectRequest_AbridgedAddNumFrames(builder, numFrames):
    builder.PrependInt32Slot(40, numFrames, 0)

def AddNumFrames(builder, numFrames):
    CollectRequest_AbridgedAddNumFrames(builder, numFrames)

def CollectRequest_AbridgedAddFrameRate(builder, frameRate):
    builder.PrependFloat64Slot(41, frameRate, 0.0)

def AddFrameRate(builder, frameRate):
    CollectRequest_AbridgedAddFrameRate(builder, frameRate)

def CollectRequest_AbridgedAddIntegrationTime(builder, integrationTime):
    builder.PrependFloat64Slot(42, integrationTime, 0.0)

def AddIntegrationTime(builder, integrationTime):
    CollectRequest_AbridgedAddIntegrationTime(builder, integrationTime)

def CollectRequest_AbridgedAddNumTracks(builder, numTracks):
    builder.PrependInt32Slot(43, numTracks, 0)

def AddNumTracks(builder, numTracks):
    CollectRequest_AbridgedAddNumTracks(builder, numTracks)

def CollectRequest_AbridgedAddNumObs(builder, numObs):
    builder.PrependInt32Slot(44, numObs, 0)

def AddNumObs(builder, numObs):
    CollectRequest_AbridgedAddNumObs(builder, numObs)

def CollectRequest_AbridgedAddDuration(builder, duration):
    builder.PrependInt32Slot(45, duration, 0)

def AddDuration(builder, duration):
    CollectRequest_AbridgedAddDuration(builder, duration)

def CollectRequest_AbridgedAddSrchPattern(builder, srchPattern):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(srchPattern), 0)

def AddSrchPattern(builder, srchPattern):
    CollectRequest_AbridgedAddSrchPattern(builder, srchPattern)

def CollectRequest_AbridgedAddScenario(builder, scenario):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(scenario), 0)

def AddScenario(builder, scenario):
    CollectRequest_AbridgedAddScenario(builder, scenario)

def CollectRequest_AbridgedAddIdElset(builder, idElset):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(idElset), 0)

def AddIdElset(builder, idElset):
    CollectRequest_AbridgedAddIdElset(builder, idElset)

def CollectRequest_AbridgedAddIdManifold(builder, idManifold):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(idManifold), 0)

def AddIdManifold(builder, idManifold):
    CollectRequest_AbridgedAddIdManifold(builder, idManifold)

def CollectRequest_AbridgedAddIdStateVector(builder, idStateVector):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(idStateVector), 0)

def AddIdStateVector(builder, idStateVector):
    CollectRequest_AbridgedAddIdStateVector(builder, idStateVector)

def CollectRequest_AbridgedAddEsId(builder, esId):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(esId), 0)

def AddEsId(builder, esId):
    CollectRequest_AbridgedAddEsId(builder, esId)

def CollectRequest_AbridgedAddEpoch(builder, epoch):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(epoch), 0)

def AddEpoch(builder, epoch):
    CollectRequest_AbridgedAddEpoch(builder, epoch)

def CollectRequest_AbridgedAddSemiMajorAxis(builder, semiMajorAxis):
    builder.PrependFloat64Slot(53, semiMajorAxis, 0.0)

def AddSemiMajorAxis(builder, semiMajorAxis):
    CollectRequest_AbridgedAddSemiMajorAxis(builder, semiMajorAxis)

def CollectRequest_AbridgedAddEccentricity(builder, eccentricity):
    builder.PrependFloat64Slot(54, eccentricity, 0.0)

def AddEccentricity(builder, eccentricity):
    CollectRequest_AbridgedAddEccentricity(builder, eccentricity)

def CollectRequest_AbridgedAddInclination(builder, inclination):
    builder.PrependFloat64Slot(55, inclination, 0.0)

def AddInclination(builder, inclination):
    CollectRequest_AbridgedAddInclination(builder, inclination)

def CollectRequest_AbridgedAddRaan(builder, raan):
    builder.PrependFloat64Slot(56, raan, 0.0)

def AddRaan(builder, raan):
    CollectRequest_AbridgedAddRaan(builder, raan)

def CollectRequest_AbridgedAddArgOfPerigee(builder, argOfPerigee):
    builder.PrependFloat64Slot(57, argOfPerigee, 0.0)

def AddArgOfPerigee(builder, argOfPerigee):
    CollectRequest_AbridgedAddArgOfPerigee(builder, argOfPerigee)

def CollectRequest_AbridgedAddTrueAnomoly(builder, trueAnomoly):
    builder.PrependFloat64Slot(58, trueAnomoly, 0.0)

def AddTrueAnomoly(builder, trueAnomoly):
    CollectRequest_AbridgedAddTrueAnomoly(builder, trueAnomoly)

def CollectRequest_AbridgedAddRa(builder, ra):
    builder.PrependFloat64Slot(59, ra, 0.0)

def AddRa(builder, ra):
    CollectRequest_AbridgedAddRa(builder, ra)

def CollectRequest_AbridgedAddDec(builder, dec):
    builder.PrependFloat64Slot(60, dec, 0.0)

def AddDec(builder, dec):
    CollectRequest_AbridgedAddDec(builder, dec)

def CollectRequest_AbridgedAddAz(builder, az):
    builder.PrependFloat64Slot(61, az, 0.0)

def AddAz(builder, az):
    CollectRequest_AbridgedAddAz(builder, az)

def CollectRequest_AbridgedAddEl(builder, el):
    builder.PrependFloat64Slot(62, el, 0.0)

def AddEl(builder, el):
    CollectRequest_AbridgedAddEl(builder, el)

def CollectRequest_AbridgedAddRange(builder, range):
    builder.PrependFloat64Slot(63, range, 0.0)

def AddRange(builder, range):
    CollectRequest_AbridgedAddRange(builder, range)

def CollectRequest_AbridgedAddExtentAz(builder, extentAz):
    builder.PrependFloat64Slot(64, extentAz, 0.0)

def AddExtentAz(builder, extentAz):
    CollectRequest_AbridgedAddExtentAz(builder, extentAz)

def CollectRequest_AbridgedAddExtentEl(builder, extentEl):
    builder.PrependFloat64Slot(65, extentEl, 0.0)

def AddExtentEl(builder, extentEl):
    CollectRequest_AbridgedAddExtentEl(builder, extentEl)

def CollectRequest_AbridgedAddExtentRange(builder, extentRange):
    builder.PrependFloat64Slot(66, extentRange, 0.0)

def AddExtentRange(builder, extentRange):
    CollectRequest_AbridgedAddExtentRange(builder, extentRange)

def CollectRequest_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(67, lat, 0.0)

def AddLat(builder, lat):
    CollectRequest_AbridgedAddLat(builder, lat)

def CollectRequest_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(68, lon, 0.0)

def AddLon(builder, lon):
    CollectRequest_AbridgedAddLon(builder, lon)

def CollectRequest_AbridgedAddAlt(builder, alt):
    builder.PrependFloat64Slot(69, alt, 0.0)

def AddAlt(builder, alt):
    CollectRequest_AbridgedAddAlt(builder, alt)

def CollectRequest_AbridgedAddStopLat(builder, stopLat):
    builder.PrependFloat64Slot(70, stopLat, 0.0)

def AddStopLat(builder, stopLat):
    CollectRequest_AbridgedAddStopLat(builder, stopLat)

def CollectRequest_AbridgedAddStopLon(builder, stopLon):
    builder.PrependFloat64Slot(71, stopLon, 0.0)

def AddStopLon(builder, stopLon):
    CollectRequest_AbridgedAddStopLon(builder, stopLon)

def CollectRequest_AbridgedAddStopAlt(builder, stopAlt):
    builder.PrependFloat64Slot(72, stopAlt, 0.0)

def AddStopAlt(builder, stopAlt):
    CollectRequest_AbridgedAddStopAlt(builder, stopAlt)

def CollectRequest_AbridgedAddSrchInc(builder, srchInc):
    builder.PrependFloat64Slot(73, srchInc, 0.0)

def AddSrchInc(builder, srchInc):
    CollectRequest_AbridgedAddSrchInc(builder, srchInc)

def CollectRequest_AbridgedAddXAngle(builder, xAngle):
    builder.PrependFloat64Slot(74, xAngle, 0.0)

def AddXAngle(builder, xAngle):
    CollectRequest_AbridgedAddXAngle(builder, xAngle)

def CollectRequest_AbridgedAddYAngle(builder, yAngle):
    builder.PrependFloat64Slot(75, yAngle, 0.0)

def AddYAngle(builder, yAngle):
    CollectRequest_AbridgedAddYAngle(builder, yAngle)

def CollectRequest_AbridgedAddOrientAngle(builder, orientAngle):
    builder.PrependFloat64Slot(76, orientAngle, 0.0)

def AddOrientAngle(builder, orientAngle):
    CollectRequest_AbridgedAddOrientAngle(builder, orientAngle)

def CollectRequest_AbridgedAddCustomer(builder, customer):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(customer), 0)

def AddCustomer(builder, customer):
    CollectRequest_AbridgedAddCustomer(builder, customer)

def CollectRequest_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(78, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    CollectRequest_AbridgedAddNotes(builder, notes)

def CollectRequest_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    CollectRequest_AbridgedAddCreatedAt(builder, createdAt)

def CollectRequest_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    CollectRequest_AbridgedAddCreatedBy(builder, createdBy)

def CollectRequest_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    CollectRequest_AbridgedAddSource(builder, source)

def CollectRequest_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(82, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    CollectRequest_AbridgedAddOrigin(builder, origin)

def CollectRequest_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(83, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    CollectRequest_AbridgedAddOrigNetwork(builder, origNetwork)

def CollectRequest_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(84, dataMode, 0)

def AddDataMode(builder, dataMode):
    CollectRequest_AbridgedAddDataMode(builder, dataMode)

def CollectRequest_AbridgedAddStateVector(builder, stateVector):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(stateVector), 0)

def AddStateVector(builder, stateVector):
    CollectRequest_AbridgedAddStateVector(builder, stateVector)

def CollectRequest_AbridgedAddElset(builder, elset):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(elset), 0)

def AddElset(builder, elset):
    CollectRequest_AbridgedAddElset(builder, elset)

def CollectRequest_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return CollectRequest_AbridgedEnd(builder)


class CollectRequest_AbridgedT(object):

    # CollectRequest_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idParentReq = None  # type: str
        self.msgType = None  # type: str
        self.msgCreateDate = None  # type: str
        self.type = None  # type: str
        self.idPlan = None  # type: str
        self.planIndex = 0  # type: int
        self.taskId = None  # type: str
        self.dwellId = None  # type: str
        self.externalId = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.obType = None  # type: str
        self.priority = None  # type: str
        self.taskCategory = 0  # type: int
        self.suffix = None  # type: str
        self.uctFollowUp = False  # type: bool
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.taskGroup = None  # type: str
        self.iron = 0  # type: int
        self.orbitRegime = None  # type: str
        self.targetSize = 0.0  # type: float
        self.rcsMin = 0.0  # type: float
        self.rcs = 0.0  # type: float
        self.rcsMax = 0.0  # type: float
        self.freqMin = 0.0  # type: float
        self.freq = 0.0  # type: float
        self.freqMax = 0.0  # type: float
        self.polarization = None  # type: str
        self.visMagMin = 0.0  # type: float
        self.visMag = 0.0  # type: float
        self.visMagMax = 0.0  # type: float
        self.spectralModel = None  # type: str
        self.reflectance = 0.0  # type: float
        self.irradiance = 0.0  # type: float
        self.numFrames = 0  # type: int
        self.frameRate = 0.0  # type: float
        self.integrationTime = 0.0  # type: float
        self.numTracks = 0  # type: int
        self.numObs = 0  # type: int
        self.duration = 0  # type: int
        self.srchPattern = None  # type: str
        self.scenario = None  # type: str
        self.idElset = None  # type: str
        self.idManifold = None  # type: str
        self.idStateVector = None  # type: str
        self.esId = None  # type: str
        self.epoch = None  # type: str
        self.semiMajorAxis = 0.0  # type: float
        self.eccentricity = 0.0  # type: float
        self.inclination = 0.0  # type: float
        self.raan = 0.0  # type: float
        self.argOfPerigee = 0.0  # type: float
        self.trueAnomoly = 0.0  # type: float
        self.ra = 0.0  # type: float
        self.dec = 0.0  # type: float
        self.az = 0.0  # type: float
        self.el = 0.0  # type: float
        self.range = 0.0  # type: float
        self.extentAz = 0.0  # type: float
        self.extentEl = 0.0  # type: float
        self.extentRange = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.stopLat = 0.0  # type: float
        self.stopLon = 0.0  # type: float
        self.stopAlt = 0.0  # type: float
        self.srchInc = 0.0  # type: float
        self.xAngle = 0.0  # type: float
        self.yAngle = 0.0  # type: float
        self.orientAngle = 0.0  # type: float
        self.customer = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.stateVector = None  # type: str
        self.elset = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        collectRequestAbridged = CollectRequest_Abridged()
        collectRequestAbridged.Init(buf, pos)
        return cls.InitFromObj(collectRequestAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, collectRequestAbridged):
        x = CollectRequest_AbridgedT()
        x._UnPack(collectRequestAbridged)
        return x

    # CollectRequest_AbridgedT
    def _UnPack(self, collectRequestAbridged):
        if collectRequestAbridged is None:
            return
        self.id = collectRequestAbridged.Id()
        self.classificationMarking = collectRequestAbridged.ClassificationMarking()
        self.idParentReq = collectRequestAbridged.IdParentReq()
        self.msgType = collectRequestAbridged.MsgType()
        self.msgCreateDate = collectRequestAbridged.MsgCreateDate()
        self.type = collectRequestAbridged.Type()
        self.idPlan = collectRequestAbridged.IdPlan()
        self.planIndex = collectRequestAbridged.PlanIndex()
        self.taskId = collectRequestAbridged.TaskId()
        self.dwellId = collectRequestAbridged.DwellId()
        self.externalId = collectRequestAbridged.ExternalId()
        self.idSensor = collectRequestAbridged.IdSensor()
        self.origSensorId = collectRequestAbridged.OrigSensorId()
        self.obType = collectRequestAbridged.ObType()
        self.priority = collectRequestAbridged.Priority()
        self.taskCategory = collectRequestAbridged.TaskCategory()
        self.suffix = collectRequestAbridged.Suffix()
        self.uctFollowUp = collectRequestAbridged.UctFollowUp()
        self.startTime = collectRequestAbridged.StartTime()
        self.endTime = collectRequestAbridged.EndTime()
        self.idOnOrbit = collectRequestAbridged.IdOnOrbit()
        self.satNo = collectRequestAbridged.SatNo()
        self.origObjectId = collectRequestAbridged.OrigObjectId()
        self.taskGroup = collectRequestAbridged.TaskGroup()
        self.iron = collectRequestAbridged.Iron()
        self.orbitRegime = collectRequestAbridged.OrbitRegime()
        self.targetSize = collectRequestAbridged.TargetSize()
        self.rcsMin = collectRequestAbridged.RcsMin()
        self.rcs = collectRequestAbridged.Rcs()
        self.rcsMax = collectRequestAbridged.RcsMax()
        self.freqMin = collectRequestAbridged.FreqMin()
        self.freq = collectRequestAbridged.Freq()
        self.freqMax = collectRequestAbridged.FreqMax()
        self.polarization = collectRequestAbridged.Polarization()
        self.visMagMin = collectRequestAbridged.VisMagMin()
        self.visMag = collectRequestAbridged.VisMag()
        self.visMagMax = collectRequestAbridged.VisMagMax()
        self.spectralModel = collectRequestAbridged.SpectralModel()
        self.reflectance = collectRequestAbridged.Reflectance()
        self.irradiance = collectRequestAbridged.Irradiance()
        self.numFrames = collectRequestAbridged.NumFrames()
        self.frameRate = collectRequestAbridged.FrameRate()
        self.integrationTime = collectRequestAbridged.IntegrationTime()
        self.numTracks = collectRequestAbridged.NumTracks()
        self.numObs = collectRequestAbridged.NumObs()
        self.duration = collectRequestAbridged.Duration()
        self.srchPattern = collectRequestAbridged.SrchPattern()
        self.scenario = collectRequestAbridged.Scenario()
        self.idElset = collectRequestAbridged.IdElset()
        self.idManifold = collectRequestAbridged.IdManifold()
        self.idStateVector = collectRequestAbridged.IdStateVector()
        self.esId = collectRequestAbridged.EsId()
        self.epoch = collectRequestAbridged.Epoch()
        self.semiMajorAxis = collectRequestAbridged.SemiMajorAxis()
        self.eccentricity = collectRequestAbridged.Eccentricity()
        self.inclination = collectRequestAbridged.Inclination()
        self.raan = collectRequestAbridged.Raan()
        self.argOfPerigee = collectRequestAbridged.ArgOfPerigee()
        self.trueAnomoly = collectRequestAbridged.TrueAnomoly()
        self.ra = collectRequestAbridged.Ra()
        self.dec = collectRequestAbridged.Dec()
        self.az = collectRequestAbridged.Az()
        self.el = collectRequestAbridged.El()
        self.range = collectRequestAbridged.Range()
        self.extentAz = collectRequestAbridged.ExtentAz()
        self.extentEl = collectRequestAbridged.ExtentEl()
        self.extentRange = collectRequestAbridged.ExtentRange()
        self.lat = collectRequestAbridged.Lat()
        self.lon = collectRequestAbridged.Lon()
        self.alt = collectRequestAbridged.Alt()
        self.stopLat = collectRequestAbridged.StopLat()
        self.stopLon = collectRequestAbridged.StopLon()
        self.stopAlt = collectRequestAbridged.StopAlt()
        self.srchInc = collectRequestAbridged.SrchInc()
        self.xAngle = collectRequestAbridged.XAngle()
        self.yAngle = collectRequestAbridged.YAngle()
        self.orientAngle = collectRequestAbridged.OrientAngle()
        self.customer = collectRequestAbridged.Customer()
        self.notes = collectRequestAbridged.Notes()
        self.createdAt = collectRequestAbridged.CreatedAt()
        self.createdBy = collectRequestAbridged.CreatedBy()
        self.source = collectRequestAbridged.Source()
        self.origin = collectRequestAbridged.Origin()
        self.origNetwork = collectRequestAbridged.OrigNetwork()
        self.dataMode = collectRequestAbridged.DataMode()
        self.stateVector = collectRequestAbridged.StateVector()
        self.elset = collectRequestAbridged.Elset()

    # CollectRequest_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idParentReq is not None:
            idParentReq = builder.CreateString(self.idParentReq)
        if self.msgType is not None:
            msgType = builder.CreateString(self.msgType)
        if self.msgCreateDate is not None:
            msgCreateDate = builder.CreateString(self.msgCreateDate)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.idPlan is not None:
            idPlan = builder.CreateString(self.idPlan)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.dwellId is not None:
            dwellId = builder.CreateString(self.dwellId)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.obType is not None:
            obType = builder.CreateString(self.obType)
        if self.priority is not None:
            priority = builder.CreateString(self.priority)
        if self.suffix is not None:
            suffix = builder.CreateString(self.suffix)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.taskGroup is not None:
            taskGroup = builder.CreateString(self.taskGroup)
        if self.orbitRegime is not None:
            orbitRegime = builder.CreateString(self.orbitRegime)
        if self.polarization is not None:
            polarization = builder.CreateString(self.polarization)
        if self.spectralModel is not None:
            spectralModel = builder.CreateString(self.spectralModel)
        if self.srchPattern is not None:
            srchPattern = builder.CreateString(self.srchPattern)
        if self.scenario is not None:
            scenario = builder.CreateString(self.scenario)
        if self.idElset is not None:
            idElset = builder.CreateString(self.idElset)
        if self.idManifold is not None:
            idManifold = builder.CreateString(self.idManifold)
        if self.idStateVector is not None:
            idStateVector = builder.CreateString(self.idStateVector)
        if self.esId is not None:
            esId = builder.CreateString(self.esId)
        if self.epoch is not None:
            epoch = builder.CreateString(self.epoch)
        if self.customer is not None:
            customer = builder.CreateString(self.customer)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.stateVector is not None:
            stateVector = builder.CreateString(self.stateVector)
        if self.elset is not None:
            elset = builder.CreateString(self.elset)
        CollectRequest_AbridgedStart(builder)
        if self.id is not None:
            CollectRequest_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            CollectRequest_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idParentReq is not None:
            CollectRequest_AbridgedAddIdParentReq(builder, idParentReq)
        if self.msgType is not None:
            CollectRequest_AbridgedAddMsgType(builder, msgType)
        if self.msgCreateDate is not None:
            CollectRequest_AbridgedAddMsgCreateDate(builder, msgCreateDate)
        if self.type is not None:
            CollectRequest_AbridgedAddType(builder, type)
        if self.idPlan is not None:
            CollectRequest_AbridgedAddIdPlan(builder, idPlan)
        CollectRequest_AbridgedAddPlanIndex(builder, self.planIndex)
        if self.taskId is not None:
            CollectRequest_AbridgedAddTaskId(builder, taskId)
        if self.dwellId is not None:
            CollectRequest_AbridgedAddDwellId(builder, dwellId)
        if self.externalId is not None:
            CollectRequest_AbridgedAddExternalId(builder, externalId)
        if self.idSensor is not None:
            CollectRequest_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            CollectRequest_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.obType is not None:
            CollectRequest_AbridgedAddObType(builder, obType)
        if self.priority is not None:
            CollectRequest_AbridgedAddPriority(builder, priority)
        CollectRequest_AbridgedAddTaskCategory(builder, self.taskCategory)
        if self.suffix is not None:
            CollectRequest_AbridgedAddSuffix(builder, suffix)
        CollectRequest_AbridgedAddUctFollowUp(builder, self.uctFollowUp)
        if self.startTime is not None:
            CollectRequest_AbridgedAddStartTime(builder, startTime)
        if self.endTime is not None:
            CollectRequest_AbridgedAddEndTime(builder, endTime)
        if self.idOnOrbit is not None:
            CollectRequest_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        CollectRequest_AbridgedAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            CollectRequest_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.taskGroup is not None:
            CollectRequest_AbridgedAddTaskGroup(builder, taskGroup)
        CollectRequest_AbridgedAddIron(builder, self.iron)
        if self.orbitRegime is not None:
            CollectRequest_AbridgedAddOrbitRegime(builder, orbitRegime)
        CollectRequest_AbridgedAddTargetSize(builder, self.targetSize)
        CollectRequest_AbridgedAddRcsMin(builder, self.rcsMin)
        CollectRequest_AbridgedAddRcs(builder, self.rcs)
        CollectRequest_AbridgedAddRcsMax(builder, self.rcsMax)
        CollectRequest_AbridgedAddFreqMin(builder, self.freqMin)
        CollectRequest_AbridgedAddFreq(builder, self.freq)
        CollectRequest_AbridgedAddFreqMax(builder, self.freqMax)
        if self.polarization is not None:
            CollectRequest_AbridgedAddPolarization(builder, polarization)
        CollectRequest_AbridgedAddVisMagMin(builder, self.visMagMin)
        CollectRequest_AbridgedAddVisMag(builder, self.visMag)
        CollectRequest_AbridgedAddVisMagMax(builder, self.visMagMax)
        if self.spectralModel is not None:
            CollectRequest_AbridgedAddSpectralModel(builder, spectralModel)
        CollectRequest_AbridgedAddReflectance(builder, self.reflectance)
        CollectRequest_AbridgedAddIrradiance(builder, self.irradiance)
        CollectRequest_AbridgedAddNumFrames(builder, self.numFrames)
        CollectRequest_AbridgedAddFrameRate(builder, self.frameRate)
        CollectRequest_AbridgedAddIntegrationTime(builder, self.integrationTime)
        CollectRequest_AbridgedAddNumTracks(builder, self.numTracks)
        CollectRequest_AbridgedAddNumObs(builder, self.numObs)
        CollectRequest_AbridgedAddDuration(builder, self.duration)
        if self.srchPattern is not None:
            CollectRequest_AbridgedAddSrchPattern(builder, srchPattern)
        if self.scenario is not None:
            CollectRequest_AbridgedAddScenario(builder, scenario)
        if self.idElset is not None:
            CollectRequest_AbridgedAddIdElset(builder, idElset)
        if self.idManifold is not None:
            CollectRequest_AbridgedAddIdManifold(builder, idManifold)
        if self.idStateVector is not None:
            CollectRequest_AbridgedAddIdStateVector(builder, idStateVector)
        if self.esId is not None:
            CollectRequest_AbridgedAddEsId(builder, esId)
        if self.epoch is not None:
            CollectRequest_AbridgedAddEpoch(builder, epoch)
        CollectRequest_AbridgedAddSemiMajorAxis(builder, self.semiMajorAxis)
        CollectRequest_AbridgedAddEccentricity(builder, self.eccentricity)
        CollectRequest_AbridgedAddInclination(builder, self.inclination)
        CollectRequest_AbridgedAddRaan(builder, self.raan)
        CollectRequest_AbridgedAddArgOfPerigee(builder, self.argOfPerigee)
        CollectRequest_AbridgedAddTrueAnomoly(builder, self.trueAnomoly)
        CollectRequest_AbridgedAddRa(builder, self.ra)
        CollectRequest_AbridgedAddDec(builder, self.dec)
        CollectRequest_AbridgedAddAz(builder, self.az)
        CollectRequest_AbridgedAddEl(builder, self.el)
        CollectRequest_AbridgedAddRange(builder, self.range)
        CollectRequest_AbridgedAddExtentAz(builder, self.extentAz)
        CollectRequest_AbridgedAddExtentEl(builder, self.extentEl)
        CollectRequest_AbridgedAddExtentRange(builder, self.extentRange)
        CollectRequest_AbridgedAddLat(builder, self.lat)
        CollectRequest_AbridgedAddLon(builder, self.lon)
        CollectRequest_AbridgedAddAlt(builder, self.alt)
        CollectRequest_AbridgedAddStopLat(builder, self.stopLat)
        CollectRequest_AbridgedAddStopLon(builder, self.stopLon)
        CollectRequest_AbridgedAddStopAlt(builder, self.stopAlt)
        CollectRequest_AbridgedAddSrchInc(builder, self.srchInc)
        CollectRequest_AbridgedAddXAngle(builder, self.xAngle)
        CollectRequest_AbridgedAddYAngle(builder, self.yAngle)
        CollectRequest_AbridgedAddOrientAngle(builder, self.orientAngle)
        if self.customer is not None:
            CollectRequest_AbridgedAddCustomer(builder, customer)
        if self.notes is not None:
            CollectRequest_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            CollectRequest_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            CollectRequest_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            CollectRequest_AbridgedAddSource(builder, source)
        if self.origin is not None:
            CollectRequest_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            CollectRequest_AbridgedAddOrigNetwork(builder, origNetwork)
        CollectRequest_AbridgedAddDataMode(builder, self.dataMode)
        if self.stateVector is not None:
            CollectRequest_AbridgedAddStateVector(builder, stateVector)
        if self.elset is not None:
            CollectRequest_AbridgedAddElset(builder, elset)
        collectRequestAbridged = CollectRequest_AbridgedEnd(builder)
        return collectRequestAbridged
