# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A track route is a prescribed route for performing training events or operations such as air refueling.
class TrackRoute_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackRoute_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackRoute_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TrackRoute_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x52\x41\x43", size_prefixed=size_prefixed)

    # TrackRoute_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # TrackRoute_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # TrackRoute_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The track route type represented by this record (ex. AIR REFUELING).
    # Example: /// Example: AIR REFUELING
    # Constraints: Minimum length = 1, Maximum length = 36
    # TrackRoute_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: GDSSMH121004232315303094
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The principal compass direction (cardinal or ordinal) of the track route.
    # Example: /// Example: NE
    # Constraints: Minimum length = 0, Maximum length = 2
    # TrackRoute_Full
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the creating organization of the track route.
    # Example: /// Example: HQPAC
    # Constraints: Minimum length = 0, Maximum length = 250
    # TrackRoute_Full
    def CreatingOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track location ID.
    # Example: /// Example: POACHR
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def LocationTrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the track.
    # Example: /// Example: CH61A
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the track.
    # Example: /// Example: CH61 POST
    # Constraints: Minimum length = 0, Maximum length = 50
    # TrackRoute_Full
    def TrackName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Abbreviated name of the track.
    # Example: /// Example: CH61
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackRoute_Full
    def ShortName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
    # Example: /// Example: V
    # Constraints: Minimum length = 0, Maximum length = 2
    # TrackRoute_Full
    def TypeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Region code indicating where the track resides as determined by the data source.
    # Example: /// Example: 5
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def RegionCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Region where the track resides.
    # Example: /// Example: North America
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackRoute_Full
    def RegionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The APX radar code sent and received by the aircraft for identification.
    # Example: /// Example: 5/1
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def ApxBeaconCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The receiver tanker channel identifer for air refueling tracks.
    # Example: /// Example: 31/094
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def ReceiverTankerChcode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The APN radar code sent and received by the aircraft for identification.
    # Example: /// Example: 1-3-1
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def ApnSetting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Standard Indicator Code of the air refueling track.
    # Example: /// Example: N
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackRoute_Full
    def Sic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-09-16T16:00:00.123Z
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def ReviewDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-09-17T16:00:00.123Z
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def LastUsedDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-09-17T16:00:00.123Z
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def LastUpdateDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The primary UHF radio frequency used for the track route in megahertz.
    # Example: /// Example: 357.5
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def PriFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The secondary UHF radio frequency used for the track route in megahertz.
    # Example: /// Example: 319.7
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def SecFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Air Refueling Track Control Center message.
    # Example: /// Example: OAKLAND CTR/GUAM CERAP
    # Constraints: Minimum length = 0, Maximum length = 256
    # TrackRoute_Full
    def ArtccMessage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point of contact for the air refueling track route scheduler.
    # Example: /// Example: 97 OSS/OSOS DSN 866-5555
    # Constraints: Minimum length = 0, Maximum length = 256
    # TrackRoute_Full
    def SchedulerOrgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unit responsible for scheduling the track route.
    # Example: /// Example: 612 AOC
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackRoute_Full
    def SchedulerOrgUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-09-17T16:00:00.123Z
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def EffectiveDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Points identified within the route.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def RoutePoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackRoute_Full
    def RoutePointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackRoute_Full
    def RoutePointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Minimum and maximum altitude bounds for the track.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def AltitudeBlocks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackRoute_Full
    def AltitudeBlocksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackRoute_Full
    def AltitudeBlocksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # Point of contacts for scheduling or modifying the route.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def Poc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackRoute_Full
    def PocLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackRoute_Full
    def PocIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # TrackRoute_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # TrackRoute_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # TrackRoute_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackRoute_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # TrackRoute_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackRoute_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackRoute_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # TrackRoute_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def TrackRoute_FullStart(builder):
    builder.StartObject(38)

def Start(builder):
    TrackRoute_FullStart(builder)

def TrackRoute_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    TrackRoute_FullAddId(builder, id)

def TrackRoute_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    TrackRoute_FullAddClassificationMarking(builder, classificationMarking)

def TrackRoute_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    TrackRoute_FullAddType(builder, type)

def TrackRoute_FullAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    TrackRoute_FullAddExternalId(builder, externalId)

def TrackRoute_FullAddDirection(builder, direction):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(direction), 0)

def AddDirection(builder, direction):
    TrackRoute_FullAddDirection(builder, direction)

def TrackRoute_FullAddCreatingOrg(builder, creatingOrg):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(creatingOrg), 0)

def AddCreatingOrg(builder, creatingOrg):
    TrackRoute_FullAddCreatingOrg(builder, creatingOrg)

def TrackRoute_FullAddLocationTrackId(builder, locationTrackId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(locationTrackId), 0)

def AddLocationTrackId(builder, locationTrackId):
    TrackRoute_FullAddLocationTrackId(builder, locationTrackId)

def TrackRoute_FullAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    TrackRoute_FullAddTrackId(builder, trackId)

def TrackRoute_FullAddTrackName(builder, trackName):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(trackName), 0)

def AddTrackName(builder, trackName):
    TrackRoute_FullAddTrackName(builder, trackName)

def TrackRoute_FullAddShortName(builder, shortName):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(shortName), 0)

def AddShortName(builder, shortName):
    TrackRoute_FullAddShortName(builder, shortName)

def TrackRoute_FullAddTypeCode(builder, typeCode):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(typeCode), 0)

def AddTypeCode(builder, typeCode):
    TrackRoute_FullAddTypeCode(builder, typeCode)

def TrackRoute_FullAddRegionCode(builder, regionCode):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(regionCode), 0)

def AddRegionCode(builder, regionCode):
    TrackRoute_FullAddRegionCode(builder, regionCode)

def TrackRoute_FullAddRegionName(builder, regionName):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(regionName), 0)

def AddRegionName(builder, regionName):
    TrackRoute_FullAddRegionName(builder, regionName)

def TrackRoute_FullAddApxBeaconCode(builder, apxBeaconCode):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(apxBeaconCode), 0)

def AddApxBeaconCode(builder, apxBeaconCode):
    TrackRoute_FullAddApxBeaconCode(builder, apxBeaconCode)

def TrackRoute_FullAddReceiverTankerChcode(builder, receiverTankerChcode):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(receiverTankerChcode), 0)

def AddReceiverTankerChcode(builder, receiverTankerChcode):
    TrackRoute_FullAddReceiverTankerChcode(builder, receiverTankerChcode)

def TrackRoute_FullAddApnSetting(builder, apnSetting):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(apnSetting), 0)

def AddApnSetting(builder, apnSetting):
    TrackRoute_FullAddApnSetting(builder, apnSetting)

def TrackRoute_FullAddSic(builder, sic):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(sic), 0)

def AddSic(builder, sic):
    TrackRoute_FullAddSic(builder, sic)

def TrackRoute_FullAddReviewDate(builder, reviewDate):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(reviewDate), 0)

def AddReviewDate(builder, reviewDate):
    TrackRoute_FullAddReviewDate(builder, reviewDate)

def TrackRoute_FullAddLastUsedDate(builder, lastUsedDate):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(lastUsedDate), 0)

def AddLastUsedDate(builder, lastUsedDate):
    TrackRoute_FullAddLastUsedDate(builder, lastUsedDate)

def TrackRoute_FullAddLastUpdateDate(builder, lastUpdateDate):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(lastUpdateDate), 0)

def AddLastUpdateDate(builder, lastUpdateDate):
    TrackRoute_FullAddLastUpdateDate(builder, lastUpdateDate)

def TrackRoute_FullAddPriFreq(builder, priFreq):
    builder.PrependFloat64Slot(20, priFreq, 0.0)

def AddPriFreq(builder, priFreq):
    TrackRoute_FullAddPriFreq(builder, priFreq)

def TrackRoute_FullAddSecFreq(builder, secFreq):
    builder.PrependFloat64Slot(21, secFreq, 0.0)

def AddSecFreq(builder, secFreq):
    TrackRoute_FullAddSecFreq(builder, secFreq)

def TrackRoute_FullAddArtccMessage(builder, artccMessage):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(artccMessage), 0)

def AddArtccMessage(builder, artccMessage):
    TrackRoute_FullAddArtccMessage(builder, artccMessage)

def TrackRoute_FullAddSchedulerOrgName(builder, schedulerOrgName):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(schedulerOrgName), 0)

def AddSchedulerOrgName(builder, schedulerOrgName):
    TrackRoute_FullAddSchedulerOrgName(builder, schedulerOrgName)

def TrackRoute_FullAddSchedulerOrgUnit(builder, schedulerOrgUnit):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(schedulerOrgUnit), 0)

def AddSchedulerOrgUnit(builder, schedulerOrgUnit):
    TrackRoute_FullAddSchedulerOrgUnit(builder, schedulerOrgUnit)

def TrackRoute_FullAddEffectiveDate(builder, effectiveDate):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveDate), 0)

def AddEffectiveDate(builder, effectiveDate):
    TrackRoute_FullAddEffectiveDate(builder, effectiveDate)

def TrackRoute_FullAddRoutePoints(builder, routePoints):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(routePoints), 0)

def AddRoutePoints(builder, routePoints):
    TrackRoute_FullAddRoutePoints(builder, routePoints)

def TrackRoute_FullStartRoutePointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRoutePointsVector(builder, numElems):
    return TrackRoute_FullStartRoutePointsVector(builder, numElems)

def TrackRoute_FullAddAltitudeBlocks(builder, altitudeBlocks):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(altitudeBlocks), 0)

def AddAltitudeBlocks(builder, altitudeBlocks):
    TrackRoute_FullAddAltitudeBlocks(builder, altitudeBlocks)

def TrackRoute_FullStartAltitudeBlocksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAltitudeBlocksVector(builder, numElems):
    return TrackRoute_FullStartAltitudeBlocksVector(builder, numElems)

def TrackRoute_FullAddPoc(builder, poc):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(poc), 0)

def AddPoc(builder, poc):
    TrackRoute_FullAddPoc(builder, poc)

def TrackRoute_FullStartPocVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPocVector(builder, numElems):
    return TrackRoute_FullStartPocVector(builder, numElems)

def TrackRoute_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    TrackRoute_FullAddCreatedAt(builder, createdAt)

def TrackRoute_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    TrackRoute_FullAddCreatedBy(builder, createdBy)

def TrackRoute_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    TrackRoute_FullAddUpdatedAt(builder, updatedAt)

def TrackRoute_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    TrackRoute_FullAddUpdatedBy(builder, updatedBy)

def TrackRoute_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    TrackRoute_FullAddSourceDl(builder, sourceDl)

def TrackRoute_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    TrackRoute_FullAddSource(builder, source)

def TrackRoute_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    TrackRoute_FullAddOrigin(builder, origin)

def TrackRoute_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    TrackRoute_FullAddOrigNetwork(builder, origNetwork)

def TrackRoute_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(37, dataMode, 0)

def AddDataMode(builder, dataMode):
    TrackRoute_FullAddDataMode(builder, dataMode)

def TrackRoute_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackRoute_FullEnd(builder)

try:
    from typing import List
except:
    pass

class TrackRoute_FullT(object):

    # TrackRoute_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.externalId = None  # type: str
        self.direction = None  # type: str
        self.creatingOrg = None  # type: str
        self.locationTrackId = None  # type: str
        self.trackId = None  # type: str
        self.trackName = None  # type: str
        self.shortName = None  # type: str
        self.typeCode = None  # type: str
        self.regionCode = None  # type: str
        self.regionName = None  # type: str
        self.apxBeaconCode = None  # type: str
        self.receiverTankerChcode = None  # type: str
        self.apnSetting = None  # type: str
        self.sic = None  # type: str
        self.reviewDate = None  # type: str
        self.lastUsedDate = None  # type: str
        self.lastUpdateDate = None  # type: str
        self.priFreq = 0.0  # type: float
        self.secFreq = 0.0  # type: float
        self.artccMessage = None  # type: str
        self.schedulerOrgName = None  # type: str
        self.schedulerOrgUnit = None  # type: str
        self.effectiveDate = None  # type: str
        self.routePoints = None  # type: List[str]
        self.altitudeBlocks = None  # type: List[str]
        self.poc = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trackRouteFull = TrackRoute_Full()
        trackRouteFull.Init(buf, pos)
        return cls.InitFromObj(trackRouteFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trackRouteFull):
        x = TrackRoute_FullT()
        x._UnPack(trackRouteFull)
        return x

    # TrackRoute_FullT
    def _UnPack(self, trackRouteFull):
        if trackRouteFull is None:
            return
        self.id = trackRouteFull.Id()
        self.classificationMarking = trackRouteFull.ClassificationMarking()
        self.type = trackRouteFull.Type()
        self.externalId = trackRouteFull.ExternalId()
        self.direction = trackRouteFull.Direction()
        self.creatingOrg = trackRouteFull.CreatingOrg()
        self.locationTrackId = trackRouteFull.LocationTrackId()
        self.trackId = trackRouteFull.TrackId()
        self.trackName = trackRouteFull.TrackName()
        self.shortName = trackRouteFull.ShortName()
        self.typeCode = trackRouteFull.TypeCode()
        self.regionCode = trackRouteFull.RegionCode()
        self.regionName = trackRouteFull.RegionName()
        self.apxBeaconCode = trackRouteFull.ApxBeaconCode()
        self.receiverTankerChcode = trackRouteFull.ReceiverTankerChcode()
        self.apnSetting = trackRouteFull.ApnSetting()
        self.sic = trackRouteFull.Sic()
        self.reviewDate = trackRouteFull.ReviewDate()
        self.lastUsedDate = trackRouteFull.LastUsedDate()
        self.lastUpdateDate = trackRouteFull.LastUpdateDate()
        self.priFreq = trackRouteFull.PriFreq()
        self.secFreq = trackRouteFull.SecFreq()
        self.artccMessage = trackRouteFull.ArtccMessage()
        self.schedulerOrgName = trackRouteFull.SchedulerOrgName()
        self.schedulerOrgUnit = trackRouteFull.SchedulerOrgUnit()
        self.effectiveDate = trackRouteFull.EffectiveDate()
        if not trackRouteFull.RoutePointsIsNone():
            self.routePoints = []
            for i in range(trackRouteFull.RoutePointsLength()):
                self.routePoints.append(trackRouteFull.RoutePoints(i))
        if not trackRouteFull.AltitudeBlocksIsNone():
            self.altitudeBlocks = []
            for i in range(trackRouteFull.AltitudeBlocksLength()):
                self.altitudeBlocks.append(trackRouteFull.AltitudeBlocks(i))
        if not trackRouteFull.PocIsNone():
            self.poc = []
            for i in range(trackRouteFull.PocLength()):
                self.poc.append(trackRouteFull.Poc(i))
        self.createdAt = trackRouteFull.CreatedAt()
        self.createdBy = trackRouteFull.CreatedBy()
        self.updatedAt = trackRouteFull.UpdatedAt()
        self.updatedBy = trackRouteFull.UpdatedBy()
        self.sourceDl = trackRouteFull.SourceDl()
        self.source = trackRouteFull.Source()
        self.origin = trackRouteFull.Origin()
        self.origNetwork = trackRouteFull.OrigNetwork()
        self.dataMode = trackRouteFull.DataMode()

    # TrackRoute_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.direction is not None:
            direction = builder.CreateString(self.direction)
        if self.creatingOrg is not None:
            creatingOrg = builder.CreateString(self.creatingOrg)
        if self.locationTrackId is not None:
            locationTrackId = builder.CreateString(self.locationTrackId)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.trackName is not None:
            trackName = builder.CreateString(self.trackName)
        if self.shortName is not None:
            shortName = builder.CreateString(self.shortName)
        if self.typeCode is not None:
            typeCode = builder.CreateString(self.typeCode)
        if self.regionCode is not None:
            regionCode = builder.CreateString(self.regionCode)
        if self.regionName is not None:
            regionName = builder.CreateString(self.regionName)
        if self.apxBeaconCode is not None:
            apxBeaconCode = builder.CreateString(self.apxBeaconCode)
        if self.receiverTankerChcode is not None:
            receiverTankerChcode = builder.CreateString(self.receiverTankerChcode)
        if self.apnSetting is not None:
            apnSetting = builder.CreateString(self.apnSetting)
        if self.sic is not None:
            sic = builder.CreateString(self.sic)
        if self.reviewDate is not None:
            reviewDate = builder.CreateString(self.reviewDate)
        if self.lastUsedDate is not None:
            lastUsedDate = builder.CreateString(self.lastUsedDate)
        if self.lastUpdateDate is not None:
            lastUpdateDate = builder.CreateString(self.lastUpdateDate)
        if self.artccMessage is not None:
            artccMessage = builder.CreateString(self.artccMessage)
        if self.schedulerOrgName is not None:
            schedulerOrgName = builder.CreateString(self.schedulerOrgName)
        if self.schedulerOrgUnit is not None:
            schedulerOrgUnit = builder.CreateString(self.schedulerOrgUnit)
        if self.effectiveDate is not None:
            effectiveDate = builder.CreateString(self.effectiveDate)
        if self.routePoints is not None:
            routePointslist = []
            for i in range(len(self.routePoints)):
                routePointslist.append(builder.CreateString(self.routePoints[i]))
            TrackRoute_FullStartRoutePointsVector(builder, len(self.routePoints))
            for i in reversed(range(len(self.routePoints))):
                builder.PrependUOffsetTRelative(routePointslist[i])
            routePoints = builder.EndVector()
        if self.altitudeBlocks is not None:
            altitudeBlockslist = []
            for i in range(len(self.altitudeBlocks)):
                altitudeBlockslist.append(builder.CreateString(self.altitudeBlocks[i]))
            TrackRoute_FullStartAltitudeBlocksVector(builder, len(self.altitudeBlocks))
            for i in reversed(range(len(self.altitudeBlocks))):
                builder.PrependUOffsetTRelative(altitudeBlockslist[i])
            altitudeBlocks = builder.EndVector()
        if self.poc is not None:
            poclist = []
            for i in range(len(self.poc)):
                poclist.append(builder.CreateString(self.poc[i]))
            TrackRoute_FullStartPocVector(builder, len(self.poc))
            for i in reversed(range(len(self.poc))):
                builder.PrependUOffsetTRelative(poclist[i])
            poc = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        TrackRoute_FullStart(builder)
        if self.id is not None:
            TrackRoute_FullAddId(builder, id)
        if self.classificationMarking is not None:
            TrackRoute_FullAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            TrackRoute_FullAddType(builder, type)
        if self.externalId is not None:
            TrackRoute_FullAddExternalId(builder, externalId)
        if self.direction is not None:
            TrackRoute_FullAddDirection(builder, direction)
        if self.creatingOrg is not None:
            TrackRoute_FullAddCreatingOrg(builder, creatingOrg)
        if self.locationTrackId is not None:
            TrackRoute_FullAddLocationTrackId(builder, locationTrackId)
        if self.trackId is not None:
            TrackRoute_FullAddTrackId(builder, trackId)
        if self.trackName is not None:
            TrackRoute_FullAddTrackName(builder, trackName)
        if self.shortName is not None:
            TrackRoute_FullAddShortName(builder, shortName)
        if self.typeCode is not None:
            TrackRoute_FullAddTypeCode(builder, typeCode)
        if self.regionCode is not None:
            TrackRoute_FullAddRegionCode(builder, regionCode)
        if self.regionName is not None:
            TrackRoute_FullAddRegionName(builder, regionName)
        if self.apxBeaconCode is not None:
            TrackRoute_FullAddApxBeaconCode(builder, apxBeaconCode)
        if self.receiverTankerChcode is not None:
            TrackRoute_FullAddReceiverTankerChcode(builder, receiverTankerChcode)
        if self.apnSetting is not None:
            TrackRoute_FullAddApnSetting(builder, apnSetting)
        if self.sic is not None:
            TrackRoute_FullAddSic(builder, sic)
        if self.reviewDate is not None:
            TrackRoute_FullAddReviewDate(builder, reviewDate)
        if self.lastUsedDate is not None:
            TrackRoute_FullAddLastUsedDate(builder, lastUsedDate)
        if self.lastUpdateDate is not None:
            TrackRoute_FullAddLastUpdateDate(builder, lastUpdateDate)
        TrackRoute_FullAddPriFreq(builder, self.priFreq)
        TrackRoute_FullAddSecFreq(builder, self.secFreq)
        if self.artccMessage is not None:
            TrackRoute_FullAddArtccMessage(builder, artccMessage)
        if self.schedulerOrgName is not None:
            TrackRoute_FullAddSchedulerOrgName(builder, schedulerOrgName)
        if self.schedulerOrgUnit is not None:
            TrackRoute_FullAddSchedulerOrgUnit(builder, schedulerOrgUnit)
        if self.effectiveDate is not None:
            TrackRoute_FullAddEffectiveDate(builder, effectiveDate)
        if self.routePoints is not None:
            TrackRoute_FullAddRoutePoints(builder, routePoints)
        if self.altitudeBlocks is not None:
            TrackRoute_FullAddAltitudeBlocks(builder, altitudeBlocks)
        if self.poc is not None:
            TrackRoute_FullAddPoc(builder, poc)
        if self.createdAt is not None:
            TrackRoute_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            TrackRoute_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            TrackRoute_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            TrackRoute_FullAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            TrackRoute_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            TrackRoute_FullAddSource(builder, source)
        if self.origin is not None:
            TrackRoute_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            TrackRoute_FullAddOrigNetwork(builder, origNetwork)
        TrackRoute_FullAddDataMode(builder, self.dataMode)
        trackRouteFull = TrackRoute_FullEnd(builder)
        return trackRouteFull
