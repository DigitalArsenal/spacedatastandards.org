# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
class DataLinkSpecTracks_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkSpecTracks_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkSpecTracks_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkSpecTracks_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkSpecTracks_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
    # Example: /// Example: 12345
    # Constraints: Minimum length = 0, Maximum length = 16
    # DataLinkSpecTracks_Ingest
    def SpecTrackNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the special track number.
    # Example: /// Example: SAM SITE CHARLIE
    # Constraints: Minimum length = 0, Maximum length = 40
    # DataLinkSpecTracks_Ingest
    def SpecTrackNumDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataLinkSpecTracks_IngestStart(builder):
    builder.StartObject(2)

def Start(builder):
    DataLinkSpecTracks_IngestStart(builder)

def DataLinkSpecTracks_IngestAddSpecTrackNum(builder, specTrackNum):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(specTrackNum), 0)

def AddSpecTrackNum(builder, specTrackNum):
    DataLinkSpecTracks_IngestAddSpecTrackNum(builder, specTrackNum)

def DataLinkSpecTracks_IngestAddSpecTrackNumDesc(builder, specTrackNumDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(specTrackNumDesc), 0)

def AddSpecTrackNumDesc(builder, specTrackNumDesc):
    DataLinkSpecTracks_IngestAddSpecTrackNumDesc(builder, specTrackNumDesc)

def DataLinkSpecTracks_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkSpecTracks_IngestEnd(builder)


class DataLinkSpecTracks_IngestT(object):

    # DataLinkSpecTracks_IngestT
    def __init__(self):
        self.specTrackNum = None  # type: str
        self.specTrackNumDesc = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkSpecTracksIngest = DataLinkSpecTracks_Ingest()
        dataLinkSpecTracksIngest.Init(buf, pos)
        return cls.InitFromObj(dataLinkSpecTracksIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkSpecTracksIngest):
        x = DataLinkSpecTracks_IngestT()
        x._UnPack(dataLinkSpecTracksIngest)
        return x

    # DataLinkSpecTracks_IngestT
    def _UnPack(self, dataLinkSpecTracksIngest):
        if dataLinkSpecTracksIngest is None:
            return
        self.specTrackNum = dataLinkSpecTracksIngest.SpecTrackNum()
        self.specTrackNumDesc = dataLinkSpecTracksIngest.SpecTrackNumDesc()

    # DataLinkSpecTracks_IngestT
    def Pack(self, builder):
        if self.specTrackNum is not None:
            specTrackNum = builder.CreateString(self.specTrackNum)
        if self.specTrackNumDesc is not None:
            specTrackNumDesc = builder.CreateString(self.specTrackNumDesc)
        DataLinkSpecTracks_IngestStart(builder)
        if self.specTrackNum is not None:
            DataLinkSpecTracks_IngestAddSpecTrackNum(builder, specTrackNum)
        if self.specTrackNumDesc is not None:
            DataLinkSpecTracks_IngestAddSpecTrackNumDesc(builder, specTrackNumDesc)
        dataLinkSpecTracksIngest = DataLinkSpecTracks_IngestEnd(builder)
        return dataLinkSpecTracksIngest
