# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
class GroundImagery_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GroundImagery_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGroundImagery_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GroundImagery_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x47\x52\x4F\x55", size_prefixed=size_prefixed)

    # GroundImagery_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: GROUNDIMAGERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # GroundImagery_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID of the sensor that produced this ground image.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # GroundImagery_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # GroundImagery_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp the image was captured/produced.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # GroundImagery_Abridged
    def ImageTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the image file.
    # Example: /// Example: Example file name
    # Constraints: Minimum length = 1, Maximum length = 128
    # GroundImagery_Abridged
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: Minimum length = 0, Maximum length = 65535
    # GroundImagery_Abridged
    def RegionText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: Minimum length = 0, Maximum length = 65535
    # GroundImagery_Abridged
    def RegionGeoJson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: Polygon
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Abridged
    def RegionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # GroundImagery_Abridged
    def RegionNdims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 4326
    # Constraints: No constraints specified.
    # GroundImagery_Abridged
    def RegionSrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # GroundImagery_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
    # Example: /// Example: SUBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # GroundImagery_Abridged
    def SubjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional name/description associated with this image.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 0, Maximum length = 128
    # GroundImagery_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # GroundImagery_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # GroundImagery_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # GroundImagery_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # GroundImagery_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # GroundImagery_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description and notes of the image.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # GroundImagery_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional, field indicating type of image, NITF, PNG, etc.
    # Example: /// Example: PNG
    # Constraints: Minimum length = 1, Maximum length = 16
    # GroundImagery_Abridged
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # GroundImagery_Abridged
    def Filesize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MD5 value of the file. The ingest/create operation will automatically generate the value.
    # Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
    # Constraints: Minimum length = 1, Maximum length = 256
    # GroundImagery_Abridged
    def ChecksumValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GroundImagery_AbridgedStart(builder):
    builder.StartObject(25)

def Start(builder):
    GroundImagery_AbridgedStart(builder)

def GroundImagery_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    GroundImagery_AbridgedAddId(builder, id)

def GroundImagery_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    GroundImagery_AbridgedAddIdSensor(builder, idSensor)

def GroundImagery_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    GroundImagery_AbridgedAddClassificationMarking(builder, classificationMarking)

def GroundImagery_AbridgedAddImageTime(builder, imageTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imageTime), 0)

def AddImageTime(builder, imageTime):
    GroundImagery_AbridgedAddImageTime(builder, imageTime)

def GroundImagery_AbridgedAddFilename(builder, filename):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)

def AddFilename(builder, filename):
    GroundImagery_AbridgedAddFilename(builder, filename)

def GroundImagery_AbridgedAddRegionText(builder, regionText):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(regionText), 0)

def AddRegionText(builder, regionText):
    GroundImagery_AbridgedAddRegionText(builder, regionText)

def GroundImagery_AbridgedAddRegionGeoJson(builder, regionGeoJson):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(regionGeoJson), 0)

def AddRegionGeoJson(builder, regionGeoJson):
    GroundImagery_AbridgedAddRegionGeoJson(builder, regionGeoJson)

def GroundImagery_AbridgedAddRegionType(builder, regionType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(regionType), 0)

def AddRegionType(builder, regionType):
    GroundImagery_AbridgedAddRegionType(builder, regionType)

def GroundImagery_AbridgedAddRegionNdims(builder, regionNdims):
    builder.PrependInt32Slot(8, regionNdims, 0)

def AddRegionNdims(builder, regionNdims):
    GroundImagery_AbridgedAddRegionNdims(builder, regionNdims)

def GroundImagery_AbridgedAddRegionSrid(builder, regionSrid):
    builder.PrependInt32Slot(9, regionSrid, 0)

def AddRegionSrid(builder, regionSrid):
    GroundImagery_AbridgedAddRegionSrid(builder, regionSrid)

def GroundImagery_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    GroundImagery_AbridgedAddOrigSensorId(builder, origSensorId)

def GroundImagery_AbridgedAddSubjectId(builder, subjectId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(subjectId), 0)

def AddSubjectId(builder, subjectId):
    GroundImagery_AbridgedAddSubjectId(builder, subjectId)

def GroundImagery_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    GroundImagery_AbridgedAddName(builder, name)

def GroundImagery_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    GroundImagery_AbridgedAddSource(builder, source)

def GroundImagery_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    GroundImagery_AbridgedAddOrigin(builder, origin)

def GroundImagery_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    GroundImagery_AbridgedAddOrigNetwork(builder, origNetwork)

def GroundImagery_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    GroundImagery_AbridgedAddSourceDl(builder, sourceDl)

def GroundImagery_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    GroundImagery_AbridgedAddDataMode(builder, dataMode)

def GroundImagery_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    GroundImagery_AbridgedAddCreatedAt(builder, createdAt)

def GroundImagery_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    GroundImagery_AbridgedAddCreatedBy(builder, createdBy)

def GroundImagery_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    GroundImagery_AbridgedAddTransactionId(builder, transactionId)

def GroundImagery_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    GroundImagery_AbridgedAddNotes(builder, notes)

def GroundImagery_AbridgedAddFormat(builder, format):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(format), 0)

def AddFormat(builder, format):
    GroundImagery_AbridgedAddFormat(builder, format)

def GroundImagery_AbridgedAddFilesize(builder, filesize):
    builder.PrependInt64Slot(23, filesize, 0)

def AddFilesize(builder, filesize):
    GroundImagery_AbridgedAddFilesize(builder, filesize)

def GroundImagery_AbridgedAddChecksumValue(builder, checksumValue):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(checksumValue), 0)

def AddChecksumValue(builder, checksumValue):
    GroundImagery_AbridgedAddChecksumValue(builder, checksumValue)

def GroundImagery_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return GroundImagery_AbridgedEnd(builder)


class GroundImagery_AbridgedT(object):

    # GroundImagery_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idSensor = None  # type: str
        self.classificationMarking = None  # type: str
        self.imageTime = None  # type: str
        self.filename = None  # type: str
        self.regionText = None  # type: str
        self.regionGeoJson = None  # type: str
        self.regionType = None  # type: str
        self.regionNdims = 0  # type: int
        self.regionSrid = 0  # type: int
        self.origSensorId = None  # type: str
        self.subjectId = None  # type: str
        self.name = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.transactionId = None  # type: str
        self.notes = None  # type: str
        self.format = None  # type: str
        self.filesize = 0  # type: int
        self.checksumValue = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        groundImageryAbridged = GroundImagery_Abridged()
        groundImageryAbridged.Init(buf, pos)
        return cls.InitFromObj(groundImageryAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, groundImageryAbridged):
        x = GroundImagery_AbridgedT()
        x._UnPack(groundImageryAbridged)
        return x

    # GroundImagery_AbridgedT
    def _UnPack(self, groundImageryAbridged):
        if groundImageryAbridged is None:
            return
        self.id = groundImageryAbridged.Id()
        self.idSensor = groundImageryAbridged.IdSensor()
        self.classificationMarking = groundImageryAbridged.ClassificationMarking()
        self.imageTime = groundImageryAbridged.ImageTime()
        self.filename = groundImageryAbridged.Filename()
        self.regionText = groundImageryAbridged.RegionText()
        self.regionGeoJson = groundImageryAbridged.RegionGeoJson()
        self.regionType = groundImageryAbridged.RegionType()
        self.regionNdims = groundImageryAbridged.RegionNdims()
        self.regionSrid = groundImageryAbridged.RegionSrid()
        self.origSensorId = groundImageryAbridged.OrigSensorId()
        self.subjectId = groundImageryAbridged.SubjectId()
        self.name = groundImageryAbridged.Name()
        self.source = groundImageryAbridged.Source()
        self.origin = groundImageryAbridged.Origin()
        self.origNetwork = groundImageryAbridged.OrigNetwork()
        self.sourceDl = groundImageryAbridged.SourceDl()
        self.dataMode = groundImageryAbridged.DataMode()
        self.createdAt = groundImageryAbridged.CreatedAt()
        self.createdBy = groundImageryAbridged.CreatedBy()
        self.transactionId = groundImageryAbridged.TransactionId()
        self.notes = groundImageryAbridged.Notes()
        self.format = groundImageryAbridged.Format()
        self.filesize = groundImageryAbridged.Filesize()
        self.checksumValue = groundImageryAbridged.ChecksumValue()

    # GroundImagery_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.imageTime is not None:
            imageTime = builder.CreateString(self.imageTime)
        if self.filename is not None:
            filename = builder.CreateString(self.filename)
        if self.regionText is not None:
            regionText = builder.CreateString(self.regionText)
        if self.regionGeoJson is not None:
            regionGeoJson = builder.CreateString(self.regionGeoJson)
        if self.regionType is not None:
            regionType = builder.CreateString(self.regionType)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.subjectId is not None:
            subjectId = builder.CreateString(self.subjectId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.format is not None:
            format = builder.CreateString(self.format)
        if self.checksumValue is not None:
            checksumValue = builder.CreateString(self.checksumValue)
        GroundImagery_AbridgedStart(builder)
        if self.id is not None:
            GroundImagery_AbridgedAddId(builder, id)
        if self.idSensor is not None:
            GroundImagery_AbridgedAddIdSensor(builder, idSensor)
        if self.classificationMarking is not None:
            GroundImagery_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.imageTime is not None:
            GroundImagery_AbridgedAddImageTime(builder, imageTime)
        if self.filename is not None:
            GroundImagery_AbridgedAddFilename(builder, filename)
        if self.regionText is not None:
            GroundImagery_AbridgedAddRegionText(builder, regionText)
        if self.regionGeoJson is not None:
            GroundImagery_AbridgedAddRegionGeoJson(builder, regionGeoJson)
        if self.regionType is not None:
            GroundImagery_AbridgedAddRegionType(builder, regionType)
        GroundImagery_AbridgedAddRegionNdims(builder, self.regionNdims)
        GroundImagery_AbridgedAddRegionSrid(builder, self.regionSrid)
        if self.origSensorId is not None:
            GroundImagery_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.subjectId is not None:
            GroundImagery_AbridgedAddSubjectId(builder, subjectId)
        if self.name is not None:
            GroundImagery_AbridgedAddName(builder, name)
        if self.source is not None:
            GroundImagery_AbridgedAddSource(builder, source)
        if self.origin is not None:
            GroundImagery_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            GroundImagery_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            GroundImagery_AbridgedAddSourceDl(builder, sourceDl)
        GroundImagery_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            GroundImagery_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            GroundImagery_AbridgedAddCreatedBy(builder, createdBy)
        if self.transactionId is not None:
            GroundImagery_AbridgedAddTransactionId(builder, transactionId)
        if self.notes is not None:
            GroundImagery_AbridgedAddNotes(builder, notes)
        if self.format is not None:
            GroundImagery_AbridgedAddFormat(builder, format)
        GroundImagery_AbridgedAddFilesize(builder, self.filesize)
        if self.checksumValue is not None:
            GroundImagery_AbridgedAddChecksumValue(builder, checksumValue)
        groundImageryAbridged = GroundImagery_AbridgedEnd(builder)
        return groundImageryAbridged
