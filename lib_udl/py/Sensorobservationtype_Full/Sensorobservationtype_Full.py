# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class Sensorobservationtype_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sensorobservationtype_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorobservationtype_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Sensorobservationtype_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # Sensorobservationtype_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSOROBSERVATIONTYPE-ID
    # Constraints: Minimum length = 1, Maximum length = 2
    # Sensorobservationtype_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The observation measurement type produced by a sensor.
    # Example: /// Example: 5
    # Constraints: Minimum length = 0, Maximum length = 128
    # Sensorobservationtype_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensorobservationtype_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensorobservationtype_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensorobservationtype_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Sensorobservationtype_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensorobservationtype_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensorobservationtype_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensorobservationtype_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Sensorobservationtype_FullStart(builder):
    builder.StartObject(9)

def Start(builder):
    Sensorobservationtype_FullStart(builder)

def Sensorobservationtype_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Sensorobservationtype_FullAddId(builder, id)

def Sensorobservationtype_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Sensorobservationtype_FullAddType(builder, type)

def Sensorobservationtype_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Sensorobservationtype_FullAddCreatedAt(builder, createdAt)

def Sensorobservationtype_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Sensorobservationtype_FullAddCreatedBy(builder, createdBy)

def Sensorobservationtype_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Sensorobservationtype_FullAddUpdatedAt(builder, updatedAt)

def Sensorobservationtype_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Sensorobservationtype_FullAddUpdatedBy(builder, updatedBy)

def Sensorobservationtype_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Sensorobservationtype_FullAddSource(builder, source)

def Sensorobservationtype_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(7, dataMode, 0)

def AddDataMode(builder, dataMode):
    Sensorobservationtype_FullAddDataMode(builder, dataMode)

def Sensorobservationtype_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Sensorobservationtype_FullAddOrigNetwork(builder, origNetwork)

def Sensorobservationtype_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Sensorobservationtype_FullEnd(builder)


class Sensorobservationtype_FullT(object):

    # Sensorobservationtype_FullT
    def __init__(self):
        self.id = None  # type: str
        self.type = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorobservationtypeFull = Sensorobservationtype_Full()
        sensorobservationtypeFull.Init(buf, pos)
        return cls.InitFromObj(sensorobservationtypeFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorobservationtypeFull):
        x = Sensorobservationtype_FullT()
        x._UnPack(sensorobservationtypeFull)
        return x

    # Sensorobservationtype_FullT
    def _UnPack(self, sensorobservationtypeFull):
        if sensorobservationtypeFull is None:
            return
        self.id = sensorobservationtypeFull.Id()
        self.type = sensorobservationtypeFull.Type()
        self.createdAt = sensorobservationtypeFull.CreatedAt()
        self.createdBy = sensorobservationtypeFull.CreatedBy()
        self.updatedAt = sensorobservationtypeFull.UpdatedAt()
        self.updatedBy = sensorobservationtypeFull.UpdatedBy()
        self.source = sensorobservationtypeFull.Source()
        self.dataMode = sensorobservationtypeFull.DataMode()
        self.origNetwork = sensorobservationtypeFull.OrigNetwork()

    # Sensorobservationtype_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Sensorobservationtype_FullStart(builder)
        if self.id is not None:
            Sensorobservationtype_FullAddId(builder, id)
        if self.type is not None:
            Sensorobservationtype_FullAddType(builder, type)
        if self.createdAt is not None:
            Sensorobservationtype_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Sensorobservationtype_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Sensorobservationtype_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Sensorobservationtype_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            Sensorobservationtype_FullAddSource(builder, source)
        Sensorobservationtype_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            Sensorobservationtype_FullAddOrigNetwork(builder, origNetwork)
        sensorobservationtypeFull = Sensorobservationtype_FullEnd(builder)
        return sensorobservationtypeFull
