# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
class OrbitDetermination_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrbitDetermination_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrbitDetermination_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrbitDetermination_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x42\x49", size_prefixed=size_prefixed)

    # OrbitDetermination_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # OrbitDetermination_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OrbitDetermination_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
    # Example: /// Example: 2023-08-28T15:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
    # Example: /// Example: 54741
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitDetermination_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Full
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 54741
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
    # Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitDetermination_Full
    def AprioriIdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def AprioriElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
    # Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitDetermination_Full
    def AprioriIdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def AprioriStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether this is an initial orbit determination.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def InitialOd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def LastObStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def LastObEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time span used for the OD of the object, in days.
    # Example: /// Example: 3.5
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def TimeSpan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
    # Example: /// Example: 2023-08-28T11:20:21.247192Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def EffectiveFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
    # Example: /// Example: 2023-08-30T08:15:00.123456Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def EffectiveUntil(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
    # Example: /// Example: 0.991
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def Wrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
    # Example: /// Example: 1.02
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def PreviousWrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
    # Example: /// Example: 0.985
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def FirstPassWrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
    # Example: /// Example: 0.975
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def BestPassWrms(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Error growth rate of the OD solution in kilometers per day.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def ErrorGrowthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def Edr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
    # Example: /// Example: BLS
    # Constraints: Minimum length = 1, Maximum length = 64
    # OrbitDetermination_Full
    def Method(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
    # Example: /// Example: ASW
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Full
    def MethodSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The fit span, in days, used in a Batch Least Squares (BLS) OD.
    # Example: /// Example: 0.6
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def FitSpan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating whether the ballistic coefficient was estimated during this OD solution.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def BallisticCoeffEst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Model used to estimate the ballistic coefficient.
    # Example: /// Example: GaussMarkov
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Full
    def BallisticCoeffModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether the AGOM was estimated during this OD solution.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def AgomEst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Model used to estimate the AGOM.
    # Example: /// Example: RandomWalk
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Full
    def AgomModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
    # Example: /// Example: 0.001
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def RmsConvergenceCriteria(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of iterations taken for the algorithm to converge on an OD solution.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def NumIterations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
    # Example: /// Example: ['EO', 'RADAR']
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def AcceptedObTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Full
    def AcceptedObTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Full
    def AcceptedObTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    # Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def AcceptedObIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Full
    def AcceptedObIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Full
    def AcceptedObIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
    # Example: /// Example: ['DOA', 'RF']
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def RejectedObTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Full
    def RejectedObTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Full
    def RejectedObTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    # Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def RejectedObIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Full
    def RejectedObIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Full
    def RejectedObIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
    # Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def SensorIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitDetermination_Full
    def SensorIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitDetermination_Full
    def SensorIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OrbitDetermination_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # OrbitDetermination_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitDetermination_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitDetermination_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OrbitDetermination_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OrbitDetermination_Full
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OrbitDetermination_FullStart(builder):
    builder.StartObject(45)

def Start(builder):
    OrbitDetermination_FullStart(builder)

def OrbitDetermination_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OrbitDetermination_FullAddId(builder, id)

def OrbitDetermination_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OrbitDetermination_FullAddClassificationMarking(builder, classificationMarking)

def OrbitDetermination_FullAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    OrbitDetermination_FullAddStartTime(builder, startTime)

def OrbitDetermination_FullAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    OrbitDetermination_FullAddEndTime(builder, endTime)

def OrbitDetermination_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OrbitDetermination_FullAddIdOnOrbit(builder, idOnOrbit)

def OrbitDetermination_FullAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    OrbitDetermination_FullAddOrigObjectId(builder, origObjectId)

def OrbitDetermination_FullAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    OrbitDetermination_FullAddSatNo(builder, satNo)

def OrbitDetermination_FullAddAprioriIdElset(builder, aprioriIdElset):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriIdElset), 0)

def AddAprioriIdElset(builder, aprioriIdElset):
    OrbitDetermination_FullAddAprioriIdElset(builder, aprioriIdElset)

def OrbitDetermination_FullAddAprioriElset(builder, aprioriElset):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriElset), 0)

def AddAprioriElset(builder, aprioriElset):
    OrbitDetermination_FullAddAprioriElset(builder, aprioriElset)

def OrbitDetermination_FullAddAprioriIdStateVector(builder, aprioriIdStateVector):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriIdStateVector), 0)

def AddAprioriIdStateVector(builder, aprioriIdStateVector):
    OrbitDetermination_FullAddAprioriIdStateVector(builder, aprioriIdStateVector)

def OrbitDetermination_FullAddAprioriStateVector(builder, aprioriStateVector):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(aprioriStateVector), 0)

def AddAprioriStateVector(builder, aprioriStateVector):
    OrbitDetermination_FullAddAprioriStateVector(builder, aprioriStateVector)

def OrbitDetermination_FullAddInitialOd(builder, initialOd):
    builder.PrependBoolSlot(11, initialOd, 0)

def AddInitialOd(builder, initialOd):
    OrbitDetermination_FullAddInitialOd(builder, initialOd)

def OrbitDetermination_FullAddLastObStart(builder, lastObStart):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(lastObStart), 0)

def AddLastObStart(builder, lastObStart):
    OrbitDetermination_FullAddLastObStart(builder, lastObStart)

def OrbitDetermination_FullAddLastObEnd(builder, lastObEnd):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(lastObEnd), 0)

def AddLastObEnd(builder, lastObEnd):
    OrbitDetermination_FullAddLastObEnd(builder, lastObEnd)

def OrbitDetermination_FullAddTimeSpan(builder, timeSpan):
    builder.PrependFloat64Slot(14, timeSpan, 0.0)

def AddTimeSpan(builder, timeSpan):
    OrbitDetermination_FullAddTimeSpan(builder, timeSpan)

def OrbitDetermination_FullAddEffectiveFrom(builder, effectiveFrom):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveFrom), 0)

def AddEffectiveFrom(builder, effectiveFrom):
    OrbitDetermination_FullAddEffectiveFrom(builder, effectiveFrom)

def OrbitDetermination_FullAddEffectiveUntil(builder, effectiveUntil):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveUntil), 0)

def AddEffectiveUntil(builder, effectiveUntil):
    OrbitDetermination_FullAddEffectiveUntil(builder, effectiveUntil)

def OrbitDetermination_FullAddWrms(builder, wrms):
    builder.PrependFloat64Slot(17, wrms, 0.0)

def AddWrms(builder, wrms):
    OrbitDetermination_FullAddWrms(builder, wrms)

def OrbitDetermination_FullAddPreviousWrms(builder, previousWrms):
    builder.PrependFloat64Slot(18, previousWrms, 0.0)

def AddPreviousWrms(builder, previousWrms):
    OrbitDetermination_FullAddPreviousWrms(builder, previousWrms)

def OrbitDetermination_FullAddFirstPassWrms(builder, firstPassWrms):
    builder.PrependFloat64Slot(19, firstPassWrms, 0.0)

def AddFirstPassWrms(builder, firstPassWrms):
    OrbitDetermination_FullAddFirstPassWrms(builder, firstPassWrms)

def OrbitDetermination_FullAddBestPassWrms(builder, bestPassWrms):
    builder.PrependFloat64Slot(20, bestPassWrms, 0.0)

def AddBestPassWrms(builder, bestPassWrms):
    OrbitDetermination_FullAddBestPassWrms(builder, bestPassWrms)

def OrbitDetermination_FullAddErrorGrowthRate(builder, errorGrowthRate):
    builder.PrependFloat64Slot(21, errorGrowthRate, 0.0)

def AddErrorGrowthRate(builder, errorGrowthRate):
    OrbitDetermination_FullAddErrorGrowthRate(builder, errorGrowthRate)

def OrbitDetermination_FullAddEdr(builder, edr):
    builder.PrependFloat64Slot(22, edr, 0.0)

def AddEdr(builder, edr):
    OrbitDetermination_FullAddEdr(builder, edr)

def OrbitDetermination_FullAddMethod(builder, method):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(method), 0)

def AddMethod(builder, method):
    OrbitDetermination_FullAddMethod(builder, method)

def OrbitDetermination_FullAddMethodSource(builder, methodSource):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(methodSource), 0)

def AddMethodSource(builder, methodSource):
    OrbitDetermination_FullAddMethodSource(builder, methodSource)

def OrbitDetermination_FullAddFitSpan(builder, fitSpan):
    builder.PrependFloat64Slot(25, fitSpan, 0.0)

def AddFitSpan(builder, fitSpan):
    OrbitDetermination_FullAddFitSpan(builder, fitSpan)

def OrbitDetermination_FullAddBallisticCoeffEst(builder, ballisticCoeffEst):
    builder.PrependBoolSlot(26, ballisticCoeffEst, 0)

def AddBallisticCoeffEst(builder, ballisticCoeffEst):
    OrbitDetermination_FullAddBallisticCoeffEst(builder, ballisticCoeffEst)

def OrbitDetermination_FullAddBallisticCoeffModel(builder, ballisticCoeffModel):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(ballisticCoeffModel), 0)

def AddBallisticCoeffModel(builder, ballisticCoeffModel):
    OrbitDetermination_FullAddBallisticCoeffModel(builder, ballisticCoeffModel)

def OrbitDetermination_FullAddAgomEst(builder, agomEst):
    builder.PrependBoolSlot(28, agomEst, 0)

def AddAgomEst(builder, agomEst):
    OrbitDetermination_FullAddAgomEst(builder, agomEst)

def OrbitDetermination_FullAddAgomModel(builder, agomModel):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(agomModel), 0)

def AddAgomModel(builder, agomModel):
    OrbitDetermination_FullAddAgomModel(builder, agomModel)

def OrbitDetermination_FullAddRmsConvergenceCriteria(builder, rmsConvergenceCriteria):
    builder.PrependFloat64Slot(30, rmsConvergenceCriteria, 0.0)

def AddRmsConvergenceCriteria(builder, rmsConvergenceCriteria):
    OrbitDetermination_FullAddRmsConvergenceCriteria(builder, rmsConvergenceCriteria)

def OrbitDetermination_FullAddNumIterations(builder, numIterations):
    builder.PrependInt32Slot(31, numIterations, 0)

def AddNumIterations(builder, numIterations):
    OrbitDetermination_FullAddNumIterations(builder, numIterations)

def OrbitDetermination_FullAddAcceptedObTyps(builder, acceptedObTyps):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(acceptedObTyps), 0)

def AddAcceptedObTyps(builder, acceptedObTyps):
    OrbitDetermination_FullAddAcceptedObTyps(builder, acceptedObTyps)

def OrbitDetermination_FullStartAcceptedObTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcceptedObTypsVector(builder, numElems):
    return OrbitDetermination_FullStartAcceptedObTypsVector(builder, numElems)

def OrbitDetermination_FullAddAcceptedObIds(builder, acceptedObIds):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(acceptedObIds), 0)

def AddAcceptedObIds(builder, acceptedObIds):
    OrbitDetermination_FullAddAcceptedObIds(builder, acceptedObIds)

def OrbitDetermination_FullStartAcceptedObIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcceptedObIdsVector(builder, numElems):
    return OrbitDetermination_FullStartAcceptedObIdsVector(builder, numElems)

def OrbitDetermination_FullAddRejectedObTyps(builder, rejectedObTyps):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(rejectedObTyps), 0)

def AddRejectedObTyps(builder, rejectedObTyps):
    OrbitDetermination_FullAddRejectedObTyps(builder, rejectedObTyps)

def OrbitDetermination_FullStartRejectedObTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRejectedObTypsVector(builder, numElems):
    return OrbitDetermination_FullStartRejectedObTypsVector(builder, numElems)

def OrbitDetermination_FullAddRejectedObIds(builder, rejectedObIds):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(rejectedObIds), 0)

def AddRejectedObIds(builder, rejectedObIds):
    OrbitDetermination_FullAddRejectedObIds(builder, rejectedObIds)

def OrbitDetermination_FullStartRejectedObIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRejectedObIdsVector(builder, numElems):
    return OrbitDetermination_FullStartRejectedObIdsVector(builder, numElems)

def OrbitDetermination_FullAddSensorIds(builder, sensorIds):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(sensorIds), 0)

def AddSensorIds(builder, sensorIds):
    OrbitDetermination_FullAddSensorIds(builder, sensorIds)

def OrbitDetermination_FullStartSensorIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSensorIdsVector(builder, numElems):
    return OrbitDetermination_FullStartSensorIdsVector(builder, numElems)

def OrbitDetermination_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OrbitDetermination_FullAddCreatedAt(builder, createdAt)

def OrbitDetermination_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OrbitDetermination_FullAddCreatedBy(builder, createdBy)

def OrbitDetermination_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    OrbitDetermination_FullAddSourceDl(builder, sourceDl)

def OrbitDetermination_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OrbitDetermination_FullAddSource(builder, source)

def OrbitDetermination_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OrbitDetermination_FullAddOrigin(builder, origin)

def OrbitDetermination_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OrbitDetermination_FullAddOrigNetwork(builder, origNetwork)

def OrbitDetermination_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(43, dataMode, 0)

def AddDataMode(builder, dataMode):
    OrbitDetermination_FullAddDataMode(builder, dataMode)

def OrbitDetermination_FullAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    OrbitDetermination_FullAddOnOrbit(builder, onOrbit)

def OrbitDetermination_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrbitDetermination_FullEnd(builder)

try:
    from typing import List
except:
    pass

class OrbitDetermination_FullT(object):

    # OrbitDetermination_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.origObjectId = None  # type: str
        self.satNo = 0  # type: int
        self.aprioriIdElset = None  # type: str
        self.aprioriElset = None  # type: str
        self.aprioriIdStateVector = None  # type: str
        self.aprioriStateVector = None  # type: str
        self.initialOd = False  # type: bool
        self.lastObStart = None  # type: str
        self.lastObEnd = None  # type: str
        self.timeSpan = 0.0  # type: float
        self.effectiveFrom = None  # type: str
        self.effectiveUntil = None  # type: str
        self.wrms = 0.0  # type: float
        self.previousWrms = 0.0  # type: float
        self.firstPassWrms = 0.0  # type: float
        self.bestPassWrms = 0.0  # type: float
        self.errorGrowthRate = 0.0  # type: float
        self.edr = 0.0  # type: float
        self.method = None  # type: str
        self.methodSource = None  # type: str
        self.fitSpan = 0.0  # type: float
        self.ballisticCoeffEst = False  # type: bool
        self.ballisticCoeffModel = None  # type: str
        self.agomEst = False  # type: bool
        self.agomModel = None  # type: str
        self.rmsConvergenceCriteria = 0.0  # type: float
        self.numIterations = 0  # type: int
        self.acceptedObTyps = None  # type: List[str]
        self.acceptedObIds = None  # type: List[str]
        self.rejectedObTyps = None  # type: List[str]
        self.rejectedObIds = None  # type: List[str]
        self.sensorIds = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.onOrbit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        orbitDeterminationFull = OrbitDetermination_Full()
        orbitDeterminationFull.Init(buf, pos)
        return cls.InitFromObj(orbitDeterminationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, orbitDeterminationFull):
        x = OrbitDetermination_FullT()
        x._UnPack(orbitDeterminationFull)
        return x

    # OrbitDetermination_FullT
    def _UnPack(self, orbitDeterminationFull):
        if orbitDeterminationFull is None:
            return
        self.id = orbitDeterminationFull.Id()
        self.classificationMarking = orbitDeterminationFull.ClassificationMarking()
        self.startTime = orbitDeterminationFull.StartTime()
        self.endTime = orbitDeterminationFull.EndTime()
        self.idOnOrbit = orbitDeterminationFull.IdOnOrbit()
        self.origObjectId = orbitDeterminationFull.OrigObjectId()
        self.satNo = orbitDeterminationFull.SatNo()
        self.aprioriIdElset = orbitDeterminationFull.AprioriIdElset()
        self.aprioriElset = orbitDeterminationFull.AprioriElset()
        self.aprioriIdStateVector = orbitDeterminationFull.AprioriIdStateVector()
        self.aprioriStateVector = orbitDeterminationFull.AprioriStateVector()
        self.initialOd = orbitDeterminationFull.InitialOd()
        self.lastObStart = orbitDeterminationFull.LastObStart()
        self.lastObEnd = orbitDeterminationFull.LastObEnd()
        self.timeSpan = orbitDeterminationFull.TimeSpan()
        self.effectiveFrom = orbitDeterminationFull.EffectiveFrom()
        self.effectiveUntil = orbitDeterminationFull.EffectiveUntil()
        self.wrms = orbitDeterminationFull.Wrms()
        self.previousWrms = orbitDeterminationFull.PreviousWrms()
        self.firstPassWrms = orbitDeterminationFull.FirstPassWrms()
        self.bestPassWrms = orbitDeterminationFull.BestPassWrms()
        self.errorGrowthRate = orbitDeterminationFull.ErrorGrowthRate()
        self.edr = orbitDeterminationFull.Edr()
        self.method = orbitDeterminationFull.Method()
        self.methodSource = orbitDeterminationFull.MethodSource()
        self.fitSpan = orbitDeterminationFull.FitSpan()
        self.ballisticCoeffEst = orbitDeterminationFull.BallisticCoeffEst()
        self.ballisticCoeffModel = orbitDeterminationFull.BallisticCoeffModel()
        self.agomEst = orbitDeterminationFull.AgomEst()
        self.agomModel = orbitDeterminationFull.AgomModel()
        self.rmsConvergenceCriteria = orbitDeterminationFull.RmsConvergenceCriteria()
        self.numIterations = orbitDeterminationFull.NumIterations()
        if not orbitDeterminationFull.AcceptedObTypsIsNone():
            self.acceptedObTyps = []
            for i in range(orbitDeterminationFull.AcceptedObTypsLength()):
                self.acceptedObTyps.append(orbitDeterminationFull.AcceptedObTyps(i))
        if not orbitDeterminationFull.AcceptedObIdsIsNone():
            self.acceptedObIds = []
            for i in range(orbitDeterminationFull.AcceptedObIdsLength()):
                self.acceptedObIds.append(orbitDeterminationFull.AcceptedObIds(i))
        if not orbitDeterminationFull.RejectedObTypsIsNone():
            self.rejectedObTyps = []
            for i in range(orbitDeterminationFull.RejectedObTypsLength()):
                self.rejectedObTyps.append(orbitDeterminationFull.RejectedObTyps(i))
        if not orbitDeterminationFull.RejectedObIdsIsNone():
            self.rejectedObIds = []
            for i in range(orbitDeterminationFull.RejectedObIdsLength()):
                self.rejectedObIds.append(orbitDeterminationFull.RejectedObIds(i))
        if not orbitDeterminationFull.SensorIdsIsNone():
            self.sensorIds = []
            for i in range(orbitDeterminationFull.SensorIdsLength()):
                self.sensorIds.append(orbitDeterminationFull.SensorIds(i))
        self.createdAt = orbitDeterminationFull.CreatedAt()
        self.createdBy = orbitDeterminationFull.CreatedBy()
        self.sourceDl = orbitDeterminationFull.SourceDl()
        self.source = orbitDeterminationFull.Source()
        self.origin = orbitDeterminationFull.Origin()
        self.origNetwork = orbitDeterminationFull.OrigNetwork()
        self.dataMode = orbitDeterminationFull.DataMode()
        self.onOrbit = orbitDeterminationFull.OnOrbit()

    # OrbitDetermination_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.aprioriIdElset is not None:
            aprioriIdElset = builder.CreateString(self.aprioriIdElset)
        if self.aprioriElset is not None:
            aprioriElset = builder.CreateString(self.aprioriElset)
        if self.aprioriIdStateVector is not None:
            aprioriIdStateVector = builder.CreateString(self.aprioriIdStateVector)
        if self.aprioriStateVector is not None:
            aprioriStateVector = builder.CreateString(self.aprioriStateVector)
        if self.lastObStart is not None:
            lastObStart = builder.CreateString(self.lastObStart)
        if self.lastObEnd is not None:
            lastObEnd = builder.CreateString(self.lastObEnd)
        if self.effectiveFrom is not None:
            effectiveFrom = builder.CreateString(self.effectiveFrom)
        if self.effectiveUntil is not None:
            effectiveUntil = builder.CreateString(self.effectiveUntil)
        if self.method is not None:
            method = builder.CreateString(self.method)
        if self.methodSource is not None:
            methodSource = builder.CreateString(self.methodSource)
        if self.ballisticCoeffModel is not None:
            ballisticCoeffModel = builder.CreateString(self.ballisticCoeffModel)
        if self.agomModel is not None:
            agomModel = builder.CreateString(self.agomModel)
        if self.acceptedObTyps is not None:
            acceptedObTypslist = []
            for i in range(len(self.acceptedObTyps)):
                acceptedObTypslist.append(builder.CreateString(self.acceptedObTyps[i]))
            OrbitDetermination_FullStartAcceptedObTypsVector(builder, len(self.acceptedObTyps))
            for i in reversed(range(len(self.acceptedObTyps))):
                builder.PrependUOffsetTRelative(acceptedObTypslist[i])
            acceptedObTyps = builder.EndVector()
        if self.acceptedObIds is not None:
            acceptedObIdslist = []
            for i in range(len(self.acceptedObIds)):
                acceptedObIdslist.append(builder.CreateString(self.acceptedObIds[i]))
            OrbitDetermination_FullStartAcceptedObIdsVector(builder, len(self.acceptedObIds))
            for i in reversed(range(len(self.acceptedObIds))):
                builder.PrependUOffsetTRelative(acceptedObIdslist[i])
            acceptedObIds = builder.EndVector()
        if self.rejectedObTyps is not None:
            rejectedObTypslist = []
            for i in range(len(self.rejectedObTyps)):
                rejectedObTypslist.append(builder.CreateString(self.rejectedObTyps[i]))
            OrbitDetermination_FullStartRejectedObTypsVector(builder, len(self.rejectedObTyps))
            for i in reversed(range(len(self.rejectedObTyps))):
                builder.PrependUOffsetTRelative(rejectedObTypslist[i])
            rejectedObTyps = builder.EndVector()
        if self.rejectedObIds is not None:
            rejectedObIdslist = []
            for i in range(len(self.rejectedObIds)):
                rejectedObIdslist.append(builder.CreateString(self.rejectedObIds[i]))
            OrbitDetermination_FullStartRejectedObIdsVector(builder, len(self.rejectedObIds))
            for i in reversed(range(len(self.rejectedObIds))):
                builder.PrependUOffsetTRelative(rejectedObIdslist[i])
            rejectedObIds = builder.EndVector()
        if self.sensorIds is not None:
            sensorIdslist = []
            for i in range(len(self.sensorIds)):
                sensorIdslist.append(builder.CreateString(self.sensorIds[i]))
            OrbitDetermination_FullStartSensorIdsVector(builder, len(self.sensorIds))
            for i in reversed(range(len(self.sensorIds))):
                builder.PrependUOffsetTRelative(sensorIdslist[i])
            sensorIds = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        OrbitDetermination_FullStart(builder)
        if self.id is not None:
            OrbitDetermination_FullAddId(builder, id)
        if self.classificationMarking is not None:
            OrbitDetermination_FullAddClassificationMarking(builder, classificationMarking)
        if self.startTime is not None:
            OrbitDetermination_FullAddStartTime(builder, startTime)
        if self.endTime is not None:
            OrbitDetermination_FullAddEndTime(builder, endTime)
        if self.idOnOrbit is not None:
            OrbitDetermination_FullAddIdOnOrbit(builder, idOnOrbit)
        if self.origObjectId is not None:
            OrbitDetermination_FullAddOrigObjectId(builder, origObjectId)
        OrbitDetermination_FullAddSatNo(builder, self.satNo)
        if self.aprioriIdElset is not None:
            OrbitDetermination_FullAddAprioriIdElset(builder, aprioriIdElset)
        if self.aprioriElset is not None:
            OrbitDetermination_FullAddAprioriElset(builder, aprioriElset)
        if self.aprioriIdStateVector is not None:
            OrbitDetermination_FullAddAprioriIdStateVector(builder, aprioriIdStateVector)
        if self.aprioriStateVector is not None:
            OrbitDetermination_FullAddAprioriStateVector(builder, aprioriStateVector)
        OrbitDetermination_FullAddInitialOd(builder, self.initialOd)
        if self.lastObStart is not None:
            OrbitDetermination_FullAddLastObStart(builder, lastObStart)
        if self.lastObEnd is not None:
            OrbitDetermination_FullAddLastObEnd(builder, lastObEnd)
        OrbitDetermination_FullAddTimeSpan(builder, self.timeSpan)
        if self.effectiveFrom is not None:
            OrbitDetermination_FullAddEffectiveFrom(builder, effectiveFrom)
        if self.effectiveUntil is not None:
            OrbitDetermination_FullAddEffectiveUntil(builder, effectiveUntil)
        OrbitDetermination_FullAddWrms(builder, self.wrms)
        OrbitDetermination_FullAddPreviousWrms(builder, self.previousWrms)
        OrbitDetermination_FullAddFirstPassWrms(builder, self.firstPassWrms)
        OrbitDetermination_FullAddBestPassWrms(builder, self.bestPassWrms)
        OrbitDetermination_FullAddErrorGrowthRate(builder, self.errorGrowthRate)
        OrbitDetermination_FullAddEdr(builder, self.edr)
        if self.method is not None:
            OrbitDetermination_FullAddMethod(builder, method)
        if self.methodSource is not None:
            OrbitDetermination_FullAddMethodSource(builder, methodSource)
        OrbitDetermination_FullAddFitSpan(builder, self.fitSpan)
        OrbitDetermination_FullAddBallisticCoeffEst(builder, self.ballisticCoeffEst)
        if self.ballisticCoeffModel is not None:
            OrbitDetermination_FullAddBallisticCoeffModel(builder, ballisticCoeffModel)
        OrbitDetermination_FullAddAgomEst(builder, self.agomEst)
        if self.agomModel is not None:
            OrbitDetermination_FullAddAgomModel(builder, agomModel)
        OrbitDetermination_FullAddRmsConvergenceCriteria(builder, self.rmsConvergenceCriteria)
        OrbitDetermination_FullAddNumIterations(builder, self.numIterations)
        if self.acceptedObTyps is not None:
            OrbitDetermination_FullAddAcceptedObTyps(builder, acceptedObTyps)
        if self.acceptedObIds is not None:
            OrbitDetermination_FullAddAcceptedObIds(builder, acceptedObIds)
        if self.rejectedObTyps is not None:
            OrbitDetermination_FullAddRejectedObTyps(builder, rejectedObTyps)
        if self.rejectedObIds is not None:
            OrbitDetermination_FullAddRejectedObIds(builder, rejectedObIds)
        if self.sensorIds is not None:
            OrbitDetermination_FullAddSensorIds(builder, sensorIds)
        if self.createdAt is not None:
            OrbitDetermination_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OrbitDetermination_FullAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            OrbitDetermination_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            OrbitDetermination_FullAddSource(builder, source)
        if self.origin is not None:
            OrbitDetermination_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            OrbitDetermination_FullAddOrigNetwork(builder, origNetwork)
        OrbitDetermination_FullAddDataMode(builder, self.dataMode)
        if self.onOrbit is not None:
            OrbitDetermination_FullAddOnOrbit(builder, onOrbit)
        orbitDeterminationFull = OrbitDetermination_FullEnd(builder)
        return orbitDeterminationFull
