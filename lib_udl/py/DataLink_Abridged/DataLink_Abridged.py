# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
class DataLink_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLink_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLink_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLink_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLink_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # DataLink_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # DataLink_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
    # Example: /// Example: DESERT WIND
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataLink_Abridged
    def OpExName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The identifier of the originator of this message.
    # Example: /// Example: USCENTCOM
    # Constraints: Minimum length = 1, Maximum length = 36
    # DataLink_Abridged
    def Originator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
    # Example: /// Example: 2024-01-08T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def StopTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
    # Example: /// Example: AFTER
    # Constraints: Minimum length = 0, Maximum length = 8
    # DataLink_Abridged
    def StopTimeMod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
    # Example: /// Example: SACEUR 106
    # Constraints: Minimum length = 0, Maximum length = 36
    # DataLink_Abridged
    def PlanOrigNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
    # Example: /// Example: CONTROL
    # Constraints: Minimum length = 0, Maximum length = 32
    # DataLink_Abridged
    def OpExInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The secondary nickname of the option or the alternative of the operational plan or order.
    # Example: /// Example: ORANGE
    # Constraints: Minimum length = 0, Maximum length = 24
    # DataLink_Abridged
    def OpExInfoAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unique message identifier assigned by the originator.
    # Example: /// Example: 1201003
    # Constraints: Minimum length = 0, Maximum length = 16
    # DataLink_Abridged
    def SerialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The month in which this message originated.
    # Example: /// Example: OCT
    # Constraints: Minimum length = 0, Maximum length = 12
    # DataLink_Abridged
    def Month(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
    # Example: /// Example: CHG
    # Constraints: Minimum length = 0, Maximum length = 8
    # DataLink_Abridged
    def Qualifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The serial number associated with the message qualifier.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def QualSn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def References(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def ReferencesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def ReferencesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # The identifier for this data link message cancellation.
    # Example: /// Example: ABSTAT
    # Constraints: Minimum length = 0, Maximum length = 20
    # DataLink_Abridged
    def CanxId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originator of this data link message cancellation.
    # Example: /// Example: 505 AOC
    # Constraints: Minimum length = 0, Maximum length = 30
    # DataLink_Abridged
    def CanxOriginator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def CanxTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Serial number assigned to this data link message cancellation.
    # Example: /// Example: ABC1234567
    # Constraints: Minimum length = 0, Maximum length = 10
    # DataLink_Abridged
    def CanxSerialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
    # Example: /// Example: PASEP
    # Constraints: Minimum length = 0, Maximum length = 5
    # DataLink_Abridged
    def CanxSpecialNotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
    # Example: /// Example: ['RDU', 'X234BS']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def CanxSics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def CanxSicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def CanxSicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # The name of the point of contact for this data link message.
    # Example: /// Example: F. BURNS
    # Constraints: Minimum length = 0, Maximum length = 32
    # DataLink_Abridged
    def PocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The rank or position of the point of contact for this data link message in a military or civilian organization.
    # Example: /// Example: MAJ
    # Constraints: Minimum length = 0, Maximum length = 16
    # DataLink_Abridged
    def PocRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unit identifier or call sign of the point of contact for this data link message.
    # Example: /// Example: 4077 MASH
    # Constraints: Minimum length = 0, Maximum length = 38
    # DataLink_Abridged
    def PocCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The location name of the point of contact for this data link message.
    # Example: /// Example: CAMP SWAMPY
    # Constraints: Minimum length = 0, Maximum length = 20
    # DataLink_Abridged
    def PocLocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def PocLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def PocLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
    # Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def PocNums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def PocNumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def PocNumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # The code for the point of reference from which the coordinates and networks are computed.
    # Example: /// Example: EUR-T
    # Constraints: Minimum length = 0, Maximum length = 5
    # DataLink_Abridged
    def GeoDatum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def RefPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def RefPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def RefPointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def VoiceCoord(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def VoiceCoordLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def VoiceCoordIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
    # Example: /// Example: MAN
    # Constraints: Minimum length = 0, Maximum length = 4
    # DataLink_Abridged
    def SysDefaultCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
    # Example: /// Example: 2.1
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def WinSizeMult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
    # Example: /// Example: 1.25
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def WinSizeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
    # Example: /// Example: 6
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def MinTrackQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def MaxTrackQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def ResTrackQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
    # Example: /// Example: 60
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def CourseDiff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
    # Example: /// Example: 50
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def SpeedDiff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
    # Example: /// Example: 20
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def AltDiff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def MinGeoPosQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def MaxGeoPosQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
    # Example: /// Example: 1.7
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def DecorrWinMult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def ConsecDecorr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def MultiDuty(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def MultiDutyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def MultiDutyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        return o == 0

    # Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def Ops(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def OpsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def OpsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        return o == 0

    # Designator of the unit for Joint Range Extension (JRE).
    # Example: /// Example: CVN-72
    # Constraints: Minimum length = 0, Maximum length = 30
    # DataLink_Abridged
    def JreUnitDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
    # Example: /// Example: CHARLIE ONE
    # Constraints: Minimum length = 0, Maximum length = 38
    # DataLink_Abridged
    def JreCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Link-16 octal track number assigned as the primary JTIDS unit address.
    # Example: /// Example: 71777
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def JrePriAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Link-16 octal track number assigned as the secondary JTIDS unit address.
    # Example: /// Example: 77771
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def JreSecAdd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Joint Range Extension (JRE) unit details.
    # Example: /// Example: JRE details
    # Constraints: Minimum length = 0, Maximum length = 3000
    # DataLink_Abridged
    def JreDetails(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def SpecTracks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def SpecTracksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def SpecTracksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        return o == 0

    # Array of non-link specific data unit designators.
    # Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def NonLinkUnitDes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def NonLinkUnitDesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def NonLinkUnitDesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

    # Array of Link-16 octal track numbers used as the lower limit of a track block.
    # Example: /// Example: [1234, 2345]
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def TrackNumBlockLls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def TrackNumBlockLlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def TrackNumBlockLlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
    # Example: /// Example: ['0200-0300', '0400-4412']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def TrackNumBlocks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def TrackNumBlocksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def TrackNumBlocksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        return o == 0

    # Data link management code word.
    # Example: /// Example: VICTOR
    # Constraints: Minimum length = 0, Maximum length = 15
    # DataLink_Abridged
    def MgmtCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data link management code word meaning.
    # Example: /// Example: ORBIT AT POINT BRAVO
    # Constraints: Minimum length = 0, Maximum length = 50
    # DataLink_Abridged
    def MgmtCodeMeaning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def AckReq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
    # Example: /// Example: ['AOC EXT 2345', '317 AW']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def AckInstUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def AckInstUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def AckInstUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # Markings that define the source material or the original classification authority for this data link message.
    # Example: /// Example: USJFCOM EXORD SOLID WASTE 98
    # Constraints: Minimum length = 0, Maximum length = 55
    # DataLink_Abridged
    def ClassSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of codes that indicate the reasons material is classified.
    # Example: /// Example: ['15C', '15D']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def ClassReasons(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def ClassReasonsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def ClassReasonsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        return o == 0

    # Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
    # Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def DecInstDates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def DecInstDatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def DecInstDatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # Array of codes that provide justification for exemption from automatic downgrading or declassification.
    # Example: /// Example: ['X1', 'X2']
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def DecExemptCodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def DecExemptCodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def DecExemptCodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        return o == 0

    # Collection of remarks associated with this data link message.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def Remarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLink_Abridged
    def RemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLink_Abridged
    def RemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        return o == 0

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # DataLink_Abridged
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataLink_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # DataLink_Abridged
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # DataLink_Abridged
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DataLink_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataLink_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DataLink_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # DataLink_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # DataLink_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def DataLink_AbridgedStart(builder):
    builder.StartObject(74)

def Start(builder):
    DataLink_AbridgedStart(builder)

def DataLink_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DataLink_AbridgedAddId(builder, id)

def DataLink_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    DataLink_AbridgedAddClassificationMarking(builder, classificationMarking)

def DataLink_AbridgedAddOpExName(builder, opExName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(opExName), 0)

def AddOpExName(builder, opExName):
    DataLink_AbridgedAddOpExName(builder, opExName)

def DataLink_AbridgedAddOriginator(builder, originator):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(originator), 0)

def AddOriginator(builder, originator):
    DataLink_AbridgedAddOriginator(builder, originator)

def DataLink_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    DataLink_AbridgedAddStartTime(builder, startTime)

def DataLink_AbridgedAddStopTime(builder, stopTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stopTime), 0)

def AddStopTime(builder, stopTime):
    DataLink_AbridgedAddStopTime(builder, stopTime)

def DataLink_AbridgedAddStopTimeMod(builder, stopTimeMod):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(stopTimeMod), 0)

def AddStopTimeMod(builder, stopTimeMod):
    DataLink_AbridgedAddStopTimeMod(builder, stopTimeMod)

def DataLink_AbridgedAddPlanOrigNum(builder, planOrigNum):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(planOrigNum), 0)

def AddPlanOrigNum(builder, planOrigNum):
    DataLink_AbridgedAddPlanOrigNum(builder, planOrigNum)

def DataLink_AbridgedAddOpExInfo(builder, opExInfo):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(opExInfo), 0)

def AddOpExInfo(builder, opExInfo):
    DataLink_AbridgedAddOpExInfo(builder, opExInfo)

def DataLink_AbridgedAddOpExInfoAlt(builder, opExInfoAlt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(opExInfoAlt), 0)

def AddOpExInfoAlt(builder, opExInfoAlt):
    DataLink_AbridgedAddOpExInfoAlt(builder, opExInfoAlt)

def DataLink_AbridgedAddSerialNum(builder, serialNum):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(serialNum), 0)

def AddSerialNum(builder, serialNum):
    DataLink_AbridgedAddSerialNum(builder, serialNum)

def DataLink_AbridgedAddMonth(builder, month):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(month), 0)

def AddMonth(builder, month):
    DataLink_AbridgedAddMonth(builder, month)

def DataLink_AbridgedAddQualifier(builder, qualifier):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(qualifier), 0)

def AddQualifier(builder, qualifier):
    DataLink_AbridgedAddQualifier(builder, qualifier)

def DataLink_AbridgedAddQualSn(builder, qualSn):
    builder.PrependInt32Slot(13, qualSn, 0)

def AddQualSn(builder, qualSn):
    DataLink_AbridgedAddQualSn(builder, qualSn)

def DataLink_AbridgedAddReferences(builder, references):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(references), 0)

def AddReferences(builder, references):
    DataLink_AbridgedAddReferences(builder, references)

def DataLink_AbridgedStartReferencesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReferencesVector(builder, numElems):
    return DataLink_AbridgedStartReferencesVector(builder, numElems)

def DataLink_AbridgedAddCanxId(builder, canxId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(canxId), 0)

def AddCanxId(builder, canxId):
    DataLink_AbridgedAddCanxId(builder, canxId)

def DataLink_AbridgedAddCanxOriginator(builder, canxOriginator):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(canxOriginator), 0)

def AddCanxOriginator(builder, canxOriginator):
    DataLink_AbridgedAddCanxOriginator(builder, canxOriginator)

def DataLink_AbridgedAddCanxTs(builder, canxTs):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(canxTs), 0)

def AddCanxTs(builder, canxTs):
    DataLink_AbridgedAddCanxTs(builder, canxTs)

def DataLink_AbridgedAddCanxSerialNum(builder, canxSerialNum):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(canxSerialNum), 0)

def AddCanxSerialNum(builder, canxSerialNum):
    DataLink_AbridgedAddCanxSerialNum(builder, canxSerialNum)

def DataLink_AbridgedAddCanxSpecialNotation(builder, canxSpecialNotation):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(canxSpecialNotation), 0)

def AddCanxSpecialNotation(builder, canxSpecialNotation):
    DataLink_AbridgedAddCanxSpecialNotation(builder, canxSpecialNotation)

def DataLink_AbridgedAddCanxSics(builder, canxSics):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(canxSics), 0)

def AddCanxSics(builder, canxSics):
    DataLink_AbridgedAddCanxSics(builder, canxSics)

def DataLink_AbridgedStartCanxSicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCanxSicsVector(builder, numElems):
    return DataLink_AbridgedStartCanxSicsVector(builder, numElems)

def DataLink_AbridgedAddPocName(builder, pocName):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(pocName), 0)

def AddPocName(builder, pocName):
    DataLink_AbridgedAddPocName(builder, pocName)

def DataLink_AbridgedAddPocRank(builder, pocRank):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(pocRank), 0)

def AddPocRank(builder, pocRank):
    DataLink_AbridgedAddPocRank(builder, pocRank)

def DataLink_AbridgedAddPocCallSign(builder, pocCallSign):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(pocCallSign), 0)

def AddPocCallSign(builder, pocCallSign):
    DataLink_AbridgedAddPocCallSign(builder, pocCallSign)

def DataLink_AbridgedAddPocLocName(builder, pocLocName):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(pocLocName), 0)

def AddPocLocName(builder, pocLocName):
    DataLink_AbridgedAddPocLocName(builder, pocLocName)

def DataLink_AbridgedAddPocLat(builder, pocLat):
    builder.PrependFloat64Slot(25, pocLat, 0.0)

def AddPocLat(builder, pocLat):
    DataLink_AbridgedAddPocLat(builder, pocLat)

def DataLink_AbridgedAddPocLon(builder, pocLon):
    builder.PrependFloat64Slot(26, pocLon, 0.0)

def AddPocLon(builder, pocLon):
    DataLink_AbridgedAddPocLon(builder, pocLon)

def DataLink_AbridgedAddPocNums(builder, pocNums):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(pocNums), 0)

def AddPocNums(builder, pocNums):
    DataLink_AbridgedAddPocNums(builder, pocNums)

def DataLink_AbridgedStartPocNumsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPocNumsVector(builder, numElems):
    return DataLink_AbridgedStartPocNumsVector(builder, numElems)

def DataLink_AbridgedAddGeoDatum(builder, geoDatum):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(geoDatum), 0)

def AddGeoDatum(builder, geoDatum):
    DataLink_AbridgedAddGeoDatum(builder, geoDatum)

def DataLink_AbridgedAddRefPoints(builder, refPoints):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(refPoints), 0)

def AddRefPoints(builder, refPoints):
    DataLink_AbridgedAddRefPoints(builder, refPoints)

def DataLink_AbridgedStartRefPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRefPointsVector(builder, numElems):
    return DataLink_AbridgedStartRefPointsVector(builder, numElems)

def DataLink_AbridgedAddVoiceCoord(builder, voiceCoord):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(voiceCoord), 0)

def AddVoiceCoord(builder, voiceCoord):
    DataLink_AbridgedAddVoiceCoord(builder, voiceCoord)

def DataLink_AbridgedStartVoiceCoordVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVoiceCoordVector(builder, numElems):
    return DataLink_AbridgedStartVoiceCoordVector(builder, numElems)

def DataLink_AbridgedAddSysDefaultCode(builder, sysDefaultCode):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(sysDefaultCode), 0)

def AddSysDefaultCode(builder, sysDefaultCode):
    DataLink_AbridgedAddSysDefaultCode(builder, sysDefaultCode)

def DataLink_AbridgedAddWinSizeMult(builder, winSizeMult):
    builder.PrependFloat64Slot(32, winSizeMult, 0.0)

def AddWinSizeMult(builder, winSizeMult):
    DataLink_AbridgedAddWinSizeMult(builder, winSizeMult)

def DataLink_AbridgedAddWinSizeMin(builder, winSizeMin):
    builder.PrependFloat64Slot(33, winSizeMin, 0.0)

def AddWinSizeMin(builder, winSizeMin):
    DataLink_AbridgedAddWinSizeMin(builder, winSizeMin)

def DataLink_AbridgedAddMinTrackQual(builder, minTrackQual):
    builder.PrependInt32Slot(34, minTrackQual, 0)

def AddMinTrackQual(builder, minTrackQual):
    DataLink_AbridgedAddMinTrackQual(builder, minTrackQual)

def DataLink_AbridgedAddMaxTrackQual(builder, maxTrackQual):
    builder.PrependInt32Slot(35, maxTrackQual, 0)

def AddMaxTrackQual(builder, maxTrackQual):
    DataLink_AbridgedAddMaxTrackQual(builder, maxTrackQual)

def DataLink_AbridgedAddResTrackQual(builder, resTrackQual):
    builder.PrependInt32Slot(36, resTrackQual, 0)

def AddResTrackQual(builder, resTrackQual):
    DataLink_AbridgedAddResTrackQual(builder, resTrackQual)

def DataLink_AbridgedAddCourseDiff(builder, courseDiff):
    builder.PrependInt32Slot(37, courseDiff, 0)

def AddCourseDiff(builder, courseDiff):
    DataLink_AbridgedAddCourseDiff(builder, courseDiff)

def DataLink_AbridgedAddSpeedDiff(builder, speedDiff):
    builder.PrependInt32Slot(38, speedDiff, 0)

def AddSpeedDiff(builder, speedDiff):
    DataLink_AbridgedAddSpeedDiff(builder, speedDiff)

def DataLink_AbridgedAddAltDiff(builder, altDiff):
    builder.PrependInt32Slot(39, altDiff, 0)

def AddAltDiff(builder, altDiff):
    DataLink_AbridgedAddAltDiff(builder, altDiff)

def DataLink_AbridgedAddMinGeoPosQual(builder, minGeoPosQual):
    builder.PrependInt32Slot(40, minGeoPosQual, 0)

def AddMinGeoPosQual(builder, minGeoPosQual):
    DataLink_AbridgedAddMinGeoPosQual(builder, minGeoPosQual)

def DataLink_AbridgedAddMaxGeoPosQual(builder, maxGeoPosQual):
    builder.PrependInt32Slot(41, maxGeoPosQual, 0)

def AddMaxGeoPosQual(builder, maxGeoPosQual):
    DataLink_AbridgedAddMaxGeoPosQual(builder, maxGeoPosQual)

def DataLink_AbridgedAddDecorrWinMult(builder, decorrWinMult):
    builder.PrependFloat64Slot(42, decorrWinMult, 0.0)

def AddDecorrWinMult(builder, decorrWinMult):
    DataLink_AbridgedAddDecorrWinMult(builder, decorrWinMult)

def DataLink_AbridgedAddConsecDecorr(builder, consecDecorr):
    builder.PrependInt32Slot(43, consecDecorr, 0)

def AddConsecDecorr(builder, consecDecorr):
    DataLink_AbridgedAddConsecDecorr(builder, consecDecorr)

def DataLink_AbridgedAddMultiDuty(builder, multiDuty):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(multiDuty), 0)

def AddMultiDuty(builder, multiDuty):
    DataLink_AbridgedAddMultiDuty(builder, multiDuty)

def DataLink_AbridgedStartMultiDutyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMultiDutyVector(builder, numElems):
    return DataLink_AbridgedStartMultiDutyVector(builder, numElems)

def DataLink_AbridgedAddOps(builder, ops):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(ops), 0)

def AddOps(builder, ops):
    DataLink_AbridgedAddOps(builder, ops)

def DataLink_AbridgedStartOpsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOpsVector(builder, numElems):
    return DataLink_AbridgedStartOpsVector(builder, numElems)

def DataLink_AbridgedAddJreUnitDes(builder, jreUnitDes):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(jreUnitDes), 0)

def AddJreUnitDes(builder, jreUnitDes):
    DataLink_AbridgedAddJreUnitDes(builder, jreUnitDes)

def DataLink_AbridgedAddJreCallSign(builder, jreCallSign):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(jreCallSign), 0)

def AddJreCallSign(builder, jreCallSign):
    DataLink_AbridgedAddJreCallSign(builder, jreCallSign)

def DataLink_AbridgedAddJrePriAdd(builder, jrePriAdd):
    builder.PrependInt32Slot(48, jrePriAdd, 0)

def AddJrePriAdd(builder, jrePriAdd):
    DataLink_AbridgedAddJrePriAdd(builder, jrePriAdd)

def DataLink_AbridgedAddJreSecAdd(builder, jreSecAdd):
    builder.PrependInt32Slot(49, jreSecAdd, 0)

def AddJreSecAdd(builder, jreSecAdd):
    DataLink_AbridgedAddJreSecAdd(builder, jreSecAdd)

def DataLink_AbridgedAddJreDetails(builder, jreDetails):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(jreDetails), 0)

def AddJreDetails(builder, jreDetails):
    DataLink_AbridgedAddJreDetails(builder, jreDetails)

def DataLink_AbridgedAddSpecTracks(builder, specTracks):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(specTracks), 0)

def AddSpecTracks(builder, specTracks):
    DataLink_AbridgedAddSpecTracks(builder, specTracks)

def DataLink_AbridgedStartSpecTracksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpecTracksVector(builder, numElems):
    return DataLink_AbridgedStartSpecTracksVector(builder, numElems)

def DataLink_AbridgedAddNonLinkUnitDes(builder, nonLinkUnitDes):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(nonLinkUnitDes), 0)

def AddNonLinkUnitDes(builder, nonLinkUnitDes):
    DataLink_AbridgedAddNonLinkUnitDes(builder, nonLinkUnitDes)

def DataLink_AbridgedStartNonLinkUnitDesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNonLinkUnitDesVector(builder, numElems):
    return DataLink_AbridgedStartNonLinkUnitDesVector(builder, numElems)

def DataLink_AbridgedAddTrackNumBlockLls(builder, trackNumBlockLls):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(trackNumBlockLls), 0)

def AddTrackNumBlockLls(builder, trackNumBlockLls):
    DataLink_AbridgedAddTrackNumBlockLls(builder, trackNumBlockLls)

def DataLink_AbridgedStartTrackNumBlockLlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTrackNumBlockLlsVector(builder, numElems):
    return DataLink_AbridgedStartTrackNumBlockLlsVector(builder, numElems)

def DataLink_AbridgedAddTrackNumBlocks(builder, trackNumBlocks):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(trackNumBlocks), 0)

def AddTrackNumBlocks(builder, trackNumBlocks):
    DataLink_AbridgedAddTrackNumBlocks(builder, trackNumBlocks)

def DataLink_AbridgedStartTrackNumBlocksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTrackNumBlocksVector(builder, numElems):
    return DataLink_AbridgedStartTrackNumBlocksVector(builder, numElems)

def DataLink_AbridgedAddMgmtCode(builder, mgmtCode):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(mgmtCode), 0)

def AddMgmtCode(builder, mgmtCode):
    DataLink_AbridgedAddMgmtCode(builder, mgmtCode)

def DataLink_AbridgedAddMgmtCodeMeaning(builder, mgmtCodeMeaning):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(mgmtCodeMeaning), 0)

def AddMgmtCodeMeaning(builder, mgmtCodeMeaning):
    DataLink_AbridgedAddMgmtCodeMeaning(builder, mgmtCodeMeaning)

def DataLink_AbridgedAddAckReq(builder, ackReq):
    builder.PrependBoolSlot(57, ackReq, 0)

def AddAckReq(builder, ackReq):
    DataLink_AbridgedAddAckReq(builder, ackReq)

def DataLink_AbridgedAddAckInstUnits(builder, ackInstUnits):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(ackInstUnits), 0)

def AddAckInstUnits(builder, ackInstUnits):
    DataLink_AbridgedAddAckInstUnits(builder, ackInstUnits)

def DataLink_AbridgedStartAckInstUnitsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAckInstUnitsVector(builder, numElems):
    return DataLink_AbridgedStartAckInstUnitsVector(builder, numElems)

def DataLink_AbridgedAddClassSource(builder, classSource):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(classSource), 0)

def AddClassSource(builder, classSource):
    DataLink_AbridgedAddClassSource(builder, classSource)

def DataLink_AbridgedAddClassReasons(builder, classReasons):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(classReasons), 0)

def AddClassReasons(builder, classReasons):
    DataLink_AbridgedAddClassReasons(builder, classReasons)

def DataLink_AbridgedStartClassReasonsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartClassReasonsVector(builder, numElems):
    return DataLink_AbridgedStartClassReasonsVector(builder, numElems)

def DataLink_AbridgedAddDecInstDates(builder, decInstDates):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(decInstDates), 0)

def AddDecInstDates(builder, decInstDates):
    DataLink_AbridgedAddDecInstDates(builder, decInstDates)

def DataLink_AbridgedStartDecInstDatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDecInstDatesVector(builder, numElems):
    return DataLink_AbridgedStartDecInstDatesVector(builder, numElems)

def DataLink_AbridgedAddDecExemptCodes(builder, decExemptCodes):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(decExemptCodes), 0)

def AddDecExemptCodes(builder, decExemptCodes):
    DataLink_AbridgedAddDecExemptCodes(builder, decExemptCodes)

def DataLink_AbridgedStartDecExemptCodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDecExemptCodesVector(builder, numElems):
    return DataLink_AbridgedStartDecExemptCodesVector(builder, numElems)

def DataLink_AbridgedAddRemarks(builder, remarks):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(remarks), 0)

def AddRemarks(builder, remarks):
    DataLink_AbridgedAddRemarks(builder, remarks)

def DataLink_AbridgedStartRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRemarksVector(builder, numElems):
    return DataLink_AbridgedStartRemarksVector(builder, numElems)

def DataLink_AbridgedAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    DataLink_AbridgedAddRawFileUri(builder, rawFileUri)

def DataLink_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    DataLink_AbridgedAddCreatedAt(builder, createdAt)

def DataLink_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    DataLink_AbridgedAddCreatedBy(builder, createdBy)

def DataLink_AbridgedAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    DataLink_AbridgedAddUpdatedAt(builder, updatedAt)

def DataLink_AbridgedAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    DataLink_AbridgedAddUpdatedBy(builder, updatedBy)

def DataLink_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    DataLink_AbridgedAddSourceDl(builder, sourceDl)

def DataLink_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    DataLink_AbridgedAddSource(builder, source)

def DataLink_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    DataLink_AbridgedAddOrigin(builder, origin)

def DataLink_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    DataLink_AbridgedAddOrigNetwork(builder, origNetwork)

def DataLink_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(73, dataMode, 0)

def AddDataMode(builder, dataMode):
    DataLink_AbridgedAddDataMode(builder, dataMode)

def DataLink_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLink_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class DataLink_AbridgedT(object):

    # DataLink_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.opExName = None  # type: str
        self.originator = None  # type: str
        self.startTime = None  # type: str
        self.stopTime = None  # type: str
        self.stopTimeMod = None  # type: str
        self.planOrigNum = None  # type: str
        self.opExInfo = None  # type: str
        self.opExInfoAlt = None  # type: str
        self.serialNum = None  # type: str
        self.month = None  # type: str
        self.qualifier = None  # type: str
        self.qualSn = 0  # type: int
        self.references = None  # type: List[str]
        self.canxId = None  # type: str
        self.canxOriginator = None  # type: str
        self.canxTs = None  # type: str
        self.canxSerialNum = None  # type: str
        self.canxSpecialNotation = None  # type: str
        self.canxSics = None  # type: List[str]
        self.pocName = None  # type: str
        self.pocRank = None  # type: str
        self.pocCallSign = None  # type: str
        self.pocLocName = None  # type: str
        self.pocLat = 0.0  # type: float
        self.pocLon = 0.0  # type: float
        self.pocNums = None  # type: List[str]
        self.geoDatum = None  # type: str
        self.refPoints = None  # type: List[str]
        self.voiceCoord = None  # type: List[str]
        self.sysDefaultCode = None  # type: str
        self.winSizeMult = 0.0  # type: float
        self.winSizeMin = 0.0  # type: float
        self.minTrackQual = 0  # type: int
        self.maxTrackQual = 0  # type: int
        self.resTrackQual = 0  # type: int
        self.courseDiff = 0  # type: int
        self.speedDiff = 0  # type: int
        self.altDiff = 0  # type: int
        self.minGeoPosQual = 0  # type: int
        self.maxGeoPosQual = 0  # type: int
        self.decorrWinMult = 0.0  # type: float
        self.consecDecorr = 0  # type: int
        self.multiDuty = None  # type: List[str]
        self.ops = None  # type: List[str]
        self.jreUnitDes = None  # type: str
        self.jreCallSign = None  # type: str
        self.jrePriAdd = 0  # type: int
        self.jreSecAdd = 0  # type: int
        self.jreDetails = None  # type: str
        self.specTracks = None  # type: List[str]
        self.nonLinkUnitDes = None  # type: List[str]
        self.trackNumBlockLls = None  # type: List[str]
        self.trackNumBlocks = None  # type: List[str]
        self.mgmtCode = None  # type: str
        self.mgmtCodeMeaning = None  # type: str
        self.ackReq = False  # type: bool
        self.ackInstUnits = None  # type: List[str]
        self.classSource = None  # type: str
        self.classReasons = None  # type: List[str]
        self.decInstDates = None  # type: List[str]
        self.decExemptCodes = None  # type: List[str]
        self.remarks = None  # type: List[str]
        self.rawFileUri = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkAbridged = DataLink_Abridged()
        dataLinkAbridged.Init(buf, pos)
        return cls.InitFromObj(dataLinkAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkAbridged):
        x = DataLink_AbridgedT()
        x._UnPack(dataLinkAbridged)
        return x

    # DataLink_AbridgedT
    def _UnPack(self, dataLinkAbridged):
        if dataLinkAbridged is None:
            return
        self.id = dataLinkAbridged.Id()
        self.classificationMarking = dataLinkAbridged.ClassificationMarking()
        self.opExName = dataLinkAbridged.OpExName()
        self.originator = dataLinkAbridged.Originator()
        self.startTime = dataLinkAbridged.StartTime()
        self.stopTime = dataLinkAbridged.StopTime()
        self.stopTimeMod = dataLinkAbridged.StopTimeMod()
        self.planOrigNum = dataLinkAbridged.PlanOrigNum()
        self.opExInfo = dataLinkAbridged.OpExInfo()
        self.opExInfoAlt = dataLinkAbridged.OpExInfoAlt()
        self.serialNum = dataLinkAbridged.SerialNum()
        self.month = dataLinkAbridged.Month()
        self.qualifier = dataLinkAbridged.Qualifier()
        self.qualSn = dataLinkAbridged.QualSn()
        if not dataLinkAbridged.ReferencesIsNone():
            self.references = []
            for i in range(dataLinkAbridged.ReferencesLength()):
                self.references.append(dataLinkAbridged.References(i))
        self.canxId = dataLinkAbridged.CanxId()
        self.canxOriginator = dataLinkAbridged.CanxOriginator()
        self.canxTs = dataLinkAbridged.CanxTs()
        self.canxSerialNum = dataLinkAbridged.CanxSerialNum()
        self.canxSpecialNotation = dataLinkAbridged.CanxSpecialNotation()
        if not dataLinkAbridged.CanxSicsIsNone():
            self.canxSics = []
            for i in range(dataLinkAbridged.CanxSicsLength()):
                self.canxSics.append(dataLinkAbridged.CanxSics(i))
        self.pocName = dataLinkAbridged.PocName()
        self.pocRank = dataLinkAbridged.PocRank()
        self.pocCallSign = dataLinkAbridged.PocCallSign()
        self.pocLocName = dataLinkAbridged.PocLocName()
        self.pocLat = dataLinkAbridged.PocLat()
        self.pocLon = dataLinkAbridged.PocLon()
        if not dataLinkAbridged.PocNumsIsNone():
            self.pocNums = []
            for i in range(dataLinkAbridged.PocNumsLength()):
                self.pocNums.append(dataLinkAbridged.PocNums(i))
        self.geoDatum = dataLinkAbridged.GeoDatum()
        if not dataLinkAbridged.RefPointsIsNone():
            self.refPoints = []
            for i in range(dataLinkAbridged.RefPointsLength()):
                self.refPoints.append(dataLinkAbridged.RefPoints(i))
        if not dataLinkAbridged.VoiceCoordIsNone():
            self.voiceCoord = []
            for i in range(dataLinkAbridged.VoiceCoordLength()):
                self.voiceCoord.append(dataLinkAbridged.VoiceCoord(i))
        self.sysDefaultCode = dataLinkAbridged.SysDefaultCode()
        self.winSizeMult = dataLinkAbridged.WinSizeMult()
        self.winSizeMin = dataLinkAbridged.WinSizeMin()
        self.minTrackQual = dataLinkAbridged.MinTrackQual()
        self.maxTrackQual = dataLinkAbridged.MaxTrackQual()
        self.resTrackQual = dataLinkAbridged.ResTrackQual()
        self.courseDiff = dataLinkAbridged.CourseDiff()
        self.speedDiff = dataLinkAbridged.SpeedDiff()
        self.altDiff = dataLinkAbridged.AltDiff()
        self.minGeoPosQual = dataLinkAbridged.MinGeoPosQual()
        self.maxGeoPosQual = dataLinkAbridged.MaxGeoPosQual()
        self.decorrWinMult = dataLinkAbridged.DecorrWinMult()
        self.consecDecorr = dataLinkAbridged.ConsecDecorr()
        if not dataLinkAbridged.MultiDutyIsNone():
            self.multiDuty = []
            for i in range(dataLinkAbridged.MultiDutyLength()):
                self.multiDuty.append(dataLinkAbridged.MultiDuty(i))
        if not dataLinkAbridged.OpsIsNone():
            self.ops = []
            for i in range(dataLinkAbridged.OpsLength()):
                self.ops.append(dataLinkAbridged.Ops(i))
        self.jreUnitDes = dataLinkAbridged.JreUnitDes()
        self.jreCallSign = dataLinkAbridged.JreCallSign()
        self.jrePriAdd = dataLinkAbridged.JrePriAdd()
        self.jreSecAdd = dataLinkAbridged.JreSecAdd()
        self.jreDetails = dataLinkAbridged.JreDetails()
        if not dataLinkAbridged.SpecTracksIsNone():
            self.specTracks = []
            for i in range(dataLinkAbridged.SpecTracksLength()):
                self.specTracks.append(dataLinkAbridged.SpecTracks(i))
        if not dataLinkAbridged.NonLinkUnitDesIsNone():
            self.nonLinkUnitDes = []
            for i in range(dataLinkAbridged.NonLinkUnitDesLength()):
                self.nonLinkUnitDes.append(dataLinkAbridged.NonLinkUnitDes(i))
        if not dataLinkAbridged.TrackNumBlockLlsIsNone():
            self.trackNumBlockLls = []
            for i in range(dataLinkAbridged.TrackNumBlockLlsLength()):
                self.trackNumBlockLls.append(dataLinkAbridged.TrackNumBlockLls(i))
        if not dataLinkAbridged.TrackNumBlocksIsNone():
            self.trackNumBlocks = []
            for i in range(dataLinkAbridged.TrackNumBlocksLength()):
                self.trackNumBlocks.append(dataLinkAbridged.TrackNumBlocks(i))
        self.mgmtCode = dataLinkAbridged.MgmtCode()
        self.mgmtCodeMeaning = dataLinkAbridged.MgmtCodeMeaning()
        self.ackReq = dataLinkAbridged.AckReq()
        if not dataLinkAbridged.AckInstUnitsIsNone():
            self.ackInstUnits = []
            for i in range(dataLinkAbridged.AckInstUnitsLength()):
                self.ackInstUnits.append(dataLinkAbridged.AckInstUnits(i))
        self.classSource = dataLinkAbridged.ClassSource()
        if not dataLinkAbridged.ClassReasonsIsNone():
            self.classReasons = []
            for i in range(dataLinkAbridged.ClassReasonsLength()):
                self.classReasons.append(dataLinkAbridged.ClassReasons(i))
        if not dataLinkAbridged.DecInstDatesIsNone():
            self.decInstDates = []
            for i in range(dataLinkAbridged.DecInstDatesLength()):
                self.decInstDates.append(dataLinkAbridged.DecInstDates(i))
        if not dataLinkAbridged.DecExemptCodesIsNone():
            self.decExemptCodes = []
            for i in range(dataLinkAbridged.DecExemptCodesLength()):
                self.decExemptCodes.append(dataLinkAbridged.DecExemptCodes(i))
        if not dataLinkAbridged.RemarksIsNone():
            self.remarks = []
            for i in range(dataLinkAbridged.RemarksLength()):
                self.remarks.append(dataLinkAbridged.Remarks(i))
        self.rawFileUri = dataLinkAbridged.RawFileUri()
        self.createdAt = dataLinkAbridged.CreatedAt()
        self.createdBy = dataLinkAbridged.CreatedBy()
        self.updatedAt = dataLinkAbridged.UpdatedAt()
        self.updatedBy = dataLinkAbridged.UpdatedBy()
        self.sourceDl = dataLinkAbridged.SourceDl()
        self.source = dataLinkAbridged.Source()
        self.origin = dataLinkAbridged.Origin()
        self.origNetwork = dataLinkAbridged.OrigNetwork()
        self.dataMode = dataLinkAbridged.DataMode()

    # DataLink_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.opExName is not None:
            opExName = builder.CreateString(self.opExName)
        if self.originator is not None:
            originator = builder.CreateString(self.originator)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.stopTime is not None:
            stopTime = builder.CreateString(self.stopTime)
        if self.stopTimeMod is not None:
            stopTimeMod = builder.CreateString(self.stopTimeMod)
        if self.planOrigNum is not None:
            planOrigNum = builder.CreateString(self.planOrigNum)
        if self.opExInfo is not None:
            opExInfo = builder.CreateString(self.opExInfo)
        if self.opExInfoAlt is not None:
            opExInfoAlt = builder.CreateString(self.opExInfoAlt)
        if self.serialNum is not None:
            serialNum = builder.CreateString(self.serialNum)
        if self.month is not None:
            month = builder.CreateString(self.month)
        if self.qualifier is not None:
            qualifier = builder.CreateString(self.qualifier)
        if self.references is not None:
            referenceslist = []
            for i in range(len(self.references)):
                referenceslist.append(builder.CreateString(self.references[i]))
            DataLink_AbridgedStartReferencesVector(builder, len(self.references))
            for i in reversed(range(len(self.references))):
                builder.PrependUOffsetTRelative(referenceslist[i])
            references = builder.EndVector()
        if self.canxId is not None:
            canxId = builder.CreateString(self.canxId)
        if self.canxOriginator is not None:
            canxOriginator = builder.CreateString(self.canxOriginator)
        if self.canxTs is not None:
            canxTs = builder.CreateString(self.canxTs)
        if self.canxSerialNum is not None:
            canxSerialNum = builder.CreateString(self.canxSerialNum)
        if self.canxSpecialNotation is not None:
            canxSpecialNotation = builder.CreateString(self.canxSpecialNotation)
        if self.canxSics is not None:
            canxSicslist = []
            for i in range(len(self.canxSics)):
                canxSicslist.append(builder.CreateString(self.canxSics[i]))
            DataLink_AbridgedStartCanxSicsVector(builder, len(self.canxSics))
            for i in reversed(range(len(self.canxSics))):
                builder.PrependUOffsetTRelative(canxSicslist[i])
            canxSics = builder.EndVector()
        if self.pocName is not None:
            pocName = builder.CreateString(self.pocName)
        if self.pocRank is not None:
            pocRank = builder.CreateString(self.pocRank)
        if self.pocCallSign is not None:
            pocCallSign = builder.CreateString(self.pocCallSign)
        if self.pocLocName is not None:
            pocLocName = builder.CreateString(self.pocLocName)
        if self.pocNums is not None:
            pocNumslist = []
            for i in range(len(self.pocNums)):
                pocNumslist.append(builder.CreateString(self.pocNums[i]))
            DataLink_AbridgedStartPocNumsVector(builder, len(self.pocNums))
            for i in reversed(range(len(self.pocNums))):
                builder.PrependUOffsetTRelative(pocNumslist[i])
            pocNums = builder.EndVector()
        if self.geoDatum is not None:
            geoDatum = builder.CreateString(self.geoDatum)
        if self.refPoints is not None:
            refPointslist = []
            for i in range(len(self.refPoints)):
                refPointslist.append(builder.CreateString(self.refPoints[i]))
            DataLink_AbridgedStartRefPointsVector(builder, len(self.refPoints))
            for i in reversed(range(len(self.refPoints))):
                builder.PrependUOffsetTRelative(refPointslist[i])
            refPoints = builder.EndVector()
        if self.voiceCoord is not None:
            voiceCoordlist = []
            for i in range(len(self.voiceCoord)):
                voiceCoordlist.append(builder.CreateString(self.voiceCoord[i]))
            DataLink_AbridgedStartVoiceCoordVector(builder, len(self.voiceCoord))
            for i in reversed(range(len(self.voiceCoord))):
                builder.PrependUOffsetTRelative(voiceCoordlist[i])
            voiceCoord = builder.EndVector()
        if self.sysDefaultCode is not None:
            sysDefaultCode = builder.CreateString(self.sysDefaultCode)
        if self.multiDuty is not None:
            multiDutylist = []
            for i in range(len(self.multiDuty)):
                multiDutylist.append(builder.CreateString(self.multiDuty[i]))
            DataLink_AbridgedStartMultiDutyVector(builder, len(self.multiDuty))
            for i in reversed(range(len(self.multiDuty))):
                builder.PrependUOffsetTRelative(multiDutylist[i])
            multiDuty = builder.EndVector()
        if self.ops is not None:
            opslist = []
            for i in range(len(self.ops)):
                opslist.append(builder.CreateString(self.ops[i]))
            DataLink_AbridgedStartOpsVector(builder, len(self.ops))
            for i in reversed(range(len(self.ops))):
                builder.PrependUOffsetTRelative(opslist[i])
            ops = builder.EndVector()
        if self.jreUnitDes is not None:
            jreUnitDes = builder.CreateString(self.jreUnitDes)
        if self.jreCallSign is not None:
            jreCallSign = builder.CreateString(self.jreCallSign)
        if self.jreDetails is not None:
            jreDetails = builder.CreateString(self.jreDetails)
        if self.specTracks is not None:
            specTrackslist = []
            for i in range(len(self.specTracks)):
                specTrackslist.append(builder.CreateString(self.specTracks[i]))
            DataLink_AbridgedStartSpecTracksVector(builder, len(self.specTracks))
            for i in reversed(range(len(self.specTracks))):
                builder.PrependUOffsetTRelative(specTrackslist[i])
            specTracks = builder.EndVector()
        if self.nonLinkUnitDes is not None:
            nonLinkUnitDeslist = []
            for i in range(len(self.nonLinkUnitDes)):
                nonLinkUnitDeslist.append(builder.CreateString(self.nonLinkUnitDes[i]))
            DataLink_AbridgedStartNonLinkUnitDesVector(builder, len(self.nonLinkUnitDes))
            for i in reversed(range(len(self.nonLinkUnitDes))):
                builder.PrependUOffsetTRelative(nonLinkUnitDeslist[i])
            nonLinkUnitDes = builder.EndVector()
        if self.trackNumBlockLls is not None:
            trackNumBlockLlslist = []
            for i in range(len(self.trackNumBlockLls)):
                trackNumBlockLlslist.append(builder.CreateString(self.trackNumBlockLls[i]))
            DataLink_AbridgedStartTrackNumBlockLlsVector(builder, len(self.trackNumBlockLls))
            for i in reversed(range(len(self.trackNumBlockLls))):
                builder.PrependUOffsetTRelative(trackNumBlockLlslist[i])
            trackNumBlockLls = builder.EndVector()
        if self.trackNumBlocks is not None:
            trackNumBlockslist = []
            for i in range(len(self.trackNumBlocks)):
                trackNumBlockslist.append(builder.CreateString(self.trackNumBlocks[i]))
            DataLink_AbridgedStartTrackNumBlocksVector(builder, len(self.trackNumBlocks))
            for i in reversed(range(len(self.trackNumBlocks))):
                builder.PrependUOffsetTRelative(trackNumBlockslist[i])
            trackNumBlocks = builder.EndVector()
        if self.mgmtCode is not None:
            mgmtCode = builder.CreateString(self.mgmtCode)
        if self.mgmtCodeMeaning is not None:
            mgmtCodeMeaning = builder.CreateString(self.mgmtCodeMeaning)
        if self.ackInstUnits is not None:
            ackInstUnitslist = []
            for i in range(len(self.ackInstUnits)):
                ackInstUnitslist.append(builder.CreateString(self.ackInstUnits[i]))
            DataLink_AbridgedStartAckInstUnitsVector(builder, len(self.ackInstUnits))
            for i in reversed(range(len(self.ackInstUnits))):
                builder.PrependUOffsetTRelative(ackInstUnitslist[i])
            ackInstUnits = builder.EndVector()
        if self.classSource is not None:
            classSource = builder.CreateString(self.classSource)
        if self.classReasons is not None:
            classReasonslist = []
            for i in range(len(self.classReasons)):
                classReasonslist.append(builder.CreateString(self.classReasons[i]))
            DataLink_AbridgedStartClassReasonsVector(builder, len(self.classReasons))
            for i in reversed(range(len(self.classReasons))):
                builder.PrependUOffsetTRelative(classReasonslist[i])
            classReasons = builder.EndVector()
        if self.decInstDates is not None:
            decInstDateslist = []
            for i in range(len(self.decInstDates)):
                decInstDateslist.append(builder.CreateString(self.decInstDates[i]))
            DataLink_AbridgedStartDecInstDatesVector(builder, len(self.decInstDates))
            for i in reversed(range(len(self.decInstDates))):
                builder.PrependUOffsetTRelative(decInstDateslist[i])
            decInstDates = builder.EndVector()
        if self.decExemptCodes is not None:
            decExemptCodeslist = []
            for i in range(len(self.decExemptCodes)):
                decExemptCodeslist.append(builder.CreateString(self.decExemptCodes[i]))
            DataLink_AbridgedStartDecExemptCodesVector(builder, len(self.decExemptCodes))
            for i in reversed(range(len(self.decExemptCodes))):
                builder.PrependUOffsetTRelative(decExemptCodeslist[i])
            decExemptCodes = builder.EndVector()
        if self.remarks is not None:
            remarkslist = []
            for i in range(len(self.remarks)):
                remarkslist.append(builder.CreateString(self.remarks[i]))
            DataLink_AbridgedStartRemarksVector(builder, len(self.remarks))
            for i in reversed(range(len(self.remarks))):
                builder.PrependUOffsetTRelative(remarkslist[i])
            remarks = builder.EndVector()
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        DataLink_AbridgedStart(builder)
        if self.id is not None:
            DataLink_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            DataLink_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.opExName is not None:
            DataLink_AbridgedAddOpExName(builder, opExName)
        if self.originator is not None:
            DataLink_AbridgedAddOriginator(builder, originator)
        if self.startTime is not None:
            DataLink_AbridgedAddStartTime(builder, startTime)
        if self.stopTime is not None:
            DataLink_AbridgedAddStopTime(builder, stopTime)
        if self.stopTimeMod is not None:
            DataLink_AbridgedAddStopTimeMod(builder, stopTimeMod)
        if self.planOrigNum is not None:
            DataLink_AbridgedAddPlanOrigNum(builder, planOrigNum)
        if self.opExInfo is not None:
            DataLink_AbridgedAddOpExInfo(builder, opExInfo)
        if self.opExInfoAlt is not None:
            DataLink_AbridgedAddOpExInfoAlt(builder, opExInfoAlt)
        if self.serialNum is not None:
            DataLink_AbridgedAddSerialNum(builder, serialNum)
        if self.month is not None:
            DataLink_AbridgedAddMonth(builder, month)
        if self.qualifier is not None:
            DataLink_AbridgedAddQualifier(builder, qualifier)
        DataLink_AbridgedAddQualSn(builder, self.qualSn)
        if self.references is not None:
            DataLink_AbridgedAddReferences(builder, references)
        if self.canxId is not None:
            DataLink_AbridgedAddCanxId(builder, canxId)
        if self.canxOriginator is not None:
            DataLink_AbridgedAddCanxOriginator(builder, canxOriginator)
        if self.canxTs is not None:
            DataLink_AbridgedAddCanxTs(builder, canxTs)
        if self.canxSerialNum is not None:
            DataLink_AbridgedAddCanxSerialNum(builder, canxSerialNum)
        if self.canxSpecialNotation is not None:
            DataLink_AbridgedAddCanxSpecialNotation(builder, canxSpecialNotation)
        if self.canxSics is not None:
            DataLink_AbridgedAddCanxSics(builder, canxSics)
        if self.pocName is not None:
            DataLink_AbridgedAddPocName(builder, pocName)
        if self.pocRank is not None:
            DataLink_AbridgedAddPocRank(builder, pocRank)
        if self.pocCallSign is not None:
            DataLink_AbridgedAddPocCallSign(builder, pocCallSign)
        if self.pocLocName is not None:
            DataLink_AbridgedAddPocLocName(builder, pocLocName)
        DataLink_AbridgedAddPocLat(builder, self.pocLat)
        DataLink_AbridgedAddPocLon(builder, self.pocLon)
        if self.pocNums is not None:
            DataLink_AbridgedAddPocNums(builder, pocNums)
        if self.geoDatum is not None:
            DataLink_AbridgedAddGeoDatum(builder, geoDatum)
        if self.refPoints is not None:
            DataLink_AbridgedAddRefPoints(builder, refPoints)
        if self.voiceCoord is not None:
            DataLink_AbridgedAddVoiceCoord(builder, voiceCoord)
        if self.sysDefaultCode is not None:
            DataLink_AbridgedAddSysDefaultCode(builder, sysDefaultCode)
        DataLink_AbridgedAddWinSizeMult(builder, self.winSizeMult)
        DataLink_AbridgedAddWinSizeMin(builder, self.winSizeMin)
        DataLink_AbridgedAddMinTrackQual(builder, self.minTrackQual)
        DataLink_AbridgedAddMaxTrackQual(builder, self.maxTrackQual)
        DataLink_AbridgedAddResTrackQual(builder, self.resTrackQual)
        DataLink_AbridgedAddCourseDiff(builder, self.courseDiff)
        DataLink_AbridgedAddSpeedDiff(builder, self.speedDiff)
        DataLink_AbridgedAddAltDiff(builder, self.altDiff)
        DataLink_AbridgedAddMinGeoPosQual(builder, self.minGeoPosQual)
        DataLink_AbridgedAddMaxGeoPosQual(builder, self.maxGeoPosQual)
        DataLink_AbridgedAddDecorrWinMult(builder, self.decorrWinMult)
        DataLink_AbridgedAddConsecDecorr(builder, self.consecDecorr)
        if self.multiDuty is not None:
            DataLink_AbridgedAddMultiDuty(builder, multiDuty)
        if self.ops is not None:
            DataLink_AbridgedAddOps(builder, ops)
        if self.jreUnitDes is not None:
            DataLink_AbridgedAddJreUnitDes(builder, jreUnitDes)
        if self.jreCallSign is not None:
            DataLink_AbridgedAddJreCallSign(builder, jreCallSign)
        DataLink_AbridgedAddJrePriAdd(builder, self.jrePriAdd)
        DataLink_AbridgedAddJreSecAdd(builder, self.jreSecAdd)
        if self.jreDetails is not None:
            DataLink_AbridgedAddJreDetails(builder, jreDetails)
        if self.specTracks is not None:
            DataLink_AbridgedAddSpecTracks(builder, specTracks)
        if self.nonLinkUnitDes is not None:
            DataLink_AbridgedAddNonLinkUnitDes(builder, nonLinkUnitDes)
        if self.trackNumBlockLls is not None:
            DataLink_AbridgedAddTrackNumBlockLls(builder, trackNumBlockLls)
        if self.trackNumBlocks is not None:
            DataLink_AbridgedAddTrackNumBlocks(builder, trackNumBlocks)
        if self.mgmtCode is not None:
            DataLink_AbridgedAddMgmtCode(builder, mgmtCode)
        if self.mgmtCodeMeaning is not None:
            DataLink_AbridgedAddMgmtCodeMeaning(builder, mgmtCodeMeaning)
        DataLink_AbridgedAddAckReq(builder, self.ackReq)
        if self.ackInstUnits is not None:
            DataLink_AbridgedAddAckInstUnits(builder, ackInstUnits)
        if self.classSource is not None:
            DataLink_AbridgedAddClassSource(builder, classSource)
        if self.classReasons is not None:
            DataLink_AbridgedAddClassReasons(builder, classReasons)
        if self.decInstDates is not None:
            DataLink_AbridgedAddDecInstDates(builder, decInstDates)
        if self.decExemptCodes is not None:
            DataLink_AbridgedAddDecExemptCodes(builder, decExemptCodes)
        if self.remarks is not None:
            DataLink_AbridgedAddRemarks(builder, remarks)
        if self.rawFileUri is not None:
            DataLink_AbridgedAddRawFileUri(builder, rawFileUri)
        if self.createdAt is not None:
            DataLink_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            DataLink_AbridgedAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            DataLink_AbridgedAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            DataLink_AbridgedAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            DataLink_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            DataLink_AbridgedAddSource(builder, source)
        if self.origin is not None:
            DataLink_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            DataLink_AbridgedAddOrigNetwork(builder, origNetwork)
        DataLink_AbridgedAddDataMode(builder, self.dataMode)
        dataLinkAbridged = DataLink_AbridgedEnd(builder)
        return dataLinkAbridged
