# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
class LaunchSiteDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchSiteDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchSiteDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LaunchSiteDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x41\x55\x4E", size_prefixed=size_prefixed)

    # LaunchSiteDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LAUNCHSITEDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchSiteDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent launch site record.
    # Example: /// Example: LAUNCHSITE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchSiteDetails_Abridged
    def IdLaunchSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchSiteDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
    # Example: /// Example: LOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchSiteDetails_Abridged
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
    # Example: /// Example: Example-group-name
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSiteDetails_Abridged
    def LaunchGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
    # Example: /// Example: [10.23, 10.23, 12.23, 14.23]
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Abridged
    def AvailableInclinations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LaunchSiteDetails_Abridged
    def AvailableInclinationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LaunchSiteDetails_Abridged
    def AvailableInclinationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Notes/description of the launch site.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # LaunchSiteDetails_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSiteDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSiteDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSiteDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchSiteDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchSiteDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LaunchSiteDetails_Abridged
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LaunchSiteDetails_AbridgedStart(builder):
    builder.StartObject(14)

def Start(builder):
    LaunchSiteDetails_AbridgedStart(builder)

def LaunchSiteDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchSiteDetails_AbridgedAddId(builder, id)

def LaunchSiteDetails_AbridgedAddIdLaunchSite(builder, idLaunchSite):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idLaunchSite), 0)

def AddIdLaunchSite(builder, idLaunchSite):
    LaunchSiteDetails_AbridgedAddIdLaunchSite(builder, idLaunchSite)

def LaunchSiteDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchSiteDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def LaunchSiteDetails_AbridgedAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    LaunchSiteDetails_AbridgedAddIdLocation(builder, idLocation)

def LaunchSiteDetails_AbridgedAddLaunchGroup(builder, launchGroup):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(launchGroup), 0)

def AddLaunchGroup(builder, launchGroup):
    LaunchSiteDetails_AbridgedAddLaunchGroup(builder, launchGroup)

def LaunchSiteDetails_AbridgedAddAvailableInclinations(builder, availableInclinations):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(availableInclinations), 0)

def AddAvailableInclinations(builder, availableInclinations):
    LaunchSiteDetails_AbridgedAddAvailableInclinations(builder, availableInclinations)

def LaunchSiteDetails_AbridgedStartAvailableInclinationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAvailableInclinationsVector(builder, numElems):
    return LaunchSiteDetails_AbridgedStartAvailableInclinationsVector(builder, numElems)

def LaunchSiteDetails_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    LaunchSiteDetails_AbridgedAddDescription(builder, description)

def LaunchSiteDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchSiteDetails_AbridgedAddCreatedAt(builder, createdAt)

def LaunchSiteDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchSiteDetails_AbridgedAddCreatedBy(builder, createdBy)

def LaunchSiteDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchSiteDetails_AbridgedAddSource(builder, source)

def LaunchSiteDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchSiteDetails_AbridgedAddOrigin(builder, origin)

def LaunchSiteDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchSiteDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def LaunchSiteDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(12, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchSiteDetails_AbridgedAddDataMode(builder, dataMode)

def LaunchSiteDetails_AbridgedAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    LaunchSiteDetails_AbridgedAddLocation(builder, location)

def LaunchSiteDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchSiteDetails_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class LaunchSiteDetails_AbridgedT(object):

    # LaunchSiteDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idLaunchSite = None  # type: str
        self.classificationMarking = None  # type: str
        self.idLocation = None  # type: str
        self.launchGroup = None  # type: str
        self.availableInclinations = None  # type: List[str]
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.location = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchSiteDetailsAbridged = LaunchSiteDetails_Abridged()
        launchSiteDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(launchSiteDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchSiteDetailsAbridged):
        x = LaunchSiteDetails_AbridgedT()
        x._UnPack(launchSiteDetailsAbridged)
        return x

    # LaunchSiteDetails_AbridgedT
    def _UnPack(self, launchSiteDetailsAbridged):
        if launchSiteDetailsAbridged is None:
            return
        self.id = launchSiteDetailsAbridged.Id()
        self.idLaunchSite = launchSiteDetailsAbridged.IdLaunchSite()
        self.classificationMarking = launchSiteDetailsAbridged.ClassificationMarking()
        self.idLocation = launchSiteDetailsAbridged.IdLocation()
        self.launchGroup = launchSiteDetailsAbridged.LaunchGroup()
        if not launchSiteDetailsAbridged.AvailableInclinationsIsNone():
            self.availableInclinations = []
            for i in range(launchSiteDetailsAbridged.AvailableInclinationsLength()):
                self.availableInclinations.append(launchSiteDetailsAbridged.AvailableInclinations(i))
        self.description = launchSiteDetailsAbridged.Description()
        self.createdAt = launchSiteDetailsAbridged.CreatedAt()
        self.createdBy = launchSiteDetailsAbridged.CreatedBy()
        self.source = launchSiteDetailsAbridged.Source()
        self.origin = launchSiteDetailsAbridged.Origin()
        self.origNetwork = launchSiteDetailsAbridged.OrigNetwork()
        self.dataMode = launchSiteDetailsAbridged.DataMode()
        self.location = launchSiteDetailsAbridged.Location()

    # LaunchSiteDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idLaunchSite is not None:
            idLaunchSite = builder.CreateString(self.idLaunchSite)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.launchGroup is not None:
            launchGroup = builder.CreateString(self.launchGroup)
        if self.availableInclinations is not None:
            availableInclinationslist = []
            for i in range(len(self.availableInclinations)):
                availableInclinationslist.append(builder.CreateString(self.availableInclinations[i]))
            LaunchSiteDetails_AbridgedStartAvailableInclinationsVector(builder, len(self.availableInclinations))
            for i in reversed(range(len(self.availableInclinations))):
                builder.PrependUOffsetTRelative(availableInclinationslist[i])
            availableInclinations = builder.EndVector()
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.location is not None:
            location = builder.CreateString(self.location)
        LaunchSiteDetails_AbridgedStart(builder)
        if self.id is not None:
            LaunchSiteDetails_AbridgedAddId(builder, id)
        if self.idLaunchSite is not None:
            LaunchSiteDetails_AbridgedAddIdLaunchSite(builder, idLaunchSite)
        if self.classificationMarking is not None:
            LaunchSiteDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idLocation is not None:
            LaunchSiteDetails_AbridgedAddIdLocation(builder, idLocation)
        if self.launchGroup is not None:
            LaunchSiteDetails_AbridgedAddLaunchGroup(builder, launchGroup)
        if self.availableInclinations is not None:
            LaunchSiteDetails_AbridgedAddAvailableInclinations(builder, availableInclinations)
        if self.description is not None:
            LaunchSiteDetails_AbridgedAddDescription(builder, description)
        if self.createdAt is not None:
            LaunchSiteDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchSiteDetails_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            LaunchSiteDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            LaunchSiteDetails_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            LaunchSiteDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        LaunchSiteDetails_AbridgedAddDataMode(builder, self.dataMode)
        if self.location is not None:
            LaunchSiteDetails_AbridgedAddLocation(builder, location)
        launchSiteDetailsAbridged = LaunchSiteDetails_AbridgedEnd(builder)
        return launchSiteDetailsAbridged
