# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for Track Sensor data.
class TrackSensor_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackSensor_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackSensor_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TrackSensor_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x52\x41\x43", size_prefixed=size_prefixed)

    # TrackSensor_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The track object range from the observing sensor, in kilometers.
    # Example: /// Example: 4023.95
    # Constraints: No constraints specified.
    # TrackSensor_Full
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The observing sensor azimuth angle, in degrees and topocentric frame.
    # Example: /// Example: 90
    # Constraints: No constraints specified.
    # TrackSensor_Full
    def Az(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
    # Example: /// Example: 1234
    # Constraints: No constraints specified.
    # TrackSensor_Full
    def SensorNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unique name of this sensor.
    # Example: /// Example: SENSOR_NAME
    # Constraints: Minimum length = 0, Maximum length = 128
    # TrackSensor_Full
    def SensorName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission number which produced this track observation.
    # Example: /// Example: Example Mission
    # Constraints: Minimum length = 0, Maximum length = 128
    # TrackSensor_Full
    def MissionNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Minimum range measurement capability of the sensor, in kilometers.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # TrackSensor_Full
    def MinRangeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
    # Example: /// Example: UNKNOWN
    # Constraints: Minimum length = 0, Maximum length = 24
    # TrackSensor_Full
    def SensorFovtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def TrackSensor_FullStart(builder):
    builder.StartObject(7)

def Start(builder):
    TrackSensor_FullStart(builder)

def TrackSensor_FullAddRange(builder, range):
    builder.PrependFloat64Slot(0, range, 0.0)

def AddRange(builder, range):
    TrackSensor_FullAddRange(builder, range)

def TrackSensor_FullAddAz(builder, az):
    builder.PrependFloat64Slot(1, az, 0.0)

def AddAz(builder, az):
    TrackSensor_FullAddAz(builder, az)

def TrackSensor_FullAddSensorNumber(builder, sensorNumber):
    builder.PrependInt32Slot(2, sensorNumber, 0)

def AddSensorNumber(builder, sensorNumber):
    TrackSensor_FullAddSensorNumber(builder, sensorNumber)

def TrackSensor_FullAddSensorName(builder, sensorName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(sensorName), 0)

def AddSensorName(builder, sensorName):
    TrackSensor_FullAddSensorName(builder, sensorName)

def TrackSensor_FullAddMissionNumber(builder, missionNumber):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionNumber), 0)

def AddMissionNumber(builder, missionNumber):
    TrackSensor_FullAddMissionNumber(builder, missionNumber)

def TrackSensor_FullAddMinRangeLimit(builder, minRangeLimit):
    builder.PrependFloat64Slot(5, minRangeLimit, 0.0)

def AddMinRangeLimit(builder, minRangeLimit):
    TrackSensor_FullAddMinRangeLimit(builder, minRangeLimit)

def TrackSensor_FullAddSensorFovtype(builder, sensorFovtype):
    builder.PrependInt8Slot(6, sensorFovtype, 0)

def AddSensorFovtype(builder, sensorFovtype):
    TrackSensor_FullAddSensorFovtype(builder, sensorFovtype)

def TrackSensor_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackSensor_FullEnd(builder)


class TrackSensor_FullT(object):

    # TrackSensor_FullT
    def __init__(self):
        self.range = 0.0  # type: float
        self.az = 0.0  # type: float
        self.sensorNumber = 0  # type: int
        self.sensorName = None  # type: str
        self.missionNumber = None  # type: str
        self.minRangeLimit = 0.0  # type: float
        self.sensorFovtype = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trackSensorFull = TrackSensor_Full()
        trackSensorFull.Init(buf, pos)
        return cls.InitFromObj(trackSensorFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trackSensorFull):
        x = TrackSensor_FullT()
        x._UnPack(trackSensorFull)
        return x

    # TrackSensor_FullT
    def _UnPack(self, trackSensorFull):
        if trackSensorFull is None:
            return
        self.range = trackSensorFull.Range()
        self.az = trackSensorFull.Az()
        self.sensorNumber = trackSensorFull.SensorNumber()
        self.sensorName = trackSensorFull.SensorName()
        self.missionNumber = trackSensorFull.MissionNumber()
        self.minRangeLimit = trackSensorFull.MinRangeLimit()
        self.sensorFovtype = trackSensorFull.SensorFovtype()

    # TrackSensor_FullT
    def Pack(self, builder):
        if self.sensorName is not None:
            sensorName = builder.CreateString(self.sensorName)
        if self.missionNumber is not None:
            missionNumber = builder.CreateString(self.missionNumber)
        TrackSensor_FullStart(builder)
        TrackSensor_FullAddRange(builder, self.range)
        TrackSensor_FullAddAz(builder, self.az)
        TrackSensor_FullAddSensorNumber(builder, self.sensorNumber)
        if self.sensorName is not None:
            TrackSensor_FullAddSensorName(builder, sensorName)
        if self.missionNumber is not None:
            TrackSensor_FullAddMissionNumber(builder, missionNumber)
        TrackSensor_FullAddMinRangeLimit(builder, self.minRangeLimit)
        TrackSensor_FullAddSensorFovtype(builder, self.sensorFovtype)
        trackSensorFull = TrackSensor_FullEnd(builder)
        return trackSensorFull
