# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
class Port_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Port_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPort_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Port_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x4F\x52\x54", size_prefixed=size_prefixed)

    # Port_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # Port_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Port_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Site Entity associated with the Port record.
    # Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    # Constraints: Minimum length = 0, Maximum length = 36
    # Port_Abridged
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
    # Constraints: Minimum length = 0, Maximum length = 36
    # Port_Abridged
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
    # Example: /// Example: CAVAN
    # Constraints: Minimum length = 0, Maximum length = 5
    # Port_Abridged
    def Locode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of this port.
    # Example: /// Example: Vancouver
    # Constraints: Minimum length = 0, Maximum length = 64
    # Port_Abridged
    def PortName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of harbor for this port. The harbor type refers to how a port is physically positioned.
    # COASTAL BREAKWATER (CB)
    # COASTAL NATURAL (CN)
    # COASTAL TIDE GATE  (CT)
    # LAKE OR CANAL (LC)
    # OPEN ROADSTEAD (OR)
    # RIVER BASIN (RB)
    # RIVER NATURAL (RN)
    # RIVER TIDE GATE (RT)
    # TYPHOON HARBOR  (TH).
    # Example: /// Example: COASTAL NATURAL
    # Constraints: Minimum length = 0, Maximum length = 64
    # Port_Abridged
    def HarborType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The size of the harbor for this port measured in square kilometers.
    # Example: /// Example: 160.1
    # Constraints: No constraints specified.
    # Port_Abridged
    def HarborSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
    # Example: /// Example: 18.1
    # Constraints: No constraints specified.
    # Port_Abridged
    def MaxDraught(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average time for a vessel at this port in hours.
    # Example: /// Example: 41.1
    # Constraints: No constraints specified.
    # Port_Abridged
    def AvgDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The tide range of this port in meters.
    # Example: /// Example: 4.1
    # Constraints: No constraints specified.
    # Port_Abridged
    def TideRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
    # Example: /// Example: EXCELLENT
    # Constraints: Minimum length = 0, Maximum length = 36
    # Port_Abridged
    def Shelter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether a pilot is required at this port.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Port_Abridged
    def PilotReqd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # Port_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # Port_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The country where this port is located.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Port_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Port_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Port_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Port_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Port_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 64
    # Port_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Port_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Port_AbridgedStart(builder):
    builder.StartObject(22)

def Start(builder):
    Port_AbridgedStart(builder)

def Port_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Port_AbridgedAddId(builder, id)

def Port_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Port_AbridgedAddClassificationMarking(builder, classificationMarking)

def Port_AbridgedAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    Port_AbridgedAddIdSite(builder, idSite)

def Port_AbridgedAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    Port_AbridgedAddExternalId(builder, externalId)

def Port_AbridgedAddLocode(builder, locode):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(locode), 0)

def AddLocode(builder, locode):
    Port_AbridgedAddLocode(builder, locode)

def Port_AbridgedAddPortName(builder, portName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(portName), 0)

def AddPortName(builder, portName):
    Port_AbridgedAddPortName(builder, portName)

def Port_AbridgedAddHarborType(builder, harborType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(harborType), 0)

def AddHarborType(builder, harborType):
    Port_AbridgedAddHarborType(builder, harborType)

def Port_AbridgedAddHarborSize(builder, harborSize):
    builder.PrependFloat64Slot(7, harborSize, 0.0)

def AddHarborSize(builder, harborSize):
    Port_AbridgedAddHarborSize(builder, harborSize)

def Port_AbridgedAddMaxDraught(builder, maxDraught):
    builder.PrependFloat64Slot(8, maxDraught, 0.0)

def AddMaxDraught(builder, maxDraught):
    Port_AbridgedAddMaxDraught(builder, maxDraught)

def Port_AbridgedAddAvgDuration(builder, avgDuration):
    builder.PrependFloat64Slot(9, avgDuration, 0.0)

def AddAvgDuration(builder, avgDuration):
    Port_AbridgedAddAvgDuration(builder, avgDuration)

def Port_AbridgedAddTideRange(builder, tideRange):
    builder.PrependFloat64Slot(10, tideRange, 0.0)

def AddTideRange(builder, tideRange):
    Port_AbridgedAddTideRange(builder, tideRange)

def Port_AbridgedAddShelter(builder, shelter):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(shelter), 0)

def AddShelter(builder, shelter):
    Port_AbridgedAddShelter(builder, shelter)

def Port_AbridgedAddPilotReqd(builder, pilotReqd):
    builder.PrependBoolSlot(12, pilotReqd, 0)

def AddPilotReqd(builder, pilotReqd):
    Port_AbridgedAddPilotReqd(builder, pilotReqd)

def Port_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(13, lat, 0.0)

def AddLat(builder, lat):
    Port_AbridgedAddLat(builder, lat)

def Port_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(14, lon, 0.0)

def AddLon(builder, lon):
    Port_AbridgedAddLon(builder, lon)

def Port_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Port_AbridgedAddCountryCode(builder, countryCode)

def Port_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Port_AbridgedAddCreatedAt(builder, createdAt)

def Port_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Port_AbridgedAddCreatedBy(builder, createdBy)

def Port_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Port_AbridgedAddSource(builder, source)

def Port_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Port_AbridgedAddOrigin(builder, origin)

def Port_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(20, dataMode, 0)

def AddDataMode(builder, dataMode):
    Port_AbridgedAddDataMode(builder, dataMode)

def Port_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Port_AbridgedAddOrigNetwork(builder, origNetwork)

def Port_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Port_AbridgedEnd(builder)


class Port_AbridgedT(object):

    # Port_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idSite = None  # type: str
        self.externalId = None  # type: str
        self.locode = None  # type: str
        self.portName = None  # type: str
        self.harborType = None  # type: str
        self.harborSize = 0.0  # type: float
        self.maxDraught = 0.0  # type: float
        self.avgDuration = 0.0  # type: float
        self.tideRange = 0.0  # type: float
        self.shelter = None  # type: str
        self.pilotReqd = False  # type: bool
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.countryCode = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        portAbridged = Port_Abridged()
        portAbridged.Init(buf, pos)
        return cls.InitFromObj(portAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, portAbridged):
        x = Port_AbridgedT()
        x._UnPack(portAbridged)
        return x

    # Port_AbridgedT
    def _UnPack(self, portAbridged):
        if portAbridged is None:
            return
        self.id = portAbridged.Id()
        self.classificationMarking = portAbridged.ClassificationMarking()
        self.idSite = portAbridged.IdSite()
        self.externalId = portAbridged.ExternalId()
        self.locode = portAbridged.Locode()
        self.portName = portAbridged.PortName()
        self.harborType = portAbridged.HarborType()
        self.harborSize = portAbridged.HarborSize()
        self.maxDraught = portAbridged.MaxDraught()
        self.avgDuration = portAbridged.AvgDuration()
        self.tideRange = portAbridged.TideRange()
        self.shelter = portAbridged.Shelter()
        self.pilotReqd = portAbridged.PilotReqd()
        self.lat = portAbridged.Lat()
        self.lon = portAbridged.Lon()
        self.countryCode = portAbridged.CountryCode()
        self.createdAt = portAbridged.CreatedAt()
        self.createdBy = portAbridged.CreatedBy()
        self.source = portAbridged.Source()
        self.origin = portAbridged.Origin()
        self.dataMode = portAbridged.DataMode()
        self.origNetwork = portAbridged.OrigNetwork()

    # Port_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.locode is not None:
            locode = builder.CreateString(self.locode)
        if self.portName is not None:
            portName = builder.CreateString(self.portName)
        if self.harborType is not None:
            harborType = builder.CreateString(self.harborType)
        if self.shelter is not None:
            shelter = builder.CreateString(self.shelter)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Port_AbridgedStart(builder)
        if self.id is not None:
            Port_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Port_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idSite is not None:
            Port_AbridgedAddIdSite(builder, idSite)
        if self.externalId is not None:
            Port_AbridgedAddExternalId(builder, externalId)
        if self.locode is not None:
            Port_AbridgedAddLocode(builder, locode)
        if self.portName is not None:
            Port_AbridgedAddPortName(builder, portName)
        if self.harborType is not None:
            Port_AbridgedAddHarborType(builder, harborType)
        Port_AbridgedAddHarborSize(builder, self.harborSize)
        Port_AbridgedAddMaxDraught(builder, self.maxDraught)
        Port_AbridgedAddAvgDuration(builder, self.avgDuration)
        Port_AbridgedAddTideRange(builder, self.tideRange)
        if self.shelter is not None:
            Port_AbridgedAddShelter(builder, shelter)
        Port_AbridgedAddPilotReqd(builder, self.pilotReqd)
        Port_AbridgedAddLat(builder, self.lat)
        Port_AbridgedAddLon(builder, self.lon)
        if self.countryCode is not None:
            Port_AbridgedAddCountryCode(builder, countryCode)
        if self.createdAt is not None:
            Port_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Port_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Port_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Port_AbridgedAddOrigin(builder, origin)
        Port_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            Port_AbridgedAddOrigNetwork(builder, origNetwork)
        portAbridged = Port_AbridgedEnd(builder)
        return portAbridged
