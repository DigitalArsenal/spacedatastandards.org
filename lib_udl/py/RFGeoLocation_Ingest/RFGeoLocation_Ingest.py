# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
class RFGeoLocation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RFGeoLocation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRFGeoLocation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RFGeoLocation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x46\x47\x45", size_prefixed=size_prefixed)

    # RFGeoLocation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFGeoLocation_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFGeoLocation_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The order identifier for this RF Geo Location data set.
    # Example: /// Example: 155240
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFGeoLocation_Ingest
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2024-05-31T23:06:18.123456Z
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def CreatedTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2024-05-31T21:16:58.123456Z
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def ReceivedTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2024-05-31T21:12:12.123456Z
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2024-05-31T21:16:15.123456Z
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
    # Example: /// Example: HawkEye360-7
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 101
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFGeoLocation_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the satellite constellation.
    # Example: /// Example: HawkEye360
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def Constellation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the signal of interest.
    # Example: /// Example: GPS
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def SignalOfInterest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
    # Example: /// Example: RFEMITTER-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def IdRfemitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
    # Example: /// Example: ORIGRFEMITTER-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def OrigRfemitterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The count of single-burst observations used for this geolocation observation.
    # Example: /// Example: 17
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def NumBursts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The minimum detected frequency in megahertz.
    # Example: /// Example: 1575.42
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def MinFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The maximum detected frequency in megahertz.
    # Example: /// Example: 1575.42
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def MaxFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The detected signal frequency in megahertz.
    # Example: /// Example: 1575.42
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def CenterFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 41.172
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def DetectLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 37.019
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def DetectLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The altitude relative to WGS-84 ellipsoid, in meters.
    # Example: /// Example: 123.456
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def DetectAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
    # Example: /// Example: 9435.896
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def ConfSemiMajor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
    # Example: /// Example: 2751.929
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def ConfSemiMinor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
    # Example: /// Example: 89.852
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def ConfOrientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
    # Example: /// Example: 81577480.056
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def ConfArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Type of region as projected on the ground.
    # Example: /// Example: MultiPolygon
    # Constraints: Minimum length = 0, Maximum length = 128
    # RFGeoLocation_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional external identifier referencing the entity used in the calculation of the geolocation.
    # Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def PassGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The RFGeo algorithm type and version used in geolocation calculations.
    # Example: /// Example: v1.0-3-gps_nb_3ball
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def AlgVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: 780180925
    # Constraints: Minimum length = 0, Maximum length = 36
    # RFGeoLocation_Ingest
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RFGeoLocation_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RFGeoLocation_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFGeoLocation_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFGeoLocation_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFGeoLocation_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFGeoLocation_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # RFGeoLocation_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFGeoLocation_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFGeoLocation_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def RFGeoLocation_IngestStart(builder):
    builder.StartObject(42)

def Start(builder):
    RFGeoLocation_IngestStart(builder)

def RFGeoLocation_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RFGeoLocation_IngestAddId(builder, id)

def RFGeoLocation_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RFGeoLocation_IngestAddClassificationMarking(builder, classificationMarking)

def RFGeoLocation_IngestAddOrderId(builder, orderId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orderId), 0)

def AddOrderId(builder, orderId):
    RFGeoLocation_IngestAddOrderId(builder, orderId)

def RFGeoLocation_IngestAddCreatedTs(builder, createdTs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdTs), 0)

def AddCreatedTs(builder, createdTs):
    RFGeoLocation_IngestAddCreatedTs(builder, createdTs)

def RFGeoLocation_IngestAddReceivedTs(builder, receivedTs):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(receivedTs), 0)

def AddReceivedTs(builder, receivedTs):
    RFGeoLocation_IngestAddReceivedTs(builder, receivedTs)

def RFGeoLocation_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    RFGeoLocation_IngestAddStartTime(builder, startTime)

def RFGeoLocation_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    RFGeoLocation_IngestAddEndTime(builder, endTime)

def RFGeoLocation_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    RFGeoLocation_IngestAddIdOnOrbit(builder, idOnOrbit)

def RFGeoLocation_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(8, satNo, 0)

def AddSatNo(builder, satNo):
    RFGeoLocation_IngestAddSatNo(builder, satNo)

def RFGeoLocation_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    RFGeoLocation_IngestAddOrigObjectId(builder, origObjectId)

def RFGeoLocation_IngestAddConstellation(builder, constellation):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(constellation), 0)

def AddConstellation(builder, constellation):
    RFGeoLocation_IngestAddConstellation(builder, constellation)

def RFGeoLocation_IngestAddSignalOfInterest(builder, signalOfInterest):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(signalOfInterest), 0)

def AddSignalOfInterest(builder, signalOfInterest):
    RFGeoLocation_IngestAddSignalOfInterest(builder, signalOfInterest)

def RFGeoLocation_IngestAddIdRfemitter(builder, idRfemitter):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(idRfemitter), 0)

def AddIdRfemitter(builder, idRfemitter):
    RFGeoLocation_IngestAddIdRfemitter(builder, idRfemitter)

def RFGeoLocation_IngestAddOrigRfemitterId(builder, origRfemitterId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origRfemitterId), 0)

def AddOrigRfemitterId(builder, origRfemitterId):
    RFGeoLocation_IngestAddOrigRfemitterId(builder, origRfemitterId)

def RFGeoLocation_IngestAddNumBursts(builder, numBursts):
    builder.PrependInt32Slot(14, numBursts, 0)

def AddNumBursts(builder, numBursts):
    RFGeoLocation_IngestAddNumBursts(builder, numBursts)

def RFGeoLocation_IngestAddMinFreq(builder, minFreq):
    builder.PrependFloat64Slot(15, minFreq, 0.0)

def AddMinFreq(builder, minFreq):
    RFGeoLocation_IngestAddMinFreq(builder, minFreq)

def RFGeoLocation_IngestAddMaxFreq(builder, maxFreq):
    builder.PrependFloat64Slot(16, maxFreq, 0.0)

def AddMaxFreq(builder, maxFreq):
    RFGeoLocation_IngestAddMaxFreq(builder, maxFreq)

def RFGeoLocation_IngestAddCenterFreq(builder, centerFreq):
    builder.PrependFloat64Slot(17, centerFreq, 0.0)

def AddCenterFreq(builder, centerFreq):
    RFGeoLocation_IngestAddCenterFreq(builder, centerFreq)

def RFGeoLocation_IngestAddDetectLat(builder, detectLat):
    builder.PrependFloat64Slot(18, detectLat, 0.0)

def AddDetectLat(builder, detectLat):
    RFGeoLocation_IngestAddDetectLat(builder, detectLat)

def RFGeoLocation_IngestAddDetectLon(builder, detectLon):
    builder.PrependFloat64Slot(19, detectLon, 0.0)

def AddDetectLon(builder, detectLon):
    RFGeoLocation_IngestAddDetectLon(builder, detectLon)

def RFGeoLocation_IngestAddDetectAlt(builder, detectAlt):
    builder.PrependFloat64Slot(20, detectAlt, 0.0)

def AddDetectAlt(builder, detectAlt):
    RFGeoLocation_IngestAddDetectAlt(builder, detectAlt)

def RFGeoLocation_IngestAddConfSemiMajor(builder, confSemiMajor):
    builder.PrependFloat64Slot(21, confSemiMajor, 0.0)

def AddConfSemiMajor(builder, confSemiMajor):
    RFGeoLocation_IngestAddConfSemiMajor(builder, confSemiMajor)

def RFGeoLocation_IngestAddConfSemiMinor(builder, confSemiMinor):
    builder.PrependFloat64Slot(22, confSemiMinor, 0.0)

def AddConfSemiMinor(builder, confSemiMinor):
    RFGeoLocation_IngestAddConfSemiMinor(builder, confSemiMinor)

def RFGeoLocation_IngestAddConfOrientation(builder, confOrientation):
    builder.PrependFloat64Slot(23, confOrientation, 0.0)

def AddConfOrientation(builder, confOrientation):
    RFGeoLocation_IngestAddConfOrientation(builder, confOrientation)

def RFGeoLocation_IngestAddConfArea(builder, confArea):
    builder.PrependFloat64Slot(24, confArea, 0.0)

def AddConfArea(builder, confArea):
    RFGeoLocation_IngestAddConfArea(builder, confArea)

def RFGeoLocation_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    RFGeoLocation_IngestAddAtype(builder, atype)

def RFGeoLocation_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    RFGeoLocation_IngestAddAgjson(builder, agjson)

def RFGeoLocation_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    RFGeoLocation_IngestAddAtext(builder, atext)

def RFGeoLocation_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    RFGeoLocation_IngestAddArea(builder, area)

def RFGeoLocation_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(29, andims, 0)

def AddAndims(builder, andims):
    RFGeoLocation_IngestAddAndims(builder, andims)

def RFGeoLocation_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(30, asrid, 0)

def AddAsrid(builder, asrid):
    RFGeoLocation_IngestAddAsrid(builder, asrid)

def RFGeoLocation_IngestAddPassGroupId(builder, passGroupId):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(passGroupId), 0)

def AddPassGroupId(builder, passGroupId):
    RFGeoLocation_IngestAddPassGroupId(builder, passGroupId)

def RFGeoLocation_IngestAddAlgVersion(builder, algVersion):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(algVersion), 0)

def AddAlgVersion(builder, algVersion):
    RFGeoLocation_IngestAddAlgVersion(builder, algVersion)

def RFGeoLocation_IngestAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    RFGeoLocation_IngestAddExternalId(builder, externalId)

def RFGeoLocation_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    RFGeoLocation_IngestAddTags(builder, tags)

def RFGeoLocation_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return RFGeoLocation_IngestStartTagsVector(builder, numElems)

def RFGeoLocation_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RFGeoLocation_IngestAddCreatedAt(builder, createdAt)

def RFGeoLocation_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RFGeoLocation_IngestAddCreatedBy(builder, createdBy)

def RFGeoLocation_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RFGeoLocation_IngestAddSource(builder, source)

def RFGeoLocation_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RFGeoLocation_IngestAddOrigin(builder, origin)

def RFGeoLocation_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    RFGeoLocation_IngestAddOrigNetwork(builder, origNetwork)

def RFGeoLocation_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    RFGeoLocation_IngestAddSourceDl(builder, sourceDl)

def RFGeoLocation_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(41, dataMode, 0)

def AddDataMode(builder, dataMode):
    RFGeoLocation_IngestAddDataMode(builder, dataMode)

def RFGeoLocation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return RFGeoLocation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class RFGeoLocation_IngestT(object):

    # RFGeoLocation_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.orderId = None  # type: str
        self.createdTs = None  # type: str
        self.receivedTs = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.constellation = None  # type: str
        self.signalOfInterest = None  # type: str
        self.idRfemitter = None  # type: str
        self.origRfemitterId = None  # type: str
        self.numBursts = 0  # type: int
        self.minFreq = 0.0  # type: float
        self.maxFreq = 0.0  # type: float
        self.centerFreq = 0.0  # type: float
        self.detectLat = 0.0  # type: float
        self.detectLon = 0.0  # type: float
        self.detectAlt = 0.0  # type: float
        self.confSemiMajor = 0.0  # type: float
        self.confSemiMinor = 0.0  # type: float
        self.confOrientation = 0.0  # type: float
        self.confArea = 0.0  # type: float
        self.atype = None  # type: str
        self.agjson = None  # type: str
        self.atext = None  # type: str
        self.area = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.passGroupId = None  # type: str
        self.algVersion = None  # type: str
        self.externalId = None  # type: str
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rfgeoLocationIngest = RFGeoLocation_Ingest()
        rfgeoLocationIngest.Init(buf, pos)
        return cls.InitFromObj(rfgeoLocationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rfgeoLocationIngest):
        x = RFGeoLocation_IngestT()
        x._UnPack(rfgeoLocationIngest)
        return x

    # RFGeoLocation_IngestT
    def _UnPack(self, rfgeoLocationIngest):
        if rfgeoLocationIngest is None:
            return
        self.id = rfgeoLocationIngest.Id()
        self.classificationMarking = rfgeoLocationIngest.ClassificationMarking()
        self.orderId = rfgeoLocationIngest.OrderId()
        self.createdTs = rfgeoLocationIngest.CreatedTs()
        self.receivedTs = rfgeoLocationIngest.ReceivedTs()
        self.startTime = rfgeoLocationIngest.StartTime()
        self.endTime = rfgeoLocationIngest.EndTime()
        self.idOnOrbit = rfgeoLocationIngest.IdOnOrbit()
        self.satNo = rfgeoLocationIngest.SatNo()
        self.origObjectId = rfgeoLocationIngest.OrigObjectId()
        self.constellation = rfgeoLocationIngest.Constellation()
        self.signalOfInterest = rfgeoLocationIngest.SignalOfInterest()
        self.idRfemitter = rfgeoLocationIngest.IdRfemitter()
        self.origRfemitterId = rfgeoLocationIngest.OrigRfemitterId()
        self.numBursts = rfgeoLocationIngest.NumBursts()
        self.minFreq = rfgeoLocationIngest.MinFreq()
        self.maxFreq = rfgeoLocationIngest.MaxFreq()
        self.centerFreq = rfgeoLocationIngest.CenterFreq()
        self.detectLat = rfgeoLocationIngest.DetectLat()
        self.detectLon = rfgeoLocationIngest.DetectLon()
        self.detectAlt = rfgeoLocationIngest.DetectAlt()
        self.confSemiMajor = rfgeoLocationIngest.ConfSemiMajor()
        self.confSemiMinor = rfgeoLocationIngest.ConfSemiMinor()
        self.confOrientation = rfgeoLocationIngest.ConfOrientation()
        self.confArea = rfgeoLocationIngest.ConfArea()
        self.atype = rfgeoLocationIngest.Atype()
        self.agjson = rfgeoLocationIngest.Agjson()
        self.atext = rfgeoLocationIngest.Atext()
        self.area = rfgeoLocationIngest.Area()
        self.andims = rfgeoLocationIngest.Andims()
        self.asrid = rfgeoLocationIngest.Asrid()
        self.passGroupId = rfgeoLocationIngest.PassGroupId()
        self.algVersion = rfgeoLocationIngest.AlgVersion()
        self.externalId = rfgeoLocationIngest.ExternalId()
        if not rfgeoLocationIngest.TagsIsNone():
            self.tags = []
            for i in range(rfgeoLocationIngest.TagsLength()):
                self.tags.append(rfgeoLocationIngest.Tags(i))
        self.createdAt = rfgeoLocationIngest.CreatedAt()
        self.createdBy = rfgeoLocationIngest.CreatedBy()
        self.source = rfgeoLocationIngest.Source()
        self.origin = rfgeoLocationIngest.Origin()
        self.origNetwork = rfgeoLocationIngest.OrigNetwork()
        self.sourceDl = rfgeoLocationIngest.SourceDl()
        self.dataMode = rfgeoLocationIngest.DataMode()

    # RFGeoLocation_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.orderId is not None:
            orderId = builder.CreateString(self.orderId)
        if self.createdTs is not None:
            createdTs = builder.CreateString(self.createdTs)
        if self.receivedTs is not None:
            receivedTs = builder.CreateString(self.receivedTs)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.constellation is not None:
            constellation = builder.CreateString(self.constellation)
        if self.signalOfInterest is not None:
            signalOfInterest = builder.CreateString(self.signalOfInterest)
        if self.idRfemitter is not None:
            idRfemitter = builder.CreateString(self.idRfemitter)
        if self.origRfemitterId is not None:
            origRfemitterId = builder.CreateString(self.origRfemitterId)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.passGroupId is not None:
            passGroupId = builder.CreateString(self.passGroupId)
        if self.algVersion is not None:
            algVersion = builder.CreateString(self.algVersion)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            RFGeoLocation_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        RFGeoLocation_IngestStart(builder)
        if self.id is not None:
            RFGeoLocation_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            RFGeoLocation_IngestAddClassificationMarking(builder, classificationMarking)
        if self.orderId is not None:
            RFGeoLocation_IngestAddOrderId(builder, orderId)
        if self.createdTs is not None:
            RFGeoLocation_IngestAddCreatedTs(builder, createdTs)
        if self.receivedTs is not None:
            RFGeoLocation_IngestAddReceivedTs(builder, receivedTs)
        if self.startTime is not None:
            RFGeoLocation_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            RFGeoLocation_IngestAddEndTime(builder, endTime)
        if self.idOnOrbit is not None:
            RFGeoLocation_IngestAddIdOnOrbit(builder, idOnOrbit)
        RFGeoLocation_IngestAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            RFGeoLocation_IngestAddOrigObjectId(builder, origObjectId)
        if self.constellation is not None:
            RFGeoLocation_IngestAddConstellation(builder, constellation)
        if self.signalOfInterest is not None:
            RFGeoLocation_IngestAddSignalOfInterest(builder, signalOfInterest)
        if self.idRfemitter is not None:
            RFGeoLocation_IngestAddIdRfemitter(builder, idRfemitter)
        if self.origRfemitterId is not None:
            RFGeoLocation_IngestAddOrigRfemitterId(builder, origRfemitterId)
        RFGeoLocation_IngestAddNumBursts(builder, self.numBursts)
        RFGeoLocation_IngestAddMinFreq(builder, self.minFreq)
        RFGeoLocation_IngestAddMaxFreq(builder, self.maxFreq)
        RFGeoLocation_IngestAddCenterFreq(builder, self.centerFreq)
        RFGeoLocation_IngestAddDetectLat(builder, self.detectLat)
        RFGeoLocation_IngestAddDetectLon(builder, self.detectLon)
        RFGeoLocation_IngestAddDetectAlt(builder, self.detectAlt)
        RFGeoLocation_IngestAddConfSemiMajor(builder, self.confSemiMajor)
        RFGeoLocation_IngestAddConfSemiMinor(builder, self.confSemiMinor)
        RFGeoLocation_IngestAddConfOrientation(builder, self.confOrientation)
        RFGeoLocation_IngestAddConfArea(builder, self.confArea)
        if self.atype is not None:
            RFGeoLocation_IngestAddAtype(builder, atype)
        if self.agjson is not None:
            RFGeoLocation_IngestAddAgjson(builder, agjson)
        if self.atext is not None:
            RFGeoLocation_IngestAddAtext(builder, atext)
        if self.area is not None:
            RFGeoLocation_IngestAddArea(builder, area)
        RFGeoLocation_IngestAddAndims(builder, self.andims)
        RFGeoLocation_IngestAddAsrid(builder, self.asrid)
        if self.passGroupId is not None:
            RFGeoLocation_IngestAddPassGroupId(builder, passGroupId)
        if self.algVersion is not None:
            RFGeoLocation_IngestAddAlgVersion(builder, algVersion)
        if self.externalId is not None:
            RFGeoLocation_IngestAddExternalId(builder, externalId)
        if self.tags is not None:
            RFGeoLocation_IngestAddTags(builder, tags)
        if self.createdAt is not None:
            RFGeoLocation_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RFGeoLocation_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            RFGeoLocation_IngestAddSource(builder, source)
        if self.origin is not None:
            RFGeoLocation_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            RFGeoLocation_IngestAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            RFGeoLocation_IngestAddSourceDl(builder, sourceDl)
        RFGeoLocation_IngestAddDataMode(builder, self.dataMode)
        rfgeoLocationIngest = RFGeoLocation_IngestEnd(builder)
        return rfgeoLocationIngest
