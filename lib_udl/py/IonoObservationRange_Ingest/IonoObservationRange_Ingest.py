# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The group path from transmitter to receiver.
class IonoObservationRange_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationRange_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationRange_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationRange_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationRange_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notes for the range data.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservationRange_Ingest
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of integers of the range array dimensions.
    # Example: /// Example: [1, 2]
    # Constraints: No constraints specified.
    # IonoObservationRange_Ingest
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationRange_Ingest
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationRange_Ingest
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Array of names for range dimensions.
    # Example: /// Example: ['NAME1', 'NAME2']
    # Constraints: No constraints specified.
    # IonoObservationRange_Ingest
    def DimensionName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationRange_Ingest
    def DimensionNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationRange_Ingest
    def DimensionNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Array of range data.
    # Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    # Constraints: No constraints specified.
    # IonoObservationRange_Ingest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationRange_Ingest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationRange_Ingest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def IonoObservationRange_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    IonoObservationRange_IngestStart(builder)

def IonoObservationRange_IngestAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    IonoObservationRange_IngestAddNotes(builder, notes)

def IonoObservationRange_IngestAddDimensions(builder, dimensions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)

def AddDimensions(builder, dimensions):
    IonoObservationRange_IngestAddDimensions(builder, dimensions)

def IonoObservationRange_IngestStartDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionsVector(builder, numElems):
    return IonoObservationRange_IngestStartDimensionsVector(builder, numElems)

def IonoObservationRange_IngestAddDimensionName(builder, dimensionName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionName), 0)

def AddDimensionName(builder, dimensionName):
    IonoObservationRange_IngestAddDimensionName(builder, dimensionName)

def IonoObservationRange_IngestStartDimensionNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionNameVector(builder, numElems):
    return IonoObservationRange_IngestStartDimensionNameVector(builder, numElems)

def IonoObservationRange_IngestAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationRange_IngestAddData(builder, data)

def IonoObservationRange_IngestStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationRange_IngestStartDataVector(builder, numElems)

def IonoObservationRange_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationRange_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationRange_IngestT(object):

    # IonoObservationRange_IngestT
    def __init__(self):
        self.notes = None  # type: str
        self.dimensions = None  # type: List[str]
        self.dimensionName = None  # type: List[str]
        self.data = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationRangeIngest = IonoObservationRange_Ingest()
        ionoObservationRangeIngest.Init(buf, pos)
        return cls.InitFromObj(ionoObservationRangeIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationRangeIngest):
        x = IonoObservationRange_IngestT()
        x._UnPack(ionoObservationRangeIngest)
        return x

    # IonoObservationRange_IngestT
    def _UnPack(self, ionoObservationRangeIngest):
        if ionoObservationRangeIngest is None:
            return
        self.notes = ionoObservationRangeIngest.Notes()
        if not ionoObservationRangeIngest.DimensionsIsNone():
            self.dimensions = []
            for i in range(ionoObservationRangeIngest.DimensionsLength()):
                self.dimensions.append(ionoObservationRangeIngest.Dimensions(i))
        if not ionoObservationRangeIngest.DimensionNameIsNone():
            self.dimensionName = []
            for i in range(ionoObservationRangeIngest.DimensionNameLength()):
                self.dimensionName.append(ionoObservationRangeIngest.DimensionName(i))
        if not ionoObservationRangeIngest.DataIsNone():
            self.data = []
            for i in range(ionoObservationRangeIngest.DataLength()):
                self.data.append(ionoObservationRangeIngest.Data(i))

    # IonoObservationRange_IngestT
    def Pack(self, builder):
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.dimensions is not None:
            dimensionslist = []
            for i in range(len(self.dimensions)):
                dimensionslist.append(builder.CreateString(self.dimensions[i]))
            IonoObservationRange_IngestStartDimensionsVector(builder, len(self.dimensions))
            for i in reversed(range(len(self.dimensions))):
                builder.PrependUOffsetTRelative(dimensionslist[i])
            dimensions = builder.EndVector()
        if self.dimensionName is not None:
            dimensionNamelist = []
            for i in range(len(self.dimensionName)):
                dimensionNamelist.append(builder.CreateString(self.dimensionName[i]))
            IonoObservationRange_IngestStartDimensionNameVector(builder, len(self.dimensionName))
            for i in reversed(range(len(self.dimensionName))):
                builder.PrependUOffsetTRelative(dimensionNamelist[i])
            dimensionName = builder.EndVector()
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationRange_IngestStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        IonoObservationRange_IngestStart(builder)
        if self.notes is not None:
            IonoObservationRange_IngestAddNotes(builder, notes)
        if self.dimensions is not None:
            IonoObservationRange_IngestAddDimensions(builder, dimensions)
        if self.dimensionName is not None:
            IonoObservationRange_IngestAddDimensionName(builder, dimensionName)
        if self.data is not None:
            IonoObservationRange_IngestAddData(builder, data)
        ionoObservationRangeIngest = IonoObservationRange_IngestEnd(builder)
        return ionoObservationRangeIngest
