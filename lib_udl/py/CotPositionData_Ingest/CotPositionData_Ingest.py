# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for the CotPositionData to post.
class CotPositionData_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CotPositionData_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCotPositionData_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CotPositionData_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x54\x50", size_prefixed=size_prefixed)

    # CotPositionData_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the POI target Object.
    # Example: /// Example: POI_NAME
    # Constraints: Minimum length = 1, Maximum length = 2147483647
    # CotPositionData_Ingest
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
    # Example: /// Example: Team Member
    # Constraints: Minimum length = 1, Maximum length = 2147483647
    # CotPositionData_Ingest
    def TeamRole(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the POI target Object.
    # Example: /// Example: Description of the object
    # Constraints: Minimum length = 1, Maximum length = 2147483647
    # CotPositionData_Ingest
    def Team(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CotPositionData_IngestStart(builder):
    builder.StartObject(3)

def Start(builder):
    CotPositionData_IngestStart(builder)

def CotPositionData_IngestAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    CotPositionData_IngestAddCallSign(builder, callSign)

def CotPositionData_IngestAddTeamRole(builder, teamRole):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(teamRole), 0)

def AddTeamRole(builder, teamRole):
    CotPositionData_IngestAddTeamRole(builder, teamRole)

def CotPositionData_IngestAddTeam(builder, team):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(team), 0)

def AddTeam(builder, team):
    CotPositionData_IngestAddTeam(builder, team)

def CotPositionData_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return CotPositionData_IngestEnd(builder)


class CotPositionData_IngestT(object):

    # CotPositionData_IngestT
    def __init__(self):
        self.callSign = None  # type: str
        self.teamRole = None  # type: str
        self.team = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cotPositionDataIngest = CotPositionData_Ingest()
        cotPositionDataIngest.Init(buf, pos)
        return cls.InitFromObj(cotPositionDataIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cotPositionDataIngest):
        x = CotPositionData_IngestT()
        x._UnPack(cotPositionDataIngest)
        return x

    # CotPositionData_IngestT
    def _UnPack(self, cotPositionDataIngest):
        if cotPositionDataIngest is None:
            return
        self.callSign = cotPositionDataIngest.CallSign()
        self.teamRole = cotPositionDataIngest.TeamRole()
        self.team = cotPositionDataIngest.Team()

    # CotPositionData_IngestT
    def Pack(self, builder):
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.teamRole is not None:
            teamRole = builder.CreateString(self.teamRole)
        if self.team is not None:
            team = builder.CreateString(self.team)
        CotPositionData_IngestStart(builder)
        if self.callSign is not None:
            CotPositionData_IngestAddCallSign(builder, callSign)
        if self.teamRole is not None:
            CotPositionData_IngestAddTeamRole(builder, teamRole)
        if self.team is not None:
            CotPositionData_IngestAddTeam(builder, team)
        cotPositionDataIngest = CotPositionData_IngestEnd(builder)
        return cotPositionDataIngest
