# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class Sensortype_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sensortype_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensortype_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Sensortype_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # Sensortype_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 12344411
    # Constraints: No constraints specified.
    # Sensortype_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The specific sensor type and/or surveillance capability of this sensor.
    # Example: /// Example: Space Borne
    # Constraints: Minimum length = 0, Maximum length = 128
    # Sensortype_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: No example provided.
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensortype_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensortype_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensortype_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensortype_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensortype_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Sensortype_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensortype_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Sensortype_FullStart(builder):
    builder.StartObject(9)

def Start(builder):
    Sensortype_FullStart(builder)

def Sensortype_FullAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)

def AddId(builder, id):
    Sensortype_FullAddId(builder, id)

def Sensortype_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Sensortype_FullAddType(builder, type)

def Sensortype_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Sensortype_FullAddSource(builder, source)

def Sensortype_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(3, dataMode, 0)

def AddDataMode(builder, dataMode):
    Sensortype_FullAddDataMode(builder, dataMode)

def Sensortype_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Sensortype_FullAddCreatedAt(builder, createdAt)

def Sensortype_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Sensortype_FullAddCreatedBy(builder, createdBy)

def Sensortype_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Sensortype_FullAddUpdatedAt(builder, updatedAt)

def Sensortype_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Sensortype_FullAddUpdatedBy(builder, updatedBy)

def Sensortype_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Sensortype_FullAddOrigNetwork(builder, origNetwork)

def Sensortype_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Sensortype_FullEnd(builder)


class Sensortype_FullT(object):

    # Sensortype_FullT
    def __init__(self):
        self.id = 0  # type: int
        self.type = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensortypeFull = Sensortype_Full()
        sensortypeFull.Init(buf, pos)
        return cls.InitFromObj(sensortypeFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensortypeFull):
        x = Sensortype_FullT()
        x._UnPack(sensortypeFull)
        return x

    # Sensortype_FullT
    def _UnPack(self, sensortypeFull):
        if sensortypeFull is None:
            return
        self.id = sensortypeFull.Id()
        self.type = sensortypeFull.Type()
        self.source = sensortypeFull.Source()
        self.dataMode = sensortypeFull.DataMode()
        self.createdAt = sensortypeFull.CreatedAt()
        self.createdBy = sensortypeFull.CreatedBy()
        self.updatedAt = sensortypeFull.UpdatedAt()
        self.updatedBy = sensortypeFull.UpdatedBy()
        self.origNetwork = sensortypeFull.OrigNetwork()

    # Sensortype_FullT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Sensortype_FullStart(builder)
        Sensortype_FullAddId(builder, self.id)
        if self.type is not None:
            Sensortype_FullAddType(builder, type)
        if self.source is not None:
            Sensortype_FullAddSource(builder, source)
        Sensortype_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Sensortype_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Sensortype_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Sensortype_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Sensortype_FullAddUpdatedBy(builder, updatedBy)
        if self.origNetwork is not None:
            Sensortype_FullAddOrigNetwork(builder, origNetwork)
        sensortypeFull = Sensortype_FullEnd(builder)
        return sensortypeFull
