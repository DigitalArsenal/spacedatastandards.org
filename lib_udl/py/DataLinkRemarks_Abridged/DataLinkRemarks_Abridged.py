# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of remarks associated with this data link message.
class DataLinkRemarks_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkRemarks_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkRemarks_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkRemarks_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkRemarks_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Indicates the subject matter of the remark.
    # Example: /// Example: CONTINGENCY PROCEDURES
    # Constraints: Minimum length = 0, Maximum length = 64
    # DataLinkRemarks_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text of the remark.
    # Example: /// Example: Example data link remarks
    # Constraints: Minimum length = 0, Maximum length = 128
    # DataLinkRemarks_Abridged
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataLinkRemarks_AbridgedStart(builder):
    builder.StartObject(2)

def Start(builder):
    DataLinkRemarks_AbridgedStart(builder)

def DataLinkRemarks_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    DataLinkRemarks_AbridgedAddType(builder, type)

def DataLinkRemarks_AbridgedAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    DataLinkRemarks_AbridgedAddText(builder, text)

def DataLinkRemarks_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkRemarks_AbridgedEnd(builder)


class DataLinkRemarks_AbridgedT(object):

    # DataLinkRemarks_AbridgedT
    def __init__(self):
        self.type = None  # type: str
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkRemarksAbridged = DataLinkRemarks_Abridged()
        dataLinkRemarksAbridged.Init(buf, pos)
        return cls.InitFromObj(dataLinkRemarksAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkRemarksAbridged):
        x = DataLinkRemarks_AbridgedT()
        x._UnPack(dataLinkRemarksAbridged)
        return x

    # DataLinkRemarks_AbridgedT
    def _UnPack(self, dataLinkRemarksAbridged):
        if dataLinkRemarksAbridged is None:
            return
        self.type = dataLinkRemarksAbridged.Type()
        self.text = dataLinkRemarksAbridged.Text()

    # DataLinkRemarks_AbridgedT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.text is not None:
            text = builder.CreateString(self.text)
        DataLinkRemarks_AbridgedStart(builder)
        if self.type is not None:
            DataLinkRemarks_AbridgedAddType(builder, type)
        if self.text is not None:
            DataLinkRemarks_AbridgedAddText(builder, text)
        dataLinkRemarksAbridged = DataLinkRemarks_AbridgedEnd(builder)
        return dataLinkRemarksAbridged
