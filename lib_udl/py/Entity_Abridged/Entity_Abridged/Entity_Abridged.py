# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Entity_Abridged

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
class Entity_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Entity_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEntity_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Entity_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record.
    # Example: ENTITY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Entity_Abridged
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique entity name.
    # Example: Example name
    # Constraints: Minimum length = 1, Maximum length = 128
    # Entity_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Entity_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    # Example: ONORBIT
    # Constraints: Minimum length = 1, Maximum length = 45
    # Entity_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Unique identifier of the entity location, if terrestrial/fixed.
    # Example: LOCATION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity_Abridged
    def IdLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Entity_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
    # Example: Commercial
    # Constraints: Minimum length = 0, Maximum length = 32
    # Entity_Abridged
    def OwnerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this entity is taskable.
    # Example: False
    # Constraints: No constraints specified.
    # Entity_Abridged
    def Taskable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Time the row was created in the database, auto-populated by the system.
    # Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Entity_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Entity_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Entity_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Entity_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    # Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Entity_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # Entity_Abridged
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # Entity_Abridged
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    # Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the associated operating unit object.
    # Example: OPERATINGUNIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Entity_Abridged
    def IdOperatingUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Entity_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Entity_AbridgedStart(builder):
    builder.StartObject(18)

def Start(builder):
    Entity_AbridgedStart(builder)

def Entity_AbridgedAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Entity_AbridgedAddIdEntity(builder, idEntity)

def Entity_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Entity_AbridgedAddName(builder, name)

def Entity_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Entity_AbridgedAddClassificationMarking(builder, classificationMarking)

def Entity_AbridgedAddType(builder, type):
    builder.PrependInt8Slot(3, type, 0)

def AddType(builder, type):
    Entity_AbridgedAddType(builder, type)

def Entity_AbridgedAddIdLocation(builder, idLocation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idLocation), 0)

def AddIdLocation(builder, idLocation):
    Entity_AbridgedAddIdLocation(builder, idLocation)

def Entity_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Entity_AbridgedAddCountryCode(builder, countryCode)

def Entity_AbridgedAddOwnerType(builder, ownerType):
    builder.PrependInt8Slot(6, ownerType, 0)

def AddOwnerType(builder, ownerType):
    Entity_AbridgedAddOwnerType(builder, ownerType)

def Entity_AbridgedAddTaskable(builder, taskable):
    builder.PrependBoolSlot(7, taskable, 0)

def AddTaskable(builder, taskable):
    Entity_AbridgedAddTaskable(builder, taskable)

def Entity_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Entity_AbridgedAddCreatedAt(builder, createdAt)

def Entity_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Entity_AbridgedAddCreatedBy(builder, createdBy)

def Entity_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Entity_AbridgedAddSource(builder, source)

def Entity_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Entity_AbridgedAddOrigin(builder, origin)

def Entity_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(12, dataMode, 0)

def AddDataMode(builder, dataMode):
    Entity_AbridgedAddDataMode(builder, dataMode)

def Entity_AbridgedAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    Entity_AbridgedAddLocation(builder, location)

def Entity_AbridgedAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    Entity_AbridgedAddOnOrbit(builder, onOrbit)

def Entity_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    Entity_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def Entity_AbridgedAddIdOperatingUnit(builder, idOperatingUnit):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(idOperatingUnit), 0)

def AddIdOperatingUnit(builder, idOperatingUnit):
    Entity_AbridgedAddIdOperatingUnit(builder, idOperatingUnit)

def Entity_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Entity_AbridgedAddOrigNetwork(builder, origNetwork)

def Entity_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Entity_AbridgedEnd(builder)


class Entity_AbridgedT(object):

    # Entity_AbridgedT
    def __init__(self):
        self.idEntity = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = 0  # type: int
        self.idLocation = None  # type: str
        self.countryCode = None  # type: str
        self.ownerType = 0  # type: int
        self.taskable = False  # type: bool
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.location = None  # type: str
        self.onOrbit = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idOperatingUnit = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        entityAbridged = Entity_Abridged()
        entityAbridged.Init(buf, pos)
        return cls.InitFromObj(entityAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, entityAbridged):
        x = Entity_AbridgedT()
        x._UnPack(entityAbridged)
        return x

    # Entity_AbridgedT
    def _UnPack(self, entityAbridged):
        if entityAbridged is None:
            return
        self.idEntity = entityAbridged.IdEntity()
        self.name = entityAbridged.Name()
        self.classificationMarking = entityAbridged.ClassificationMarking()
        self.type = entityAbridged.Type()
        self.idLocation = entityAbridged.IdLocation()
        self.countryCode = entityAbridged.CountryCode()
        self.ownerType = entityAbridged.OwnerType()
        self.taskable = entityAbridged.Taskable()
        self.createdAt = entityAbridged.CreatedAt()
        self.createdBy = entityAbridged.CreatedBy()
        self.source = entityAbridged.Source()
        self.origin = entityAbridged.Origin()
        self.dataMode = entityAbridged.DataMode()
        self.location = entityAbridged.Location()
        self.onOrbit = entityAbridged.OnOrbit()
        self.idOnOrbit = entityAbridged.IdOnOrbit()
        self.idOperatingUnit = entityAbridged.IdOperatingUnit()
        self.origNetwork = entityAbridged.OrigNetwork()

    # Entity_AbridgedT
    def Pack(self, builder):
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idLocation is not None:
            idLocation = builder.CreateString(self.idLocation)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.location is not None:
            location = builder.CreateString(self.location)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idOperatingUnit is not None:
            idOperatingUnit = builder.CreateString(self.idOperatingUnit)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Entity_AbridgedStart(builder)
        if self.idEntity is not None:
            Entity_AbridgedAddIdEntity(builder, idEntity)
        if self.name is not None:
            Entity_AbridgedAddName(builder, name)
        if self.classificationMarking is not None:
            Entity_AbridgedAddClassificationMarking(builder, classificationMarking)
        Entity_AbridgedAddType(builder, self.type)
        if self.idLocation is not None:
            Entity_AbridgedAddIdLocation(builder, idLocation)
        if self.countryCode is not None:
            Entity_AbridgedAddCountryCode(builder, countryCode)
        Entity_AbridgedAddOwnerType(builder, self.ownerType)
        Entity_AbridgedAddTaskable(builder, self.taskable)
        if self.createdAt is not None:
            Entity_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Entity_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Entity_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Entity_AbridgedAddOrigin(builder, origin)
        Entity_AbridgedAddDataMode(builder, self.dataMode)
        if self.location is not None:
            Entity_AbridgedAddLocation(builder, location)
        if self.onOrbit is not None:
            Entity_AbridgedAddOnOrbit(builder, onOrbit)
        if self.idOnOrbit is not None:
            Entity_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.idOperatingUnit is not None:
            Entity_AbridgedAddIdOperatingUnit(builder, idOperatingUnit)
        if self.origNetwork is not None:
            Entity_AbridgedAddOrigNetwork(builder, origNetwork)
        entityAbridged = Entity_AbridgedEnd(builder)
        return entityAbridged
