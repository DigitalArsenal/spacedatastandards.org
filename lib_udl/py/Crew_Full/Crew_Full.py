# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Crew Services.
class Crew_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Crew_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCrew_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Crew_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x52\x45\x57", size_prefixed=size_prefixed)

    # Crew_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
    # Constraints: Minimum length = 1, Maximum length = 36
    # Crew_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Crew_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
    # Example: /// Example: JHJDHjhuu929o92
    # Constraints: Minimum length = 1, Maximum length = 36
    # Crew_Full
    def OrigCrewId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the formed crew.
    # Example: /// Example: falcon
    # Constraints: Minimum length = 0, Maximum length = 36
    # Crew_Full
    def CrewName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Crew Status (e.g. APPROVED, PENDING).
    # Example: /// Example: APPROVED
    # Constraints: Minimum length = 0, Maximum length = 64
    # Crew_Full
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Aircraft Sortie associated with this crew record.
    # Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
    # Constraints: Minimum length = 0, Maximum length = 36
    # Crew_Full
    def IdSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Crew_Full
    def LegalAlertTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Crew_Full
    def LegalBravoTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Crew_Full
    def AlertedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Scheduled return time, in ISO8601 UTC format, with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Crew_Full
    def ReturnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Crew Flight Duty Period (FDP) eligibility type.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 32
    # Crew_Full
    def FdpEligType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flight Duty Period (FDP) type.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 32
    # Crew_Full
    def FdpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Crew type.
    # Example: /// Example: AIRLAND
    # Constraints: Minimum length = 0, Maximum length = 32
    # Crew_Full
    def CrewType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
    # Example: /// Example: 00016ALSQ
    # Constraints: Minimum length = 0, Maximum length = 32
    # Crew_Full
    def ArmsCrewUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CrewMembers Collection.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Crew_Full
    def CrewMembers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Crew_Full
    def CrewMembersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Crew_Full
    def CrewMembersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Crew_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Crew_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Crew_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Crew_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Crew_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Crew_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # Crew_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Crew_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Crew_FullStart(builder):
    builder.StartObject(23)

def Start(builder):
    Crew_FullStart(builder)

def Crew_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Crew_FullAddId(builder, id)

def Crew_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Crew_FullAddClassificationMarking(builder, classificationMarking)

def Crew_FullAddOrigCrewId(builder, origCrewId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origCrewId), 0)

def AddOrigCrewId(builder, origCrewId):
    Crew_FullAddOrigCrewId(builder, origCrewId)

def Crew_FullAddCrewName(builder, crewName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(crewName), 0)

def AddCrewName(builder, crewName):
    Crew_FullAddCrewName(builder, crewName)

def Crew_FullAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    Crew_FullAddStatus(builder, status)

def Crew_FullAddIdSortie(builder, idSortie):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSortie), 0)

def AddIdSortie(builder, idSortie):
    Crew_FullAddIdSortie(builder, idSortie)

def Crew_FullAddLegalAlertTime(builder, legalAlertTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(legalAlertTime), 0)

def AddLegalAlertTime(builder, legalAlertTime):
    Crew_FullAddLegalAlertTime(builder, legalAlertTime)

def Crew_FullAddLegalBravoTime(builder, legalBravoTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(legalBravoTime), 0)

def AddLegalBravoTime(builder, legalBravoTime):
    Crew_FullAddLegalBravoTime(builder, legalBravoTime)

def Crew_FullAddAlertedTime(builder, alertedTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(alertedTime), 0)

def AddAlertedTime(builder, alertedTime):
    Crew_FullAddAlertedTime(builder, alertedTime)

def Crew_FullAddReturnTime(builder, returnTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(returnTime), 0)

def AddReturnTime(builder, returnTime):
    Crew_FullAddReturnTime(builder, returnTime)

def Crew_FullAddFdpEligType(builder, fdpEligType):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(fdpEligType), 0)

def AddFdpEligType(builder, fdpEligType):
    Crew_FullAddFdpEligType(builder, fdpEligType)

def Crew_FullAddFdpType(builder, fdpType):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(fdpType), 0)

def AddFdpType(builder, fdpType):
    Crew_FullAddFdpType(builder, fdpType)

def Crew_FullAddCrewType(builder, crewType):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(crewType), 0)

def AddCrewType(builder, crewType):
    Crew_FullAddCrewType(builder, crewType)

def Crew_FullAddArmsCrewUnit(builder, armsCrewUnit):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(armsCrewUnit), 0)

def AddArmsCrewUnit(builder, armsCrewUnit):
    Crew_FullAddArmsCrewUnit(builder, armsCrewUnit)

def Crew_FullAddCrewMembers(builder, crewMembers):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(crewMembers), 0)

def AddCrewMembers(builder, crewMembers):
    Crew_FullAddCrewMembers(builder, crewMembers)

def Crew_FullStartCrewMembersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCrewMembersVector(builder, numElems):
    return Crew_FullStartCrewMembersVector(builder, numElems)

def Crew_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Crew_FullAddCreatedAt(builder, createdAt)

def Crew_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Crew_FullAddCreatedBy(builder, createdBy)

def Crew_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Crew_FullAddUpdatedAt(builder, updatedAt)

def Crew_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Crew_FullAddUpdatedBy(builder, updatedBy)

def Crew_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Crew_FullAddSource(builder, source)

def Crew_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Crew_FullAddOrigin(builder, origin)

def Crew_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Crew_FullAddOrigNetwork(builder, origNetwork)

def Crew_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(22, dataMode, 0)

def AddDataMode(builder, dataMode):
    Crew_FullAddDataMode(builder, dataMode)

def Crew_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Crew_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Crew_FullT(object):

    # Crew_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.origCrewId = None  # type: str
        self.crewName = None  # type: str
        self.status = None  # type: str
        self.idSortie = None  # type: str
        self.legalAlertTime = None  # type: str
        self.legalBravoTime = None  # type: str
        self.alertedTime = None  # type: str
        self.returnTime = None  # type: str
        self.fdpEligType = None  # type: str
        self.fdpType = None  # type: str
        self.crewType = None  # type: str
        self.armsCrewUnit = None  # type: str
        self.crewMembers = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        crewFull = Crew_Full()
        crewFull.Init(buf, pos)
        return cls.InitFromObj(crewFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, crewFull):
        x = Crew_FullT()
        x._UnPack(crewFull)
        return x

    # Crew_FullT
    def _UnPack(self, crewFull):
        if crewFull is None:
            return
        self.id = crewFull.Id()
        self.classificationMarking = crewFull.ClassificationMarking()
        self.origCrewId = crewFull.OrigCrewId()
        self.crewName = crewFull.CrewName()
        self.status = crewFull.Status()
        self.idSortie = crewFull.IdSortie()
        self.legalAlertTime = crewFull.LegalAlertTime()
        self.legalBravoTime = crewFull.LegalBravoTime()
        self.alertedTime = crewFull.AlertedTime()
        self.returnTime = crewFull.ReturnTime()
        self.fdpEligType = crewFull.FdpEligType()
        self.fdpType = crewFull.FdpType()
        self.crewType = crewFull.CrewType()
        self.armsCrewUnit = crewFull.ArmsCrewUnit()
        if not crewFull.CrewMembersIsNone():
            self.crewMembers = []
            for i in range(crewFull.CrewMembersLength()):
                self.crewMembers.append(crewFull.CrewMembers(i))
        self.createdAt = crewFull.CreatedAt()
        self.createdBy = crewFull.CreatedBy()
        self.updatedAt = crewFull.UpdatedAt()
        self.updatedBy = crewFull.UpdatedBy()
        self.source = crewFull.Source()
        self.origin = crewFull.Origin()
        self.origNetwork = crewFull.OrigNetwork()
        self.dataMode = crewFull.DataMode()

    # Crew_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origCrewId is not None:
            origCrewId = builder.CreateString(self.origCrewId)
        if self.crewName is not None:
            crewName = builder.CreateString(self.crewName)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.idSortie is not None:
            idSortie = builder.CreateString(self.idSortie)
        if self.legalAlertTime is not None:
            legalAlertTime = builder.CreateString(self.legalAlertTime)
        if self.legalBravoTime is not None:
            legalBravoTime = builder.CreateString(self.legalBravoTime)
        if self.alertedTime is not None:
            alertedTime = builder.CreateString(self.alertedTime)
        if self.returnTime is not None:
            returnTime = builder.CreateString(self.returnTime)
        if self.fdpEligType is not None:
            fdpEligType = builder.CreateString(self.fdpEligType)
        if self.fdpType is not None:
            fdpType = builder.CreateString(self.fdpType)
        if self.crewType is not None:
            crewType = builder.CreateString(self.crewType)
        if self.armsCrewUnit is not None:
            armsCrewUnit = builder.CreateString(self.armsCrewUnit)
        if self.crewMembers is not None:
            crewMemberslist = []
            for i in range(len(self.crewMembers)):
                crewMemberslist.append(builder.CreateString(self.crewMembers[i]))
            Crew_FullStartCrewMembersVector(builder, len(self.crewMembers))
            for i in reversed(range(len(self.crewMembers))):
                builder.PrependUOffsetTRelative(crewMemberslist[i])
            crewMembers = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Crew_FullStart(builder)
        if self.id is not None:
            Crew_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Crew_FullAddClassificationMarking(builder, classificationMarking)
        if self.origCrewId is not None:
            Crew_FullAddOrigCrewId(builder, origCrewId)
        if self.crewName is not None:
            Crew_FullAddCrewName(builder, crewName)
        if self.status is not None:
            Crew_FullAddStatus(builder, status)
        if self.idSortie is not None:
            Crew_FullAddIdSortie(builder, idSortie)
        if self.legalAlertTime is not None:
            Crew_FullAddLegalAlertTime(builder, legalAlertTime)
        if self.legalBravoTime is not None:
            Crew_FullAddLegalBravoTime(builder, legalBravoTime)
        if self.alertedTime is not None:
            Crew_FullAddAlertedTime(builder, alertedTime)
        if self.returnTime is not None:
            Crew_FullAddReturnTime(builder, returnTime)
        if self.fdpEligType is not None:
            Crew_FullAddFdpEligType(builder, fdpEligType)
        if self.fdpType is not None:
            Crew_FullAddFdpType(builder, fdpType)
        if self.crewType is not None:
            Crew_FullAddCrewType(builder, crewType)
        if self.armsCrewUnit is not None:
            Crew_FullAddArmsCrewUnit(builder, armsCrewUnit)
        if self.crewMembers is not None:
            Crew_FullAddCrewMembers(builder, crewMembers)
        if self.createdAt is not None:
            Crew_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Crew_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Crew_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Crew_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            Crew_FullAddSource(builder, source)
        if self.origin is not None:
            Crew_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Crew_FullAddOrigNetwork(builder, origNetwork)
        Crew_FullAddDataMode(builder, self.dataMode)
        crewFull = Crew_FullEnd(builder)
        return crewFull
