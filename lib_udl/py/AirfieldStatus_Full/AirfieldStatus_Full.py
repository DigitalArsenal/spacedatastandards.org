# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The airfield status contains dynamic data of an airfield's capabilities.
class AirfieldStatus_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirfieldStatus_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirfieldStatus_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirfieldStatus_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x46", size_prefixed=size_prefixed)

    # AirfieldStatus_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirfieldStatus_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirfieldStatus_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Airfield for which this status is referencing.
    # Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirfieldStatus_Full
    def IdAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate airfield identifier provided by the source.
    # Example: /// Example: AIRFIELD-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldStatus_Full
    def AltAirfieldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def PassengerServiceMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def FleetServiceMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def CargoMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
    # Example: /// Example: 9
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def FuelMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
    # Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def FuelTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldStatus_Full
    def FuelTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldStatus_Full
    def FuelTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
    # Example: /// Example: [263083.6, 286674.9, 18143.69]
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def FuelQtys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldStatus_Full
    def FuelQtysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldStatus_Full
    def FuelQtysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def MxMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def OperatingMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of aircraft that are currently on ground (COG) at the airfield.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def NumCog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def WideWorkingMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def WideParkingMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def NarrowWorkingMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def NarrowParkingMog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
    # Example: /// Example: ['30k', 'AT', '60k']
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def MheTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldStatus_Full
    def MheTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldStatus_Full
    def MheTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
    # Example: /// Example: [1, 3, 1]
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def MheQtys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldStatus_Full
    def MheQtysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldStatus_Full
    def MheQtysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # The level of medical support and capabilities available at the airfield.
    # Example: /// Example: Large Field Hospital
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldStatus_Full
    def MedCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
    # Example: /// Example: FAA-A
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldStatus_Full
    def ArffCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def GseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number or ID of primary runway at the airfield.
    # Example: /// Example: 35R
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirfieldStatus_Full
    def PriRwyNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
    # Example: /// Example: 23
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def RwyCondReading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def RwyFrictionFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of markings currently on the primary runway.
    # Example: /// Example: ['Aiming Point', 'Threshold']
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def RwyMarkings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldStatus_Full
    def RwyMarkingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldStatus_Full
    def RwyMarkingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Description of the current status of the airfield.
    # Example: /// Example: Status message about the airfield.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AirfieldStatus_Full
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The primary frequency which the airfield is currently operating, in megahertz.
    # Example: /// Example: 123.45
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def PriFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
    # Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def SlotTypesReq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldStatus_Full
    def SlotTypesReqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldStatus_Full
    def SlotTypesReqIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldStatus_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirfieldStatus_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldStatus_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldStatus_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldStatus_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldStatus_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirfieldStatus_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirfieldStatus_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirfieldStatus_FullStart(builder):
    builder.StartObject(38)

def Start(builder):
    AirfieldStatus_FullStart(builder)

def AirfieldStatus_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirfieldStatus_FullAddId(builder, id)

def AirfieldStatus_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirfieldStatus_FullAddClassificationMarking(builder, classificationMarking)

def AirfieldStatus_FullAddIdAirfield(builder, idAirfield):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idAirfield), 0)

def AddIdAirfield(builder, idAirfield):
    AirfieldStatus_FullAddIdAirfield(builder, idAirfield)

def AirfieldStatus_FullAddAltAirfieldId(builder, altAirfieldId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altAirfieldId), 0)

def AddAltAirfieldId(builder, altAirfieldId):
    AirfieldStatus_FullAddAltAirfieldId(builder, altAirfieldId)

def AirfieldStatus_FullAddPassengerServiceMog(builder, passengerServiceMog):
    builder.PrependInt32Slot(4, passengerServiceMog, 0)

def AddPassengerServiceMog(builder, passengerServiceMog):
    AirfieldStatus_FullAddPassengerServiceMog(builder, passengerServiceMog)

def AirfieldStatus_FullAddFleetServiceMog(builder, fleetServiceMog):
    builder.PrependInt32Slot(5, fleetServiceMog, 0)

def AddFleetServiceMog(builder, fleetServiceMog):
    AirfieldStatus_FullAddFleetServiceMog(builder, fleetServiceMog)

def AirfieldStatus_FullAddCargoMog(builder, cargoMog):
    builder.PrependInt32Slot(6, cargoMog, 0)

def AddCargoMog(builder, cargoMog):
    AirfieldStatus_FullAddCargoMog(builder, cargoMog)

def AirfieldStatus_FullAddFuelMog(builder, fuelMog):
    builder.PrependInt32Slot(7, fuelMog, 0)

def AddFuelMog(builder, fuelMog):
    AirfieldStatus_FullAddFuelMog(builder, fuelMog)

def AirfieldStatus_FullAddFuelTypes(builder, fuelTypes):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(fuelTypes), 0)

def AddFuelTypes(builder, fuelTypes):
    AirfieldStatus_FullAddFuelTypes(builder, fuelTypes)

def AirfieldStatus_FullStartFuelTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFuelTypesVector(builder, numElems):
    return AirfieldStatus_FullStartFuelTypesVector(builder, numElems)

def AirfieldStatus_FullAddFuelQtys(builder, fuelQtys):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(fuelQtys), 0)

def AddFuelQtys(builder, fuelQtys):
    AirfieldStatus_FullAddFuelQtys(builder, fuelQtys)

def AirfieldStatus_FullStartFuelQtysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFuelQtysVector(builder, numElems):
    return AirfieldStatus_FullStartFuelQtysVector(builder, numElems)

def AirfieldStatus_FullAddMxMog(builder, mxMog):
    builder.PrependInt32Slot(10, mxMog, 0)

def AddMxMog(builder, mxMog):
    AirfieldStatus_FullAddMxMog(builder, mxMog)

def AirfieldStatus_FullAddOperatingMog(builder, operatingMog):
    builder.PrependInt32Slot(11, operatingMog, 0)

def AddOperatingMog(builder, operatingMog):
    AirfieldStatus_FullAddOperatingMog(builder, operatingMog)

def AirfieldStatus_FullAddNumCog(builder, numCog):
    builder.PrependInt32Slot(12, numCog, 0)

def AddNumCog(builder, numCog):
    AirfieldStatus_FullAddNumCog(builder, numCog)

def AirfieldStatus_FullAddWideWorkingMog(builder, wideWorkingMog):
    builder.PrependInt32Slot(13, wideWorkingMog, 0)

def AddWideWorkingMog(builder, wideWorkingMog):
    AirfieldStatus_FullAddWideWorkingMog(builder, wideWorkingMog)

def AirfieldStatus_FullAddWideParkingMog(builder, wideParkingMog):
    builder.PrependInt32Slot(14, wideParkingMog, 0)

def AddWideParkingMog(builder, wideParkingMog):
    AirfieldStatus_FullAddWideParkingMog(builder, wideParkingMog)

def AirfieldStatus_FullAddNarrowWorkingMog(builder, narrowWorkingMog):
    builder.PrependInt32Slot(15, narrowWorkingMog, 0)

def AddNarrowWorkingMog(builder, narrowWorkingMog):
    AirfieldStatus_FullAddNarrowWorkingMog(builder, narrowWorkingMog)

def AirfieldStatus_FullAddNarrowParkingMog(builder, narrowParkingMog):
    builder.PrependInt32Slot(16, narrowParkingMog, 0)

def AddNarrowParkingMog(builder, narrowParkingMog):
    AirfieldStatus_FullAddNarrowParkingMog(builder, narrowParkingMog)

def AirfieldStatus_FullAddMheTypes(builder, mheTypes):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(mheTypes), 0)

def AddMheTypes(builder, mheTypes):
    AirfieldStatus_FullAddMheTypes(builder, mheTypes)

def AirfieldStatus_FullStartMheTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMheTypesVector(builder, numElems):
    return AirfieldStatus_FullStartMheTypesVector(builder, numElems)

def AirfieldStatus_FullAddMheQtys(builder, mheQtys):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(mheQtys), 0)

def AddMheQtys(builder, mheQtys):
    AirfieldStatus_FullAddMheQtys(builder, mheQtys)

def AirfieldStatus_FullStartMheQtysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMheQtysVector(builder, numElems):
    return AirfieldStatus_FullStartMheQtysVector(builder, numElems)

def AirfieldStatus_FullAddMedCap(builder, medCap):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(medCap), 0)

def AddMedCap(builder, medCap):
    AirfieldStatus_FullAddMedCap(builder, medCap)

def AirfieldStatus_FullAddArffCat(builder, arffCat):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(arffCat), 0)

def AddArffCat(builder, arffCat):
    AirfieldStatus_FullAddArffCat(builder, arffCat)

def AirfieldStatus_FullAddGseTime(builder, gseTime):
    builder.PrependInt32Slot(21, gseTime, 0)

def AddGseTime(builder, gseTime):
    AirfieldStatus_FullAddGseTime(builder, gseTime)

def AirfieldStatus_FullAddPriRwyNum(builder, priRwyNum):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(priRwyNum), 0)

def AddPriRwyNum(builder, priRwyNum):
    AirfieldStatus_FullAddPriRwyNum(builder, priRwyNum)

def AirfieldStatus_FullAddRwyCondReading(builder, rwyCondReading):
    builder.PrependInt32Slot(23, rwyCondReading, 0)

def AddRwyCondReading(builder, rwyCondReading):
    AirfieldStatus_FullAddRwyCondReading(builder, rwyCondReading)

def AirfieldStatus_FullAddRwyFrictionFactor(builder, rwyFrictionFactor):
    builder.PrependInt32Slot(24, rwyFrictionFactor, 0)

def AddRwyFrictionFactor(builder, rwyFrictionFactor):
    AirfieldStatus_FullAddRwyFrictionFactor(builder, rwyFrictionFactor)

def AirfieldStatus_FullAddRwyMarkings(builder, rwyMarkings):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(rwyMarkings), 0)

def AddRwyMarkings(builder, rwyMarkings):
    AirfieldStatus_FullAddRwyMarkings(builder, rwyMarkings)

def AirfieldStatus_FullStartRwyMarkingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRwyMarkingsVector(builder, numElems):
    return AirfieldStatus_FullStartRwyMarkingsVector(builder, numElems)

def AirfieldStatus_FullAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)

def AddMessage(builder, message):
    AirfieldStatus_FullAddMessage(builder, message)

def AirfieldStatus_FullAddPriFreq(builder, priFreq):
    builder.PrependFloat64Slot(27, priFreq, 0.0)

def AddPriFreq(builder, priFreq):
    AirfieldStatus_FullAddPriFreq(builder, priFreq)

def AirfieldStatus_FullAddSlotTypesReq(builder, slotTypesReq):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(slotTypesReq), 0)

def AddSlotTypesReq(builder, slotTypesReq):
    AirfieldStatus_FullAddSlotTypesReq(builder, slotTypesReq)

def AirfieldStatus_FullStartSlotTypesReqVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSlotTypesReqVector(builder, numElems):
    return AirfieldStatus_FullStartSlotTypesReqVector(builder, numElems)

def AirfieldStatus_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirfieldStatus_FullAddCreatedAt(builder, createdAt)

def AirfieldStatus_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirfieldStatus_FullAddCreatedBy(builder, createdBy)

def AirfieldStatus_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AirfieldStatus_FullAddUpdatedAt(builder, updatedAt)

def AirfieldStatus_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AirfieldStatus_FullAddUpdatedBy(builder, updatedBy)

def AirfieldStatus_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirfieldStatus_FullAddSourceDl(builder, sourceDl)

def AirfieldStatus_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirfieldStatus_FullAddSource(builder, source)

def AirfieldStatus_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirfieldStatus_FullAddOrigin(builder, origin)

def AirfieldStatus_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirfieldStatus_FullAddOrigNetwork(builder, origNetwork)

def AirfieldStatus_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(37, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirfieldStatus_FullAddDataMode(builder, dataMode)

def AirfieldStatus_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirfieldStatus_FullEnd(builder)

try:
    from typing import List
except:
    pass

class AirfieldStatus_FullT(object):

    # AirfieldStatus_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idAirfield = None  # type: str
        self.altAirfieldId = None  # type: str
        self.passengerServiceMog = 0  # type: int
        self.fleetServiceMog = 0  # type: int
        self.cargoMog = 0  # type: int
        self.fuelMog = 0  # type: int
        self.fuelTypes = None  # type: List[str]
        self.fuelQtys = None  # type: List[str]
        self.mxMog = 0  # type: int
        self.operatingMog = 0  # type: int
        self.numCog = 0  # type: int
        self.wideWorkingMog = 0  # type: int
        self.wideParkingMog = 0  # type: int
        self.narrowWorkingMog = 0  # type: int
        self.narrowParkingMog = 0  # type: int
        self.mheTypes = None  # type: List[str]
        self.mheQtys = None  # type: List[str]
        self.medCap = None  # type: str
        self.arffCat = None  # type: str
        self.gseTime = 0  # type: int
        self.priRwyNum = None  # type: str
        self.rwyCondReading = 0  # type: int
        self.rwyFrictionFactor = 0  # type: int
        self.rwyMarkings = None  # type: List[str]
        self.message = None  # type: str
        self.priFreq = 0.0  # type: float
        self.slotTypesReq = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airfieldStatusFull = AirfieldStatus_Full()
        airfieldStatusFull.Init(buf, pos)
        return cls.InitFromObj(airfieldStatusFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airfieldStatusFull):
        x = AirfieldStatus_FullT()
        x._UnPack(airfieldStatusFull)
        return x

    # AirfieldStatus_FullT
    def _UnPack(self, airfieldStatusFull):
        if airfieldStatusFull is None:
            return
        self.id = airfieldStatusFull.Id()
        self.classificationMarking = airfieldStatusFull.ClassificationMarking()
        self.idAirfield = airfieldStatusFull.IdAirfield()
        self.altAirfieldId = airfieldStatusFull.AltAirfieldId()
        self.passengerServiceMog = airfieldStatusFull.PassengerServiceMog()
        self.fleetServiceMog = airfieldStatusFull.FleetServiceMog()
        self.cargoMog = airfieldStatusFull.CargoMog()
        self.fuelMog = airfieldStatusFull.FuelMog()
        if not airfieldStatusFull.FuelTypesIsNone():
            self.fuelTypes = []
            for i in range(airfieldStatusFull.FuelTypesLength()):
                self.fuelTypes.append(airfieldStatusFull.FuelTypes(i))
        if not airfieldStatusFull.FuelQtysIsNone():
            self.fuelQtys = []
            for i in range(airfieldStatusFull.FuelQtysLength()):
                self.fuelQtys.append(airfieldStatusFull.FuelQtys(i))
        self.mxMog = airfieldStatusFull.MxMog()
        self.operatingMog = airfieldStatusFull.OperatingMog()
        self.numCog = airfieldStatusFull.NumCog()
        self.wideWorkingMog = airfieldStatusFull.WideWorkingMog()
        self.wideParkingMog = airfieldStatusFull.WideParkingMog()
        self.narrowWorkingMog = airfieldStatusFull.NarrowWorkingMog()
        self.narrowParkingMog = airfieldStatusFull.NarrowParkingMog()
        if not airfieldStatusFull.MheTypesIsNone():
            self.mheTypes = []
            for i in range(airfieldStatusFull.MheTypesLength()):
                self.mheTypes.append(airfieldStatusFull.MheTypes(i))
        if not airfieldStatusFull.MheQtysIsNone():
            self.mheQtys = []
            for i in range(airfieldStatusFull.MheQtysLength()):
                self.mheQtys.append(airfieldStatusFull.MheQtys(i))
        self.medCap = airfieldStatusFull.MedCap()
        self.arffCat = airfieldStatusFull.ArffCat()
        self.gseTime = airfieldStatusFull.GseTime()
        self.priRwyNum = airfieldStatusFull.PriRwyNum()
        self.rwyCondReading = airfieldStatusFull.RwyCondReading()
        self.rwyFrictionFactor = airfieldStatusFull.RwyFrictionFactor()
        if not airfieldStatusFull.RwyMarkingsIsNone():
            self.rwyMarkings = []
            for i in range(airfieldStatusFull.RwyMarkingsLength()):
                self.rwyMarkings.append(airfieldStatusFull.RwyMarkings(i))
        self.message = airfieldStatusFull.Message()
        self.priFreq = airfieldStatusFull.PriFreq()
        if not airfieldStatusFull.SlotTypesReqIsNone():
            self.slotTypesReq = []
            for i in range(airfieldStatusFull.SlotTypesReqLength()):
                self.slotTypesReq.append(airfieldStatusFull.SlotTypesReq(i))
        self.createdAt = airfieldStatusFull.CreatedAt()
        self.createdBy = airfieldStatusFull.CreatedBy()
        self.updatedAt = airfieldStatusFull.UpdatedAt()
        self.updatedBy = airfieldStatusFull.UpdatedBy()
        self.sourceDl = airfieldStatusFull.SourceDl()
        self.source = airfieldStatusFull.Source()
        self.origin = airfieldStatusFull.Origin()
        self.origNetwork = airfieldStatusFull.OrigNetwork()
        self.dataMode = airfieldStatusFull.DataMode()

    # AirfieldStatus_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idAirfield is not None:
            idAirfield = builder.CreateString(self.idAirfield)
        if self.altAirfieldId is not None:
            altAirfieldId = builder.CreateString(self.altAirfieldId)
        if self.fuelTypes is not None:
            fuelTypeslist = []
            for i in range(len(self.fuelTypes)):
                fuelTypeslist.append(builder.CreateString(self.fuelTypes[i]))
            AirfieldStatus_FullStartFuelTypesVector(builder, len(self.fuelTypes))
            for i in reversed(range(len(self.fuelTypes))):
                builder.PrependUOffsetTRelative(fuelTypeslist[i])
            fuelTypes = builder.EndVector()
        if self.fuelQtys is not None:
            fuelQtyslist = []
            for i in range(len(self.fuelQtys)):
                fuelQtyslist.append(builder.CreateString(self.fuelQtys[i]))
            AirfieldStatus_FullStartFuelQtysVector(builder, len(self.fuelQtys))
            for i in reversed(range(len(self.fuelQtys))):
                builder.PrependUOffsetTRelative(fuelQtyslist[i])
            fuelQtys = builder.EndVector()
        if self.mheTypes is not None:
            mheTypeslist = []
            for i in range(len(self.mheTypes)):
                mheTypeslist.append(builder.CreateString(self.mheTypes[i]))
            AirfieldStatus_FullStartMheTypesVector(builder, len(self.mheTypes))
            for i in reversed(range(len(self.mheTypes))):
                builder.PrependUOffsetTRelative(mheTypeslist[i])
            mheTypes = builder.EndVector()
        if self.mheQtys is not None:
            mheQtyslist = []
            for i in range(len(self.mheQtys)):
                mheQtyslist.append(builder.CreateString(self.mheQtys[i]))
            AirfieldStatus_FullStartMheQtysVector(builder, len(self.mheQtys))
            for i in reversed(range(len(self.mheQtys))):
                builder.PrependUOffsetTRelative(mheQtyslist[i])
            mheQtys = builder.EndVector()
        if self.medCap is not None:
            medCap = builder.CreateString(self.medCap)
        if self.arffCat is not None:
            arffCat = builder.CreateString(self.arffCat)
        if self.priRwyNum is not None:
            priRwyNum = builder.CreateString(self.priRwyNum)
        if self.rwyMarkings is not None:
            rwyMarkingslist = []
            for i in range(len(self.rwyMarkings)):
                rwyMarkingslist.append(builder.CreateString(self.rwyMarkings[i]))
            AirfieldStatus_FullStartRwyMarkingsVector(builder, len(self.rwyMarkings))
            for i in reversed(range(len(self.rwyMarkings))):
                builder.PrependUOffsetTRelative(rwyMarkingslist[i])
            rwyMarkings = builder.EndVector()
        if self.message is not None:
            message = builder.CreateString(self.message)
        if self.slotTypesReq is not None:
            slotTypesReqlist = []
            for i in range(len(self.slotTypesReq)):
                slotTypesReqlist.append(builder.CreateString(self.slotTypesReq[i]))
            AirfieldStatus_FullStartSlotTypesReqVector(builder, len(self.slotTypesReq))
            for i in reversed(range(len(self.slotTypesReq))):
                builder.PrependUOffsetTRelative(slotTypesReqlist[i])
            slotTypesReq = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirfieldStatus_FullStart(builder)
        if self.id is not None:
            AirfieldStatus_FullAddId(builder, id)
        if self.classificationMarking is not None:
            AirfieldStatus_FullAddClassificationMarking(builder, classificationMarking)
        if self.idAirfield is not None:
            AirfieldStatus_FullAddIdAirfield(builder, idAirfield)
        if self.altAirfieldId is not None:
            AirfieldStatus_FullAddAltAirfieldId(builder, altAirfieldId)
        AirfieldStatus_FullAddPassengerServiceMog(builder, self.passengerServiceMog)
        AirfieldStatus_FullAddFleetServiceMog(builder, self.fleetServiceMog)
        AirfieldStatus_FullAddCargoMog(builder, self.cargoMog)
        AirfieldStatus_FullAddFuelMog(builder, self.fuelMog)
        if self.fuelTypes is not None:
            AirfieldStatus_FullAddFuelTypes(builder, fuelTypes)
        if self.fuelQtys is not None:
            AirfieldStatus_FullAddFuelQtys(builder, fuelQtys)
        AirfieldStatus_FullAddMxMog(builder, self.mxMog)
        AirfieldStatus_FullAddOperatingMog(builder, self.operatingMog)
        AirfieldStatus_FullAddNumCog(builder, self.numCog)
        AirfieldStatus_FullAddWideWorkingMog(builder, self.wideWorkingMog)
        AirfieldStatus_FullAddWideParkingMog(builder, self.wideParkingMog)
        AirfieldStatus_FullAddNarrowWorkingMog(builder, self.narrowWorkingMog)
        AirfieldStatus_FullAddNarrowParkingMog(builder, self.narrowParkingMog)
        if self.mheTypes is not None:
            AirfieldStatus_FullAddMheTypes(builder, mheTypes)
        if self.mheQtys is not None:
            AirfieldStatus_FullAddMheQtys(builder, mheQtys)
        if self.medCap is not None:
            AirfieldStatus_FullAddMedCap(builder, medCap)
        if self.arffCat is not None:
            AirfieldStatus_FullAddArffCat(builder, arffCat)
        AirfieldStatus_FullAddGseTime(builder, self.gseTime)
        if self.priRwyNum is not None:
            AirfieldStatus_FullAddPriRwyNum(builder, priRwyNum)
        AirfieldStatus_FullAddRwyCondReading(builder, self.rwyCondReading)
        AirfieldStatus_FullAddRwyFrictionFactor(builder, self.rwyFrictionFactor)
        if self.rwyMarkings is not None:
            AirfieldStatus_FullAddRwyMarkings(builder, rwyMarkings)
        if self.message is not None:
            AirfieldStatus_FullAddMessage(builder, message)
        AirfieldStatus_FullAddPriFreq(builder, self.priFreq)
        if self.slotTypesReq is not None:
            AirfieldStatus_FullAddSlotTypesReq(builder, slotTypesReq)
        if self.createdAt is not None:
            AirfieldStatus_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirfieldStatus_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AirfieldStatus_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AirfieldStatus_FullAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            AirfieldStatus_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirfieldStatus_FullAddSource(builder, source)
        if self.origin is not None:
            AirfieldStatus_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirfieldStatus_FullAddOrigNetwork(builder, origNetwork)
        AirfieldStatus_FullAddDataMode(builder, self.dataMode)
        airfieldStatusFull = AirfieldStatus_FullEnd(builder)
        return airfieldStatusFull
