# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Scientific or other data from Seradata.
class Scientific_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Scientific_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScientific_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Scientific_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x43\x49\x45", size_prefixed=size_prefixed)

    # Scientific_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SCIENTIFIC-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Scientific_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Scientific_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: REF-SPACECRAFT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Scientific_Full
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hosted for company/Organization Id.
    # Example: /// Example: REF-HOSTEDFORCOMPANYORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Scientific_Full
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization which manufactures this bus.
    # Example: /// Example: REF-MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Scientific_Full
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Payload category, e.g. Magnetometer, Radiometer, Sensor, etc.
    # Example: /// Example: Sensor
    # Constraints: Minimum length = 0, Maximum length = 50
    # Scientific_Full
    def PayloadCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor name from sera data, e.g. SEM/MAG (SEM / Magnetometer).
    # Example: /// Example: SEM/MAG
    # Constraints: Minimum length = 1, Maximum length = 128
    # Scientific_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Frequency band, e.g. Gamma.
    # Example: /// Example: Gamma
    # Constraints: Minimum length = 0, Maximum length = 50
    # Scientific_Full
    def FrequencyBand(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes associated with the payload.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 256
    # Scientific_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Scientific_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Scientific_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Scientific_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Scientific_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Scientific_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Scientific_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Scientific_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Scientific_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ID of the parent entity for this Scientific.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 0, Maximum length = 36
    # Scientific_Full
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Scientific_Full
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Scientific_FullStart(builder):
    builder.StartObject(19)

def Start(builder):
    Scientific_FullStart(builder)

def Scientific_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Scientific_FullAddId(builder, id)

def Scientific_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Scientific_FullAddClassificationMarking(builder, classificationMarking)

def Scientific_FullAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    Scientific_FullAddSpacecraftId(builder, spacecraftId)

def Scientific_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    Scientific_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def Scientific_FullAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    Scientific_FullAddManufacturerOrgId(builder, manufacturerOrgId)

def Scientific_FullAddPayloadCategory(builder, payloadCategory):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(payloadCategory), 0)

def AddPayloadCategory(builder, payloadCategory):
    Scientific_FullAddPayloadCategory(builder, payloadCategory)

def Scientific_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Scientific_FullAddName(builder, name)

def Scientific_FullAddFrequencyBand(builder, frequencyBand):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(frequencyBand), 0)

def AddFrequencyBand(builder, frequencyBand):
    Scientific_FullAddFrequencyBand(builder, frequencyBand)

def Scientific_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Scientific_FullAddNotes(builder, notes)

def Scientific_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Scientific_FullAddCreatedAt(builder, createdAt)

def Scientific_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Scientific_FullAddCreatedBy(builder, createdBy)

def Scientific_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Scientific_FullAddUpdatedAt(builder, updatedAt)

def Scientific_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Scientific_FullAddUpdatedBy(builder, updatedBy)

def Scientific_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Scientific_FullAddSource(builder, source)

def Scientific_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Scientific_FullAddOrigin(builder, origin)

def Scientific_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Scientific_FullAddOrigNetwork(builder, origNetwork)

def Scientific_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(16, dataMode, 0)

def AddDataMode(builder, dataMode):
    Scientific_FullAddDataMode(builder, dataMode)

def Scientific_FullAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Scientific_FullAddIdEntity(builder, idEntity)

def Scientific_FullAddEntity(builder, entity):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)

def AddEntity(builder, entity):
    Scientific_FullAddEntity(builder, entity)

def Scientific_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Scientific_FullEnd(builder)


class Scientific_FullT(object):

    # Scientific_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.spacecraftId = None  # type: str
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.payloadCategory = None  # type: str
        self.name = None  # type: str
        self.frequencyBand = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.idEntity = None  # type: str
        self.entity = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scientificFull = Scientific_Full()
        scientificFull.Init(buf, pos)
        return cls.InitFromObj(scientificFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scientificFull):
        x = Scientific_FullT()
        x._UnPack(scientificFull)
        return x

    # Scientific_FullT
    def _UnPack(self, scientificFull):
        if scientificFull is None:
            return
        self.id = scientificFull.Id()
        self.classificationMarking = scientificFull.ClassificationMarking()
        self.spacecraftId = scientificFull.SpacecraftId()
        self.hostedForCompanyOrgId = scientificFull.HostedForCompanyOrgId()
        self.manufacturerOrgId = scientificFull.ManufacturerOrgId()
        self.payloadCategory = scientificFull.PayloadCategory()
        self.name = scientificFull.Name()
        self.frequencyBand = scientificFull.FrequencyBand()
        self.notes = scientificFull.Notes()
        self.createdAt = scientificFull.CreatedAt()
        self.createdBy = scientificFull.CreatedBy()
        self.updatedAt = scientificFull.UpdatedAt()
        self.updatedBy = scientificFull.UpdatedBy()
        self.source = scientificFull.Source()
        self.origin = scientificFull.Origin()
        self.origNetwork = scientificFull.OrigNetwork()
        self.dataMode = scientificFull.DataMode()
        self.idEntity = scientificFull.IdEntity()
        self.entity = scientificFull.Entity()

    # Scientific_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.payloadCategory is not None:
            payloadCategory = builder.CreateString(self.payloadCategory)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.frequencyBand is not None:
            frequencyBand = builder.CreateString(self.frequencyBand)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        Scientific_FullStart(builder)
        if self.id is not None:
            Scientific_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Scientific_FullAddClassificationMarking(builder, classificationMarking)
        if self.spacecraftId is not None:
            Scientific_FullAddSpacecraftId(builder, spacecraftId)
        if self.hostedForCompanyOrgId is not None:
            Scientific_FullAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            Scientific_FullAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.payloadCategory is not None:
            Scientific_FullAddPayloadCategory(builder, payloadCategory)
        if self.name is not None:
            Scientific_FullAddName(builder, name)
        if self.frequencyBand is not None:
            Scientific_FullAddFrequencyBand(builder, frequencyBand)
        if self.notes is not None:
            Scientific_FullAddNotes(builder, notes)
        if self.createdAt is not None:
            Scientific_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Scientific_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Scientific_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Scientific_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            Scientific_FullAddSource(builder, source)
        if self.origin is not None:
            Scientific_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Scientific_FullAddOrigNetwork(builder, origNetwork)
        Scientific_FullAddDataMode(builder, self.dataMode)
        if self.idEntity is not None:
            Scientific_FullAddIdEntity(builder, idEntity)
        if self.entity is not None:
            Scientific_FullAddEntity(builder, entity)
        scientificFull = Scientific_FullEnd(builder)
        return scientificFull
