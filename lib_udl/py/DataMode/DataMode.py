# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class DataMode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataMode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataMode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataModeBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataMode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def DataModeStart(builder):
    builder.StartObject(0)

def Start(builder):
    DataModeStart(builder)

def DataModeEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataModeEnd(builder)


class DataModeT(object):

    # DataModeT
    def __init__(self):
        pass

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataMode = DataMode()
        dataMode.Init(buf, pos)
        return cls.InitFromObj(dataMode)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataMode):
        x = DataModeT()
        x._UnPack(dataMode)
        return x

    # DataModeT
    def _UnPack(self, dataMode):
        if dataMode is None:
            return

    # DataModeT
    def Pack(self, builder):
        DataModeStart(builder)
        dataMode = DataModeEnd(builder)
        return dataMode
