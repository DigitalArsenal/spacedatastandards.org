# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class SARObservation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SARObservation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSARObservation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SARObservation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x41\x52\x4F", size_prefixed=size_prefixed)

    # SARObservation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SAROBSERVATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SARObservation_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SARObservation_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the spacecraft hosting the sensor associated with this collection.
    # Example: /// Example: 36036
    # Constraints: Minimum length = 0, Maximum length = 36
    # SARObservation_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
    # Example: /// Example: 36036
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: 36036
    # Constraints: Minimum length = 0, Maximum length = 64
    # SARObservation_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: 36036-1L
    # Constraints: Minimum length = 0, Maximum length = 36
    # SARObservation_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: SMOS-1L
    # Constraints: Minimum length = 0, Maximum length = 64
    # SARObservation_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: EXTERNAL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SARObservation_Ingest
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to indicate the specific collection tasking which produced this observation.
    # Example: /// Example: COLLECTION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SARObservation_Ingest
    def CollectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the specific detection within a collection which produced this observation.
    # Example: /// Example: DETECTION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SARObservation_Ingest
    def DetectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection start time in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2023-04-22T17:35:00.123456Z
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def CollectionStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection end time in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2023-04-22T17:38:10.20177Z
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def CollectionEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2023-04-22T17:36:35.100885Z
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def CenterTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The detection start time in ISO 8601 UTC format, with microsecond precision.
    # Example: /// Example: 2023-07-08T17:35:01.615396Z
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def DetectionStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The detection end time in ISO 8601 UTC format, with microsecond precision.
    # Example: /// Example: 2023-07-08T17:35:20.77219Z
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def DetectionEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The duration, in seconds, of this detection.
    # Example: /// Example: 79.156794
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def DwellTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
    # Example: /// Example: ASCENDING
    # Constraints: Minimum length = 0, Maximum length = 16
    # SARObservation_Ingest
    def OrbitState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
    # Example: /// Example: SPOTLIGHT
    # Constraints: Minimum length = 1, Maximum length = 36
    # SARObservation_Ingest
    def SarMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
    # Example: /// Example: L
    # Constraints: Minimum length = 0, Maximum length = 5
    # SARObservation_Ingest
    def OperatingBand(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The operating frequency, in Mhz, for the collection.
    # Example: /// Example: 2345.6
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def OperatingFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    # Example: /// Example: H
    # Constraints: Minimum length = 0, Maximum length = 4
    # SARObservation_Ingest
    def TxPolarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
    # Example: /// Example: H
    # Constraints: Minimum length = 0, Maximum length = 4
    # SARObservation_Ingest
    def RxPolarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The graze angle (also referred to as look angle) for the collection in degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def GrazeAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The center incidence angle in degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def IncidenceAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The squint angle for the collection in degrees.
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SquintAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The bandwidth frequency of the pulse in Mhz.
    # Example: /// Example: 500.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def PulseBandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The duration of a pulse in seconds.
    # Example: /// Example: 1.1e-05
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def PulseDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Required sweep angle for the continuous spot scene in degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def ContinuousSpotAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Slant distance from sensor to center point of imaging event in kilometers.
    # Example: /// Example: 60.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SlantRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Specifies the closest range, in kilometers, from the flight path to target during the collection.
    # Example: /// Example: 12.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def NearRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Specifies the farthest range, in kilometers, from the flight path to target during the collection.
    # Example: /// Example: 34.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def FarRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The length of the collection as projected on the ground in kilometers.
    # Example: /// Example: 12.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SwathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground (POLYGON, POINT, LINE).
    # Example: /// Example: POLYGON
    # Constraints: Minimum length = 0, Maximum length = 128
    # SARObservation_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The pixel spacing in the range direction measured in meters.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SpacingRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The pixel spacing in the azimuth direction measured in meters.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SpacingAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of looks in the azimuth direction.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def LooksAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of looks in the range direction.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def LooksRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The resolution in the range direction measured in meters.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def ResolutionRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The resolution in the azimuth direction measured in meters.
    # Example: /// Example: 0.123
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def ResolutionAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The antenna pointing direction (LEFT, RIGHT).
    # Example: /// Example: RIGHT
    # Constraints: Minimum length = 0, Maximum length = 16
    # SARObservation_Ingest
    def ObDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The coordinate system used for the sensor velocity and target position vectors for the collection.
    # Example: /// Example: ECEF
    # Constraints: Minimum length = 0, Maximum length = 16
    # SARObservation_Ingest
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The collection target X position in kilometers.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Targetposx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The collection target Y position in kilometers.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Targetposy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The collection target Z position in kilometers.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Targetposz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude during collection in kilometers.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor platform X-velocity during collection in kilometers/second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Senvelx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor platform Y-velocity during collection in kilometers/second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Senvely(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor platform Z-velocity during collection in kilometers/second.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Senvelz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SenlatStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SenlonStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SenlatEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SenlonEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SARObservation_Ingest
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SARObservation_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SARObservation_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        return o == 0

    # Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['ESID', 'GROUNDIMAGE']
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SARObservation_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SARObservation_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        return o == 0

    # Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
    # Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SARObservation_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SARObservation_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2023-04-22T17:51:40.854Z
    # Constraints: No constraints specified.
    # SARObservation_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SARObservation_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SARObservation_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SARObservation_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # SARObservation_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SARObservation_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SARObservation_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SARObservation_IngestStart(builder):
    builder.StartObject(69)

def Start(builder):
    SARObservation_IngestStart(builder)

def SARObservation_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SARObservation_IngestAddId(builder, id)

def SARObservation_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SARObservation_IngestAddClassificationMarking(builder, classificationMarking)

def SARObservation_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    SARObservation_IngestAddIdOnOrbit(builder, idOnOrbit)

def SARObservation_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    SARObservation_IngestAddSatNo(builder, satNo)

def SARObservation_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    SARObservation_IngestAddOrigObjectId(builder, origObjectId)

def SARObservation_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SARObservation_IngestAddIdSensor(builder, idSensor)

def SARObservation_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SARObservation_IngestAddOrigSensorId(builder, origSensorId)

def SARObservation_IngestAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    SARObservation_IngestAddExternalId(builder, externalId)

def SARObservation_IngestAddCollectionId(builder, collectionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(collectionId), 0)

def AddCollectionId(builder, collectionId):
    SARObservation_IngestAddCollectionId(builder, collectionId)

def SARObservation_IngestAddDetectionId(builder, detectionId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(detectionId), 0)

def AddDetectionId(builder, detectionId):
    SARObservation_IngestAddDetectionId(builder, detectionId)

def SARObservation_IngestAddCollectionStart(builder, collectionStart):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(collectionStart), 0)

def AddCollectionStart(builder, collectionStart):
    SARObservation_IngestAddCollectionStart(builder, collectionStart)

def SARObservation_IngestAddCollectionEnd(builder, collectionEnd):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(collectionEnd), 0)

def AddCollectionEnd(builder, collectionEnd):
    SARObservation_IngestAddCollectionEnd(builder, collectionEnd)

def SARObservation_IngestAddCenterTime(builder, centerTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(centerTime), 0)

def AddCenterTime(builder, centerTime):
    SARObservation_IngestAddCenterTime(builder, centerTime)

def SARObservation_IngestAddDetectionStart(builder, detectionStart):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(detectionStart), 0)

def AddDetectionStart(builder, detectionStart):
    SARObservation_IngestAddDetectionStart(builder, detectionStart)

def SARObservation_IngestAddDetectionEnd(builder, detectionEnd):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(detectionEnd), 0)

def AddDetectionEnd(builder, detectionEnd):
    SARObservation_IngestAddDetectionEnd(builder, detectionEnd)

def SARObservation_IngestAddDwellTime(builder, dwellTime):
    builder.PrependFloat64Slot(15, dwellTime, 0.0)

def AddDwellTime(builder, dwellTime):
    SARObservation_IngestAddDwellTime(builder, dwellTime)

def SARObservation_IngestAddOrbitState(builder, orbitState):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(orbitState), 0)

def AddOrbitState(builder, orbitState):
    SARObservation_IngestAddOrbitState(builder, orbitState)

def SARObservation_IngestAddSarMode(builder, sarMode):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(sarMode), 0)

def AddSarMode(builder, sarMode):
    SARObservation_IngestAddSarMode(builder, sarMode)

def SARObservation_IngestAddOperatingBand(builder, operatingBand):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(operatingBand), 0)

def AddOperatingBand(builder, operatingBand):
    SARObservation_IngestAddOperatingBand(builder, operatingBand)

def SARObservation_IngestAddOperatingFreq(builder, operatingFreq):
    builder.PrependFloat64Slot(19, operatingFreq, 0.0)

def AddOperatingFreq(builder, operatingFreq):
    SARObservation_IngestAddOperatingFreq(builder, operatingFreq)

def SARObservation_IngestAddSnr(builder, snr):
    builder.PrependFloat64Slot(20, snr, 0.0)

def AddSnr(builder, snr):
    SARObservation_IngestAddSnr(builder, snr)

def SARObservation_IngestAddTxPolarization(builder, txPolarization):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(txPolarization), 0)

def AddTxPolarization(builder, txPolarization):
    SARObservation_IngestAddTxPolarization(builder, txPolarization)

def SARObservation_IngestAddRxPolarization(builder, rxPolarization):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(rxPolarization), 0)

def AddRxPolarization(builder, rxPolarization):
    SARObservation_IngestAddRxPolarization(builder, rxPolarization)

def SARObservation_IngestAddGrazeAngle(builder, grazeAngle):
    builder.PrependFloat64Slot(23, grazeAngle, 0.0)

def AddGrazeAngle(builder, grazeAngle):
    SARObservation_IngestAddGrazeAngle(builder, grazeAngle)

def SARObservation_IngestAddIncidenceAngle(builder, incidenceAngle):
    builder.PrependFloat64Slot(24, incidenceAngle, 0.0)

def AddIncidenceAngle(builder, incidenceAngle):
    SARObservation_IngestAddIncidenceAngle(builder, incidenceAngle)

def SARObservation_IngestAddSquintAngle(builder, squintAngle):
    builder.PrependFloat64Slot(25, squintAngle, 0.0)

def AddSquintAngle(builder, squintAngle):
    SARObservation_IngestAddSquintAngle(builder, squintAngle)

def SARObservation_IngestAddPulseBandwidth(builder, pulseBandwidth):
    builder.PrependFloat64Slot(26, pulseBandwidth, 0.0)

def AddPulseBandwidth(builder, pulseBandwidth):
    SARObservation_IngestAddPulseBandwidth(builder, pulseBandwidth)

def SARObservation_IngestAddPulseDuration(builder, pulseDuration):
    builder.PrependFloat64Slot(27, pulseDuration, 0.0)

def AddPulseDuration(builder, pulseDuration):
    SARObservation_IngestAddPulseDuration(builder, pulseDuration)

def SARObservation_IngestAddContinuousSpotAngle(builder, continuousSpotAngle):
    builder.PrependFloat64Slot(28, continuousSpotAngle, 0.0)

def AddContinuousSpotAngle(builder, continuousSpotAngle):
    SARObservation_IngestAddContinuousSpotAngle(builder, continuousSpotAngle)

def SARObservation_IngestAddSlantRange(builder, slantRange):
    builder.PrependFloat64Slot(29, slantRange, 0.0)

def AddSlantRange(builder, slantRange):
    SARObservation_IngestAddSlantRange(builder, slantRange)

def SARObservation_IngestAddNearRange(builder, nearRange):
    builder.PrependFloat64Slot(30, nearRange, 0.0)

def AddNearRange(builder, nearRange):
    SARObservation_IngestAddNearRange(builder, nearRange)

def SARObservation_IngestAddFarRange(builder, farRange):
    builder.PrependFloat64Slot(31, farRange, 0.0)

def AddFarRange(builder, farRange):
    SARObservation_IngestAddFarRange(builder, farRange)

def SARObservation_IngestAddSwathLength(builder, swathLength):
    builder.PrependFloat64Slot(32, swathLength, 0.0)

def AddSwathLength(builder, swathLength):
    SARObservation_IngestAddSwathLength(builder, swathLength)

def SARObservation_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    SARObservation_IngestAddArea(builder, area)

def SARObservation_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    SARObservation_IngestAddAtext(builder, atext)

def SARObservation_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    SARObservation_IngestAddAgjson(builder, agjson)

def SARObservation_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    SARObservation_IngestAddAtype(builder, atype)

def SARObservation_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(37, andims, 0)

def AddAndims(builder, andims):
    SARObservation_IngestAddAndims(builder, andims)

def SARObservation_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(38, asrid, 0)

def AddAsrid(builder, asrid):
    SARObservation_IngestAddAsrid(builder, asrid)

def SARObservation_IngestAddSpacingRange(builder, spacingRange):
    builder.PrependFloat64Slot(39, spacingRange, 0.0)

def AddSpacingRange(builder, spacingRange):
    SARObservation_IngestAddSpacingRange(builder, spacingRange)

def SARObservation_IngestAddSpacingAzimuth(builder, spacingAzimuth):
    builder.PrependFloat64Slot(40, spacingAzimuth, 0.0)

def AddSpacingAzimuth(builder, spacingAzimuth):
    SARObservation_IngestAddSpacingAzimuth(builder, spacingAzimuth)

def SARObservation_IngestAddLooksAzimuth(builder, looksAzimuth):
    builder.PrependInt32Slot(41, looksAzimuth, 0)

def AddLooksAzimuth(builder, looksAzimuth):
    SARObservation_IngestAddLooksAzimuth(builder, looksAzimuth)

def SARObservation_IngestAddLooksRange(builder, looksRange):
    builder.PrependInt32Slot(42, looksRange, 0)

def AddLooksRange(builder, looksRange):
    SARObservation_IngestAddLooksRange(builder, looksRange)

def SARObservation_IngestAddResolutionRange(builder, resolutionRange):
    builder.PrependFloat64Slot(43, resolutionRange, 0.0)

def AddResolutionRange(builder, resolutionRange):
    SARObservation_IngestAddResolutionRange(builder, resolutionRange)

def SARObservation_IngestAddResolutionAzimuth(builder, resolutionAzimuth):
    builder.PrependFloat64Slot(44, resolutionAzimuth, 0.0)

def AddResolutionAzimuth(builder, resolutionAzimuth):
    SARObservation_IngestAddResolutionAzimuth(builder, resolutionAzimuth)

def SARObservation_IngestAddObDirection(builder, obDirection):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(obDirection), 0)

def AddObDirection(builder, obDirection):
    SARObservation_IngestAddObDirection(builder, obDirection)

def SARObservation_IngestAddCoordSys(builder, coordSys):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)

def AddCoordSys(builder, coordSys):
    SARObservation_IngestAddCoordSys(builder, coordSys)

def SARObservation_IngestAddTargetposx(builder, targetposx):
    builder.PrependFloat64Slot(47, targetposx, 0.0)

def AddTargetposx(builder, targetposx):
    SARObservation_IngestAddTargetposx(builder, targetposx)

def SARObservation_IngestAddTargetposy(builder, targetposy):
    builder.PrependFloat64Slot(48, targetposy, 0.0)

def AddTargetposy(builder, targetposy):
    SARObservation_IngestAddTargetposy(builder, targetposy)

def SARObservation_IngestAddTargetposz(builder, targetposz):
    builder.PrependFloat64Slot(49, targetposz, 0.0)

def AddTargetposz(builder, targetposz):
    SARObservation_IngestAddTargetposz(builder, targetposz)

def SARObservation_IngestAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(50, senalt, 0.0)

def AddSenalt(builder, senalt):
    SARObservation_IngestAddSenalt(builder, senalt)

def SARObservation_IngestAddSenvelx(builder, senvelx):
    builder.PrependFloat64Slot(51, senvelx, 0.0)

def AddSenvelx(builder, senvelx):
    SARObservation_IngestAddSenvelx(builder, senvelx)

def SARObservation_IngestAddSenvely(builder, senvely):
    builder.PrependFloat64Slot(52, senvely, 0.0)

def AddSenvely(builder, senvely):
    SARObservation_IngestAddSenvely(builder, senvely)

def SARObservation_IngestAddSenvelz(builder, senvelz):
    builder.PrependFloat64Slot(53, senvelz, 0.0)

def AddSenvelz(builder, senvelz):
    SARObservation_IngestAddSenvelz(builder, senvelz)

def SARObservation_IngestAddSenlatStart(builder, senlatStart):
    builder.PrependFloat64Slot(54, senlatStart, 0.0)

def AddSenlatStart(builder, senlatStart):
    SARObservation_IngestAddSenlatStart(builder, senlatStart)

def SARObservation_IngestAddSenlonStart(builder, senlonStart):
    builder.PrependFloat64Slot(55, senlonStart, 0.0)

def AddSenlonStart(builder, senlonStart):
    SARObservation_IngestAddSenlonStart(builder, senlonStart)

def SARObservation_IngestAddSenlatEnd(builder, senlatEnd):
    builder.PrependFloat64Slot(56, senlatEnd, 0.0)

def AddSenlatEnd(builder, senlatEnd):
    SARObservation_IngestAddSenlatEnd(builder, senlatEnd)

def SARObservation_IngestAddSenlonEnd(builder, senlonEnd):
    builder.PrependFloat64Slot(57, senlonEnd, 0.0)

def AddSenlonEnd(builder, senlonEnd):
    SARObservation_IngestAddSenlonEnd(builder, senlonEnd)

def SARObservation_IngestAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    SARObservation_IngestAddTransactionId(builder, transactionId)

def SARObservation_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    SARObservation_IngestAddTags(builder, tags)

def SARObservation_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return SARObservation_IngestStartTagsVector(builder, numElems)

def SARObservation_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    SARObservation_IngestAddSrcTyps(builder, srcTyps)

def SARObservation_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return SARObservation_IngestStartSrcTypsVector(builder, numElems)

def SARObservation_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    SARObservation_IngestAddSrcIds(builder, srcIds)

def SARObservation_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return SARObservation_IngestStartSrcIdsVector(builder, numElems)

def SARObservation_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SARObservation_IngestAddCreatedAt(builder, createdAt)

def SARObservation_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SARObservation_IngestAddCreatedBy(builder, createdBy)

def SARObservation_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SARObservation_IngestAddSource(builder, source)

def SARObservation_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SARObservation_IngestAddOrigin(builder, origin)

def SARObservation_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SARObservation_IngestAddOrigNetwork(builder, origNetwork)

def SARObservation_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    SARObservation_IngestAddSourceDl(builder, sourceDl)

def SARObservation_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(68, dataMode, 0)

def AddDataMode(builder, dataMode):
    SARObservation_IngestAddDataMode(builder, dataMode)

def SARObservation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SARObservation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class SARObservation_IngestT(object):

    # SARObservation_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.externalId = None  # type: str
        self.collectionId = None  # type: str
        self.detectionId = None  # type: str
        self.collectionStart = None  # type: str
        self.collectionEnd = None  # type: str
        self.centerTime = None  # type: str
        self.detectionStart = None  # type: str
        self.detectionEnd = None  # type: str
        self.dwellTime = 0.0  # type: float
        self.orbitState = None  # type: str
        self.sarMode = None  # type: str
        self.operatingBand = None  # type: str
        self.operatingFreq = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.txPolarization = None  # type: str
        self.rxPolarization = None  # type: str
        self.grazeAngle = 0.0  # type: float
        self.incidenceAngle = 0.0  # type: float
        self.squintAngle = 0.0  # type: float
        self.pulseBandwidth = 0.0  # type: float
        self.pulseDuration = 0.0  # type: float
        self.continuousSpotAngle = 0.0  # type: float
        self.slantRange = 0.0  # type: float
        self.nearRange = 0.0  # type: float
        self.farRange = 0.0  # type: float
        self.swathLength = 0.0  # type: float
        self.area = None  # type: str
        self.atext = None  # type: str
        self.agjson = None  # type: str
        self.atype = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.spacingRange = 0.0  # type: float
        self.spacingAzimuth = 0.0  # type: float
        self.looksAzimuth = 0  # type: int
        self.looksRange = 0  # type: int
        self.resolutionRange = 0.0  # type: float
        self.resolutionAzimuth = 0.0  # type: float
        self.obDirection = None  # type: str
        self.coordSys = None  # type: str
        self.targetposx = 0.0  # type: float
        self.targetposy = 0.0  # type: float
        self.targetposz = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.senvelx = 0.0  # type: float
        self.senvely = 0.0  # type: float
        self.senvelz = 0.0  # type: float
        self.senlatStart = 0.0  # type: float
        self.senlonStart = 0.0  # type: float
        self.senlatEnd = 0.0  # type: float
        self.senlonEnd = 0.0  # type: float
        self.transactionId = None  # type: str
        self.tags = None  # type: List[str]
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sarobservationIngest = SARObservation_Ingest()
        sarobservationIngest.Init(buf, pos)
        return cls.InitFromObj(sarobservationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sarobservationIngest):
        x = SARObservation_IngestT()
        x._UnPack(sarobservationIngest)
        return x

    # SARObservation_IngestT
    def _UnPack(self, sarobservationIngest):
        if sarobservationIngest is None:
            return
        self.id = sarobservationIngest.Id()
        self.classificationMarking = sarobservationIngest.ClassificationMarking()
        self.idOnOrbit = sarobservationIngest.IdOnOrbit()
        self.satNo = sarobservationIngest.SatNo()
        self.origObjectId = sarobservationIngest.OrigObjectId()
        self.idSensor = sarobservationIngest.IdSensor()
        self.origSensorId = sarobservationIngest.OrigSensorId()
        self.externalId = sarobservationIngest.ExternalId()
        self.collectionId = sarobservationIngest.CollectionId()
        self.detectionId = sarobservationIngest.DetectionId()
        self.collectionStart = sarobservationIngest.CollectionStart()
        self.collectionEnd = sarobservationIngest.CollectionEnd()
        self.centerTime = sarobservationIngest.CenterTime()
        self.detectionStart = sarobservationIngest.DetectionStart()
        self.detectionEnd = sarobservationIngest.DetectionEnd()
        self.dwellTime = sarobservationIngest.DwellTime()
        self.orbitState = sarobservationIngest.OrbitState()
        self.sarMode = sarobservationIngest.SarMode()
        self.operatingBand = sarobservationIngest.OperatingBand()
        self.operatingFreq = sarobservationIngest.OperatingFreq()
        self.snr = sarobservationIngest.Snr()
        self.txPolarization = sarobservationIngest.TxPolarization()
        self.rxPolarization = sarobservationIngest.RxPolarization()
        self.grazeAngle = sarobservationIngest.GrazeAngle()
        self.incidenceAngle = sarobservationIngest.IncidenceAngle()
        self.squintAngle = sarobservationIngest.SquintAngle()
        self.pulseBandwidth = sarobservationIngest.PulseBandwidth()
        self.pulseDuration = sarobservationIngest.PulseDuration()
        self.continuousSpotAngle = sarobservationIngest.ContinuousSpotAngle()
        self.slantRange = sarobservationIngest.SlantRange()
        self.nearRange = sarobservationIngest.NearRange()
        self.farRange = sarobservationIngest.FarRange()
        self.swathLength = sarobservationIngest.SwathLength()
        self.area = sarobservationIngest.Area()
        self.atext = sarobservationIngest.Atext()
        self.agjson = sarobservationIngest.Agjson()
        self.atype = sarobservationIngest.Atype()
        self.andims = sarobservationIngest.Andims()
        self.asrid = sarobservationIngest.Asrid()
        self.spacingRange = sarobservationIngest.SpacingRange()
        self.spacingAzimuth = sarobservationIngest.SpacingAzimuth()
        self.looksAzimuth = sarobservationIngest.LooksAzimuth()
        self.looksRange = sarobservationIngest.LooksRange()
        self.resolutionRange = sarobservationIngest.ResolutionRange()
        self.resolutionAzimuth = sarobservationIngest.ResolutionAzimuth()
        self.obDirection = sarobservationIngest.ObDirection()
        self.coordSys = sarobservationIngest.CoordSys()
        self.targetposx = sarobservationIngest.Targetposx()
        self.targetposy = sarobservationIngest.Targetposy()
        self.targetposz = sarobservationIngest.Targetposz()
        self.senalt = sarobservationIngest.Senalt()
        self.senvelx = sarobservationIngest.Senvelx()
        self.senvely = sarobservationIngest.Senvely()
        self.senvelz = sarobservationIngest.Senvelz()
        self.senlatStart = sarobservationIngest.SenlatStart()
        self.senlonStart = sarobservationIngest.SenlonStart()
        self.senlatEnd = sarobservationIngest.SenlatEnd()
        self.senlonEnd = sarobservationIngest.SenlonEnd()
        self.transactionId = sarobservationIngest.TransactionId()
        if not sarobservationIngest.TagsIsNone():
            self.tags = []
            for i in range(sarobservationIngest.TagsLength()):
                self.tags.append(sarobservationIngest.Tags(i))
        if not sarobservationIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(sarobservationIngest.SrcTypsLength()):
                self.srcTyps.append(sarobservationIngest.SrcTyps(i))
        if not sarobservationIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(sarobservationIngest.SrcIdsLength()):
                self.srcIds.append(sarobservationIngest.SrcIds(i))
        self.createdAt = sarobservationIngest.CreatedAt()
        self.createdBy = sarobservationIngest.CreatedBy()
        self.source = sarobservationIngest.Source()
        self.origin = sarobservationIngest.Origin()
        self.origNetwork = sarobservationIngest.OrigNetwork()
        self.sourceDl = sarobservationIngest.SourceDl()
        self.dataMode = sarobservationIngest.DataMode()

    # SARObservation_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.collectionId is not None:
            collectionId = builder.CreateString(self.collectionId)
        if self.detectionId is not None:
            detectionId = builder.CreateString(self.detectionId)
        if self.collectionStart is not None:
            collectionStart = builder.CreateString(self.collectionStart)
        if self.collectionEnd is not None:
            collectionEnd = builder.CreateString(self.collectionEnd)
        if self.centerTime is not None:
            centerTime = builder.CreateString(self.centerTime)
        if self.detectionStart is not None:
            detectionStart = builder.CreateString(self.detectionStart)
        if self.detectionEnd is not None:
            detectionEnd = builder.CreateString(self.detectionEnd)
        if self.orbitState is not None:
            orbitState = builder.CreateString(self.orbitState)
        if self.sarMode is not None:
            sarMode = builder.CreateString(self.sarMode)
        if self.operatingBand is not None:
            operatingBand = builder.CreateString(self.operatingBand)
        if self.txPolarization is not None:
            txPolarization = builder.CreateString(self.txPolarization)
        if self.rxPolarization is not None:
            rxPolarization = builder.CreateString(self.rxPolarization)
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.obDirection is not None:
            obDirection = builder.CreateString(self.obDirection)
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            SARObservation_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            SARObservation_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            SARObservation_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        SARObservation_IngestStart(builder)
        if self.id is not None:
            SARObservation_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            SARObservation_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            SARObservation_IngestAddIdOnOrbit(builder, idOnOrbit)
        SARObservation_IngestAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            SARObservation_IngestAddOrigObjectId(builder, origObjectId)
        if self.idSensor is not None:
            SARObservation_IngestAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            SARObservation_IngestAddOrigSensorId(builder, origSensorId)
        if self.externalId is not None:
            SARObservation_IngestAddExternalId(builder, externalId)
        if self.collectionId is not None:
            SARObservation_IngestAddCollectionId(builder, collectionId)
        if self.detectionId is not None:
            SARObservation_IngestAddDetectionId(builder, detectionId)
        if self.collectionStart is not None:
            SARObservation_IngestAddCollectionStart(builder, collectionStart)
        if self.collectionEnd is not None:
            SARObservation_IngestAddCollectionEnd(builder, collectionEnd)
        if self.centerTime is not None:
            SARObservation_IngestAddCenterTime(builder, centerTime)
        if self.detectionStart is not None:
            SARObservation_IngestAddDetectionStart(builder, detectionStart)
        if self.detectionEnd is not None:
            SARObservation_IngestAddDetectionEnd(builder, detectionEnd)
        SARObservation_IngestAddDwellTime(builder, self.dwellTime)
        if self.orbitState is not None:
            SARObservation_IngestAddOrbitState(builder, orbitState)
        if self.sarMode is not None:
            SARObservation_IngestAddSarMode(builder, sarMode)
        if self.operatingBand is not None:
            SARObservation_IngestAddOperatingBand(builder, operatingBand)
        SARObservation_IngestAddOperatingFreq(builder, self.operatingFreq)
        SARObservation_IngestAddSnr(builder, self.snr)
        if self.txPolarization is not None:
            SARObservation_IngestAddTxPolarization(builder, txPolarization)
        if self.rxPolarization is not None:
            SARObservation_IngestAddRxPolarization(builder, rxPolarization)
        SARObservation_IngestAddGrazeAngle(builder, self.grazeAngle)
        SARObservation_IngestAddIncidenceAngle(builder, self.incidenceAngle)
        SARObservation_IngestAddSquintAngle(builder, self.squintAngle)
        SARObservation_IngestAddPulseBandwidth(builder, self.pulseBandwidth)
        SARObservation_IngestAddPulseDuration(builder, self.pulseDuration)
        SARObservation_IngestAddContinuousSpotAngle(builder, self.continuousSpotAngle)
        SARObservation_IngestAddSlantRange(builder, self.slantRange)
        SARObservation_IngestAddNearRange(builder, self.nearRange)
        SARObservation_IngestAddFarRange(builder, self.farRange)
        SARObservation_IngestAddSwathLength(builder, self.swathLength)
        if self.area is not None:
            SARObservation_IngestAddArea(builder, area)
        if self.atext is not None:
            SARObservation_IngestAddAtext(builder, atext)
        if self.agjson is not None:
            SARObservation_IngestAddAgjson(builder, agjson)
        if self.atype is not None:
            SARObservation_IngestAddAtype(builder, atype)
        SARObservation_IngestAddAndims(builder, self.andims)
        SARObservation_IngestAddAsrid(builder, self.asrid)
        SARObservation_IngestAddSpacingRange(builder, self.spacingRange)
        SARObservation_IngestAddSpacingAzimuth(builder, self.spacingAzimuth)
        SARObservation_IngestAddLooksAzimuth(builder, self.looksAzimuth)
        SARObservation_IngestAddLooksRange(builder, self.looksRange)
        SARObservation_IngestAddResolutionRange(builder, self.resolutionRange)
        SARObservation_IngestAddResolutionAzimuth(builder, self.resolutionAzimuth)
        if self.obDirection is not None:
            SARObservation_IngestAddObDirection(builder, obDirection)
        if self.coordSys is not None:
            SARObservation_IngestAddCoordSys(builder, coordSys)
        SARObservation_IngestAddTargetposx(builder, self.targetposx)
        SARObservation_IngestAddTargetposy(builder, self.targetposy)
        SARObservation_IngestAddTargetposz(builder, self.targetposz)
        SARObservation_IngestAddSenalt(builder, self.senalt)
        SARObservation_IngestAddSenvelx(builder, self.senvelx)
        SARObservation_IngestAddSenvely(builder, self.senvely)
        SARObservation_IngestAddSenvelz(builder, self.senvelz)
        SARObservation_IngestAddSenlatStart(builder, self.senlatStart)
        SARObservation_IngestAddSenlonStart(builder, self.senlonStart)
        SARObservation_IngestAddSenlatEnd(builder, self.senlatEnd)
        SARObservation_IngestAddSenlonEnd(builder, self.senlonEnd)
        if self.transactionId is not None:
            SARObservation_IngestAddTransactionId(builder, transactionId)
        if self.tags is not None:
            SARObservation_IngestAddTags(builder, tags)
        if self.srcTyps is not None:
            SARObservation_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            SARObservation_IngestAddSrcIds(builder, srcIds)
        if self.createdAt is not None:
            SARObservation_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SARObservation_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SARObservation_IngestAddSource(builder, source)
        if self.origin is not None:
            SARObservation_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SARObservation_IngestAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            SARObservation_IngestAddSourceDl(builder, sourceDl)
        SARObservation_IngestAddDataMode(builder, self.dataMode)
        sarobservationIngest = SARObservation_IngestEnd(builder)
        return sarobservationIngest
