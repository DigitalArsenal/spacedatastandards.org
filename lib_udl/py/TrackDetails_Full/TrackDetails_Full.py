# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide operations for querying of all available track details and amplifying track data. A track is a position and optionally a heading/velocity of an object such as an aircraft, marine vessel, etc at a particular timestamp. It also includes optional information regarding the identity/type of the target object and other amplifying object data, if known.
class TrackDetails_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrackDetails_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrackDetails_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TrackDetails_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x52\x41\x43", size_prefixed=size_prefixed)

    # TrackDetails_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: TRACK-DETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # TrackDetails_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # TrackDetails_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
    #  AIR: Between sea level and the K치rm치n line, which has an altitude of 100 kilometers (62 miles).
    #  LAND: On the surface of dry land.
    #  SPACE: Above the K치rm치n line, which has an altitude of 100 kilometers (62 miles).
    #  SURFACE: On the surface of a body of water.
    #  SUBSURFACE: Below the surface of a body of water.
    #  UNKNOWN: Environment is not known.
    # Example: /// Example: LAND
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def Env(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional message type designation.
    # Example: /// Example: PLATFORM
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The vessel hull number designation of this maritime vessel.  The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
    # Example: /// Example: A30081
    # Constraints: Minimum length = 0, Maximum length = 7
    # TrackDetails_Full
    def HullNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Pseudo Identification Feature (PIF) number is a four digit code that provides an exact ID for the ship or aircraft. Friendly military only.
    # Example: /// Example: 0137
    # Constraints: Minimum length = 0, Maximum length = 5
    # TrackDetails_Full
    def Pif(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
    # Example: /// Example: B45524
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def Sconum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Naval Tactical Data System (NTDS) track number assigned to this track.
    # Example: /// Example: ZZ777
    # Constraints: Minimum length = 0, Maximum length = 6
    # TrackDetails_Full
    def Ntds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Intel Discrete Identifier (IDI) code assigned to this track.  The IDI is a four-digit code representing hostile or unknown tracks.
    # Example: /// Example: 7670
    # Constraints: Minimum length = 0, Maximum length = 5
    # TrackDetails_Full
    def DisId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The category code that represents the associated facility purpose within the target system.  This value is the category code in the MIDB (Modernized Intelligence Database).
    # Example: /// Example: 20345
    # Constraints: Minimum length = 0, Maximum length = 6
    # TrackDetails_Full
    def MidbCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Basic Encyclopedia (BE) number associated with this installation or area.
    # Example: /// Example: ENC-123
    # Constraints: Minimum length = 0, Maximum length = 10
    # TrackDetails_Full
    def BeNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The O-suffix associated with this facility.  The O-suffix is a five-character alpha/numeric system used to identify a facility, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the facility within the Modernized Integrated Database (MIDB).  The Installation beNumber and oSuffix are also used in conjunction with the midbCat code to classify the function or purpose of the facility.
    # Example: /// Example: AA125
    # Constraints: Minimum length = 0, Maximum length = 6
    # TrackDetails_Full
    def OSuffix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This value represents the site number of a specific electronic site or its associated equipment.
    # Example: /// Example: E12345012
    # Constraints: Minimum length = 0, Maximum length = 9
    # TrackDetails_Full
    def Pin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether the missile is considered lost, if reporting a missile track.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def LostTrkInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Track ID for the source of the Missile-Unique Identifier (MUID), if reporting a missile track.
    # Example: /// Example: MUID-SRC-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def MuidSrcTrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the Missile-Unique Identifier (MUID), if reporting a missile track.
    # Example: /// Example: MUID-SRC
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def MuidSrc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of the missile track in this record, if reporting a missile track (e.g. AT LAUNCH, AT OBSERVATION, FLYING, IMPACTED, LOST, STALE, DEBRIS).
    # Example: /// Example: AT LAUNCH
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def MslStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
    # Example: /// Example: 0.95
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def TrkConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track; Higher values indicate higher track quality, i.e., lower errors in reported position.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def TrkQual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # A track may be designated as an alert track with the following designations:
    # HIT - High Interest Track
    # TGT - Target
    # SUS - Suspect Carrier
    # NSP - Cleared Suspect
    # If alert is null, the track is assumed to be of non-alert status.
    # Example: /// Example: TGT
    # Constraints: Minimum length = 0, Maximum length = 3
    # TrackDetails_Full
    def Alert(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Original source cross-reference code for the Command that originated the report.
    # Example: /// Example: INT
    # Constraints: Minimum length = 0, Maximum length = 5
    # TrackDetails_Full
    def OrigXref(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Primary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
    # Example: /// Example: A123A
    # Constraints: Minimum length = 0, Maximum length = 5
    # TrackDetails_Full
    def Elnot1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Secondary ELINT Notification (ELNOT), a five character identifier assigned to each non-communication emission for collection and reporting purposes.  This five-digit field begins with an alpha character, followed by three numbers, ending with another alpha character.
    # Example: /// Example: A123B
    # Constraints: Minimum length = 0, Maximum length = 5
    # TrackDetails_Full
    def Elnot2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    #  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    #  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    #  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    #  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    #  PENDING: Track object which has not been evaluated.
    #  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    #  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def ObjIdent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The generic classification of the track object/group (e.g., BALLISTIC, HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
    # Example: /// Example: TRACKED
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def ObjType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The object platform type is intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. SATELLITE).
    # Example: /// Example: WEAPON
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def ObjPlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.  For cases in which no MIl-STD-6016 designation exists, a general description can be used (e.g. ANTISPACE WARFARE).
    # Example: /// Example: HOLDING
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def ObjAct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Nationality of the tracked object.
    # Example: /// Example: USA
    # Constraints: Minimum length = 0, Maximum length = 24
    # TrackDetails_Full
    def ObjNat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track name.
    # Example: /// Example: TRACK-NAME
    # Constraints: Minimum length = 0, Maximum length = 48
    # TrackDetails_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Abbreviated track name.
    # Example: /// Example: COMMSCHECK
    # Constraints: Minimum length = 0, Maximum length = 11
    # TrackDetails_Full
    def ShortName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    # Example: /// Example: trkId
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def TrkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
    # Example: /// Example: trkNum
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def TrkNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Value Indicating the scope of this track:
    # 1 - TERMINAL  (Terminal) - available only on the workstation where they were created.
    # 2 - LOCAL  (Local) - available only on workstations in the local area network
    # 3 - OTH  (Over the Horizon) - available to everyone.
    # Example: /// Example: OTH
    # Constraints: Minimum length = 0, Maximum length = 12
    # TrackDetails_Full
    def TrkScope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unique identifier of the source node.
    # Example: /// Example: MCS
    # Constraints: Minimum length = 0, Maximum length = 4
    # TrackDetails_Full
    def SourceUid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign currently assigned to this track object.
    # Example: /// Example: Charlie
    # Constraints: Minimum length = 0, Maximum length = 24
    # TrackDetails_Full
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    #  FAKER: Friendly track, object, or entity acting as an exercise hostile.
    #  JOKER: Friendly track, object, or entity acting as an exercise suspect.
    #  KILO: Friendly high-value object.
    #  TRAVELLER: Suspect land or surface track following a recognized traffic route.
    #  ZOMBIE: Suspect track, object, or entity of special interest.
    # Example: /// Example: JOKER
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def IdentAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Space amplification indicates additional information on the space environment object being reported (e.g. DEBRIS, FUEL-AIR EXPLOSIVE, NUCLEAR WARHEAD).
    # Example: /// Example: NUCLEAR WARHEAD
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def SpaceAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Confidence level of the amplifying characteristics.  Values range from 0 to 6, with 0 indicating the lowest confidence and 6 indicating the highest.
    # Example: /// Example: 6
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def SpaceAmpConf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Specific type of point or track with an environment of space.
    # Example: /// Example: SS-21_MOD_2_CRBM
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def SpaceSpecType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM:
    # SRBM - Short-Range Ballistic Missile
    # MRBM - Medium-Range Ballistic Missile
    # IRBM - Intermediate-Range Ballistic Missile
    # LRBM - Long-Range Ballistic Missile
    # ICBM - Intercontinental Ballistic Missile
    # SLBM - Submarine-Launched Ballistic Missile.
    # Example: /// Example: SLBM
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def AcftSubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track timestamp in ISO8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Missile launch timestamp in ISO8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def LaunchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Missile impact timestamp in ISO8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ImpactTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The message timestamp that the ftn track position was recorded, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def FtnMsgTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An ftn used to associate information and directives with the track.
    # Example: /// Example: FTN
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def Ftn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the Command reporting the Force Over-The-Horizon Track Coordinator (FOTC) track number.
    # Example: /// Example: TRUETT
    # Constraints: Minimum length = 0, Maximum length = 18
    # TrackDetails_Full
    def FtnCmd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The message timestamp that the reference track position was recorded, in ISO 8601 UTC format with microsecond precision. The 'rtnMsgTs' and 'rtn' arrays must match in size.
    # Example: /// Example: ['2021-02-25T12:00:00.123456Z']
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def RtnMsgTs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def RtnMsgTsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def RtnMsgTsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # A Reference Track Number used to associate information and directives with the track.  Referenced, but not constrained to, MIL-STD-6016F Reference Track Number. The 'rtnMsgTs' and 'rtn' arrays must match in size.
    # Example: /// Example: ['ex-a']
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Rtn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def RtnLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def RtnIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

    # Value representing the state of the Received Track.
    # Example: /// Example: Local_RTN
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def RtnTrkState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the Command reporting the Received Track Number (RTN).
    # Example: /// Example: YORKTOWN
    # Constraints: Minimum length = 0, Maximum length = 8
    # TrackDetails_Full
    def RtnCmd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Id/name of sensor providing the track data.
    # Example: /// Example: OTH
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def Sen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source cross-reference code for the Command that originated the track report.
    # Example: /// Example: INT
    # Constraints: Minimum length = 0, Maximum length = 18
    # TrackDetails_Full
    def RptChxref(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether this track is archived.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def RptArchived(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track is self reported.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def SelfReport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The MIL-STD-2525B symbology code that applies to the subject of this track.
    # Example: /// Example: SHP*S----------
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def Mil2525Bstr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transponder ID for the track.  This does not correspond to the UDL transponder schema.
    # Example: /// Example: 11
    # Constraints: Minimum length = 0, Maximum length = 61
    # TrackDetails_Full
    def TrnspdrId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Transponder type for the track.
    # Example: /// Example: AFTS
    # Constraints: Minimum length = 0, Maximum length = 51
    # TrackDetails_Full
    def TrnspdrType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Radar name of the sensor tracking this object (e.g., RAY1500, SPN-43, HEADNET).
    # Example: /// Example: RAY1500
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def EmitterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source code for source of information used to detect track.
    # Example: /// Example: S1
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def InfoSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that the missile is currently in a state of boosting, if reporting a missile track.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Boosting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Frequency, in hertz, for the signature report.
    # Example: /// Example: 63.65
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Freq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum frequency, in hertz, reported for this acoustic track.
    # Example: /// Example: 10324.53
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def MaxFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # List of harmonics of the signature report in descending order of predominance using 1-2 digit combinations separated by commas, e.g., 8,12,4. (1-22NS).
    # Example: /// Example: 8,12,4
    # Constraints: Minimum length = 0, Maximum length = 24
    # TrackDetails_Full
    def Harmonics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pulse repetition interval of the emitter, measured in microseconds.  The interval between the start of one pulse and the start of another.
    # Example: /// Example: 56657.2238
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Pri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pulse repetition frequency of the emitter, measured in pulses per second.  PRF is the number of pulses transmitted per second. This is the reciprocal of the pri value.
    # Example: /// Example: 17.65
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Prf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pulse width of the emitter, measured in microseconds.  This is the duration of the pulse.
    # Example: /// Example: 1347.45
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Pw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Type of radar scan.
    # Example: /// Example: UNK
    # Constraints: Minimum length = 0, Maximum length = 5
    # TrackDetails_Full
    def ScanType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Scan rate of the emitter, measured in seconds per rotation (SPR).
    # Example: /// Example: 12.01
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ScanRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Sequential Contact Number (SCN) for this track.
    # Example: /// Example: 1474305
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Scn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Correlation Index; reference code for the site that originally reported the track.
    # Example: /// Example: BB
    # Constraints: Minimum length = 0, Maximum length = 3
    # TrackDetails_Full
    def CI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The angle formed between the line of sight of the observer and the horizon, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
    # Example: /// Example: 15.2
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def AngElev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74596844
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def LaunchLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def LaunchLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 latitude of the missile impact point, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ImpactLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the missile impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ImpactLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 azimuth corridor reference point latitude, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def PolarSingLocLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 azimuth corridor reference point longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74550102
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def PolarSingLocLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The azimuth corridor centerline angle measured in degrees clockwise from true north, of the center line of an azimuth corridor. The center line extends from the referenced corridor origin location.
    # Example: /// Example: 12.876
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def AzCorrCenterLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Azimuth corridor arc distance measured in meters from reference point of azimuth corridor to far edge of bounded azimuth corridor wedge, measured along azimuth corridor center line.
    # Example: /// Example: 71.76
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def AzCorrArcWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The error in the semi-intermediate axis.  The semi-intermediate axis is intermediate in length between semi-major and semi-minor axes. This field is doubled and centered on intersection of area semi-major axis and area semi-minor axis at 90 degrees to the plane defined by those axes. For these shapes, the volume is defined as having a 50-percent probability of containing the true location of the referenced entity.
    # Example: /// Example: 7010.882
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ErrSemiIntAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The error in the Area Orientation.  Area Orientation is the angle or roll in degrees, between area semi-minor axis and plane defined by local vertical and area semi-major axis. When reported without major and minor axis, it is angle between an axis perpendicular to a 2D true north axis and plane defined by local vertical and a 2D true north axis.
    # Example: /// Example: 69.6
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ErrAreaOrient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The error in the Semi-major elevation axis. Semi-major elevation axis is the elevation of the cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical semi-major axis, in degrees, measured from local horizontal.
    # Example: /// Example: 168.8
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ErrSemiMajElev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Geometric area switch identifies the 3D shape of the error volume by providing the 2D shape for the 3D plane. The 3D plane is the plane orthogonal to the area semi-major axis and area semi-minor axis. Depending on whether the 2D plane is reported as an error ellipse 2D or as an error rectangle 2D, this switch reports a complete error volume that is cubical, 3D rectangular, cylindrical, 3D ellipsoidal, or spherical.
    # 0 - SWITCH_TYPE_UNKNOWN
    # 1 - SQUARE_RECTANGLE
    # 2 - CIRCLE_ELLIPSE.
    # Example: /// Example: CIRCLE_ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 24
    # TrackDetails_Full
    def ErrGeoAreaSwitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track point burnout altitude relative to WGS-84 ellipsoid, in meters.
    # Example: /// Example: 30567.452
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def BurnoutAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Threat Event System Track ID.
    # Example: /// Example: 6217
    # Constraints: Minimum length = 0, Maximum length = 8
    # TrackDetails_Full
    def TesEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track object speed, in meters/sec.
    # Example: /// Example: 15.03443
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Spd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average speed, in kilometers/hour, calculated for the subject during the latest voyage/excursion.
    # Example: /// Example: 18.25
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def AvgSpd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Motion model Time On Leg in hours.
    # Example: /// Example: 4.1
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Tol(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
    # Example: /// Example: 153.01
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track object heading, in degrees clockwise from true north.
    # Example: /// Example: 19.7
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Hdng(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
    # Example: /// Example: 4.3580153
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Course(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of propeller revolutions per minute for a submarine or ship.
    # Example: /// Example: 8.2
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def PropRpm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of turns of the vessel propellers per knot of forward motion.
    # Example: /// Example: 2.65
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Tpk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Cooperative Location Indicator specifies whether the reported entity location was derived using reported locations from sensors on more than one platform.
    # 0 - COOPERATIVE_LOCATOR_NONE
    # 1 - SINGLE_PLATFORM
    # 2 - FRAGMENT
    # 3 - COOPERATIVE.
    # Example: /// Example: COOPERATIVE
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def CoopLocInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The manuevering indicator specifying the missile boost phase.
    # 0 - POST_BOOST_NONE
    # 1 - POST_BOOST_MANUEVER
    # 2 - POST_BOOST_COMPLETE_MANUEVER.
    # Example: /// Example: POST_BOOST_NONE
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def ManeuverInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The launch location Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the launchAouData array and is required if launchAouData is not null. See the launchAouData field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 20
    # TrackDetails_Full
    def LaunchAouType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing the launch location Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the launchAouType specified in this record:
    #  ELLIPSE:
    #    brg - orientation in degrees of the ellipse
    #    a1 - semi-major axis in meters
    #    a2 - semi-minor axis in meters
    #  BEARING (BEARING BOX or MTST BEARING BOX):
    #    brg - orientation in degrees of the bearing box
    #    a1 - length of bearing box in meters
    #    a2 - half-width of bearing box in meters
    #  OTHER (All other type values):
    #    brg - line of bearing in degrees true
    #    a1 - bearing error in degrees
    #    a2 - estimated range in meters.
    # Example: /// Example: [34.3, 26.5, 1.2]
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def LaunchAouData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def LaunchAouDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def LaunchAouDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        return o == 0

    # The impact point Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the impactAouData array and is required if impactAouData is not null. See the impactAouData field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 20
    # TrackDetails_Full
    def ImpactAouType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(202))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing the impact point Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the impactAouType specified in this record:
    #  ELLIPSE:
    #    brg - orientation in degrees of the ellipse
    #    a1 - semi-major axis in meters
    #    a2 - semi-minor axis in meters
    #  BEARING (BEARING BOX or MTST BEARING BOX):
    #    brg - orientation in degrees of the bearing box
    #    a1 - length of bearing box in meters
    #    a2 - half-width of bearing box in meters
    #  OTHER (All other type values):
    #    brg - line of bearing in degrees true
    #    a1 - bearing error in degrees
    #    a2 - estimated range in meters.
    # Example: /// Example: [34.3, 26.5, 1.2]
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ImpactAouData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def ImpactAouDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def ImpactAouDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        return o == 0

    # The track Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouRptData array and is required if aouRptData is not null. See the aouRptData field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 20
    # TrackDetails_Full
    def AouRptType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouRptType specified in this record:
    #  ELLIPSE:
    #    brg - orientation in degrees of the ellipse
    #    a1 - semi-major axis in meters
    #    a2 - semi-minor axis in meters
    #  BEARING (BEARING BOX or MTST BEARING BOX):
    #    brg - orientation in degrees of the bearing box
    #    a1 - length of bearing box in meters
    #    a2 - half-width of bearing box in meters
    #  OTHER (All other type values):
    #    brg - line of bearing in degrees true
    #    a1 - bearing error in degrees
    #    a2 - estimated range in meters.
    # Example: /// Example: [34.3, 26.5, 1.2]
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def AouRptData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def AouRptDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def AouRptDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        return o == 0

    # Track object location in ECEF [x, y, z], meters. When provided, array must always contain 3 values.
    # Example: /// Example: [1.23, 2.35, 3.42]
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def EcefPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def EcefPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def EcefPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        return o == 0

    # Track object velocity in ECEF [x', y', z'], meters/sec. When provided, array must always contain 3 values.
    # Example: /// Example: [1.23, 2.35, 3.42]
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def EcefVel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def EcefVelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def EcefVelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        return o == 0

    # The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
    # Example: /// Example: 97
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Containment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(214))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The distance, in meters, of the closest point of approach between this track to the master reference track.
    # Example: /// Example: 500
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Cpa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(216))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The time, in ISO 8601 UTC format with millisecond precision, of the  closest point of approach between this track and the master reference track.
    # Example: /// Example: 2021-02-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Tcpa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(218))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Underway Using Engine
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def NavStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(220))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: GPS
    # Constraints: Minimum length = 0, Maximum length = 24
    # TrackDetails_Full
    def PosDeviceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(222))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of Aid to Navigation. Intended as, but not constrained to, the USCG NAVCEN  aids to navigation. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Cardinal Mark N
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def Aton(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(224))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator position (OFF, ON, UNK) for optional floating navigational aids only.
    # Example: /// Example: ON
    # Constraints: Minimum length = 0, Maximum length = 3
    # TrackDetails_Full
    def OffPosInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(226))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference dimensions of the vessel, reported as [A, B, C, D], in meters. Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna. Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
    # Example: /// Example: [50.1, 50.1, 20.1, 20.1]
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def AntennaRefDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(228))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TrackDetails_Full
    def AntennaRefDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(228))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrackDetails_Full
    def AntennaRefDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(228))
        return o == 0

    # The common name for a group of ships with similar design, usually named for the first vessel of the class.
    # Example: /// Example: Nimitz
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def ShipClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(230))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
    # Example: /// Example: 9015462
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Imon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(232))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
    # Example: /// Example: 304010417
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Mmsi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(234))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The maximum static draught, in meters, of the vessel according to the AIS transmission.
    # Example: /// Example: 21.1
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Draught(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(236))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
    # Example: /// Example: 511.1
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(238))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
    # Example: /// Example: 24.1
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(240))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Freight
    # Constraints: Minimum length = 0, Maximum length = 48
    # TrackDetails_Full
    def CargoType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(242))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Appearance group code.
    # GP1 - Superstructure exceeds 1/3 of ship length.
    # GP2 - Superstructure less than 1/3 of ship length.
    # GP3 - Stack aft.
    # Example: /// Example: GP1
    # Constraints: Minimum length = 0, Maximum length = 7
    # TrackDetails_Full
    def AppGrp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(244))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hull profile code. Based on GCCS-J hull profiles.
    # FLUSH           No breaks in Hull Profile.
    # RAISED 1        Hull Profile shows distinct raised area at bow. Remainder of deck is flush.
    # RAISED 2        Hull Profile shows distinct raised area amidships. Bow and stern are flush.
    # RAISED 3        Hull Profile shows distinct raised area at stern. Remainder of deck is flush.
    # RAISED 1-2-3    Distinct raised areas at bow, midships, and stern with breaks between each raise.
    # RAISED 1-2      Raised area at bow and midships with break between.
    # RAISED 1-3      Raised area at bow and stern with break between.
    # RAISED 12       Continuous raised area encompassing both bow and midships.
    # RAISED 23       Continuous raised area encompassing midships and stern.
    # RAISED 12-3     Raised areas at bow, midships and stern. Bow and midship raises are continuous. Break between midship and stern raises.
    # RAISED 1-23     Raised areas at bow, midships, and stern. Midship and stern raises are continuous with break between bow and midship raises.
    # RAISED 1-L2-3   Raised areas at bow, midships, and stern with break between each raise. Midships raise is longer than that associated with raised 1-2-3.
    # Example: /// Example: Raised 1-23
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def HullProf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(246))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of propulsion employed by the track object (Diesel, Nuclear).
    # Example: /// Example: Diesel
    # Constraints: Minimum length = 0, Maximum length = 6
    # TrackDetails_Full
    def PropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(248))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of blades per shaft of the track object.  Applicable for maritime vessels.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def NumBlades(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(250))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The number of shafts on the track object.  Applicable for maritime vessels.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def NumShafts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(252))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The stern type code (Counter, Cruiser) associated with the track object.
    # Example: /// Example: Cruiser
    # Constraints: Minimum length = 0, Maximum length = 16
    # TrackDetails_Full
    def SternType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(254))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The weight, in tons, of the vessel associated with this track.
    # Example: /// Example: 3423.76
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def VslWt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(256))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Arrival Time of the vessel at the destination, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def ArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(258))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flag of the arrival port.
    # Example: /// Example: USA
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def ArrFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(260))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reported arrival cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Freight
    # Constraints: Minimum length = 0, Maximum length = 48
    # TrackDetails_Full
    def ArrCargo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(262))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Arrival Port of the vessel according to the AIS transmission.
    # Example: /// Example: Lanshan
    # Constraints: Minimum length = 0, Maximum length = 20
    # TrackDetails_Full
    def ArrPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(264))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Departure Port of the vessel according to the AIS transmission.
    # Example: /// Example: Lanshan
    # Constraints: Minimum length = 0, Maximum length = 20
    # TrackDetails_Full
    def DepPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(266))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flag of the departure port.
    # Example: /// Example: USA
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def DepFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(268))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reported departure cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Freight
    # Constraints: Minimum length = 0, Maximum length = 48
    # TrackDetails_Full
    def DepCargo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(270))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The flag of the destination port.
    # Example: /// Example: USA
    # Constraints: Minimum length = 0, Maximum length = 36
    # TrackDetails_Full
    def DesFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(272))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reported destination cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
    # Example: /// Example: Freight
    # Constraints: Minimum length = 0, Maximum length = 48
    # TrackDetails_Full
    def DesCargo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(274))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The destination of the vessel according to the AIS transmission.
    # Example: /// Example: USCLE
    # Constraints: Minimum length = 0, Maximum length = 20
    # TrackDetails_Full
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(276))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Estimated Time of Arrival of the vessel at the destination port, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Eta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(278))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Estimated Time of Departure of the vessel from the departure port (depPort), according to Marine Traffic calculations, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Etd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(280))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A text amplifier displaying IFF/SIF/AIS Identification modes and codes.
    # Example: /// Example: ID Mode
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def Iff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(282))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that the track object has an emergency.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def EmgInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(284))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The drop-point indicator setting.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def DropPtInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(286))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Reinforced(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(288))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating for the track represents a reduced force object or group.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Reduced(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(290))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Hq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(292))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Dummy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(294))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def TaskForce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(296))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment, and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Feint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(298))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def Installation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(300))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # A text amplifier for units, equipment and installations; content is implementation specific.
    # Example: /// Example: Staff Comments
    # Constraints: Minimum length = 0, Maximum length = 256
    # TrackDetails_Full
    def StaffCmts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(302))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A text amplifier for units, equipment and installations; content is implementation specific.
    # Example: /// Example: Additional information
    # Constraints: Minimum length = 0, Maximum length = 256
    # TrackDetails_Full
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(304))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A text amplifier code for units, equipment, and installations that consists of a one-letter reliability rating and a one-number credibility rating based on the following definitions of each:
    #  Reliability Ratings:
    #   A-completely reliable
    #   B-usually reliable
    #   C-fairly reliable
    #   D-not usually reliable
    #   E-unreliable
    #   F-reliability cannot be judged
    #  Credibility Ratings:
    #   1-confirmed by other sources
    #   2-probably true
    #   3-possibly true
    #   4-doubtfully true
    #   5-improbable
    #   6-truth cannot be judged.
    # Example: /// Example: A1
    # Constraints: Minimum length = 0, Maximum length = 2
    # TrackDetails_Full
    def EvalRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(306))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database.
    # Example: /// Example: 2021-02-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # TrackDetails_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(308))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(310))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # TrackDetails_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(312))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # TrackDetails_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(314))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # TrackDetails_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(316))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # TrackDetails_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(318))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TrackDetails_FullStart(builder):
    builder.StartObject(158)

def Start(builder):
    TrackDetails_FullStart(builder)

def TrackDetails_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    TrackDetails_FullAddId(builder, id)

def TrackDetails_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    TrackDetails_FullAddClassificationMarking(builder, classificationMarking)

def TrackDetails_FullAddEnv(builder, env):
    builder.PrependInt8Slot(2, env, 0)

def AddEnv(builder, env):
    TrackDetails_FullAddEnv(builder, env)

def TrackDetails_FullAddMsgType(builder, msgType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgType), 0)

def AddMsgType(builder, msgType):
    TrackDetails_FullAddMsgType(builder, msgType)

def TrackDetails_FullAddHullNum(builder, hullNum):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(hullNum), 0)

def AddHullNum(builder, hullNum):
    TrackDetails_FullAddHullNum(builder, hullNum)

def TrackDetails_FullAddPif(builder, pif):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pif), 0)

def AddPif(builder, pif):
    TrackDetails_FullAddPif(builder, pif)

def TrackDetails_FullAddSconum(builder, sconum):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sconum), 0)

def AddSconum(builder, sconum):
    TrackDetails_FullAddSconum(builder, sconum)

def TrackDetails_FullAddNtds(builder, ntds):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ntds), 0)

def AddNtds(builder, ntds):
    TrackDetails_FullAddNtds(builder, ntds)

def TrackDetails_FullAddDisId(builder, disId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(disId), 0)

def AddDisId(builder, disId):
    TrackDetails_FullAddDisId(builder, disId)

def TrackDetails_FullAddMidbCat(builder, midbCat):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(midbCat), 0)

def AddMidbCat(builder, midbCat):
    TrackDetails_FullAddMidbCat(builder, midbCat)

def TrackDetails_FullAddBeNumber(builder, beNumber):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(beNumber), 0)

def AddBeNumber(builder, beNumber):
    TrackDetails_FullAddBeNumber(builder, beNumber)

def TrackDetails_FullAddOSuffix(builder, oSuffix):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(oSuffix), 0)

def AddOSuffix(builder, oSuffix):
    TrackDetails_FullAddOSuffix(builder, oSuffix)

def TrackDetails_FullAddPin(builder, pin):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(pin), 0)

def AddPin(builder, pin):
    TrackDetails_FullAddPin(builder, pin)

def TrackDetails_FullAddLostTrkInd(builder, lostTrkInd):
    builder.PrependBoolSlot(13, lostTrkInd, 0)

def AddLostTrkInd(builder, lostTrkInd):
    TrackDetails_FullAddLostTrkInd(builder, lostTrkInd)

def TrackDetails_FullAddMuidSrcTrk(builder, muidSrcTrk):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(muidSrcTrk), 0)

def AddMuidSrcTrk(builder, muidSrcTrk):
    TrackDetails_FullAddMuidSrcTrk(builder, muidSrcTrk)

def TrackDetails_FullAddMuidSrc(builder, muidSrc):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(muidSrc), 0)

def AddMuidSrc(builder, muidSrc):
    TrackDetails_FullAddMuidSrc(builder, muidSrc)

def TrackDetails_FullAddMslStatus(builder, mslStatus):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(mslStatus), 0)

def AddMslStatus(builder, mslStatus):
    TrackDetails_FullAddMslStatus(builder, mslStatus)

def TrackDetails_FullAddTrkConf(builder, trkConf):
    builder.PrependFloat64Slot(17, trkConf, 0.0)

def AddTrkConf(builder, trkConf):
    TrackDetails_FullAddTrkConf(builder, trkConf)

def TrackDetails_FullAddTrkQual(builder, trkQual):
    builder.PrependInt32Slot(18, trkQual, 0)

def AddTrkQual(builder, trkQual):
    TrackDetails_FullAddTrkQual(builder, trkQual)

def TrackDetails_FullAddAlert(builder, alert):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(alert), 0)

def AddAlert(builder, alert):
    TrackDetails_FullAddAlert(builder, alert)

def TrackDetails_FullAddOrigXref(builder, origXref):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origXref), 0)

def AddOrigXref(builder, origXref):
    TrackDetails_FullAddOrigXref(builder, origXref)

def TrackDetails_FullAddElnot1(builder, elnot1):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(elnot1), 0)

def AddElnot1(builder, elnot1):
    TrackDetails_FullAddElnot1(builder, elnot1)

def TrackDetails_FullAddElnot2(builder, elnot2):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(elnot2), 0)

def AddElnot2(builder, elnot2):
    TrackDetails_FullAddElnot2(builder, elnot2)

def TrackDetails_FullAddObjIdent(builder, objIdent):
    builder.PrependInt8Slot(23, objIdent, 0)

def AddObjIdent(builder, objIdent):
    TrackDetails_FullAddObjIdent(builder, objIdent)

def TrackDetails_FullAddObjType(builder, objType):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(objType), 0)

def AddObjType(builder, objType):
    TrackDetails_FullAddObjType(builder, objType)

def TrackDetails_FullAddObjPlat(builder, objPlat):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(objPlat), 0)

def AddObjPlat(builder, objPlat):
    TrackDetails_FullAddObjPlat(builder, objPlat)

def TrackDetails_FullAddObjAct(builder, objAct):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(objAct), 0)

def AddObjAct(builder, objAct):
    TrackDetails_FullAddObjAct(builder, objAct)

def TrackDetails_FullAddObjNat(builder, objNat):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(objNat), 0)

def AddObjNat(builder, objNat):
    TrackDetails_FullAddObjNat(builder, objNat)

def TrackDetails_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    TrackDetails_FullAddName(builder, name)

def TrackDetails_FullAddShortName(builder, shortName):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(shortName), 0)

def AddShortName(builder, shortName):
    TrackDetails_FullAddShortName(builder, shortName)

def TrackDetails_FullAddTrkId(builder, trkId):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(trkId), 0)

def AddTrkId(builder, trkId):
    TrackDetails_FullAddTrkId(builder, trkId)

def TrackDetails_FullAddTrkNum(builder, trkNum):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(trkNum), 0)

def AddTrkNum(builder, trkNum):
    TrackDetails_FullAddTrkNum(builder, trkNum)

def TrackDetails_FullAddTrkScope(builder, trkScope):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(trkScope), 0)

def AddTrkScope(builder, trkScope):
    TrackDetails_FullAddTrkScope(builder, trkScope)

def TrackDetails_FullAddSourceUid(builder, sourceUid):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(sourceUid), 0)

def AddSourceUid(builder, sourceUid):
    TrackDetails_FullAddSourceUid(builder, sourceUid)

def TrackDetails_FullAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    TrackDetails_FullAddCallSign(builder, callSign)

def TrackDetails_FullAddIdentAmp(builder, identAmp):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(identAmp), 0)

def AddIdentAmp(builder, identAmp):
    TrackDetails_FullAddIdentAmp(builder, identAmp)

def TrackDetails_FullAddSpaceAmp(builder, spaceAmp):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(spaceAmp), 0)

def AddSpaceAmp(builder, spaceAmp):
    TrackDetails_FullAddSpaceAmp(builder, spaceAmp)

def TrackDetails_FullAddSpaceAmpConf(builder, spaceAmpConf):
    builder.PrependInt32Slot(37, spaceAmpConf, 0)

def AddSpaceAmpConf(builder, spaceAmpConf):
    TrackDetails_FullAddSpaceAmpConf(builder, spaceAmpConf)

def TrackDetails_FullAddSpaceSpecType(builder, spaceSpecType):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(spaceSpecType), 0)

def AddSpaceSpecType(builder, spaceSpecType):
    TrackDetails_FullAddSpaceSpecType(builder, spaceSpecType)

def TrackDetails_FullAddAcftSubType(builder, acftSubType):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(acftSubType), 0)

def AddAcftSubType(builder, acftSubType):
    TrackDetails_FullAddAcftSubType(builder, acftSubType)

def TrackDetails_FullAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    TrackDetails_FullAddTs(builder, ts)

def TrackDetails_FullAddLaunchTime(builder, launchTime):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(launchTime), 0)

def AddLaunchTime(builder, launchTime):
    TrackDetails_FullAddLaunchTime(builder, launchTime)

def TrackDetails_FullAddImpactTime(builder, impactTime):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(impactTime), 0)

def AddImpactTime(builder, impactTime):
    TrackDetails_FullAddImpactTime(builder, impactTime)

def TrackDetails_FullAddFtnMsgTs(builder, ftnMsgTs):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(ftnMsgTs), 0)

def AddFtnMsgTs(builder, ftnMsgTs):
    TrackDetails_FullAddFtnMsgTs(builder, ftnMsgTs)

def TrackDetails_FullAddFtn(builder, ftn):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(ftn), 0)

def AddFtn(builder, ftn):
    TrackDetails_FullAddFtn(builder, ftn)

def TrackDetails_FullAddFtnCmd(builder, ftnCmd):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(ftnCmd), 0)

def AddFtnCmd(builder, ftnCmd):
    TrackDetails_FullAddFtnCmd(builder, ftnCmd)

def TrackDetails_FullAddRtnMsgTs(builder, rtnMsgTs):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(rtnMsgTs), 0)

def AddRtnMsgTs(builder, rtnMsgTs):
    TrackDetails_FullAddRtnMsgTs(builder, rtnMsgTs)

def TrackDetails_FullStartRtnMsgTsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRtnMsgTsVector(builder, numElems):
    return TrackDetails_FullStartRtnMsgTsVector(builder, numElems)

def TrackDetails_FullAddRtn(builder, rtn):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(rtn), 0)

def AddRtn(builder, rtn):
    TrackDetails_FullAddRtn(builder, rtn)

def TrackDetails_FullStartRtnVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRtnVector(builder, numElems):
    return TrackDetails_FullStartRtnVector(builder, numElems)

def TrackDetails_FullAddRtnTrkState(builder, rtnTrkState):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(rtnTrkState), 0)

def AddRtnTrkState(builder, rtnTrkState):
    TrackDetails_FullAddRtnTrkState(builder, rtnTrkState)

def TrackDetails_FullAddRtnCmd(builder, rtnCmd):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(rtnCmd), 0)

def AddRtnCmd(builder, rtnCmd):
    TrackDetails_FullAddRtnCmd(builder, rtnCmd)

def TrackDetails_FullAddSen(builder, sen):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(sen), 0)

def AddSen(builder, sen):
    TrackDetails_FullAddSen(builder, sen)

def TrackDetails_FullAddRptChxref(builder, rptChxref):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(rptChxref), 0)

def AddRptChxref(builder, rptChxref):
    TrackDetails_FullAddRptChxref(builder, rptChxref)

def TrackDetails_FullAddRptArchived(builder, rptArchived):
    builder.PrependBoolSlot(52, rptArchived, 0)

def AddRptArchived(builder, rptArchived):
    TrackDetails_FullAddRptArchived(builder, rptArchived)

def TrackDetails_FullAddSelfReport(builder, selfReport):
    builder.PrependBoolSlot(53, selfReport, 0)

def AddSelfReport(builder, selfReport):
    TrackDetails_FullAddSelfReport(builder, selfReport)

def TrackDetails_FullAddMil2525Bstr(builder, mil2525Bstr):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(mil2525Bstr), 0)

def AddMil2525Bstr(builder, mil2525Bstr):
    TrackDetails_FullAddMil2525Bstr(builder, mil2525Bstr)

def TrackDetails_FullAddTrnspdrId(builder, trnspdrId):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(trnspdrId), 0)

def AddTrnspdrId(builder, trnspdrId):
    TrackDetails_FullAddTrnspdrId(builder, trnspdrId)

def TrackDetails_FullAddTrnspdrType(builder, trnspdrType):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(trnspdrType), 0)

def AddTrnspdrType(builder, trnspdrType):
    TrackDetails_FullAddTrnspdrType(builder, trnspdrType)

def TrackDetails_FullAddEmitterName(builder, emitterName):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(emitterName), 0)

def AddEmitterName(builder, emitterName):
    TrackDetails_FullAddEmitterName(builder, emitterName)

def TrackDetails_FullAddInfoSource(builder, infoSource):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(infoSource), 0)

def AddInfoSource(builder, infoSource):
    TrackDetails_FullAddInfoSource(builder, infoSource)

def TrackDetails_FullAddBoosting(builder, boosting):
    builder.PrependBoolSlot(59, boosting, 0)

def AddBoosting(builder, boosting):
    TrackDetails_FullAddBoosting(builder, boosting)

def TrackDetails_FullAddFreq(builder, freq):
    builder.PrependFloat64Slot(60, freq, 0.0)

def AddFreq(builder, freq):
    TrackDetails_FullAddFreq(builder, freq)

def TrackDetails_FullAddMaxFreq(builder, maxFreq):
    builder.PrependFloat64Slot(61, maxFreq, 0.0)

def AddMaxFreq(builder, maxFreq):
    TrackDetails_FullAddMaxFreq(builder, maxFreq)

def TrackDetails_FullAddHarmonics(builder, harmonics):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(harmonics), 0)

def AddHarmonics(builder, harmonics):
    TrackDetails_FullAddHarmonics(builder, harmonics)

def TrackDetails_FullAddPri(builder, pri):
    builder.PrependFloat64Slot(63, pri, 0.0)

def AddPri(builder, pri):
    TrackDetails_FullAddPri(builder, pri)

def TrackDetails_FullAddPrf(builder, prf):
    builder.PrependFloat64Slot(64, prf, 0.0)

def AddPrf(builder, prf):
    TrackDetails_FullAddPrf(builder, prf)

def TrackDetails_FullAddPw(builder, pw):
    builder.PrependFloat64Slot(65, pw, 0.0)

def AddPw(builder, pw):
    TrackDetails_FullAddPw(builder, pw)

def TrackDetails_FullAddScanType(builder, scanType):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(scanType), 0)

def AddScanType(builder, scanType):
    TrackDetails_FullAddScanType(builder, scanType)

def TrackDetails_FullAddScanRate(builder, scanRate):
    builder.PrependFloat64Slot(67, scanRate, 0.0)

def AddScanRate(builder, scanRate):
    TrackDetails_FullAddScanRate(builder, scanRate)

def TrackDetails_FullAddScn(builder, scn):
    builder.PrependInt32Slot(68, scn, 0)

def AddScn(builder, scn):
    TrackDetails_FullAddScn(builder, scn)

def TrackDetails_FullAddCI(builder, cI):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(cI), 0)

def AddCI(builder, cI):
    TrackDetails_FullAddCI(builder, cI)

def TrackDetails_FullAddAngElev(builder, angElev):
    builder.PrependFloat64Slot(70, angElev, 0.0)

def AddAngElev(builder, angElev):
    TrackDetails_FullAddAngElev(builder, angElev)

def TrackDetails_FullAddLat(builder, lat):
    builder.PrependFloat64Slot(71, lat, 0.0)

def AddLat(builder, lat):
    TrackDetails_FullAddLat(builder, lat)

def TrackDetails_FullAddLon(builder, lon):
    builder.PrependFloat64Slot(72, lon, 0.0)

def AddLon(builder, lon):
    TrackDetails_FullAddLon(builder, lon)

def TrackDetails_FullAddLaunchLat(builder, launchLat):
    builder.PrependFloat64Slot(73, launchLat, 0.0)

def AddLaunchLat(builder, launchLat):
    TrackDetails_FullAddLaunchLat(builder, launchLat)

def TrackDetails_FullAddLaunchLon(builder, launchLon):
    builder.PrependFloat64Slot(74, launchLon, 0.0)

def AddLaunchLon(builder, launchLon):
    TrackDetails_FullAddLaunchLon(builder, launchLon)

def TrackDetails_FullAddImpactLat(builder, impactLat):
    builder.PrependFloat64Slot(75, impactLat, 0.0)

def AddImpactLat(builder, impactLat):
    TrackDetails_FullAddImpactLat(builder, impactLat)

def TrackDetails_FullAddImpactLon(builder, impactLon):
    builder.PrependFloat64Slot(76, impactLon, 0.0)

def AddImpactLon(builder, impactLon):
    TrackDetails_FullAddImpactLon(builder, impactLon)

def TrackDetails_FullAddPolarSingLocLat(builder, polarSingLocLat):
    builder.PrependFloat64Slot(77, polarSingLocLat, 0.0)

def AddPolarSingLocLat(builder, polarSingLocLat):
    TrackDetails_FullAddPolarSingLocLat(builder, polarSingLocLat)

def TrackDetails_FullAddPolarSingLocLon(builder, polarSingLocLon):
    builder.PrependFloat64Slot(78, polarSingLocLon, 0.0)

def AddPolarSingLocLon(builder, polarSingLocLon):
    TrackDetails_FullAddPolarSingLocLon(builder, polarSingLocLon)

def TrackDetails_FullAddAzCorrCenterLine(builder, azCorrCenterLine):
    builder.PrependFloat64Slot(79, azCorrCenterLine, 0.0)

def AddAzCorrCenterLine(builder, azCorrCenterLine):
    TrackDetails_FullAddAzCorrCenterLine(builder, azCorrCenterLine)

def TrackDetails_FullAddAzCorrArcWidth(builder, azCorrArcWidth):
    builder.PrependFloat64Slot(80, azCorrArcWidth, 0.0)

def AddAzCorrArcWidth(builder, azCorrArcWidth):
    TrackDetails_FullAddAzCorrArcWidth(builder, azCorrArcWidth)

def TrackDetails_FullAddErrSemiIntAxis(builder, errSemiIntAxis):
    builder.PrependFloat64Slot(81, errSemiIntAxis, 0.0)

def AddErrSemiIntAxis(builder, errSemiIntAxis):
    TrackDetails_FullAddErrSemiIntAxis(builder, errSemiIntAxis)

def TrackDetails_FullAddErrAreaOrient(builder, errAreaOrient):
    builder.PrependFloat64Slot(82, errAreaOrient, 0.0)

def AddErrAreaOrient(builder, errAreaOrient):
    TrackDetails_FullAddErrAreaOrient(builder, errAreaOrient)

def TrackDetails_FullAddErrSemiMajElev(builder, errSemiMajElev):
    builder.PrependFloat64Slot(83, errSemiMajElev, 0.0)

def AddErrSemiMajElev(builder, errSemiMajElev):
    TrackDetails_FullAddErrSemiMajElev(builder, errSemiMajElev)

def TrackDetails_FullAddErrGeoAreaSwitch(builder, errGeoAreaSwitch):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(errGeoAreaSwitch), 0)

def AddErrGeoAreaSwitch(builder, errGeoAreaSwitch):
    TrackDetails_FullAddErrGeoAreaSwitch(builder, errGeoAreaSwitch)

def TrackDetails_FullAddBurnoutAlt(builder, burnoutAlt):
    builder.PrependFloat64Slot(85, burnoutAlt, 0.0)

def AddBurnoutAlt(builder, burnoutAlt):
    TrackDetails_FullAddBurnoutAlt(builder, burnoutAlt)

def TrackDetails_FullAddTesEventId(builder, tesEventId):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(tesEventId), 0)

def AddTesEventId(builder, tesEventId):
    TrackDetails_FullAddTesEventId(builder, tesEventId)

def TrackDetails_FullAddSpd(builder, spd):
    builder.PrependFloat64Slot(87, spd, 0.0)

def AddSpd(builder, spd):
    TrackDetails_FullAddSpd(builder, spd)

def TrackDetails_FullAddAvgSpd(builder, avgSpd):
    builder.PrependFloat64Slot(88, avgSpd, 0.0)

def AddAvgSpd(builder, avgSpd):
    TrackDetails_FullAddAvgSpd(builder, avgSpd)

def TrackDetails_FullAddTol(builder, tol):
    builder.PrependFloat64Slot(89, tol, 0.0)

def AddTol(builder, tol):
    TrackDetails_FullAddTol(builder, tol)

def TrackDetails_FullAddAlt(builder, alt):
    builder.PrependFloat64Slot(90, alt, 0.0)

def AddAlt(builder, alt):
    TrackDetails_FullAddAlt(builder, alt)

def TrackDetails_FullAddHdng(builder, hdng):
    builder.PrependFloat64Slot(91, hdng, 0.0)

def AddHdng(builder, hdng):
    TrackDetails_FullAddHdng(builder, hdng)

def TrackDetails_FullAddCourse(builder, course):
    builder.PrependFloat64Slot(92, course, 0.0)

def AddCourse(builder, course):
    TrackDetails_FullAddCourse(builder, course)

def TrackDetails_FullAddPropRpm(builder, propRpm):
    builder.PrependFloat64Slot(93, propRpm, 0.0)

def AddPropRpm(builder, propRpm):
    TrackDetails_FullAddPropRpm(builder, propRpm)

def TrackDetails_FullAddTpk(builder, tpk):
    builder.PrependFloat64Slot(94, tpk, 0.0)

def AddTpk(builder, tpk):
    TrackDetails_FullAddTpk(builder, tpk)

def TrackDetails_FullAddCoopLocInd(builder, coopLocInd):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(coopLocInd), 0)

def AddCoopLocInd(builder, coopLocInd):
    TrackDetails_FullAddCoopLocInd(builder, coopLocInd)

def TrackDetails_FullAddManeuverInd(builder, maneuverInd):
    builder.PrependUOffsetTRelativeSlot(96, flatbuffers.number_types.UOffsetTFlags.py_type(maneuverInd), 0)

def AddManeuverInd(builder, maneuverInd):
    TrackDetails_FullAddManeuverInd(builder, maneuverInd)

def TrackDetails_FullAddLaunchAouType(builder, launchAouType):
    builder.PrependUOffsetTRelativeSlot(97, flatbuffers.number_types.UOffsetTFlags.py_type(launchAouType), 0)

def AddLaunchAouType(builder, launchAouType):
    TrackDetails_FullAddLaunchAouType(builder, launchAouType)

def TrackDetails_FullAddLaunchAouData(builder, launchAouData):
    builder.PrependUOffsetTRelativeSlot(98, flatbuffers.number_types.UOffsetTFlags.py_type(launchAouData), 0)

def AddLaunchAouData(builder, launchAouData):
    TrackDetails_FullAddLaunchAouData(builder, launchAouData)

def TrackDetails_FullStartLaunchAouDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLaunchAouDataVector(builder, numElems):
    return TrackDetails_FullStartLaunchAouDataVector(builder, numElems)

def TrackDetails_FullAddImpactAouType(builder, impactAouType):
    builder.PrependUOffsetTRelativeSlot(99, flatbuffers.number_types.UOffsetTFlags.py_type(impactAouType), 0)

def AddImpactAouType(builder, impactAouType):
    TrackDetails_FullAddImpactAouType(builder, impactAouType)

def TrackDetails_FullAddImpactAouData(builder, impactAouData):
    builder.PrependUOffsetTRelativeSlot(100, flatbuffers.number_types.UOffsetTFlags.py_type(impactAouData), 0)

def AddImpactAouData(builder, impactAouData):
    TrackDetails_FullAddImpactAouData(builder, impactAouData)

def TrackDetails_FullStartImpactAouDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartImpactAouDataVector(builder, numElems):
    return TrackDetails_FullStartImpactAouDataVector(builder, numElems)

def TrackDetails_FullAddAouRptType(builder, aouRptType):
    builder.PrependUOffsetTRelativeSlot(101, flatbuffers.number_types.UOffsetTFlags.py_type(aouRptType), 0)

def AddAouRptType(builder, aouRptType):
    TrackDetails_FullAddAouRptType(builder, aouRptType)

def TrackDetails_FullAddAouRptData(builder, aouRptData):
    builder.PrependUOffsetTRelativeSlot(102, flatbuffers.number_types.UOffsetTFlags.py_type(aouRptData), 0)

def AddAouRptData(builder, aouRptData):
    TrackDetails_FullAddAouRptData(builder, aouRptData)

def TrackDetails_FullStartAouRptDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAouRptDataVector(builder, numElems):
    return TrackDetails_FullStartAouRptDataVector(builder, numElems)

def TrackDetails_FullAddEcefPos(builder, ecefPos):
    builder.PrependUOffsetTRelativeSlot(103, flatbuffers.number_types.UOffsetTFlags.py_type(ecefPos), 0)

def AddEcefPos(builder, ecefPos):
    TrackDetails_FullAddEcefPos(builder, ecefPos)

def TrackDetails_FullStartEcefPosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEcefPosVector(builder, numElems):
    return TrackDetails_FullStartEcefPosVector(builder, numElems)

def TrackDetails_FullAddEcefVel(builder, ecefVel):
    builder.PrependUOffsetTRelativeSlot(104, flatbuffers.number_types.UOffsetTFlags.py_type(ecefVel), 0)

def AddEcefVel(builder, ecefVel):
    TrackDetails_FullAddEcefVel(builder, ecefVel)

def TrackDetails_FullStartEcefVelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEcefVelVector(builder, numElems):
    return TrackDetails_FullStartEcefVelVector(builder, numElems)

def TrackDetails_FullAddContainment(builder, containment):
    builder.PrependFloat64Slot(105, containment, 0.0)

def AddContainment(builder, containment):
    TrackDetails_FullAddContainment(builder, containment)

def TrackDetails_FullAddCpa(builder, cpa):
    builder.PrependFloat64Slot(106, cpa, 0.0)

def AddCpa(builder, cpa):
    TrackDetails_FullAddCpa(builder, cpa)

def TrackDetails_FullAddTcpa(builder, tcpa):
    builder.PrependUOffsetTRelativeSlot(107, flatbuffers.number_types.UOffsetTFlags.py_type(tcpa), 0)

def AddTcpa(builder, tcpa):
    TrackDetails_FullAddTcpa(builder, tcpa)

def TrackDetails_FullAddNavStatus(builder, navStatus):
    builder.PrependUOffsetTRelativeSlot(108, flatbuffers.number_types.UOffsetTFlags.py_type(navStatus), 0)

def AddNavStatus(builder, navStatus):
    TrackDetails_FullAddNavStatus(builder, navStatus)

def TrackDetails_FullAddPosDeviceType(builder, posDeviceType):
    builder.PrependUOffsetTRelativeSlot(109, flatbuffers.number_types.UOffsetTFlags.py_type(posDeviceType), 0)

def AddPosDeviceType(builder, posDeviceType):
    TrackDetails_FullAddPosDeviceType(builder, posDeviceType)

def TrackDetails_FullAddAton(builder, aton):
    builder.PrependUOffsetTRelativeSlot(110, flatbuffers.number_types.UOffsetTFlags.py_type(aton), 0)

def AddAton(builder, aton):
    TrackDetails_FullAddAton(builder, aton)

def TrackDetails_FullAddOffPosInd(builder, offPosInd):
    builder.PrependUOffsetTRelativeSlot(111, flatbuffers.number_types.UOffsetTFlags.py_type(offPosInd), 0)

def AddOffPosInd(builder, offPosInd):
    TrackDetails_FullAddOffPosInd(builder, offPosInd)

def TrackDetails_FullAddAntennaRefDimensions(builder, antennaRefDimensions):
    builder.PrependUOffsetTRelativeSlot(112, flatbuffers.number_types.UOffsetTFlags.py_type(antennaRefDimensions), 0)

def AddAntennaRefDimensions(builder, antennaRefDimensions):
    TrackDetails_FullAddAntennaRefDimensions(builder, antennaRefDimensions)

def TrackDetails_FullStartAntennaRefDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAntennaRefDimensionsVector(builder, numElems):
    return TrackDetails_FullStartAntennaRefDimensionsVector(builder, numElems)

def TrackDetails_FullAddShipClass(builder, shipClass):
    builder.PrependUOffsetTRelativeSlot(113, flatbuffers.number_types.UOffsetTFlags.py_type(shipClass), 0)

def AddShipClass(builder, shipClass):
    TrackDetails_FullAddShipClass(builder, shipClass)

def TrackDetails_FullAddImon(builder, imon):
    builder.PrependInt32Slot(114, imon, 0)

def AddImon(builder, imon):
    TrackDetails_FullAddImon(builder, imon)

def TrackDetails_FullAddMmsi(builder, mmsi):
    builder.PrependInt32Slot(115, mmsi, 0)

def AddMmsi(builder, mmsi):
    TrackDetails_FullAddMmsi(builder, mmsi)

def TrackDetails_FullAddDraught(builder, draught):
    builder.PrependFloat64Slot(116, draught, 0.0)

def AddDraught(builder, draught):
    TrackDetails_FullAddDraught(builder, draught)

def TrackDetails_FullAddLength(builder, length):
    builder.PrependFloat64Slot(117, length, 0.0)

def AddLength(builder, length):
    TrackDetails_FullAddLength(builder, length)

def TrackDetails_FullAddWidth(builder, width):
    builder.PrependFloat64Slot(118, width, 0.0)

def AddWidth(builder, width):
    TrackDetails_FullAddWidth(builder, width)

def TrackDetails_FullAddCargoType(builder, cargoType):
    builder.PrependUOffsetTRelativeSlot(119, flatbuffers.number_types.UOffsetTFlags.py_type(cargoType), 0)

def AddCargoType(builder, cargoType):
    TrackDetails_FullAddCargoType(builder, cargoType)

def TrackDetails_FullAddAppGrp(builder, appGrp):
    builder.PrependUOffsetTRelativeSlot(120, flatbuffers.number_types.UOffsetTFlags.py_type(appGrp), 0)

def AddAppGrp(builder, appGrp):
    TrackDetails_FullAddAppGrp(builder, appGrp)

def TrackDetails_FullAddHullProf(builder, hullProf):
    builder.PrependUOffsetTRelativeSlot(121, flatbuffers.number_types.UOffsetTFlags.py_type(hullProf), 0)

def AddHullProf(builder, hullProf):
    TrackDetails_FullAddHullProf(builder, hullProf)

def TrackDetails_FullAddPropType(builder, propType):
    builder.PrependUOffsetTRelativeSlot(122, flatbuffers.number_types.UOffsetTFlags.py_type(propType), 0)

def AddPropType(builder, propType):
    TrackDetails_FullAddPropType(builder, propType)

def TrackDetails_FullAddNumBlades(builder, numBlades):
    builder.PrependInt32Slot(123, numBlades, 0)

def AddNumBlades(builder, numBlades):
    TrackDetails_FullAddNumBlades(builder, numBlades)

def TrackDetails_FullAddNumShafts(builder, numShafts):
    builder.PrependInt32Slot(124, numShafts, 0)

def AddNumShafts(builder, numShafts):
    TrackDetails_FullAddNumShafts(builder, numShafts)

def TrackDetails_FullAddSternType(builder, sternType):
    builder.PrependUOffsetTRelativeSlot(125, flatbuffers.number_types.UOffsetTFlags.py_type(sternType), 0)

def AddSternType(builder, sternType):
    TrackDetails_FullAddSternType(builder, sternType)

def TrackDetails_FullAddVslWt(builder, vslWt):
    builder.PrependFloat64Slot(126, vslWt, 0.0)

def AddVslWt(builder, vslWt):
    TrackDetails_FullAddVslWt(builder, vslWt)

def TrackDetails_FullAddArrTime(builder, arrTime):
    builder.PrependUOffsetTRelativeSlot(127, flatbuffers.number_types.UOffsetTFlags.py_type(arrTime), 0)

def AddArrTime(builder, arrTime):
    TrackDetails_FullAddArrTime(builder, arrTime)

def TrackDetails_FullAddArrFlag(builder, arrFlag):
    builder.PrependUOffsetTRelativeSlot(128, flatbuffers.number_types.UOffsetTFlags.py_type(arrFlag), 0)

def AddArrFlag(builder, arrFlag):
    TrackDetails_FullAddArrFlag(builder, arrFlag)

def TrackDetails_FullAddArrCargo(builder, arrCargo):
    builder.PrependUOffsetTRelativeSlot(129, flatbuffers.number_types.UOffsetTFlags.py_type(arrCargo), 0)

def AddArrCargo(builder, arrCargo):
    TrackDetails_FullAddArrCargo(builder, arrCargo)

def TrackDetails_FullAddArrPort(builder, arrPort):
    builder.PrependUOffsetTRelativeSlot(130, flatbuffers.number_types.UOffsetTFlags.py_type(arrPort), 0)

def AddArrPort(builder, arrPort):
    TrackDetails_FullAddArrPort(builder, arrPort)

def TrackDetails_FullAddDepPort(builder, depPort):
    builder.PrependUOffsetTRelativeSlot(131, flatbuffers.number_types.UOffsetTFlags.py_type(depPort), 0)

def AddDepPort(builder, depPort):
    TrackDetails_FullAddDepPort(builder, depPort)

def TrackDetails_FullAddDepFlag(builder, depFlag):
    builder.PrependUOffsetTRelativeSlot(132, flatbuffers.number_types.UOffsetTFlags.py_type(depFlag), 0)

def AddDepFlag(builder, depFlag):
    TrackDetails_FullAddDepFlag(builder, depFlag)

def TrackDetails_FullAddDepCargo(builder, depCargo):
    builder.PrependUOffsetTRelativeSlot(133, flatbuffers.number_types.UOffsetTFlags.py_type(depCargo), 0)

def AddDepCargo(builder, depCargo):
    TrackDetails_FullAddDepCargo(builder, depCargo)

def TrackDetails_FullAddDesFlag(builder, desFlag):
    builder.PrependUOffsetTRelativeSlot(134, flatbuffers.number_types.UOffsetTFlags.py_type(desFlag), 0)

def AddDesFlag(builder, desFlag):
    TrackDetails_FullAddDesFlag(builder, desFlag)

def TrackDetails_FullAddDesCargo(builder, desCargo):
    builder.PrependUOffsetTRelativeSlot(135, flatbuffers.number_types.UOffsetTFlags.py_type(desCargo), 0)

def AddDesCargo(builder, desCargo):
    TrackDetails_FullAddDesCargo(builder, desCargo)

def TrackDetails_FullAddDestination(builder, destination):
    builder.PrependUOffsetTRelativeSlot(136, flatbuffers.number_types.UOffsetTFlags.py_type(destination), 0)

def AddDestination(builder, destination):
    TrackDetails_FullAddDestination(builder, destination)

def TrackDetails_FullAddEta(builder, eta):
    builder.PrependUOffsetTRelativeSlot(137, flatbuffers.number_types.UOffsetTFlags.py_type(eta), 0)

def AddEta(builder, eta):
    TrackDetails_FullAddEta(builder, eta)

def TrackDetails_FullAddEtd(builder, etd):
    builder.PrependUOffsetTRelativeSlot(138, flatbuffers.number_types.UOffsetTFlags.py_type(etd), 0)

def AddEtd(builder, etd):
    TrackDetails_FullAddEtd(builder, etd)

def TrackDetails_FullAddIff(builder, iff):
    builder.PrependUOffsetTRelativeSlot(139, flatbuffers.number_types.UOffsetTFlags.py_type(iff), 0)

def AddIff(builder, iff):
    TrackDetails_FullAddIff(builder, iff)

def TrackDetails_FullAddEmgInd(builder, emgInd):
    builder.PrependBoolSlot(140, emgInd, 0)

def AddEmgInd(builder, emgInd):
    TrackDetails_FullAddEmgInd(builder, emgInd)

def TrackDetails_FullAddDropPtInd(builder, dropPtInd):
    builder.PrependBoolSlot(141, dropPtInd, 0)

def AddDropPtInd(builder, dropPtInd):
    TrackDetails_FullAddDropPtInd(builder, dropPtInd)

def TrackDetails_FullAddReinforced(builder, reinforced):
    builder.PrependBoolSlot(142, reinforced, 0)

def AddReinforced(builder, reinforced):
    TrackDetails_FullAddReinforced(builder, reinforced)

def TrackDetails_FullAddReduced(builder, reduced):
    builder.PrependBoolSlot(143, reduced, 0)

def AddReduced(builder, reduced):
    TrackDetails_FullAddReduced(builder, reduced)

def TrackDetails_FullAddHq(builder, hq):
    builder.PrependBoolSlot(144, hq, 0)

def AddHq(builder, hq):
    TrackDetails_FullAddHq(builder, hq)

def TrackDetails_FullAddDummy(builder, dummy):
    builder.PrependBoolSlot(145, dummy, 0)

def AddDummy(builder, dummy):
    TrackDetails_FullAddDummy(builder, dummy)

def TrackDetails_FullAddTaskForce(builder, taskForce):
    builder.PrependBoolSlot(146, taskForce, 0)

def AddTaskForce(builder, taskForce):
    TrackDetails_FullAddTaskForce(builder, taskForce)

def TrackDetails_FullAddFeint(builder, feint):
    builder.PrependBoolSlot(147, feint, 0)

def AddFeint(builder, feint):
    TrackDetails_FullAddFeint(builder, feint)

def TrackDetails_FullAddInstallation(builder, installation):
    builder.PrependBoolSlot(148, installation, 0)

def AddInstallation(builder, installation):
    TrackDetails_FullAddInstallation(builder, installation)

def TrackDetails_FullAddStaffCmts(builder, staffCmts):
    builder.PrependUOffsetTRelativeSlot(149, flatbuffers.number_types.UOffsetTFlags.py_type(staffCmts), 0)

def AddStaffCmts(builder, staffCmts):
    TrackDetails_FullAddStaffCmts(builder, staffCmts)

def TrackDetails_FullAddAddInfo(builder, addInfo):
    builder.PrependUOffsetTRelativeSlot(150, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)

def AddAddInfo(builder, addInfo):
    TrackDetails_FullAddAddInfo(builder, addInfo)

def TrackDetails_FullAddEvalRating(builder, evalRating):
    builder.PrependUOffsetTRelativeSlot(151, flatbuffers.number_types.UOffsetTFlags.py_type(evalRating), 0)

def AddEvalRating(builder, evalRating):
    TrackDetails_FullAddEvalRating(builder, evalRating)

def TrackDetails_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(152, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    TrackDetails_FullAddCreatedAt(builder, createdAt)

def TrackDetails_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(153, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    TrackDetails_FullAddCreatedBy(builder, createdBy)

def TrackDetails_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(154, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    TrackDetails_FullAddSource(builder, source)

def TrackDetails_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(155, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    TrackDetails_FullAddOrigin(builder, origin)

def TrackDetails_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(156, dataMode, 0)

def AddDataMode(builder, dataMode):
    TrackDetails_FullAddDataMode(builder, dataMode)

def TrackDetails_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(157, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    TrackDetails_FullAddOrigNetwork(builder, origNetwork)

def TrackDetails_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrackDetails_FullEnd(builder)

try:
    from typing import List
except:
    pass

class TrackDetails_FullT(object):

    # TrackDetails_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.env = 0  # type: int
        self.msgType = None  # type: str
        self.hullNum = None  # type: str
        self.pif = None  # type: str
        self.sconum = None  # type: str
        self.ntds = None  # type: str
        self.disId = None  # type: str
        self.midbCat = None  # type: str
        self.beNumber = None  # type: str
        self.oSuffix = None  # type: str
        self.pin = None  # type: str
        self.lostTrkInd = False  # type: bool
        self.muidSrcTrk = None  # type: str
        self.muidSrc = None  # type: str
        self.mslStatus = None  # type: str
        self.trkConf = 0.0  # type: float
        self.trkQual = 0  # type: int
        self.alert = None  # type: str
        self.origXref = None  # type: str
        self.elnot1 = None  # type: str
        self.elnot2 = None  # type: str
        self.objIdent = 0  # type: int
        self.objType = None  # type: str
        self.objPlat = None  # type: str
        self.objAct = None  # type: str
        self.objNat = None  # type: str
        self.name = None  # type: str
        self.shortName = None  # type: str
        self.trkId = None  # type: str
        self.trkNum = None  # type: str
        self.trkScope = None  # type: str
        self.sourceUid = None  # type: str
        self.callSign = None  # type: str
        self.identAmp = None  # type: str
        self.spaceAmp = None  # type: str
        self.spaceAmpConf = 0  # type: int
        self.spaceSpecType = None  # type: str
        self.acftSubType = None  # type: str
        self.ts = None  # type: str
        self.launchTime = None  # type: str
        self.impactTime = None  # type: str
        self.ftnMsgTs = None  # type: str
        self.ftn = None  # type: str
        self.ftnCmd = None  # type: str
        self.rtnMsgTs = None  # type: List[str]
        self.rtn = None  # type: List[str]
        self.rtnTrkState = None  # type: str
        self.rtnCmd = None  # type: str
        self.sen = None  # type: str
        self.rptChxref = None  # type: str
        self.rptArchived = False  # type: bool
        self.selfReport = False  # type: bool
        self.mil2525Bstr = None  # type: str
        self.trnspdrId = None  # type: str
        self.trnspdrType = None  # type: str
        self.emitterName = None  # type: str
        self.infoSource = None  # type: str
        self.boosting = False  # type: bool
        self.freq = 0.0  # type: float
        self.maxFreq = 0.0  # type: float
        self.harmonics = None  # type: str
        self.pri = 0.0  # type: float
        self.prf = 0.0  # type: float
        self.pw = 0.0  # type: float
        self.scanType = None  # type: str
        self.scanRate = 0.0  # type: float
        self.scn = 0  # type: int
        self.cI = None  # type: str
        self.angElev = 0.0  # type: float
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.launchLat = 0.0  # type: float
        self.launchLon = 0.0  # type: float
        self.impactLat = 0.0  # type: float
        self.impactLon = 0.0  # type: float
        self.polarSingLocLat = 0.0  # type: float
        self.polarSingLocLon = 0.0  # type: float
        self.azCorrCenterLine = 0.0  # type: float
        self.azCorrArcWidth = 0.0  # type: float
        self.errSemiIntAxis = 0.0  # type: float
        self.errAreaOrient = 0.0  # type: float
        self.errSemiMajElev = 0.0  # type: float
        self.errGeoAreaSwitch = None  # type: str
        self.burnoutAlt = 0.0  # type: float
        self.tesEventId = None  # type: str
        self.spd = 0.0  # type: float
        self.avgSpd = 0.0  # type: float
        self.tol = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.hdng = 0.0  # type: float
        self.course = 0.0  # type: float
        self.propRpm = 0.0  # type: float
        self.tpk = 0.0  # type: float
        self.coopLocInd = None  # type: str
        self.maneuverInd = None  # type: str
        self.launchAouType = None  # type: str
        self.launchAouData = None  # type: List[str]
        self.impactAouType = None  # type: str
        self.impactAouData = None  # type: List[str]
        self.aouRptType = None  # type: str
        self.aouRptData = None  # type: List[str]
        self.ecefPos = None  # type: List[str]
        self.ecefVel = None  # type: List[str]
        self.containment = 0.0  # type: float
        self.cpa = 0.0  # type: float
        self.tcpa = None  # type: str
        self.navStatus = None  # type: str
        self.posDeviceType = None  # type: str
        self.aton = None  # type: str
        self.offPosInd = None  # type: str
        self.antennaRefDimensions = None  # type: List[str]
        self.shipClass = None  # type: str
        self.imon = 0  # type: int
        self.mmsi = 0  # type: int
        self.draught = 0.0  # type: float
        self.length = 0.0  # type: float
        self.width = 0.0  # type: float
        self.cargoType = None  # type: str
        self.appGrp = None  # type: str
        self.hullProf = None  # type: str
        self.propType = None  # type: str
        self.numBlades = 0  # type: int
        self.numShafts = 0  # type: int
        self.sternType = None  # type: str
        self.vslWt = 0.0  # type: float
        self.arrTime = None  # type: str
        self.arrFlag = None  # type: str
        self.arrCargo = None  # type: str
        self.arrPort = None  # type: str
        self.depPort = None  # type: str
        self.depFlag = None  # type: str
        self.depCargo = None  # type: str
        self.desFlag = None  # type: str
        self.desCargo = None  # type: str
        self.destination = None  # type: str
        self.eta = None  # type: str
        self.etd = None  # type: str
        self.iff = None  # type: str
        self.emgInd = False  # type: bool
        self.dropPtInd = False  # type: bool
        self.reinforced = False  # type: bool
        self.reduced = False  # type: bool
        self.hq = False  # type: bool
        self.dummy = False  # type: bool
        self.taskForce = False  # type: bool
        self.feint = False  # type: bool
        self.installation = False  # type: bool
        self.staffCmts = None  # type: str
        self.addInfo = None  # type: str
        self.evalRating = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trackDetailsFull = TrackDetails_Full()
        trackDetailsFull.Init(buf, pos)
        return cls.InitFromObj(trackDetailsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trackDetailsFull):
        x = TrackDetails_FullT()
        x._UnPack(trackDetailsFull)
        return x

    # TrackDetails_FullT
    def _UnPack(self, trackDetailsFull):
        if trackDetailsFull is None:
            return
        self.id = trackDetailsFull.Id()
        self.classificationMarking = trackDetailsFull.ClassificationMarking()
        self.env = trackDetailsFull.Env()
        self.msgType = trackDetailsFull.MsgType()
        self.hullNum = trackDetailsFull.HullNum()
        self.pif = trackDetailsFull.Pif()
        self.sconum = trackDetailsFull.Sconum()
        self.ntds = trackDetailsFull.Ntds()
        self.disId = trackDetailsFull.DisId()
        self.midbCat = trackDetailsFull.MidbCat()
        self.beNumber = trackDetailsFull.BeNumber()
        self.oSuffix = trackDetailsFull.OSuffix()
        self.pin = trackDetailsFull.Pin()
        self.lostTrkInd = trackDetailsFull.LostTrkInd()
        self.muidSrcTrk = trackDetailsFull.MuidSrcTrk()
        self.muidSrc = trackDetailsFull.MuidSrc()
        self.mslStatus = trackDetailsFull.MslStatus()
        self.trkConf = trackDetailsFull.TrkConf()
        self.trkQual = trackDetailsFull.TrkQual()
        self.alert = trackDetailsFull.Alert()
        self.origXref = trackDetailsFull.OrigXref()
        self.elnot1 = trackDetailsFull.Elnot1()
        self.elnot2 = trackDetailsFull.Elnot2()
        self.objIdent = trackDetailsFull.ObjIdent()
        self.objType = trackDetailsFull.ObjType()
        self.objPlat = trackDetailsFull.ObjPlat()
        self.objAct = trackDetailsFull.ObjAct()
        self.objNat = trackDetailsFull.ObjNat()
        self.name = trackDetailsFull.Name()
        self.shortName = trackDetailsFull.ShortName()
        self.trkId = trackDetailsFull.TrkId()
        self.trkNum = trackDetailsFull.TrkNum()
        self.trkScope = trackDetailsFull.TrkScope()
        self.sourceUid = trackDetailsFull.SourceUid()
        self.callSign = trackDetailsFull.CallSign()
        self.identAmp = trackDetailsFull.IdentAmp()
        self.spaceAmp = trackDetailsFull.SpaceAmp()
        self.spaceAmpConf = trackDetailsFull.SpaceAmpConf()
        self.spaceSpecType = trackDetailsFull.SpaceSpecType()
        self.acftSubType = trackDetailsFull.AcftSubType()
        self.ts = trackDetailsFull.Ts()
        self.launchTime = trackDetailsFull.LaunchTime()
        self.impactTime = trackDetailsFull.ImpactTime()
        self.ftnMsgTs = trackDetailsFull.FtnMsgTs()
        self.ftn = trackDetailsFull.Ftn()
        self.ftnCmd = trackDetailsFull.FtnCmd()
        if not trackDetailsFull.RtnMsgTsIsNone():
            self.rtnMsgTs = []
            for i in range(trackDetailsFull.RtnMsgTsLength()):
                self.rtnMsgTs.append(trackDetailsFull.RtnMsgTs(i))
        if not trackDetailsFull.RtnIsNone():
            self.rtn = []
            for i in range(trackDetailsFull.RtnLength()):
                self.rtn.append(trackDetailsFull.Rtn(i))
        self.rtnTrkState = trackDetailsFull.RtnTrkState()
        self.rtnCmd = trackDetailsFull.RtnCmd()
        self.sen = trackDetailsFull.Sen()
        self.rptChxref = trackDetailsFull.RptChxref()
        self.rptArchived = trackDetailsFull.RptArchived()
        self.selfReport = trackDetailsFull.SelfReport()
        self.mil2525Bstr = trackDetailsFull.Mil2525Bstr()
        self.trnspdrId = trackDetailsFull.TrnspdrId()
        self.trnspdrType = trackDetailsFull.TrnspdrType()
        self.emitterName = trackDetailsFull.EmitterName()
        self.infoSource = trackDetailsFull.InfoSource()
        self.boosting = trackDetailsFull.Boosting()
        self.freq = trackDetailsFull.Freq()
        self.maxFreq = trackDetailsFull.MaxFreq()
        self.harmonics = trackDetailsFull.Harmonics()
        self.pri = trackDetailsFull.Pri()
        self.prf = trackDetailsFull.Prf()
        self.pw = trackDetailsFull.Pw()
        self.scanType = trackDetailsFull.ScanType()
        self.scanRate = trackDetailsFull.ScanRate()
        self.scn = trackDetailsFull.Scn()
        self.cI = trackDetailsFull.CI()
        self.angElev = trackDetailsFull.AngElev()
        self.lat = trackDetailsFull.Lat()
        self.lon = trackDetailsFull.Lon()
        self.launchLat = trackDetailsFull.LaunchLat()
        self.launchLon = trackDetailsFull.LaunchLon()
        self.impactLat = trackDetailsFull.ImpactLat()
        self.impactLon = trackDetailsFull.ImpactLon()
        self.polarSingLocLat = trackDetailsFull.PolarSingLocLat()
        self.polarSingLocLon = trackDetailsFull.PolarSingLocLon()
        self.azCorrCenterLine = trackDetailsFull.AzCorrCenterLine()
        self.azCorrArcWidth = trackDetailsFull.AzCorrArcWidth()
        self.errSemiIntAxis = trackDetailsFull.ErrSemiIntAxis()
        self.errAreaOrient = trackDetailsFull.ErrAreaOrient()
        self.errSemiMajElev = trackDetailsFull.ErrSemiMajElev()
        self.errGeoAreaSwitch = trackDetailsFull.ErrGeoAreaSwitch()
        self.burnoutAlt = trackDetailsFull.BurnoutAlt()
        self.tesEventId = trackDetailsFull.TesEventId()
        self.spd = trackDetailsFull.Spd()
        self.avgSpd = trackDetailsFull.AvgSpd()
        self.tol = trackDetailsFull.Tol()
        self.alt = trackDetailsFull.Alt()
        self.hdng = trackDetailsFull.Hdng()
        self.course = trackDetailsFull.Course()
        self.propRpm = trackDetailsFull.PropRpm()
        self.tpk = trackDetailsFull.Tpk()
        self.coopLocInd = trackDetailsFull.CoopLocInd()
        self.maneuverInd = trackDetailsFull.ManeuverInd()
        self.launchAouType = trackDetailsFull.LaunchAouType()
        if not trackDetailsFull.LaunchAouDataIsNone():
            self.launchAouData = []
            for i in range(trackDetailsFull.LaunchAouDataLength()):
                self.launchAouData.append(trackDetailsFull.LaunchAouData(i))
        self.impactAouType = trackDetailsFull.ImpactAouType()
        if not trackDetailsFull.ImpactAouDataIsNone():
            self.impactAouData = []
            for i in range(trackDetailsFull.ImpactAouDataLength()):
                self.impactAouData.append(trackDetailsFull.ImpactAouData(i))
        self.aouRptType = trackDetailsFull.AouRptType()
        if not trackDetailsFull.AouRptDataIsNone():
            self.aouRptData = []
            for i in range(trackDetailsFull.AouRptDataLength()):
                self.aouRptData.append(trackDetailsFull.AouRptData(i))
        if not trackDetailsFull.EcefPosIsNone():
            self.ecefPos = []
            for i in range(trackDetailsFull.EcefPosLength()):
                self.ecefPos.append(trackDetailsFull.EcefPos(i))
        if not trackDetailsFull.EcefVelIsNone():
            self.ecefVel = []
            for i in range(trackDetailsFull.EcefVelLength()):
                self.ecefVel.append(trackDetailsFull.EcefVel(i))
        self.containment = trackDetailsFull.Containment()
        self.cpa = trackDetailsFull.Cpa()
        self.tcpa = trackDetailsFull.Tcpa()
        self.navStatus = trackDetailsFull.NavStatus()
        self.posDeviceType = trackDetailsFull.PosDeviceType()
        self.aton = trackDetailsFull.Aton()
        self.offPosInd = trackDetailsFull.OffPosInd()
        if not trackDetailsFull.AntennaRefDimensionsIsNone():
            self.antennaRefDimensions = []
            for i in range(trackDetailsFull.AntennaRefDimensionsLength()):
                self.antennaRefDimensions.append(trackDetailsFull.AntennaRefDimensions(i))
        self.shipClass = trackDetailsFull.ShipClass()
        self.imon = trackDetailsFull.Imon()
        self.mmsi = trackDetailsFull.Mmsi()
        self.draught = trackDetailsFull.Draught()
        self.length = trackDetailsFull.Length()
        self.width = trackDetailsFull.Width()
        self.cargoType = trackDetailsFull.CargoType()
        self.appGrp = trackDetailsFull.AppGrp()
        self.hullProf = trackDetailsFull.HullProf()
        self.propType = trackDetailsFull.PropType()
        self.numBlades = trackDetailsFull.NumBlades()
        self.numShafts = trackDetailsFull.NumShafts()
        self.sternType = trackDetailsFull.SternType()
        self.vslWt = trackDetailsFull.VslWt()
        self.arrTime = trackDetailsFull.ArrTime()
        self.arrFlag = trackDetailsFull.ArrFlag()
        self.arrCargo = trackDetailsFull.ArrCargo()
        self.arrPort = trackDetailsFull.ArrPort()
        self.depPort = trackDetailsFull.DepPort()
        self.depFlag = trackDetailsFull.DepFlag()
        self.depCargo = trackDetailsFull.DepCargo()
        self.desFlag = trackDetailsFull.DesFlag()
        self.desCargo = trackDetailsFull.DesCargo()
        self.destination = trackDetailsFull.Destination()
        self.eta = trackDetailsFull.Eta()
        self.etd = trackDetailsFull.Etd()
        self.iff = trackDetailsFull.Iff()
        self.emgInd = trackDetailsFull.EmgInd()
        self.dropPtInd = trackDetailsFull.DropPtInd()
        self.reinforced = trackDetailsFull.Reinforced()
        self.reduced = trackDetailsFull.Reduced()
        self.hq = trackDetailsFull.Hq()
        self.dummy = trackDetailsFull.Dummy()
        self.taskForce = trackDetailsFull.TaskForce()
        self.feint = trackDetailsFull.Feint()
        self.installation = trackDetailsFull.Installation()
        self.staffCmts = trackDetailsFull.StaffCmts()
        self.addInfo = trackDetailsFull.AddInfo()
        self.evalRating = trackDetailsFull.EvalRating()
        self.createdAt = trackDetailsFull.CreatedAt()
        self.createdBy = trackDetailsFull.CreatedBy()
        self.source = trackDetailsFull.Source()
        self.origin = trackDetailsFull.Origin()
        self.dataMode = trackDetailsFull.DataMode()
        self.origNetwork = trackDetailsFull.OrigNetwork()

    # TrackDetails_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.msgType is not None:
            msgType = builder.CreateString(self.msgType)
        if self.hullNum is not None:
            hullNum = builder.CreateString(self.hullNum)
        if self.pif is not None:
            pif = builder.CreateString(self.pif)
        if self.sconum is not None:
            sconum = builder.CreateString(self.sconum)
        if self.ntds is not None:
            ntds = builder.CreateString(self.ntds)
        if self.disId is not None:
            disId = builder.CreateString(self.disId)
        if self.midbCat is not None:
            midbCat = builder.CreateString(self.midbCat)
        if self.beNumber is not None:
            beNumber = builder.CreateString(self.beNumber)
        if self.oSuffix is not None:
            oSuffix = builder.CreateString(self.oSuffix)
        if self.pin is not None:
            pin = builder.CreateString(self.pin)
        if self.muidSrcTrk is not None:
            muidSrcTrk = builder.CreateString(self.muidSrcTrk)
        if self.muidSrc is not None:
            muidSrc = builder.CreateString(self.muidSrc)
        if self.mslStatus is not None:
            mslStatus = builder.CreateString(self.mslStatus)
        if self.alert is not None:
            alert = builder.CreateString(self.alert)
        if self.origXref is not None:
            origXref = builder.CreateString(self.origXref)
        if self.elnot1 is not None:
            elnot1 = builder.CreateString(self.elnot1)
        if self.elnot2 is not None:
            elnot2 = builder.CreateString(self.elnot2)
        if self.objType is not None:
            objType = builder.CreateString(self.objType)
        if self.objPlat is not None:
            objPlat = builder.CreateString(self.objPlat)
        if self.objAct is not None:
            objAct = builder.CreateString(self.objAct)
        if self.objNat is not None:
            objNat = builder.CreateString(self.objNat)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.shortName is not None:
            shortName = builder.CreateString(self.shortName)
        if self.trkId is not None:
            trkId = builder.CreateString(self.trkId)
        if self.trkNum is not None:
            trkNum = builder.CreateString(self.trkNum)
        if self.trkScope is not None:
            trkScope = builder.CreateString(self.trkScope)
        if self.sourceUid is not None:
            sourceUid = builder.CreateString(self.sourceUid)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.identAmp is not None:
            identAmp = builder.CreateString(self.identAmp)
        if self.spaceAmp is not None:
            spaceAmp = builder.CreateString(self.spaceAmp)
        if self.spaceSpecType is not None:
            spaceSpecType = builder.CreateString(self.spaceSpecType)
        if self.acftSubType is not None:
            acftSubType = builder.CreateString(self.acftSubType)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.launchTime is not None:
            launchTime = builder.CreateString(self.launchTime)
        if self.impactTime is not None:
            impactTime = builder.CreateString(self.impactTime)
        if self.ftnMsgTs is not None:
            ftnMsgTs = builder.CreateString(self.ftnMsgTs)
        if self.ftn is not None:
            ftn = builder.CreateString(self.ftn)
        if self.ftnCmd is not None:
            ftnCmd = builder.CreateString(self.ftnCmd)
        if self.rtnMsgTs is not None:
            rtnMsgTslist = []
            for i in range(len(self.rtnMsgTs)):
                rtnMsgTslist.append(builder.CreateString(self.rtnMsgTs[i]))
            TrackDetails_FullStartRtnMsgTsVector(builder, len(self.rtnMsgTs))
            for i in reversed(range(len(self.rtnMsgTs))):
                builder.PrependUOffsetTRelative(rtnMsgTslist[i])
            rtnMsgTs = builder.EndVector()
        if self.rtn is not None:
            rtnlist = []
            for i in range(len(self.rtn)):
                rtnlist.append(builder.CreateString(self.rtn[i]))
            TrackDetails_FullStartRtnVector(builder, len(self.rtn))
            for i in reversed(range(len(self.rtn))):
                builder.PrependUOffsetTRelative(rtnlist[i])
            rtn = builder.EndVector()
        if self.rtnTrkState is not None:
            rtnTrkState = builder.CreateString(self.rtnTrkState)
        if self.rtnCmd is not None:
            rtnCmd = builder.CreateString(self.rtnCmd)
        if self.sen is not None:
            sen = builder.CreateString(self.sen)
        if self.rptChxref is not None:
            rptChxref = builder.CreateString(self.rptChxref)
        if self.mil2525Bstr is not None:
            mil2525Bstr = builder.CreateString(self.mil2525Bstr)
        if self.trnspdrId is not None:
            trnspdrId = builder.CreateString(self.trnspdrId)
        if self.trnspdrType is not None:
            trnspdrType = builder.CreateString(self.trnspdrType)
        if self.emitterName is not None:
            emitterName = builder.CreateString(self.emitterName)
        if self.infoSource is not None:
            infoSource = builder.CreateString(self.infoSource)
        if self.harmonics is not None:
            harmonics = builder.CreateString(self.harmonics)
        if self.scanType is not None:
            scanType = builder.CreateString(self.scanType)
        if self.cI is not None:
            cI = builder.CreateString(self.cI)
        if self.errGeoAreaSwitch is not None:
            errGeoAreaSwitch = builder.CreateString(self.errGeoAreaSwitch)
        if self.tesEventId is not None:
            tesEventId = builder.CreateString(self.tesEventId)
        if self.coopLocInd is not None:
            coopLocInd = builder.CreateString(self.coopLocInd)
        if self.maneuverInd is not None:
            maneuverInd = builder.CreateString(self.maneuverInd)
        if self.launchAouType is not None:
            launchAouType = builder.CreateString(self.launchAouType)
        if self.launchAouData is not None:
            launchAouDatalist = []
            for i in range(len(self.launchAouData)):
                launchAouDatalist.append(builder.CreateString(self.launchAouData[i]))
            TrackDetails_FullStartLaunchAouDataVector(builder, len(self.launchAouData))
            for i in reversed(range(len(self.launchAouData))):
                builder.PrependUOffsetTRelative(launchAouDatalist[i])
            launchAouData = builder.EndVector()
        if self.impactAouType is not None:
            impactAouType = builder.CreateString(self.impactAouType)
        if self.impactAouData is not None:
            impactAouDatalist = []
            for i in range(len(self.impactAouData)):
                impactAouDatalist.append(builder.CreateString(self.impactAouData[i]))
            TrackDetails_FullStartImpactAouDataVector(builder, len(self.impactAouData))
            for i in reversed(range(len(self.impactAouData))):
                builder.PrependUOffsetTRelative(impactAouDatalist[i])
            impactAouData = builder.EndVector()
        if self.aouRptType is not None:
            aouRptType = builder.CreateString(self.aouRptType)
        if self.aouRptData is not None:
            aouRptDatalist = []
            for i in range(len(self.aouRptData)):
                aouRptDatalist.append(builder.CreateString(self.aouRptData[i]))
            TrackDetails_FullStartAouRptDataVector(builder, len(self.aouRptData))
            for i in reversed(range(len(self.aouRptData))):
                builder.PrependUOffsetTRelative(aouRptDatalist[i])
            aouRptData = builder.EndVector()
        if self.ecefPos is not None:
            ecefPoslist = []
            for i in range(len(self.ecefPos)):
                ecefPoslist.append(builder.CreateString(self.ecefPos[i]))
            TrackDetails_FullStartEcefPosVector(builder, len(self.ecefPos))
            for i in reversed(range(len(self.ecefPos))):
                builder.PrependUOffsetTRelative(ecefPoslist[i])
            ecefPos = builder.EndVector()
        if self.ecefVel is not None:
            ecefVellist = []
            for i in range(len(self.ecefVel)):
                ecefVellist.append(builder.CreateString(self.ecefVel[i]))
            TrackDetails_FullStartEcefVelVector(builder, len(self.ecefVel))
            for i in reversed(range(len(self.ecefVel))):
                builder.PrependUOffsetTRelative(ecefVellist[i])
            ecefVel = builder.EndVector()
        if self.tcpa is not None:
            tcpa = builder.CreateString(self.tcpa)
        if self.navStatus is not None:
            navStatus = builder.CreateString(self.navStatus)
        if self.posDeviceType is not None:
            posDeviceType = builder.CreateString(self.posDeviceType)
        if self.aton is not None:
            aton = builder.CreateString(self.aton)
        if self.offPosInd is not None:
            offPosInd = builder.CreateString(self.offPosInd)
        if self.antennaRefDimensions is not None:
            antennaRefDimensionslist = []
            for i in range(len(self.antennaRefDimensions)):
                antennaRefDimensionslist.append(builder.CreateString(self.antennaRefDimensions[i]))
            TrackDetails_FullStartAntennaRefDimensionsVector(builder, len(self.antennaRefDimensions))
            for i in reversed(range(len(self.antennaRefDimensions))):
                builder.PrependUOffsetTRelative(antennaRefDimensionslist[i])
            antennaRefDimensions = builder.EndVector()
        if self.shipClass is not None:
            shipClass = builder.CreateString(self.shipClass)
        if self.cargoType is not None:
            cargoType = builder.CreateString(self.cargoType)
        if self.appGrp is not None:
            appGrp = builder.CreateString(self.appGrp)
        if self.hullProf is not None:
            hullProf = builder.CreateString(self.hullProf)
        if self.propType is not None:
            propType = builder.CreateString(self.propType)
        if self.sternType is not None:
            sternType = builder.CreateString(self.sternType)
        if self.arrTime is not None:
            arrTime = builder.CreateString(self.arrTime)
        if self.arrFlag is not None:
            arrFlag = builder.CreateString(self.arrFlag)
        if self.arrCargo is not None:
            arrCargo = builder.CreateString(self.arrCargo)
        if self.arrPort is not None:
            arrPort = builder.CreateString(self.arrPort)
        if self.depPort is not None:
            depPort = builder.CreateString(self.depPort)
        if self.depFlag is not None:
            depFlag = builder.CreateString(self.depFlag)
        if self.depCargo is not None:
            depCargo = builder.CreateString(self.depCargo)
        if self.desFlag is not None:
            desFlag = builder.CreateString(self.desFlag)
        if self.desCargo is not None:
            desCargo = builder.CreateString(self.desCargo)
        if self.destination is not None:
            destination = builder.CreateString(self.destination)
        if self.eta is not None:
            eta = builder.CreateString(self.eta)
        if self.etd is not None:
            etd = builder.CreateString(self.etd)
        if self.iff is not None:
            iff = builder.CreateString(self.iff)
        if self.staffCmts is not None:
            staffCmts = builder.CreateString(self.staffCmts)
        if self.addInfo is not None:
            addInfo = builder.CreateString(self.addInfo)
        if self.evalRating is not None:
            evalRating = builder.CreateString(self.evalRating)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        TrackDetails_FullStart(builder)
        if self.id is not None:
            TrackDetails_FullAddId(builder, id)
        if self.classificationMarking is not None:
            TrackDetails_FullAddClassificationMarking(builder, classificationMarking)
        TrackDetails_FullAddEnv(builder, self.env)
        if self.msgType is not None:
            TrackDetails_FullAddMsgType(builder, msgType)
        if self.hullNum is not None:
            TrackDetails_FullAddHullNum(builder, hullNum)
        if self.pif is not None:
            TrackDetails_FullAddPif(builder, pif)
        if self.sconum is not None:
            TrackDetails_FullAddSconum(builder, sconum)
        if self.ntds is not None:
            TrackDetails_FullAddNtds(builder, ntds)
        if self.disId is not None:
            TrackDetails_FullAddDisId(builder, disId)
        if self.midbCat is not None:
            TrackDetails_FullAddMidbCat(builder, midbCat)
        if self.beNumber is not None:
            TrackDetails_FullAddBeNumber(builder, beNumber)
        if self.oSuffix is not None:
            TrackDetails_FullAddOSuffix(builder, oSuffix)
        if self.pin is not None:
            TrackDetails_FullAddPin(builder, pin)
        TrackDetails_FullAddLostTrkInd(builder, self.lostTrkInd)
        if self.muidSrcTrk is not None:
            TrackDetails_FullAddMuidSrcTrk(builder, muidSrcTrk)
        if self.muidSrc is not None:
            TrackDetails_FullAddMuidSrc(builder, muidSrc)
        if self.mslStatus is not None:
            TrackDetails_FullAddMslStatus(builder, mslStatus)
        TrackDetails_FullAddTrkConf(builder, self.trkConf)
        TrackDetails_FullAddTrkQual(builder, self.trkQual)
        if self.alert is not None:
            TrackDetails_FullAddAlert(builder, alert)
        if self.origXref is not None:
            TrackDetails_FullAddOrigXref(builder, origXref)
        if self.elnot1 is not None:
            TrackDetails_FullAddElnot1(builder, elnot1)
        if self.elnot2 is not None:
            TrackDetails_FullAddElnot2(builder, elnot2)
        TrackDetails_FullAddObjIdent(builder, self.objIdent)
        if self.objType is not None:
            TrackDetails_FullAddObjType(builder, objType)
        if self.objPlat is not None:
            TrackDetails_FullAddObjPlat(builder, objPlat)
        if self.objAct is not None:
            TrackDetails_FullAddObjAct(builder, objAct)
        if self.objNat is not None:
            TrackDetails_FullAddObjNat(builder, objNat)
        if self.name is not None:
            TrackDetails_FullAddName(builder, name)
        if self.shortName is not None:
            TrackDetails_FullAddShortName(builder, shortName)
        if self.trkId is not None:
            TrackDetails_FullAddTrkId(builder, trkId)
        if self.trkNum is not None:
            TrackDetails_FullAddTrkNum(builder, trkNum)
        if self.trkScope is not None:
            TrackDetails_FullAddTrkScope(builder, trkScope)
        if self.sourceUid is not None:
            TrackDetails_FullAddSourceUid(builder, sourceUid)
        if self.callSign is not None:
            TrackDetails_FullAddCallSign(builder, callSign)
        if self.identAmp is not None:
            TrackDetails_FullAddIdentAmp(builder, identAmp)
        if self.spaceAmp is not None:
            TrackDetails_FullAddSpaceAmp(builder, spaceAmp)
        TrackDetails_FullAddSpaceAmpConf(builder, self.spaceAmpConf)
        if self.spaceSpecType is not None:
            TrackDetails_FullAddSpaceSpecType(builder, spaceSpecType)
        if self.acftSubType is not None:
            TrackDetails_FullAddAcftSubType(builder, acftSubType)
        if self.ts is not None:
            TrackDetails_FullAddTs(builder, ts)
        if self.launchTime is not None:
            TrackDetails_FullAddLaunchTime(builder, launchTime)
        if self.impactTime is not None:
            TrackDetails_FullAddImpactTime(builder, impactTime)
        if self.ftnMsgTs is not None:
            TrackDetails_FullAddFtnMsgTs(builder, ftnMsgTs)
        if self.ftn is not None:
            TrackDetails_FullAddFtn(builder, ftn)
        if self.ftnCmd is not None:
            TrackDetails_FullAddFtnCmd(builder, ftnCmd)
        if self.rtnMsgTs is not None:
            TrackDetails_FullAddRtnMsgTs(builder, rtnMsgTs)
        if self.rtn is not None:
            TrackDetails_FullAddRtn(builder, rtn)
        if self.rtnTrkState is not None:
            TrackDetails_FullAddRtnTrkState(builder, rtnTrkState)
        if self.rtnCmd is not None:
            TrackDetails_FullAddRtnCmd(builder, rtnCmd)
        if self.sen is not None:
            TrackDetails_FullAddSen(builder, sen)
        if self.rptChxref is not None:
            TrackDetails_FullAddRptChxref(builder, rptChxref)
        TrackDetails_FullAddRptArchived(builder, self.rptArchived)
        TrackDetails_FullAddSelfReport(builder, self.selfReport)
        if self.mil2525Bstr is not None:
            TrackDetails_FullAddMil2525Bstr(builder, mil2525Bstr)
        if self.trnspdrId is not None:
            TrackDetails_FullAddTrnspdrId(builder, trnspdrId)
        if self.trnspdrType is not None:
            TrackDetails_FullAddTrnspdrType(builder, trnspdrType)
        if self.emitterName is not None:
            TrackDetails_FullAddEmitterName(builder, emitterName)
        if self.infoSource is not None:
            TrackDetails_FullAddInfoSource(builder, infoSource)
        TrackDetails_FullAddBoosting(builder, self.boosting)
        TrackDetails_FullAddFreq(builder, self.freq)
        TrackDetails_FullAddMaxFreq(builder, self.maxFreq)
        if self.harmonics is not None:
            TrackDetails_FullAddHarmonics(builder, harmonics)
        TrackDetails_FullAddPri(builder, self.pri)
        TrackDetails_FullAddPrf(builder, self.prf)
        TrackDetails_FullAddPw(builder, self.pw)
        if self.scanType is not None:
            TrackDetails_FullAddScanType(builder, scanType)
        TrackDetails_FullAddScanRate(builder, self.scanRate)
        TrackDetails_FullAddScn(builder, self.scn)
        if self.cI is not None:
            TrackDetails_FullAddCI(builder, cI)
        TrackDetails_FullAddAngElev(builder, self.angElev)
        TrackDetails_FullAddLat(builder, self.lat)
        TrackDetails_FullAddLon(builder, self.lon)
        TrackDetails_FullAddLaunchLat(builder, self.launchLat)
        TrackDetails_FullAddLaunchLon(builder, self.launchLon)
        TrackDetails_FullAddImpactLat(builder, self.impactLat)
        TrackDetails_FullAddImpactLon(builder, self.impactLon)
        TrackDetails_FullAddPolarSingLocLat(builder, self.polarSingLocLat)
        TrackDetails_FullAddPolarSingLocLon(builder, self.polarSingLocLon)
        TrackDetails_FullAddAzCorrCenterLine(builder, self.azCorrCenterLine)
        TrackDetails_FullAddAzCorrArcWidth(builder, self.azCorrArcWidth)
        TrackDetails_FullAddErrSemiIntAxis(builder, self.errSemiIntAxis)
        TrackDetails_FullAddErrAreaOrient(builder, self.errAreaOrient)
        TrackDetails_FullAddErrSemiMajElev(builder, self.errSemiMajElev)
        if self.errGeoAreaSwitch is not None:
            TrackDetails_FullAddErrGeoAreaSwitch(builder, errGeoAreaSwitch)
        TrackDetails_FullAddBurnoutAlt(builder, self.burnoutAlt)
        if self.tesEventId is not None:
            TrackDetails_FullAddTesEventId(builder, tesEventId)
        TrackDetails_FullAddSpd(builder, self.spd)
        TrackDetails_FullAddAvgSpd(builder, self.avgSpd)
        TrackDetails_FullAddTol(builder, self.tol)
        TrackDetails_FullAddAlt(builder, self.alt)
        TrackDetails_FullAddHdng(builder, self.hdng)
        TrackDetails_FullAddCourse(builder, self.course)
        TrackDetails_FullAddPropRpm(builder, self.propRpm)
        TrackDetails_FullAddTpk(builder, self.tpk)
        if self.coopLocInd is not None:
            TrackDetails_FullAddCoopLocInd(builder, coopLocInd)
        if self.maneuverInd is not None:
            TrackDetails_FullAddManeuverInd(builder, maneuverInd)
        if self.launchAouType is not None:
            TrackDetails_FullAddLaunchAouType(builder, launchAouType)
        if self.launchAouData is not None:
            TrackDetails_FullAddLaunchAouData(builder, launchAouData)
        if self.impactAouType is not None:
            TrackDetails_FullAddImpactAouType(builder, impactAouType)
        if self.impactAouData is not None:
            TrackDetails_FullAddImpactAouData(builder, impactAouData)
        if self.aouRptType is not None:
            TrackDetails_FullAddAouRptType(builder, aouRptType)
        if self.aouRptData is not None:
            TrackDetails_FullAddAouRptData(builder, aouRptData)
        if self.ecefPos is not None:
            TrackDetails_FullAddEcefPos(builder, ecefPos)
        if self.ecefVel is not None:
            TrackDetails_FullAddEcefVel(builder, ecefVel)
        TrackDetails_FullAddContainment(builder, self.containment)
        TrackDetails_FullAddCpa(builder, self.cpa)
        if self.tcpa is not None:
            TrackDetails_FullAddTcpa(builder, tcpa)
        if self.navStatus is not None:
            TrackDetails_FullAddNavStatus(builder, navStatus)
        if self.posDeviceType is not None:
            TrackDetails_FullAddPosDeviceType(builder, posDeviceType)
        if self.aton is not None:
            TrackDetails_FullAddAton(builder, aton)
        if self.offPosInd is not None:
            TrackDetails_FullAddOffPosInd(builder, offPosInd)
        if self.antennaRefDimensions is not None:
            TrackDetails_FullAddAntennaRefDimensions(builder, antennaRefDimensions)
        if self.shipClass is not None:
            TrackDetails_FullAddShipClass(builder, shipClass)
        TrackDetails_FullAddImon(builder, self.imon)
        TrackDetails_FullAddMmsi(builder, self.mmsi)
        TrackDetails_FullAddDraught(builder, self.draught)
        TrackDetails_FullAddLength(builder, self.length)
        TrackDetails_FullAddWidth(builder, self.width)
        if self.cargoType is not None:
            TrackDetails_FullAddCargoType(builder, cargoType)
        if self.appGrp is not None:
            TrackDetails_FullAddAppGrp(builder, appGrp)
        if self.hullProf is not None:
            TrackDetails_FullAddHullProf(builder, hullProf)
        if self.propType is not None:
            TrackDetails_FullAddPropType(builder, propType)
        TrackDetails_FullAddNumBlades(builder, self.numBlades)
        TrackDetails_FullAddNumShafts(builder, self.numShafts)
        if self.sternType is not None:
            TrackDetails_FullAddSternType(builder, sternType)
        TrackDetails_FullAddVslWt(builder, self.vslWt)
        if self.arrTime is not None:
            TrackDetails_FullAddArrTime(builder, arrTime)
        if self.arrFlag is not None:
            TrackDetails_FullAddArrFlag(builder, arrFlag)
        if self.arrCargo is not None:
            TrackDetails_FullAddArrCargo(builder, arrCargo)
        if self.arrPort is not None:
            TrackDetails_FullAddArrPort(builder, arrPort)
        if self.depPort is not None:
            TrackDetails_FullAddDepPort(builder, depPort)
        if self.depFlag is not None:
            TrackDetails_FullAddDepFlag(builder, depFlag)
        if self.depCargo is not None:
            TrackDetails_FullAddDepCargo(builder, depCargo)
        if self.desFlag is not None:
            TrackDetails_FullAddDesFlag(builder, desFlag)
        if self.desCargo is not None:
            TrackDetails_FullAddDesCargo(builder, desCargo)
        if self.destination is not None:
            TrackDetails_FullAddDestination(builder, destination)
        if self.eta is not None:
            TrackDetails_FullAddEta(builder, eta)
        if self.etd is not None:
            TrackDetails_FullAddEtd(builder, etd)
        if self.iff is not None:
            TrackDetails_FullAddIff(builder, iff)
        TrackDetails_FullAddEmgInd(builder, self.emgInd)
        TrackDetails_FullAddDropPtInd(builder, self.dropPtInd)
        TrackDetails_FullAddReinforced(builder, self.reinforced)
        TrackDetails_FullAddReduced(builder, self.reduced)
        TrackDetails_FullAddHq(builder, self.hq)
        TrackDetails_FullAddDummy(builder, self.dummy)
        TrackDetails_FullAddTaskForce(builder, self.taskForce)
        TrackDetails_FullAddFeint(builder, self.feint)
        TrackDetails_FullAddInstallation(builder, self.installation)
        if self.staffCmts is not None:
            TrackDetails_FullAddStaffCmts(builder, staffCmts)
        if self.addInfo is not None:
            TrackDetails_FullAddAddInfo(builder, addInfo)
        if self.evalRating is not None:
            TrackDetails_FullAddEvalRating(builder, evalRating)
        if self.createdAt is not None:
            TrackDetails_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            TrackDetails_FullAddCreatedBy(builder, createdBy)
        if self.source is not None:
            TrackDetails_FullAddSource(builder, source)
        if self.origin is not None:
            TrackDetails_FullAddOrigin(builder, origin)
        TrackDetails_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            TrackDetails_FullAddOrigNetwork(builder, origNetwork)
        trackDetailsFull = TrackDetails_FullEnd(builder)
        return trackDetailsFull
