# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
class AircraftSortie_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftSortie_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftSortie_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftSortie_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftSortie_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: AIRCRAFTSORTIE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AircraftSortie_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AircraftSortie_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sortie identifier provided by the originating source.
    # Example: /// Example: A0640
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def OrigSortieId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the aircraft.
    # Example: /// Example: REF-AIRCRAFT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def IdAircraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate Aircraft Identifier provided by source.
    # Example: /// Example: ALT-AIRCRAFT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def AircraftAltId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft assigned to this sortie.
    # Example: /// Example: Tail_1
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftSortie_Ingest
    def TailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series designation assigned to this sortie.
    # Example: /// Example: C017A
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def AircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
    # Example: /// Example: AE123C
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftSortie_Ingest
    def AircraftAdsb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
    # Example: /// Example: 2021-01-01
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def SortieDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The external system line number of this sortie.
    # Example: /// Example: 99
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def LineNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The unique identifier of the mission to which this sortie is assigned.
    # Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def IdMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission ID according to the source system.
    # Example: /// Example: ABLE
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftSortie_Ingest
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Air Mobility Command (AMC) mission number of the sortie.
    # Example: /// Example: AJM512571333
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def AmcMsnNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of mission (e.g. SAAM, CHNL, etc.).
    # Example: /// Example: SAAM
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def AmcMsnType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign assigned to the aircraft on this sortie.
    # Example: /// Example: BAKER
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftSortie_Ingest
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Joint Chiefs of Staff priority of this sortie.
    # Example: /// Example: 1A3
    # Constraints: Minimum length = 0, Maximum length = 3
    # AircraftSortie_Ingest
    def JcsPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The planned primary Standard Conventional Load of the aircraft for this sortie.
    # Example: /// Example: ABC
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftSortie_Ingest
    def PrimaryScl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The planned secondary Standard Conventional Load of the aircraft for this sortie.
    # Example: /// Example: ABC
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftSortie_Ingest
    def SecondaryScl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Aircraft configuration required for the mission.
    # Example: /// Example: C-1
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftSortie_Ingest
    def ReqConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
    # Example: /// Example: C-1
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftSortie_Ingest
    def CargoConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mass of fuel required for this leg of the sortie, in kilograms.
    # Example: /// Example: 20000.1
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def FuelReq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Liquid oxygen required on the aircraft for the crew compartment, in liters.
    # Example: /// Example: 12.3
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def OxyReqCrew(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Liquid oxygen onboard the aircraft for the crew compartment, in liters.
    # Example: /// Example: 12.3
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def OxyOnCrew(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Liquid oxygen required on the aircraft for the troop compartment, in liters.
    # Example: /// Example: 12.3
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def OxyReqPax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Liquid oxygen onboard the aircraft for the troop compartment, in liters.
    # Example: /// Example: 12.3
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def OxyOnPax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Alert Status code.
    # Example: /// Example: C1
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftSortie_Ingest
    def AlertStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The amount of time allowed between launch order and takeoff, in seconds.
    # Example: /// Example: 22
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def AlertStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The current state of this sortie.
    # Example: /// Example: Park
    # Constraints: Minimum length = 0, Maximum length = 32
    # AircraftSortie_Ingest
    def CurrentState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The itinerary identifier of the departure location.
    # Example: /// Example: 100
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def DepItinerary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The departure International Civil Aviation Organization (ICAO) of this sortie.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # AircraftSortie_Ingest
    def DepIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The departure International Aviation Transport Association (IATA) code of this sortie.
    # Example: /// Example: AAA
    # Constraints: Minimum length = 0, Maximum length = 3
    # AircraftSortie_Ingest
    def DepIata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The departure Federal Aviation Administration (FAA) code of this sortie.
    # Example: /// Example: FAA1
    # Constraints: Minimum length = 0, Maximum length = 5
    # AircraftSortie_Ingest
    def DepFaa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def PlannedDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def EstDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual departure time, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def ActualDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T00:55:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def EstBlockOutTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T00:55:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def ActualBlockOutTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Purpose code at the departure location of this sortie.
    # Example: /// Example: P
    # Constraints: Minimum length = 0, Maximum length = 10
    # AircraftSortie_Ingest
    def DepPurposeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The itinerary identifier of the arrival location.
    # Example: /// Example: 101
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def ArrItinerary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The arrival International Civil Aviation Organization (ICAO) of this sortie.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # AircraftSortie_Ingest
    def ArrIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The arrival International Aviation Transport Association (IATA) code of this sortie.
    # Example: /// Example: AAA
    # Constraints: Minimum length = 0, Maximum length = 3
    # AircraftSortie_Ingest
    def ArrIata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The arrival Federal Aviation Administration (FAA) code of this sortie.
    # Example: /// Example: FAA1
    # Constraints: Minimum length = 0, Maximum length = 5
    # AircraftSortie_Ingest
    def ArrFaa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def PlannedArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def EstArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual arrival time, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def ActualArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:06:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def EstBlockInTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-01T01:06:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def ActualBlockInTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Purpose code at the arrival location of this sortie.
    # Example: /// Example: O
    # Constraints: Minimum length = 0, Maximum length = 10
    # AircraftSortie_Ingest
    def ArrPurposeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-01-03T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def Dhd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reason the aircraft must return to home station by its due home date.
    # Example: /// Example: Due for maintenance
    # Constraints: Minimum length = 0, Maximum length = 32
    # AircraftSortie_Ingest
    def DhdReason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Aircraft event text.
    # Example: /// Example: Example event
    # Constraints: Minimum length = 0, Maximum length = 128
    # AircraftSortie_Ingest
    def AircraftEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
    # Example: /// Example: OPS
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftSortie_Ingest
    def Soe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The leg number of this sortie.
    # Example: /// Example: 14
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def LegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The planned flight time for this sortie, in minutes.
    # Example: /// Example: 104.5
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def FlightTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Scheduled ground time, in minutes.
    # Example: /// Example: 387.8
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def GndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # AircraftSortie_Ingest
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The version number of the crew paper.
    # Example: /// Example: 1.1
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftSortie_Ingest
    def PapersVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the uploaded PDF.
    # Example: /// Example: ExampleFileName
    # Constraints: Minimum length = 0, Maximum length = 512
    # AircraftSortie_Ingest
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Size of the supporting PDF, in bytes.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def Filesize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The status of the supporting document.
    # Example: /// Example: PUBLISHED
    # Constraints: Minimum length = 0, Maximum length = 9
    # AircraftSortie_Ingest
    def PaperStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The prior permission required (PPR) status.
    # Example: /// Example: PENDING
    # Constraints: Minimum length = 0, Maximum length = 22
    # AircraftSortie_Ingest
    def PprStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
    # Example: /// Example: 2024-09-09T01:01:01.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def MissionUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The primary delay code.
    # Example: /// Example: 500
    # Constraints: Minimum length = 0, Maximum length = 10
    # AircraftSortie_Ingest
    def DelayCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The last name of the aircraft commander.
    # Example: /// Example: Smith
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftSortie_Ingest
    def CommanderName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
    # Example: /// Example: 7198675309
    # Constraints: Minimum length = 0, Maximum length = 45
    # AircraftSortie_Ingest
    def FmDeskNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
    # Example: /// Example: Smith
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftSortie_Ingest
    def FmName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
    # Example: /// Example: R
    # Constraints: Minimum length = 0, Maximum length = 2
    # AircraftSortie_Ingest
    def RvnReq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The number of passengers tasked for this sortie.
    # Example: /// Example: 17
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def Passengers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The POI parking location.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 32
    # AircraftSortie_Ingest
    def ParkingLoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning the sortie objective.
    # Example: /// Example: Some objective remark about aircraft A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AircraftSortie_Ingest
    def ObjectiveRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning the aircraft.
    # Example: /// Example: Some remark about aircraft A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AircraftSortie_Ingest
    def AircraftRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning the schedule.
    # Example: /// Example: Some schedule remark about aircraft A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AircraftSortie_Ingest
    def ScheduleRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks concerning the results of this sortie.
    # Example: /// Example: Some remark about aircraft A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AircraftSortie_Ingest
    def ResultRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftSortie_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftSortie_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftSortie_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftSortie_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftSortie_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AircraftSortie_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # AircraftSortie_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AircraftSortie_IngestStart(builder):
    builder.StartObject(80)

def Start(builder):
    AircraftSortie_IngestStart(builder)

def AircraftSortie_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AircraftSortie_IngestAddId(builder, id)

def AircraftSortie_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AircraftSortie_IngestAddClassificationMarking(builder, classificationMarking)

def AircraftSortie_IngestAddOrigSortieId(builder, origSortieId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origSortieId), 0)

def AddOrigSortieId(builder, origSortieId):
    AircraftSortie_IngestAddOrigSortieId(builder, origSortieId)

def AircraftSortie_IngestAddIdAircraft(builder, idAircraft):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idAircraft), 0)

def AddIdAircraft(builder, idAircraft):
    AircraftSortie_IngestAddIdAircraft(builder, idAircraft)

def AircraftSortie_IngestAddAircraftAltId(builder, aircraftAltId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftAltId), 0)

def AddAircraftAltId(builder, aircraftAltId):
    AircraftSortie_IngestAddAircraftAltId(builder, aircraftAltId)

def AircraftSortie_IngestAddTailNumber(builder, tailNumber):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tailNumber), 0)

def AddTailNumber(builder, tailNumber):
    AircraftSortie_IngestAddTailNumber(builder, tailNumber)

def AircraftSortie_IngestAddAircraftMds(builder, aircraftMds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftMds), 0)

def AddAircraftMds(builder, aircraftMds):
    AircraftSortie_IngestAddAircraftMds(builder, aircraftMds)

def AircraftSortie_IngestAddAircraftAdsb(builder, aircraftAdsb):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftAdsb), 0)

def AddAircraftAdsb(builder, aircraftAdsb):
    AircraftSortie_IngestAddAircraftAdsb(builder, aircraftAdsb)

def AircraftSortie_IngestAddSortieDate(builder, sortieDate):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(sortieDate), 0)

def AddSortieDate(builder, sortieDate):
    AircraftSortie_IngestAddSortieDate(builder, sortieDate)

def AircraftSortie_IngestAddLineNumber(builder, lineNumber):
    builder.PrependInt32Slot(9, lineNumber, 0)

def AddLineNumber(builder, lineNumber):
    AircraftSortie_IngestAddLineNumber(builder, lineNumber)

def AircraftSortie_IngestAddIdMission(builder, idMission):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(idMission), 0)

def AddIdMission(builder, idMission):
    AircraftSortie_IngestAddIdMission(builder, idMission)

def AircraftSortie_IngestAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def AddMissionId(builder, missionId):
    AircraftSortie_IngestAddMissionId(builder, missionId)

def AircraftSortie_IngestAddAmcMsnNum(builder, amcMsnNum):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(amcMsnNum), 0)

def AddAmcMsnNum(builder, amcMsnNum):
    AircraftSortie_IngestAddAmcMsnNum(builder, amcMsnNum)

def AircraftSortie_IngestAddAmcMsnType(builder, amcMsnType):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(amcMsnType), 0)

def AddAmcMsnType(builder, amcMsnType):
    AircraftSortie_IngestAddAmcMsnType(builder, amcMsnType)

def AircraftSortie_IngestAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    AircraftSortie_IngestAddCallSign(builder, callSign)

def AircraftSortie_IngestAddJcsPriority(builder, jcsPriority):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(jcsPriority), 0)

def AddJcsPriority(builder, jcsPriority):
    AircraftSortie_IngestAddJcsPriority(builder, jcsPriority)

def AircraftSortie_IngestAddPrimaryScl(builder, primaryScl):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(primaryScl), 0)

def AddPrimaryScl(builder, primaryScl):
    AircraftSortie_IngestAddPrimaryScl(builder, primaryScl)

def AircraftSortie_IngestAddSecondaryScl(builder, secondaryScl):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(secondaryScl), 0)

def AddSecondaryScl(builder, secondaryScl):
    AircraftSortie_IngestAddSecondaryScl(builder, secondaryScl)

def AircraftSortie_IngestAddReqConfig(builder, reqConfig):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(reqConfig), 0)

def AddReqConfig(builder, reqConfig):
    AircraftSortie_IngestAddReqConfig(builder, reqConfig)

def AircraftSortie_IngestAddCargoConfig(builder, cargoConfig):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(cargoConfig), 0)

def AddCargoConfig(builder, cargoConfig):
    AircraftSortie_IngestAddCargoConfig(builder, cargoConfig)

def AircraftSortie_IngestAddFuelReq(builder, fuelReq):
    builder.PrependFloat64Slot(20, fuelReq, 0.0)

def AddFuelReq(builder, fuelReq):
    AircraftSortie_IngestAddFuelReq(builder, fuelReq)

def AircraftSortie_IngestAddOxyReqCrew(builder, oxyReqCrew):
    builder.PrependFloat64Slot(21, oxyReqCrew, 0.0)

def AddOxyReqCrew(builder, oxyReqCrew):
    AircraftSortie_IngestAddOxyReqCrew(builder, oxyReqCrew)

def AircraftSortie_IngestAddOxyOnCrew(builder, oxyOnCrew):
    builder.PrependFloat64Slot(22, oxyOnCrew, 0.0)

def AddOxyOnCrew(builder, oxyOnCrew):
    AircraftSortie_IngestAddOxyOnCrew(builder, oxyOnCrew)

def AircraftSortie_IngestAddOxyReqPax(builder, oxyReqPax):
    builder.PrependFloat64Slot(23, oxyReqPax, 0.0)

def AddOxyReqPax(builder, oxyReqPax):
    AircraftSortie_IngestAddOxyReqPax(builder, oxyReqPax)

def AircraftSortie_IngestAddOxyOnPax(builder, oxyOnPax):
    builder.PrependFloat64Slot(24, oxyOnPax, 0.0)

def AddOxyOnPax(builder, oxyOnPax):
    AircraftSortie_IngestAddOxyOnPax(builder, oxyOnPax)

def AircraftSortie_IngestAddAlertStatusCode(builder, alertStatusCode):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(alertStatusCode), 0)

def AddAlertStatusCode(builder, alertStatusCode):
    AircraftSortie_IngestAddAlertStatusCode(builder, alertStatusCode)

def AircraftSortie_IngestAddAlertStatus(builder, alertStatus):
    builder.PrependInt32Slot(26, alertStatus, 0)

def AddAlertStatus(builder, alertStatus):
    AircraftSortie_IngestAddAlertStatus(builder, alertStatus)

def AircraftSortie_IngestAddCurrentState(builder, currentState):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(currentState), 0)

def AddCurrentState(builder, currentState):
    AircraftSortie_IngestAddCurrentState(builder, currentState)

def AircraftSortie_IngestAddDepItinerary(builder, depItinerary):
    builder.PrependInt32Slot(28, depItinerary, 0)

def AddDepItinerary(builder, depItinerary):
    AircraftSortie_IngestAddDepItinerary(builder, depItinerary)

def AircraftSortie_IngestAddDepIcao(builder, depIcao):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(depIcao), 0)

def AddDepIcao(builder, depIcao):
    AircraftSortie_IngestAddDepIcao(builder, depIcao)

def AircraftSortie_IngestAddDepIata(builder, depIata):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(depIata), 0)

def AddDepIata(builder, depIata):
    AircraftSortie_IngestAddDepIata(builder, depIata)

def AircraftSortie_IngestAddDepFaa(builder, depFaa):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(depFaa), 0)

def AddDepFaa(builder, depFaa):
    AircraftSortie_IngestAddDepFaa(builder, depFaa)

def AircraftSortie_IngestAddPlannedDepTime(builder, plannedDepTime):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(plannedDepTime), 0)

def AddPlannedDepTime(builder, plannedDepTime):
    AircraftSortie_IngestAddPlannedDepTime(builder, plannedDepTime)

def AircraftSortie_IngestAddEstDepTime(builder, estDepTime):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(estDepTime), 0)

def AddEstDepTime(builder, estDepTime):
    AircraftSortie_IngestAddEstDepTime(builder, estDepTime)

def AircraftSortie_IngestAddActualDepTime(builder, actualDepTime):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(actualDepTime), 0)

def AddActualDepTime(builder, actualDepTime):
    AircraftSortie_IngestAddActualDepTime(builder, actualDepTime)

def AircraftSortie_IngestAddEstBlockOutTime(builder, estBlockOutTime):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(estBlockOutTime), 0)

def AddEstBlockOutTime(builder, estBlockOutTime):
    AircraftSortie_IngestAddEstBlockOutTime(builder, estBlockOutTime)

def AircraftSortie_IngestAddActualBlockOutTime(builder, actualBlockOutTime):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(actualBlockOutTime), 0)

def AddActualBlockOutTime(builder, actualBlockOutTime):
    AircraftSortie_IngestAddActualBlockOutTime(builder, actualBlockOutTime)

def AircraftSortie_IngestAddDepPurposeCode(builder, depPurposeCode):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(depPurposeCode), 0)

def AddDepPurposeCode(builder, depPurposeCode):
    AircraftSortie_IngestAddDepPurposeCode(builder, depPurposeCode)

def AircraftSortie_IngestAddArrItinerary(builder, arrItinerary):
    builder.PrependInt32Slot(38, arrItinerary, 0)

def AddArrItinerary(builder, arrItinerary):
    AircraftSortie_IngestAddArrItinerary(builder, arrItinerary)

def AircraftSortie_IngestAddArrIcao(builder, arrIcao):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(arrIcao), 0)

def AddArrIcao(builder, arrIcao):
    AircraftSortie_IngestAddArrIcao(builder, arrIcao)

def AircraftSortie_IngestAddArrIata(builder, arrIata):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(arrIata), 0)

def AddArrIata(builder, arrIata):
    AircraftSortie_IngestAddArrIata(builder, arrIata)

def AircraftSortie_IngestAddArrFaa(builder, arrFaa):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(arrFaa), 0)

def AddArrFaa(builder, arrFaa):
    AircraftSortie_IngestAddArrFaa(builder, arrFaa)

def AircraftSortie_IngestAddPlannedArrTime(builder, plannedArrTime):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(plannedArrTime), 0)

def AddPlannedArrTime(builder, plannedArrTime):
    AircraftSortie_IngestAddPlannedArrTime(builder, plannedArrTime)

def AircraftSortie_IngestAddEstArrTime(builder, estArrTime):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(estArrTime), 0)

def AddEstArrTime(builder, estArrTime):
    AircraftSortie_IngestAddEstArrTime(builder, estArrTime)

def AircraftSortie_IngestAddActualArrTime(builder, actualArrTime):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(actualArrTime), 0)

def AddActualArrTime(builder, actualArrTime):
    AircraftSortie_IngestAddActualArrTime(builder, actualArrTime)

def AircraftSortie_IngestAddEstBlockInTime(builder, estBlockInTime):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(estBlockInTime), 0)

def AddEstBlockInTime(builder, estBlockInTime):
    AircraftSortie_IngestAddEstBlockInTime(builder, estBlockInTime)

def AircraftSortie_IngestAddActualBlockInTime(builder, actualBlockInTime):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(actualBlockInTime), 0)

def AddActualBlockInTime(builder, actualBlockInTime):
    AircraftSortie_IngestAddActualBlockInTime(builder, actualBlockInTime)

def AircraftSortie_IngestAddArrPurposeCode(builder, arrPurposeCode):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(arrPurposeCode), 0)

def AddArrPurposeCode(builder, arrPurposeCode):
    AircraftSortie_IngestAddArrPurposeCode(builder, arrPurposeCode)

def AircraftSortie_IngestAddDhd(builder, dhd):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(dhd), 0)

def AddDhd(builder, dhd):
    AircraftSortie_IngestAddDhd(builder, dhd)

def AircraftSortie_IngestAddDhdReason(builder, dhdReason):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(dhdReason), 0)

def AddDhdReason(builder, dhdReason):
    AircraftSortie_IngestAddDhdReason(builder, dhdReason)

def AircraftSortie_IngestAddAircraftEvent(builder, aircraftEvent):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftEvent), 0)

def AddAircraftEvent(builder, aircraftEvent):
    AircraftSortie_IngestAddAircraftEvent(builder, aircraftEvent)

def AircraftSortie_IngestAddSoe(builder, soe):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(soe), 0)

def AddSoe(builder, soe):
    AircraftSortie_IngestAddSoe(builder, soe)

def AircraftSortie_IngestAddLegNum(builder, legNum):
    builder.PrependInt32Slot(52, legNum, 0)

def AddLegNum(builder, legNum):
    AircraftSortie_IngestAddLegNum(builder, legNum)

def AircraftSortie_IngestAddFlightTime(builder, flightTime):
    builder.PrependFloat64Slot(53, flightTime, 0.0)

def AddFlightTime(builder, flightTime):
    AircraftSortie_IngestAddFlightTime(builder, flightTime)

def AircraftSortie_IngestAddGndTime(builder, gndTime):
    builder.PrependFloat64Slot(54, gndTime, 0.0)

def AddGndTime(builder, gndTime):
    AircraftSortie_IngestAddGndTime(builder, gndTime)

def AircraftSortie_IngestAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    AircraftSortie_IngestAddRawFileUri(builder, rawFileUri)

def AircraftSortie_IngestAddPapersVersion(builder, papersVersion):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(papersVersion), 0)

def AddPapersVersion(builder, papersVersion):
    AircraftSortie_IngestAddPapersVersion(builder, papersVersion)

def AircraftSortie_IngestAddFilename(builder, filename):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)

def AddFilename(builder, filename):
    AircraftSortie_IngestAddFilename(builder, filename)

def AircraftSortie_IngestAddFilesize(builder, filesize):
    builder.PrependInt32Slot(58, filesize, 0)

def AddFilesize(builder, filesize):
    AircraftSortie_IngestAddFilesize(builder, filesize)

def AircraftSortie_IngestAddPaperStatus(builder, paperStatus):
    builder.PrependInt8Slot(59, paperStatus, 0)

def AddPaperStatus(builder, paperStatus):
    AircraftSortie_IngestAddPaperStatus(builder, paperStatus)

def AircraftSortie_IngestAddPprStatus(builder, pprStatus):
    builder.PrependInt8Slot(60, pprStatus, 0)

def AddPprStatus(builder, pprStatus):
    AircraftSortie_IngestAddPprStatus(builder, pprStatus)

def AircraftSortie_IngestAddMissionUpdate(builder, missionUpdate):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(missionUpdate), 0)

def AddMissionUpdate(builder, missionUpdate):
    AircraftSortie_IngestAddMissionUpdate(builder, missionUpdate)

def AircraftSortie_IngestAddDelayCode(builder, delayCode):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(delayCode), 0)

def AddDelayCode(builder, delayCode):
    AircraftSortie_IngestAddDelayCode(builder, delayCode)

def AircraftSortie_IngestAddCommanderName(builder, commanderName):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(commanderName), 0)

def AddCommanderName(builder, commanderName):
    AircraftSortie_IngestAddCommanderName(builder, commanderName)

def AircraftSortie_IngestAddFmDeskNum(builder, fmDeskNum):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(fmDeskNum), 0)

def AddFmDeskNum(builder, fmDeskNum):
    AircraftSortie_IngestAddFmDeskNum(builder, fmDeskNum)

def AircraftSortie_IngestAddFmName(builder, fmName):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(fmName), 0)

def AddFmName(builder, fmName):
    AircraftSortie_IngestAddFmName(builder, fmName)

def AircraftSortie_IngestAddRvnReq(builder, rvnReq):
    builder.PrependInt8Slot(66, rvnReq, 0)

def AddRvnReq(builder, rvnReq):
    AircraftSortie_IngestAddRvnReq(builder, rvnReq)

def AircraftSortie_IngestAddPassengers(builder, passengers):
    builder.PrependInt32Slot(67, passengers, 0)

def AddPassengers(builder, passengers):
    AircraftSortie_IngestAddPassengers(builder, passengers)

def AircraftSortie_IngestAddParkingLoc(builder, parkingLoc):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(parkingLoc), 0)

def AddParkingLoc(builder, parkingLoc):
    AircraftSortie_IngestAddParkingLoc(builder, parkingLoc)

def AircraftSortie_IngestAddObjectiveRemarks(builder, objectiveRemarks):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(objectiveRemarks), 0)

def AddObjectiveRemarks(builder, objectiveRemarks):
    AircraftSortie_IngestAddObjectiveRemarks(builder, objectiveRemarks)

def AircraftSortie_IngestAddAircraftRemarks(builder, aircraftRemarks):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftRemarks), 0)

def AddAircraftRemarks(builder, aircraftRemarks):
    AircraftSortie_IngestAddAircraftRemarks(builder, aircraftRemarks)

def AircraftSortie_IngestAddScheduleRemarks(builder, scheduleRemarks):
    builder.PrependUOffsetTRelativeSlot(71, flatbuffers.number_types.UOffsetTFlags.py_type(scheduleRemarks), 0)

def AddScheduleRemarks(builder, scheduleRemarks):
    AircraftSortie_IngestAddScheduleRemarks(builder, scheduleRemarks)

def AircraftSortie_IngestAddResultRemarks(builder, resultRemarks):
    builder.PrependUOffsetTRelativeSlot(72, flatbuffers.number_types.UOffsetTFlags.py_type(resultRemarks), 0)

def AddResultRemarks(builder, resultRemarks):
    AircraftSortie_IngestAddResultRemarks(builder, resultRemarks)

def AircraftSortie_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(73, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AircraftSortie_IngestAddCreatedAt(builder, createdAt)

def AircraftSortie_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(74, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AircraftSortie_IngestAddCreatedBy(builder, createdBy)

def AircraftSortie_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AircraftSortie_IngestAddSourceDl(builder, sourceDl)

def AircraftSortie_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(76, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AircraftSortie_IngestAddSource(builder, source)

def AircraftSortie_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(77, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AircraftSortie_IngestAddOrigin(builder, origin)

def AircraftSortie_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(78, dataMode, 0)

def AddDataMode(builder, dataMode):
    AircraftSortie_IngestAddDataMode(builder, dataMode)

def AircraftSortie_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AircraftSortie_IngestAddOrigNetwork(builder, origNetwork)

def AircraftSortie_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftSortie_IngestEnd(builder)


class AircraftSortie_IngestT(object):

    # AircraftSortie_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.origSortieId = None  # type: str
        self.idAircraft = None  # type: str
        self.aircraftAltId = None  # type: str
        self.tailNumber = None  # type: str
        self.aircraftMds = None  # type: str
        self.aircraftAdsb = None  # type: str
        self.sortieDate = None  # type: str
        self.lineNumber = 0  # type: int
        self.idMission = None  # type: str
        self.missionId = None  # type: str
        self.amcMsnNum = None  # type: str
        self.amcMsnType = None  # type: str
        self.callSign = None  # type: str
        self.jcsPriority = None  # type: str
        self.primaryScl = None  # type: str
        self.secondaryScl = None  # type: str
        self.reqConfig = None  # type: str
        self.cargoConfig = None  # type: str
        self.fuelReq = 0.0  # type: float
        self.oxyReqCrew = 0.0  # type: float
        self.oxyOnCrew = 0.0  # type: float
        self.oxyReqPax = 0.0  # type: float
        self.oxyOnPax = 0.0  # type: float
        self.alertStatusCode = None  # type: str
        self.alertStatus = 0  # type: int
        self.currentState = None  # type: str
        self.depItinerary = 0  # type: int
        self.depIcao = None  # type: str
        self.depIata = None  # type: str
        self.depFaa = None  # type: str
        self.plannedDepTime = None  # type: str
        self.estDepTime = None  # type: str
        self.actualDepTime = None  # type: str
        self.estBlockOutTime = None  # type: str
        self.actualBlockOutTime = None  # type: str
        self.depPurposeCode = None  # type: str
        self.arrItinerary = 0  # type: int
        self.arrIcao = None  # type: str
        self.arrIata = None  # type: str
        self.arrFaa = None  # type: str
        self.plannedArrTime = None  # type: str
        self.estArrTime = None  # type: str
        self.actualArrTime = None  # type: str
        self.estBlockInTime = None  # type: str
        self.actualBlockInTime = None  # type: str
        self.arrPurposeCode = None  # type: str
        self.dhd = None  # type: str
        self.dhdReason = None  # type: str
        self.aircraftEvent = None  # type: str
        self.soe = None  # type: str
        self.legNum = 0  # type: int
        self.flightTime = 0.0  # type: float
        self.gndTime = 0.0  # type: float
        self.rawFileUri = None  # type: str
        self.papersVersion = None  # type: str
        self.filename = None  # type: str
        self.filesize = 0  # type: int
        self.paperStatus = 0  # type: int
        self.pprStatus = 0  # type: int
        self.missionUpdate = None  # type: str
        self.delayCode = None  # type: str
        self.commanderName = None  # type: str
        self.fmDeskNum = None  # type: str
        self.fmName = None  # type: str
        self.rvnReq = 0  # type: int
        self.passengers = 0  # type: int
        self.parkingLoc = None  # type: str
        self.objectiveRemarks = None  # type: str
        self.aircraftRemarks = None  # type: str
        self.scheduleRemarks = None  # type: str
        self.resultRemarks = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftSortieIngest = AircraftSortie_Ingest()
        aircraftSortieIngest.Init(buf, pos)
        return cls.InitFromObj(aircraftSortieIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftSortieIngest):
        x = AircraftSortie_IngestT()
        x._UnPack(aircraftSortieIngest)
        return x

    # AircraftSortie_IngestT
    def _UnPack(self, aircraftSortieIngest):
        if aircraftSortieIngest is None:
            return
        self.id = aircraftSortieIngest.Id()
        self.classificationMarking = aircraftSortieIngest.ClassificationMarking()
        self.origSortieId = aircraftSortieIngest.OrigSortieId()
        self.idAircraft = aircraftSortieIngest.IdAircraft()
        self.aircraftAltId = aircraftSortieIngest.AircraftAltId()
        self.tailNumber = aircraftSortieIngest.TailNumber()
        self.aircraftMds = aircraftSortieIngest.AircraftMds()
        self.aircraftAdsb = aircraftSortieIngest.AircraftAdsb()
        self.sortieDate = aircraftSortieIngest.SortieDate()
        self.lineNumber = aircraftSortieIngest.LineNumber()
        self.idMission = aircraftSortieIngest.IdMission()
        self.missionId = aircraftSortieIngest.MissionId()
        self.amcMsnNum = aircraftSortieIngest.AmcMsnNum()
        self.amcMsnType = aircraftSortieIngest.AmcMsnType()
        self.callSign = aircraftSortieIngest.CallSign()
        self.jcsPriority = aircraftSortieIngest.JcsPriority()
        self.primaryScl = aircraftSortieIngest.PrimaryScl()
        self.secondaryScl = aircraftSortieIngest.SecondaryScl()
        self.reqConfig = aircraftSortieIngest.ReqConfig()
        self.cargoConfig = aircraftSortieIngest.CargoConfig()
        self.fuelReq = aircraftSortieIngest.FuelReq()
        self.oxyReqCrew = aircraftSortieIngest.OxyReqCrew()
        self.oxyOnCrew = aircraftSortieIngest.OxyOnCrew()
        self.oxyReqPax = aircraftSortieIngest.OxyReqPax()
        self.oxyOnPax = aircraftSortieIngest.OxyOnPax()
        self.alertStatusCode = aircraftSortieIngest.AlertStatusCode()
        self.alertStatus = aircraftSortieIngest.AlertStatus()
        self.currentState = aircraftSortieIngest.CurrentState()
        self.depItinerary = aircraftSortieIngest.DepItinerary()
        self.depIcao = aircraftSortieIngest.DepIcao()
        self.depIata = aircraftSortieIngest.DepIata()
        self.depFaa = aircraftSortieIngest.DepFaa()
        self.plannedDepTime = aircraftSortieIngest.PlannedDepTime()
        self.estDepTime = aircraftSortieIngest.EstDepTime()
        self.actualDepTime = aircraftSortieIngest.ActualDepTime()
        self.estBlockOutTime = aircraftSortieIngest.EstBlockOutTime()
        self.actualBlockOutTime = aircraftSortieIngest.ActualBlockOutTime()
        self.depPurposeCode = aircraftSortieIngest.DepPurposeCode()
        self.arrItinerary = aircraftSortieIngest.ArrItinerary()
        self.arrIcao = aircraftSortieIngest.ArrIcao()
        self.arrIata = aircraftSortieIngest.ArrIata()
        self.arrFaa = aircraftSortieIngest.ArrFaa()
        self.plannedArrTime = aircraftSortieIngest.PlannedArrTime()
        self.estArrTime = aircraftSortieIngest.EstArrTime()
        self.actualArrTime = aircraftSortieIngest.ActualArrTime()
        self.estBlockInTime = aircraftSortieIngest.EstBlockInTime()
        self.actualBlockInTime = aircraftSortieIngest.ActualBlockInTime()
        self.arrPurposeCode = aircraftSortieIngest.ArrPurposeCode()
        self.dhd = aircraftSortieIngest.Dhd()
        self.dhdReason = aircraftSortieIngest.DhdReason()
        self.aircraftEvent = aircraftSortieIngest.AircraftEvent()
        self.soe = aircraftSortieIngest.Soe()
        self.legNum = aircraftSortieIngest.LegNum()
        self.flightTime = aircraftSortieIngest.FlightTime()
        self.gndTime = aircraftSortieIngest.GndTime()
        self.rawFileUri = aircraftSortieIngest.RawFileUri()
        self.papersVersion = aircraftSortieIngest.PapersVersion()
        self.filename = aircraftSortieIngest.Filename()
        self.filesize = aircraftSortieIngest.Filesize()
        self.paperStatus = aircraftSortieIngest.PaperStatus()
        self.pprStatus = aircraftSortieIngest.PprStatus()
        self.missionUpdate = aircraftSortieIngest.MissionUpdate()
        self.delayCode = aircraftSortieIngest.DelayCode()
        self.commanderName = aircraftSortieIngest.CommanderName()
        self.fmDeskNum = aircraftSortieIngest.FmDeskNum()
        self.fmName = aircraftSortieIngest.FmName()
        self.rvnReq = aircraftSortieIngest.RvnReq()
        self.passengers = aircraftSortieIngest.Passengers()
        self.parkingLoc = aircraftSortieIngest.ParkingLoc()
        self.objectiveRemarks = aircraftSortieIngest.ObjectiveRemarks()
        self.aircraftRemarks = aircraftSortieIngest.AircraftRemarks()
        self.scheduleRemarks = aircraftSortieIngest.ScheduleRemarks()
        self.resultRemarks = aircraftSortieIngest.ResultRemarks()
        self.createdAt = aircraftSortieIngest.CreatedAt()
        self.createdBy = aircraftSortieIngest.CreatedBy()
        self.sourceDl = aircraftSortieIngest.SourceDl()
        self.source = aircraftSortieIngest.Source()
        self.origin = aircraftSortieIngest.Origin()
        self.dataMode = aircraftSortieIngest.DataMode()
        self.origNetwork = aircraftSortieIngest.OrigNetwork()

    # AircraftSortie_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origSortieId is not None:
            origSortieId = builder.CreateString(self.origSortieId)
        if self.idAircraft is not None:
            idAircraft = builder.CreateString(self.idAircraft)
        if self.aircraftAltId is not None:
            aircraftAltId = builder.CreateString(self.aircraftAltId)
        if self.tailNumber is not None:
            tailNumber = builder.CreateString(self.tailNumber)
        if self.aircraftMds is not None:
            aircraftMds = builder.CreateString(self.aircraftMds)
        if self.aircraftAdsb is not None:
            aircraftAdsb = builder.CreateString(self.aircraftAdsb)
        if self.sortieDate is not None:
            sortieDate = builder.CreateString(self.sortieDate)
        if self.idMission is not None:
            idMission = builder.CreateString(self.idMission)
        if self.missionId is not None:
            missionId = builder.CreateString(self.missionId)
        if self.amcMsnNum is not None:
            amcMsnNum = builder.CreateString(self.amcMsnNum)
        if self.amcMsnType is not None:
            amcMsnType = builder.CreateString(self.amcMsnType)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.jcsPriority is not None:
            jcsPriority = builder.CreateString(self.jcsPriority)
        if self.primaryScl is not None:
            primaryScl = builder.CreateString(self.primaryScl)
        if self.secondaryScl is not None:
            secondaryScl = builder.CreateString(self.secondaryScl)
        if self.reqConfig is not None:
            reqConfig = builder.CreateString(self.reqConfig)
        if self.cargoConfig is not None:
            cargoConfig = builder.CreateString(self.cargoConfig)
        if self.alertStatusCode is not None:
            alertStatusCode = builder.CreateString(self.alertStatusCode)
        if self.currentState is not None:
            currentState = builder.CreateString(self.currentState)
        if self.depIcao is not None:
            depIcao = builder.CreateString(self.depIcao)
        if self.depIata is not None:
            depIata = builder.CreateString(self.depIata)
        if self.depFaa is not None:
            depFaa = builder.CreateString(self.depFaa)
        if self.plannedDepTime is not None:
            plannedDepTime = builder.CreateString(self.plannedDepTime)
        if self.estDepTime is not None:
            estDepTime = builder.CreateString(self.estDepTime)
        if self.actualDepTime is not None:
            actualDepTime = builder.CreateString(self.actualDepTime)
        if self.estBlockOutTime is not None:
            estBlockOutTime = builder.CreateString(self.estBlockOutTime)
        if self.actualBlockOutTime is not None:
            actualBlockOutTime = builder.CreateString(self.actualBlockOutTime)
        if self.depPurposeCode is not None:
            depPurposeCode = builder.CreateString(self.depPurposeCode)
        if self.arrIcao is not None:
            arrIcao = builder.CreateString(self.arrIcao)
        if self.arrIata is not None:
            arrIata = builder.CreateString(self.arrIata)
        if self.arrFaa is not None:
            arrFaa = builder.CreateString(self.arrFaa)
        if self.plannedArrTime is not None:
            plannedArrTime = builder.CreateString(self.plannedArrTime)
        if self.estArrTime is not None:
            estArrTime = builder.CreateString(self.estArrTime)
        if self.actualArrTime is not None:
            actualArrTime = builder.CreateString(self.actualArrTime)
        if self.estBlockInTime is not None:
            estBlockInTime = builder.CreateString(self.estBlockInTime)
        if self.actualBlockInTime is not None:
            actualBlockInTime = builder.CreateString(self.actualBlockInTime)
        if self.arrPurposeCode is not None:
            arrPurposeCode = builder.CreateString(self.arrPurposeCode)
        if self.dhd is not None:
            dhd = builder.CreateString(self.dhd)
        if self.dhdReason is not None:
            dhdReason = builder.CreateString(self.dhdReason)
        if self.aircraftEvent is not None:
            aircraftEvent = builder.CreateString(self.aircraftEvent)
        if self.soe is not None:
            soe = builder.CreateString(self.soe)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.papersVersion is not None:
            papersVersion = builder.CreateString(self.papersVersion)
        if self.filename is not None:
            filename = builder.CreateString(self.filename)
        if self.missionUpdate is not None:
            missionUpdate = builder.CreateString(self.missionUpdate)
        if self.delayCode is not None:
            delayCode = builder.CreateString(self.delayCode)
        if self.commanderName is not None:
            commanderName = builder.CreateString(self.commanderName)
        if self.fmDeskNum is not None:
            fmDeskNum = builder.CreateString(self.fmDeskNum)
        if self.fmName is not None:
            fmName = builder.CreateString(self.fmName)
        if self.parkingLoc is not None:
            parkingLoc = builder.CreateString(self.parkingLoc)
        if self.objectiveRemarks is not None:
            objectiveRemarks = builder.CreateString(self.objectiveRemarks)
        if self.aircraftRemarks is not None:
            aircraftRemarks = builder.CreateString(self.aircraftRemarks)
        if self.scheduleRemarks is not None:
            scheduleRemarks = builder.CreateString(self.scheduleRemarks)
        if self.resultRemarks is not None:
            resultRemarks = builder.CreateString(self.resultRemarks)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AircraftSortie_IngestStart(builder)
        if self.id is not None:
            AircraftSortie_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            AircraftSortie_IngestAddClassificationMarking(builder, classificationMarking)
        if self.origSortieId is not None:
            AircraftSortie_IngestAddOrigSortieId(builder, origSortieId)
        if self.idAircraft is not None:
            AircraftSortie_IngestAddIdAircraft(builder, idAircraft)
        if self.aircraftAltId is not None:
            AircraftSortie_IngestAddAircraftAltId(builder, aircraftAltId)
        if self.tailNumber is not None:
            AircraftSortie_IngestAddTailNumber(builder, tailNumber)
        if self.aircraftMds is not None:
            AircraftSortie_IngestAddAircraftMds(builder, aircraftMds)
        if self.aircraftAdsb is not None:
            AircraftSortie_IngestAddAircraftAdsb(builder, aircraftAdsb)
        if self.sortieDate is not None:
            AircraftSortie_IngestAddSortieDate(builder, sortieDate)
        AircraftSortie_IngestAddLineNumber(builder, self.lineNumber)
        if self.idMission is not None:
            AircraftSortie_IngestAddIdMission(builder, idMission)
        if self.missionId is not None:
            AircraftSortie_IngestAddMissionId(builder, missionId)
        if self.amcMsnNum is not None:
            AircraftSortie_IngestAddAmcMsnNum(builder, amcMsnNum)
        if self.amcMsnType is not None:
            AircraftSortie_IngestAddAmcMsnType(builder, amcMsnType)
        if self.callSign is not None:
            AircraftSortie_IngestAddCallSign(builder, callSign)
        if self.jcsPriority is not None:
            AircraftSortie_IngestAddJcsPriority(builder, jcsPriority)
        if self.primaryScl is not None:
            AircraftSortie_IngestAddPrimaryScl(builder, primaryScl)
        if self.secondaryScl is not None:
            AircraftSortie_IngestAddSecondaryScl(builder, secondaryScl)
        if self.reqConfig is not None:
            AircraftSortie_IngestAddReqConfig(builder, reqConfig)
        if self.cargoConfig is not None:
            AircraftSortie_IngestAddCargoConfig(builder, cargoConfig)
        AircraftSortie_IngestAddFuelReq(builder, self.fuelReq)
        AircraftSortie_IngestAddOxyReqCrew(builder, self.oxyReqCrew)
        AircraftSortie_IngestAddOxyOnCrew(builder, self.oxyOnCrew)
        AircraftSortie_IngestAddOxyReqPax(builder, self.oxyReqPax)
        AircraftSortie_IngestAddOxyOnPax(builder, self.oxyOnPax)
        if self.alertStatusCode is not None:
            AircraftSortie_IngestAddAlertStatusCode(builder, alertStatusCode)
        AircraftSortie_IngestAddAlertStatus(builder, self.alertStatus)
        if self.currentState is not None:
            AircraftSortie_IngestAddCurrentState(builder, currentState)
        AircraftSortie_IngestAddDepItinerary(builder, self.depItinerary)
        if self.depIcao is not None:
            AircraftSortie_IngestAddDepIcao(builder, depIcao)
        if self.depIata is not None:
            AircraftSortie_IngestAddDepIata(builder, depIata)
        if self.depFaa is not None:
            AircraftSortie_IngestAddDepFaa(builder, depFaa)
        if self.plannedDepTime is not None:
            AircraftSortie_IngestAddPlannedDepTime(builder, plannedDepTime)
        if self.estDepTime is not None:
            AircraftSortie_IngestAddEstDepTime(builder, estDepTime)
        if self.actualDepTime is not None:
            AircraftSortie_IngestAddActualDepTime(builder, actualDepTime)
        if self.estBlockOutTime is not None:
            AircraftSortie_IngestAddEstBlockOutTime(builder, estBlockOutTime)
        if self.actualBlockOutTime is not None:
            AircraftSortie_IngestAddActualBlockOutTime(builder, actualBlockOutTime)
        if self.depPurposeCode is not None:
            AircraftSortie_IngestAddDepPurposeCode(builder, depPurposeCode)
        AircraftSortie_IngestAddArrItinerary(builder, self.arrItinerary)
        if self.arrIcao is not None:
            AircraftSortie_IngestAddArrIcao(builder, arrIcao)
        if self.arrIata is not None:
            AircraftSortie_IngestAddArrIata(builder, arrIata)
        if self.arrFaa is not None:
            AircraftSortie_IngestAddArrFaa(builder, arrFaa)
        if self.plannedArrTime is not None:
            AircraftSortie_IngestAddPlannedArrTime(builder, plannedArrTime)
        if self.estArrTime is not None:
            AircraftSortie_IngestAddEstArrTime(builder, estArrTime)
        if self.actualArrTime is not None:
            AircraftSortie_IngestAddActualArrTime(builder, actualArrTime)
        if self.estBlockInTime is not None:
            AircraftSortie_IngestAddEstBlockInTime(builder, estBlockInTime)
        if self.actualBlockInTime is not None:
            AircraftSortie_IngestAddActualBlockInTime(builder, actualBlockInTime)
        if self.arrPurposeCode is not None:
            AircraftSortie_IngestAddArrPurposeCode(builder, arrPurposeCode)
        if self.dhd is not None:
            AircraftSortie_IngestAddDhd(builder, dhd)
        if self.dhdReason is not None:
            AircraftSortie_IngestAddDhdReason(builder, dhdReason)
        if self.aircraftEvent is not None:
            AircraftSortie_IngestAddAircraftEvent(builder, aircraftEvent)
        if self.soe is not None:
            AircraftSortie_IngestAddSoe(builder, soe)
        AircraftSortie_IngestAddLegNum(builder, self.legNum)
        AircraftSortie_IngestAddFlightTime(builder, self.flightTime)
        AircraftSortie_IngestAddGndTime(builder, self.gndTime)
        if self.rawFileUri is not None:
            AircraftSortie_IngestAddRawFileUri(builder, rawFileUri)
        if self.papersVersion is not None:
            AircraftSortie_IngestAddPapersVersion(builder, papersVersion)
        if self.filename is not None:
            AircraftSortie_IngestAddFilename(builder, filename)
        AircraftSortie_IngestAddFilesize(builder, self.filesize)
        AircraftSortie_IngestAddPaperStatus(builder, self.paperStatus)
        AircraftSortie_IngestAddPprStatus(builder, self.pprStatus)
        if self.missionUpdate is not None:
            AircraftSortie_IngestAddMissionUpdate(builder, missionUpdate)
        if self.delayCode is not None:
            AircraftSortie_IngestAddDelayCode(builder, delayCode)
        if self.commanderName is not None:
            AircraftSortie_IngestAddCommanderName(builder, commanderName)
        if self.fmDeskNum is not None:
            AircraftSortie_IngestAddFmDeskNum(builder, fmDeskNum)
        if self.fmName is not None:
            AircraftSortie_IngestAddFmName(builder, fmName)
        AircraftSortie_IngestAddRvnReq(builder, self.rvnReq)
        AircraftSortie_IngestAddPassengers(builder, self.passengers)
        if self.parkingLoc is not None:
            AircraftSortie_IngestAddParkingLoc(builder, parkingLoc)
        if self.objectiveRemarks is not None:
            AircraftSortie_IngestAddObjectiveRemarks(builder, objectiveRemarks)
        if self.aircraftRemarks is not None:
            AircraftSortie_IngestAddAircraftRemarks(builder, aircraftRemarks)
        if self.scheduleRemarks is not None:
            AircraftSortie_IngestAddScheduleRemarks(builder, scheduleRemarks)
        if self.resultRemarks is not None:
            AircraftSortie_IngestAddResultRemarks(builder, resultRemarks)
        if self.createdAt is not None:
            AircraftSortie_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AircraftSortie_IngestAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            AircraftSortie_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AircraftSortie_IngestAddSource(builder, source)
        if self.origin is not None:
            AircraftSortie_IngestAddOrigin(builder, origin)
        AircraftSortie_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AircraftSortie_IngestAddOrigNetwork(builder, origNetwork)
        aircraftSortieIngest = AircraftSortie_IngestEnd(builder)
        return aircraftSortieIngest
