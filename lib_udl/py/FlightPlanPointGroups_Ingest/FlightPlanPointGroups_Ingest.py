# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
class FlightPlanPointGroups_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlanPointGroups_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlanPointGroups_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlanPointGroups_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlanPointGroups_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
    # Example: /// Example: ETOPS_CF_POINT_1
    # Constraints: Minimum length = 0, Maximum length = 36
    # FlightPlanPointGroups_Ingest
    def PointGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies which Point Group case requires the most fuel.
    # Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
    # Constraints: Minimum length = 0, Maximum length = 48
    # FlightPlanPointGroups_Ingest
    def WorstFuelCase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: LPPD
    # Constraints: Minimum length = 0, Maximum length = 5
    # FlightPlanPointGroups_Ingest
    def LsafName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
    # Example: /// Example: 684.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def LsafDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
    # Example: /// Example: 684.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FsafDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
    # Example: /// Example: 684.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def EtopsDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
    # Example: /// Example: 01:23
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlanPointGroups_Ingest
    def LsafTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
    # Example: /// Example: 01:23
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlanPointGroups_Ingest
    def FsafTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
    # Example: /// Example: 01:23
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlanPointGroups_Ingest
    def EtopsTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
    # Example: /// Example: 13.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def LsafAvgWindFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FsafAvgWindFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def EtopsAvgWindFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
    # Example: /// Example: 9.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def LsafTempDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
    # Example: /// Example: 9.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FsafTempDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
    # Example: /// Example: 9.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def EtopsTempDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
    # Example: /// Example: 50787.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def LsafReqFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
    # Example: /// Example: 50380.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FsafReqFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
    # Example: /// Example: 4412.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def EtopsReqFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total time from takeoff when the point is reached expressed in HH:MM format.
    # Example: /// Example: 07:29
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlanPointGroups_Ingest
    def FromTakeoffTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amount of planned fuel on board when the point is reached in pounds.
    # Example: /// Example: 190319.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def PlannedFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flight level of the point at which the fuel was calculated in feet.
    # Example: /// Example: 100.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FuelCalcAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True airspeed at which the fuel was calculated in knots.
    # Example: /// Example: 365.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FuelCalcSpd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average fuel flow at which the fuel was calculated in pounds per hour.
    # Example: /// Example: 19693.1
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def AvgFuelFlow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of point data for this Point Group.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # FlightPlanPointGroups_Ingest
    def FlightPlanPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FlightPlanPointGroups_Ingest
    def FlightPlanPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlightPlanPointGroups_Ingest
    def FlightPlanPointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def FlightPlanPointGroups_IngestStart(builder):
    builder.StartObject(24)

def Start(builder):
    FlightPlanPointGroups_IngestStart(builder)

def FlightPlanPointGroups_IngestAddPointGroupName(builder, pointGroupName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pointGroupName), 0)

def AddPointGroupName(builder, pointGroupName):
    FlightPlanPointGroups_IngestAddPointGroupName(builder, pointGroupName)

def FlightPlanPointGroups_IngestAddWorstFuelCase(builder, worstFuelCase):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(worstFuelCase), 0)

def AddWorstFuelCase(builder, worstFuelCase):
    FlightPlanPointGroups_IngestAddWorstFuelCase(builder, worstFuelCase)

def FlightPlanPointGroups_IngestAddLsafName(builder, lsafName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lsafName), 0)

def AddLsafName(builder, lsafName):
    FlightPlanPointGroups_IngestAddLsafName(builder, lsafName)

def FlightPlanPointGroups_IngestAddLsafDistance(builder, lsafDistance):
    builder.PrependFloat64Slot(3, lsafDistance, 0.0)

def AddLsafDistance(builder, lsafDistance):
    FlightPlanPointGroups_IngestAddLsafDistance(builder, lsafDistance)

def FlightPlanPointGroups_IngestAddFsafDistance(builder, fsafDistance):
    builder.PrependFloat64Slot(4, fsafDistance, 0.0)

def AddFsafDistance(builder, fsafDistance):
    FlightPlanPointGroups_IngestAddFsafDistance(builder, fsafDistance)

def FlightPlanPointGroups_IngestAddEtopsDistance(builder, etopsDistance):
    builder.PrependFloat64Slot(5, etopsDistance, 0.0)

def AddEtopsDistance(builder, etopsDistance):
    FlightPlanPointGroups_IngestAddEtopsDistance(builder, etopsDistance)

def FlightPlanPointGroups_IngestAddLsafTime(builder, lsafTime):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(lsafTime), 0)

def AddLsafTime(builder, lsafTime):
    FlightPlanPointGroups_IngestAddLsafTime(builder, lsafTime)

def FlightPlanPointGroups_IngestAddFsafTime(builder, fsafTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(fsafTime), 0)

def AddFsafTime(builder, fsafTime):
    FlightPlanPointGroups_IngestAddFsafTime(builder, fsafTime)

def FlightPlanPointGroups_IngestAddEtopsTime(builder, etopsTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(etopsTime), 0)

def AddEtopsTime(builder, etopsTime):
    FlightPlanPointGroups_IngestAddEtopsTime(builder, etopsTime)

def FlightPlanPointGroups_IngestAddLsafAvgWindFactor(builder, lsafAvgWindFactor):
    builder.PrependFloat64Slot(9, lsafAvgWindFactor, 0.0)

def AddLsafAvgWindFactor(builder, lsafAvgWindFactor):
    FlightPlanPointGroups_IngestAddLsafAvgWindFactor(builder, lsafAvgWindFactor)

def FlightPlanPointGroups_IngestAddFsafAvgWindFactor(builder, fsafAvgWindFactor):
    builder.PrependFloat64Slot(10, fsafAvgWindFactor, 0.0)

def AddFsafAvgWindFactor(builder, fsafAvgWindFactor):
    FlightPlanPointGroups_IngestAddFsafAvgWindFactor(builder, fsafAvgWindFactor)

def FlightPlanPointGroups_IngestAddEtopsAvgWindFactor(builder, etopsAvgWindFactor):
    builder.PrependFloat64Slot(11, etopsAvgWindFactor, 0.0)

def AddEtopsAvgWindFactor(builder, etopsAvgWindFactor):
    FlightPlanPointGroups_IngestAddEtopsAvgWindFactor(builder, etopsAvgWindFactor)

def FlightPlanPointGroups_IngestAddLsafTempDev(builder, lsafTempDev):
    builder.PrependFloat64Slot(12, lsafTempDev, 0.0)

def AddLsafTempDev(builder, lsafTempDev):
    FlightPlanPointGroups_IngestAddLsafTempDev(builder, lsafTempDev)

def FlightPlanPointGroups_IngestAddFsafTempDev(builder, fsafTempDev):
    builder.PrependFloat64Slot(13, fsafTempDev, 0.0)

def AddFsafTempDev(builder, fsafTempDev):
    FlightPlanPointGroups_IngestAddFsafTempDev(builder, fsafTempDev)

def FlightPlanPointGroups_IngestAddEtopsTempDev(builder, etopsTempDev):
    builder.PrependFloat64Slot(14, etopsTempDev, 0.0)

def AddEtopsTempDev(builder, etopsTempDev):
    FlightPlanPointGroups_IngestAddEtopsTempDev(builder, etopsTempDev)

def FlightPlanPointGroups_IngestAddLsafReqFuel(builder, lsafReqFuel):
    builder.PrependFloat64Slot(15, lsafReqFuel, 0.0)

def AddLsafReqFuel(builder, lsafReqFuel):
    FlightPlanPointGroups_IngestAddLsafReqFuel(builder, lsafReqFuel)

def FlightPlanPointGroups_IngestAddFsafReqFuel(builder, fsafReqFuel):
    builder.PrependFloat64Slot(16, fsafReqFuel, 0.0)

def AddFsafReqFuel(builder, fsafReqFuel):
    FlightPlanPointGroups_IngestAddFsafReqFuel(builder, fsafReqFuel)

def FlightPlanPointGroups_IngestAddEtopsReqFuel(builder, etopsReqFuel):
    builder.PrependFloat64Slot(17, etopsReqFuel, 0.0)

def AddEtopsReqFuel(builder, etopsReqFuel):
    FlightPlanPointGroups_IngestAddEtopsReqFuel(builder, etopsReqFuel)

def FlightPlanPointGroups_IngestAddFromTakeoffTime(builder, fromTakeoffTime):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(fromTakeoffTime), 0)

def AddFromTakeoffTime(builder, fromTakeoffTime):
    FlightPlanPointGroups_IngestAddFromTakeoffTime(builder, fromTakeoffTime)

def FlightPlanPointGroups_IngestAddPlannedFuel(builder, plannedFuel):
    builder.PrependFloat64Slot(19, plannedFuel, 0.0)

def AddPlannedFuel(builder, plannedFuel):
    FlightPlanPointGroups_IngestAddPlannedFuel(builder, plannedFuel)

def FlightPlanPointGroups_IngestAddFuelCalcAlt(builder, fuelCalcAlt):
    builder.PrependFloat64Slot(20, fuelCalcAlt, 0.0)

def AddFuelCalcAlt(builder, fuelCalcAlt):
    FlightPlanPointGroups_IngestAddFuelCalcAlt(builder, fuelCalcAlt)

def FlightPlanPointGroups_IngestAddFuelCalcSpd(builder, fuelCalcSpd):
    builder.PrependFloat64Slot(21, fuelCalcSpd, 0.0)

def AddFuelCalcSpd(builder, fuelCalcSpd):
    FlightPlanPointGroups_IngestAddFuelCalcSpd(builder, fuelCalcSpd)

def FlightPlanPointGroups_IngestAddAvgFuelFlow(builder, avgFuelFlow):
    builder.PrependFloat64Slot(22, avgFuelFlow, 0.0)

def AddAvgFuelFlow(builder, avgFuelFlow):
    FlightPlanPointGroups_IngestAddAvgFuelFlow(builder, avgFuelFlow)

def FlightPlanPointGroups_IngestAddFlightPlanPoints(builder, flightPlanPoints):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(flightPlanPoints), 0)

def AddFlightPlanPoints(builder, flightPlanPoints):
    FlightPlanPointGroups_IngestAddFlightPlanPoints(builder, flightPlanPoints)

def FlightPlanPointGroups_IngestStartFlightPlanPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlightPlanPointsVector(builder, numElems):
    return FlightPlanPointGroups_IngestStartFlightPlanPointsVector(builder, numElems)

def FlightPlanPointGroups_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlanPointGroups_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class FlightPlanPointGroups_IngestT(object):

    # FlightPlanPointGroups_IngestT
    def __init__(self):
        self.pointGroupName = None  # type: str
        self.worstFuelCase = None  # type: str
        self.lsafName = None  # type: str
        self.lsafDistance = 0.0  # type: float
        self.fsafDistance = 0.0  # type: float
        self.etopsDistance = 0.0  # type: float
        self.lsafTime = None  # type: str
        self.fsafTime = None  # type: str
        self.etopsTime = None  # type: str
        self.lsafAvgWindFactor = 0.0  # type: float
        self.fsafAvgWindFactor = 0.0  # type: float
        self.etopsAvgWindFactor = 0.0  # type: float
        self.lsafTempDev = 0.0  # type: float
        self.fsafTempDev = 0.0  # type: float
        self.etopsTempDev = 0.0  # type: float
        self.lsafReqFuel = 0.0  # type: float
        self.fsafReqFuel = 0.0  # type: float
        self.etopsReqFuel = 0.0  # type: float
        self.fromTakeoffTime = None  # type: str
        self.plannedFuel = 0.0  # type: float
        self.fuelCalcAlt = 0.0  # type: float
        self.fuelCalcSpd = 0.0  # type: float
        self.avgFuelFlow = 0.0  # type: float
        self.flightPlanPoints = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanPointGroupsIngest = FlightPlanPointGroups_Ingest()
        flightPlanPointGroupsIngest.Init(buf, pos)
        return cls.InitFromObj(flightPlanPointGroupsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanPointGroupsIngest):
        x = FlightPlanPointGroups_IngestT()
        x._UnPack(flightPlanPointGroupsIngest)
        return x

    # FlightPlanPointGroups_IngestT
    def _UnPack(self, flightPlanPointGroupsIngest):
        if flightPlanPointGroupsIngest is None:
            return
        self.pointGroupName = flightPlanPointGroupsIngest.PointGroupName()
        self.worstFuelCase = flightPlanPointGroupsIngest.WorstFuelCase()
        self.lsafName = flightPlanPointGroupsIngest.LsafName()
        self.lsafDistance = flightPlanPointGroupsIngest.LsafDistance()
        self.fsafDistance = flightPlanPointGroupsIngest.FsafDistance()
        self.etopsDistance = flightPlanPointGroupsIngest.EtopsDistance()
        self.lsafTime = flightPlanPointGroupsIngest.LsafTime()
        self.fsafTime = flightPlanPointGroupsIngest.FsafTime()
        self.etopsTime = flightPlanPointGroupsIngest.EtopsTime()
        self.lsafAvgWindFactor = flightPlanPointGroupsIngest.LsafAvgWindFactor()
        self.fsafAvgWindFactor = flightPlanPointGroupsIngest.FsafAvgWindFactor()
        self.etopsAvgWindFactor = flightPlanPointGroupsIngest.EtopsAvgWindFactor()
        self.lsafTempDev = flightPlanPointGroupsIngest.LsafTempDev()
        self.fsafTempDev = flightPlanPointGroupsIngest.FsafTempDev()
        self.etopsTempDev = flightPlanPointGroupsIngest.EtopsTempDev()
        self.lsafReqFuel = flightPlanPointGroupsIngest.LsafReqFuel()
        self.fsafReqFuel = flightPlanPointGroupsIngest.FsafReqFuel()
        self.etopsReqFuel = flightPlanPointGroupsIngest.EtopsReqFuel()
        self.fromTakeoffTime = flightPlanPointGroupsIngest.FromTakeoffTime()
        self.plannedFuel = flightPlanPointGroupsIngest.PlannedFuel()
        self.fuelCalcAlt = flightPlanPointGroupsIngest.FuelCalcAlt()
        self.fuelCalcSpd = flightPlanPointGroupsIngest.FuelCalcSpd()
        self.avgFuelFlow = flightPlanPointGroupsIngest.AvgFuelFlow()
        if not flightPlanPointGroupsIngest.FlightPlanPointsIsNone():
            self.flightPlanPoints = []
            for i in range(flightPlanPointGroupsIngest.FlightPlanPointsLength()):
                self.flightPlanPoints.append(flightPlanPointGroupsIngest.FlightPlanPoints(i))

    # FlightPlanPointGroups_IngestT
    def Pack(self, builder):
        if self.pointGroupName is not None:
            pointGroupName = builder.CreateString(self.pointGroupName)
        if self.worstFuelCase is not None:
            worstFuelCase = builder.CreateString(self.worstFuelCase)
        if self.lsafName is not None:
            lsafName = builder.CreateString(self.lsafName)
        if self.lsafTime is not None:
            lsafTime = builder.CreateString(self.lsafTime)
        if self.fsafTime is not None:
            fsafTime = builder.CreateString(self.fsafTime)
        if self.etopsTime is not None:
            etopsTime = builder.CreateString(self.etopsTime)
        if self.fromTakeoffTime is not None:
            fromTakeoffTime = builder.CreateString(self.fromTakeoffTime)
        if self.flightPlanPoints is not None:
            flightPlanPointslist = []
            for i in range(len(self.flightPlanPoints)):
                flightPlanPointslist.append(builder.CreateString(self.flightPlanPoints[i]))
            FlightPlanPointGroups_IngestStartFlightPlanPointsVector(builder, len(self.flightPlanPoints))
            for i in reversed(range(len(self.flightPlanPoints))):
                builder.PrependUOffsetTRelative(flightPlanPointslist[i])
            flightPlanPoints = builder.EndVector()
        FlightPlanPointGroups_IngestStart(builder)
        if self.pointGroupName is not None:
            FlightPlanPointGroups_IngestAddPointGroupName(builder, pointGroupName)
        if self.worstFuelCase is not None:
            FlightPlanPointGroups_IngestAddWorstFuelCase(builder, worstFuelCase)
        if self.lsafName is not None:
            FlightPlanPointGroups_IngestAddLsafName(builder, lsafName)
        FlightPlanPointGroups_IngestAddLsafDistance(builder, self.lsafDistance)
        FlightPlanPointGroups_IngestAddFsafDistance(builder, self.fsafDistance)
        FlightPlanPointGroups_IngestAddEtopsDistance(builder, self.etopsDistance)
        if self.lsafTime is not None:
            FlightPlanPointGroups_IngestAddLsafTime(builder, lsafTime)
        if self.fsafTime is not None:
            FlightPlanPointGroups_IngestAddFsafTime(builder, fsafTime)
        if self.etopsTime is not None:
            FlightPlanPointGroups_IngestAddEtopsTime(builder, etopsTime)
        FlightPlanPointGroups_IngestAddLsafAvgWindFactor(builder, self.lsafAvgWindFactor)
        FlightPlanPointGroups_IngestAddFsafAvgWindFactor(builder, self.fsafAvgWindFactor)
        FlightPlanPointGroups_IngestAddEtopsAvgWindFactor(builder, self.etopsAvgWindFactor)
        FlightPlanPointGroups_IngestAddLsafTempDev(builder, self.lsafTempDev)
        FlightPlanPointGroups_IngestAddFsafTempDev(builder, self.fsafTempDev)
        FlightPlanPointGroups_IngestAddEtopsTempDev(builder, self.etopsTempDev)
        FlightPlanPointGroups_IngestAddLsafReqFuel(builder, self.lsafReqFuel)
        FlightPlanPointGroups_IngestAddFsafReqFuel(builder, self.fsafReqFuel)
        FlightPlanPointGroups_IngestAddEtopsReqFuel(builder, self.etopsReqFuel)
        if self.fromTakeoffTime is not None:
            FlightPlanPointGroups_IngestAddFromTakeoffTime(builder, fromTakeoffTime)
        FlightPlanPointGroups_IngestAddPlannedFuel(builder, self.plannedFuel)
        FlightPlanPointGroups_IngestAddFuelCalcAlt(builder, self.fuelCalcAlt)
        FlightPlanPointGroups_IngestAddFuelCalcSpd(builder, self.fuelCalcSpd)
        FlightPlanPointGroups_IngestAddAvgFuelFlow(builder, self.avgFuelFlow)
        if self.flightPlanPoints is not None:
            FlightPlanPointGroups_IngestAddFlightPlanPoints(builder, flightPlanPoints)
        flightPlanPointGroupsIngest = FlightPlanPointGroups_IngestEnd(builder)
        return flightPlanPointGroupsIngest
