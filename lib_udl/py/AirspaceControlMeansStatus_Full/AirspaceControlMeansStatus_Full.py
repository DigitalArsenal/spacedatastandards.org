# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
class AirspaceControlMeansStatus_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirspaceControlMeansStatus_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirspaceControlMeansStatus_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirspaceControlMeansStatus_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x53", size_prefixed=size_prefixed)

    # AirspaceControlMeansStatus_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
    # Example: /// Example: ADD
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeansStatus_Full
    def CmStat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
    # Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
    # Constraints: No constraints specified.
    # AirspaceControlMeansStatus_Full
    def CmStatId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeansStatus_Full
    def CmStatIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeansStatus_Full
    def CmStatIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirspaceControlMeansStatus_Full
    def AirspaceControlMeans(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeansStatus_Full
    def AirspaceControlMeansLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeansStatus_Full
    def AirspaceControlMeansIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def AirspaceControlMeansStatus_FullStart(builder):
    builder.StartObject(3)

def Start(builder):
    AirspaceControlMeansStatus_FullStart(builder)

def AirspaceControlMeansStatus_FullAddCmStat(builder, cmStat):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmStat), 0)

def AddCmStat(builder, cmStat):
    AirspaceControlMeansStatus_FullAddCmStat(builder, cmStat)

def AirspaceControlMeansStatus_FullAddCmStatId(builder, cmStatId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmStatId), 0)

def AddCmStatId(builder, cmStatId):
    AirspaceControlMeansStatus_FullAddCmStatId(builder, cmStatId)

def AirspaceControlMeansStatus_FullStartCmStatIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCmStatIdVector(builder, numElems):
    return AirspaceControlMeansStatus_FullStartCmStatIdVector(builder, numElems)

def AirspaceControlMeansStatus_FullAddAirspaceControlMeans(builder, airspaceControlMeans):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(airspaceControlMeans), 0)

def AddAirspaceControlMeans(builder, airspaceControlMeans):
    AirspaceControlMeansStatus_FullAddAirspaceControlMeans(builder, airspaceControlMeans)

def AirspaceControlMeansStatus_FullStartAirspaceControlMeansVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAirspaceControlMeansVector(builder, numElems):
    return AirspaceControlMeansStatus_FullStartAirspaceControlMeansVector(builder, numElems)

def AirspaceControlMeansStatus_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirspaceControlMeansStatus_FullEnd(builder)

try:
    from typing import List
except:
    pass

class AirspaceControlMeansStatus_FullT(object):

    # AirspaceControlMeansStatus_FullT
    def __init__(self):
        self.cmStat = None  # type: str
        self.cmStatId = None  # type: List[str]
        self.airspaceControlMeans = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airspaceControlMeansStatusFull = AirspaceControlMeansStatus_Full()
        airspaceControlMeansStatusFull.Init(buf, pos)
        return cls.InitFromObj(airspaceControlMeansStatusFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airspaceControlMeansStatusFull):
        x = AirspaceControlMeansStatus_FullT()
        x._UnPack(airspaceControlMeansStatusFull)
        return x

    # AirspaceControlMeansStatus_FullT
    def _UnPack(self, airspaceControlMeansStatusFull):
        if airspaceControlMeansStatusFull is None:
            return
        self.cmStat = airspaceControlMeansStatusFull.CmStat()
        if not airspaceControlMeansStatusFull.CmStatIdIsNone():
            self.cmStatId = []
            for i in range(airspaceControlMeansStatusFull.CmStatIdLength()):
                self.cmStatId.append(airspaceControlMeansStatusFull.CmStatId(i))
        if not airspaceControlMeansStatusFull.AirspaceControlMeansIsNone():
            self.airspaceControlMeans = []
            for i in range(airspaceControlMeansStatusFull.AirspaceControlMeansLength()):
                self.airspaceControlMeans.append(airspaceControlMeansStatusFull.AirspaceControlMeans(i))

    # AirspaceControlMeansStatus_FullT
    def Pack(self, builder):
        if self.cmStat is not None:
            cmStat = builder.CreateString(self.cmStat)
        if self.cmStatId is not None:
            cmStatIdlist = []
            for i in range(len(self.cmStatId)):
                cmStatIdlist.append(builder.CreateString(self.cmStatId[i]))
            AirspaceControlMeansStatus_FullStartCmStatIdVector(builder, len(self.cmStatId))
            for i in reversed(range(len(self.cmStatId))):
                builder.PrependUOffsetTRelative(cmStatIdlist[i])
            cmStatId = builder.EndVector()
        if self.airspaceControlMeans is not None:
            airspaceControlMeanslist = []
            for i in range(len(self.airspaceControlMeans)):
                airspaceControlMeanslist.append(builder.CreateString(self.airspaceControlMeans[i]))
            AirspaceControlMeansStatus_FullStartAirspaceControlMeansVector(builder, len(self.airspaceControlMeans))
            for i in reversed(range(len(self.airspaceControlMeans))):
                builder.PrependUOffsetTRelative(airspaceControlMeanslist[i])
            airspaceControlMeans = builder.EndVector()
        AirspaceControlMeansStatus_FullStart(builder)
        if self.cmStat is not None:
            AirspaceControlMeansStatus_FullAddCmStat(builder, cmStat)
        if self.cmStatId is not None:
            AirspaceControlMeansStatus_FullAddCmStatId(builder, cmStatId)
        if self.airspaceControlMeans is not None:
            AirspaceControlMeansStatus_FullAddAirspaceControlMeans(builder, airspaceControlMeans)
        airspaceControlMeansStatusFull = AirspaceControlMeansStatus_FullEnd(builder)
        return airspaceControlMeansStatusFull
