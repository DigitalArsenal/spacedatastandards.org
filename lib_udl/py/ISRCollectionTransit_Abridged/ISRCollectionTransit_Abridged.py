# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Object for data dissemination.
class ISRCollectionTransit_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionTransit_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionTransit_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionTransit_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionTransit_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Transit Unique Identifier.
    # Example: /// Example: ISRCOLLECTIONTRANSIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ISRCollectionTransit_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Military Base to transmit the dissemination of this data.
    # Example: /// Example: ENVOYS
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionTransit_Abridged
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Length of mission in milliseconds.
    # Example: /// Example: 200.23
    # Constraints: No constraints specified.
    # ISRCollectionTransit_Abridged
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def ISRCollectionTransit_AbridgedStart(builder):
    builder.StartObject(3)

def Start(builder):
    ISRCollectionTransit_AbridgedStart(builder)

def ISRCollectionTransit_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ISRCollectionTransit_AbridgedAddId(builder, id)

def ISRCollectionTransit_AbridgedAddBase(builder, base):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)

def AddBase(builder, base):
    ISRCollectionTransit_AbridgedAddBase(builder, base)

def ISRCollectionTransit_AbridgedAddDuration(builder, duration):
    builder.PrependFloat64Slot(2, duration, 0.0)

def AddDuration(builder, duration):
    ISRCollectionTransit_AbridgedAddDuration(builder, duration)

def ISRCollectionTransit_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionTransit_AbridgedEnd(builder)


class ISRCollectionTransit_AbridgedT(object):

    # ISRCollectionTransit_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.base = None  # type: str
        self.duration = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionTransitAbridged = ISRCollectionTransit_Abridged()
        isrcollectionTransitAbridged.Init(buf, pos)
        return cls.InitFromObj(isrcollectionTransitAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionTransitAbridged):
        x = ISRCollectionTransit_AbridgedT()
        x._UnPack(isrcollectionTransitAbridged)
        return x

    # ISRCollectionTransit_AbridgedT
    def _UnPack(self, isrcollectionTransitAbridged):
        if isrcollectionTransitAbridged is None:
            return
        self.id = isrcollectionTransitAbridged.Id()
        self.base = isrcollectionTransitAbridged.Base()
        self.duration = isrcollectionTransitAbridged.Duration()

    # ISRCollectionTransit_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.base is not None:
            base = builder.CreateString(self.base)
        ISRCollectionTransit_AbridgedStart(builder)
        if self.id is not None:
            ISRCollectionTransit_AbridgedAddId(builder, id)
        if self.base is not None:
            ISRCollectionTransit_AbridgedAddBase(builder, base)
        ISRCollectionTransit_AbridgedAddDuration(builder, self.duration)
        isrcollectionTransitAbridged = ISRCollectionTransit_AbridgedEnd(builder)
        return isrcollectionTransitAbridged
