# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
class MtiMission_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MtiMission_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMtiMission_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MtiMission_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x54\x49\x4D", size_prefixed=size_prefixed)

    # MtiMission_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The mission plan id.
    # Example: /// Example: M1-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # MtiMission_Full
    def M1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identification of the flight plan.
    # Example: /// Example: M2-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # MtiMission_Full
    def M2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Platform type that originated the data.
    # Example: /// Example: PLATFORM
    # Constraints: Minimum length = 0, Maximum length = 64
    # MtiMission_Full
    def M3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identification of the platform variant, modifications, etc.
    # Example: /// Example: IDENT
    # Constraints: Minimum length = 0, Maximum length = 16
    # MtiMission_Full
    def M4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission origination date.
    # Example: /// Example: 2018-01-01
    # Constraints: No constraints specified.
    # MtiMission_Full
    def MsnRefTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MtiMission_FullStart(builder):
    builder.StartObject(5)

def Start(builder):
    MtiMission_FullStart(builder)

def MtiMission_FullAddM1(builder, m1):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(m1), 0)

def AddM1(builder, m1):
    MtiMission_FullAddM1(builder, m1)

def MtiMission_FullAddM2(builder, m2):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(m2), 0)

def AddM2(builder, m2):
    MtiMission_FullAddM2(builder, m2)

def MtiMission_FullAddM3(builder, m3):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(m3), 0)

def AddM3(builder, m3):
    MtiMission_FullAddM3(builder, m3)

def MtiMission_FullAddM4(builder, m4):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(m4), 0)

def AddM4(builder, m4):
    MtiMission_FullAddM4(builder, m4)

def MtiMission_FullAddMsnRefTs(builder, msnRefTs):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(msnRefTs), 0)

def AddMsnRefTs(builder, msnRefTs):
    MtiMission_FullAddMsnRefTs(builder, msnRefTs)

def MtiMission_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return MtiMission_FullEnd(builder)


class MtiMission_FullT(object):

    # MtiMission_FullT
    def __init__(self):
        self.m1 = None  # type: str
        self.m2 = None  # type: str
        self.m3 = None  # type: str
        self.m4 = None  # type: str
        self.msnRefTs = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtiMissionFull = MtiMission_Full()
        mtiMissionFull.Init(buf, pos)
        return cls.InitFromObj(mtiMissionFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtiMissionFull):
        x = MtiMission_FullT()
        x._UnPack(mtiMissionFull)
        return x

    # MtiMission_FullT
    def _UnPack(self, mtiMissionFull):
        if mtiMissionFull is None:
            return
        self.m1 = mtiMissionFull.M1()
        self.m2 = mtiMissionFull.M2()
        self.m3 = mtiMissionFull.M3()
        self.m4 = mtiMissionFull.M4()
        self.msnRefTs = mtiMissionFull.MsnRefTs()

    # MtiMission_FullT
    def Pack(self, builder):
        if self.m1 is not None:
            m1 = builder.CreateString(self.m1)
        if self.m2 is not None:
            m2 = builder.CreateString(self.m2)
        if self.m3 is not None:
            m3 = builder.CreateString(self.m3)
        if self.m4 is not None:
            m4 = builder.CreateString(self.m4)
        if self.msnRefTs is not None:
            msnRefTs = builder.CreateString(self.msnRefTs)
        MtiMission_FullStart(builder)
        if self.m1 is not None:
            MtiMission_FullAddM1(builder, m1)
        if self.m2 is not None:
            MtiMission_FullAddM2(builder, m2)
        if self.m3 is not None:
            MtiMission_FullAddM3(builder, m3)
        if self.m4 is not None:
            MtiMission_FullAddM4(builder, m4)
        if self.msnRefTs is not None:
            MtiMission_FullAddMsnRefTs(builder, msnRefTs)
        mtiMissionFull = MtiMission_FullEnd(builder)
        return mtiMissionFull
