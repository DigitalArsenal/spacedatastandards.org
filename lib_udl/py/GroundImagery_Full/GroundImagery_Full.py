# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
class GroundImagery_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GroundImagery_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGroundImagery_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GroundImagery_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x47\x52\x4F\x55", size_prefixed=size_prefixed)

    # GroundImagery_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: GROUNDIMAGERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # GroundImagery_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID of the sensor that produced this ground image.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # GroundImagery_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # GroundImagery_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp the image was captured/produced.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def ImageTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the image file.
    # Example: /// Example: Example file name
    # Constraints: Minimum length = 1, Maximum length = 128
    # GroundImagery_Full
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
    # Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
    # Constraints: Minimum length = 0, Maximum length = 65535
    # GroundImagery_Full
    def Region(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: Minimum length = 0, Maximum length = 65535
    # GroundImagery_Full
    def RegionText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: Minimum length = 0, Maximum length = 65535
    # GroundImagery_Full
    def RegionGeoJson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: Polygon
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Full
    def RegionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def RegionNdims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 4326
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def RegionSrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # GroundImagery_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
    # Example: /// Example: SUBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # GroundImagery_Full
    def SubjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional name/description associated with this image.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 0, Maximum length = 128
    # GroundImagery_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # GroundImagery_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # GroundImagery_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # GroundImagery_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # GroundImagery_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only time the row was updated in the database, set automatically by the system on update.
    # Example: /// Example: 2018-01-02T16:00:00.123Z
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # GroundImagery_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
    # Constraints: Minimum length = 0, Maximum length = 64
    # GroundImagery_Full
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GroundImagery_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundImagery_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Optional array of keywords for this image.
    # Example: /// Example: ['KEYWORD1', 'KEYWORD2']
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def Keywords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GroundImagery_Full
    def KeywordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundImagery_Full
    def KeywordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Description and notes of the image.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # GroundImagery_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional, field indicating type of image, NITF, PNG, etc.
    # Example: /// Example: PNG
    # Constraints: Minimum length = 1, Maximum length = 16
    # GroundImagery_Full
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # GroundImagery_Full
    def Filesize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MD5 value of the file. The ingest/create operation will automatically generate the value.
    # Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
    # Constraints: Minimum length = 1, Maximum length = 256
    # GroundImagery_Full
    def ChecksumValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GroundImagery_FullStart(builder):
    builder.StartObject(30)

def Start(builder):
    GroundImagery_FullStart(builder)

def GroundImagery_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    GroundImagery_FullAddId(builder, id)

def GroundImagery_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    GroundImagery_FullAddIdSensor(builder, idSensor)

def GroundImagery_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    GroundImagery_FullAddClassificationMarking(builder, classificationMarking)

def GroundImagery_FullAddImageTime(builder, imageTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imageTime), 0)

def AddImageTime(builder, imageTime):
    GroundImagery_FullAddImageTime(builder, imageTime)

def GroundImagery_FullAddFilename(builder, filename):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)

def AddFilename(builder, filename):
    GroundImagery_FullAddFilename(builder, filename)

def GroundImagery_FullAddRegion(builder, region):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(region), 0)

def AddRegion(builder, region):
    GroundImagery_FullAddRegion(builder, region)

def GroundImagery_FullAddRegionText(builder, regionText):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(regionText), 0)

def AddRegionText(builder, regionText):
    GroundImagery_FullAddRegionText(builder, regionText)

def GroundImagery_FullAddRegionGeoJson(builder, regionGeoJson):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(regionGeoJson), 0)

def AddRegionGeoJson(builder, regionGeoJson):
    GroundImagery_FullAddRegionGeoJson(builder, regionGeoJson)

def GroundImagery_FullAddRegionType(builder, regionType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(regionType), 0)

def AddRegionType(builder, regionType):
    GroundImagery_FullAddRegionType(builder, regionType)

def GroundImagery_FullAddRegionNdims(builder, regionNdims):
    builder.PrependInt32Slot(9, regionNdims, 0)

def AddRegionNdims(builder, regionNdims):
    GroundImagery_FullAddRegionNdims(builder, regionNdims)

def GroundImagery_FullAddRegionSrid(builder, regionSrid):
    builder.PrependInt32Slot(10, regionSrid, 0)

def AddRegionSrid(builder, regionSrid):
    GroundImagery_FullAddRegionSrid(builder, regionSrid)

def GroundImagery_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    GroundImagery_FullAddOrigSensorId(builder, origSensorId)

def GroundImagery_FullAddSubjectId(builder, subjectId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subjectId), 0)

def AddSubjectId(builder, subjectId):
    GroundImagery_FullAddSubjectId(builder, subjectId)

def GroundImagery_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    GroundImagery_FullAddName(builder, name)

def GroundImagery_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    GroundImagery_FullAddSource(builder, source)

def GroundImagery_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    GroundImagery_FullAddOrigin(builder, origin)

def GroundImagery_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    GroundImagery_FullAddOrigNetwork(builder, origNetwork)

def GroundImagery_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    GroundImagery_FullAddSourceDl(builder, sourceDl)

def GroundImagery_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(18, dataMode, 0)

def AddDataMode(builder, dataMode):
    GroundImagery_FullAddDataMode(builder, dataMode)

def GroundImagery_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    GroundImagery_FullAddCreatedAt(builder, createdAt)

def GroundImagery_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    GroundImagery_FullAddCreatedBy(builder, createdBy)

def GroundImagery_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    GroundImagery_FullAddUpdatedAt(builder, updatedAt)

def GroundImagery_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    GroundImagery_FullAddUpdatedBy(builder, updatedBy)

def GroundImagery_FullAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    GroundImagery_FullAddTransactionId(builder, transactionId)

def GroundImagery_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    GroundImagery_FullAddTags(builder, tags)

def GroundImagery_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return GroundImagery_FullStartTagsVector(builder, numElems)

def GroundImagery_FullAddKeywords(builder, keywords):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(keywords), 0)

def AddKeywords(builder, keywords):
    GroundImagery_FullAddKeywords(builder, keywords)

def GroundImagery_FullStartKeywordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKeywordsVector(builder, numElems):
    return GroundImagery_FullStartKeywordsVector(builder, numElems)

def GroundImagery_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    GroundImagery_FullAddNotes(builder, notes)

def GroundImagery_FullAddFormat(builder, format):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(format), 0)

def AddFormat(builder, format):
    GroundImagery_FullAddFormat(builder, format)

def GroundImagery_FullAddFilesize(builder, filesize):
    builder.PrependInt64Slot(28, filesize, 0)

def AddFilesize(builder, filesize):
    GroundImagery_FullAddFilesize(builder, filesize)

def GroundImagery_FullAddChecksumValue(builder, checksumValue):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(checksumValue), 0)

def AddChecksumValue(builder, checksumValue):
    GroundImagery_FullAddChecksumValue(builder, checksumValue)

def GroundImagery_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return GroundImagery_FullEnd(builder)

try:
    from typing import List
except:
    pass

class GroundImagery_FullT(object):

    # GroundImagery_FullT
    def __init__(self):
        self.id = None  # type: str
        self.idSensor = None  # type: str
        self.classificationMarking = None  # type: str
        self.imageTime = None  # type: str
        self.filename = None  # type: str
        self.region = None  # type: str
        self.regionText = None  # type: str
        self.regionGeoJson = None  # type: str
        self.regionType = None  # type: str
        self.regionNdims = 0  # type: int
        self.regionSrid = 0  # type: int
        self.origSensorId = None  # type: str
        self.subjectId = None  # type: str
        self.name = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.transactionId = None  # type: str
        self.tags = None  # type: List[str]
        self.keywords = None  # type: List[str]
        self.notes = None  # type: str
        self.format = None  # type: str
        self.filesize = 0  # type: int
        self.checksumValue = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        groundImageryFull = GroundImagery_Full()
        groundImageryFull.Init(buf, pos)
        return cls.InitFromObj(groundImageryFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, groundImageryFull):
        x = GroundImagery_FullT()
        x._UnPack(groundImageryFull)
        return x

    # GroundImagery_FullT
    def _UnPack(self, groundImageryFull):
        if groundImageryFull is None:
            return
        self.id = groundImageryFull.Id()
        self.idSensor = groundImageryFull.IdSensor()
        self.classificationMarking = groundImageryFull.ClassificationMarking()
        self.imageTime = groundImageryFull.ImageTime()
        self.filename = groundImageryFull.Filename()
        self.region = groundImageryFull.Region()
        self.regionText = groundImageryFull.RegionText()
        self.regionGeoJson = groundImageryFull.RegionGeoJson()
        self.regionType = groundImageryFull.RegionType()
        self.regionNdims = groundImageryFull.RegionNdims()
        self.regionSrid = groundImageryFull.RegionSrid()
        self.origSensorId = groundImageryFull.OrigSensorId()
        self.subjectId = groundImageryFull.SubjectId()
        self.name = groundImageryFull.Name()
        self.source = groundImageryFull.Source()
        self.origin = groundImageryFull.Origin()
        self.origNetwork = groundImageryFull.OrigNetwork()
        self.sourceDl = groundImageryFull.SourceDl()
        self.dataMode = groundImageryFull.DataMode()
        self.createdAt = groundImageryFull.CreatedAt()
        self.createdBy = groundImageryFull.CreatedBy()
        self.updatedAt = groundImageryFull.UpdatedAt()
        self.updatedBy = groundImageryFull.UpdatedBy()
        self.transactionId = groundImageryFull.TransactionId()
        if not groundImageryFull.TagsIsNone():
            self.tags = []
            for i in range(groundImageryFull.TagsLength()):
                self.tags.append(groundImageryFull.Tags(i))
        if not groundImageryFull.KeywordsIsNone():
            self.keywords = []
            for i in range(groundImageryFull.KeywordsLength()):
                self.keywords.append(groundImageryFull.Keywords(i))
        self.notes = groundImageryFull.Notes()
        self.format = groundImageryFull.Format()
        self.filesize = groundImageryFull.Filesize()
        self.checksumValue = groundImageryFull.ChecksumValue()

    # GroundImagery_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.imageTime is not None:
            imageTime = builder.CreateString(self.imageTime)
        if self.filename is not None:
            filename = builder.CreateString(self.filename)
        if self.region is not None:
            region = builder.CreateString(self.region)
        if self.regionText is not None:
            regionText = builder.CreateString(self.regionText)
        if self.regionGeoJson is not None:
            regionGeoJson = builder.CreateString(self.regionGeoJson)
        if self.regionType is not None:
            regionType = builder.CreateString(self.regionType)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.subjectId is not None:
            subjectId = builder.CreateString(self.subjectId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            GroundImagery_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.keywords is not None:
            keywordslist = []
            for i in range(len(self.keywords)):
                keywordslist.append(builder.CreateString(self.keywords[i]))
            GroundImagery_FullStartKeywordsVector(builder, len(self.keywords))
            for i in reversed(range(len(self.keywords))):
                builder.PrependUOffsetTRelative(keywordslist[i])
            keywords = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.format is not None:
            format = builder.CreateString(self.format)
        if self.checksumValue is not None:
            checksumValue = builder.CreateString(self.checksumValue)
        GroundImagery_FullStart(builder)
        if self.id is not None:
            GroundImagery_FullAddId(builder, id)
        if self.idSensor is not None:
            GroundImagery_FullAddIdSensor(builder, idSensor)
        if self.classificationMarking is not None:
            GroundImagery_FullAddClassificationMarking(builder, classificationMarking)
        if self.imageTime is not None:
            GroundImagery_FullAddImageTime(builder, imageTime)
        if self.filename is not None:
            GroundImagery_FullAddFilename(builder, filename)
        if self.region is not None:
            GroundImagery_FullAddRegion(builder, region)
        if self.regionText is not None:
            GroundImagery_FullAddRegionText(builder, regionText)
        if self.regionGeoJson is not None:
            GroundImagery_FullAddRegionGeoJson(builder, regionGeoJson)
        if self.regionType is not None:
            GroundImagery_FullAddRegionType(builder, regionType)
        GroundImagery_FullAddRegionNdims(builder, self.regionNdims)
        GroundImagery_FullAddRegionSrid(builder, self.regionSrid)
        if self.origSensorId is not None:
            GroundImagery_FullAddOrigSensorId(builder, origSensorId)
        if self.subjectId is not None:
            GroundImagery_FullAddSubjectId(builder, subjectId)
        if self.name is not None:
            GroundImagery_FullAddName(builder, name)
        if self.source is not None:
            GroundImagery_FullAddSource(builder, source)
        if self.origin is not None:
            GroundImagery_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            GroundImagery_FullAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            GroundImagery_FullAddSourceDl(builder, sourceDl)
        GroundImagery_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            GroundImagery_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            GroundImagery_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            GroundImagery_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            GroundImagery_FullAddUpdatedBy(builder, updatedBy)
        if self.transactionId is not None:
            GroundImagery_FullAddTransactionId(builder, transactionId)
        if self.tags is not None:
            GroundImagery_FullAddTags(builder, tags)
        if self.keywords is not None:
            GroundImagery_FullAddKeywords(builder, keywords)
        if self.notes is not None:
            GroundImagery_FullAddNotes(builder, notes)
        if self.format is not None:
            GroundImagery_FullAddFormat(builder, format)
        GroundImagery_FullAddFilesize(builder, self.filesize)
        if self.checksumValue is not None:
            GroundImagery_FullAddChecksumValue(builder, checksumValue)
        groundImageryFull = GroundImagery_FullEnd(builder)
        return groundImageryFull
