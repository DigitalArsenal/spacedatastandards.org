# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
class Maneuver_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Maneuver_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsManeuver_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Maneuver_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x41\x4E\x45", size_prefixed=size_prefixed)

    # Maneuver_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MANEUVER-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Maneuver_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Maneuver_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
    # Example: /// Example: 2023-11-16T04:15:00.0001Z
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def ReportTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
    # Example: /// Example: 2023-11-16T01:05:16.835689Z
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def EventStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maneuver event end time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2023-11-16T01:09:01.350012Z
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def EventEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
    # Example: /// Example: 600.72
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def TotalBurnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2023-11-16T03:55:51Z
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def OdFitEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    # Example: /// Example: 12
    # Constraints: Minimum length = 0, Maximum length = 36
    # Maneuver_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Maneuver_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Uncertainty in the occurrence of this maneuver (0 - 1).
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def ManeuverUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
    # Example: /// Example: North-South Station Keeping
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def Characterization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
    # Example: /// Example: 0.15
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def CharacterizationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
    # Example: /// Example: EVENT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
    # CANCELLED:  A previously planned maneuver whose execution was cancelled.
    # PLANNED:  A maneuver planned to take place at the eventStartTime.
    # POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
    # REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
    # VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
    # Example: /// Example: POSSIBLE
    # Constraints: Minimum length = 0, Maximum length = 32
    # Maneuver_Abridged
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
    # Example: /// Example: 0.715998327
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    # Example: /// Example: -0.022172844
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaPosU(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    # Example: /// Example: -0.033700154
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaPosV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    # Example: /// Example: -0.714861014
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaPosW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
    # Example: /// Example: 0.000631505
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
    # Example: /// Example: 3.50165629389647e-05
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaVelU(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
    # Example: /// Example: 0.000544413
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaVelV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
    # Example: /// Example: -0.000318099
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaVelW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Difference in mass before and after the maneuver, in kg.
    # Example: /// Example: 0.15
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def DeltaMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional identifier of the element set for the pre-maneuver orbit.
    # Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
    # Constraints: Minimum length = 0, Maximum length = 36
    # Maneuver_Abridged
    def PreEventIdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreEventElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
    # Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
    # Constraints: Minimum length = 0, Maximum length = 36
    # Maneuver_Abridged
    def PreEventIdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreEventStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pre-event X component of position in ECI space, in km.
    # Example: /// Example: 3584.432545
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PrePosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event Y component of position in ECI space, in km.
    # Example: /// Example: 42028.43245
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PrePosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event Z component of position in ECI space, in km.
    # Example: /// Example: -1.97765
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PrePosZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event X component of velocity in ECI space, in km/sec.
    # Example: /// Example: -2.543266
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreVelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event Y component of velocity in ECI space, in km/sec.
    # Example: /// Example: 0.24876
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreVelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event Z component of velocity in ECI space, in km/sec.
    # Example: /// Example: 0.0067352
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreVelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    # Example: /// Example: 4.51e-07
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreRadiationPressCoeff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    # Example: /// Example: 0.000437116
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreBallisticCoeff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft apogee (measured from Earth center), in kilometers.
    # Example: /// Example: 35802
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreApogee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft perigee (measured from Earth center), in kilometers.
    # Example: /// Example: 35786.5
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PrePerigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft orbital inclination, in degrees. 0-180.
    # Example: /// Example: 0.0336
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreInclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft eccentricity.
    # Example: /// Example: 0.00017
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreEccentricity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft orbital period, in minutes.
    # Example: /// Example: 1436.12
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PrePeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    # Example: /// Example: 98.3336
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreRaan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
    # Example: /// Example: 42165.1
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreSma(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -93.12
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreGeoLongitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    # Example: /// Example: -0.0125
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreDriftRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    # Example: /// Example: 0.215
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreSigmaU(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    # Example: /// Example: 1.97
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreSigmaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    # Example: /// Example: 0.208
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PreSigmaW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional identifier of the element set for the post-maneuver orbit.
    # Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
    # Constraints: Minimum length = 0, Maximum length = 36
    # Maneuver_Abridged
    def PostEventIdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostEventElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
    # Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
    # Constraints: Minimum length = 0, Maximum length = 36
    # Maneuver_Abridged
    def PostEventIdStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostEventStateVector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Post-event X component of position in ECI space, in km.
    # Example: /// Example: 3589.351957
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event Y component of position in ECI space, in km.
    # Example: /// Example: 42017.26823
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event Z component of position in ECI space, in km.
    # Example: /// Example: -1.27161796
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostPosZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event X component of velocity in ECI space, in km/sec.
    # Example: /// Example: -3.063152826
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostVelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event Y component of velocity in ECI space, in km/sec.
    # Example: /// Example: 0.261586769
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostVelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event Z component of velocity in ECI space, in km/sec.
    # Example: /// Example: 0.006842148
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostVelZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
    # Example: /// Example: 4.51e-07
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostRadiationPressCoeff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
    # Example: /// Example: 0.000433209
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostBallisticCoeff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft apogee (measured from Earth center), in kilometers.
    # Example: /// Example: 35800.1
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostApogee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft perigee (measured from Earth center), in kilometers.
    # Example: /// Example: 35787.9
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostPerigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft orbital inclination, in degrees. 0-180.
    # Example: /// Example: 0.0327
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostInclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft eccentricity.
    # Example: /// Example: 0.000164
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostEccentricity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft orbital period, in minutes.
    # Example: /// Example: 1436.01
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
    # Example: /// Example: 98.3335
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostRaan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
    # Example: /// Example: 42164.87
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostSma(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -93.15
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostGeoLongitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
    # Example: /// Example: -0.0125
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostDriftRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
    # Example: /// Example: 12.285
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostSigmaU(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
    # Example: /// Example: 71.339
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostSigmaV(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
    # Example: /// Example: 12.77
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostSigmaW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def Cov(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Maneuver_Abridged
    def CovLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Maneuver_Abridged
    def CovIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        return o == 0

    #  Estimated mass of the object following the maneuver, in kg.
    # Example: /// Example: 1844.5
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated area of the object following the maneuver, in meters squared.
    # Example: /// Example: 35.77
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def PostArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of observations used to generate the maneuver data.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def NumObs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Description and notes of the maneuver.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # Maneuver_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Example descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the state model used to generate the maneuver data.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 0, Maximum length = 32
    # Maneuver_Abridged
    def StateModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version of the state model used to generate the maneuver data.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def StateModelVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total number of estimated acceleration points during the maneuver.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def NumAccelPoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
    # Example: /// Example: [10.25, 50.56, 150.78]
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def MnvrAccelTimes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Maneuver_Abridged
    def MnvrAccelTimesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Maneuver_Abridged
    def MnvrAccelTimesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        return o == 0

    # Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
    # Example: /// Example: [0.05, 0.1, 0.05]
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def MnvrAccels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Maneuver_Abridged
    def MnvrAccelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Maneuver_Abridged
    def MnvrAccelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        return o == 0

    # Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
    # Example: /// Example: [0.0005, 0.001, 0.0005]
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def MnvrAccelUncs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Maneuver_Abridged
    def MnvrAccelUncsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Maneuver_Abridged
    def MnvrAccelUncsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Maneuver_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Maneuver_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Maneuver_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Maneuver_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional algorithm used to produce this record.
    # Example: /// Example: Example algorithm
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def Algorithm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Maneuver_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Maneuver_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Maneuver_AbridgedStart(builder):
    builder.StartObject(95)

def Start(builder):
    Maneuver_AbridgedStart(builder)

def Maneuver_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Maneuver_AbridgedAddId(builder, id)

def Maneuver_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Maneuver_AbridgedAddClassificationMarking(builder, classificationMarking)

def Maneuver_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(2, satNo, 0)

def AddSatNo(builder, satNo):
    Maneuver_AbridgedAddSatNo(builder, satNo)

def Maneuver_AbridgedAddReportTime(builder, reportTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(reportTime), 0)

def AddReportTime(builder, reportTime):
    Maneuver_AbridgedAddReportTime(builder, reportTime)

def Maneuver_AbridgedAddEventStartTime(builder, eventStartTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(eventStartTime), 0)

def AddEventStartTime(builder, eventStartTime):
    Maneuver_AbridgedAddEventStartTime(builder, eventStartTime)

def Maneuver_AbridgedAddEventEndTime(builder, eventEndTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(eventEndTime), 0)

def AddEventEndTime(builder, eventEndTime):
    Maneuver_AbridgedAddEventEndTime(builder, eventEndTime)

def Maneuver_AbridgedAddTotalBurnTime(builder, totalBurnTime):
    builder.PrependFloat64Slot(6, totalBurnTime, 0.0)

def AddTotalBurnTime(builder, totalBurnTime):
    Maneuver_AbridgedAddTotalBurnTime(builder, totalBurnTime)

def Maneuver_AbridgedAddOdFitEndTime(builder, odFitEndTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(odFitEndTime), 0)

def AddOdFitEndTime(builder, odFitEndTime):
    Maneuver_AbridgedAddOdFitEndTime(builder, odFitEndTime)

def Maneuver_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    Maneuver_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def Maneuver_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    Maneuver_AbridgedAddIdSensor(builder, idSensor)

def Maneuver_AbridgedAddUct(builder, uct):
    builder.PrependBoolSlot(10, uct, 0)

def AddUct(builder, uct):
    Maneuver_AbridgedAddUct(builder, uct)

def Maneuver_AbridgedAddManeuverUnc(builder, maneuverUnc):
    builder.PrependFloat64Slot(11, maneuverUnc, 0.0)

def AddManeuverUnc(builder, maneuverUnc):
    Maneuver_AbridgedAddManeuverUnc(builder, maneuverUnc)

def Maneuver_AbridgedAddCharacterization(builder, characterization):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(characterization), 0)

def AddCharacterization(builder, characterization):
    Maneuver_AbridgedAddCharacterization(builder, characterization)

def Maneuver_AbridgedAddCharacterizationUnc(builder, characterizationUnc):
    builder.PrependFloat64Slot(13, characterizationUnc, 0.0)

def AddCharacterizationUnc(builder, characterizationUnc):
    Maneuver_AbridgedAddCharacterizationUnc(builder, characterizationUnc)

def Maneuver_AbridgedAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def AddEventId(builder, eventId):
    Maneuver_AbridgedAddEventId(builder, eventId)

def Maneuver_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    Maneuver_AbridgedAddOrigObjectId(builder, origObjectId)

def Maneuver_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    Maneuver_AbridgedAddOrigSensorId(builder, origSensorId)

def Maneuver_AbridgedAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    Maneuver_AbridgedAddStatus(builder, status)

def Maneuver_AbridgedAddDeltaPos(builder, deltaPos):
    builder.PrependFloat64Slot(18, deltaPos, 0.0)

def AddDeltaPos(builder, deltaPos):
    Maneuver_AbridgedAddDeltaPos(builder, deltaPos)

def Maneuver_AbridgedAddDeltaPosU(builder, deltaPosU):
    builder.PrependFloat64Slot(19, deltaPosU, 0.0)

def AddDeltaPosU(builder, deltaPosU):
    Maneuver_AbridgedAddDeltaPosU(builder, deltaPosU)

def Maneuver_AbridgedAddDeltaPosV(builder, deltaPosV):
    builder.PrependFloat64Slot(20, deltaPosV, 0.0)

def AddDeltaPosV(builder, deltaPosV):
    Maneuver_AbridgedAddDeltaPosV(builder, deltaPosV)

def Maneuver_AbridgedAddDeltaPosW(builder, deltaPosW):
    builder.PrependFloat64Slot(21, deltaPosW, 0.0)

def AddDeltaPosW(builder, deltaPosW):
    Maneuver_AbridgedAddDeltaPosW(builder, deltaPosW)

def Maneuver_AbridgedAddDeltaVel(builder, deltaVel):
    builder.PrependFloat64Slot(22, deltaVel, 0.0)

def AddDeltaVel(builder, deltaVel):
    Maneuver_AbridgedAddDeltaVel(builder, deltaVel)

def Maneuver_AbridgedAddDeltaVelU(builder, deltaVelU):
    builder.PrependFloat64Slot(23, deltaVelU, 0.0)

def AddDeltaVelU(builder, deltaVelU):
    Maneuver_AbridgedAddDeltaVelU(builder, deltaVelU)

def Maneuver_AbridgedAddDeltaVelV(builder, deltaVelV):
    builder.PrependFloat64Slot(24, deltaVelV, 0.0)

def AddDeltaVelV(builder, deltaVelV):
    Maneuver_AbridgedAddDeltaVelV(builder, deltaVelV)

def Maneuver_AbridgedAddDeltaVelW(builder, deltaVelW):
    builder.PrependFloat64Slot(25, deltaVelW, 0.0)

def AddDeltaVelW(builder, deltaVelW):
    Maneuver_AbridgedAddDeltaVelW(builder, deltaVelW)

def Maneuver_AbridgedAddDeltaMass(builder, deltaMass):
    builder.PrependFloat64Slot(26, deltaMass, 0.0)

def AddDeltaMass(builder, deltaMass):
    Maneuver_AbridgedAddDeltaMass(builder, deltaMass)

def Maneuver_AbridgedAddPreEventIdElset(builder, preEventIdElset):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(preEventIdElset), 0)

def AddPreEventIdElset(builder, preEventIdElset):
    Maneuver_AbridgedAddPreEventIdElset(builder, preEventIdElset)

def Maneuver_AbridgedAddPreEventElset(builder, preEventElset):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(preEventElset), 0)

def AddPreEventElset(builder, preEventElset):
    Maneuver_AbridgedAddPreEventElset(builder, preEventElset)

def Maneuver_AbridgedAddPreEventIdStateVector(builder, preEventIdStateVector):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(preEventIdStateVector), 0)

def AddPreEventIdStateVector(builder, preEventIdStateVector):
    Maneuver_AbridgedAddPreEventIdStateVector(builder, preEventIdStateVector)

def Maneuver_AbridgedAddPreEventStateVector(builder, preEventStateVector):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(preEventStateVector), 0)

def AddPreEventStateVector(builder, preEventStateVector):
    Maneuver_AbridgedAddPreEventStateVector(builder, preEventStateVector)

def Maneuver_AbridgedAddPrePosX(builder, prePosX):
    builder.PrependFloat64Slot(31, prePosX, 0.0)

def AddPrePosX(builder, prePosX):
    Maneuver_AbridgedAddPrePosX(builder, prePosX)

def Maneuver_AbridgedAddPrePosY(builder, prePosY):
    builder.PrependFloat64Slot(32, prePosY, 0.0)

def AddPrePosY(builder, prePosY):
    Maneuver_AbridgedAddPrePosY(builder, prePosY)

def Maneuver_AbridgedAddPrePosZ(builder, prePosZ):
    builder.PrependFloat64Slot(33, prePosZ, 0.0)

def AddPrePosZ(builder, prePosZ):
    Maneuver_AbridgedAddPrePosZ(builder, prePosZ)

def Maneuver_AbridgedAddPreVelX(builder, preVelX):
    builder.PrependFloat64Slot(34, preVelX, 0.0)

def AddPreVelX(builder, preVelX):
    Maneuver_AbridgedAddPreVelX(builder, preVelX)

def Maneuver_AbridgedAddPreVelY(builder, preVelY):
    builder.PrependFloat64Slot(35, preVelY, 0.0)

def AddPreVelY(builder, preVelY):
    Maneuver_AbridgedAddPreVelY(builder, preVelY)

def Maneuver_AbridgedAddPreVelZ(builder, preVelZ):
    builder.PrependFloat64Slot(36, preVelZ, 0.0)

def AddPreVelZ(builder, preVelZ):
    Maneuver_AbridgedAddPreVelZ(builder, preVelZ)

def Maneuver_AbridgedAddPreRadiationPressCoeff(builder, preRadiationPressCoeff):
    builder.PrependFloat64Slot(37, preRadiationPressCoeff, 0.0)

def AddPreRadiationPressCoeff(builder, preRadiationPressCoeff):
    Maneuver_AbridgedAddPreRadiationPressCoeff(builder, preRadiationPressCoeff)

def Maneuver_AbridgedAddPreBallisticCoeff(builder, preBallisticCoeff):
    builder.PrependFloat64Slot(38, preBallisticCoeff, 0.0)

def AddPreBallisticCoeff(builder, preBallisticCoeff):
    Maneuver_AbridgedAddPreBallisticCoeff(builder, preBallisticCoeff)

def Maneuver_AbridgedAddPreApogee(builder, preApogee):
    builder.PrependFloat64Slot(39, preApogee, 0.0)

def AddPreApogee(builder, preApogee):
    Maneuver_AbridgedAddPreApogee(builder, preApogee)

def Maneuver_AbridgedAddPrePerigee(builder, prePerigee):
    builder.PrependFloat64Slot(40, prePerigee, 0.0)

def AddPrePerigee(builder, prePerigee):
    Maneuver_AbridgedAddPrePerigee(builder, prePerigee)

def Maneuver_AbridgedAddPreInclination(builder, preInclination):
    builder.PrependFloat64Slot(41, preInclination, 0.0)

def AddPreInclination(builder, preInclination):
    Maneuver_AbridgedAddPreInclination(builder, preInclination)

def Maneuver_AbridgedAddPreEccentricity(builder, preEccentricity):
    builder.PrependFloat64Slot(42, preEccentricity, 0.0)

def AddPreEccentricity(builder, preEccentricity):
    Maneuver_AbridgedAddPreEccentricity(builder, preEccentricity)

def Maneuver_AbridgedAddPrePeriod(builder, prePeriod):
    builder.PrependFloat64Slot(43, prePeriod, 0.0)

def AddPrePeriod(builder, prePeriod):
    Maneuver_AbridgedAddPrePeriod(builder, prePeriod)

def Maneuver_AbridgedAddPreRaan(builder, preRaan):
    builder.PrependFloat64Slot(44, preRaan, 0.0)

def AddPreRaan(builder, preRaan):
    Maneuver_AbridgedAddPreRaan(builder, preRaan)

def Maneuver_AbridgedAddPreSma(builder, preSma):
    builder.PrependFloat64Slot(45, preSma, 0.0)

def AddPreSma(builder, preSma):
    Maneuver_AbridgedAddPreSma(builder, preSma)

def Maneuver_AbridgedAddPreGeoLongitude(builder, preGeoLongitude):
    builder.PrependFloat64Slot(46, preGeoLongitude, 0.0)

def AddPreGeoLongitude(builder, preGeoLongitude):
    Maneuver_AbridgedAddPreGeoLongitude(builder, preGeoLongitude)

def Maneuver_AbridgedAddPreDriftRate(builder, preDriftRate):
    builder.PrependFloat64Slot(47, preDriftRate, 0.0)

def AddPreDriftRate(builder, preDriftRate):
    Maneuver_AbridgedAddPreDriftRate(builder, preDriftRate)

def Maneuver_AbridgedAddPreSigmaU(builder, preSigmaU):
    builder.PrependFloat64Slot(48, preSigmaU, 0.0)

def AddPreSigmaU(builder, preSigmaU):
    Maneuver_AbridgedAddPreSigmaU(builder, preSigmaU)

def Maneuver_AbridgedAddPreSigmaV(builder, preSigmaV):
    builder.PrependFloat64Slot(49, preSigmaV, 0.0)

def AddPreSigmaV(builder, preSigmaV):
    Maneuver_AbridgedAddPreSigmaV(builder, preSigmaV)

def Maneuver_AbridgedAddPreSigmaW(builder, preSigmaW):
    builder.PrependFloat64Slot(50, preSigmaW, 0.0)

def AddPreSigmaW(builder, preSigmaW):
    Maneuver_AbridgedAddPreSigmaW(builder, preSigmaW)

def Maneuver_AbridgedAddPostEventIdElset(builder, postEventIdElset):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(postEventIdElset), 0)

def AddPostEventIdElset(builder, postEventIdElset):
    Maneuver_AbridgedAddPostEventIdElset(builder, postEventIdElset)

def Maneuver_AbridgedAddPostEventElset(builder, postEventElset):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(postEventElset), 0)

def AddPostEventElset(builder, postEventElset):
    Maneuver_AbridgedAddPostEventElset(builder, postEventElset)

def Maneuver_AbridgedAddPostEventIdStateVector(builder, postEventIdStateVector):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(postEventIdStateVector), 0)

def AddPostEventIdStateVector(builder, postEventIdStateVector):
    Maneuver_AbridgedAddPostEventIdStateVector(builder, postEventIdStateVector)

def Maneuver_AbridgedAddPostEventStateVector(builder, postEventStateVector):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(postEventStateVector), 0)

def AddPostEventStateVector(builder, postEventStateVector):
    Maneuver_AbridgedAddPostEventStateVector(builder, postEventStateVector)

def Maneuver_AbridgedAddPostPosX(builder, postPosX):
    builder.PrependFloat64Slot(55, postPosX, 0.0)

def AddPostPosX(builder, postPosX):
    Maneuver_AbridgedAddPostPosX(builder, postPosX)

def Maneuver_AbridgedAddPostPosY(builder, postPosY):
    builder.PrependFloat64Slot(56, postPosY, 0.0)

def AddPostPosY(builder, postPosY):
    Maneuver_AbridgedAddPostPosY(builder, postPosY)

def Maneuver_AbridgedAddPostPosZ(builder, postPosZ):
    builder.PrependFloat64Slot(57, postPosZ, 0.0)

def AddPostPosZ(builder, postPosZ):
    Maneuver_AbridgedAddPostPosZ(builder, postPosZ)

def Maneuver_AbridgedAddPostVelX(builder, postVelX):
    builder.PrependFloat64Slot(58, postVelX, 0.0)

def AddPostVelX(builder, postVelX):
    Maneuver_AbridgedAddPostVelX(builder, postVelX)

def Maneuver_AbridgedAddPostVelY(builder, postVelY):
    builder.PrependFloat64Slot(59, postVelY, 0.0)

def AddPostVelY(builder, postVelY):
    Maneuver_AbridgedAddPostVelY(builder, postVelY)

def Maneuver_AbridgedAddPostVelZ(builder, postVelZ):
    builder.PrependFloat64Slot(60, postVelZ, 0.0)

def AddPostVelZ(builder, postVelZ):
    Maneuver_AbridgedAddPostVelZ(builder, postVelZ)

def Maneuver_AbridgedAddPostRadiationPressCoeff(builder, postRadiationPressCoeff):
    builder.PrependFloat64Slot(61, postRadiationPressCoeff, 0.0)

def AddPostRadiationPressCoeff(builder, postRadiationPressCoeff):
    Maneuver_AbridgedAddPostRadiationPressCoeff(builder, postRadiationPressCoeff)

def Maneuver_AbridgedAddPostBallisticCoeff(builder, postBallisticCoeff):
    builder.PrependFloat64Slot(62, postBallisticCoeff, 0.0)

def AddPostBallisticCoeff(builder, postBallisticCoeff):
    Maneuver_AbridgedAddPostBallisticCoeff(builder, postBallisticCoeff)

def Maneuver_AbridgedAddPostApogee(builder, postApogee):
    builder.PrependFloat64Slot(63, postApogee, 0.0)

def AddPostApogee(builder, postApogee):
    Maneuver_AbridgedAddPostApogee(builder, postApogee)

def Maneuver_AbridgedAddPostPerigee(builder, postPerigee):
    builder.PrependFloat64Slot(64, postPerigee, 0.0)

def AddPostPerigee(builder, postPerigee):
    Maneuver_AbridgedAddPostPerigee(builder, postPerigee)

def Maneuver_AbridgedAddPostInclination(builder, postInclination):
    builder.PrependFloat64Slot(65, postInclination, 0.0)

def AddPostInclination(builder, postInclination):
    Maneuver_AbridgedAddPostInclination(builder, postInclination)

def Maneuver_AbridgedAddPostEccentricity(builder, postEccentricity):
    builder.PrependFloat64Slot(66, postEccentricity, 0.0)

def AddPostEccentricity(builder, postEccentricity):
    Maneuver_AbridgedAddPostEccentricity(builder, postEccentricity)

def Maneuver_AbridgedAddPostPeriod(builder, postPeriod):
    builder.PrependFloat64Slot(67, postPeriod, 0.0)

def AddPostPeriod(builder, postPeriod):
    Maneuver_AbridgedAddPostPeriod(builder, postPeriod)

def Maneuver_AbridgedAddPostRaan(builder, postRaan):
    builder.PrependFloat64Slot(68, postRaan, 0.0)

def AddPostRaan(builder, postRaan):
    Maneuver_AbridgedAddPostRaan(builder, postRaan)

def Maneuver_AbridgedAddPostSma(builder, postSma):
    builder.PrependFloat64Slot(69, postSma, 0.0)

def AddPostSma(builder, postSma):
    Maneuver_AbridgedAddPostSma(builder, postSma)

def Maneuver_AbridgedAddPostGeoLongitude(builder, postGeoLongitude):
    builder.PrependFloat64Slot(70, postGeoLongitude, 0.0)

def AddPostGeoLongitude(builder, postGeoLongitude):
    Maneuver_AbridgedAddPostGeoLongitude(builder, postGeoLongitude)

def Maneuver_AbridgedAddPostDriftRate(builder, postDriftRate):
    builder.PrependFloat64Slot(71, postDriftRate, 0.0)

def AddPostDriftRate(builder, postDriftRate):
    Maneuver_AbridgedAddPostDriftRate(builder, postDriftRate)

def Maneuver_AbridgedAddPostSigmaU(builder, postSigmaU):
    builder.PrependFloat64Slot(72, postSigmaU, 0.0)

def AddPostSigmaU(builder, postSigmaU):
    Maneuver_AbridgedAddPostSigmaU(builder, postSigmaU)

def Maneuver_AbridgedAddPostSigmaV(builder, postSigmaV):
    builder.PrependFloat64Slot(73, postSigmaV, 0.0)

def AddPostSigmaV(builder, postSigmaV):
    Maneuver_AbridgedAddPostSigmaV(builder, postSigmaV)

def Maneuver_AbridgedAddPostSigmaW(builder, postSigmaW):
    builder.PrependFloat64Slot(74, postSigmaW, 0.0)

def AddPostSigmaW(builder, postSigmaW):
    Maneuver_AbridgedAddPostSigmaW(builder, postSigmaW)

def Maneuver_AbridgedAddCov(builder, cov):
    builder.PrependUOffsetTRelativeSlot(75, flatbuffers.number_types.UOffsetTFlags.py_type(cov), 0)

def AddCov(builder, cov):
    Maneuver_AbridgedAddCov(builder, cov)

def Maneuver_AbridgedStartCovVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCovVector(builder, numElems):
    return Maneuver_AbridgedStartCovVector(builder, numElems)

def Maneuver_AbridgedAddPostMass(builder, postMass):
    builder.PrependFloat64Slot(76, postMass, 0.0)

def AddPostMass(builder, postMass):
    Maneuver_AbridgedAddPostMass(builder, postMass)

def Maneuver_AbridgedAddPostArea(builder, postArea):
    builder.PrependFloat64Slot(77, postArea, 0.0)

def AddPostArea(builder, postArea):
    Maneuver_AbridgedAddPostArea(builder, postArea)

def Maneuver_AbridgedAddNumObs(builder, numObs):
    builder.PrependInt32Slot(78, numObs, 0)

def AddNumObs(builder, numObs):
    Maneuver_AbridgedAddNumObs(builder, numObs)

def Maneuver_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(79, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    Maneuver_AbridgedAddDescription(builder, description)

def Maneuver_AbridgedAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(80, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    Maneuver_AbridgedAddDescriptor(builder, descriptor)

def Maneuver_AbridgedAddStateModel(builder, stateModel):
    builder.PrependUOffsetTRelativeSlot(81, flatbuffers.number_types.UOffsetTFlags.py_type(stateModel), 0)

def AddStateModel(builder, stateModel):
    Maneuver_AbridgedAddStateModel(builder, stateModel)

def Maneuver_AbridgedAddStateModelVersion(builder, stateModelVersion):
    builder.PrependFloat64Slot(82, stateModelVersion, 0.0)

def AddStateModelVersion(builder, stateModelVersion):
    Maneuver_AbridgedAddStateModelVersion(builder, stateModelVersion)

def Maneuver_AbridgedAddNumAccelPoints(builder, numAccelPoints):
    builder.PrependInt32Slot(83, numAccelPoints, 0)

def AddNumAccelPoints(builder, numAccelPoints):
    Maneuver_AbridgedAddNumAccelPoints(builder, numAccelPoints)

def Maneuver_AbridgedAddMnvrAccelTimes(builder, mnvrAccelTimes):
    builder.PrependUOffsetTRelativeSlot(84, flatbuffers.number_types.UOffsetTFlags.py_type(mnvrAccelTimes), 0)

def AddMnvrAccelTimes(builder, mnvrAccelTimes):
    Maneuver_AbridgedAddMnvrAccelTimes(builder, mnvrAccelTimes)

def Maneuver_AbridgedStartMnvrAccelTimesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMnvrAccelTimesVector(builder, numElems):
    return Maneuver_AbridgedStartMnvrAccelTimesVector(builder, numElems)

def Maneuver_AbridgedAddMnvrAccels(builder, mnvrAccels):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(mnvrAccels), 0)

def AddMnvrAccels(builder, mnvrAccels):
    Maneuver_AbridgedAddMnvrAccels(builder, mnvrAccels)

def Maneuver_AbridgedStartMnvrAccelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMnvrAccelsVector(builder, numElems):
    return Maneuver_AbridgedStartMnvrAccelsVector(builder, numElems)

def Maneuver_AbridgedAddMnvrAccelUncs(builder, mnvrAccelUncs):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(mnvrAccelUncs), 0)

def AddMnvrAccelUncs(builder, mnvrAccelUncs):
    Maneuver_AbridgedAddMnvrAccelUncs(builder, mnvrAccelUncs)

def Maneuver_AbridgedStartMnvrAccelUncsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMnvrAccelUncsVector(builder, numElems):
    return Maneuver_AbridgedStartMnvrAccelUncsVector(builder, numElems)

def Maneuver_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Maneuver_AbridgedAddSource(builder, source)

def Maneuver_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Maneuver_AbridgedAddOrigin(builder, origin)

def Maneuver_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(89, dataMode, 0)

def AddDataMode(builder, dataMode):
    Maneuver_AbridgedAddDataMode(builder, dataMode)

def Maneuver_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Maneuver_AbridgedAddCreatedAt(builder, createdAt)

def Maneuver_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(91, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Maneuver_AbridgedAddCreatedBy(builder, createdBy)

def Maneuver_AbridgedAddAlgorithm(builder, algorithm):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(algorithm), 0)

def AddAlgorithm(builder, algorithm):
    Maneuver_AbridgedAddAlgorithm(builder, algorithm)

def Maneuver_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(93, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    Maneuver_AbridgedAddTransactionId(builder, transactionId)

def Maneuver_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(94, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Maneuver_AbridgedAddOrigNetwork(builder, origNetwork)

def Maneuver_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Maneuver_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class Maneuver_AbridgedT(object):

    # Maneuver_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.satNo = 0  # type: int
        self.reportTime = None  # type: str
        self.eventStartTime = None  # type: str
        self.eventEndTime = None  # type: str
        self.totalBurnTime = 0.0  # type: float
        self.odFitEndTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSensor = None  # type: str
        self.uct = False  # type: bool
        self.maneuverUnc = 0.0  # type: float
        self.characterization = None  # type: str
        self.characterizationUnc = 0.0  # type: float
        self.eventId = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId = None  # type: str
        self.status = None  # type: str
        self.deltaPos = 0.0  # type: float
        self.deltaPosU = 0.0  # type: float
        self.deltaPosV = 0.0  # type: float
        self.deltaPosW = 0.0  # type: float
        self.deltaVel = 0.0  # type: float
        self.deltaVelU = 0.0  # type: float
        self.deltaVelV = 0.0  # type: float
        self.deltaVelW = 0.0  # type: float
        self.deltaMass = 0.0  # type: float
        self.preEventIdElset = None  # type: str
        self.preEventElset = None  # type: str
        self.preEventIdStateVector = None  # type: str
        self.preEventStateVector = None  # type: str
        self.prePosX = 0.0  # type: float
        self.prePosY = 0.0  # type: float
        self.prePosZ = 0.0  # type: float
        self.preVelX = 0.0  # type: float
        self.preVelY = 0.0  # type: float
        self.preVelZ = 0.0  # type: float
        self.preRadiationPressCoeff = 0.0  # type: float
        self.preBallisticCoeff = 0.0  # type: float
        self.preApogee = 0.0  # type: float
        self.prePerigee = 0.0  # type: float
        self.preInclination = 0.0  # type: float
        self.preEccentricity = 0.0  # type: float
        self.prePeriod = 0.0  # type: float
        self.preRaan = 0.0  # type: float
        self.preSma = 0.0  # type: float
        self.preGeoLongitude = 0.0  # type: float
        self.preDriftRate = 0.0  # type: float
        self.preSigmaU = 0.0  # type: float
        self.preSigmaV = 0.0  # type: float
        self.preSigmaW = 0.0  # type: float
        self.postEventIdElset = None  # type: str
        self.postEventElset = None  # type: str
        self.postEventIdStateVector = None  # type: str
        self.postEventStateVector = None  # type: str
        self.postPosX = 0.0  # type: float
        self.postPosY = 0.0  # type: float
        self.postPosZ = 0.0  # type: float
        self.postVelX = 0.0  # type: float
        self.postVelY = 0.0  # type: float
        self.postVelZ = 0.0  # type: float
        self.postRadiationPressCoeff = 0.0  # type: float
        self.postBallisticCoeff = 0.0  # type: float
        self.postApogee = 0.0  # type: float
        self.postPerigee = 0.0  # type: float
        self.postInclination = 0.0  # type: float
        self.postEccentricity = 0.0  # type: float
        self.postPeriod = 0.0  # type: float
        self.postRaan = 0.0  # type: float
        self.postSma = 0.0  # type: float
        self.postGeoLongitude = 0.0  # type: float
        self.postDriftRate = 0.0  # type: float
        self.postSigmaU = 0.0  # type: float
        self.postSigmaV = 0.0  # type: float
        self.postSigmaW = 0.0  # type: float
        self.cov = None  # type: List[str]
        self.postMass = 0.0  # type: float
        self.postArea = 0.0  # type: float
        self.numObs = 0  # type: int
        self.description = None  # type: str
        self.descriptor = None  # type: str
        self.stateModel = None  # type: str
        self.stateModelVersion = 0.0  # type: float
        self.numAccelPoints = 0  # type: int
        self.mnvrAccelTimes = None  # type: List[str]
        self.mnvrAccels = None  # type: List[str]
        self.mnvrAccelUncs = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.algorithm = None  # type: str
        self.transactionId = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        maneuverAbridged = Maneuver_Abridged()
        maneuverAbridged.Init(buf, pos)
        return cls.InitFromObj(maneuverAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, maneuverAbridged):
        x = Maneuver_AbridgedT()
        x._UnPack(maneuverAbridged)
        return x

    # Maneuver_AbridgedT
    def _UnPack(self, maneuverAbridged):
        if maneuverAbridged is None:
            return
        self.id = maneuverAbridged.Id()
        self.classificationMarking = maneuverAbridged.ClassificationMarking()
        self.satNo = maneuverAbridged.SatNo()
        self.reportTime = maneuverAbridged.ReportTime()
        self.eventStartTime = maneuverAbridged.EventStartTime()
        self.eventEndTime = maneuverAbridged.EventEndTime()
        self.totalBurnTime = maneuverAbridged.TotalBurnTime()
        self.odFitEndTime = maneuverAbridged.OdFitEndTime()
        self.idOnOrbit = maneuverAbridged.IdOnOrbit()
        self.idSensor = maneuverAbridged.IdSensor()
        self.uct = maneuverAbridged.Uct()
        self.maneuverUnc = maneuverAbridged.ManeuverUnc()
        self.characterization = maneuverAbridged.Characterization()
        self.characterizationUnc = maneuverAbridged.CharacterizationUnc()
        self.eventId = maneuverAbridged.EventId()
        self.origObjectId = maneuverAbridged.OrigObjectId()
        self.origSensorId = maneuverAbridged.OrigSensorId()
        self.status = maneuverAbridged.Status()
        self.deltaPos = maneuverAbridged.DeltaPos()
        self.deltaPosU = maneuverAbridged.DeltaPosU()
        self.deltaPosV = maneuverAbridged.DeltaPosV()
        self.deltaPosW = maneuverAbridged.DeltaPosW()
        self.deltaVel = maneuverAbridged.DeltaVel()
        self.deltaVelU = maneuverAbridged.DeltaVelU()
        self.deltaVelV = maneuverAbridged.DeltaVelV()
        self.deltaVelW = maneuverAbridged.DeltaVelW()
        self.deltaMass = maneuverAbridged.DeltaMass()
        self.preEventIdElset = maneuverAbridged.PreEventIdElset()
        self.preEventElset = maneuverAbridged.PreEventElset()
        self.preEventIdStateVector = maneuverAbridged.PreEventIdStateVector()
        self.preEventStateVector = maneuverAbridged.PreEventStateVector()
        self.prePosX = maneuverAbridged.PrePosX()
        self.prePosY = maneuverAbridged.PrePosY()
        self.prePosZ = maneuverAbridged.PrePosZ()
        self.preVelX = maneuverAbridged.PreVelX()
        self.preVelY = maneuverAbridged.PreVelY()
        self.preVelZ = maneuverAbridged.PreVelZ()
        self.preRadiationPressCoeff = maneuverAbridged.PreRadiationPressCoeff()
        self.preBallisticCoeff = maneuverAbridged.PreBallisticCoeff()
        self.preApogee = maneuverAbridged.PreApogee()
        self.prePerigee = maneuverAbridged.PrePerigee()
        self.preInclination = maneuverAbridged.PreInclination()
        self.preEccentricity = maneuverAbridged.PreEccentricity()
        self.prePeriod = maneuverAbridged.PrePeriod()
        self.preRaan = maneuverAbridged.PreRaan()
        self.preSma = maneuverAbridged.PreSma()
        self.preGeoLongitude = maneuverAbridged.PreGeoLongitude()
        self.preDriftRate = maneuverAbridged.PreDriftRate()
        self.preSigmaU = maneuverAbridged.PreSigmaU()
        self.preSigmaV = maneuverAbridged.PreSigmaV()
        self.preSigmaW = maneuverAbridged.PreSigmaW()
        self.postEventIdElset = maneuverAbridged.PostEventIdElset()
        self.postEventElset = maneuverAbridged.PostEventElset()
        self.postEventIdStateVector = maneuverAbridged.PostEventIdStateVector()
        self.postEventStateVector = maneuverAbridged.PostEventStateVector()
        self.postPosX = maneuverAbridged.PostPosX()
        self.postPosY = maneuverAbridged.PostPosY()
        self.postPosZ = maneuverAbridged.PostPosZ()
        self.postVelX = maneuverAbridged.PostVelX()
        self.postVelY = maneuverAbridged.PostVelY()
        self.postVelZ = maneuverAbridged.PostVelZ()
        self.postRadiationPressCoeff = maneuverAbridged.PostRadiationPressCoeff()
        self.postBallisticCoeff = maneuverAbridged.PostBallisticCoeff()
        self.postApogee = maneuverAbridged.PostApogee()
        self.postPerigee = maneuverAbridged.PostPerigee()
        self.postInclination = maneuverAbridged.PostInclination()
        self.postEccentricity = maneuverAbridged.PostEccentricity()
        self.postPeriod = maneuverAbridged.PostPeriod()
        self.postRaan = maneuverAbridged.PostRaan()
        self.postSma = maneuverAbridged.PostSma()
        self.postGeoLongitude = maneuverAbridged.PostGeoLongitude()
        self.postDriftRate = maneuverAbridged.PostDriftRate()
        self.postSigmaU = maneuverAbridged.PostSigmaU()
        self.postSigmaV = maneuverAbridged.PostSigmaV()
        self.postSigmaW = maneuverAbridged.PostSigmaW()
        if not maneuverAbridged.CovIsNone():
            self.cov = []
            for i in range(maneuverAbridged.CovLength()):
                self.cov.append(maneuverAbridged.Cov(i))
        self.postMass = maneuverAbridged.PostMass()
        self.postArea = maneuverAbridged.PostArea()
        self.numObs = maneuverAbridged.NumObs()
        self.description = maneuverAbridged.Description()
        self.descriptor = maneuverAbridged.Descriptor()
        self.stateModel = maneuverAbridged.StateModel()
        self.stateModelVersion = maneuverAbridged.StateModelVersion()
        self.numAccelPoints = maneuverAbridged.NumAccelPoints()
        if not maneuverAbridged.MnvrAccelTimesIsNone():
            self.mnvrAccelTimes = []
            for i in range(maneuverAbridged.MnvrAccelTimesLength()):
                self.mnvrAccelTimes.append(maneuverAbridged.MnvrAccelTimes(i))
        if not maneuverAbridged.MnvrAccelsIsNone():
            self.mnvrAccels = []
            for i in range(maneuverAbridged.MnvrAccelsLength()):
                self.mnvrAccels.append(maneuverAbridged.MnvrAccels(i))
        if not maneuverAbridged.MnvrAccelUncsIsNone():
            self.mnvrAccelUncs = []
            for i in range(maneuverAbridged.MnvrAccelUncsLength()):
                self.mnvrAccelUncs.append(maneuverAbridged.MnvrAccelUncs(i))
        self.source = maneuverAbridged.Source()
        self.origin = maneuverAbridged.Origin()
        self.dataMode = maneuverAbridged.DataMode()
        self.createdAt = maneuverAbridged.CreatedAt()
        self.createdBy = maneuverAbridged.CreatedBy()
        self.algorithm = maneuverAbridged.Algorithm()
        self.transactionId = maneuverAbridged.TransactionId()
        self.origNetwork = maneuverAbridged.OrigNetwork()

    # Maneuver_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.reportTime is not None:
            reportTime = builder.CreateString(self.reportTime)
        if self.eventStartTime is not None:
            eventStartTime = builder.CreateString(self.eventStartTime)
        if self.eventEndTime is not None:
            eventEndTime = builder.CreateString(self.eventEndTime)
        if self.odFitEndTime is not None:
            odFitEndTime = builder.CreateString(self.odFitEndTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.characterization is not None:
            characterization = builder.CreateString(self.characterization)
        if self.eventId is not None:
            eventId = builder.CreateString(self.eventId)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.preEventIdElset is not None:
            preEventIdElset = builder.CreateString(self.preEventIdElset)
        if self.preEventElset is not None:
            preEventElset = builder.CreateString(self.preEventElset)
        if self.preEventIdStateVector is not None:
            preEventIdStateVector = builder.CreateString(self.preEventIdStateVector)
        if self.preEventStateVector is not None:
            preEventStateVector = builder.CreateString(self.preEventStateVector)
        if self.postEventIdElset is not None:
            postEventIdElset = builder.CreateString(self.postEventIdElset)
        if self.postEventElset is not None:
            postEventElset = builder.CreateString(self.postEventElset)
        if self.postEventIdStateVector is not None:
            postEventIdStateVector = builder.CreateString(self.postEventIdStateVector)
        if self.postEventStateVector is not None:
            postEventStateVector = builder.CreateString(self.postEventStateVector)
        if self.cov is not None:
            covlist = []
            for i in range(len(self.cov)):
                covlist.append(builder.CreateString(self.cov[i]))
            Maneuver_AbridgedStartCovVector(builder, len(self.cov))
            for i in reversed(range(len(self.cov))):
                builder.PrependUOffsetTRelative(covlist[i])
            cov = builder.EndVector()
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.stateModel is not None:
            stateModel = builder.CreateString(self.stateModel)
        if self.mnvrAccelTimes is not None:
            mnvrAccelTimeslist = []
            for i in range(len(self.mnvrAccelTimes)):
                mnvrAccelTimeslist.append(builder.CreateString(self.mnvrAccelTimes[i]))
            Maneuver_AbridgedStartMnvrAccelTimesVector(builder, len(self.mnvrAccelTimes))
            for i in reversed(range(len(self.mnvrAccelTimes))):
                builder.PrependUOffsetTRelative(mnvrAccelTimeslist[i])
            mnvrAccelTimes = builder.EndVector()
        if self.mnvrAccels is not None:
            mnvrAccelslist = []
            for i in range(len(self.mnvrAccels)):
                mnvrAccelslist.append(builder.CreateString(self.mnvrAccels[i]))
            Maneuver_AbridgedStartMnvrAccelsVector(builder, len(self.mnvrAccels))
            for i in reversed(range(len(self.mnvrAccels))):
                builder.PrependUOffsetTRelative(mnvrAccelslist[i])
            mnvrAccels = builder.EndVector()
        if self.mnvrAccelUncs is not None:
            mnvrAccelUncslist = []
            for i in range(len(self.mnvrAccelUncs)):
                mnvrAccelUncslist.append(builder.CreateString(self.mnvrAccelUncs[i]))
            Maneuver_AbridgedStartMnvrAccelUncsVector(builder, len(self.mnvrAccelUncs))
            for i in reversed(range(len(self.mnvrAccelUncs))):
                builder.PrependUOffsetTRelative(mnvrAccelUncslist[i])
            mnvrAccelUncs = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.algorithm is not None:
            algorithm = builder.CreateString(self.algorithm)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Maneuver_AbridgedStart(builder)
        if self.id is not None:
            Maneuver_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Maneuver_AbridgedAddClassificationMarking(builder, classificationMarking)
        Maneuver_AbridgedAddSatNo(builder, self.satNo)
        if self.reportTime is not None:
            Maneuver_AbridgedAddReportTime(builder, reportTime)
        if self.eventStartTime is not None:
            Maneuver_AbridgedAddEventStartTime(builder, eventStartTime)
        if self.eventEndTime is not None:
            Maneuver_AbridgedAddEventEndTime(builder, eventEndTime)
        Maneuver_AbridgedAddTotalBurnTime(builder, self.totalBurnTime)
        if self.odFitEndTime is not None:
            Maneuver_AbridgedAddOdFitEndTime(builder, odFitEndTime)
        if self.idOnOrbit is not None:
            Maneuver_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor is not None:
            Maneuver_AbridgedAddIdSensor(builder, idSensor)
        Maneuver_AbridgedAddUct(builder, self.uct)
        Maneuver_AbridgedAddManeuverUnc(builder, self.maneuverUnc)
        if self.characterization is not None:
            Maneuver_AbridgedAddCharacterization(builder, characterization)
        Maneuver_AbridgedAddCharacterizationUnc(builder, self.characterizationUnc)
        if self.eventId is not None:
            Maneuver_AbridgedAddEventId(builder, eventId)
        if self.origObjectId is not None:
            Maneuver_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.origSensorId is not None:
            Maneuver_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.status is not None:
            Maneuver_AbridgedAddStatus(builder, status)
        Maneuver_AbridgedAddDeltaPos(builder, self.deltaPos)
        Maneuver_AbridgedAddDeltaPosU(builder, self.deltaPosU)
        Maneuver_AbridgedAddDeltaPosV(builder, self.deltaPosV)
        Maneuver_AbridgedAddDeltaPosW(builder, self.deltaPosW)
        Maneuver_AbridgedAddDeltaVel(builder, self.deltaVel)
        Maneuver_AbridgedAddDeltaVelU(builder, self.deltaVelU)
        Maneuver_AbridgedAddDeltaVelV(builder, self.deltaVelV)
        Maneuver_AbridgedAddDeltaVelW(builder, self.deltaVelW)
        Maneuver_AbridgedAddDeltaMass(builder, self.deltaMass)
        if self.preEventIdElset is not None:
            Maneuver_AbridgedAddPreEventIdElset(builder, preEventIdElset)
        if self.preEventElset is not None:
            Maneuver_AbridgedAddPreEventElset(builder, preEventElset)
        if self.preEventIdStateVector is not None:
            Maneuver_AbridgedAddPreEventIdStateVector(builder, preEventIdStateVector)
        if self.preEventStateVector is not None:
            Maneuver_AbridgedAddPreEventStateVector(builder, preEventStateVector)
        Maneuver_AbridgedAddPrePosX(builder, self.prePosX)
        Maneuver_AbridgedAddPrePosY(builder, self.prePosY)
        Maneuver_AbridgedAddPrePosZ(builder, self.prePosZ)
        Maneuver_AbridgedAddPreVelX(builder, self.preVelX)
        Maneuver_AbridgedAddPreVelY(builder, self.preVelY)
        Maneuver_AbridgedAddPreVelZ(builder, self.preVelZ)
        Maneuver_AbridgedAddPreRadiationPressCoeff(builder, self.preRadiationPressCoeff)
        Maneuver_AbridgedAddPreBallisticCoeff(builder, self.preBallisticCoeff)
        Maneuver_AbridgedAddPreApogee(builder, self.preApogee)
        Maneuver_AbridgedAddPrePerigee(builder, self.prePerigee)
        Maneuver_AbridgedAddPreInclination(builder, self.preInclination)
        Maneuver_AbridgedAddPreEccentricity(builder, self.preEccentricity)
        Maneuver_AbridgedAddPrePeriod(builder, self.prePeriod)
        Maneuver_AbridgedAddPreRaan(builder, self.preRaan)
        Maneuver_AbridgedAddPreSma(builder, self.preSma)
        Maneuver_AbridgedAddPreGeoLongitude(builder, self.preGeoLongitude)
        Maneuver_AbridgedAddPreDriftRate(builder, self.preDriftRate)
        Maneuver_AbridgedAddPreSigmaU(builder, self.preSigmaU)
        Maneuver_AbridgedAddPreSigmaV(builder, self.preSigmaV)
        Maneuver_AbridgedAddPreSigmaW(builder, self.preSigmaW)
        if self.postEventIdElset is not None:
            Maneuver_AbridgedAddPostEventIdElset(builder, postEventIdElset)
        if self.postEventElset is not None:
            Maneuver_AbridgedAddPostEventElset(builder, postEventElset)
        if self.postEventIdStateVector is not None:
            Maneuver_AbridgedAddPostEventIdStateVector(builder, postEventIdStateVector)
        if self.postEventStateVector is not None:
            Maneuver_AbridgedAddPostEventStateVector(builder, postEventStateVector)
        Maneuver_AbridgedAddPostPosX(builder, self.postPosX)
        Maneuver_AbridgedAddPostPosY(builder, self.postPosY)
        Maneuver_AbridgedAddPostPosZ(builder, self.postPosZ)
        Maneuver_AbridgedAddPostVelX(builder, self.postVelX)
        Maneuver_AbridgedAddPostVelY(builder, self.postVelY)
        Maneuver_AbridgedAddPostVelZ(builder, self.postVelZ)
        Maneuver_AbridgedAddPostRadiationPressCoeff(builder, self.postRadiationPressCoeff)
        Maneuver_AbridgedAddPostBallisticCoeff(builder, self.postBallisticCoeff)
        Maneuver_AbridgedAddPostApogee(builder, self.postApogee)
        Maneuver_AbridgedAddPostPerigee(builder, self.postPerigee)
        Maneuver_AbridgedAddPostInclination(builder, self.postInclination)
        Maneuver_AbridgedAddPostEccentricity(builder, self.postEccentricity)
        Maneuver_AbridgedAddPostPeriod(builder, self.postPeriod)
        Maneuver_AbridgedAddPostRaan(builder, self.postRaan)
        Maneuver_AbridgedAddPostSma(builder, self.postSma)
        Maneuver_AbridgedAddPostGeoLongitude(builder, self.postGeoLongitude)
        Maneuver_AbridgedAddPostDriftRate(builder, self.postDriftRate)
        Maneuver_AbridgedAddPostSigmaU(builder, self.postSigmaU)
        Maneuver_AbridgedAddPostSigmaV(builder, self.postSigmaV)
        Maneuver_AbridgedAddPostSigmaW(builder, self.postSigmaW)
        if self.cov is not None:
            Maneuver_AbridgedAddCov(builder, cov)
        Maneuver_AbridgedAddPostMass(builder, self.postMass)
        Maneuver_AbridgedAddPostArea(builder, self.postArea)
        Maneuver_AbridgedAddNumObs(builder, self.numObs)
        if self.description is not None:
            Maneuver_AbridgedAddDescription(builder, description)
        if self.descriptor is not None:
            Maneuver_AbridgedAddDescriptor(builder, descriptor)
        if self.stateModel is not None:
            Maneuver_AbridgedAddStateModel(builder, stateModel)
        Maneuver_AbridgedAddStateModelVersion(builder, self.stateModelVersion)
        Maneuver_AbridgedAddNumAccelPoints(builder, self.numAccelPoints)
        if self.mnvrAccelTimes is not None:
            Maneuver_AbridgedAddMnvrAccelTimes(builder, mnvrAccelTimes)
        if self.mnvrAccels is not None:
            Maneuver_AbridgedAddMnvrAccels(builder, mnvrAccels)
        if self.mnvrAccelUncs is not None:
            Maneuver_AbridgedAddMnvrAccelUncs(builder, mnvrAccelUncs)
        if self.source is not None:
            Maneuver_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Maneuver_AbridgedAddOrigin(builder, origin)
        Maneuver_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Maneuver_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Maneuver_AbridgedAddCreatedBy(builder, createdBy)
        if self.algorithm is not None:
            Maneuver_AbridgedAddAlgorithm(builder, algorithm)
        if self.transactionId is not None:
            Maneuver_AbridgedAddTransactionId(builder, transactionId)
        if self.origNetwork is not None:
            Maneuver_AbridgedAddOrigNetwork(builder, origNetwork)
        maneuverAbridged = Maneuver_AbridgedEnd(builder)
        return maneuverAbridged
