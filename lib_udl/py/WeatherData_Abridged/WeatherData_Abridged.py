# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
class WeatherData_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WeatherData_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWeatherData_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def WeatherData_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x57\x45\x41\x54", size_prefixed=size_prefixed)

    # WeatherData_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: WEATHER-DATA-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # WeatherData_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # WeatherData_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the sensor making the weather measurement.
    # Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
    # Constraints: Minimum length = 0, Maximum length = 36
    # WeatherData_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # WeatherData_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
    # Example: /// Example: [116.5, 121.6]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SigPwrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def SigPwrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def SigPwrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
    # Example: /// Example: [58.2, 58.3]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def NoiseLvls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def NoiseLvlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def NoiseLvlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
    # Example: /// Example: [0.3, 0.6]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SpecWidths(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def SpecWidthsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def SpecWidthsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
    # Example: /// Example: [16, 1]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def FirstGuessAvgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def FirstGuessAvgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def FirstGuessAvgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Quality control flag value, as defined by the data provider.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def QcValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Datetime the system files were created.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def FileCreation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Last altitude with recorded measurements in this record, in meters.
    # Example: /// Example: 19505.1
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def TermAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average transmitted power of the radar, in kilowatts.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def AvgTxPwr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average power of the reflected signal received by the radar, in Watts.
    # Example: /// Example: 714.9
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def AvgRefPwr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of sectors within the radar coverage area, each containing a number of antennas.
    # Example: /// Example: 20
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SectorNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of antennas across all sectors within the radar coverage area.
    # Example: /// Example: 640
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def NumElements(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
    # Example: /// Example: [32, 30]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def TdAvgSampleNums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def TdAvgSampleNumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def TdAvgSampleNumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Checksum value for the data.
    # Example: /// Example: 133
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def Checksum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
    # Example: /// Example: [4, 3]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def CoIntegs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def CoIntegsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def CoIntegsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
    # Example: /// Example: [4, 3]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SpecAvgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def SpecAvgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def SpecAvgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
    # Example: /// Example: [1000.3, 1000.2]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def InterpulsePeriods(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def InterpulsePeriodsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def InterpulsePeriodsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
    # Example: /// Example: [44.4, 467.3]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def DoppVels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def DoppVelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def DoppVelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
    # Example: /// Example: [5, 2]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def ConsRecs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def ConsRecsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def ConsRecsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
    # Example: /// Example: [14.5, -16.2]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def Snrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def SnrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def SnrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
    # Example: /// Example: 163.7
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SigStrength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Semi-major axis of the 50% positional confidence ellipse, in kilometers.
    # Example: /// Example: 3.4
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SemiMajorAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
    # Example: /// Example: 0.3
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SemiMinorAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
    # Example: /// Example: 75.7
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def AngleOrientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of sensors used in the lightning event location solution.
    # Example: /// Example: 9
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def LightEventNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of sensor(s) that participated in the lightning event location determination.
    # Example: /// Example: [11, 28, 190]
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def LightDetSensors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def LightDetSensorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def LightDetSensorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # The positional confidence of the calculated lightning event location using the chi-square statistical method.
    # Example: /// Example: 0.1
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def PosConfidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['SENSOR', 'WEATHERREPORT']
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    # Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WeatherData_Abridged
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WeatherData_Abridged
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # WeatherData_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # WeatherData_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # WeatherData_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # WeatherData_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # WeatherData_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # WeatherData_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def WeatherData_AbridgedStart(builder):
    builder.StartObject(39)

def Start(builder):
    WeatherData_AbridgedStart(builder)

def WeatherData_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    WeatherData_AbridgedAddId(builder, id)

def WeatherData_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    WeatherData_AbridgedAddClassificationMarking(builder, classificationMarking)

def WeatherData_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    WeatherData_AbridgedAddIdSensor(builder, idSensor)

def WeatherData_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    WeatherData_AbridgedAddOrigSensorId(builder, origSensorId)

def WeatherData_AbridgedAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    WeatherData_AbridgedAddObTime(builder, obTime)

def WeatherData_AbridgedAddSigPwrs(builder, sigPwrs):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sigPwrs), 0)

def AddSigPwrs(builder, sigPwrs):
    WeatherData_AbridgedAddSigPwrs(builder, sigPwrs)

def WeatherData_AbridgedStartSigPwrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSigPwrsVector(builder, numElems):
    return WeatherData_AbridgedStartSigPwrsVector(builder, numElems)

def WeatherData_AbridgedAddNoiseLvls(builder, noiseLvls):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(noiseLvls), 0)

def AddNoiseLvls(builder, noiseLvls):
    WeatherData_AbridgedAddNoiseLvls(builder, noiseLvls)

def WeatherData_AbridgedStartNoiseLvlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNoiseLvlsVector(builder, numElems):
    return WeatherData_AbridgedStartNoiseLvlsVector(builder, numElems)

def WeatherData_AbridgedAddSpecWidths(builder, specWidths):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(specWidths), 0)

def AddSpecWidths(builder, specWidths):
    WeatherData_AbridgedAddSpecWidths(builder, specWidths)

def WeatherData_AbridgedStartSpecWidthsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpecWidthsVector(builder, numElems):
    return WeatherData_AbridgedStartSpecWidthsVector(builder, numElems)

def WeatherData_AbridgedAddFirstGuessAvgs(builder, firstGuessAvgs):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(firstGuessAvgs), 0)

def AddFirstGuessAvgs(builder, firstGuessAvgs):
    WeatherData_AbridgedAddFirstGuessAvgs(builder, firstGuessAvgs)

def WeatherData_AbridgedStartFirstGuessAvgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFirstGuessAvgsVector(builder, numElems):
    return WeatherData_AbridgedStartFirstGuessAvgsVector(builder, numElems)

def WeatherData_AbridgedAddQcValue(builder, qcValue):
    builder.PrependInt32Slot(9, qcValue, 0)

def AddQcValue(builder, qcValue):
    WeatherData_AbridgedAddQcValue(builder, qcValue)

def WeatherData_AbridgedAddFileCreation(builder, fileCreation):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(fileCreation), 0)

def AddFileCreation(builder, fileCreation):
    WeatherData_AbridgedAddFileCreation(builder, fileCreation)

def WeatherData_AbridgedAddTermAlt(builder, termAlt):
    builder.PrependFloat64Slot(11, termAlt, 0.0)

def AddTermAlt(builder, termAlt):
    WeatherData_AbridgedAddTermAlt(builder, termAlt)

def WeatherData_AbridgedAddAvgTxPwr(builder, avgTxPwr):
    builder.PrependFloat64Slot(12, avgTxPwr, 0.0)

def AddAvgTxPwr(builder, avgTxPwr):
    WeatherData_AbridgedAddAvgTxPwr(builder, avgTxPwr)

def WeatherData_AbridgedAddAvgRefPwr(builder, avgRefPwr):
    builder.PrependFloat64Slot(13, avgRefPwr, 0.0)

def AddAvgRefPwr(builder, avgRefPwr):
    WeatherData_AbridgedAddAvgRefPwr(builder, avgRefPwr)

def WeatherData_AbridgedAddSectorNum(builder, sectorNum):
    builder.PrependInt32Slot(14, sectorNum, 0)

def AddSectorNum(builder, sectorNum):
    WeatherData_AbridgedAddSectorNum(builder, sectorNum)

def WeatherData_AbridgedAddNumElements(builder, numElements):
    builder.PrependInt32Slot(15, numElements, 0)

def AddNumElements(builder, numElements):
    WeatherData_AbridgedAddNumElements(builder, numElements)

def WeatherData_AbridgedAddTdAvgSampleNums(builder, tdAvgSampleNums):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(tdAvgSampleNums), 0)

def AddTdAvgSampleNums(builder, tdAvgSampleNums):
    WeatherData_AbridgedAddTdAvgSampleNums(builder, tdAvgSampleNums)

def WeatherData_AbridgedStartTdAvgSampleNumsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTdAvgSampleNumsVector(builder, numElems):
    return WeatherData_AbridgedStartTdAvgSampleNumsVector(builder, numElems)

def WeatherData_AbridgedAddChecksum(builder, checksum):
    builder.PrependInt32Slot(17, checksum, 0)

def AddChecksum(builder, checksum):
    WeatherData_AbridgedAddChecksum(builder, checksum)

def WeatherData_AbridgedAddCoIntegs(builder, coIntegs):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(coIntegs), 0)

def AddCoIntegs(builder, coIntegs):
    WeatherData_AbridgedAddCoIntegs(builder, coIntegs)

def WeatherData_AbridgedStartCoIntegsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCoIntegsVector(builder, numElems):
    return WeatherData_AbridgedStartCoIntegsVector(builder, numElems)

def WeatherData_AbridgedAddSpecAvgs(builder, specAvgs):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(specAvgs), 0)

def AddSpecAvgs(builder, specAvgs):
    WeatherData_AbridgedAddSpecAvgs(builder, specAvgs)

def WeatherData_AbridgedStartSpecAvgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSpecAvgsVector(builder, numElems):
    return WeatherData_AbridgedStartSpecAvgsVector(builder, numElems)

def WeatherData_AbridgedAddInterpulsePeriods(builder, interpulsePeriods):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(interpulsePeriods), 0)

def AddInterpulsePeriods(builder, interpulsePeriods):
    WeatherData_AbridgedAddInterpulsePeriods(builder, interpulsePeriods)

def WeatherData_AbridgedStartInterpulsePeriodsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInterpulsePeriodsVector(builder, numElems):
    return WeatherData_AbridgedStartInterpulsePeriodsVector(builder, numElems)

def WeatherData_AbridgedAddDoppVels(builder, doppVels):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(doppVels), 0)

def AddDoppVels(builder, doppVels):
    WeatherData_AbridgedAddDoppVels(builder, doppVels)

def WeatherData_AbridgedStartDoppVelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDoppVelsVector(builder, numElems):
    return WeatherData_AbridgedStartDoppVelsVector(builder, numElems)

def WeatherData_AbridgedAddConsRecs(builder, consRecs):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(consRecs), 0)

def AddConsRecs(builder, consRecs):
    WeatherData_AbridgedAddConsRecs(builder, consRecs)

def WeatherData_AbridgedStartConsRecsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConsRecsVector(builder, numElems):
    return WeatherData_AbridgedStartConsRecsVector(builder, numElems)

def WeatherData_AbridgedAddSnrs(builder, snrs):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(snrs), 0)

def AddSnrs(builder, snrs):
    WeatherData_AbridgedAddSnrs(builder, snrs)

def WeatherData_AbridgedStartSnrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSnrsVector(builder, numElems):
    return WeatherData_AbridgedStartSnrsVector(builder, numElems)

def WeatherData_AbridgedAddSigStrength(builder, sigStrength):
    builder.PrependFloat64Slot(24, sigStrength, 0.0)

def AddSigStrength(builder, sigStrength):
    WeatherData_AbridgedAddSigStrength(builder, sigStrength)

def WeatherData_AbridgedAddSemiMajorAxis(builder, semiMajorAxis):
    builder.PrependFloat64Slot(25, semiMajorAxis, 0.0)

def AddSemiMajorAxis(builder, semiMajorAxis):
    WeatherData_AbridgedAddSemiMajorAxis(builder, semiMajorAxis)

def WeatherData_AbridgedAddSemiMinorAxis(builder, semiMinorAxis):
    builder.PrependFloat64Slot(26, semiMinorAxis, 0.0)

def AddSemiMinorAxis(builder, semiMinorAxis):
    WeatherData_AbridgedAddSemiMinorAxis(builder, semiMinorAxis)

def WeatherData_AbridgedAddAngleOrientation(builder, angleOrientation):
    builder.PrependFloat64Slot(27, angleOrientation, 0.0)

def AddAngleOrientation(builder, angleOrientation):
    WeatherData_AbridgedAddAngleOrientation(builder, angleOrientation)

def WeatherData_AbridgedAddLightEventNum(builder, lightEventNum):
    builder.PrependInt32Slot(28, lightEventNum, 0)

def AddLightEventNum(builder, lightEventNum):
    WeatherData_AbridgedAddLightEventNum(builder, lightEventNum)

def WeatherData_AbridgedAddLightDetSensors(builder, lightDetSensors):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(lightDetSensors), 0)

def AddLightDetSensors(builder, lightDetSensors):
    WeatherData_AbridgedAddLightDetSensors(builder, lightDetSensors)

def WeatherData_AbridgedStartLightDetSensorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLightDetSensorsVector(builder, numElems):
    return WeatherData_AbridgedStartLightDetSensorsVector(builder, numElems)

def WeatherData_AbridgedAddPosConfidence(builder, posConfidence):
    builder.PrependFloat64Slot(30, posConfidence, 0.0)

def AddPosConfidence(builder, posConfidence):
    WeatherData_AbridgedAddPosConfidence(builder, posConfidence)

def WeatherData_AbridgedAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    WeatherData_AbridgedAddSrcTyps(builder, srcTyps)

def WeatherData_AbridgedStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return WeatherData_AbridgedStartSrcTypsVector(builder, numElems)

def WeatherData_AbridgedAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    WeatherData_AbridgedAddSrcIds(builder, srcIds)

def WeatherData_AbridgedStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return WeatherData_AbridgedStartSrcIdsVector(builder, numElems)

def WeatherData_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    WeatherData_AbridgedAddOrigNetwork(builder, origNetwork)

def WeatherData_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    WeatherData_AbridgedAddCreatedAt(builder, createdAt)

def WeatherData_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    WeatherData_AbridgedAddCreatedBy(builder, createdBy)

def WeatherData_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    WeatherData_AbridgedAddSource(builder, source)

def WeatherData_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    WeatherData_AbridgedAddOrigin(builder, origin)

def WeatherData_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(38, dataMode, 0)

def AddDataMode(builder, dataMode):
    WeatherData_AbridgedAddDataMode(builder, dataMode)

def WeatherData_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return WeatherData_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class WeatherData_AbridgedT(object):

    # WeatherData_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.obTime = None  # type: str
        self.sigPwrs = None  # type: List[str]
        self.noiseLvls = None  # type: List[str]
        self.specWidths = None  # type: List[str]
        self.firstGuessAvgs = None  # type: List[str]
        self.qcValue = 0  # type: int
        self.fileCreation = None  # type: str
        self.termAlt = 0.0  # type: float
        self.avgTxPwr = 0.0  # type: float
        self.avgRefPwr = 0.0  # type: float
        self.sectorNum = 0  # type: int
        self.numElements = 0  # type: int
        self.tdAvgSampleNums = None  # type: List[str]
        self.checksum = 0  # type: int
        self.coIntegs = None  # type: List[str]
        self.specAvgs = None  # type: List[str]
        self.interpulsePeriods = None  # type: List[str]
        self.doppVels = None  # type: List[str]
        self.consRecs = None  # type: List[str]
        self.snrs = None  # type: List[str]
        self.sigStrength = 0.0  # type: float
        self.semiMajorAxis = 0.0  # type: float
        self.semiMinorAxis = 0.0  # type: float
        self.angleOrientation = 0.0  # type: float
        self.lightEventNum = 0  # type: int
        self.lightDetSensors = None  # type: List[str]
        self.posConfidence = 0.0  # type: float
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        weatherDataAbridged = WeatherData_Abridged()
        weatherDataAbridged.Init(buf, pos)
        return cls.InitFromObj(weatherDataAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, weatherDataAbridged):
        x = WeatherData_AbridgedT()
        x._UnPack(weatherDataAbridged)
        return x

    # WeatherData_AbridgedT
    def _UnPack(self, weatherDataAbridged):
        if weatherDataAbridged is None:
            return
        self.id = weatherDataAbridged.Id()
        self.classificationMarking = weatherDataAbridged.ClassificationMarking()
        self.idSensor = weatherDataAbridged.IdSensor()
        self.origSensorId = weatherDataAbridged.OrigSensorId()
        self.obTime = weatherDataAbridged.ObTime()
        if not weatherDataAbridged.SigPwrsIsNone():
            self.sigPwrs = []
            for i in range(weatherDataAbridged.SigPwrsLength()):
                self.sigPwrs.append(weatherDataAbridged.SigPwrs(i))
        if not weatherDataAbridged.NoiseLvlsIsNone():
            self.noiseLvls = []
            for i in range(weatherDataAbridged.NoiseLvlsLength()):
                self.noiseLvls.append(weatherDataAbridged.NoiseLvls(i))
        if not weatherDataAbridged.SpecWidthsIsNone():
            self.specWidths = []
            for i in range(weatherDataAbridged.SpecWidthsLength()):
                self.specWidths.append(weatherDataAbridged.SpecWidths(i))
        if not weatherDataAbridged.FirstGuessAvgsIsNone():
            self.firstGuessAvgs = []
            for i in range(weatherDataAbridged.FirstGuessAvgsLength()):
                self.firstGuessAvgs.append(weatherDataAbridged.FirstGuessAvgs(i))
        self.qcValue = weatherDataAbridged.QcValue()
        self.fileCreation = weatherDataAbridged.FileCreation()
        self.termAlt = weatherDataAbridged.TermAlt()
        self.avgTxPwr = weatherDataAbridged.AvgTxPwr()
        self.avgRefPwr = weatherDataAbridged.AvgRefPwr()
        self.sectorNum = weatherDataAbridged.SectorNum()
        self.numElements = weatherDataAbridged.NumElements()
        if not weatherDataAbridged.TdAvgSampleNumsIsNone():
            self.tdAvgSampleNums = []
            for i in range(weatherDataAbridged.TdAvgSampleNumsLength()):
                self.tdAvgSampleNums.append(weatherDataAbridged.TdAvgSampleNums(i))
        self.checksum = weatherDataAbridged.Checksum()
        if not weatherDataAbridged.CoIntegsIsNone():
            self.coIntegs = []
            for i in range(weatherDataAbridged.CoIntegsLength()):
                self.coIntegs.append(weatherDataAbridged.CoIntegs(i))
        if not weatherDataAbridged.SpecAvgsIsNone():
            self.specAvgs = []
            for i in range(weatherDataAbridged.SpecAvgsLength()):
                self.specAvgs.append(weatherDataAbridged.SpecAvgs(i))
        if not weatherDataAbridged.InterpulsePeriodsIsNone():
            self.interpulsePeriods = []
            for i in range(weatherDataAbridged.InterpulsePeriodsLength()):
                self.interpulsePeriods.append(weatherDataAbridged.InterpulsePeriods(i))
        if not weatherDataAbridged.DoppVelsIsNone():
            self.doppVels = []
            for i in range(weatherDataAbridged.DoppVelsLength()):
                self.doppVels.append(weatherDataAbridged.DoppVels(i))
        if not weatherDataAbridged.ConsRecsIsNone():
            self.consRecs = []
            for i in range(weatherDataAbridged.ConsRecsLength()):
                self.consRecs.append(weatherDataAbridged.ConsRecs(i))
        if not weatherDataAbridged.SnrsIsNone():
            self.snrs = []
            for i in range(weatherDataAbridged.SnrsLength()):
                self.snrs.append(weatherDataAbridged.Snrs(i))
        self.sigStrength = weatherDataAbridged.SigStrength()
        self.semiMajorAxis = weatherDataAbridged.SemiMajorAxis()
        self.semiMinorAxis = weatherDataAbridged.SemiMinorAxis()
        self.angleOrientation = weatherDataAbridged.AngleOrientation()
        self.lightEventNum = weatherDataAbridged.LightEventNum()
        if not weatherDataAbridged.LightDetSensorsIsNone():
            self.lightDetSensors = []
            for i in range(weatherDataAbridged.LightDetSensorsLength()):
                self.lightDetSensors.append(weatherDataAbridged.LightDetSensors(i))
        self.posConfidence = weatherDataAbridged.PosConfidence()
        if not weatherDataAbridged.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(weatherDataAbridged.SrcTypsLength()):
                self.srcTyps.append(weatherDataAbridged.SrcTyps(i))
        if not weatherDataAbridged.SrcIdsIsNone():
            self.srcIds = []
            for i in range(weatherDataAbridged.SrcIdsLength()):
                self.srcIds.append(weatherDataAbridged.SrcIds(i))
        self.origNetwork = weatherDataAbridged.OrigNetwork()
        self.createdAt = weatherDataAbridged.CreatedAt()
        self.createdBy = weatherDataAbridged.CreatedBy()
        self.source = weatherDataAbridged.Source()
        self.origin = weatherDataAbridged.Origin()
        self.dataMode = weatherDataAbridged.DataMode()

    # WeatherData_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.sigPwrs is not None:
            sigPwrslist = []
            for i in range(len(self.sigPwrs)):
                sigPwrslist.append(builder.CreateString(self.sigPwrs[i]))
            WeatherData_AbridgedStartSigPwrsVector(builder, len(self.sigPwrs))
            for i in reversed(range(len(self.sigPwrs))):
                builder.PrependUOffsetTRelative(sigPwrslist[i])
            sigPwrs = builder.EndVector()
        if self.noiseLvls is not None:
            noiseLvlslist = []
            for i in range(len(self.noiseLvls)):
                noiseLvlslist.append(builder.CreateString(self.noiseLvls[i]))
            WeatherData_AbridgedStartNoiseLvlsVector(builder, len(self.noiseLvls))
            for i in reversed(range(len(self.noiseLvls))):
                builder.PrependUOffsetTRelative(noiseLvlslist[i])
            noiseLvls = builder.EndVector()
        if self.specWidths is not None:
            specWidthslist = []
            for i in range(len(self.specWidths)):
                specWidthslist.append(builder.CreateString(self.specWidths[i]))
            WeatherData_AbridgedStartSpecWidthsVector(builder, len(self.specWidths))
            for i in reversed(range(len(self.specWidths))):
                builder.PrependUOffsetTRelative(specWidthslist[i])
            specWidths = builder.EndVector()
        if self.firstGuessAvgs is not None:
            firstGuessAvgslist = []
            for i in range(len(self.firstGuessAvgs)):
                firstGuessAvgslist.append(builder.CreateString(self.firstGuessAvgs[i]))
            WeatherData_AbridgedStartFirstGuessAvgsVector(builder, len(self.firstGuessAvgs))
            for i in reversed(range(len(self.firstGuessAvgs))):
                builder.PrependUOffsetTRelative(firstGuessAvgslist[i])
            firstGuessAvgs = builder.EndVector()
        if self.fileCreation is not None:
            fileCreation = builder.CreateString(self.fileCreation)
        if self.tdAvgSampleNums is not None:
            tdAvgSampleNumslist = []
            for i in range(len(self.tdAvgSampleNums)):
                tdAvgSampleNumslist.append(builder.CreateString(self.tdAvgSampleNums[i]))
            WeatherData_AbridgedStartTdAvgSampleNumsVector(builder, len(self.tdAvgSampleNums))
            for i in reversed(range(len(self.tdAvgSampleNums))):
                builder.PrependUOffsetTRelative(tdAvgSampleNumslist[i])
            tdAvgSampleNums = builder.EndVector()
        if self.coIntegs is not None:
            coIntegslist = []
            for i in range(len(self.coIntegs)):
                coIntegslist.append(builder.CreateString(self.coIntegs[i]))
            WeatherData_AbridgedStartCoIntegsVector(builder, len(self.coIntegs))
            for i in reversed(range(len(self.coIntegs))):
                builder.PrependUOffsetTRelative(coIntegslist[i])
            coIntegs = builder.EndVector()
        if self.specAvgs is not None:
            specAvgslist = []
            for i in range(len(self.specAvgs)):
                specAvgslist.append(builder.CreateString(self.specAvgs[i]))
            WeatherData_AbridgedStartSpecAvgsVector(builder, len(self.specAvgs))
            for i in reversed(range(len(self.specAvgs))):
                builder.PrependUOffsetTRelative(specAvgslist[i])
            specAvgs = builder.EndVector()
        if self.interpulsePeriods is not None:
            interpulsePeriodslist = []
            for i in range(len(self.interpulsePeriods)):
                interpulsePeriodslist.append(builder.CreateString(self.interpulsePeriods[i]))
            WeatherData_AbridgedStartInterpulsePeriodsVector(builder, len(self.interpulsePeriods))
            for i in reversed(range(len(self.interpulsePeriods))):
                builder.PrependUOffsetTRelative(interpulsePeriodslist[i])
            interpulsePeriods = builder.EndVector()
        if self.doppVels is not None:
            doppVelslist = []
            for i in range(len(self.doppVels)):
                doppVelslist.append(builder.CreateString(self.doppVels[i]))
            WeatherData_AbridgedStartDoppVelsVector(builder, len(self.doppVels))
            for i in reversed(range(len(self.doppVels))):
                builder.PrependUOffsetTRelative(doppVelslist[i])
            doppVels = builder.EndVector()
        if self.consRecs is not None:
            consRecslist = []
            for i in range(len(self.consRecs)):
                consRecslist.append(builder.CreateString(self.consRecs[i]))
            WeatherData_AbridgedStartConsRecsVector(builder, len(self.consRecs))
            for i in reversed(range(len(self.consRecs))):
                builder.PrependUOffsetTRelative(consRecslist[i])
            consRecs = builder.EndVector()
        if self.snrs is not None:
            snrslist = []
            for i in range(len(self.snrs)):
                snrslist.append(builder.CreateString(self.snrs[i]))
            WeatherData_AbridgedStartSnrsVector(builder, len(self.snrs))
            for i in reversed(range(len(self.snrs))):
                builder.PrependUOffsetTRelative(snrslist[i])
            snrs = builder.EndVector()
        if self.lightDetSensors is not None:
            lightDetSensorslist = []
            for i in range(len(self.lightDetSensors)):
                lightDetSensorslist.append(builder.CreateString(self.lightDetSensors[i]))
            WeatherData_AbridgedStartLightDetSensorsVector(builder, len(self.lightDetSensors))
            for i in reversed(range(len(self.lightDetSensors))):
                builder.PrependUOffsetTRelative(lightDetSensorslist[i])
            lightDetSensors = builder.EndVector()
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            WeatherData_AbridgedStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            WeatherData_AbridgedStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        WeatherData_AbridgedStart(builder)
        if self.id is not None:
            WeatherData_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            WeatherData_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idSensor is not None:
            WeatherData_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            WeatherData_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.obTime is not None:
            WeatherData_AbridgedAddObTime(builder, obTime)
        if self.sigPwrs is not None:
            WeatherData_AbridgedAddSigPwrs(builder, sigPwrs)
        if self.noiseLvls is not None:
            WeatherData_AbridgedAddNoiseLvls(builder, noiseLvls)
        if self.specWidths is not None:
            WeatherData_AbridgedAddSpecWidths(builder, specWidths)
        if self.firstGuessAvgs is not None:
            WeatherData_AbridgedAddFirstGuessAvgs(builder, firstGuessAvgs)
        WeatherData_AbridgedAddQcValue(builder, self.qcValue)
        if self.fileCreation is not None:
            WeatherData_AbridgedAddFileCreation(builder, fileCreation)
        WeatherData_AbridgedAddTermAlt(builder, self.termAlt)
        WeatherData_AbridgedAddAvgTxPwr(builder, self.avgTxPwr)
        WeatherData_AbridgedAddAvgRefPwr(builder, self.avgRefPwr)
        WeatherData_AbridgedAddSectorNum(builder, self.sectorNum)
        WeatherData_AbridgedAddNumElements(builder, self.numElements)
        if self.tdAvgSampleNums is not None:
            WeatherData_AbridgedAddTdAvgSampleNums(builder, tdAvgSampleNums)
        WeatherData_AbridgedAddChecksum(builder, self.checksum)
        if self.coIntegs is not None:
            WeatherData_AbridgedAddCoIntegs(builder, coIntegs)
        if self.specAvgs is not None:
            WeatherData_AbridgedAddSpecAvgs(builder, specAvgs)
        if self.interpulsePeriods is not None:
            WeatherData_AbridgedAddInterpulsePeriods(builder, interpulsePeriods)
        if self.doppVels is not None:
            WeatherData_AbridgedAddDoppVels(builder, doppVels)
        if self.consRecs is not None:
            WeatherData_AbridgedAddConsRecs(builder, consRecs)
        if self.snrs is not None:
            WeatherData_AbridgedAddSnrs(builder, snrs)
        WeatherData_AbridgedAddSigStrength(builder, self.sigStrength)
        WeatherData_AbridgedAddSemiMajorAxis(builder, self.semiMajorAxis)
        WeatherData_AbridgedAddSemiMinorAxis(builder, self.semiMinorAxis)
        WeatherData_AbridgedAddAngleOrientation(builder, self.angleOrientation)
        WeatherData_AbridgedAddLightEventNum(builder, self.lightEventNum)
        if self.lightDetSensors is not None:
            WeatherData_AbridgedAddLightDetSensors(builder, lightDetSensors)
        WeatherData_AbridgedAddPosConfidence(builder, self.posConfidence)
        if self.srcTyps is not None:
            WeatherData_AbridgedAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            WeatherData_AbridgedAddSrcIds(builder, srcIds)
        if self.origNetwork is not None:
            WeatherData_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            WeatherData_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            WeatherData_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            WeatherData_AbridgedAddSource(builder, source)
        if self.origin is not None:
            WeatherData_AbridgedAddOrigin(builder, origin)
        WeatherData_AbridgedAddDataMode(builder, self.dataMode)
        weatherDataAbridged = WeatherData_AbridgedEnd(builder)
        return weatherDataAbridged
