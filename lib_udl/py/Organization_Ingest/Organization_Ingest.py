# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.
class Organization_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Organization_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrganization_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Organization_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x47\x41", size_prefixed=size_prefixed)

    # Organization_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ORGANIZATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Organization_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Organization_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization name.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 128
    # Organization_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
    # Example: /// Example: GOVERNMENT
    # Constraints: Minimum length = 1, Maximum length = 128
    # Organization_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).
    # Example: /// Example: Private company
    # Constraints: Minimum length = 0, Maximum length = 128
    # Organization_Ingest
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional externally provided identifier for this row.
    # Example: /// Example: EXTERNAL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Organization_Ingest
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization description.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 0, Maximum length = 256
    # Organization_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Organization_Ingest
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Organization_Ingest
    def Nationality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating if this organization is currently active.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Organization_Ingest
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Source of the data.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Organization_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Organization_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Organization_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Organization_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Organization_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Organization_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Organization_IngestStart(builder):
    builder.StartObject(16)

def Start(builder):
    Organization_IngestStart(builder)

def Organization_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Organization_IngestAddId(builder, id)

def Organization_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Organization_IngestAddClassificationMarking(builder, classificationMarking)

def Organization_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Organization_IngestAddName(builder, name)

def Organization_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Organization_IngestAddType(builder, type)

def Organization_IngestAddCategory(builder, category):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)

def AddCategory(builder, category):
    Organization_IngestAddCategory(builder, category)

def Organization_IngestAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    Organization_IngestAddExternalId(builder, externalId)

def Organization_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    Organization_IngestAddDescription(builder, description)

def Organization_IngestAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Organization_IngestAddCountryCode(builder, countryCode)

def Organization_IngestAddNationality(builder, nationality):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(nationality), 0)

def AddNationality(builder, nationality):
    Organization_IngestAddNationality(builder, nationality)

def Organization_IngestAddActive(builder, active):
    builder.PrependBoolSlot(9, active, 0)

def AddActive(builder, active):
    Organization_IngestAddActive(builder, active)

def Organization_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Organization_IngestAddSource(builder, source)

def Organization_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Organization_IngestAddOrigin(builder, origin)

def Organization_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(12, dataMode, 0)

def AddDataMode(builder, dataMode):
    Organization_IngestAddDataMode(builder, dataMode)

def Organization_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Organization_IngestAddCreatedAt(builder, createdAt)

def Organization_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Organization_IngestAddCreatedBy(builder, createdBy)

def Organization_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Organization_IngestAddOrigNetwork(builder, origNetwork)

def Organization_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Organization_IngestEnd(builder)


class Organization_IngestT(object):

    # Organization_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.category = None  # type: str
        self.externalId = None  # type: str
        self.description = None  # type: str
        self.countryCode = None  # type: str
        self.nationality = None  # type: str
        self.active = False  # type: bool
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        organizationIngest = Organization_Ingest()
        organizationIngest.Init(buf, pos)
        return cls.InitFromObj(organizationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, organizationIngest):
        x = Organization_IngestT()
        x._UnPack(organizationIngest)
        return x

    # Organization_IngestT
    def _UnPack(self, organizationIngest):
        if organizationIngest is None:
            return
        self.id = organizationIngest.Id()
        self.classificationMarking = organizationIngest.ClassificationMarking()
        self.name = organizationIngest.Name()
        self.type = organizationIngest.Type()
        self.category = organizationIngest.Category()
        self.externalId = organizationIngest.ExternalId()
        self.description = organizationIngest.Description()
        self.countryCode = organizationIngest.CountryCode()
        self.nationality = organizationIngest.Nationality()
        self.active = organizationIngest.Active()
        self.source = organizationIngest.Source()
        self.origin = organizationIngest.Origin()
        self.dataMode = organizationIngest.DataMode()
        self.createdAt = organizationIngest.CreatedAt()
        self.createdBy = organizationIngest.CreatedBy()
        self.origNetwork = organizationIngest.OrigNetwork()

    # Organization_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.category is not None:
            category = builder.CreateString(self.category)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.nationality is not None:
            nationality = builder.CreateString(self.nationality)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Organization_IngestStart(builder)
        if self.id is not None:
            Organization_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            Organization_IngestAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            Organization_IngestAddName(builder, name)
        if self.type is not None:
            Organization_IngestAddType(builder, type)
        if self.category is not None:
            Organization_IngestAddCategory(builder, category)
        if self.externalId is not None:
            Organization_IngestAddExternalId(builder, externalId)
        if self.description is not None:
            Organization_IngestAddDescription(builder, description)
        if self.countryCode is not None:
            Organization_IngestAddCountryCode(builder, countryCode)
        if self.nationality is not None:
            Organization_IngestAddNationality(builder, nationality)
        Organization_IngestAddActive(builder, self.active)
        if self.source is not None:
            Organization_IngestAddSource(builder, source)
        if self.origin is not None:
            Organization_IngestAddOrigin(builder, origin)
        Organization_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Organization_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Organization_IngestAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            Organization_IngestAddOrigNetwork(builder, origNetwork)
        organizationIngest = Organization_IngestEnd(builder)
        return organizationIngest
