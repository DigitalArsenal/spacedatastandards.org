# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of Hazardous Material information associated with this Air Transport Mission.
class AirTransportMissionHazMat_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirTransportMissionHazMat_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirTransportMissionHazMat_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirTransportMissionHazMat_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x54", size_prefixed=size_prefixed)

    # AirTransportMissionHazMat_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The hazMat identifier provided by the originating source.
    # Example: /// Example: cb6289e0f38534e01291ab6421d42724
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMissionHazMat_Ingest
    def ExtHazMatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    # Example: /// Example: LITHIUM METAL BATTERIES
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AirTransportMissionHazMat_Ingest
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    # Example: /// Example: 0181
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirTransportMissionHazMat_Ingest
    def UnNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of pieces of hazardous cargo.
    # Example: /// Example: 29
    # Constraints: No constraints specified.
    # AirTransportMissionHazMat_Ingest
    def Pieces(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Total weight of hazardous cargo, including non-explosive parts, in kilograms.
    # Example: /// Example: 22.1
    # Constraints: No constraints specified.
    # AirTransportMissionHazMat_Ingest
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Net explosive weight of the hazardous material, in kilograms.
    # Example: /// Example: 12.1
    # Constraints: No constraints specified.
    # AirTransportMissionHazMat_Ingest
    def NetExpWt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # AirTransportMissionHazMat_Ingest
    def ClassDiv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 2
    # AirTransportMissionHazMat_Ingest
    def Cgc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
    # Example: /// Example: 4,5,7,8
    # Constraints: Minimum length = 0, Maximum length = 100
    # AirTransportMissionHazMat_Ingest
    def Cgn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
    # Example: /// Example: 11,12
    # Constraints: Minimum length = 0, Maximum length = 100
    # AirTransportMissionHazMat_Ingest
    def ApplicableNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Itinerary number that identifies where the hazardous material is loaded.
    # Example: /// Example: 50
    # Constraints: No constraints specified.
    # AirTransportMissionHazMat_Ingest
    def OnItin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
    # Example: /// Example: LIRQ
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirTransportMissionHazMat_Ingest
    def OnIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Itinerary number that identifies where the hazardous material is unloaded.
    # Example: /// Example: 300
    # Constraints: No constraints specified.
    # AirTransportMissionHazMat_Ingest
    def OffItin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
    # Example: /// Example: MBPV
    # Constraints: Minimum length = 0, Maximum length = 4
    # AirTransportMissionHazMat_Ingest
    def OffIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
    # Example: /// Example: P
    # Constraints: Minimum length = 0, Maximum length = 1
    # AirTransportMissionHazMat_Ingest
    def Planned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AirTransportMissionHazMat_IngestStart(builder):
    builder.StartObject(15)

def Start(builder):
    AirTransportMissionHazMat_IngestStart(builder)

def AirTransportMissionHazMat_IngestAddExtHazMatId(builder, extHazMatId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(extHazMatId), 0)

def AddExtHazMatId(builder, extHazMatId):
    AirTransportMissionHazMat_IngestAddExtHazMatId(builder, extHazMatId)

def AirTransportMissionHazMat_IngestAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def AddItemName(builder, itemName):
    AirTransportMissionHazMat_IngestAddItemName(builder, itemName)

def AirTransportMissionHazMat_IngestAddUnNum(builder, unNum):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unNum), 0)

def AddUnNum(builder, unNum):
    AirTransportMissionHazMat_IngestAddUnNum(builder, unNum)

def AirTransportMissionHazMat_IngestAddPieces(builder, pieces):
    builder.PrependInt32Slot(3, pieces, 0)

def AddPieces(builder, pieces):
    AirTransportMissionHazMat_IngestAddPieces(builder, pieces)

def AirTransportMissionHazMat_IngestAddWeight(builder, weight):
    builder.PrependFloat64Slot(4, weight, 0.0)

def AddWeight(builder, weight):
    AirTransportMissionHazMat_IngestAddWeight(builder, weight)

def AirTransportMissionHazMat_IngestAddNetExpWt(builder, netExpWt):
    builder.PrependFloat64Slot(5, netExpWt, 0.0)

def AddNetExpWt(builder, netExpWt):
    AirTransportMissionHazMat_IngestAddNetExpWt(builder, netExpWt)

def AirTransportMissionHazMat_IngestAddClassDiv(builder, classDiv):
    builder.PrependFloat64Slot(6, classDiv, 0.0)

def AddClassDiv(builder, classDiv):
    AirTransportMissionHazMat_IngestAddClassDiv(builder, classDiv)

def AirTransportMissionHazMat_IngestAddCgc(builder, cgc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cgc), 0)

def AddCgc(builder, cgc):
    AirTransportMissionHazMat_IngestAddCgc(builder, cgc)

def AirTransportMissionHazMat_IngestAddCgn(builder, cgn):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(cgn), 0)

def AddCgn(builder, cgn):
    AirTransportMissionHazMat_IngestAddCgn(builder, cgn)

def AirTransportMissionHazMat_IngestAddApplicableNotes(builder, applicableNotes):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(applicableNotes), 0)

def AddApplicableNotes(builder, applicableNotes):
    AirTransportMissionHazMat_IngestAddApplicableNotes(builder, applicableNotes)

def AirTransportMissionHazMat_IngestAddOnItin(builder, onItin):
    builder.PrependInt32Slot(10, onItin, 0)

def AddOnItin(builder, onItin):
    AirTransportMissionHazMat_IngestAddOnItin(builder, onItin)

def AirTransportMissionHazMat_IngestAddOnIcao(builder, onIcao):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(onIcao), 0)

def AddOnIcao(builder, onIcao):
    AirTransportMissionHazMat_IngestAddOnIcao(builder, onIcao)

def AirTransportMissionHazMat_IngestAddOffItin(builder, offItin):
    builder.PrependInt32Slot(12, offItin, 0)

def AddOffItin(builder, offItin):
    AirTransportMissionHazMat_IngestAddOffItin(builder, offItin)

def AirTransportMissionHazMat_IngestAddOffIcao(builder, offIcao):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(offIcao), 0)

def AddOffIcao(builder, offIcao):
    AirTransportMissionHazMat_IngestAddOffIcao(builder, offIcao)

def AirTransportMissionHazMat_IngestAddPlanned(builder, planned):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(planned), 0)

def AddPlanned(builder, planned):
    AirTransportMissionHazMat_IngestAddPlanned(builder, planned)

def AirTransportMissionHazMat_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirTransportMissionHazMat_IngestEnd(builder)


class AirTransportMissionHazMat_IngestT(object):

    # AirTransportMissionHazMat_IngestT
    def __init__(self):
        self.extHazMatId = None  # type: str
        self.itemName = None  # type: str
        self.unNum = None  # type: str
        self.pieces = 0  # type: int
        self.weight = 0.0  # type: float
        self.netExpWt = 0.0  # type: float
        self.classDiv = 0.0  # type: float
        self.cgc = None  # type: str
        self.cgn = None  # type: str
        self.applicableNotes = None  # type: str
        self.onItin = 0  # type: int
        self.onIcao = None  # type: str
        self.offItin = 0  # type: int
        self.offIcao = None  # type: str
        self.planned = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airTransportMissionHazMatIngest = AirTransportMissionHazMat_Ingest()
        airTransportMissionHazMatIngest.Init(buf, pos)
        return cls.InitFromObj(airTransportMissionHazMatIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airTransportMissionHazMatIngest):
        x = AirTransportMissionHazMat_IngestT()
        x._UnPack(airTransportMissionHazMatIngest)
        return x

    # AirTransportMissionHazMat_IngestT
    def _UnPack(self, airTransportMissionHazMatIngest):
        if airTransportMissionHazMatIngest is None:
            return
        self.extHazMatId = airTransportMissionHazMatIngest.ExtHazMatId()
        self.itemName = airTransportMissionHazMatIngest.ItemName()
        self.unNum = airTransportMissionHazMatIngest.UnNum()
        self.pieces = airTransportMissionHazMatIngest.Pieces()
        self.weight = airTransportMissionHazMatIngest.Weight()
        self.netExpWt = airTransportMissionHazMatIngest.NetExpWt()
        self.classDiv = airTransportMissionHazMatIngest.ClassDiv()
        self.cgc = airTransportMissionHazMatIngest.Cgc()
        self.cgn = airTransportMissionHazMatIngest.Cgn()
        self.applicableNotes = airTransportMissionHazMatIngest.ApplicableNotes()
        self.onItin = airTransportMissionHazMatIngest.OnItin()
        self.onIcao = airTransportMissionHazMatIngest.OnIcao()
        self.offItin = airTransportMissionHazMatIngest.OffItin()
        self.offIcao = airTransportMissionHazMatIngest.OffIcao()
        self.planned = airTransportMissionHazMatIngest.Planned()

    # AirTransportMissionHazMat_IngestT
    def Pack(self, builder):
        if self.extHazMatId is not None:
            extHazMatId = builder.CreateString(self.extHazMatId)
        if self.itemName is not None:
            itemName = builder.CreateString(self.itemName)
        if self.unNum is not None:
            unNum = builder.CreateString(self.unNum)
        if self.cgc is not None:
            cgc = builder.CreateString(self.cgc)
        if self.cgn is not None:
            cgn = builder.CreateString(self.cgn)
        if self.applicableNotes is not None:
            applicableNotes = builder.CreateString(self.applicableNotes)
        if self.onIcao is not None:
            onIcao = builder.CreateString(self.onIcao)
        if self.offIcao is not None:
            offIcao = builder.CreateString(self.offIcao)
        if self.planned is not None:
            planned = builder.CreateString(self.planned)
        AirTransportMissionHazMat_IngestStart(builder)
        if self.extHazMatId is not None:
            AirTransportMissionHazMat_IngestAddExtHazMatId(builder, extHazMatId)
        if self.itemName is not None:
            AirTransportMissionHazMat_IngestAddItemName(builder, itemName)
        if self.unNum is not None:
            AirTransportMissionHazMat_IngestAddUnNum(builder, unNum)
        AirTransportMissionHazMat_IngestAddPieces(builder, self.pieces)
        AirTransportMissionHazMat_IngestAddWeight(builder, self.weight)
        AirTransportMissionHazMat_IngestAddNetExpWt(builder, self.netExpWt)
        AirTransportMissionHazMat_IngestAddClassDiv(builder, self.classDiv)
        if self.cgc is not None:
            AirTransportMissionHazMat_IngestAddCgc(builder, cgc)
        if self.cgn is not None:
            AirTransportMissionHazMat_IngestAddCgn(builder, cgn)
        if self.applicableNotes is not None:
            AirTransportMissionHazMat_IngestAddApplicableNotes(builder, applicableNotes)
        AirTransportMissionHazMat_IngestAddOnItin(builder, self.onItin)
        if self.onIcao is not None:
            AirTransportMissionHazMat_IngestAddOnIcao(builder, onIcao)
        AirTransportMissionHazMat_IngestAddOffItin(builder, self.offItin)
        if self.offIcao is not None:
            AirTransportMissionHazMat_IngestAddOffIcao(builder, offIcao)
        if self.planned is not None:
            AirTransportMissionHazMat_IngestAddPlanned(builder, planned)
        airTransportMissionHazMatIngest = AirTransportMissionHazMat_IngestEnd(builder)
        return airTransportMissionHazMatIngest
