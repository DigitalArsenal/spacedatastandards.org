# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
class AirfieldSlotConsumption_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirfieldSlotConsumption_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirfieldSlotConsumption_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirfieldSlotConsumption_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x46", size_prefixed=size_prefixed)

    # AirfieldSlotConsumption_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirfieldSlotConsumption_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the airfield slot for which this slot consumption record is referencing.
    # Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def IdAirfieldSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
    # Example: /// Example: APPROVED
    # Constraints: Minimum length = 0, Maximum length = 9
    # AirfieldSlotConsumption_Abridged
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Flag indicating if the slot is occupied.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def Occupied(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
    # Example: /// Example: APRON1-230401001
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldSlotConsumption_Abridged
    def Consumer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series designation of the aircraft occupying this slot.
    # Example: /// Example: C017A
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def OccAircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft occupying this slot.
    # Example: /// Example: N702JG
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirfieldSlotConsumption_Abridged
    def OccTailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of call signs of the aircraft using this slot.
    # Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def CallSigns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirfieldSlotConsumption_Abridged
    def CallSignsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirfieldSlotConsumption_Abridged
    def CallSignsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    # Example: /// Example: AJM123456123
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of aircraft using this slot for this time.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def NumAircraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-01-01T01:01:03.123Z
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def OccStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series designation of the aircraft this slot is reserved for.
    # Example: /// Example: C017A
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def ResAircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft this slot is reserved for.
    # Example: /// Example: N702JG
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirfieldSlotConsumption_Abridged
    def ResTailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
    # Example: /// Example: M
    # Constraints: Minimum length = 0, Maximum length = 2
    # AirfieldSlotConsumption_Abridged
    def ResType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reason the slot reservation was made.
    # Example: /// Example: Maintenance needed
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirfieldSlotConsumption_Abridged
    def ResReason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
    # Example: /// Example: AJM123456123
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def ResMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start of the slot window, in ISO 8601 UTC format.
    # Example: /// Example: 2023-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end of the slot window, in ISO 8601 UTC format.
    # Example: /// Example: 2023-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
    # Example: /// Example: 2023-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def TargetTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the sortie arriving at the slot start time.
    # Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def IdArrSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the sortie departing at the slot end time.
    # Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def IdDepSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate identifier of the sortie arriving at the slot start time provided by the source.
    # Example: /// Example: ALT-SORTIE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def AltArrSortieId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate identifier of the sortie departing at the slot end time provided by the source.
    # Example: /// Example: ALT-SORTIE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirfieldSlotConsumption_Abridged
    def AltDepSortieId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comments from the requester.
    # Example: /// Example: Sorry for the late notice.
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirfieldSlotConsumption_Abridged
    def ReqComment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Comments from the approver.
    # Example: /// Example: The request was denied due to inoperable fuel pumps.
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirfieldSlotConsumption_Abridged
    def AppComment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Short name of the organization requesting use of this slot.
    # Example: /// Example: TACC
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirfieldSlotConsumption_Abridged
    def ReqOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
    # Example: /// Example: CB
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirfieldSlotConsumption_Abridged
    def ReqInitials(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Short name of the organization approving the use of this slot.
    # Example: /// Example: KCHS/BOPS
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirfieldSlotConsumption_Abridged
    def AppOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
    # Example: /// Example: CB
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirfieldSlotConsumption_Abridged
    def AppInitials(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirfieldSlotConsumption_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldSlotConsumption_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldSlotConsumption_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirfieldSlotConsumption_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirfieldSlotConsumption_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirfieldSlotConsumption_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirfieldSlotConsumption_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirfieldSlotConsumption_AbridgedStart(builder):
    builder.StartObject(37)

def Start(builder):
    AirfieldSlotConsumption_AbridgedStart(builder)

def AirfieldSlotConsumption_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirfieldSlotConsumption_AbridgedAddId(builder, id)

def AirfieldSlotConsumption_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirfieldSlotConsumption_AbridgedAddClassificationMarking(builder, classificationMarking)

def AirfieldSlotConsumption_AbridgedAddIdAirfieldSlot(builder, idAirfieldSlot):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idAirfieldSlot), 0)

def AddIdAirfieldSlot(builder, idAirfieldSlot):
    AirfieldSlotConsumption_AbridgedAddIdAirfieldSlot(builder, idAirfieldSlot)

def AirfieldSlotConsumption_AbridgedAddStatus(builder, status):
    builder.PrependInt8Slot(3, status, 0)

def AddStatus(builder, status):
    AirfieldSlotConsumption_AbridgedAddStatus(builder, status)

def AirfieldSlotConsumption_AbridgedAddOccupied(builder, occupied):
    builder.PrependBoolSlot(4, occupied, 0)

def AddOccupied(builder, occupied):
    AirfieldSlotConsumption_AbridgedAddOccupied(builder, occupied)

def AirfieldSlotConsumption_AbridgedAddConsumer(builder, consumer):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(consumer), 0)

def AddConsumer(builder, consumer):
    AirfieldSlotConsumption_AbridgedAddConsumer(builder, consumer)

def AirfieldSlotConsumption_AbridgedAddOccAircraftMds(builder, occAircraftMds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(occAircraftMds), 0)

def AddOccAircraftMds(builder, occAircraftMds):
    AirfieldSlotConsumption_AbridgedAddOccAircraftMds(builder, occAircraftMds)

def AirfieldSlotConsumption_AbridgedAddOccTailNumber(builder, occTailNumber):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(occTailNumber), 0)

def AddOccTailNumber(builder, occTailNumber):
    AirfieldSlotConsumption_AbridgedAddOccTailNumber(builder, occTailNumber)

def AirfieldSlotConsumption_AbridgedAddCallSigns(builder, callSigns):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(callSigns), 0)

def AddCallSigns(builder, callSigns):
    AirfieldSlotConsumption_AbridgedAddCallSigns(builder, callSigns)

def AirfieldSlotConsumption_AbridgedStartCallSignsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCallSignsVector(builder, numElems):
    return AirfieldSlotConsumption_AbridgedStartCallSignsVector(builder, numElems)

def AirfieldSlotConsumption_AbridgedAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def AddMissionId(builder, missionId):
    AirfieldSlotConsumption_AbridgedAddMissionId(builder, missionId)

def AirfieldSlotConsumption_AbridgedAddNumAircraft(builder, numAircraft):
    builder.PrependInt32Slot(10, numAircraft, 0)

def AddNumAircraft(builder, numAircraft):
    AirfieldSlotConsumption_AbridgedAddNumAircraft(builder, numAircraft)

def AirfieldSlotConsumption_AbridgedAddOccStartTime(builder, occStartTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(occStartTime), 0)

def AddOccStartTime(builder, occStartTime):
    AirfieldSlotConsumption_AbridgedAddOccStartTime(builder, occStartTime)

def AirfieldSlotConsumption_AbridgedAddResAircraftMds(builder, resAircraftMds):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(resAircraftMds), 0)

def AddResAircraftMds(builder, resAircraftMds):
    AirfieldSlotConsumption_AbridgedAddResAircraftMds(builder, resAircraftMds)

def AirfieldSlotConsumption_AbridgedAddResTailNumber(builder, resTailNumber):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(resTailNumber), 0)

def AddResTailNumber(builder, resTailNumber):
    AirfieldSlotConsumption_AbridgedAddResTailNumber(builder, resTailNumber)

def AirfieldSlotConsumption_AbridgedAddResType(builder, resType):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(resType), 0)

def AddResType(builder, resType):
    AirfieldSlotConsumption_AbridgedAddResType(builder, resType)

def AirfieldSlotConsumption_AbridgedAddResReason(builder, resReason):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(resReason), 0)

def AddResReason(builder, resReason):
    AirfieldSlotConsumption_AbridgedAddResReason(builder, resReason)

def AirfieldSlotConsumption_AbridgedAddResMissionId(builder, resMissionId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(resMissionId), 0)

def AddResMissionId(builder, resMissionId):
    AirfieldSlotConsumption_AbridgedAddResMissionId(builder, resMissionId)

def AirfieldSlotConsumption_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    AirfieldSlotConsumption_AbridgedAddStartTime(builder, startTime)

def AirfieldSlotConsumption_AbridgedAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    AirfieldSlotConsumption_AbridgedAddEndTime(builder, endTime)

def AirfieldSlotConsumption_AbridgedAddTargetTime(builder, targetTime):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(targetTime), 0)

def AddTargetTime(builder, targetTime):
    AirfieldSlotConsumption_AbridgedAddTargetTime(builder, targetTime)

def AirfieldSlotConsumption_AbridgedAddIdArrSortie(builder, idArrSortie):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(idArrSortie), 0)

def AddIdArrSortie(builder, idArrSortie):
    AirfieldSlotConsumption_AbridgedAddIdArrSortie(builder, idArrSortie)

def AirfieldSlotConsumption_AbridgedAddIdDepSortie(builder, idDepSortie):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(idDepSortie), 0)

def AddIdDepSortie(builder, idDepSortie):
    AirfieldSlotConsumption_AbridgedAddIdDepSortie(builder, idDepSortie)

def AirfieldSlotConsumption_AbridgedAddAltArrSortieId(builder, altArrSortieId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(altArrSortieId), 0)

def AddAltArrSortieId(builder, altArrSortieId):
    AirfieldSlotConsumption_AbridgedAddAltArrSortieId(builder, altArrSortieId)

def AirfieldSlotConsumption_AbridgedAddAltDepSortieId(builder, altDepSortieId):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(altDepSortieId), 0)

def AddAltDepSortieId(builder, altDepSortieId):
    AirfieldSlotConsumption_AbridgedAddAltDepSortieId(builder, altDepSortieId)

def AirfieldSlotConsumption_AbridgedAddReqComment(builder, reqComment):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(reqComment), 0)

def AddReqComment(builder, reqComment):
    AirfieldSlotConsumption_AbridgedAddReqComment(builder, reqComment)

def AirfieldSlotConsumption_AbridgedAddAppComment(builder, appComment):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(appComment), 0)

def AddAppComment(builder, appComment):
    AirfieldSlotConsumption_AbridgedAddAppComment(builder, appComment)

def AirfieldSlotConsumption_AbridgedAddReqOrg(builder, reqOrg):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(reqOrg), 0)

def AddReqOrg(builder, reqOrg):
    AirfieldSlotConsumption_AbridgedAddReqOrg(builder, reqOrg)

def AirfieldSlotConsumption_AbridgedAddReqInitials(builder, reqInitials):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(reqInitials), 0)

def AddReqInitials(builder, reqInitials):
    AirfieldSlotConsumption_AbridgedAddReqInitials(builder, reqInitials)

def AirfieldSlotConsumption_AbridgedAddAppOrg(builder, appOrg):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(appOrg), 0)

def AddAppOrg(builder, appOrg):
    AirfieldSlotConsumption_AbridgedAddAppOrg(builder, appOrg)

def AirfieldSlotConsumption_AbridgedAddAppInitials(builder, appInitials):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(appInitials), 0)

def AddAppInitials(builder, appInitials):
    AirfieldSlotConsumption_AbridgedAddAppInitials(builder, appInitials)

def AirfieldSlotConsumption_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirfieldSlotConsumption_AbridgedAddCreatedAt(builder, createdAt)

def AirfieldSlotConsumption_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirfieldSlotConsumption_AbridgedAddCreatedBy(builder, createdBy)

def AirfieldSlotConsumption_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirfieldSlotConsumption_AbridgedAddSourceDl(builder, sourceDl)

def AirfieldSlotConsumption_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirfieldSlotConsumption_AbridgedAddSource(builder, source)

def AirfieldSlotConsumption_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirfieldSlotConsumption_AbridgedAddOrigin(builder, origin)

def AirfieldSlotConsumption_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirfieldSlotConsumption_AbridgedAddOrigNetwork(builder, origNetwork)

def AirfieldSlotConsumption_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(36, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirfieldSlotConsumption_AbridgedAddDataMode(builder, dataMode)

def AirfieldSlotConsumption_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirfieldSlotConsumption_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AirfieldSlotConsumption_AbridgedT(object):

    # AirfieldSlotConsumption_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idAirfieldSlot = None  # type: str
        self.status = 0  # type: int
        self.occupied = False  # type: bool
        self.consumer = None  # type: str
        self.occAircraftMds = None  # type: str
        self.occTailNumber = None  # type: str
        self.callSigns = None  # type: List[str]
        self.missionId = None  # type: str
        self.numAircraft = 0  # type: int
        self.occStartTime = None  # type: str
        self.resAircraftMds = None  # type: str
        self.resTailNumber = None  # type: str
        self.resType = None  # type: str
        self.resReason = None  # type: str
        self.resMissionId = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.targetTime = None  # type: str
        self.idArrSortie = None  # type: str
        self.idDepSortie = None  # type: str
        self.altArrSortieId = None  # type: str
        self.altDepSortieId = None  # type: str
        self.reqComment = None  # type: str
        self.appComment = None  # type: str
        self.reqOrg = None  # type: str
        self.reqInitials = None  # type: str
        self.appOrg = None  # type: str
        self.appInitials = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airfieldSlotConsumptionAbridged = AirfieldSlotConsumption_Abridged()
        airfieldSlotConsumptionAbridged.Init(buf, pos)
        return cls.InitFromObj(airfieldSlotConsumptionAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airfieldSlotConsumptionAbridged):
        x = AirfieldSlotConsumption_AbridgedT()
        x._UnPack(airfieldSlotConsumptionAbridged)
        return x

    # AirfieldSlotConsumption_AbridgedT
    def _UnPack(self, airfieldSlotConsumptionAbridged):
        if airfieldSlotConsumptionAbridged is None:
            return
        self.id = airfieldSlotConsumptionAbridged.Id()
        self.classificationMarking = airfieldSlotConsumptionAbridged.ClassificationMarking()
        self.idAirfieldSlot = airfieldSlotConsumptionAbridged.IdAirfieldSlot()
        self.status = airfieldSlotConsumptionAbridged.Status()
        self.occupied = airfieldSlotConsumptionAbridged.Occupied()
        self.consumer = airfieldSlotConsumptionAbridged.Consumer()
        self.occAircraftMds = airfieldSlotConsumptionAbridged.OccAircraftMds()
        self.occTailNumber = airfieldSlotConsumptionAbridged.OccTailNumber()
        if not airfieldSlotConsumptionAbridged.CallSignsIsNone():
            self.callSigns = []
            for i in range(airfieldSlotConsumptionAbridged.CallSignsLength()):
                self.callSigns.append(airfieldSlotConsumptionAbridged.CallSigns(i))
        self.missionId = airfieldSlotConsumptionAbridged.MissionId()
        self.numAircraft = airfieldSlotConsumptionAbridged.NumAircraft()
        self.occStartTime = airfieldSlotConsumptionAbridged.OccStartTime()
        self.resAircraftMds = airfieldSlotConsumptionAbridged.ResAircraftMds()
        self.resTailNumber = airfieldSlotConsumptionAbridged.ResTailNumber()
        self.resType = airfieldSlotConsumptionAbridged.ResType()
        self.resReason = airfieldSlotConsumptionAbridged.ResReason()
        self.resMissionId = airfieldSlotConsumptionAbridged.ResMissionId()
        self.startTime = airfieldSlotConsumptionAbridged.StartTime()
        self.endTime = airfieldSlotConsumptionAbridged.EndTime()
        self.targetTime = airfieldSlotConsumptionAbridged.TargetTime()
        self.idArrSortie = airfieldSlotConsumptionAbridged.IdArrSortie()
        self.idDepSortie = airfieldSlotConsumptionAbridged.IdDepSortie()
        self.altArrSortieId = airfieldSlotConsumptionAbridged.AltArrSortieId()
        self.altDepSortieId = airfieldSlotConsumptionAbridged.AltDepSortieId()
        self.reqComment = airfieldSlotConsumptionAbridged.ReqComment()
        self.appComment = airfieldSlotConsumptionAbridged.AppComment()
        self.reqOrg = airfieldSlotConsumptionAbridged.ReqOrg()
        self.reqInitials = airfieldSlotConsumptionAbridged.ReqInitials()
        self.appOrg = airfieldSlotConsumptionAbridged.AppOrg()
        self.appInitials = airfieldSlotConsumptionAbridged.AppInitials()
        self.createdAt = airfieldSlotConsumptionAbridged.CreatedAt()
        self.createdBy = airfieldSlotConsumptionAbridged.CreatedBy()
        self.sourceDl = airfieldSlotConsumptionAbridged.SourceDl()
        self.source = airfieldSlotConsumptionAbridged.Source()
        self.origin = airfieldSlotConsumptionAbridged.Origin()
        self.origNetwork = airfieldSlotConsumptionAbridged.OrigNetwork()
        self.dataMode = airfieldSlotConsumptionAbridged.DataMode()

    # AirfieldSlotConsumption_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idAirfieldSlot is not None:
            idAirfieldSlot = builder.CreateString(self.idAirfieldSlot)
        if self.consumer is not None:
            consumer = builder.CreateString(self.consumer)
        if self.occAircraftMds is not None:
            occAircraftMds = builder.CreateString(self.occAircraftMds)
        if self.occTailNumber is not None:
            occTailNumber = builder.CreateString(self.occTailNumber)
        if self.callSigns is not None:
            callSignslist = []
            for i in range(len(self.callSigns)):
                callSignslist.append(builder.CreateString(self.callSigns[i]))
            AirfieldSlotConsumption_AbridgedStartCallSignsVector(builder, len(self.callSigns))
            for i in reversed(range(len(self.callSigns))):
                builder.PrependUOffsetTRelative(callSignslist[i])
            callSigns = builder.EndVector()
        if self.missionId is not None:
            missionId = builder.CreateString(self.missionId)
        if self.occStartTime is not None:
            occStartTime = builder.CreateString(self.occStartTime)
        if self.resAircraftMds is not None:
            resAircraftMds = builder.CreateString(self.resAircraftMds)
        if self.resTailNumber is not None:
            resTailNumber = builder.CreateString(self.resTailNumber)
        if self.resType is not None:
            resType = builder.CreateString(self.resType)
        if self.resReason is not None:
            resReason = builder.CreateString(self.resReason)
        if self.resMissionId is not None:
            resMissionId = builder.CreateString(self.resMissionId)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.targetTime is not None:
            targetTime = builder.CreateString(self.targetTime)
        if self.idArrSortie is not None:
            idArrSortie = builder.CreateString(self.idArrSortie)
        if self.idDepSortie is not None:
            idDepSortie = builder.CreateString(self.idDepSortie)
        if self.altArrSortieId is not None:
            altArrSortieId = builder.CreateString(self.altArrSortieId)
        if self.altDepSortieId is not None:
            altDepSortieId = builder.CreateString(self.altDepSortieId)
        if self.reqComment is not None:
            reqComment = builder.CreateString(self.reqComment)
        if self.appComment is not None:
            appComment = builder.CreateString(self.appComment)
        if self.reqOrg is not None:
            reqOrg = builder.CreateString(self.reqOrg)
        if self.reqInitials is not None:
            reqInitials = builder.CreateString(self.reqInitials)
        if self.appOrg is not None:
            appOrg = builder.CreateString(self.appOrg)
        if self.appInitials is not None:
            appInitials = builder.CreateString(self.appInitials)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirfieldSlotConsumption_AbridgedStart(builder)
        if self.id is not None:
            AirfieldSlotConsumption_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AirfieldSlotConsumption_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idAirfieldSlot is not None:
            AirfieldSlotConsumption_AbridgedAddIdAirfieldSlot(builder, idAirfieldSlot)
        AirfieldSlotConsumption_AbridgedAddStatus(builder, self.status)
        AirfieldSlotConsumption_AbridgedAddOccupied(builder, self.occupied)
        if self.consumer is not None:
            AirfieldSlotConsumption_AbridgedAddConsumer(builder, consumer)
        if self.occAircraftMds is not None:
            AirfieldSlotConsumption_AbridgedAddOccAircraftMds(builder, occAircraftMds)
        if self.occTailNumber is not None:
            AirfieldSlotConsumption_AbridgedAddOccTailNumber(builder, occTailNumber)
        if self.callSigns is not None:
            AirfieldSlotConsumption_AbridgedAddCallSigns(builder, callSigns)
        if self.missionId is not None:
            AirfieldSlotConsumption_AbridgedAddMissionId(builder, missionId)
        AirfieldSlotConsumption_AbridgedAddNumAircraft(builder, self.numAircraft)
        if self.occStartTime is not None:
            AirfieldSlotConsumption_AbridgedAddOccStartTime(builder, occStartTime)
        if self.resAircraftMds is not None:
            AirfieldSlotConsumption_AbridgedAddResAircraftMds(builder, resAircraftMds)
        if self.resTailNumber is not None:
            AirfieldSlotConsumption_AbridgedAddResTailNumber(builder, resTailNumber)
        if self.resType is not None:
            AirfieldSlotConsumption_AbridgedAddResType(builder, resType)
        if self.resReason is not None:
            AirfieldSlotConsumption_AbridgedAddResReason(builder, resReason)
        if self.resMissionId is not None:
            AirfieldSlotConsumption_AbridgedAddResMissionId(builder, resMissionId)
        if self.startTime is not None:
            AirfieldSlotConsumption_AbridgedAddStartTime(builder, startTime)
        if self.endTime is not None:
            AirfieldSlotConsumption_AbridgedAddEndTime(builder, endTime)
        if self.targetTime is not None:
            AirfieldSlotConsumption_AbridgedAddTargetTime(builder, targetTime)
        if self.idArrSortie is not None:
            AirfieldSlotConsumption_AbridgedAddIdArrSortie(builder, idArrSortie)
        if self.idDepSortie is not None:
            AirfieldSlotConsumption_AbridgedAddIdDepSortie(builder, idDepSortie)
        if self.altArrSortieId is not None:
            AirfieldSlotConsumption_AbridgedAddAltArrSortieId(builder, altArrSortieId)
        if self.altDepSortieId is not None:
            AirfieldSlotConsumption_AbridgedAddAltDepSortieId(builder, altDepSortieId)
        if self.reqComment is not None:
            AirfieldSlotConsumption_AbridgedAddReqComment(builder, reqComment)
        if self.appComment is not None:
            AirfieldSlotConsumption_AbridgedAddAppComment(builder, appComment)
        if self.reqOrg is not None:
            AirfieldSlotConsumption_AbridgedAddReqOrg(builder, reqOrg)
        if self.reqInitials is not None:
            AirfieldSlotConsumption_AbridgedAddReqInitials(builder, reqInitials)
        if self.appOrg is not None:
            AirfieldSlotConsumption_AbridgedAddAppOrg(builder, appOrg)
        if self.appInitials is not None:
            AirfieldSlotConsumption_AbridgedAddAppInitials(builder, appInitials)
        if self.createdAt is not None:
            AirfieldSlotConsumption_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirfieldSlotConsumption_AbridgedAddCreatedBy(builder, createdBy)
        if self.sourceDl is not None:
            AirfieldSlotConsumption_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirfieldSlotConsumption_AbridgedAddSource(builder, source)
        if self.origin is not None:
            AirfieldSlotConsumption_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirfieldSlotConsumption_AbridgedAddOrigNetwork(builder, origNetwork)
        AirfieldSlotConsumption_AbridgedAddDataMode(builder, self.dataMode)
        airfieldSlotConsumptionAbridged = AirfieldSlotConsumption_AbridgedEnd(builder)
        return airfieldSlotConsumptionAbridged
