# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
class OrbitTrack_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OrbitTrack_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrbitTrack_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OrbitTrack_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x42\x49", size_prefixed=size_prefixed)

    # OrbitTrack_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: ORBIT_TRACK_ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OrbitTrack_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OrbitTrack_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: 32375
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitTrack_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 37375
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: L2045
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitTrack_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Elset associated with this object.
    # Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitTrack_Abridged
    def IdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Track timestamp in ISO8601 UTC format, with microsecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123456Z
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 19.88550102
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 46.74596844
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Track point altitude relative to WGS-84 ellipsoid, in meters.
    # Example: /// Example: 585.71
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radio frequency of the track, measured in megahertz (MHz).
    # Example: /// Example: 1.5273
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def RdfRf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # International radio call sign assigned to the track. This is an 8-character alphanumeric code.
    # Example: /// Example: Charlie
    # Constraints: Minimum length = 0, Maximum length = 8
    # OrbitTrack_Abridged
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Report number received from the reporting source for this track.
    # Example: /// Example: 123
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitTrack_Abridged
    def RptNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
    #  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
    #  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
    #  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
    #  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
    #  PENDING: Track object which has not been evaluated.
    #  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
    #  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
    # Example: /// Example: FRIEND
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitTrack_Abridged
    def ObjIdent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
    #  FAKER: Friendly track, object, or entity acting as an exercise hostile.
    #  JOKER: Friendly track, object, or entity acting as an exercise suspect.
    #  KILO: Friendly high-value object.
    #  TRAVELLER: Suspect land or surface track following a recognized traffic route.
    #  ZOMBIE: Suspect track, object, or entity of special interest.
    # Example: /// Example: JOKER
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitTrack_Abridged
    def IdentAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the satellite.
    # Example: /// Example: INACTIVE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitTrack_Abridged
    def SatStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
    # Example: /// Example: PAYLOAD
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitTrack_Abridged
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 8
    # OrbitTrack_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
    # Example: /// Example: 0.5868
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Decay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One-line Charlie elements set.
    # Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
    # Constraints: Minimum length = 0, Maximum length = 100
    # OrbitTrack_Abridged
    def CharlieLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
    # Example: /// Example: ELLIPSE
    # Constraints: Minimum length = 0, Maximum length = 16
    # OrbitTrack_Abridged
    def AouType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
    # ELLIPSE:
    #    brg - orientation in degrees of the ellipse
    #    a1 - semi-major axis in meters
    #    a2 - semi-minor axis in meters
    # BEARING (BEARING BOX or MTST BEARING BOX):
    #    brg - orientation in degrees of the bearing box 
    #    a1 - length of bearing box in meters 
    #    a2 - half-width of bearing box in meters 
    # OTHER (All other type values):
    #    brg - line of bearing in degrees true 
    #    a1 - bearing error in degrees 
    #    a2 - estimated range in meters.
    # Example: /// Example: [34.3, 26.5, 1.2]
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def AouData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitTrack_Abridged
    def AouDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitTrack_Abridged
    def AouDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # Track object speed, in km/sec.
    # Example: /// Example: 15.03443
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Spd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
    # Example: /// Example: 15.2
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def AngElev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
    # Example: /// Example: 90
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Cntnmnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Source cross-reference code for the command that originated the track report.
    # Example: /// Example: XE
    # Constraints: Minimum length = 0, Maximum length = 8
    # OrbitTrack_Abridged
    def Xref(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
    # Example: /// Example: FHKX
    # Constraints: Minimum length = 0, Maximum length = 32
    # OrbitTrack_Abridged
    def ChXref(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Free-form remarks entered for the satellite.
    # Example: /// Example: A note regarding this spacecraft
    # Constraints: Minimum length = 0, Maximum length = 256
    # OrbitTrack_Abridged
    def Amplification(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
    # Example: /// Example: ID Mode
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitTrack_Abridged
    def Iff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Reinforced(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Reduced(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Hq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Dummy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def TaskForce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Feint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def Installation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
    # Example: /// Example: SPACE
    # Constraints: Minimum length = 0, Maximum length = 10
    # OrbitTrack_Abridged
    def VehType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID identifying the track, which should remain the same on subsequent tracks of the same object.
    # Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
    # Constraints: Minimum length = 0, Maximum length = 36
    # OrbitTrack_Abridged
    def TrkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TrackSensor Collection.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def TrackSensors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OrbitTrack_Abridged
    def TrackSensorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OrbitTrack_Abridged
    def TrackSensorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # Time the row was created in the database.
    # Example: /// Example: 2021-02-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # OrbitTrack_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitTrack_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OrbitTrack_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OrbitTrack_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OrbitTrack_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # OrbitTrack_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OrbitTrack_AbridgedStart(builder):
    builder.StartObject(45)

def Start(builder):
    OrbitTrack_AbridgedStart(builder)

def OrbitTrack_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OrbitTrack_AbridgedAddId(builder, id)

def OrbitTrack_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OrbitTrack_AbridgedAddClassificationMarking(builder, classificationMarking)

def OrbitTrack_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OrbitTrack_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def OrbitTrack_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    OrbitTrack_AbridgedAddSatNo(builder, satNo)

def OrbitTrack_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    OrbitTrack_AbridgedAddOrigObjectId(builder, origObjectId)

def OrbitTrack_AbridgedAddIdElset(builder, idElset):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idElset), 0)

def AddIdElset(builder, idElset):
    OrbitTrack_AbridgedAddIdElset(builder, idElset)

def OrbitTrack_AbridgedAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    OrbitTrack_AbridgedAddTs(builder, ts)

def OrbitTrack_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(7, lat, 0.0)

def AddLat(builder, lat):
    OrbitTrack_AbridgedAddLat(builder, lat)

def OrbitTrack_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(8, lon, 0.0)

def AddLon(builder, lon):
    OrbitTrack_AbridgedAddLon(builder, lon)

def OrbitTrack_AbridgedAddAlt(builder, alt):
    builder.PrependFloat64Slot(9, alt, 0.0)

def AddAlt(builder, alt):
    OrbitTrack_AbridgedAddAlt(builder, alt)

def OrbitTrack_AbridgedAddRdfRf(builder, rdfRf):
    builder.PrependFloat64Slot(10, rdfRf, 0.0)

def AddRdfRf(builder, rdfRf):
    OrbitTrack_AbridgedAddRdfRf(builder, rdfRf)

def OrbitTrack_AbridgedAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    OrbitTrack_AbridgedAddCallSign(builder, callSign)

def OrbitTrack_AbridgedAddRptNum(builder, rptNum):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(rptNum), 0)

def AddRptNum(builder, rptNum):
    OrbitTrack_AbridgedAddRptNum(builder, rptNum)

def OrbitTrack_AbridgedAddObjIdent(builder, objIdent):
    builder.PrependInt8Slot(13, objIdent, 0)

def AddObjIdent(builder, objIdent):
    OrbitTrack_AbridgedAddObjIdent(builder, objIdent)

def OrbitTrack_AbridgedAddIdentAmp(builder, identAmp):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(identAmp), 0)

def AddIdentAmp(builder, identAmp):
    OrbitTrack_AbridgedAddIdentAmp(builder, identAmp)

def OrbitTrack_AbridgedAddSatStatus(builder, satStatus):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(satStatus), 0)

def AddSatStatus(builder, satStatus):
    OrbitTrack_AbridgedAddSatStatus(builder, satStatus)

def OrbitTrack_AbridgedAddObjectType(builder, objectType):
    builder.PrependInt8Slot(16, objectType, 0)

def AddObjectType(builder, objectType):
    OrbitTrack_AbridgedAddObjectType(builder, objectType)

def OrbitTrack_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    OrbitTrack_AbridgedAddCountryCode(builder, countryCode)

def OrbitTrack_AbridgedAddDecay(builder, decay):
    builder.PrependFloat64Slot(18, decay, 0.0)

def AddDecay(builder, decay):
    OrbitTrack_AbridgedAddDecay(builder, decay)

def OrbitTrack_AbridgedAddCharlieLine(builder, charlieLine):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(charlieLine), 0)

def AddCharlieLine(builder, charlieLine):
    OrbitTrack_AbridgedAddCharlieLine(builder, charlieLine)

def OrbitTrack_AbridgedAddAouType(builder, aouType):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(aouType), 0)

def AddAouType(builder, aouType):
    OrbitTrack_AbridgedAddAouType(builder, aouType)

def OrbitTrack_AbridgedAddAouData(builder, aouData):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(aouData), 0)

def AddAouData(builder, aouData):
    OrbitTrack_AbridgedAddAouData(builder, aouData)

def OrbitTrack_AbridgedStartAouDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAouDataVector(builder, numElems):
    return OrbitTrack_AbridgedStartAouDataVector(builder, numElems)

def OrbitTrack_AbridgedAddSpd(builder, spd):
    builder.PrependFloat64Slot(22, spd, 0.0)

def AddSpd(builder, spd):
    OrbitTrack_AbridgedAddSpd(builder, spd)

def OrbitTrack_AbridgedAddAngElev(builder, angElev):
    builder.PrependFloat64Slot(23, angElev, 0.0)

def AddAngElev(builder, angElev):
    OrbitTrack_AbridgedAddAngElev(builder, angElev)

def OrbitTrack_AbridgedAddCntnmnt(builder, cntnmnt):
    builder.PrependFloat64Slot(24, cntnmnt, 0.0)

def AddCntnmnt(builder, cntnmnt):
    OrbitTrack_AbridgedAddCntnmnt(builder, cntnmnt)

def OrbitTrack_AbridgedAddXref(builder, xref):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(xref), 0)

def AddXref(builder, xref):
    OrbitTrack_AbridgedAddXref(builder, xref)

def OrbitTrack_AbridgedAddChXref(builder, chXref):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(chXref), 0)

def AddChXref(builder, chXref):
    OrbitTrack_AbridgedAddChXref(builder, chXref)

def OrbitTrack_AbridgedAddAmplification(builder, amplification):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(amplification), 0)

def AddAmplification(builder, amplification):
    OrbitTrack_AbridgedAddAmplification(builder, amplification)

def OrbitTrack_AbridgedAddIff(builder, iff):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(iff), 0)

def AddIff(builder, iff):
    OrbitTrack_AbridgedAddIff(builder, iff)

def OrbitTrack_AbridgedAddReinforced(builder, reinforced):
    builder.PrependBoolSlot(29, reinforced, 0)

def AddReinforced(builder, reinforced):
    OrbitTrack_AbridgedAddReinforced(builder, reinforced)

def OrbitTrack_AbridgedAddReduced(builder, reduced):
    builder.PrependBoolSlot(30, reduced, 0)

def AddReduced(builder, reduced):
    OrbitTrack_AbridgedAddReduced(builder, reduced)

def OrbitTrack_AbridgedAddHq(builder, hq):
    builder.PrependBoolSlot(31, hq, 0)

def AddHq(builder, hq):
    OrbitTrack_AbridgedAddHq(builder, hq)

def OrbitTrack_AbridgedAddDummy(builder, dummy):
    builder.PrependBoolSlot(32, dummy, 0)

def AddDummy(builder, dummy):
    OrbitTrack_AbridgedAddDummy(builder, dummy)

def OrbitTrack_AbridgedAddTaskForce(builder, taskForce):
    builder.PrependBoolSlot(33, taskForce, 0)

def AddTaskForce(builder, taskForce):
    OrbitTrack_AbridgedAddTaskForce(builder, taskForce)

def OrbitTrack_AbridgedAddFeint(builder, feint):
    builder.PrependBoolSlot(34, feint, 0)

def AddFeint(builder, feint):
    OrbitTrack_AbridgedAddFeint(builder, feint)

def OrbitTrack_AbridgedAddInstallation(builder, installation):
    builder.PrependBoolSlot(35, installation, 0)

def AddInstallation(builder, installation):
    OrbitTrack_AbridgedAddInstallation(builder, installation)

def OrbitTrack_AbridgedAddVehType(builder, vehType):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(vehType), 0)

def AddVehType(builder, vehType):
    OrbitTrack_AbridgedAddVehType(builder, vehType)

def OrbitTrack_AbridgedAddTrkId(builder, trkId):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(trkId), 0)

def AddTrkId(builder, trkId):
    OrbitTrack_AbridgedAddTrkId(builder, trkId)

def OrbitTrack_AbridgedAddTrackSensors(builder, trackSensors):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(trackSensors), 0)

def AddTrackSensors(builder, trackSensors):
    OrbitTrack_AbridgedAddTrackSensors(builder, trackSensors)

def OrbitTrack_AbridgedStartTrackSensorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTrackSensorsVector(builder, numElems):
    return OrbitTrack_AbridgedStartTrackSensorsVector(builder, numElems)

def OrbitTrack_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OrbitTrack_AbridgedAddCreatedAt(builder, createdAt)

def OrbitTrack_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OrbitTrack_AbridgedAddCreatedBy(builder, createdBy)

def OrbitTrack_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OrbitTrack_AbridgedAddSource(builder, source)

def OrbitTrack_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OrbitTrack_AbridgedAddOrigin(builder, origin)

def OrbitTrack_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(43, dataMode, 0)

def AddDataMode(builder, dataMode):
    OrbitTrack_AbridgedAddDataMode(builder, dataMode)

def OrbitTrack_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OrbitTrack_AbridgedAddOrigNetwork(builder, origNetwork)

def OrbitTrack_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrbitTrack_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class OrbitTrack_AbridgedT(object):

    # OrbitTrack_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.idElset = None  # type: str
        self.ts = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.alt = 0.0  # type: float
        self.rdfRf = 0.0  # type: float
        self.callSign = None  # type: str
        self.rptNum = None  # type: str
        self.objIdent = 0  # type: int
        self.identAmp = None  # type: str
        self.satStatus = None  # type: str
        self.objectType = 0  # type: int
        self.countryCode = None  # type: str
        self.decay = 0.0  # type: float
        self.charlieLine = None  # type: str
        self.aouType = None  # type: str
        self.aouData = None  # type: List[str]
        self.spd = 0.0  # type: float
        self.angElev = 0.0  # type: float
        self.cntnmnt = 0.0  # type: float
        self.xref = None  # type: str
        self.chXref = None  # type: str
        self.amplification = None  # type: str
        self.iff = None  # type: str
        self.reinforced = False  # type: bool
        self.reduced = False  # type: bool
        self.hq = False  # type: bool
        self.dummy = False  # type: bool
        self.taskForce = False  # type: bool
        self.feint = False  # type: bool
        self.installation = False  # type: bool
        self.vehType = None  # type: str
        self.trkId = None  # type: str
        self.trackSensors = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        orbitTrackAbridged = OrbitTrack_Abridged()
        orbitTrackAbridged.Init(buf, pos)
        return cls.InitFromObj(orbitTrackAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, orbitTrackAbridged):
        x = OrbitTrack_AbridgedT()
        x._UnPack(orbitTrackAbridged)
        return x

    # OrbitTrack_AbridgedT
    def _UnPack(self, orbitTrackAbridged):
        if orbitTrackAbridged is None:
            return
        self.id = orbitTrackAbridged.Id()
        self.classificationMarking = orbitTrackAbridged.ClassificationMarking()
        self.idOnOrbit = orbitTrackAbridged.IdOnOrbit()
        self.satNo = orbitTrackAbridged.SatNo()
        self.origObjectId = orbitTrackAbridged.OrigObjectId()
        self.idElset = orbitTrackAbridged.IdElset()
        self.ts = orbitTrackAbridged.Ts()
        self.lat = orbitTrackAbridged.Lat()
        self.lon = orbitTrackAbridged.Lon()
        self.alt = orbitTrackAbridged.Alt()
        self.rdfRf = orbitTrackAbridged.RdfRf()
        self.callSign = orbitTrackAbridged.CallSign()
        self.rptNum = orbitTrackAbridged.RptNum()
        self.objIdent = orbitTrackAbridged.ObjIdent()
        self.identAmp = orbitTrackAbridged.IdentAmp()
        self.satStatus = orbitTrackAbridged.SatStatus()
        self.objectType = orbitTrackAbridged.ObjectType()
        self.countryCode = orbitTrackAbridged.CountryCode()
        self.decay = orbitTrackAbridged.Decay()
        self.charlieLine = orbitTrackAbridged.CharlieLine()
        self.aouType = orbitTrackAbridged.AouType()
        if not orbitTrackAbridged.AouDataIsNone():
            self.aouData = []
            for i in range(orbitTrackAbridged.AouDataLength()):
                self.aouData.append(orbitTrackAbridged.AouData(i))
        self.spd = orbitTrackAbridged.Spd()
        self.angElev = orbitTrackAbridged.AngElev()
        self.cntnmnt = orbitTrackAbridged.Cntnmnt()
        self.xref = orbitTrackAbridged.Xref()
        self.chXref = orbitTrackAbridged.ChXref()
        self.amplification = orbitTrackAbridged.Amplification()
        self.iff = orbitTrackAbridged.Iff()
        self.reinforced = orbitTrackAbridged.Reinforced()
        self.reduced = orbitTrackAbridged.Reduced()
        self.hq = orbitTrackAbridged.Hq()
        self.dummy = orbitTrackAbridged.Dummy()
        self.taskForce = orbitTrackAbridged.TaskForce()
        self.feint = orbitTrackAbridged.Feint()
        self.installation = orbitTrackAbridged.Installation()
        self.vehType = orbitTrackAbridged.VehType()
        self.trkId = orbitTrackAbridged.TrkId()
        if not orbitTrackAbridged.TrackSensorsIsNone():
            self.trackSensors = []
            for i in range(orbitTrackAbridged.TrackSensorsLength()):
                self.trackSensors.append(orbitTrackAbridged.TrackSensors(i))
        self.createdAt = orbitTrackAbridged.CreatedAt()
        self.createdBy = orbitTrackAbridged.CreatedBy()
        self.source = orbitTrackAbridged.Source()
        self.origin = orbitTrackAbridged.Origin()
        self.dataMode = orbitTrackAbridged.DataMode()
        self.origNetwork = orbitTrackAbridged.OrigNetwork()

    # OrbitTrack_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idElset is not None:
            idElset = builder.CreateString(self.idElset)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.rptNum is not None:
            rptNum = builder.CreateString(self.rptNum)
        if self.identAmp is not None:
            identAmp = builder.CreateString(self.identAmp)
        if self.satStatus is not None:
            satStatus = builder.CreateString(self.satStatus)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.charlieLine is not None:
            charlieLine = builder.CreateString(self.charlieLine)
        if self.aouType is not None:
            aouType = builder.CreateString(self.aouType)
        if self.aouData is not None:
            aouDatalist = []
            for i in range(len(self.aouData)):
                aouDatalist.append(builder.CreateString(self.aouData[i]))
            OrbitTrack_AbridgedStartAouDataVector(builder, len(self.aouData))
            for i in reversed(range(len(self.aouData))):
                builder.PrependUOffsetTRelative(aouDatalist[i])
            aouData = builder.EndVector()
        if self.xref is not None:
            xref = builder.CreateString(self.xref)
        if self.chXref is not None:
            chXref = builder.CreateString(self.chXref)
        if self.amplification is not None:
            amplification = builder.CreateString(self.amplification)
        if self.iff is not None:
            iff = builder.CreateString(self.iff)
        if self.vehType is not None:
            vehType = builder.CreateString(self.vehType)
        if self.trkId is not None:
            trkId = builder.CreateString(self.trkId)
        if self.trackSensors is not None:
            trackSensorslist = []
            for i in range(len(self.trackSensors)):
                trackSensorslist.append(builder.CreateString(self.trackSensors[i]))
            OrbitTrack_AbridgedStartTrackSensorsVector(builder, len(self.trackSensors))
            for i in reversed(range(len(self.trackSensors))):
                builder.PrependUOffsetTRelative(trackSensorslist[i])
            trackSensors = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OrbitTrack_AbridgedStart(builder)
        if self.id is not None:
            OrbitTrack_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            OrbitTrack_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            OrbitTrack_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        OrbitTrack_AbridgedAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            OrbitTrack_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.idElset is not None:
            OrbitTrack_AbridgedAddIdElset(builder, idElset)
        if self.ts is not None:
            OrbitTrack_AbridgedAddTs(builder, ts)
        OrbitTrack_AbridgedAddLat(builder, self.lat)
        OrbitTrack_AbridgedAddLon(builder, self.lon)
        OrbitTrack_AbridgedAddAlt(builder, self.alt)
        OrbitTrack_AbridgedAddRdfRf(builder, self.rdfRf)
        if self.callSign is not None:
            OrbitTrack_AbridgedAddCallSign(builder, callSign)
        if self.rptNum is not None:
            OrbitTrack_AbridgedAddRptNum(builder, rptNum)
        OrbitTrack_AbridgedAddObjIdent(builder, self.objIdent)
        if self.identAmp is not None:
            OrbitTrack_AbridgedAddIdentAmp(builder, identAmp)
        if self.satStatus is not None:
            OrbitTrack_AbridgedAddSatStatus(builder, satStatus)
        OrbitTrack_AbridgedAddObjectType(builder, self.objectType)
        if self.countryCode is not None:
            OrbitTrack_AbridgedAddCountryCode(builder, countryCode)
        OrbitTrack_AbridgedAddDecay(builder, self.decay)
        if self.charlieLine is not None:
            OrbitTrack_AbridgedAddCharlieLine(builder, charlieLine)
        if self.aouType is not None:
            OrbitTrack_AbridgedAddAouType(builder, aouType)
        if self.aouData is not None:
            OrbitTrack_AbridgedAddAouData(builder, aouData)
        OrbitTrack_AbridgedAddSpd(builder, self.spd)
        OrbitTrack_AbridgedAddAngElev(builder, self.angElev)
        OrbitTrack_AbridgedAddCntnmnt(builder, self.cntnmnt)
        if self.xref is not None:
            OrbitTrack_AbridgedAddXref(builder, xref)
        if self.chXref is not None:
            OrbitTrack_AbridgedAddChXref(builder, chXref)
        if self.amplification is not None:
            OrbitTrack_AbridgedAddAmplification(builder, amplification)
        if self.iff is not None:
            OrbitTrack_AbridgedAddIff(builder, iff)
        OrbitTrack_AbridgedAddReinforced(builder, self.reinforced)
        OrbitTrack_AbridgedAddReduced(builder, self.reduced)
        OrbitTrack_AbridgedAddHq(builder, self.hq)
        OrbitTrack_AbridgedAddDummy(builder, self.dummy)
        OrbitTrack_AbridgedAddTaskForce(builder, self.taskForce)
        OrbitTrack_AbridgedAddFeint(builder, self.feint)
        OrbitTrack_AbridgedAddInstallation(builder, self.installation)
        if self.vehType is not None:
            OrbitTrack_AbridgedAddVehType(builder, vehType)
        if self.trkId is not None:
            OrbitTrack_AbridgedAddTrkId(builder, trkId)
        if self.trackSensors is not None:
            OrbitTrack_AbridgedAddTrackSensors(builder, trackSensors)
        if self.createdAt is not None:
            OrbitTrack_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OrbitTrack_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            OrbitTrack_AbridgedAddSource(builder, source)
        if self.origin is not None:
            OrbitTrack_AbridgedAddOrigin(builder, origin)
        OrbitTrack_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            OrbitTrack_AbridgedAddOrigNetwork(builder, origNetwork)
        orbitTrackAbridged = OrbitTrack_AbridgedEnd(builder)
        return orbitTrackAbridged
