# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
class AntennaDetails(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AntennaDetails()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAntennaDetails(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AntennaDetailsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x4E\x54\x45", size_prefixed=size_prefixed)

    # AntennaDetails
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ANTENNADETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AntennaDetails
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Antenna.
    # Example: /// Example: ANTENNA-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AntennaDetails
    def IdAntenna(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AntennaDetails
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
    # Example: /// Example: Reflector
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna position (e.g. Top, Nadir, Side).
    # Example: /// Example: Top
    # Constraints: Minimum length = 0, Maximum length = 128
    # AntennaDetails
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna mode (e.g. TX,RX).
    # Example: /// Example: TX
    # Constraints: Minimum length = 0, Maximum length = 4
    # AntennaDetails
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Boolean indicating if this antenna is steerable.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AntennaDetails
    def Steerable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if this is a beam forming antenna.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AntennaDetails
    def BeamForming(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ID of the organization that manufactures the antenna.
    # Example: /// Example: MANUFACTUREORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AntennaDetails
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Antenna diameter in meters.
    # Example: /// Example: 0.01
    # Constraints: No constraints specified.
    # AntennaDetails
    def Diameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
    # Example: /// Example: [0.03, 0.05]
    # Constraints: No constraints specified.
    # AntennaDetails
    def Size(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AntennaDetails
    def SizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AntennaDetails
    def SizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Antenna start of frequency range in Mhz.
    # Example: /// Example: 2.1
    # Constraints: No constraints specified.
    # AntennaDetails
    def StartFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna end of frequency range in Mhz.
    # Example: /// Example: 3.3
    # Constraints: No constraints specified.
    # AntennaDetails
    def EndFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    # Example: /// Example: 14.1
    # Constraints: No constraints specified.
    # AntennaDetails
    def Beamwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna maximum gain in dBi.
    # Example: /// Example: 20.1
    # Constraints: No constraints specified.
    # AntennaDetails
    def Gain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna gain tolerance in dB.
    # Example: /// Example: 5.1
    # Constraints: No constraints specified.
    # AntennaDetails
    def GainTolerance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna polarization in degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # AntennaDetails
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Antenna description.
    # Example: /// Example: Description of antenna A
    # Constraints: Minimum length = 0, Maximum length = 512
    # AntennaDetails
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AntennaDetails
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AntennaDetails
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AntennaDetails
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AntennaDetails
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AntennaDetails
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AntennaDetails
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AntennaDetails
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # AntennaDetails
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AntennaDetails
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AntennaDetails
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AntennaDetails
    def ManufacturerOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AntennaDetailsStart(builder):
    builder.StartObject(28)

def Start(builder):
    AntennaDetailsStart(builder)

def AntennaDetailsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AntennaDetailsAddId(builder, id)

def AntennaDetailsAddIdAntenna(builder, idAntenna):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idAntenna), 0)

def AddIdAntenna(builder, idAntenna):
    AntennaDetailsAddIdAntenna(builder, idAntenna)

def AntennaDetailsAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AntennaDetailsAddClassificationMarking(builder, classificationMarking)

def AntennaDetailsAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AntennaDetailsAddType(builder, type)

def AntennaDetailsAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    AntennaDetailsAddPosition(builder, position)

def AntennaDetailsAddMode(builder, mode):
    builder.PrependInt8Slot(5, mode, 0)

def AddMode(builder, mode):
    AntennaDetailsAddMode(builder, mode)

def AntennaDetailsAddSteerable(builder, steerable):
    builder.PrependBoolSlot(6, steerable, 0)

def AddSteerable(builder, steerable):
    AntennaDetailsAddSteerable(builder, steerable)

def AntennaDetailsAddBeamForming(builder, beamForming):
    builder.PrependBoolSlot(7, beamForming, 0)

def AddBeamForming(builder, beamForming):
    AntennaDetailsAddBeamForming(builder, beamForming)

def AntennaDetailsAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    AntennaDetailsAddManufacturerOrgId(builder, manufacturerOrgId)

def AntennaDetailsAddDiameter(builder, diameter):
    builder.PrependFloat64Slot(9, diameter, 0.0)

def AddDiameter(builder, diameter):
    AntennaDetailsAddDiameter(builder, diameter)

def AntennaDetailsAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def AddSize(builder, size):
    AntennaDetailsAddSize(builder, size)

def AntennaDetailsStartSizeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizeVector(builder, numElems):
    return AntennaDetailsStartSizeVector(builder, numElems)

def AntennaDetailsAddStartFrequency(builder, startFrequency):
    builder.PrependFloat64Slot(11, startFrequency, 0.0)

def AddStartFrequency(builder, startFrequency):
    AntennaDetailsAddStartFrequency(builder, startFrequency)

def AntennaDetailsAddEndFrequency(builder, endFrequency):
    builder.PrependFloat64Slot(12, endFrequency, 0.0)

def AddEndFrequency(builder, endFrequency):
    AntennaDetailsAddEndFrequency(builder, endFrequency)

def AntennaDetailsAddBeamwidth(builder, beamwidth):
    builder.PrependFloat64Slot(13, beamwidth, 0.0)

def AddBeamwidth(builder, beamwidth):
    AntennaDetailsAddBeamwidth(builder, beamwidth)

def AntennaDetailsAddGain(builder, gain):
    builder.PrependFloat64Slot(14, gain, 0.0)

def AddGain(builder, gain):
    AntennaDetailsAddGain(builder, gain)

def AntennaDetailsAddGainTolerance(builder, gainTolerance):
    builder.PrependFloat64Slot(15, gainTolerance, 0.0)

def AddGainTolerance(builder, gainTolerance):
    AntennaDetailsAddGainTolerance(builder, gainTolerance)

def AntennaDetailsAddPolarization(builder, polarization):
    builder.PrependFloat64Slot(16, polarization, 0.0)

def AddPolarization(builder, polarization):
    AntennaDetailsAddPolarization(builder, polarization)

def AntennaDetailsAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    AntennaDetailsAddDescription(builder, description)

def AntennaDetailsAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AntennaDetailsAddCreatedAt(builder, createdAt)

def AntennaDetailsAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AntennaDetailsAddCreatedBy(builder, createdBy)

def AntennaDetailsAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AntennaDetailsAddUpdatedAt(builder, updatedAt)

def AntennaDetailsAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AntennaDetailsAddUpdatedBy(builder, updatedBy)

def AntennaDetailsAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AntennaDetailsAddSource(builder, source)

def AntennaDetailsAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AntennaDetailsAddOrigin(builder, origin)

def AntennaDetailsAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AntennaDetailsAddOrigNetwork(builder, origNetwork)

def AntennaDetailsAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(25, dataMode, 0)

def AddDataMode(builder, dataMode):
    AntennaDetailsAddDataMode(builder, dataMode)

def AntennaDetailsAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    AntennaDetailsAddTags(builder, tags)

def AntennaDetailsStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return AntennaDetailsStartTagsVector(builder, numElems)

def AntennaDetailsAddManufacturerOrg(builder, manufacturerOrg):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrg), 0)

def AddManufacturerOrg(builder, manufacturerOrg):
    AntennaDetailsAddManufacturerOrg(builder, manufacturerOrg)

def AntennaDetailsEnd(builder):
    return builder.EndObject()

def End(builder):
    return AntennaDetailsEnd(builder)

try:
    from typing import List
except:
    pass

class AntennaDetailsT(object):

    # AntennaDetailsT
    def __init__(self):
        self.id = None  # type: str
        self.idAntenna = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.position = None  # type: str
        self.mode = 0  # type: int
        self.steerable = False  # type: bool
        self.beamForming = False  # type: bool
        self.manufacturerOrgId = None  # type: str
        self.diameter = 0.0  # type: float
        self.size = None  # type: List[str]
        self.startFrequency = 0.0  # type: float
        self.endFrequency = 0.0  # type: float
        self.beamwidth = 0.0  # type: float
        self.gain = 0.0  # type: float
        self.gainTolerance = 0.0  # type: float
        self.polarization = 0.0  # type: float
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.manufacturerOrg = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        antennaDetails = AntennaDetails()
        antennaDetails.Init(buf, pos)
        return cls.InitFromObj(antennaDetails)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, antennaDetails):
        x = AntennaDetailsT()
        x._UnPack(antennaDetails)
        return x

    # AntennaDetailsT
    def _UnPack(self, antennaDetails):
        if antennaDetails is None:
            return
        self.id = antennaDetails.Id()
        self.idAntenna = antennaDetails.IdAntenna()
        self.classificationMarking = antennaDetails.ClassificationMarking()
        self.type = antennaDetails.Type()
        self.position = antennaDetails.Position()
        self.mode = antennaDetails.Mode()
        self.steerable = antennaDetails.Steerable()
        self.beamForming = antennaDetails.BeamForming()
        self.manufacturerOrgId = antennaDetails.ManufacturerOrgId()
        self.diameter = antennaDetails.Diameter()
        if not antennaDetails.SizeIsNone():
            self.size = []
            for i in range(antennaDetails.SizeLength()):
                self.size.append(antennaDetails.Size(i))
        self.startFrequency = antennaDetails.StartFrequency()
        self.endFrequency = antennaDetails.EndFrequency()
        self.beamwidth = antennaDetails.Beamwidth()
        self.gain = antennaDetails.Gain()
        self.gainTolerance = antennaDetails.GainTolerance()
        self.polarization = antennaDetails.Polarization()
        self.description = antennaDetails.Description()
        self.createdAt = antennaDetails.CreatedAt()
        self.createdBy = antennaDetails.CreatedBy()
        self.updatedAt = antennaDetails.UpdatedAt()
        self.updatedBy = antennaDetails.UpdatedBy()
        self.source = antennaDetails.Source()
        self.origin = antennaDetails.Origin()
        self.origNetwork = antennaDetails.OrigNetwork()
        self.dataMode = antennaDetails.DataMode()
        if not antennaDetails.TagsIsNone():
            self.tags = []
            for i in range(antennaDetails.TagsLength()):
                self.tags.append(antennaDetails.Tags(i))
        self.manufacturerOrg = antennaDetails.ManufacturerOrg()

    # AntennaDetailsT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idAntenna is not None:
            idAntenna = builder.CreateString(self.idAntenna)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.position is not None:
            position = builder.CreateString(self.position)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.size is not None:
            sizelist = []
            for i in range(len(self.size)):
                sizelist.append(builder.CreateString(self.size[i]))
            AntennaDetailsStartSizeVector(builder, len(self.size))
            for i in reversed(range(len(self.size))):
                builder.PrependUOffsetTRelative(sizelist[i])
            size = builder.EndVector()
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            AntennaDetailsStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.manufacturerOrg is not None:
            manufacturerOrg = builder.CreateString(self.manufacturerOrg)
        AntennaDetailsStart(builder)
        if self.id is not None:
            AntennaDetailsAddId(builder, id)
        if self.idAntenna is not None:
            AntennaDetailsAddIdAntenna(builder, idAntenna)
        if self.classificationMarking is not None:
            AntennaDetailsAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            AntennaDetailsAddType(builder, type)
        if self.position is not None:
            AntennaDetailsAddPosition(builder, position)
        AntennaDetailsAddMode(builder, self.mode)
        AntennaDetailsAddSteerable(builder, self.steerable)
        AntennaDetailsAddBeamForming(builder, self.beamForming)
        if self.manufacturerOrgId is not None:
            AntennaDetailsAddManufacturerOrgId(builder, manufacturerOrgId)
        AntennaDetailsAddDiameter(builder, self.diameter)
        if self.size is not None:
            AntennaDetailsAddSize(builder, size)
        AntennaDetailsAddStartFrequency(builder, self.startFrequency)
        AntennaDetailsAddEndFrequency(builder, self.endFrequency)
        AntennaDetailsAddBeamwidth(builder, self.beamwidth)
        AntennaDetailsAddGain(builder, self.gain)
        AntennaDetailsAddGainTolerance(builder, self.gainTolerance)
        AntennaDetailsAddPolarization(builder, self.polarization)
        if self.description is not None:
            AntennaDetailsAddDescription(builder, description)
        if self.createdAt is not None:
            AntennaDetailsAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AntennaDetailsAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AntennaDetailsAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AntennaDetailsAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            AntennaDetailsAddSource(builder, source)
        if self.origin is not None:
            AntennaDetailsAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AntennaDetailsAddOrigNetwork(builder, origNetwork)
        AntennaDetailsAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            AntennaDetailsAddTags(builder, tags)
        if self.manufacturerOrg is not None:
            AntennaDetailsAddManufacturerOrg(builder, manufacturerOrg)
        antennaDetails = AntennaDetailsEnd(builder)
        return antennaDetails
