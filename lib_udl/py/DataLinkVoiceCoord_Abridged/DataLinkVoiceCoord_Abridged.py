# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
class DataLinkVoiceCoord_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkVoiceCoord_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkVoiceCoord_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkVoiceCoord_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkVoiceCoord_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
    # Example: /// Example: VPN
    # Constraints: Minimum length = 0, Maximum length = 5
    # DataLinkVoiceCoord_Abridged
    def VoiceNetDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designator used in nonsecure communications to refer to a radio frequency for this data link message.
    # Example: /// Example: ST300A
    # Constraints: Minimum length = 0, Maximum length = 8
    # DataLinkVoiceCoord_Abridged
    def FreqDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
    # Example: /// Example: P
    # Constraints: Minimum length = 0, Maximum length = 1
    # DataLinkVoiceCoord_Abridged
    def CommPri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of telephone numbers or contact frequencies used for interface control for this data link message.
    # Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
    # Constraints: No constraints specified.
    # DataLinkVoiceCoord_Abridged
    def TeleFreqNums(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLinkVoiceCoord_Abridged
    def TeleFreqNumsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLinkVoiceCoord_Abridged
    def TeleFreqNumsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def DataLinkVoiceCoord_AbridgedStart(builder):
    builder.StartObject(4)

def Start(builder):
    DataLinkVoiceCoord_AbridgedStart(builder)

def DataLinkVoiceCoord_AbridgedAddVoiceNetDes(builder, voiceNetDes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(voiceNetDes), 0)

def AddVoiceNetDes(builder, voiceNetDes):
    DataLinkVoiceCoord_AbridgedAddVoiceNetDes(builder, voiceNetDes)

def DataLinkVoiceCoord_AbridgedAddFreqDes(builder, freqDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(freqDes), 0)

def AddFreqDes(builder, freqDes):
    DataLinkVoiceCoord_AbridgedAddFreqDes(builder, freqDes)

def DataLinkVoiceCoord_AbridgedAddCommPri(builder, commPri):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(commPri), 0)

def AddCommPri(builder, commPri):
    DataLinkVoiceCoord_AbridgedAddCommPri(builder, commPri)

def DataLinkVoiceCoord_AbridgedAddTeleFreqNums(builder, teleFreqNums):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(teleFreqNums), 0)

def AddTeleFreqNums(builder, teleFreqNums):
    DataLinkVoiceCoord_AbridgedAddTeleFreqNums(builder, teleFreqNums)

def DataLinkVoiceCoord_AbridgedStartTeleFreqNumsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTeleFreqNumsVector(builder, numElems):
    return DataLinkVoiceCoord_AbridgedStartTeleFreqNumsVector(builder, numElems)

def DataLinkVoiceCoord_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkVoiceCoord_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class DataLinkVoiceCoord_AbridgedT(object):

    # DataLinkVoiceCoord_AbridgedT
    def __init__(self):
        self.voiceNetDes = None  # type: str
        self.freqDes = None  # type: str
        self.commPri = None  # type: str
        self.teleFreqNums = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkVoiceCoordAbridged = DataLinkVoiceCoord_Abridged()
        dataLinkVoiceCoordAbridged.Init(buf, pos)
        return cls.InitFromObj(dataLinkVoiceCoordAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkVoiceCoordAbridged):
        x = DataLinkVoiceCoord_AbridgedT()
        x._UnPack(dataLinkVoiceCoordAbridged)
        return x

    # DataLinkVoiceCoord_AbridgedT
    def _UnPack(self, dataLinkVoiceCoordAbridged):
        if dataLinkVoiceCoordAbridged is None:
            return
        self.voiceNetDes = dataLinkVoiceCoordAbridged.VoiceNetDes()
        self.freqDes = dataLinkVoiceCoordAbridged.FreqDes()
        self.commPri = dataLinkVoiceCoordAbridged.CommPri()
        if not dataLinkVoiceCoordAbridged.TeleFreqNumsIsNone():
            self.teleFreqNums = []
            for i in range(dataLinkVoiceCoordAbridged.TeleFreqNumsLength()):
                self.teleFreqNums.append(dataLinkVoiceCoordAbridged.TeleFreqNums(i))

    # DataLinkVoiceCoord_AbridgedT
    def Pack(self, builder):
        if self.voiceNetDes is not None:
            voiceNetDes = builder.CreateString(self.voiceNetDes)
        if self.freqDes is not None:
            freqDes = builder.CreateString(self.freqDes)
        if self.commPri is not None:
            commPri = builder.CreateString(self.commPri)
        if self.teleFreqNums is not None:
            teleFreqNumslist = []
            for i in range(len(self.teleFreqNums)):
                teleFreqNumslist.append(builder.CreateString(self.teleFreqNums[i]))
            DataLinkVoiceCoord_AbridgedStartTeleFreqNumsVector(builder, len(self.teleFreqNums))
            for i in reversed(range(len(self.teleFreqNums))):
                builder.PrependUOffsetTRelative(teleFreqNumslist[i])
            teleFreqNums = builder.EndVector()
        DataLinkVoiceCoord_AbridgedStart(builder)
        if self.voiceNetDes is not None:
            DataLinkVoiceCoord_AbridgedAddVoiceNetDes(builder, voiceNetDes)
        if self.freqDes is not None:
            DataLinkVoiceCoord_AbridgedAddFreqDes(builder, freqDes)
        if self.commPri is not None:
            DataLinkVoiceCoord_AbridgedAddCommPri(builder, commPri)
        if self.teleFreqNums is not None:
            DataLinkVoiceCoord_AbridgedAddTeleFreqNums(builder, teleFreqNums)
        dataLinkVoiceCoordAbridged = DataLinkVoiceCoord_AbridgedEnd(builder)
        return dataLinkVoiceCoordAbridged
