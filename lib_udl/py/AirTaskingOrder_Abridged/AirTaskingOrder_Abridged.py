# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
class AirTaskingOrder_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirTaskingOrder_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirTaskingOrder_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirTaskingOrder_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x54", size_prefixed=size_prefixed)

    # AirTaskingOrder_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: POI-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirTaskingOrder_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirTaskingOrder_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirTaskingOrder_Abridged
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
    # Example: /// Example: DESERT WIND
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirTaskingOrder_Abridged
    def OpExerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The identifier of the originator of the message.
    # Example: /// Example: USCENTCOM
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTaskingOrder_Abridged
    def MsgOriginator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unique message identifier sequentially assigned by the originator.
    # Example: /// Example: ATO A
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirTaskingOrder_Abridged
    def MsgSn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The month in which the message originated.
    # Example: /// Example: OCT
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirTaskingOrder_Abridged
    def MsgMonth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The qualifier which caveats the message status.
    # Example: /// Example: CHG
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirTaskingOrder_Abridged
    def MsgQualifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The indicator specifying an affirmative or a negatice condition for this message.
    # Example: /// Example: YES
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirTaskingOrder_Abridged
    def AckReqInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
    # Example: /// Example: INST:45TS
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTaskingOrder_Abridged
    def AckUnitInstructions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-10-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # AirTaskingOrder_Abridged
    def BeginTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-10-27T12:00:00.123Z
    # Constraints: No constraints specified.
    # AirTaskingOrder_Abridged
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTaskingOrder_Abridged
    def GenText(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTaskingOrder_Abridged
    def GenTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTaskingOrder_Abridged
    def GenTextIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTaskingOrder_Abridged
    def AcMsnTasking(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTaskingOrder_Abridged
    def AcMsnTaskingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTaskingOrder_Abridged
    def AcMsnTaskingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # A collection that specifies the naval flight operations for this ATO.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTaskingOrder_Abridged
    def NavalFltOps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTaskingOrder_Abridged
    def NavalFltOpsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTaskingOrder_Abridged
    def NavalFltOpsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirTaskingOrder_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirTaskingOrder_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirTaskingOrder_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTaskingOrder_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTaskingOrder_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTaskingOrder_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirTaskingOrder_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirTaskingOrder_AbridgedStart(builder):
    builder.StartObject(22)

def Start(builder):
    AirTaskingOrder_AbridgedStart(builder)

def AirTaskingOrder_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirTaskingOrder_AbridgedAddId(builder, id)

def AirTaskingOrder_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirTaskingOrder_AbridgedAddClassificationMarking(builder, classificationMarking)

def AirTaskingOrder_AbridgedAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    AirTaskingOrder_AbridgedAddRawFileUri(builder, rawFileUri)

def AirTaskingOrder_AbridgedAddOpExerName(builder, opExerName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(opExerName), 0)

def AddOpExerName(builder, opExerName):
    AirTaskingOrder_AbridgedAddOpExerName(builder, opExerName)

def AirTaskingOrder_AbridgedAddMsgOriginator(builder, msgOriginator):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(msgOriginator), 0)

def AddMsgOriginator(builder, msgOriginator):
    AirTaskingOrder_AbridgedAddMsgOriginator(builder, msgOriginator)

def AirTaskingOrder_AbridgedAddMsgSn(builder, msgSn):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(msgSn), 0)

def AddMsgSn(builder, msgSn):
    AirTaskingOrder_AbridgedAddMsgSn(builder, msgSn)

def AirTaskingOrder_AbridgedAddMsgMonth(builder, msgMonth):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(msgMonth), 0)

def AddMsgMonth(builder, msgMonth):
    AirTaskingOrder_AbridgedAddMsgMonth(builder, msgMonth)

def AirTaskingOrder_AbridgedAddMsgQualifier(builder, msgQualifier):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(msgQualifier), 0)

def AddMsgQualifier(builder, msgQualifier):
    AirTaskingOrder_AbridgedAddMsgQualifier(builder, msgQualifier)

def AirTaskingOrder_AbridgedAddAckReqInd(builder, ackReqInd):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ackReqInd), 0)

def AddAckReqInd(builder, ackReqInd):
    AirTaskingOrder_AbridgedAddAckReqInd(builder, ackReqInd)

def AirTaskingOrder_AbridgedAddAckUnitInstructions(builder, ackUnitInstructions):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ackUnitInstructions), 0)

def AddAckUnitInstructions(builder, ackUnitInstructions):
    AirTaskingOrder_AbridgedAddAckUnitInstructions(builder, ackUnitInstructions)

def AirTaskingOrder_AbridgedAddBeginTs(builder, beginTs):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(beginTs), 0)

def AddBeginTs(builder, beginTs):
    AirTaskingOrder_AbridgedAddBeginTs(builder, beginTs)

def AirTaskingOrder_AbridgedAddEndTs(builder, endTs):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(endTs), 0)

def AddEndTs(builder, endTs):
    AirTaskingOrder_AbridgedAddEndTs(builder, endTs)

def AirTaskingOrder_AbridgedAddGenText(builder, genText):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(genText), 0)

def AddGenText(builder, genText):
    AirTaskingOrder_AbridgedAddGenText(builder, genText)

def AirTaskingOrder_AbridgedStartGenTextVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGenTextVector(builder, numElems):
    return AirTaskingOrder_AbridgedStartGenTextVector(builder, numElems)

def AirTaskingOrder_AbridgedAddAcMsnTasking(builder, acMsnTasking):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(acMsnTasking), 0)

def AddAcMsnTasking(builder, acMsnTasking):
    AirTaskingOrder_AbridgedAddAcMsnTasking(builder, acMsnTasking)

def AirTaskingOrder_AbridgedStartAcMsnTaskingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAcMsnTaskingVector(builder, numElems):
    return AirTaskingOrder_AbridgedStartAcMsnTaskingVector(builder, numElems)

def AirTaskingOrder_AbridgedAddNavalFltOps(builder, navalFltOps):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(navalFltOps), 0)

def AddNavalFltOps(builder, navalFltOps):
    AirTaskingOrder_AbridgedAddNavalFltOps(builder, navalFltOps)

def AirTaskingOrder_AbridgedStartNavalFltOpsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNavalFltOpsVector(builder, numElems):
    return AirTaskingOrder_AbridgedStartNavalFltOpsVector(builder, numElems)

def AirTaskingOrder_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirTaskingOrder_AbridgedAddCreatedAt(builder, createdAt)

def AirTaskingOrder_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirTaskingOrder_AbridgedAddCreatedBy(builder, createdBy)

def AirTaskingOrder_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirTaskingOrder_AbridgedAddSource(builder, source)

def AirTaskingOrder_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirTaskingOrder_AbridgedAddSourceDl(builder, sourceDl)

def AirTaskingOrder_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirTaskingOrder_AbridgedAddOrigin(builder, origin)

def AirTaskingOrder_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirTaskingOrder_AbridgedAddOrigNetwork(builder, origNetwork)

def AirTaskingOrder_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(21, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirTaskingOrder_AbridgedAddDataMode(builder, dataMode)

def AirTaskingOrder_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirTaskingOrder_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AirTaskingOrder_AbridgedT(object):

    # AirTaskingOrder_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.rawFileUri = None  # type: str
        self.opExerName = None  # type: str
        self.msgOriginator = None  # type: str
        self.msgSn = None  # type: str
        self.msgMonth = None  # type: str
        self.msgQualifier = None  # type: str
        self.ackReqInd = None  # type: str
        self.ackUnitInstructions = None  # type: str
        self.beginTs = None  # type: str
        self.endTs = None  # type: str
        self.genText = None  # type: List[str]
        self.acMsnTasking = None  # type: List[str]
        self.navalFltOps = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.sourceDl = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airTaskingOrderAbridged = AirTaskingOrder_Abridged()
        airTaskingOrderAbridged.Init(buf, pos)
        return cls.InitFromObj(airTaskingOrderAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airTaskingOrderAbridged):
        x = AirTaskingOrder_AbridgedT()
        x._UnPack(airTaskingOrderAbridged)
        return x

    # AirTaskingOrder_AbridgedT
    def _UnPack(self, airTaskingOrderAbridged):
        if airTaskingOrderAbridged is None:
            return
        self.id = airTaskingOrderAbridged.Id()
        self.classificationMarking = airTaskingOrderAbridged.ClassificationMarking()
        self.rawFileUri = airTaskingOrderAbridged.RawFileUri()
        self.opExerName = airTaskingOrderAbridged.OpExerName()
        self.msgOriginator = airTaskingOrderAbridged.MsgOriginator()
        self.msgSn = airTaskingOrderAbridged.MsgSn()
        self.msgMonth = airTaskingOrderAbridged.MsgMonth()
        self.msgQualifier = airTaskingOrderAbridged.MsgQualifier()
        self.ackReqInd = airTaskingOrderAbridged.AckReqInd()
        self.ackUnitInstructions = airTaskingOrderAbridged.AckUnitInstructions()
        self.beginTs = airTaskingOrderAbridged.BeginTs()
        self.endTs = airTaskingOrderAbridged.EndTs()
        if not airTaskingOrderAbridged.GenTextIsNone():
            self.genText = []
            for i in range(airTaskingOrderAbridged.GenTextLength()):
                self.genText.append(airTaskingOrderAbridged.GenText(i))
        if not airTaskingOrderAbridged.AcMsnTaskingIsNone():
            self.acMsnTasking = []
            for i in range(airTaskingOrderAbridged.AcMsnTaskingLength()):
                self.acMsnTasking.append(airTaskingOrderAbridged.AcMsnTasking(i))
        if not airTaskingOrderAbridged.NavalFltOpsIsNone():
            self.navalFltOps = []
            for i in range(airTaskingOrderAbridged.NavalFltOpsLength()):
                self.navalFltOps.append(airTaskingOrderAbridged.NavalFltOps(i))
        self.createdAt = airTaskingOrderAbridged.CreatedAt()
        self.createdBy = airTaskingOrderAbridged.CreatedBy()
        self.source = airTaskingOrderAbridged.Source()
        self.sourceDl = airTaskingOrderAbridged.SourceDl()
        self.origin = airTaskingOrderAbridged.Origin()
        self.origNetwork = airTaskingOrderAbridged.OrigNetwork()
        self.dataMode = airTaskingOrderAbridged.DataMode()

    # AirTaskingOrder_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.opExerName is not None:
            opExerName = builder.CreateString(self.opExerName)
        if self.msgOriginator is not None:
            msgOriginator = builder.CreateString(self.msgOriginator)
        if self.msgSn is not None:
            msgSn = builder.CreateString(self.msgSn)
        if self.msgMonth is not None:
            msgMonth = builder.CreateString(self.msgMonth)
        if self.msgQualifier is not None:
            msgQualifier = builder.CreateString(self.msgQualifier)
        if self.ackReqInd is not None:
            ackReqInd = builder.CreateString(self.ackReqInd)
        if self.ackUnitInstructions is not None:
            ackUnitInstructions = builder.CreateString(self.ackUnitInstructions)
        if self.beginTs is not None:
            beginTs = builder.CreateString(self.beginTs)
        if self.endTs is not None:
            endTs = builder.CreateString(self.endTs)
        if self.genText is not None:
            genTextlist = []
            for i in range(len(self.genText)):
                genTextlist.append(builder.CreateString(self.genText[i]))
            AirTaskingOrder_AbridgedStartGenTextVector(builder, len(self.genText))
            for i in reversed(range(len(self.genText))):
                builder.PrependUOffsetTRelative(genTextlist[i])
            genText = builder.EndVector()
        if self.acMsnTasking is not None:
            acMsnTaskinglist = []
            for i in range(len(self.acMsnTasking)):
                acMsnTaskinglist.append(builder.CreateString(self.acMsnTasking[i]))
            AirTaskingOrder_AbridgedStartAcMsnTaskingVector(builder, len(self.acMsnTasking))
            for i in reversed(range(len(self.acMsnTasking))):
                builder.PrependUOffsetTRelative(acMsnTaskinglist[i])
            acMsnTasking = builder.EndVector()
        if self.navalFltOps is not None:
            navalFltOpslist = []
            for i in range(len(self.navalFltOps)):
                navalFltOpslist.append(builder.CreateString(self.navalFltOps[i]))
            AirTaskingOrder_AbridgedStartNavalFltOpsVector(builder, len(self.navalFltOps))
            for i in reversed(range(len(self.navalFltOps))):
                builder.PrependUOffsetTRelative(navalFltOpslist[i])
            navalFltOps = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirTaskingOrder_AbridgedStart(builder)
        if self.id is not None:
            AirTaskingOrder_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AirTaskingOrder_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.rawFileUri is not None:
            AirTaskingOrder_AbridgedAddRawFileUri(builder, rawFileUri)
        if self.opExerName is not None:
            AirTaskingOrder_AbridgedAddOpExerName(builder, opExerName)
        if self.msgOriginator is not None:
            AirTaskingOrder_AbridgedAddMsgOriginator(builder, msgOriginator)
        if self.msgSn is not None:
            AirTaskingOrder_AbridgedAddMsgSn(builder, msgSn)
        if self.msgMonth is not None:
            AirTaskingOrder_AbridgedAddMsgMonth(builder, msgMonth)
        if self.msgQualifier is not None:
            AirTaskingOrder_AbridgedAddMsgQualifier(builder, msgQualifier)
        if self.ackReqInd is not None:
            AirTaskingOrder_AbridgedAddAckReqInd(builder, ackReqInd)
        if self.ackUnitInstructions is not None:
            AirTaskingOrder_AbridgedAddAckUnitInstructions(builder, ackUnitInstructions)
        if self.beginTs is not None:
            AirTaskingOrder_AbridgedAddBeginTs(builder, beginTs)
        if self.endTs is not None:
            AirTaskingOrder_AbridgedAddEndTs(builder, endTs)
        if self.genText is not None:
            AirTaskingOrder_AbridgedAddGenText(builder, genText)
        if self.acMsnTasking is not None:
            AirTaskingOrder_AbridgedAddAcMsnTasking(builder, acMsnTasking)
        if self.navalFltOps is not None:
            AirTaskingOrder_AbridgedAddNavalFltOps(builder, navalFltOps)
        if self.createdAt is not None:
            AirTaskingOrder_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirTaskingOrder_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            AirTaskingOrder_AbridgedAddSource(builder, source)
        if self.sourceDl is not None:
            AirTaskingOrder_AbridgedAddSourceDl(builder, sourceDl)
        if self.origin is not None:
            AirTaskingOrder_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirTaskingOrder_AbridgedAddOrigNetwork(builder, origNetwork)
        AirTaskingOrder_AbridgedAddDataMode(builder, self.dataMode)
        airTaskingOrderAbridged = AirTaskingOrder_AbridgedEnd(builder)
        return airTaskingOrderAbridged
