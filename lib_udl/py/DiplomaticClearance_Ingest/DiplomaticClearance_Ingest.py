# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
class DiplomaticClearance_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiplomaticClearance_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiplomaticClearance_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DiplomaticClearance_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x49\x50\x4C", size_prefixed=size_prefixed)

    # DiplomaticClearance_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
    # Constraints: Minimum length = 1, Maximum length = 36
    # DiplomaticClearance_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # DiplomaticClearance_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Mission associated with this diplomatic clearance record.
    # Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
    # Constraints: Minimum length = 1, Maximum length = 36
    # DiplomaticClearance_Ingest
    def IdMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: 990ae849089e3d6cad69655324176bb6
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiplomaticClearance_Ingest
    def ExternalWorksheetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    # Example: /// Example: G2-939911-AC
    # Constraints: Minimum length = 0, Maximum length = 256
    # DiplomaticClearance_Ingest
    def DipWorksheetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearance_Ingest
    def FirstDepDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearance_Ingest
    def DocDeadline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
    # Example: /// Example: 1083034
    # Constraints: Minimum length = 0, Maximum length = 40
    # DiplomaticClearance_Ingest
    def ApacsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection of diplomatic clearance details.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DiplomaticClearance_Ingest
    def DiplomaticClearanceDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DiplomaticClearance_Ingest
    def DiplomaticClearanceDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DiplomaticClearance_Ingest
    def DiplomaticClearanceDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Collection of diplomatic clearance remarks.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DiplomaticClearance_Ingest
    def DiplomaticClearanceRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DiplomaticClearance_Ingest
    def DiplomaticClearanceRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DiplomaticClearance_Ingest
    def DiplomaticClearanceRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearance_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # DiplomaticClearance_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearance_Ingest
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiplomaticClearance_Ingest
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiplomaticClearance_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # DiplomaticClearance_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiplomaticClearance_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # DiplomaticClearance_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # DiplomaticClearance_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def DiplomaticClearance_IngestStart(builder):
    builder.StartObject(19)

def Start(builder):
    DiplomaticClearance_IngestStart(builder)

def DiplomaticClearance_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DiplomaticClearance_IngestAddId(builder, id)

def DiplomaticClearance_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    DiplomaticClearance_IngestAddClassificationMarking(builder, classificationMarking)

def DiplomaticClearance_IngestAddIdMission(builder, idMission):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idMission), 0)

def AddIdMission(builder, idMission):
    DiplomaticClearance_IngestAddIdMission(builder, idMission)

def DiplomaticClearance_IngestAddExternalWorksheetId(builder, externalWorksheetId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(externalWorksheetId), 0)

def AddExternalWorksheetId(builder, externalWorksheetId):
    DiplomaticClearance_IngestAddExternalWorksheetId(builder, externalWorksheetId)

def DiplomaticClearance_IngestAddDipWorksheetName(builder, dipWorksheetName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dipWorksheetName), 0)

def AddDipWorksheetName(builder, dipWorksheetName):
    DiplomaticClearance_IngestAddDipWorksheetName(builder, dipWorksheetName)

def DiplomaticClearance_IngestAddFirstDepDate(builder, firstDepDate):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(firstDepDate), 0)

def AddFirstDepDate(builder, firstDepDate):
    DiplomaticClearance_IngestAddFirstDepDate(builder, firstDepDate)

def DiplomaticClearance_IngestAddDocDeadline(builder, docDeadline):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(docDeadline), 0)

def AddDocDeadline(builder, docDeadline):
    DiplomaticClearance_IngestAddDocDeadline(builder, docDeadline)

def DiplomaticClearance_IngestAddApacsId(builder, apacsId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(apacsId), 0)

def AddApacsId(builder, apacsId):
    DiplomaticClearance_IngestAddApacsId(builder, apacsId)

def DiplomaticClearance_IngestAddDiplomaticClearanceDetails(builder, diplomaticClearanceDetails):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(diplomaticClearanceDetails), 0)

def AddDiplomaticClearanceDetails(builder, diplomaticClearanceDetails):
    DiplomaticClearance_IngestAddDiplomaticClearanceDetails(builder, diplomaticClearanceDetails)

def DiplomaticClearance_IngestStartDiplomaticClearanceDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDiplomaticClearanceDetailsVector(builder, numElems):
    return DiplomaticClearance_IngestStartDiplomaticClearanceDetailsVector(builder, numElems)

def DiplomaticClearance_IngestAddDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarks):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(diplomaticClearanceRemarks), 0)

def AddDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarks):
    DiplomaticClearance_IngestAddDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarks)

def DiplomaticClearance_IngestStartDiplomaticClearanceRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDiplomaticClearanceRemarksVector(builder, numElems):
    return DiplomaticClearance_IngestStartDiplomaticClearanceRemarksVector(builder, numElems)

def DiplomaticClearance_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    DiplomaticClearance_IngestAddCreatedAt(builder, createdAt)

def DiplomaticClearance_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    DiplomaticClearance_IngestAddCreatedBy(builder, createdBy)

def DiplomaticClearance_IngestAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    DiplomaticClearance_IngestAddUpdatedAt(builder, updatedAt)

def DiplomaticClearance_IngestAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    DiplomaticClearance_IngestAddUpdatedBy(builder, updatedBy)

def DiplomaticClearance_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    DiplomaticClearance_IngestAddSourceDl(builder, sourceDl)

def DiplomaticClearance_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    DiplomaticClearance_IngestAddSource(builder, source)

def DiplomaticClearance_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    DiplomaticClearance_IngestAddOrigin(builder, origin)

def DiplomaticClearance_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    DiplomaticClearance_IngestAddOrigNetwork(builder, origNetwork)

def DiplomaticClearance_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(18, dataMode, 0)

def AddDataMode(builder, dataMode):
    DiplomaticClearance_IngestAddDataMode(builder, dataMode)

def DiplomaticClearance_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return DiplomaticClearance_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class DiplomaticClearance_IngestT(object):

    # DiplomaticClearance_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idMission = None  # type: str
        self.externalWorksheetId = None  # type: str
        self.dipWorksheetName = None  # type: str
        self.firstDepDate = None  # type: str
        self.docDeadline = None  # type: str
        self.apacsId = None  # type: str
        self.diplomaticClearanceDetails = None  # type: List[str]
        self.diplomaticClearanceRemarks = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diplomaticClearanceIngest = DiplomaticClearance_Ingest()
        diplomaticClearanceIngest.Init(buf, pos)
        return cls.InitFromObj(diplomaticClearanceIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diplomaticClearanceIngest):
        x = DiplomaticClearance_IngestT()
        x._UnPack(diplomaticClearanceIngest)
        return x

    # DiplomaticClearance_IngestT
    def _UnPack(self, diplomaticClearanceIngest):
        if diplomaticClearanceIngest is None:
            return
        self.id = diplomaticClearanceIngest.Id()
        self.classificationMarking = diplomaticClearanceIngest.ClassificationMarking()
        self.idMission = diplomaticClearanceIngest.IdMission()
        self.externalWorksheetId = diplomaticClearanceIngest.ExternalWorksheetId()
        self.dipWorksheetName = diplomaticClearanceIngest.DipWorksheetName()
        self.firstDepDate = diplomaticClearanceIngest.FirstDepDate()
        self.docDeadline = diplomaticClearanceIngest.DocDeadline()
        self.apacsId = diplomaticClearanceIngest.ApacsId()
        if not diplomaticClearanceIngest.DiplomaticClearanceDetailsIsNone():
            self.diplomaticClearanceDetails = []
            for i in range(diplomaticClearanceIngest.DiplomaticClearanceDetailsLength()):
                self.diplomaticClearanceDetails.append(diplomaticClearanceIngest.DiplomaticClearanceDetails(i))
        if not diplomaticClearanceIngest.DiplomaticClearanceRemarksIsNone():
            self.diplomaticClearanceRemarks = []
            for i in range(diplomaticClearanceIngest.DiplomaticClearanceRemarksLength()):
                self.diplomaticClearanceRemarks.append(diplomaticClearanceIngest.DiplomaticClearanceRemarks(i))
        self.createdAt = diplomaticClearanceIngest.CreatedAt()
        self.createdBy = diplomaticClearanceIngest.CreatedBy()
        self.updatedAt = diplomaticClearanceIngest.UpdatedAt()
        self.updatedBy = diplomaticClearanceIngest.UpdatedBy()
        self.sourceDl = diplomaticClearanceIngest.SourceDl()
        self.source = diplomaticClearanceIngest.Source()
        self.origin = diplomaticClearanceIngest.Origin()
        self.origNetwork = diplomaticClearanceIngest.OrigNetwork()
        self.dataMode = diplomaticClearanceIngest.DataMode()

    # DiplomaticClearance_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idMission is not None:
            idMission = builder.CreateString(self.idMission)
        if self.externalWorksheetId is not None:
            externalWorksheetId = builder.CreateString(self.externalWorksheetId)
        if self.dipWorksheetName is not None:
            dipWorksheetName = builder.CreateString(self.dipWorksheetName)
        if self.firstDepDate is not None:
            firstDepDate = builder.CreateString(self.firstDepDate)
        if self.docDeadline is not None:
            docDeadline = builder.CreateString(self.docDeadline)
        if self.apacsId is not None:
            apacsId = builder.CreateString(self.apacsId)
        if self.diplomaticClearanceDetails is not None:
            diplomaticClearanceDetailslist = []
            for i in range(len(self.diplomaticClearanceDetails)):
                diplomaticClearanceDetailslist.append(builder.CreateString(self.diplomaticClearanceDetails[i]))
            DiplomaticClearance_IngestStartDiplomaticClearanceDetailsVector(builder, len(self.diplomaticClearanceDetails))
            for i in reversed(range(len(self.diplomaticClearanceDetails))):
                builder.PrependUOffsetTRelative(diplomaticClearanceDetailslist[i])
            diplomaticClearanceDetails = builder.EndVector()
        if self.diplomaticClearanceRemarks is not None:
            diplomaticClearanceRemarkslist = []
            for i in range(len(self.diplomaticClearanceRemarks)):
                diplomaticClearanceRemarkslist.append(builder.CreateString(self.diplomaticClearanceRemarks[i]))
            DiplomaticClearance_IngestStartDiplomaticClearanceRemarksVector(builder, len(self.diplomaticClearanceRemarks))
            for i in reversed(range(len(self.diplomaticClearanceRemarks))):
                builder.PrependUOffsetTRelative(diplomaticClearanceRemarkslist[i])
            diplomaticClearanceRemarks = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        DiplomaticClearance_IngestStart(builder)
        if self.id is not None:
            DiplomaticClearance_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            DiplomaticClearance_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idMission is not None:
            DiplomaticClearance_IngestAddIdMission(builder, idMission)
        if self.externalWorksheetId is not None:
            DiplomaticClearance_IngestAddExternalWorksheetId(builder, externalWorksheetId)
        if self.dipWorksheetName is not None:
            DiplomaticClearance_IngestAddDipWorksheetName(builder, dipWorksheetName)
        if self.firstDepDate is not None:
            DiplomaticClearance_IngestAddFirstDepDate(builder, firstDepDate)
        if self.docDeadline is not None:
            DiplomaticClearance_IngestAddDocDeadline(builder, docDeadline)
        if self.apacsId is not None:
            DiplomaticClearance_IngestAddApacsId(builder, apacsId)
        if self.diplomaticClearanceDetails is not None:
            DiplomaticClearance_IngestAddDiplomaticClearanceDetails(builder, diplomaticClearanceDetails)
        if self.diplomaticClearanceRemarks is not None:
            DiplomaticClearance_IngestAddDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarks)
        if self.createdAt is not None:
            DiplomaticClearance_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            DiplomaticClearance_IngestAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            DiplomaticClearance_IngestAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            DiplomaticClearance_IngestAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            DiplomaticClearance_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            DiplomaticClearance_IngestAddSource(builder, source)
        if self.origin is not None:
            DiplomaticClearance_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            DiplomaticClearance_IngestAddOrigNetwork(builder, origNetwork)
        DiplomaticClearance_IngestAddDataMode(builder, self.dataMode)
        diplomaticClearanceIngest = DiplomaticClearance_IngestEnd(builder)
        return diplomaticClearanceIngest
