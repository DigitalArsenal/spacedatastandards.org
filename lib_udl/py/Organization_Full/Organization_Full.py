# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An organization such as a corporation, manufacturer, consortium, government, etc. An organization may have parent and child organizations as well as link to a former organization if this org previously existed as another organization.
class Organization_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Organization_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrganization_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Organization_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x52\x47\x41", size_prefixed=size_prefixed)

    # Organization_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ORGANIZATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Organization_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Organization_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization name.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 128
    # Organization_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC).
    # Example: /// Example: GOVERNMENT
    # Constraints: Minimum length = 1, Maximum length = 128
    # Organization_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subtype or category of the organization (e.g. Private company, stock market quoted company, subsidiary, goverment department/agency, etc).
    # Example: /// Example: Private company
    # Constraints: Minimum length = 0, Maximum length = 128
    # Organization_Full
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional externally provided identifier for this row.
    # Example: /// Example: EXTERNAL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Organization_Full
    def ExternalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization description.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 0, Maximum length = 256
    # Organization_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country of the physical location of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code. However, it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Organization_Full
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country of registration or ownership of the organization. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Organization_Full
    def Nationality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating if this organization is currently active.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Organization_Full
    def Active(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Source of the data.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Organization_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Organization_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Organization_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Organization_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Organization_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Organization_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Organization_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only collection of additional OrganizationDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/organizationdetails operations.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Organization_Full
    def OrganizationDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Organization_Full
    def OrganizationDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Organization_Full
    def OrganizationDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Organization_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Organization_FullStart(builder):
    builder.StartObject(19)

def Start(builder):
    Organization_FullStart(builder)

def Organization_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Organization_FullAddId(builder, id)

def Organization_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Organization_FullAddClassificationMarking(builder, classificationMarking)

def Organization_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Organization_FullAddName(builder, name)

def Organization_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Organization_FullAddType(builder, type)

def Organization_FullAddCategory(builder, category):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)

def AddCategory(builder, category):
    Organization_FullAddCategory(builder, category)

def Organization_FullAddExternalId(builder, externalId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(externalId), 0)

def AddExternalId(builder, externalId):
    Organization_FullAddExternalId(builder, externalId)

def Organization_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    Organization_FullAddDescription(builder, description)

def Organization_FullAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Organization_FullAddCountryCode(builder, countryCode)

def Organization_FullAddNationality(builder, nationality):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(nationality), 0)

def AddNationality(builder, nationality):
    Organization_FullAddNationality(builder, nationality)

def Organization_FullAddActive(builder, active):
    builder.PrependBoolSlot(9, active, 0)

def AddActive(builder, active):
    Organization_FullAddActive(builder, active)

def Organization_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Organization_FullAddSource(builder, source)

def Organization_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Organization_FullAddOrigin(builder, origin)

def Organization_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(12, dataMode, 0)

def AddDataMode(builder, dataMode):
    Organization_FullAddDataMode(builder, dataMode)

def Organization_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Organization_FullAddCreatedAt(builder, createdAt)

def Organization_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Organization_FullAddCreatedBy(builder, createdBy)

def Organization_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Organization_FullAddUpdatedAt(builder, updatedAt)

def Organization_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Organization_FullAddUpdatedBy(builder, updatedBy)

def Organization_FullAddOrganizationDetails(builder, organizationDetails):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(organizationDetails), 0)

def AddOrganizationDetails(builder, organizationDetails):
    Organization_FullAddOrganizationDetails(builder, organizationDetails)

def Organization_FullStartOrganizationDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOrganizationDetailsVector(builder, numElems):
    return Organization_FullStartOrganizationDetailsVector(builder, numElems)

def Organization_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Organization_FullAddOrigNetwork(builder, origNetwork)

def Organization_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Organization_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Organization_FullT(object):

    # Organization_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.category = None  # type: str
        self.externalId = None  # type: str
        self.description = None  # type: str
        self.countryCode = None  # type: str
        self.nationality = None  # type: str
        self.active = False  # type: bool
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.organizationDetails = None  # type: List[str]
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        organizationFull = Organization_Full()
        organizationFull.Init(buf, pos)
        return cls.InitFromObj(organizationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, organizationFull):
        x = Organization_FullT()
        x._UnPack(organizationFull)
        return x

    # Organization_FullT
    def _UnPack(self, organizationFull):
        if organizationFull is None:
            return
        self.id = organizationFull.Id()
        self.classificationMarking = organizationFull.ClassificationMarking()
        self.name = organizationFull.Name()
        self.type = organizationFull.Type()
        self.category = organizationFull.Category()
        self.externalId = organizationFull.ExternalId()
        self.description = organizationFull.Description()
        self.countryCode = organizationFull.CountryCode()
        self.nationality = organizationFull.Nationality()
        self.active = organizationFull.Active()
        self.source = organizationFull.Source()
        self.origin = organizationFull.Origin()
        self.dataMode = organizationFull.DataMode()
        self.createdAt = organizationFull.CreatedAt()
        self.createdBy = organizationFull.CreatedBy()
        self.updatedAt = organizationFull.UpdatedAt()
        self.updatedBy = organizationFull.UpdatedBy()
        if not organizationFull.OrganizationDetailsIsNone():
            self.organizationDetails = []
            for i in range(organizationFull.OrganizationDetailsLength()):
                self.organizationDetails.append(organizationFull.OrganizationDetails(i))
        self.origNetwork = organizationFull.OrigNetwork()

    # Organization_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.category is not None:
            category = builder.CreateString(self.category)
        if self.externalId is not None:
            externalId = builder.CreateString(self.externalId)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.nationality is not None:
            nationality = builder.CreateString(self.nationality)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.organizationDetails is not None:
            organizationDetailslist = []
            for i in range(len(self.organizationDetails)):
                organizationDetailslist.append(builder.CreateString(self.organizationDetails[i]))
            Organization_FullStartOrganizationDetailsVector(builder, len(self.organizationDetails))
            for i in reversed(range(len(self.organizationDetails))):
                builder.PrependUOffsetTRelative(organizationDetailslist[i])
            organizationDetails = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Organization_FullStart(builder)
        if self.id is not None:
            Organization_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Organization_FullAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            Organization_FullAddName(builder, name)
        if self.type is not None:
            Organization_FullAddType(builder, type)
        if self.category is not None:
            Organization_FullAddCategory(builder, category)
        if self.externalId is not None:
            Organization_FullAddExternalId(builder, externalId)
        if self.description is not None:
            Organization_FullAddDescription(builder, description)
        if self.countryCode is not None:
            Organization_FullAddCountryCode(builder, countryCode)
        if self.nationality is not None:
            Organization_FullAddNationality(builder, nationality)
        Organization_FullAddActive(builder, self.active)
        if self.source is not None:
            Organization_FullAddSource(builder, source)
        if self.origin is not None:
            Organization_FullAddOrigin(builder, origin)
        Organization_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Organization_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Organization_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Organization_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Organization_FullAddUpdatedBy(builder, updatedBy)
        if self.organizationDetails is not None:
            Organization_FullAddOrganizationDetails(builder, organizationDetails)
        if self.origNetwork is not None:
            Organization_FullAddOrigNetwork(builder, origNetwork)
        organizationFull = Organization_FullEnd(builder)
        return organizationFull
