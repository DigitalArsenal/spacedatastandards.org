# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
class DiffOfArrival_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiffOfArrival_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiffOfArrival_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DiffOfArrival_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x49\x46\x46", size_prefixed=size_prefixed)

    # DiffOfArrival_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: DIFFOFARRIVAL-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # DiffOfArrival_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # DiffOfArrival_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor ID of the primary/1st sensor used for this measurement.
    # Example: /// Example: SENSOR1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Abridged
    def IdSensor1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor ID of the secondary/2nd sensor used for this measurement.
    # Example: /// Example: SENSOR2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Abridged
    def IdSensor2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog number of the target on-orbit object.
    # Example: /// Example: 25544
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Abridged
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR1-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def OrigSensorId1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR2-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def OrigSensorId2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The signal arrival delay relative to sensor 1 in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Sensor1Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The signal arrival delay relative to sensor 2 in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Sensor2Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 120.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Sen2lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Sen2lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Sen2alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Center frequency of the collect in Hz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bandwidth of the signal in Hz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def DeltaRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in delta range, in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def DeltaRangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def DeltaRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the delta range rate, in km/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def DeltaRangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Tdoa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def TdoaUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def Fdoa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def FdoaUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    # Example: /// Example: SURVEY
    # Constraints: Minimum length = 0, Maximum length = 32
    # DiffOfArrival_Abridged
    def CollectionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # DiffOfArrival_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # DiffOfArrival_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # DiffOfArrival_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # DiffOfArrival_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Example descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # DiffOfArrival_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiffOfArrival_AbridgedStart(builder):
    builder.StartObject(41)

def Start(builder):
    DiffOfArrival_AbridgedStart(builder)

def DiffOfArrival_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DiffOfArrival_AbridgedAddId(builder, id)

def DiffOfArrival_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    DiffOfArrival_AbridgedAddClassificationMarking(builder, classificationMarking)

def DiffOfArrival_AbridgedAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    DiffOfArrival_AbridgedAddObTime(builder, obTime)

def DiffOfArrival_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    DiffOfArrival_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def DiffOfArrival_AbridgedAddIdSensor1(builder, idSensor1):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor1), 0)

def AddIdSensor1(builder, idSensor1):
    DiffOfArrival_AbridgedAddIdSensor1(builder, idSensor1)

def DiffOfArrival_AbridgedAddIdSensor2(builder, idSensor2):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor2), 0)

def AddIdSensor2(builder, idSensor2):
    DiffOfArrival_AbridgedAddIdSensor2(builder, idSensor2)

def DiffOfArrival_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    DiffOfArrival_AbridgedAddSatNo(builder, satNo)

def DiffOfArrival_AbridgedAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    DiffOfArrival_AbridgedAddTaskId(builder, taskId)

def DiffOfArrival_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    DiffOfArrival_AbridgedAddOrigObjectId(builder, origObjectId)

def DiffOfArrival_AbridgedAddOrigSensorId1(builder, origSensorId1):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId1), 0)

def AddOrigSensorId1(builder, origSensorId1):
    DiffOfArrival_AbridgedAddOrigSensorId1(builder, origSensorId1)

def DiffOfArrival_AbridgedAddOrigSensorId2(builder, origSensorId2):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId2), 0)

def AddOrigSensorId2(builder, origSensorId2):
    DiffOfArrival_AbridgedAddOrigSensorId2(builder, origSensorId2)

def DiffOfArrival_AbridgedAddUct(builder, uct):
    builder.PrependBoolSlot(11, uct, 0)

def AddUct(builder, uct):
    DiffOfArrival_AbridgedAddUct(builder, uct)

def DiffOfArrival_AbridgedAddSensor1Delay(builder, sensor1Delay):
    builder.PrependFloat64Slot(12, sensor1Delay, 0.0)

def AddSensor1Delay(builder, sensor1Delay):
    DiffOfArrival_AbridgedAddSensor1Delay(builder, sensor1Delay)

def DiffOfArrival_AbridgedAddSensor2Delay(builder, sensor2Delay):
    builder.PrependFloat64Slot(13, sensor2Delay, 0.0)

def AddSensor2Delay(builder, sensor2Delay):
    DiffOfArrival_AbridgedAddSensor2Delay(builder, sensor2Delay)

def DiffOfArrival_AbridgedAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(14, senlat, 0.0)

def AddSenlat(builder, senlat):
    DiffOfArrival_AbridgedAddSenlat(builder, senlat)

def DiffOfArrival_AbridgedAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(15, senlon, 0.0)

def AddSenlon(builder, senlon):
    DiffOfArrival_AbridgedAddSenlon(builder, senlon)

def DiffOfArrival_AbridgedAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(16, senalt, 0.0)

def AddSenalt(builder, senalt):
    DiffOfArrival_AbridgedAddSenalt(builder, senalt)

def DiffOfArrival_AbridgedAddSen2lat(builder, sen2lat):
    builder.PrependFloat64Slot(17, sen2lat, 0.0)

def AddSen2lat(builder, sen2lat):
    DiffOfArrival_AbridgedAddSen2lat(builder, sen2lat)

def DiffOfArrival_AbridgedAddSen2lon(builder, sen2lon):
    builder.PrependFloat64Slot(18, sen2lon, 0.0)

def AddSen2lon(builder, sen2lon):
    DiffOfArrival_AbridgedAddSen2lon(builder, sen2lon)

def DiffOfArrival_AbridgedAddSen2alt(builder, sen2alt):
    builder.PrependFloat64Slot(19, sen2alt, 0.0)

def AddSen2alt(builder, sen2alt):
    DiffOfArrival_AbridgedAddSen2alt(builder, sen2alt)

def DiffOfArrival_AbridgedAddFrequency(builder, frequency):
    builder.PrependFloat64Slot(20, frequency, 0.0)

def AddFrequency(builder, frequency):
    DiffOfArrival_AbridgedAddFrequency(builder, frequency)

def DiffOfArrival_AbridgedAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(21, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    DiffOfArrival_AbridgedAddBandwidth(builder, bandwidth)

def DiffOfArrival_AbridgedAddDeltaRange(builder, deltaRange):
    builder.PrependFloat64Slot(22, deltaRange, 0.0)

def AddDeltaRange(builder, deltaRange):
    DiffOfArrival_AbridgedAddDeltaRange(builder, deltaRange)

def DiffOfArrival_AbridgedAddDeltaRangeUnc(builder, deltaRangeUnc):
    builder.PrependFloat64Slot(23, deltaRangeUnc, 0.0)

def AddDeltaRangeUnc(builder, deltaRangeUnc):
    DiffOfArrival_AbridgedAddDeltaRangeUnc(builder, deltaRangeUnc)

def DiffOfArrival_AbridgedAddDeltaRangeRate(builder, deltaRangeRate):
    builder.PrependFloat64Slot(24, deltaRangeRate, 0.0)

def AddDeltaRangeRate(builder, deltaRangeRate):
    DiffOfArrival_AbridgedAddDeltaRangeRate(builder, deltaRangeRate)

def DiffOfArrival_AbridgedAddDeltaRangeRateUnc(builder, deltaRangeRateUnc):
    builder.PrependFloat64Slot(25, deltaRangeRateUnc, 0.0)

def AddDeltaRangeRateUnc(builder, deltaRangeRateUnc):
    DiffOfArrival_AbridgedAddDeltaRangeRateUnc(builder, deltaRangeRateUnc)

def DiffOfArrival_AbridgedAddSnr(builder, snr):
    builder.PrependFloat64Slot(26, snr, 0.0)

def AddSnr(builder, snr):
    DiffOfArrival_AbridgedAddSnr(builder, snr)

def DiffOfArrival_AbridgedAddTdoa(builder, tdoa):
    builder.PrependFloat64Slot(27, tdoa, 0.0)

def AddTdoa(builder, tdoa):
    DiffOfArrival_AbridgedAddTdoa(builder, tdoa)

def DiffOfArrival_AbridgedAddTdoaUnc(builder, tdoaUnc):
    builder.PrependFloat64Slot(28, tdoaUnc, 0.0)

def AddTdoaUnc(builder, tdoaUnc):
    DiffOfArrival_AbridgedAddTdoaUnc(builder, tdoaUnc)

def DiffOfArrival_AbridgedAddFdoa(builder, fdoa):
    builder.PrependFloat64Slot(29, fdoa, 0.0)

def AddFdoa(builder, fdoa):
    DiffOfArrival_AbridgedAddFdoa(builder, fdoa)

def DiffOfArrival_AbridgedAddFdoaUnc(builder, fdoaUnc):
    builder.PrependFloat64Slot(30, fdoaUnc, 0.0)

def AddFdoaUnc(builder, fdoaUnc):
    DiffOfArrival_AbridgedAddFdoaUnc(builder, fdoaUnc)

def DiffOfArrival_AbridgedAddCollectionMode(builder, collectionMode):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(collectionMode), 0)

def AddCollectionMode(builder, collectionMode):
    DiffOfArrival_AbridgedAddCollectionMode(builder, collectionMode)

def DiffOfArrival_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    DiffOfArrival_AbridgedAddSource(builder, source)

def DiffOfArrival_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(33, dataMode, 0)

def AddDataMode(builder, dataMode):
    DiffOfArrival_AbridgedAddDataMode(builder, dataMode)

def DiffOfArrival_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    DiffOfArrival_AbridgedAddOrigin(builder, origin)

def DiffOfArrival_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    DiffOfArrival_AbridgedAddCreatedAt(builder, createdAt)

def DiffOfArrival_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    DiffOfArrival_AbridgedAddCreatedBy(builder, createdBy)

def DiffOfArrival_AbridgedAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    DiffOfArrival_AbridgedAddDescriptor(builder, descriptor)

def DiffOfArrival_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    DiffOfArrival_AbridgedAddTransactionId(builder, transactionId)

def DiffOfArrival_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    DiffOfArrival_AbridgedAddOrigNetwork(builder, origNetwork)

def DiffOfArrival_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    DiffOfArrival_AbridgedAddSourceDl(builder, sourceDl)

def DiffOfArrival_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return DiffOfArrival_AbridgedEnd(builder)


class DiffOfArrival_AbridgedT(object):

    # DiffOfArrival_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSensor1 = None  # type: str
        self.idSensor2 = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId1 = None  # type: str
        self.origSensorId2 = None  # type: str
        self.uct = False  # type: bool
        self.sensor1Delay = 0.0  # type: float
        self.sensor2Delay = 0.0  # type: float
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.sen2lat = 0.0  # type: float
        self.sen2lon = 0.0  # type: float
        self.sen2alt = 0.0  # type: float
        self.frequency = 0.0  # type: float
        self.bandwidth = 0.0  # type: float
        self.deltaRange = 0.0  # type: float
        self.deltaRangeUnc = 0.0  # type: float
        self.deltaRangeRate = 0.0  # type: float
        self.deltaRangeRateUnc = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.tdoa = 0.0  # type: float
        self.tdoaUnc = 0.0  # type: float
        self.fdoa = 0.0  # type: float
        self.fdoaUnc = 0.0  # type: float
        self.collectionMode = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.origin = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.descriptor = None  # type: str
        self.transactionId = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diffOfArrivalAbridged = DiffOfArrival_Abridged()
        diffOfArrivalAbridged.Init(buf, pos)
        return cls.InitFromObj(diffOfArrivalAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diffOfArrivalAbridged):
        x = DiffOfArrival_AbridgedT()
        x._UnPack(diffOfArrivalAbridged)
        return x

    # DiffOfArrival_AbridgedT
    def _UnPack(self, diffOfArrivalAbridged):
        if diffOfArrivalAbridged is None:
            return
        self.id = diffOfArrivalAbridged.Id()
        self.classificationMarking = diffOfArrivalAbridged.ClassificationMarking()
        self.obTime = diffOfArrivalAbridged.ObTime()
        self.idOnOrbit = diffOfArrivalAbridged.IdOnOrbit()
        self.idSensor1 = diffOfArrivalAbridged.IdSensor1()
        self.idSensor2 = diffOfArrivalAbridged.IdSensor2()
        self.satNo = diffOfArrivalAbridged.SatNo()
        self.taskId = diffOfArrivalAbridged.TaskId()
        self.origObjectId = diffOfArrivalAbridged.OrigObjectId()
        self.origSensorId1 = diffOfArrivalAbridged.OrigSensorId1()
        self.origSensorId2 = diffOfArrivalAbridged.OrigSensorId2()
        self.uct = diffOfArrivalAbridged.Uct()
        self.sensor1Delay = diffOfArrivalAbridged.Sensor1Delay()
        self.sensor2Delay = diffOfArrivalAbridged.Sensor2Delay()
        self.senlat = diffOfArrivalAbridged.Senlat()
        self.senlon = diffOfArrivalAbridged.Senlon()
        self.senalt = diffOfArrivalAbridged.Senalt()
        self.sen2lat = diffOfArrivalAbridged.Sen2lat()
        self.sen2lon = diffOfArrivalAbridged.Sen2lon()
        self.sen2alt = diffOfArrivalAbridged.Sen2alt()
        self.frequency = diffOfArrivalAbridged.Frequency()
        self.bandwidth = diffOfArrivalAbridged.Bandwidth()
        self.deltaRange = diffOfArrivalAbridged.DeltaRange()
        self.deltaRangeUnc = diffOfArrivalAbridged.DeltaRangeUnc()
        self.deltaRangeRate = diffOfArrivalAbridged.DeltaRangeRate()
        self.deltaRangeRateUnc = diffOfArrivalAbridged.DeltaRangeRateUnc()
        self.snr = diffOfArrivalAbridged.Snr()
        self.tdoa = diffOfArrivalAbridged.Tdoa()
        self.tdoaUnc = diffOfArrivalAbridged.TdoaUnc()
        self.fdoa = diffOfArrivalAbridged.Fdoa()
        self.fdoaUnc = diffOfArrivalAbridged.FdoaUnc()
        self.collectionMode = diffOfArrivalAbridged.CollectionMode()
        self.source = diffOfArrivalAbridged.Source()
        self.dataMode = diffOfArrivalAbridged.DataMode()
        self.origin = diffOfArrivalAbridged.Origin()
        self.createdAt = diffOfArrivalAbridged.CreatedAt()
        self.createdBy = diffOfArrivalAbridged.CreatedBy()
        self.descriptor = diffOfArrivalAbridged.Descriptor()
        self.transactionId = diffOfArrivalAbridged.TransactionId()
        self.origNetwork = diffOfArrivalAbridged.OrigNetwork()
        self.sourceDl = diffOfArrivalAbridged.SourceDl()

    # DiffOfArrival_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor1 is not None:
            idSensor1 = builder.CreateString(self.idSensor1)
        if self.idSensor2 is not None:
            idSensor2 = builder.CreateString(self.idSensor2)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId1 is not None:
            origSensorId1 = builder.CreateString(self.origSensorId1)
        if self.origSensorId2 is not None:
            origSensorId2 = builder.CreateString(self.origSensorId2)
        if self.collectionMode is not None:
            collectionMode = builder.CreateString(self.collectionMode)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        DiffOfArrival_AbridgedStart(builder)
        if self.id is not None:
            DiffOfArrival_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            DiffOfArrival_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            DiffOfArrival_AbridgedAddObTime(builder, obTime)
        if self.idOnOrbit is not None:
            DiffOfArrival_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor1 is not None:
            DiffOfArrival_AbridgedAddIdSensor1(builder, idSensor1)
        if self.idSensor2 is not None:
            DiffOfArrival_AbridgedAddIdSensor2(builder, idSensor2)
        DiffOfArrival_AbridgedAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            DiffOfArrival_AbridgedAddTaskId(builder, taskId)
        if self.origObjectId is not None:
            DiffOfArrival_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.origSensorId1 is not None:
            DiffOfArrival_AbridgedAddOrigSensorId1(builder, origSensorId1)
        if self.origSensorId2 is not None:
            DiffOfArrival_AbridgedAddOrigSensorId2(builder, origSensorId2)
        DiffOfArrival_AbridgedAddUct(builder, self.uct)
        DiffOfArrival_AbridgedAddSensor1Delay(builder, self.sensor1Delay)
        DiffOfArrival_AbridgedAddSensor2Delay(builder, self.sensor2Delay)
        DiffOfArrival_AbridgedAddSenlat(builder, self.senlat)
        DiffOfArrival_AbridgedAddSenlon(builder, self.senlon)
        DiffOfArrival_AbridgedAddSenalt(builder, self.senalt)
        DiffOfArrival_AbridgedAddSen2lat(builder, self.sen2lat)
        DiffOfArrival_AbridgedAddSen2lon(builder, self.sen2lon)
        DiffOfArrival_AbridgedAddSen2alt(builder, self.sen2alt)
        DiffOfArrival_AbridgedAddFrequency(builder, self.frequency)
        DiffOfArrival_AbridgedAddBandwidth(builder, self.bandwidth)
        DiffOfArrival_AbridgedAddDeltaRange(builder, self.deltaRange)
        DiffOfArrival_AbridgedAddDeltaRangeUnc(builder, self.deltaRangeUnc)
        DiffOfArrival_AbridgedAddDeltaRangeRate(builder, self.deltaRangeRate)
        DiffOfArrival_AbridgedAddDeltaRangeRateUnc(builder, self.deltaRangeRateUnc)
        DiffOfArrival_AbridgedAddSnr(builder, self.snr)
        DiffOfArrival_AbridgedAddTdoa(builder, self.tdoa)
        DiffOfArrival_AbridgedAddTdoaUnc(builder, self.tdoaUnc)
        DiffOfArrival_AbridgedAddFdoa(builder, self.fdoa)
        DiffOfArrival_AbridgedAddFdoaUnc(builder, self.fdoaUnc)
        if self.collectionMode is not None:
            DiffOfArrival_AbridgedAddCollectionMode(builder, collectionMode)
        if self.source is not None:
            DiffOfArrival_AbridgedAddSource(builder, source)
        DiffOfArrival_AbridgedAddDataMode(builder, self.dataMode)
        if self.origin is not None:
            DiffOfArrival_AbridgedAddOrigin(builder, origin)
        if self.createdAt is not None:
            DiffOfArrival_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            DiffOfArrival_AbridgedAddCreatedBy(builder, createdBy)
        if self.descriptor is not None:
            DiffOfArrival_AbridgedAddDescriptor(builder, descriptor)
        if self.transactionId is not None:
            DiffOfArrival_AbridgedAddTransactionId(builder, transactionId)
        if self.origNetwork is not None:
            DiffOfArrival_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            DiffOfArrival_AbridgedAddSourceDl(builder, sourceDl)
        diffOfArrivalAbridged = DiffOfArrival_AbridgedEnd(builder)
        return diffOfArrivalAbridged
