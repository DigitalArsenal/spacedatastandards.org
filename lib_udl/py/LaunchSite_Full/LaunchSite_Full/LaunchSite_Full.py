# automatically generated by the FlatBuffers compiler, do not modify

# namespace: LaunchSite_Full

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Model representation of known launch sites.
class LaunchSite_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchSite_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchSite_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LaunchSite_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: LAUNCHSITE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchSite_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchSite_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Launch site code.
    # Example: SAN MARCO
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSite_Full
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Abbreviated short name for the launch site.
    # Example: SNMLP
    # Constraints: Minimum length = 0, Maximum length = 16
    # LaunchSite_Full
    def ShortCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate launch site code.
    # Example: 35
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSite_Full
    def AltCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent site associated with this launch site.
    # Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchSite_Full
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Launch site name.
    # Example: Example launch site name
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSite_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchSite_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSite_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchSite_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSite_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchSite_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchSite_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchSite_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
    # Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchSite_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Read-only collection of additional LaunchSiteDetails by various sources for this launch site, ignored on create/update. These details must be created separately via the /udl/launchsitedetails operations.
    # Example: No example provided.
    # Constraints: No constraints specified.
    # LaunchSite_Full
    def LaunchSiteDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LaunchSite_Full
    def LaunchSiteDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LaunchSite_Full
    def LaunchSiteDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def LaunchSite_FullStart(builder):
    builder.StartObject(16)

def Start(builder):
    LaunchSite_FullStart(builder)

def LaunchSite_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchSite_FullAddId(builder, id)

def LaunchSite_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchSite_FullAddClassificationMarking(builder, classificationMarking)

def LaunchSite_FullAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def AddCode(builder, code):
    LaunchSite_FullAddCode(builder, code)

def LaunchSite_FullAddShortCode(builder, shortCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shortCode), 0)

def AddShortCode(builder, shortCode):
    LaunchSite_FullAddShortCode(builder, shortCode)

def LaunchSite_FullAddAltCode(builder, altCode):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(altCode), 0)

def AddAltCode(builder, altCode):
    LaunchSite_FullAddAltCode(builder, altCode)

def LaunchSite_FullAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    LaunchSite_FullAddIdSite(builder, idSite)

def LaunchSite_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    LaunchSite_FullAddName(builder, name)

def LaunchSite_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchSite_FullAddCreatedAt(builder, createdAt)

def LaunchSite_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchSite_FullAddCreatedBy(builder, createdBy)

def LaunchSite_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    LaunchSite_FullAddUpdatedAt(builder, updatedAt)

def LaunchSite_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    LaunchSite_FullAddUpdatedBy(builder, updatedBy)

def LaunchSite_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchSite_FullAddSource(builder, source)

def LaunchSite_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchSite_FullAddOrigin(builder, origin)

def LaunchSite_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchSite_FullAddOrigNetwork(builder, origNetwork)

def LaunchSite_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(14, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchSite_FullAddDataMode(builder, dataMode)

def LaunchSite_FullAddLaunchSiteDetails(builder, launchSiteDetails):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(launchSiteDetails), 0)

def AddLaunchSiteDetails(builder, launchSiteDetails):
    LaunchSite_FullAddLaunchSiteDetails(builder, launchSiteDetails)

def LaunchSite_FullStartLaunchSiteDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLaunchSiteDetailsVector(builder, numElems):
    return LaunchSite_FullStartLaunchSiteDetailsVector(builder, numElems)

def LaunchSite_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchSite_FullEnd(builder)

try:
    from typing import List
except:
    pass

class LaunchSite_FullT(object):

    # LaunchSite_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.code = None  # type: str
        self.shortCode = None  # type: str
        self.altCode = None  # type: str
        self.idSite = None  # type: str
        self.name = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.launchSiteDetails = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchSiteFull = LaunchSite_Full()
        launchSiteFull.Init(buf, pos)
        return cls.InitFromObj(launchSiteFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchSiteFull):
        x = LaunchSite_FullT()
        x._UnPack(launchSiteFull)
        return x

    # LaunchSite_FullT
    def _UnPack(self, launchSiteFull):
        if launchSiteFull is None:
            return
        self.id = launchSiteFull.Id()
        self.classificationMarking = launchSiteFull.ClassificationMarking()
        self.code = launchSiteFull.Code()
        self.shortCode = launchSiteFull.ShortCode()
        self.altCode = launchSiteFull.AltCode()
        self.idSite = launchSiteFull.IdSite()
        self.name = launchSiteFull.Name()
        self.createdAt = launchSiteFull.CreatedAt()
        self.createdBy = launchSiteFull.CreatedBy()
        self.updatedAt = launchSiteFull.UpdatedAt()
        self.updatedBy = launchSiteFull.UpdatedBy()
        self.source = launchSiteFull.Source()
        self.origin = launchSiteFull.Origin()
        self.origNetwork = launchSiteFull.OrigNetwork()
        self.dataMode = launchSiteFull.DataMode()
        if not launchSiteFull.LaunchSiteDetailsIsNone():
            self.launchSiteDetails = []
            for i in range(launchSiteFull.LaunchSiteDetailsLength()):
                self.launchSiteDetails.append(launchSiteFull.LaunchSiteDetails(i))

    # LaunchSite_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.code is not None:
            code = builder.CreateString(self.code)
        if self.shortCode is not None:
            shortCode = builder.CreateString(self.shortCode)
        if self.altCode is not None:
            altCode = builder.CreateString(self.altCode)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.launchSiteDetails is not None:
            launchSiteDetailslist = []
            for i in range(len(self.launchSiteDetails)):
                launchSiteDetailslist.append(builder.CreateString(self.launchSiteDetails[i]))
            LaunchSite_FullStartLaunchSiteDetailsVector(builder, len(self.launchSiteDetails))
            for i in reversed(range(len(self.launchSiteDetails))):
                builder.PrependUOffsetTRelative(launchSiteDetailslist[i])
            launchSiteDetails = builder.EndVector()
        LaunchSite_FullStart(builder)
        if self.id is not None:
            LaunchSite_FullAddId(builder, id)
        if self.classificationMarking is not None:
            LaunchSite_FullAddClassificationMarking(builder, classificationMarking)
        if self.code is not None:
            LaunchSite_FullAddCode(builder, code)
        if self.shortCode is not None:
            LaunchSite_FullAddShortCode(builder, shortCode)
        if self.altCode is not None:
            LaunchSite_FullAddAltCode(builder, altCode)
        if self.idSite is not None:
            LaunchSite_FullAddIdSite(builder, idSite)
        if self.name is not None:
            LaunchSite_FullAddName(builder, name)
        if self.createdAt is not None:
            LaunchSite_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchSite_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            LaunchSite_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            LaunchSite_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            LaunchSite_FullAddSource(builder, source)
        if self.origin is not None:
            LaunchSite_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            LaunchSite_FullAddOrigNetwork(builder, origNetwork)
        LaunchSite_FullAddDataMode(builder, self.dataMode)
        if self.launchSiteDetails is not None:
            LaunchSite_FullAddLaunchSiteDetails(builder, launchSiteDetails)
        launchSiteFull = LaunchSite_FullEnd(builder)
        return launchSiteFull
