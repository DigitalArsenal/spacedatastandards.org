# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
class LaunchVehicleDetails_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchVehicleDetails_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchVehicleDetails_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LaunchVehicleDetails_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x41\x55\x4E", size_prefixed=size_prefixed)

    # LaunchVehicleDetails_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LAUNCHVEHICLEDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchVehicleDetails_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent launch vehicle record.
    # Example: /// Example: LAUNCHVEHICLE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchVehicleDetails_Ingest
    def IdLaunchVehicle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchVehicleDetails_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle variant.
    # Example: /// Example: Example-variant
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Variant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle minor variant.
    # Example: /// Example: Example-minor-variant
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def MinorVariant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle category.
    # Example: /// Example: Example-category
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the organization that manufactures the launch vehicle.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchVehicleDetails_Ingest
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle launch prefix.
    # Example: /// Example: AX011
    # Constraints: Minimum length = 0, Maximum length = 8
    # LaunchVehicleDetails_Ingest
    def LaunchPrefix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle family.
    # Example: /// Example: Example-family
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Family(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Propellant type.
    # Example: /// Example: Nitrogen
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Propellant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Oxidizer type.
    # Example: /// Example: Bromine
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Oxidizer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle length in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle diameter in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def Diameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle total mass at launch time in kg (including all boosters).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def LaunchMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum vehicle payload mass to GEO orbit in kg.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GeoPayloadMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Max vehicle payload mass to Geo-Transfer Orbit in kg.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoPayloadMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Max vehicle payload mass to LEO orbit in kg.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def LeoPayloadMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Max vehicle payload mass to Sun-Synchronous Orbit in kg.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def SsoPayloadMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle fairing length in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def FairingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Name of the fairing.
    # Example: /// Example: Example-fairing-name
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def FairingName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle fairing maximum external diameter in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def FairingExternalDiameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle fairing maximum internal diameter in meters.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def FairingInternalDiameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle fairing mass in kg.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def FairingMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Fairing material.
    # Example: /// Example: Example-fairing-material
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def FairingMaterial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Vehicle maximum acceleration load in g.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxAccelLoad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle maximum payload lateral frequency in Hz.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxPayloadFreqLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle maximum payload longitudinal frequency in Hz.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxPayloadFreqLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle maximum acoustic level in dB.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxAcousticLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle maximum acoustic level range in Hz.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxAcousticLevelRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle overall sound pressure level in dB.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def SoundPressureLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle maximum flight shock force in g.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxFlightShockForce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle maximum flight shock frequency in Hz.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxFlightShockFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Vehicle fairing maximum pressure change in kPa/sec.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def MaxFairingPressureChange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle estimated launch price in US dollars.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def EstLaunchPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle typical estimated launch price in US dollars.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def EstLaunchPriceTypical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoInj3SigAccuracyApogeeTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoInj3SigAccuracyApogeeMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoInj3SigAccuracyPerigeeTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoInj3SigAccuracyPerigeeMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoInj3SigAccuracyInclinationTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def GtoInj3SigAccuracyInclinationMargin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle attitude accuracy (degrees).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def AttitudeAccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle payload separation rate in m/s.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def PayloadSeparationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch vehicle deployment rotation rate in RPM.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def DeploymentRotationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional URL for additional information on the vehicle.
    # Example: /// Example: Example URL
    # Constraints: Minimum length = 0, Maximum length = 256
    # LaunchVehicleDetails_Ingest
    def SourceUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes/Description of the launch vehicle.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # LaunchVehicleDetails_Ingest
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes/Description of the launch vehicle fairing.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # LaunchVehicleDetails_Ingest
    def FairingNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes/Description of the launch vehicle payload.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # LaunchVehicleDetails_Ingest
    def PayloadNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchVehicleDetails_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchVehicleDetails_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchVehicleDetails_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # LaunchVehicleDetails_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LaunchVehicleDetails_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LaunchVehicleDetails_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        return o == 0

def LaunchVehicleDetails_IngestStart(builder):
    builder.StartObject(55)

def Start(builder):
    LaunchVehicleDetails_IngestStart(builder)

def LaunchVehicleDetails_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchVehicleDetails_IngestAddId(builder, id)

def LaunchVehicleDetails_IngestAddIdLaunchVehicle(builder, idLaunchVehicle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idLaunchVehicle), 0)

def AddIdLaunchVehicle(builder, idLaunchVehicle):
    LaunchVehicleDetails_IngestAddIdLaunchVehicle(builder, idLaunchVehicle)

def LaunchVehicleDetails_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchVehicleDetails_IngestAddClassificationMarking(builder, classificationMarking)

def LaunchVehicleDetails_IngestAddVariant(builder, variant):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(variant), 0)

def AddVariant(builder, variant):
    LaunchVehicleDetails_IngestAddVariant(builder, variant)

def LaunchVehicleDetails_IngestAddMinorVariant(builder, minorVariant):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(minorVariant), 0)

def AddMinorVariant(builder, minorVariant):
    LaunchVehicleDetails_IngestAddMinorVariant(builder, minorVariant)

def LaunchVehicleDetails_IngestAddCategory(builder, category):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(category), 0)

def AddCategory(builder, category):
    LaunchVehicleDetails_IngestAddCategory(builder, category)

def LaunchVehicleDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    LaunchVehicleDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId)

def LaunchVehicleDetails_IngestAddLaunchPrefix(builder, launchPrefix):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(launchPrefix), 0)

def AddLaunchPrefix(builder, launchPrefix):
    LaunchVehicleDetails_IngestAddLaunchPrefix(builder, launchPrefix)

def LaunchVehicleDetails_IngestAddFamily(builder, family):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(family), 0)

def AddFamily(builder, family):
    LaunchVehicleDetails_IngestAddFamily(builder, family)

def LaunchVehicleDetails_IngestAddPropellant(builder, propellant):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(propellant), 0)

def AddPropellant(builder, propellant):
    LaunchVehicleDetails_IngestAddPropellant(builder, propellant)

def LaunchVehicleDetails_IngestAddOxidizer(builder, oxidizer):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(oxidizer), 0)

def AddOxidizer(builder, oxidizer):
    LaunchVehicleDetails_IngestAddOxidizer(builder, oxidizer)

def LaunchVehicleDetails_IngestAddLength(builder, length):
    builder.PrependFloat64Slot(11, length, 0.0)

def AddLength(builder, length):
    LaunchVehicleDetails_IngestAddLength(builder, length)

def LaunchVehicleDetails_IngestAddDiameter(builder, diameter):
    builder.PrependFloat64Slot(12, diameter, 0.0)

def AddDiameter(builder, diameter):
    LaunchVehicleDetails_IngestAddDiameter(builder, diameter)

def LaunchVehicleDetails_IngestAddLaunchMass(builder, launchMass):
    builder.PrependFloat64Slot(13, launchMass, 0.0)

def AddLaunchMass(builder, launchMass):
    LaunchVehicleDetails_IngestAddLaunchMass(builder, launchMass)

def LaunchVehicleDetails_IngestAddGeoPayloadMass(builder, geoPayloadMass):
    builder.PrependFloat64Slot(14, geoPayloadMass, 0.0)

def AddGeoPayloadMass(builder, geoPayloadMass):
    LaunchVehicleDetails_IngestAddGeoPayloadMass(builder, geoPayloadMass)

def LaunchVehicleDetails_IngestAddGtoPayloadMass(builder, gtoPayloadMass):
    builder.PrependFloat64Slot(15, gtoPayloadMass, 0.0)

def AddGtoPayloadMass(builder, gtoPayloadMass):
    LaunchVehicleDetails_IngestAddGtoPayloadMass(builder, gtoPayloadMass)

def LaunchVehicleDetails_IngestAddLeoPayloadMass(builder, leoPayloadMass):
    builder.PrependFloat64Slot(16, leoPayloadMass, 0.0)

def AddLeoPayloadMass(builder, leoPayloadMass):
    LaunchVehicleDetails_IngestAddLeoPayloadMass(builder, leoPayloadMass)

def LaunchVehicleDetails_IngestAddSsoPayloadMass(builder, ssoPayloadMass):
    builder.PrependFloat64Slot(17, ssoPayloadMass, 0.0)

def AddSsoPayloadMass(builder, ssoPayloadMass):
    LaunchVehicleDetails_IngestAddSsoPayloadMass(builder, ssoPayloadMass)

def LaunchVehicleDetails_IngestAddFairingLength(builder, fairingLength):
    builder.PrependFloat64Slot(18, fairingLength, 0.0)

def AddFairingLength(builder, fairingLength):
    LaunchVehicleDetails_IngestAddFairingLength(builder, fairingLength)

def LaunchVehicleDetails_IngestAddFairingName(builder, fairingName):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(fairingName), 0)

def AddFairingName(builder, fairingName):
    LaunchVehicleDetails_IngestAddFairingName(builder, fairingName)

def LaunchVehicleDetails_IngestAddFairingExternalDiameter(builder, fairingExternalDiameter):
    builder.PrependFloat64Slot(20, fairingExternalDiameter, 0.0)

def AddFairingExternalDiameter(builder, fairingExternalDiameter):
    LaunchVehicleDetails_IngestAddFairingExternalDiameter(builder, fairingExternalDiameter)

def LaunchVehicleDetails_IngestAddFairingInternalDiameter(builder, fairingInternalDiameter):
    builder.PrependFloat64Slot(21, fairingInternalDiameter, 0.0)

def AddFairingInternalDiameter(builder, fairingInternalDiameter):
    LaunchVehicleDetails_IngestAddFairingInternalDiameter(builder, fairingInternalDiameter)

def LaunchVehicleDetails_IngestAddFairingMass(builder, fairingMass):
    builder.PrependFloat64Slot(22, fairingMass, 0.0)

def AddFairingMass(builder, fairingMass):
    LaunchVehicleDetails_IngestAddFairingMass(builder, fairingMass)

def LaunchVehicleDetails_IngestAddFairingMaterial(builder, fairingMaterial):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(fairingMaterial), 0)

def AddFairingMaterial(builder, fairingMaterial):
    LaunchVehicleDetails_IngestAddFairingMaterial(builder, fairingMaterial)

def LaunchVehicleDetails_IngestAddMaxAccelLoad(builder, maxAccelLoad):
    builder.PrependFloat64Slot(24, maxAccelLoad, 0.0)

def AddMaxAccelLoad(builder, maxAccelLoad):
    LaunchVehicleDetails_IngestAddMaxAccelLoad(builder, maxAccelLoad)

def LaunchVehicleDetails_IngestAddMaxPayloadFreqLat(builder, maxPayloadFreqLat):
    builder.PrependFloat64Slot(25, maxPayloadFreqLat, 0.0)

def AddMaxPayloadFreqLat(builder, maxPayloadFreqLat):
    LaunchVehicleDetails_IngestAddMaxPayloadFreqLat(builder, maxPayloadFreqLat)

def LaunchVehicleDetails_IngestAddMaxPayloadFreqLon(builder, maxPayloadFreqLon):
    builder.PrependFloat64Slot(26, maxPayloadFreqLon, 0.0)

def AddMaxPayloadFreqLon(builder, maxPayloadFreqLon):
    LaunchVehicleDetails_IngestAddMaxPayloadFreqLon(builder, maxPayloadFreqLon)

def LaunchVehicleDetails_IngestAddMaxAcousticLevel(builder, maxAcousticLevel):
    builder.PrependFloat64Slot(27, maxAcousticLevel, 0.0)

def AddMaxAcousticLevel(builder, maxAcousticLevel):
    LaunchVehicleDetails_IngestAddMaxAcousticLevel(builder, maxAcousticLevel)

def LaunchVehicleDetails_IngestAddMaxAcousticLevelRange(builder, maxAcousticLevelRange):
    builder.PrependFloat64Slot(28, maxAcousticLevelRange, 0.0)

def AddMaxAcousticLevelRange(builder, maxAcousticLevelRange):
    LaunchVehicleDetails_IngestAddMaxAcousticLevelRange(builder, maxAcousticLevelRange)

def LaunchVehicleDetails_IngestAddSoundPressureLevel(builder, soundPressureLevel):
    builder.PrependFloat64Slot(29, soundPressureLevel, 0.0)

def AddSoundPressureLevel(builder, soundPressureLevel):
    LaunchVehicleDetails_IngestAddSoundPressureLevel(builder, soundPressureLevel)

def LaunchVehicleDetails_IngestAddMaxFlightShockForce(builder, maxFlightShockForce):
    builder.PrependFloat64Slot(30, maxFlightShockForce, 0.0)

def AddMaxFlightShockForce(builder, maxFlightShockForce):
    LaunchVehicleDetails_IngestAddMaxFlightShockForce(builder, maxFlightShockForce)

def LaunchVehicleDetails_IngestAddMaxFlightShockFreq(builder, maxFlightShockFreq):
    builder.PrependFloat64Slot(31, maxFlightShockFreq, 0.0)

def AddMaxFlightShockFreq(builder, maxFlightShockFreq):
    LaunchVehicleDetails_IngestAddMaxFlightShockFreq(builder, maxFlightShockFreq)

def LaunchVehicleDetails_IngestAddMaxFairingPressureChange(builder, maxFairingPressureChange):
    builder.PrependFloat64Slot(32, maxFairingPressureChange, 0.0)

def AddMaxFairingPressureChange(builder, maxFairingPressureChange):
    LaunchVehicleDetails_IngestAddMaxFairingPressureChange(builder, maxFairingPressureChange)

def LaunchVehicleDetails_IngestAddEstLaunchPrice(builder, estLaunchPrice):
    builder.PrependFloat64Slot(33, estLaunchPrice, 0.0)

def AddEstLaunchPrice(builder, estLaunchPrice):
    LaunchVehicleDetails_IngestAddEstLaunchPrice(builder, estLaunchPrice)

def LaunchVehicleDetails_IngestAddEstLaunchPriceTypical(builder, estLaunchPriceTypical):
    builder.PrependFloat64Slot(34, estLaunchPriceTypical, 0.0)

def AddEstLaunchPriceTypical(builder, estLaunchPriceTypical):
    LaunchVehicleDetails_IngestAddEstLaunchPriceTypical(builder, estLaunchPriceTypical)

def LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget):
    builder.PrependFloat64Slot(35, gtoInj3SigAccuracyApogeeTarget, 0.0)

def AddGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget):
    LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget)

def LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin):
    builder.PrependFloat64Slot(36, gtoInj3SigAccuracyApogeeMargin, 0.0)

def AddGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin):
    LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin)

def LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget):
    builder.PrependFloat64Slot(37, gtoInj3SigAccuracyPerigeeTarget, 0.0)

def AddGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget):
    LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget)

def LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin):
    builder.PrependFloat64Slot(38, gtoInj3SigAccuracyPerigeeMargin, 0.0)

def AddGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin):
    LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin)

def LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget):
    builder.PrependFloat64Slot(39, gtoInj3SigAccuracyInclinationTarget, 0.0)

def AddGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget):
    LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget)

def LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin):
    builder.PrependFloat64Slot(40, gtoInj3SigAccuracyInclinationMargin, 0.0)

def AddGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin):
    LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin)

def LaunchVehicleDetails_IngestAddAttitudeAccuracy(builder, attitudeAccuracy):
    builder.PrependFloat64Slot(41, attitudeAccuracy, 0.0)

def AddAttitudeAccuracy(builder, attitudeAccuracy):
    LaunchVehicleDetails_IngestAddAttitudeAccuracy(builder, attitudeAccuracy)

def LaunchVehicleDetails_IngestAddPayloadSeparationRate(builder, payloadSeparationRate):
    builder.PrependFloat64Slot(42, payloadSeparationRate, 0.0)

def AddPayloadSeparationRate(builder, payloadSeparationRate):
    LaunchVehicleDetails_IngestAddPayloadSeparationRate(builder, payloadSeparationRate)

def LaunchVehicleDetails_IngestAddDeploymentRotationRate(builder, deploymentRotationRate):
    builder.PrependFloat64Slot(43, deploymentRotationRate, 0.0)

def AddDeploymentRotationRate(builder, deploymentRotationRate):
    LaunchVehicleDetails_IngestAddDeploymentRotationRate(builder, deploymentRotationRate)

def LaunchVehicleDetails_IngestAddSourceUrl(builder, sourceUrl):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(sourceUrl), 0)

def AddSourceUrl(builder, sourceUrl):
    LaunchVehicleDetails_IngestAddSourceUrl(builder, sourceUrl)

def LaunchVehicleDetails_IngestAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    LaunchVehicleDetails_IngestAddNotes(builder, notes)

def LaunchVehicleDetails_IngestAddFairingNotes(builder, fairingNotes):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(fairingNotes), 0)

def AddFairingNotes(builder, fairingNotes):
    LaunchVehicleDetails_IngestAddFairingNotes(builder, fairingNotes)

def LaunchVehicleDetails_IngestAddPayloadNotes(builder, payloadNotes):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(payloadNotes), 0)

def AddPayloadNotes(builder, payloadNotes):
    LaunchVehicleDetails_IngestAddPayloadNotes(builder, payloadNotes)

def LaunchVehicleDetails_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchVehicleDetails_IngestAddCreatedAt(builder, createdAt)

def LaunchVehicleDetails_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchVehicleDetails_IngestAddCreatedBy(builder, createdBy)

def LaunchVehicleDetails_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchVehicleDetails_IngestAddSource(builder, source)

def LaunchVehicleDetails_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchVehicleDetails_IngestAddOrigin(builder, origin)

def LaunchVehicleDetails_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchVehicleDetails_IngestAddOrigNetwork(builder, origNetwork)

def LaunchVehicleDetails_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(53, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchVehicleDetails_IngestAddDataMode(builder, dataMode)

def LaunchVehicleDetails_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    LaunchVehicleDetails_IngestAddTags(builder, tags)

def LaunchVehicleDetails_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return LaunchVehicleDetails_IngestStartTagsVector(builder, numElems)

def LaunchVehicleDetails_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchVehicleDetails_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class LaunchVehicleDetails_IngestT(object):

    # LaunchVehicleDetails_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.idLaunchVehicle = None  # type: str
        self.classificationMarking = None  # type: str
        self.variant = None  # type: str
        self.minorVariant = None  # type: str
        self.category = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.launchPrefix = None  # type: str
        self.family = None  # type: str
        self.propellant = None  # type: str
        self.oxidizer = None  # type: str
        self.length = 0.0  # type: float
        self.diameter = 0.0  # type: float
        self.launchMass = 0.0  # type: float
        self.geoPayloadMass = 0.0  # type: float
        self.gtoPayloadMass = 0.0  # type: float
        self.leoPayloadMass = 0.0  # type: float
        self.ssoPayloadMass = 0.0  # type: float
        self.fairingLength = 0.0  # type: float
        self.fairingName = None  # type: str
        self.fairingExternalDiameter = 0.0  # type: float
        self.fairingInternalDiameter = 0.0  # type: float
        self.fairingMass = 0.0  # type: float
        self.fairingMaterial = None  # type: str
        self.maxAccelLoad = 0.0  # type: float
        self.maxPayloadFreqLat = 0.0  # type: float
        self.maxPayloadFreqLon = 0.0  # type: float
        self.maxAcousticLevel = 0.0  # type: float
        self.maxAcousticLevelRange = 0.0  # type: float
        self.soundPressureLevel = 0.0  # type: float
        self.maxFlightShockForce = 0.0  # type: float
        self.maxFlightShockFreq = 0.0  # type: float
        self.maxFairingPressureChange = 0.0  # type: float
        self.estLaunchPrice = 0.0  # type: float
        self.estLaunchPriceTypical = 0.0  # type: float
        self.gtoInj3SigAccuracyApogeeTarget = 0.0  # type: float
        self.gtoInj3SigAccuracyApogeeMargin = 0.0  # type: float
        self.gtoInj3SigAccuracyPerigeeTarget = 0.0  # type: float
        self.gtoInj3SigAccuracyPerigeeMargin = 0.0  # type: float
        self.gtoInj3SigAccuracyInclinationTarget = 0.0  # type: float
        self.gtoInj3SigAccuracyInclinationMargin = 0.0  # type: float
        self.attitudeAccuracy = 0.0  # type: float
        self.payloadSeparationRate = 0.0  # type: float
        self.deploymentRotationRate = 0.0  # type: float
        self.sourceUrl = None  # type: str
        self.notes = None  # type: str
        self.fairingNotes = None  # type: str
        self.payloadNotes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchVehicleDetailsIngest = LaunchVehicleDetails_Ingest()
        launchVehicleDetailsIngest.Init(buf, pos)
        return cls.InitFromObj(launchVehicleDetailsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchVehicleDetailsIngest):
        x = LaunchVehicleDetails_IngestT()
        x._UnPack(launchVehicleDetailsIngest)
        return x

    # LaunchVehicleDetails_IngestT
    def _UnPack(self, launchVehicleDetailsIngest):
        if launchVehicleDetailsIngest is None:
            return
        self.id = launchVehicleDetailsIngest.Id()
        self.idLaunchVehicle = launchVehicleDetailsIngest.IdLaunchVehicle()
        self.classificationMarking = launchVehicleDetailsIngest.ClassificationMarking()
        self.variant = launchVehicleDetailsIngest.Variant()
        self.minorVariant = launchVehicleDetailsIngest.MinorVariant()
        self.category = launchVehicleDetailsIngest.Category()
        self.manufacturerOrgId = launchVehicleDetailsIngest.ManufacturerOrgId()
        self.launchPrefix = launchVehicleDetailsIngest.LaunchPrefix()
        self.family = launchVehicleDetailsIngest.Family()
        self.propellant = launchVehicleDetailsIngest.Propellant()
        self.oxidizer = launchVehicleDetailsIngest.Oxidizer()
        self.length = launchVehicleDetailsIngest.Length()
        self.diameter = launchVehicleDetailsIngest.Diameter()
        self.launchMass = launchVehicleDetailsIngest.LaunchMass()
        self.geoPayloadMass = launchVehicleDetailsIngest.GeoPayloadMass()
        self.gtoPayloadMass = launchVehicleDetailsIngest.GtoPayloadMass()
        self.leoPayloadMass = launchVehicleDetailsIngest.LeoPayloadMass()
        self.ssoPayloadMass = launchVehicleDetailsIngest.SsoPayloadMass()
        self.fairingLength = launchVehicleDetailsIngest.FairingLength()
        self.fairingName = launchVehicleDetailsIngest.FairingName()
        self.fairingExternalDiameter = launchVehicleDetailsIngest.FairingExternalDiameter()
        self.fairingInternalDiameter = launchVehicleDetailsIngest.FairingInternalDiameter()
        self.fairingMass = launchVehicleDetailsIngest.FairingMass()
        self.fairingMaterial = launchVehicleDetailsIngest.FairingMaterial()
        self.maxAccelLoad = launchVehicleDetailsIngest.MaxAccelLoad()
        self.maxPayloadFreqLat = launchVehicleDetailsIngest.MaxPayloadFreqLat()
        self.maxPayloadFreqLon = launchVehicleDetailsIngest.MaxPayloadFreqLon()
        self.maxAcousticLevel = launchVehicleDetailsIngest.MaxAcousticLevel()
        self.maxAcousticLevelRange = launchVehicleDetailsIngest.MaxAcousticLevelRange()
        self.soundPressureLevel = launchVehicleDetailsIngest.SoundPressureLevel()
        self.maxFlightShockForce = launchVehicleDetailsIngest.MaxFlightShockForce()
        self.maxFlightShockFreq = launchVehicleDetailsIngest.MaxFlightShockFreq()
        self.maxFairingPressureChange = launchVehicleDetailsIngest.MaxFairingPressureChange()
        self.estLaunchPrice = launchVehicleDetailsIngest.EstLaunchPrice()
        self.estLaunchPriceTypical = launchVehicleDetailsIngest.EstLaunchPriceTypical()
        self.gtoInj3SigAccuracyApogeeTarget = launchVehicleDetailsIngest.GtoInj3SigAccuracyApogeeTarget()
        self.gtoInj3SigAccuracyApogeeMargin = launchVehicleDetailsIngest.GtoInj3SigAccuracyApogeeMargin()
        self.gtoInj3SigAccuracyPerigeeTarget = launchVehicleDetailsIngest.GtoInj3SigAccuracyPerigeeTarget()
        self.gtoInj3SigAccuracyPerigeeMargin = launchVehicleDetailsIngest.GtoInj3SigAccuracyPerigeeMargin()
        self.gtoInj3SigAccuracyInclinationTarget = launchVehicleDetailsIngest.GtoInj3SigAccuracyInclinationTarget()
        self.gtoInj3SigAccuracyInclinationMargin = launchVehicleDetailsIngest.GtoInj3SigAccuracyInclinationMargin()
        self.attitudeAccuracy = launchVehicleDetailsIngest.AttitudeAccuracy()
        self.payloadSeparationRate = launchVehicleDetailsIngest.PayloadSeparationRate()
        self.deploymentRotationRate = launchVehicleDetailsIngest.DeploymentRotationRate()
        self.sourceUrl = launchVehicleDetailsIngest.SourceUrl()
        self.notes = launchVehicleDetailsIngest.Notes()
        self.fairingNotes = launchVehicleDetailsIngest.FairingNotes()
        self.payloadNotes = launchVehicleDetailsIngest.PayloadNotes()
        self.createdAt = launchVehicleDetailsIngest.CreatedAt()
        self.createdBy = launchVehicleDetailsIngest.CreatedBy()
        self.source = launchVehicleDetailsIngest.Source()
        self.origin = launchVehicleDetailsIngest.Origin()
        self.origNetwork = launchVehicleDetailsIngest.OrigNetwork()
        self.dataMode = launchVehicleDetailsIngest.DataMode()
        if not launchVehicleDetailsIngest.TagsIsNone():
            self.tags = []
            for i in range(launchVehicleDetailsIngest.TagsLength()):
                self.tags.append(launchVehicleDetailsIngest.Tags(i))

    # LaunchVehicleDetails_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idLaunchVehicle is not None:
            idLaunchVehicle = builder.CreateString(self.idLaunchVehicle)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.variant is not None:
            variant = builder.CreateString(self.variant)
        if self.minorVariant is not None:
            minorVariant = builder.CreateString(self.minorVariant)
        if self.category is not None:
            category = builder.CreateString(self.category)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.launchPrefix is not None:
            launchPrefix = builder.CreateString(self.launchPrefix)
        if self.family is not None:
            family = builder.CreateString(self.family)
        if self.propellant is not None:
            propellant = builder.CreateString(self.propellant)
        if self.oxidizer is not None:
            oxidizer = builder.CreateString(self.oxidizer)
        if self.fairingName is not None:
            fairingName = builder.CreateString(self.fairingName)
        if self.fairingMaterial is not None:
            fairingMaterial = builder.CreateString(self.fairingMaterial)
        if self.sourceUrl is not None:
            sourceUrl = builder.CreateString(self.sourceUrl)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.fairingNotes is not None:
            fairingNotes = builder.CreateString(self.fairingNotes)
        if self.payloadNotes is not None:
            payloadNotes = builder.CreateString(self.payloadNotes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            LaunchVehicleDetails_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        LaunchVehicleDetails_IngestStart(builder)
        if self.id is not None:
            LaunchVehicleDetails_IngestAddId(builder, id)
        if self.idLaunchVehicle is not None:
            LaunchVehicleDetails_IngestAddIdLaunchVehicle(builder, idLaunchVehicle)
        if self.classificationMarking is not None:
            LaunchVehicleDetails_IngestAddClassificationMarking(builder, classificationMarking)
        if self.variant is not None:
            LaunchVehicleDetails_IngestAddVariant(builder, variant)
        if self.minorVariant is not None:
            LaunchVehicleDetails_IngestAddMinorVariant(builder, minorVariant)
        if self.category is not None:
            LaunchVehicleDetails_IngestAddCategory(builder, category)
        if self.manufacturerOrgId is not None:
            LaunchVehicleDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.launchPrefix is not None:
            LaunchVehicleDetails_IngestAddLaunchPrefix(builder, launchPrefix)
        if self.family is not None:
            LaunchVehicleDetails_IngestAddFamily(builder, family)
        if self.propellant is not None:
            LaunchVehicleDetails_IngestAddPropellant(builder, propellant)
        if self.oxidizer is not None:
            LaunchVehicleDetails_IngestAddOxidizer(builder, oxidizer)
        LaunchVehicleDetails_IngestAddLength(builder, self.length)
        LaunchVehicleDetails_IngestAddDiameter(builder, self.diameter)
        LaunchVehicleDetails_IngestAddLaunchMass(builder, self.launchMass)
        LaunchVehicleDetails_IngestAddGeoPayloadMass(builder, self.geoPayloadMass)
        LaunchVehicleDetails_IngestAddGtoPayloadMass(builder, self.gtoPayloadMass)
        LaunchVehicleDetails_IngestAddLeoPayloadMass(builder, self.leoPayloadMass)
        LaunchVehicleDetails_IngestAddSsoPayloadMass(builder, self.ssoPayloadMass)
        LaunchVehicleDetails_IngestAddFairingLength(builder, self.fairingLength)
        if self.fairingName is not None:
            LaunchVehicleDetails_IngestAddFairingName(builder, fairingName)
        LaunchVehicleDetails_IngestAddFairingExternalDiameter(builder, self.fairingExternalDiameter)
        LaunchVehicleDetails_IngestAddFairingInternalDiameter(builder, self.fairingInternalDiameter)
        LaunchVehicleDetails_IngestAddFairingMass(builder, self.fairingMass)
        if self.fairingMaterial is not None:
            LaunchVehicleDetails_IngestAddFairingMaterial(builder, fairingMaterial)
        LaunchVehicleDetails_IngestAddMaxAccelLoad(builder, self.maxAccelLoad)
        LaunchVehicleDetails_IngestAddMaxPayloadFreqLat(builder, self.maxPayloadFreqLat)
        LaunchVehicleDetails_IngestAddMaxPayloadFreqLon(builder, self.maxPayloadFreqLon)
        LaunchVehicleDetails_IngestAddMaxAcousticLevel(builder, self.maxAcousticLevel)
        LaunchVehicleDetails_IngestAddMaxAcousticLevelRange(builder, self.maxAcousticLevelRange)
        LaunchVehicleDetails_IngestAddSoundPressureLevel(builder, self.soundPressureLevel)
        LaunchVehicleDetails_IngestAddMaxFlightShockForce(builder, self.maxFlightShockForce)
        LaunchVehicleDetails_IngestAddMaxFlightShockFreq(builder, self.maxFlightShockFreq)
        LaunchVehicleDetails_IngestAddMaxFairingPressureChange(builder, self.maxFairingPressureChange)
        LaunchVehicleDetails_IngestAddEstLaunchPrice(builder, self.estLaunchPrice)
        LaunchVehicleDetails_IngestAddEstLaunchPriceTypical(builder, self.estLaunchPriceTypical)
        LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyApogeeTarget(builder, self.gtoInj3SigAccuracyApogeeTarget)
        LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyApogeeMargin(builder, self.gtoInj3SigAccuracyApogeeMargin)
        LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyPerigeeTarget(builder, self.gtoInj3SigAccuracyPerigeeTarget)
        LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyPerigeeMargin(builder, self.gtoInj3SigAccuracyPerigeeMargin)
        LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyInclinationTarget(builder, self.gtoInj3SigAccuracyInclinationTarget)
        LaunchVehicleDetails_IngestAddGtoInj3SigAccuracyInclinationMargin(builder, self.gtoInj3SigAccuracyInclinationMargin)
        LaunchVehicleDetails_IngestAddAttitudeAccuracy(builder, self.attitudeAccuracy)
        LaunchVehicleDetails_IngestAddPayloadSeparationRate(builder, self.payloadSeparationRate)
        LaunchVehicleDetails_IngestAddDeploymentRotationRate(builder, self.deploymentRotationRate)
        if self.sourceUrl is not None:
            LaunchVehicleDetails_IngestAddSourceUrl(builder, sourceUrl)
        if self.notes is not None:
            LaunchVehicleDetails_IngestAddNotes(builder, notes)
        if self.fairingNotes is not None:
            LaunchVehicleDetails_IngestAddFairingNotes(builder, fairingNotes)
        if self.payloadNotes is not None:
            LaunchVehicleDetails_IngestAddPayloadNotes(builder, payloadNotes)
        if self.createdAt is not None:
            LaunchVehicleDetails_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchVehicleDetails_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            LaunchVehicleDetails_IngestAddSource(builder, source)
        if self.origin is not None:
            LaunchVehicleDetails_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            LaunchVehicleDetails_IngestAddOrigNetwork(builder, origNetwork)
        LaunchVehicleDetails_IngestAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            LaunchVehicleDetails_IngestAddTags(builder, tags)
        launchVehicleDetailsIngest = LaunchVehicleDetails_IngestEnd(builder)
        return launchVehicleDetailsIngest
