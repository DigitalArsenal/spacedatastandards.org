# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
class IonoObservation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: IONOOBSERVATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # IonoObservation_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # IonoObservation_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # IonoObservation_Ingest
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # IonoObservation_Ingest
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ionosonde hardware type or data collection type together with possible additional descriptors.
    # Example: /// Example: Example hardware type
    # Constraints: Minimum length = 1, Maximum length = 64
    # IonoObservation_Ingest
    def System(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the algorithm used for the electron density profile.
    # Example: /// Example: NH
    # Constraints: Minimum length = 0, Maximum length = 64
    # IonoObservation_Ingest
    def NeProfileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Version of the algorithm used for the electron density profile.
    # Example: /// Example: 4.32
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def NeProfileVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ScalerInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def DensityProfile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # URSI code for station or stations producing the ionosonde.
    # Example: /// Example: STATION-ID
    # Constraints: Minimum length = 1, Maximum length = 64
    # IonoObservation_Ingest
    def StationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sounding Start time in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def StartTimeUtc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Names of settings.
    # Example: /// Example: Example settings
    # Constraints: Minimum length = 1, Maximum length = 1024
    # IonoObservation_Ingest
    def SystemInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # IonoObservation_Ingest
    def SystemNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
    # Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def TransmitCoordinates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def TransmitCoordinatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def TransmitCoordinatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Enums: Mobile, Static.
    # Example: /// Example: Mobile
    # Constraints: Minimum length = 0, Maximum length = 16
    # IonoObservation_Ingest
    def TransmitSensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
    # Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ReceiveCoordinates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def ReceiveCoordinatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def ReceiveCoordinatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Enums: Mobile, Static.
    # Example: /// Example: Mobile
    # Constraints: Minimum length = 0, Maximum length = 16
    # IonoObservation_Ingest
    def ReceiveSensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def AntennaElementPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 32
    # IonoObservation_Ingest
    def AntennaElementPositionCoordinateSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Power(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of restricted frequencies.
    # Example: /// Example: [12.5, 34.5, 45.3]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def RestrictedFrequency(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def RestrictedFrequencyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def RestrictedFrequencyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Notes for the restrictedFrequency data.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservation_Ingest
    def RestrictedFrequencyNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Doppler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Stokes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Amplitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
    # Example: /// Example: 6.75
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
    # Example: /// Example: 8.2
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoF1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
    # Example: /// Example: 4.5
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FxF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
    # Example: /// Example: 4.2
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FxF1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # MUF(D)/foF2.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Md(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowest usable frequency.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Luf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum Usable Frequency for ground distance D in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Mufd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
    # Example: /// Example: 2.025
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Fmin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
    # Example: /// Example: 2.35
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoEs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum frequency of F layer echoes in MHz. URSI ID: 80.
    # Example: /// Example: 2.7
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FminF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum frequency of E layer echoes in MHz. URSI ID: 81.
    # Example: /// Example: 2.025
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FminE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FxE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
    # Example: /// Example: 7.525
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FxI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
    # Example: /// Example: 238.5
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
    # Example: /// Example: 238.5
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
    # Example: /// Example: 230.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeF1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
    # Example: /// Example: 98.47
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The minimum height of the trace used to give foEs in km. URSI ID: 34.
    # Example: /// Example: 95
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeEs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Peak height of E-layer in km. URSI ID: 90.
    # Example: /// Example: 91.744
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ZmE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Parabolic E layer semi-thickness in km. URSI ID: 83.
    # Example: /// Example: 1.722
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def YE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average range spread of F layer in km. URSI ID: 84.
    # Example: /// Example: 1.83
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Qf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average range spread of E layer in km. URSI ID: 85.
    # Example: /// Example: 0.95
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Qe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowering of F trace to the leading edge in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def DownF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowering of E trace to the leading edge in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def DownE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Lowering of Es trace to the leading edge in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def DownEs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
    # Example: /// Example: 0.075
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Ff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frequency spread beyond foE in MHz. URSI ID: 87.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Fe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Distance for MUF calculation in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # MUF/OblFactor in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Fmuf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Virtual height at MUF/OblFactor frequency in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimefMuf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Adjustment to the scaled foF2 during profile inversion in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def DeltafoF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Predicted value of foE in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoEp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The frequency at which hprimeF is measured in MHz. URSI ID: 61.
    # Example: /// Example: 2.5
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FhprimeF(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
    # Example: /// Example: 2.5
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FhprimeF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Predicted value of foF1 in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoF1p(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Predicted value of foF2 in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoF2p(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True height of the F2 peak in km. URSI ID: AE.
    # Example: /// Example: 240.498
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HmF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True height of the F1 peak in km. URSI ID: BE.
    # Example: /// Example: 230.128
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HmF1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True height of the E peak in km. URSI ID: CE.
    # Example: /// Example: 215.643
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HmE(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # True height at half peak electron density in the F2 layer in km. URSI ID: 93.
    # Example: /// Example: 240.498
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ZhalfNm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum frequency of Es layer in MHz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FminEs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Parabolic F2 layer semi-thickness in km. URSI ID: 94.
    # Example: /// Example: 62.178
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def YF2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Parabolic F1 layer semi-thickness in km. URSI ID: 95.
    # Example: /// Example: 55.645
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def YF1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
    # Example: /// Example: 24.673
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Tec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
    # Example: /// Example: 35.613
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ScaleHeightF2Peak(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # IRI thickness parameter in km. URSI ID: D0.
    # Example: /// Example: 68.07
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def B0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # IRI profile shape parameter. URSI ID: D1.
    # Example: /// Example: 1.87
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def B1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # IRI profile shape parameter, F1 layer. URSI ID: D2.
    # Example: /// Example: 1.94
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def D1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
    # Example: /// Example: 45.764
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoEa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
    # Example: /// Example: 102.6
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeEa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
    # Example: /// Example: 87.21
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FoP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
    # Example: /// Example: 89.45
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def HprimeP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
    # Example: /// Example: 34.867
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def FbEs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Characterization of the shape of Es trace. URSI ID: 36.
    # Example: /// Example: Auroral
    # Constraints: Minimum length = 0, Maximum length = 25
    # IonoObservation_Ingest
    def TypeEs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
    # Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def CharAtts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def CharAttsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def CharAttsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        return o == 0

    # Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Height(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def HeightLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def HeightIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        return o == 0

    # Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def PlasmaFrequency(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def PlasmaFrequencyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def PlasmaFrequencyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        return o == 0

    # Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
    # Example: /// Example: [0.8, 0.2, 0.5]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def PlasmaFrequencyUncertainty(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def PlasmaFrequencyUncertaintyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def PlasmaFrequencyUncertaintyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        return o == 0

    # Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ElectronDensity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def ElectronDensityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def ElectronDensityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        return o == 0

    # Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
    # Example: /// Example: [0.8, 0.2, 0.5]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ElectronDensityUncertainty(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def ElectronDensityUncertaintyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def ElectronDensityUncertaintyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        return o == 0

    # Array of Legacy Artist Flags.
    # Example: /// Example: [1, 2, 3]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def ArtistFlags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def ArtistFlagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def ArtistFlagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def TraceGeneric(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of speed in m/s at which the disturbance travels through the ionosphere.
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def TidPhaseSpeeds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def TidPhaseSpeedsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def TidPhaseSpeedsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        return o == 0

    # Array of degrees clockwise from true North of the TID.
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def TidAzimuth(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def TidAzimuthLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def TidAzimuthIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        return o == 0

    # Array of 1/frequency of the TID wave.
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def TidPeriods(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservation_Ingest
    def TidPeriodsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservation_Ingest
    def TidPeriodsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(198))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def Datum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(200))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Equipment location.
    # Example: /// Example: Millstone Hill
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservation_Ingest
    def PlatformName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(202))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(204))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # IonoObservation_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(206))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # IonoObservation_Ingest
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(208))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # IonoObservation_Ingest
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(210))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # IonoObservation_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(212))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # IonoObservation_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(214))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # IonoObservation_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(216))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # IonoObservation_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(218))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IonoObservation_IngestStart(builder):
    builder.StartObject(108)

def Start(builder):
    IonoObservation_IngestStart(builder)

def IonoObservation_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    IonoObservation_IngestAddId(builder, id)

def IonoObservation_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    IonoObservation_IngestAddClassificationMarking(builder, classificationMarking)

def IonoObservation_IngestAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    IonoObservation_IngestAddIdSensor(builder, idSensor)

def IonoObservation_IngestAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    IonoObservation_IngestAddOrigSensorId(builder, origSensorId)

def IonoObservation_IngestAddSystem(builder, system):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(system), 0)

def AddSystem(builder, system):
    IonoObservation_IngestAddSystem(builder, system)

def IonoObservation_IngestAddNeProfileName(builder, neProfileName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(neProfileName), 0)

def AddNeProfileName(builder, neProfileName):
    IonoObservation_IngestAddNeProfileName(builder, neProfileName)

def IonoObservation_IngestAddNeProfileVersion(builder, neProfileVersion):
    builder.PrependFloat64Slot(6, neProfileVersion, 0.0)

def AddNeProfileVersion(builder, neProfileVersion):
    IonoObservation_IngestAddNeProfileVersion(builder, neProfileVersion)

def IonoObservation_IngestAddScalerInfo(builder, scalerInfo):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(scalerInfo), 0)

def AddScalerInfo(builder, scalerInfo):
    IonoObservation_IngestAddScalerInfo(builder, scalerInfo)

def IonoObservation_IngestAddDensityProfile(builder, densityProfile):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(densityProfile), 0)

def AddDensityProfile(builder, densityProfile):
    IonoObservation_IngestAddDensityProfile(builder, densityProfile)

def IonoObservation_IngestAddStationId(builder, stationId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(stationId), 0)

def AddStationId(builder, stationId):
    IonoObservation_IngestAddStationId(builder, stationId)

def IonoObservation_IngestAddStartTimeUtc(builder, startTimeUtc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(startTimeUtc), 0)

def AddStartTimeUtc(builder, startTimeUtc):
    IonoObservation_IngestAddStartTimeUtc(builder, startTimeUtc)

def IonoObservation_IngestAddSystemInfo(builder, systemInfo):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(systemInfo), 0)

def AddSystemInfo(builder, systemInfo):
    IonoObservation_IngestAddSystemInfo(builder, systemInfo)

def IonoObservation_IngestAddSystemNotes(builder, systemNotes):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(systemNotes), 0)

def AddSystemNotes(builder, systemNotes):
    IonoObservation_IngestAddSystemNotes(builder, systemNotes)

def IonoObservation_IngestAddTransmitCoordinates(builder, transmitCoordinates):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(transmitCoordinates), 0)

def AddTransmitCoordinates(builder, transmitCoordinates):
    IonoObservation_IngestAddTransmitCoordinates(builder, transmitCoordinates)

def IonoObservation_IngestStartTransmitCoordinatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTransmitCoordinatesVector(builder, numElems):
    return IonoObservation_IngestStartTransmitCoordinatesVector(builder, numElems)

def IonoObservation_IngestAddTransmitSensorType(builder, transmitSensorType):
    builder.PrependInt8Slot(14, transmitSensorType, 0)

def AddTransmitSensorType(builder, transmitSensorType):
    IonoObservation_IngestAddTransmitSensorType(builder, transmitSensorType)

def IonoObservation_IngestAddReceiveCoordinates(builder, receiveCoordinates):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(receiveCoordinates), 0)

def AddReceiveCoordinates(builder, receiveCoordinates):
    IonoObservation_IngestAddReceiveCoordinates(builder, receiveCoordinates)

def IonoObservation_IngestStartReceiveCoordinatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReceiveCoordinatesVector(builder, numElems):
    return IonoObservation_IngestStartReceiveCoordinatesVector(builder, numElems)

def IonoObservation_IngestAddReceiveSensorType(builder, receiveSensorType):
    builder.PrependInt8Slot(16, receiveSensorType, 0)

def AddReceiveSensorType(builder, receiveSensorType):
    IonoObservation_IngestAddReceiveSensorType(builder, receiveSensorType)

def IonoObservation_IngestAddAntennaElementPosition(builder, antennaElementPosition):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(antennaElementPosition), 0)

def AddAntennaElementPosition(builder, antennaElementPosition):
    IonoObservation_IngestAddAntennaElementPosition(builder, antennaElementPosition)

def IonoObservation_IngestAddAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem):
    builder.PrependInt8Slot(18, antennaElementPositionCoordinateSystem, 0)

def AddAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem):
    IonoObservation_IngestAddAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem)

def IonoObservation_IngestAddPower(builder, power):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(power), 0)

def AddPower(builder, power):
    IonoObservation_IngestAddPower(builder, power)

def IonoObservation_IngestAddRange(builder, range):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(range), 0)

def AddRange(builder, range):
    IonoObservation_IngestAddRange(builder, range)

def IonoObservation_IngestAddFrequency(builder, frequency):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(frequency), 0)

def AddFrequency(builder, frequency):
    IonoObservation_IngestAddFrequency(builder, frequency)

def IonoObservation_IngestAddPolarization(builder, polarization):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(polarization), 0)

def AddPolarization(builder, polarization):
    IonoObservation_IngestAddPolarization(builder, polarization)

def IonoObservation_IngestAddAzimuth(builder, azimuth):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(azimuth), 0)

def AddAzimuth(builder, azimuth):
    IonoObservation_IngestAddAzimuth(builder, azimuth)

def IonoObservation_IngestAddElevation(builder, elevation):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(elevation), 0)

def AddElevation(builder, elevation):
    IonoObservation_IngestAddElevation(builder, elevation)

def IonoObservation_IngestAddRestrictedFrequency(builder, restrictedFrequency):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(restrictedFrequency), 0)

def AddRestrictedFrequency(builder, restrictedFrequency):
    IonoObservation_IngestAddRestrictedFrequency(builder, restrictedFrequency)

def IonoObservation_IngestStartRestrictedFrequencyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRestrictedFrequencyVector(builder, numElems):
    return IonoObservation_IngestStartRestrictedFrequencyVector(builder, numElems)

def IonoObservation_IngestAddRestrictedFrequencyNotes(builder, restrictedFrequencyNotes):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(restrictedFrequencyNotes), 0)

def AddRestrictedFrequencyNotes(builder, restrictedFrequencyNotes):
    IonoObservation_IngestAddRestrictedFrequencyNotes(builder, restrictedFrequencyNotes)

def IonoObservation_IngestAddDoppler(builder, doppler):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(doppler), 0)

def AddDoppler(builder, doppler):
    IonoObservation_IngestAddDoppler(builder, doppler)

def IonoObservation_IngestAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    IonoObservation_IngestAddTime(builder, time)

def IonoObservation_IngestAddStokes(builder, stokes):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(stokes), 0)

def AddStokes(builder, stokes):
    IonoObservation_IngestAddStokes(builder, stokes)

def IonoObservation_IngestAddAmplitude(builder, amplitude):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(amplitude), 0)

def AddAmplitude(builder, amplitude):
    IonoObservation_IngestAddAmplitude(builder, amplitude)

def IonoObservation_IngestAddPhase(builder, phase):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(phase), 0)

def AddPhase(builder, phase):
    IonoObservation_IngestAddPhase(builder, phase)

def IonoObservation_IngestAddFoF2(builder, foF2):
    builder.PrependFloat64Slot(32, foF2, 0.0)

def AddFoF2(builder, foF2):
    IonoObservation_IngestAddFoF2(builder, foF2)

def IonoObservation_IngestAddFoF1(builder, foF1):
    builder.PrependFloat64Slot(33, foF1, 0.0)

def AddFoF1(builder, foF1):
    IonoObservation_IngestAddFoF1(builder, foF1)

def IonoObservation_IngestAddFxF2(builder, fxF2):
    builder.PrependFloat64Slot(34, fxF2, 0.0)

def AddFxF2(builder, fxF2):
    IonoObservation_IngestAddFxF2(builder, fxF2)

def IonoObservation_IngestAddFxF1(builder, fxF1):
    builder.PrependFloat64Slot(35, fxF1, 0.0)

def AddFxF1(builder, fxF1):
    IonoObservation_IngestAddFxF1(builder, fxF1)

def IonoObservation_IngestAddMd(builder, md):
    builder.PrependFloat64Slot(36, md, 0.0)

def AddMd(builder, md):
    IonoObservation_IngestAddMd(builder, md)

def IonoObservation_IngestAddLuf(builder, luf):
    builder.PrependFloat64Slot(37, luf, 0.0)

def AddLuf(builder, luf):
    IonoObservation_IngestAddLuf(builder, luf)

def IonoObservation_IngestAddMufd(builder, mufd):
    builder.PrependFloat64Slot(38, mufd, 0.0)

def AddMufd(builder, mufd):
    IonoObservation_IngestAddMufd(builder, mufd)

def IonoObservation_IngestAddFmin(builder, fmin):
    builder.PrependFloat64Slot(39, fmin, 0.0)

def AddFmin(builder, fmin):
    IonoObservation_IngestAddFmin(builder, fmin)

def IonoObservation_IngestAddFoEs(builder, foEs):
    builder.PrependFloat64Slot(40, foEs, 0.0)

def AddFoEs(builder, foEs):
    IonoObservation_IngestAddFoEs(builder, foEs)

def IonoObservation_IngestAddFminF(builder, fminF):
    builder.PrependFloat64Slot(41, fminF, 0.0)

def AddFminF(builder, fminF):
    IonoObservation_IngestAddFminF(builder, fminF)

def IonoObservation_IngestAddFminE(builder, fminE):
    builder.PrependFloat64Slot(42, fminE, 0.0)

def AddFminE(builder, fminE):
    IonoObservation_IngestAddFminE(builder, fminE)

def IonoObservation_IngestAddFoE(builder, foE):
    builder.PrependFloat64Slot(43, foE, 0.0)

def AddFoE(builder, foE):
    IonoObservation_IngestAddFoE(builder, foE)

def IonoObservation_IngestAddFxE(builder, fxE):
    builder.PrependFloat64Slot(44, fxE, 0.0)

def AddFxE(builder, fxE):
    IonoObservation_IngestAddFxE(builder, fxE)

def IonoObservation_IngestAddFxI(builder, fxI):
    builder.PrependFloat64Slot(45, fxI, 0.0)

def AddFxI(builder, fxI):
    IonoObservation_IngestAddFxI(builder, fxI)

def IonoObservation_IngestAddHprimeF(builder, hprimeF):
    builder.PrependFloat64Slot(46, hprimeF, 0.0)

def AddHprimeF(builder, hprimeF):
    IonoObservation_IngestAddHprimeF(builder, hprimeF)

def IonoObservation_IngestAddHprimeF2(builder, hprimeF2):
    builder.PrependFloat64Slot(47, hprimeF2, 0.0)

def AddHprimeF2(builder, hprimeF2):
    IonoObservation_IngestAddHprimeF2(builder, hprimeF2)

def IonoObservation_IngestAddHprimeF1(builder, hprimeF1):
    builder.PrependFloat64Slot(48, hprimeF1, 0.0)

def AddHprimeF1(builder, hprimeF1):
    IonoObservation_IngestAddHprimeF1(builder, hprimeF1)

def IonoObservation_IngestAddHprimeE(builder, hprimeE):
    builder.PrependFloat64Slot(49, hprimeE, 0.0)

def AddHprimeE(builder, hprimeE):
    IonoObservation_IngestAddHprimeE(builder, hprimeE)

def IonoObservation_IngestAddHprimeEs(builder, hprimeEs):
    builder.PrependFloat64Slot(50, hprimeEs, 0.0)

def AddHprimeEs(builder, hprimeEs):
    IonoObservation_IngestAddHprimeEs(builder, hprimeEs)

def IonoObservation_IngestAddZmE(builder, zmE):
    builder.PrependFloat64Slot(51, zmE, 0.0)

def AddZmE(builder, zmE):
    IonoObservation_IngestAddZmE(builder, zmE)

def IonoObservation_IngestAddYE(builder, yE):
    builder.PrependFloat64Slot(52, yE, 0.0)

def AddYE(builder, yE):
    IonoObservation_IngestAddYE(builder, yE)

def IonoObservation_IngestAddQf(builder, qf):
    builder.PrependFloat64Slot(53, qf, 0.0)

def AddQf(builder, qf):
    IonoObservation_IngestAddQf(builder, qf)

def IonoObservation_IngestAddQe(builder, qe):
    builder.PrependFloat64Slot(54, qe, 0.0)

def AddQe(builder, qe):
    IonoObservation_IngestAddQe(builder, qe)

def IonoObservation_IngestAddDownF(builder, downF):
    builder.PrependFloat64Slot(55, downF, 0.0)

def AddDownF(builder, downF):
    IonoObservation_IngestAddDownF(builder, downF)

def IonoObservation_IngestAddDownE(builder, downE):
    builder.PrependFloat64Slot(56, downE, 0.0)

def AddDownE(builder, downE):
    IonoObservation_IngestAddDownE(builder, downE)

def IonoObservation_IngestAddDownEs(builder, downEs):
    builder.PrependFloat64Slot(57, downEs, 0.0)

def AddDownEs(builder, downEs):
    IonoObservation_IngestAddDownEs(builder, downEs)

def IonoObservation_IngestAddFf(builder, ff):
    builder.PrependFloat64Slot(58, ff, 0.0)

def AddFf(builder, ff):
    IonoObservation_IngestAddFf(builder, ff)

def IonoObservation_IngestAddFe(builder, fe):
    builder.PrependFloat64Slot(59, fe, 0.0)

def AddFe(builder, fe):
    IonoObservation_IngestAddFe(builder, fe)

def IonoObservation_IngestAddD(builder, d):
    builder.PrependFloat64Slot(60, d, 0.0)

def AddD(builder, d):
    IonoObservation_IngestAddD(builder, d)

def IonoObservation_IngestAddFmuf(builder, fmuf):
    builder.PrependFloat64Slot(61, fmuf, 0.0)

def AddFmuf(builder, fmuf):
    IonoObservation_IngestAddFmuf(builder, fmuf)

def IonoObservation_IngestAddHprimefMuf(builder, hprimefMuf):
    builder.PrependFloat64Slot(62, hprimefMuf, 0.0)

def AddHprimefMuf(builder, hprimefMuf):
    IonoObservation_IngestAddHprimefMuf(builder, hprimefMuf)

def IonoObservation_IngestAddDeltafoF2(builder, deltafoF2):
    builder.PrependFloat64Slot(63, deltafoF2, 0.0)

def AddDeltafoF2(builder, deltafoF2):
    IonoObservation_IngestAddDeltafoF2(builder, deltafoF2)

def IonoObservation_IngestAddFoEp(builder, foEp):
    builder.PrependFloat64Slot(64, foEp, 0.0)

def AddFoEp(builder, foEp):
    IonoObservation_IngestAddFoEp(builder, foEp)

def IonoObservation_IngestAddFhprimeF(builder, fhprimeF):
    builder.PrependFloat64Slot(65, fhprimeF, 0.0)

def AddFhprimeF(builder, fhprimeF):
    IonoObservation_IngestAddFhprimeF(builder, fhprimeF)

def IonoObservation_IngestAddFhprimeF2(builder, fhprimeF2):
    builder.PrependFloat64Slot(66, fhprimeF2, 0.0)

def AddFhprimeF2(builder, fhprimeF2):
    IonoObservation_IngestAddFhprimeF2(builder, fhprimeF2)

def IonoObservation_IngestAddFoF1p(builder, foF1p):
    builder.PrependFloat64Slot(67, foF1p, 0.0)

def AddFoF1p(builder, foF1p):
    IonoObservation_IngestAddFoF1p(builder, foF1p)

def IonoObservation_IngestAddFoF2p(builder, foF2p):
    builder.PrependFloat64Slot(68, foF2p, 0.0)

def AddFoF2p(builder, foF2p):
    IonoObservation_IngestAddFoF2p(builder, foF2p)

def IonoObservation_IngestAddHmF2(builder, hmF2):
    builder.PrependFloat64Slot(69, hmF2, 0.0)

def AddHmF2(builder, hmF2):
    IonoObservation_IngestAddHmF2(builder, hmF2)

def IonoObservation_IngestAddHmF1(builder, hmF1):
    builder.PrependFloat64Slot(70, hmF1, 0.0)

def AddHmF1(builder, hmF1):
    IonoObservation_IngestAddHmF1(builder, hmF1)

def IonoObservation_IngestAddHmE(builder, hmE):
    builder.PrependFloat64Slot(71, hmE, 0.0)

def AddHmE(builder, hmE):
    IonoObservation_IngestAddHmE(builder, hmE)

def IonoObservation_IngestAddZhalfNm(builder, zhalfNm):
    builder.PrependFloat64Slot(72, zhalfNm, 0.0)

def AddZhalfNm(builder, zhalfNm):
    IonoObservation_IngestAddZhalfNm(builder, zhalfNm)

def IonoObservation_IngestAddFminEs(builder, fminEs):
    builder.PrependFloat64Slot(73, fminEs, 0.0)

def AddFminEs(builder, fminEs):
    IonoObservation_IngestAddFminEs(builder, fminEs)

def IonoObservation_IngestAddYF2(builder, yF2):
    builder.PrependFloat64Slot(74, yF2, 0.0)

def AddYF2(builder, yF2):
    IonoObservation_IngestAddYF2(builder, yF2)

def IonoObservation_IngestAddYF1(builder, yF1):
    builder.PrependFloat64Slot(75, yF1, 0.0)

def AddYF1(builder, yF1):
    IonoObservation_IngestAddYF1(builder, yF1)

def IonoObservation_IngestAddTec(builder, tec):
    builder.PrependFloat64Slot(76, tec, 0.0)

def AddTec(builder, tec):
    IonoObservation_IngestAddTec(builder, tec)

def IonoObservation_IngestAddScaleHeightF2Peak(builder, scaleHeightF2Peak):
    builder.PrependFloat64Slot(77, scaleHeightF2Peak, 0.0)

def AddScaleHeightF2Peak(builder, scaleHeightF2Peak):
    IonoObservation_IngestAddScaleHeightF2Peak(builder, scaleHeightF2Peak)

def IonoObservation_IngestAddB0(builder, b0):
    builder.PrependFloat64Slot(78, b0, 0.0)

def AddB0(builder, b0):
    IonoObservation_IngestAddB0(builder, b0)

def IonoObservation_IngestAddB1(builder, b1):
    builder.PrependFloat64Slot(79, b1, 0.0)

def AddB1(builder, b1):
    IonoObservation_IngestAddB1(builder, b1)

def IonoObservation_IngestAddD1(builder, d1):
    builder.PrependFloat64Slot(80, d1, 0.0)

def AddD1(builder, d1):
    IonoObservation_IngestAddD1(builder, d1)

def IonoObservation_IngestAddFoEa(builder, foEa):
    builder.PrependFloat64Slot(81, foEa, 0.0)

def AddFoEa(builder, foEa):
    IonoObservation_IngestAddFoEa(builder, foEa)

def IonoObservation_IngestAddHprimeEa(builder, hprimeEa):
    builder.PrependFloat64Slot(82, hprimeEa, 0.0)

def AddHprimeEa(builder, hprimeEa):
    IonoObservation_IngestAddHprimeEa(builder, hprimeEa)

def IonoObservation_IngestAddFoP(builder, foP):
    builder.PrependFloat64Slot(83, foP, 0.0)

def AddFoP(builder, foP):
    IonoObservation_IngestAddFoP(builder, foP)

def IonoObservation_IngestAddHprimeP(builder, hprimeP):
    builder.PrependFloat64Slot(84, hprimeP, 0.0)

def AddHprimeP(builder, hprimeP):
    IonoObservation_IngestAddHprimeP(builder, hprimeP)

def IonoObservation_IngestAddFbEs(builder, fbEs):
    builder.PrependFloat64Slot(85, fbEs, 0.0)

def AddFbEs(builder, fbEs):
    IonoObservation_IngestAddFbEs(builder, fbEs)

def IonoObservation_IngestAddTypeEs(builder, typeEs):
    builder.PrependUOffsetTRelativeSlot(86, flatbuffers.number_types.UOffsetTFlags.py_type(typeEs), 0)

def AddTypeEs(builder, typeEs):
    IonoObservation_IngestAddTypeEs(builder, typeEs)

def IonoObservation_IngestAddCharAtts(builder, charAtts):
    builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(charAtts), 0)

def AddCharAtts(builder, charAtts):
    IonoObservation_IngestAddCharAtts(builder, charAtts)

def IonoObservation_IngestStartCharAttsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCharAttsVector(builder, numElems):
    return IonoObservation_IngestStartCharAttsVector(builder, numElems)

def IonoObservation_IngestAddHeight(builder, height):
    builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(height), 0)

def AddHeight(builder, height):
    IonoObservation_IngestAddHeight(builder, height)

def IonoObservation_IngestStartHeightVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHeightVector(builder, numElems):
    return IonoObservation_IngestStartHeightVector(builder, numElems)

def IonoObservation_IngestAddPlasmaFrequency(builder, plasmaFrequency):
    builder.PrependUOffsetTRelativeSlot(89, flatbuffers.number_types.UOffsetTFlags.py_type(plasmaFrequency), 0)

def AddPlasmaFrequency(builder, plasmaFrequency):
    IonoObservation_IngestAddPlasmaFrequency(builder, plasmaFrequency)

def IonoObservation_IngestStartPlasmaFrequencyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlasmaFrequencyVector(builder, numElems):
    return IonoObservation_IngestStartPlasmaFrequencyVector(builder, numElems)

def IonoObservation_IngestAddPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertainty):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(plasmaFrequencyUncertainty), 0)

def AddPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertainty):
    IonoObservation_IngestAddPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertainty)

def IonoObservation_IngestStartPlasmaFrequencyUncertaintyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlasmaFrequencyUncertaintyVector(builder, numElems):
    return IonoObservation_IngestStartPlasmaFrequencyUncertaintyVector(builder, numElems)

def IonoObservation_IngestAddElectronDensity(builder, electronDensity):
    builder.PrependUOffsetTRelativeSlot(91, flatbuffers.number_types.UOffsetTFlags.py_type(electronDensity), 0)

def AddElectronDensity(builder, electronDensity):
    IonoObservation_IngestAddElectronDensity(builder, electronDensity)

def IonoObservation_IngestStartElectronDensityVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElectronDensityVector(builder, numElems):
    return IonoObservation_IngestStartElectronDensityVector(builder, numElems)

def IonoObservation_IngestAddElectronDensityUncertainty(builder, electronDensityUncertainty):
    builder.PrependUOffsetTRelativeSlot(92, flatbuffers.number_types.UOffsetTFlags.py_type(electronDensityUncertainty), 0)

def AddElectronDensityUncertainty(builder, electronDensityUncertainty):
    IonoObservation_IngestAddElectronDensityUncertainty(builder, electronDensityUncertainty)

def IonoObservation_IngestStartElectronDensityUncertaintyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElectronDensityUncertaintyVector(builder, numElems):
    return IonoObservation_IngestStartElectronDensityUncertaintyVector(builder, numElems)

def IonoObservation_IngestAddArtistFlags(builder, artistFlags):
    builder.PrependUOffsetTRelativeSlot(93, flatbuffers.number_types.UOffsetTFlags.py_type(artistFlags), 0)

def AddArtistFlags(builder, artistFlags):
    IonoObservation_IngestAddArtistFlags(builder, artistFlags)

def IonoObservation_IngestStartArtistFlagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArtistFlagsVector(builder, numElems):
    return IonoObservation_IngestStartArtistFlagsVector(builder, numElems)

def IonoObservation_IngestAddTraceGeneric(builder, traceGeneric):
    builder.PrependUOffsetTRelativeSlot(94, flatbuffers.number_types.UOffsetTFlags.py_type(traceGeneric), 0)

def AddTraceGeneric(builder, traceGeneric):
    IonoObservation_IngestAddTraceGeneric(builder, traceGeneric)

def IonoObservation_IngestAddTidPhaseSpeeds(builder, tidPhaseSpeeds):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(tidPhaseSpeeds), 0)

def AddTidPhaseSpeeds(builder, tidPhaseSpeeds):
    IonoObservation_IngestAddTidPhaseSpeeds(builder, tidPhaseSpeeds)

def IonoObservation_IngestStartTidPhaseSpeedsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTidPhaseSpeedsVector(builder, numElems):
    return IonoObservation_IngestStartTidPhaseSpeedsVector(builder, numElems)

def IonoObservation_IngestAddTidAzimuth(builder, tidAzimuth):
    builder.PrependUOffsetTRelativeSlot(96, flatbuffers.number_types.UOffsetTFlags.py_type(tidAzimuth), 0)

def AddTidAzimuth(builder, tidAzimuth):
    IonoObservation_IngestAddTidAzimuth(builder, tidAzimuth)

def IonoObservation_IngestStartTidAzimuthVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTidAzimuthVector(builder, numElems):
    return IonoObservation_IngestStartTidAzimuthVector(builder, numElems)

def IonoObservation_IngestAddTidPeriods(builder, tidPeriods):
    builder.PrependUOffsetTRelativeSlot(97, flatbuffers.number_types.UOffsetTFlags.py_type(tidPeriods), 0)

def AddTidPeriods(builder, tidPeriods):
    IonoObservation_IngestAddTidPeriods(builder, tidPeriods)

def IonoObservation_IngestStartTidPeriodsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTidPeriodsVector(builder, numElems):
    return IonoObservation_IngestStartTidPeriodsVector(builder, numElems)

def IonoObservation_IngestAddDatum(builder, datum):
    builder.PrependUOffsetTRelativeSlot(98, flatbuffers.number_types.UOffsetTFlags.py_type(datum), 0)

def AddDatum(builder, datum):
    IonoObservation_IngestAddDatum(builder, datum)

def IonoObservation_IngestAddPlatformName(builder, platformName):
    builder.PrependUOffsetTRelativeSlot(99, flatbuffers.number_types.UOffsetTFlags.py_type(platformName), 0)

def AddPlatformName(builder, platformName):
    IonoObservation_IngestAddPlatformName(builder, platformName)

def IonoObservation_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(100, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    IonoObservation_IngestAddCreatedAt(builder, createdAt)

def IonoObservation_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(101, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    IonoObservation_IngestAddCreatedBy(builder, createdBy)

def IonoObservation_IngestAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(102, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    IonoObservation_IngestAddUpdatedAt(builder, updatedAt)

def IonoObservation_IngestAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(103, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    IonoObservation_IngestAddUpdatedBy(builder, updatedBy)

def IonoObservation_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(104, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    IonoObservation_IngestAddSource(builder, source)

def IonoObservation_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(105, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    IonoObservation_IngestAddOrigin(builder, origin)

def IonoObservation_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(106, dataMode, 0)

def AddDataMode(builder, dataMode):
    IonoObservation_IngestAddDataMode(builder, dataMode)

def IonoObservation_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(107, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    IonoObservation_IngestAddOrigNetwork(builder, origNetwork)

def IonoObservation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservation_IngestT(object):

    # IonoObservation_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.system = None  # type: str
        self.neProfileName = None  # type: str
        self.neProfileVersion = 0.0  # type: float
        self.scalerInfo = None  # type: str
        self.densityProfile = None  # type: str
        self.stationId = None  # type: str
        self.startTimeUtc = None  # type: str
        self.systemInfo = None  # type: str
        self.systemNotes = None  # type: str
        self.transmitCoordinates = None  # type: List[str]
        self.transmitSensorType = 0  # type: int
        self.receiveCoordinates = None  # type: List[str]
        self.receiveSensorType = 0  # type: int
        self.antennaElementPosition = None  # type: str
        self.antennaElementPositionCoordinateSystem = 0  # type: int
        self.power = None  # type: str
        self.range = None  # type: str
        self.frequency = None  # type: str
        self.polarization = None  # type: str
        self.azimuth = None  # type: str
        self.elevation = None  # type: str
        self.restrictedFrequency = None  # type: List[str]
        self.restrictedFrequencyNotes = None  # type: str
        self.doppler = None  # type: str
        self.time = None  # type: str
        self.stokes = None  # type: str
        self.amplitude = None  # type: str
        self.phase = None  # type: str
        self.foF2 = 0.0  # type: float
        self.foF1 = 0.0  # type: float
        self.fxF2 = 0.0  # type: float
        self.fxF1 = 0.0  # type: float
        self.md = 0.0  # type: float
        self.luf = 0.0  # type: float
        self.mufd = 0.0  # type: float
        self.fmin = 0.0  # type: float
        self.foEs = 0.0  # type: float
        self.fminF = 0.0  # type: float
        self.fminE = 0.0  # type: float
        self.foE = 0.0  # type: float
        self.fxE = 0.0  # type: float
        self.fxI = 0.0  # type: float
        self.hprimeF = 0.0  # type: float
        self.hprimeF2 = 0.0  # type: float
        self.hprimeF1 = 0.0  # type: float
        self.hprimeE = 0.0  # type: float
        self.hprimeEs = 0.0  # type: float
        self.zmE = 0.0  # type: float
        self.yE = 0.0  # type: float
        self.qf = 0.0  # type: float
        self.qe = 0.0  # type: float
        self.downF = 0.0  # type: float
        self.downE = 0.0  # type: float
        self.downEs = 0.0  # type: float
        self.ff = 0.0  # type: float
        self.fe = 0.0  # type: float
        self.d = 0.0  # type: float
        self.fmuf = 0.0  # type: float
        self.hprimefMuf = 0.0  # type: float
        self.deltafoF2 = 0.0  # type: float
        self.foEp = 0.0  # type: float
        self.fhprimeF = 0.0  # type: float
        self.fhprimeF2 = 0.0  # type: float
        self.foF1p = 0.0  # type: float
        self.foF2p = 0.0  # type: float
        self.hmF2 = 0.0  # type: float
        self.hmF1 = 0.0  # type: float
        self.hmE = 0.0  # type: float
        self.zhalfNm = 0.0  # type: float
        self.fminEs = 0.0  # type: float
        self.yF2 = 0.0  # type: float
        self.yF1 = 0.0  # type: float
        self.tec = 0.0  # type: float
        self.scaleHeightF2Peak = 0.0  # type: float
        self.b0 = 0.0  # type: float
        self.b1 = 0.0  # type: float
        self.d1 = 0.0  # type: float
        self.foEa = 0.0  # type: float
        self.hprimeEa = 0.0  # type: float
        self.foP = 0.0  # type: float
        self.hprimeP = 0.0  # type: float
        self.fbEs = 0.0  # type: float
        self.typeEs = None  # type: str
        self.charAtts = None  # type: List[str]
        self.height = None  # type: List[str]
        self.plasmaFrequency = None  # type: List[str]
        self.plasmaFrequencyUncertainty = None  # type: List[str]
        self.electronDensity = None  # type: List[str]
        self.electronDensityUncertainty = None  # type: List[str]
        self.artistFlags = None  # type: List[str]
        self.traceGeneric = None  # type: str
        self.tidPhaseSpeeds = None  # type: List[str]
        self.tidAzimuth = None  # type: List[str]
        self.tidPeriods = None  # type: List[str]
        self.datum = None  # type: str
        self.platformName = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationIngest = IonoObservation_Ingest()
        ionoObservationIngest.Init(buf, pos)
        return cls.InitFromObj(ionoObservationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationIngest):
        x = IonoObservation_IngestT()
        x._UnPack(ionoObservationIngest)
        return x

    # IonoObservation_IngestT
    def _UnPack(self, ionoObservationIngest):
        if ionoObservationIngest is None:
            return
        self.id = ionoObservationIngest.Id()
        self.classificationMarking = ionoObservationIngest.ClassificationMarking()
        self.idSensor = ionoObservationIngest.IdSensor()
        self.origSensorId = ionoObservationIngest.OrigSensorId()
        self.system = ionoObservationIngest.System()
        self.neProfileName = ionoObservationIngest.NeProfileName()
        self.neProfileVersion = ionoObservationIngest.NeProfileVersion()
        self.scalerInfo = ionoObservationIngest.ScalerInfo()
        self.densityProfile = ionoObservationIngest.DensityProfile()
        self.stationId = ionoObservationIngest.StationId()
        self.startTimeUtc = ionoObservationIngest.StartTimeUtc()
        self.systemInfo = ionoObservationIngest.SystemInfo()
        self.systemNotes = ionoObservationIngest.SystemNotes()
        if not ionoObservationIngest.TransmitCoordinatesIsNone():
            self.transmitCoordinates = []
            for i in range(ionoObservationIngest.TransmitCoordinatesLength()):
                self.transmitCoordinates.append(ionoObservationIngest.TransmitCoordinates(i))
        self.transmitSensorType = ionoObservationIngest.TransmitSensorType()
        if not ionoObservationIngest.ReceiveCoordinatesIsNone():
            self.receiveCoordinates = []
            for i in range(ionoObservationIngest.ReceiveCoordinatesLength()):
                self.receiveCoordinates.append(ionoObservationIngest.ReceiveCoordinates(i))
        self.receiveSensorType = ionoObservationIngest.ReceiveSensorType()
        self.antennaElementPosition = ionoObservationIngest.AntennaElementPosition()
        self.antennaElementPositionCoordinateSystem = ionoObservationIngest.AntennaElementPositionCoordinateSystem()
        self.power = ionoObservationIngest.Power()
        self.range = ionoObservationIngest.Range()
        self.frequency = ionoObservationIngest.Frequency()
        self.polarization = ionoObservationIngest.Polarization()
        self.azimuth = ionoObservationIngest.Azimuth()
        self.elevation = ionoObservationIngest.Elevation()
        if not ionoObservationIngest.RestrictedFrequencyIsNone():
            self.restrictedFrequency = []
            for i in range(ionoObservationIngest.RestrictedFrequencyLength()):
                self.restrictedFrequency.append(ionoObservationIngest.RestrictedFrequency(i))
        self.restrictedFrequencyNotes = ionoObservationIngest.RestrictedFrequencyNotes()
        self.doppler = ionoObservationIngest.Doppler()
        self.time = ionoObservationIngest.Time()
        self.stokes = ionoObservationIngest.Stokes()
        self.amplitude = ionoObservationIngest.Amplitude()
        self.phase = ionoObservationIngest.Phase()
        self.foF2 = ionoObservationIngest.FoF2()
        self.foF1 = ionoObservationIngest.FoF1()
        self.fxF2 = ionoObservationIngest.FxF2()
        self.fxF1 = ionoObservationIngest.FxF1()
        self.md = ionoObservationIngest.Md()
        self.luf = ionoObservationIngest.Luf()
        self.mufd = ionoObservationIngest.Mufd()
        self.fmin = ionoObservationIngest.Fmin()
        self.foEs = ionoObservationIngest.FoEs()
        self.fminF = ionoObservationIngest.FminF()
        self.fminE = ionoObservationIngest.FminE()
        self.foE = ionoObservationIngest.FoE()
        self.fxE = ionoObservationIngest.FxE()
        self.fxI = ionoObservationIngest.FxI()
        self.hprimeF = ionoObservationIngest.HprimeF()
        self.hprimeF2 = ionoObservationIngest.HprimeF2()
        self.hprimeF1 = ionoObservationIngest.HprimeF1()
        self.hprimeE = ionoObservationIngest.HprimeE()
        self.hprimeEs = ionoObservationIngest.HprimeEs()
        self.zmE = ionoObservationIngest.ZmE()
        self.yE = ionoObservationIngest.YE()
        self.qf = ionoObservationIngest.Qf()
        self.qe = ionoObservationIngest.Qe()
        self.downF = ionoObservationIngest.DownF()
        self.downE = ionoObservationIngest.DownE()
        self.downEs = ionoObservationIngest.DownEs()
        self.ff = ionoObservationIngest.Ff()
        self.fe = ionoObservationIngest.Fe()
        self.d = ionoObservationIngest.D()
        self.fmuf = ionoObservationIngest.Fmuf()
        self.hprimefMuf = ionoObservationIngest.HprimefMuf()
        self.deltafoF2 = ionoObservationIngest.DeltafoF2()
        self.foEp = ionoObservationIngest.FoEp()
        self.fhprimeF = ionoObservationIngest.FhprimeF()
        self.fhprimeF2 = ionoObservationIngest.FhprimeF2()
        self.foF1p = ionoObservationIngest.FoF1p()
        self.foF2p = ionoObservationIngest.FoF2p()
        self.hmF2 = ionoObservationIngest.HmF2()
        self.hmF1 = ionoObservationIngest.HmF1()
        self.hmE = ionoObservationIngest.HmE()
        self.zhalfNm = ionoObservationIngest.ZhalfNm()
        self.fminEs = ionoObservationIngest.FminEs()
        self.yF2 = ionoObservationIngest.YF2()
        self.yF1 = ionoObservationIngest.YF1()
        self.tec = ionoObservationIngest.Tec()
        self.scaleHeightF2Peak = ionoObservationIngest.ScaleHeightF2Peak()
        self.b0 = ionoObservationIngest.B0()
        self.b1 = ionoObservationIngest.B1()
        self.d1 = ionoObservationIngest.D1()
        self.foEa = ionoObservationIngest.FoEa()
        self.hprimeEa = ionoObservationIngest.HprimeEa()
        self.foP = ionoObservationIngest.FoP()
        self.hprimeP = ionoObservationIngest.HprimeP()
        self.fbEs = ionoObservationIngest.FbEs()
        self.typeEs = ionoObservationIngest.TypeEs()
        if not ionoObservationIngest.CharAttsIsNone():
            self.charAtts = []
            for i in range(ionoObservationIngest.CharAttsLength()):
                self.charAtts.append(ionoObservationIngest.CharAtts(i))
        if not ionoObservationIngest.HeightIsNone():
            self.height = []
            for i in range(ionoObservationIngest.HeightLength()):
                self.height.append(ionoObservationIngest.Height(i))
        if not ionoObservationIngest.PlasmaFrequencyIsNone():
            self.plasmaFrequency = []
            for i in range(ionoObservationIngest.PlasmaFrequencyLength()):
                self.plasmaFrequency.append(ionoObservationIngest.PlasmaFrequency(i))
        if not ionoObservationIngest.PlasmaFrequencyUncertaintyIsNone():
            self.plasmaFrequencyUncertainty = []
            for i in range(ionoObservationIngest.PlasmaFrequencyUncertaintyLength()):
                self.plasmaFrequencyUncertainty.append(ionoObservationIngest.PlasmaFrequencyUncertainty(i))
        if not ionoObservationIngest.ElectronDensityIsNone():
            self.electronDensity = []
            for i in range(ionoObservationIngest.ElectronDensityLength()):
                self.electronDensity.append(ionoObservationIngest.ElectronDensity(i))
        if not ionoObservationIngest.ElectronDensityUncertaintyIsNone():
            self.electronDensityUncertainty = []
            for i in range(ionoObservationIngest.ElectronDensityUncertaintyLength()):
                self.electronDensityUncertainty.append(ionoObservationIngest.ElectronDensityUncertainty(i))
        if not ionoObservationIngest.ArtistFlagsIsNone():
            self.artistFlags = []
            for i in range(ionoObservationIngest.ArtistFlagsLength()):
                self.artistFlags.append(ionoObservationIngest.ArtistFlags(i))
        self.traceGeneric = ionoObservationIngest.TraceGeneric()
        if not ionoObservationIngest.TidPhaseSpeedsIsNone():
            self.tidPhaseSpeeds = []
            for i in range(ionoObservationIngest.TidPhaseSpeedsLength()):
                self.tidPhaseSpeeds.append(ionoObservationIngest.TidPhaseSpeeds(i))
        if not ionoObservationIngest.TidAzimuthIsNone():
            self.tidAzimuth = []
            for i in range(ionoObservationIngest.TidAzimuthLength()):
                self.tidAzimuth.append(ionoObservationIngest.TidAzimuth(i))
        if not ionoObservationIngest.TidPeriodsIsNone():
            self.tidPeriods = []
            for i in range(ionoObservationIngest.TidPeriodsLength()):
                self.tidPeriods.append(ionoObservationIngest.TidPeriods(i))
        self.datum = ionoObservationIngest.Datum()
        self.platformName = ionoObservationIngest.PlatformName()
        self.createdAt = ionoObservationIngest.CreatedAt()
        self.createdBy = ionoObservationIngest.CreatedBy()
        self.updatedAt = ionoObservationIngest.UpdatedAt()
        self.updatedBy = ionoObservationIngest.UpdatedBy()
        self.source = ionoObservationIngest.Source()
        self.origin = ionoObservationIngest.Origin()
        self.dataMode = ionoObservationIngest.DataMode()
        self.origNetwork = ionoObservationIngest.OrigNetwork()

    # IonoObservation_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.system is not None:
            system = builder.CreateString(self.system)
        if self.neProfileName is not None:
            neProfileName = builder.CreateString(self.neProfileName)
        if self.scalerInfo is not None:
            scalerInfo = builder.CreateString(self.scalerInfo)
        if self.densityProfile is not None:
            densityProfile = builder.CreateString(self.densityProfile)
        if self.stationId is not None:
            stationId = builder.CreateString(self.stationId)
        if self.startTimeUtc is not None:
            startTimeUtc = builder.CreateString(self.startTimeUtc)
        if self.systemInfo is not None:
            systemInfo = builder.CreateString(self.systemInfo)
        if self.systemNotes is not None:
            systemNotes = builder.CreateString(self.systemNotes)
        if self.transmitCoordinates is not None:
            transmitCoordinateslist = []
            for i in range(len(self.transmitCoordinates)):
                transmitCoordinateslist.append(builder.CreateString(self.transmitCoordinates[i]))
            IonoObservation_IngestStartTransmitCoordinatesVector(builder, len(self.transmitCoordinates))
            for i in reversed(range(len(self.transmitCoordinates))):
                builder.PrependUOffsetTRelative(transmitCoordinateslist[i])
            transmitCoordinates = builder.EndVector()
        if self.receiveCoordinates is not None:
            receiveCoordinateslist = []
            for i in range(len(self.receiveCoordinates)):
                receiveCoordinateslist.append(builder.CreateString(self.receiveCoordinates[i]))
            IonoObservation_IngestStartReceiveCoordinatesVector(builder, len(self.receiveCoordinates))
            for i in reversed(range(len(self.receiveCoordinates))):
                builder.PrependUOffsetTRelative(receiveCoordinateslist[i])
            receiveCoordinates = builder.EndVector()
        if self.antennaElementPosition is not None:
            antennaElementPosition = builder.CreateString(self.antennaElementPosition)
        if self.power is not None:
            power = builder.CreateString(self.power)
        if self.range is not None:
            range = builder.CreateString(self.range)
        if self.frequency is not None:
            frequency = builder.CreateString(self.frequency)
        if self.polarization is not None:
            polarization = builder.CreateString(self.polarization)
        if self.azimuth is not None:
            azimuth = builder.CreateString(self.azimuth)
        if self.elevation is not None:
            elevation = builder.CreateString(self.elevation)
        if self.restrictedFrequency is not None:
            restrictedFrequencylist = []
            for i in range(len(self.restrictedFrequency)):
                restrictedFrequencylist.append(builder.CreateString(self.restrictedFrequency[i]))
            IonoObservation_IngestStartRestrictedFrequencyVector(builder, len(self.restrictedFrequency))
            for i in reversed(range(len(self.restrictedFrequency))):
                builder.PrependUOffsetTRelative(restrictedFrequencylist[i])
            restrictedFrequency = builder.EndVector()
        if self.restrictedFrequencyNotes is not None:
            restrictedFrequencyNotes = builder.CreateString(self.restrictedFrequencyNotes)
        if self.doppler is not None:
            doppler = builder.CreateString(self.doppler)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.stokes is not None:
            stokes = builder.CreateString(self.stokes)
        if self.amplitude is not None:
            amplitude = builder.CreateString(self.amplitude)
        if self.phase is not None:
            phase = builder.CreateString(self.phase)
        if self.typeEs is not None:
            typeEs = builder.CreateString(self.typeEs)
        if self.charAtts is not None:
            charAttslist = []
            for i in range(len(self.charAtts)):
                charAttslist.append(builder.CreateString(self.charAtts[i]))
            IonoObservation_IngestStartCharAttsVector(builder, len(self.charAtts))
            for i in reversed(range(len(self.charAtts))):
                builder.PrependUOffsetTRelative(charAttslist[i])
            charAtts = builder.EndVector()
        if self.height is not None:
            heightlist = []
            for i in range(len(self.height)):
                heightlist.append(builder.CreateString(self.height[i]))
            IonoObservation_IngestStartHeightVector(builder, len(self.height))
            for i in reversed(range(len(self.height))):
                builder.PrependUOffsetTRelative(heightlist[i])
            height = builder.EndVector()
        if self.plasmaFrequency is not None:
            plasmaFrequencylist = []
            for i in range(len(self.plasmaFrequency)):
                plasmaFrequencylist.append(builder.CreateString(self.plasmaFrequency[i]))
            IonoObservation_IngestStartPlasmaFrequencyVector(builder, len(self.plasmaFrequency))
            for i in reversed(range(len(self.plasmaFrequency))):
                builder.PrependUOffsetTRelative(plasmaFrequencylist[i])
            plasmaFrequency = builder.EndVector()
        if self.plasmaFrequencyUncertainty is not None:
            plasmaFrequencyUncertaintylist = []
            for i in range(len(self.plasmaFrequencyUncertainty)):
                plasmaFrequencyUncertaintylist.append(builder.CreateString(self.plasmaFrequencyUncertainty[i]))
            IonoObservation_IngestStartPlasmaFrequencyUncertaintyVector(builder, len(self.plasmaFrequencyUncertainty))
            for i in reversed(range(len(self.plasmaFrequencyUncertainty))):
                builder.PrependUOffsetTRelative(plasmaFrequencyUncertaintylist[i])
            plasmaFrequencyUncertainty = builder.EndVector()
        if self.electronDensity is not None:
            electronDensitylist = []
            for i in range(len(self.electronDensity)):
                electronDensitylist.append(builder.CreateString(self.electronDensity[i]))
            IonoObservation_IngestStartElectronDensityVector(builder, len(self.electronDensity))
            for i in reversed(range(len(self.electronDensity))):
                builder.PrependUOffsetTRelative(electronDensitylist[i])
            electronDensity = builder.EndVector()
        if self.electronDensityUncertainty is not None:
            electronDensityUncertaintylist = []
            for i in range(len(self.electronDensityUncertainty)):
                electronDensityUncertaintylist.append(builder.CreateString(self.electronDensityUncertainty[i]))
            IonoObservation_IngestStartElectronDensityUncertaintyVector(builder, len(self.electronDensityUncertainty))
            for i in reversed(range(len(self.electronDensityUncertainty))):
                builder.PrependUOffsetTRelative(electronDensityUncertaintylist[i])
            electronDensityUncertainty = builder.EndVector()
        if self.artistFlags is not None:
            artistFlagslist = []
            for i in range(len(self.artistFlags)):
                artistFlagslist.append(builder.CreateString(self.artistFlags[i]))
            IonoObservation_IngestStartArtistFlagsVector(builder, len(self.artistFlags))
            for i in reversed(range(len(self.artistFlags))):
                builder.PrependUOffsetTRelative(artistFlagslist[i])
            artistFlags = builder.EndVector()
        if self.traceGeneric is not None:
            traceGeneric = builder.CreateString(self.traceGeneric)
        if self.tidPhaseSpeeds is not None:
            tidPhaseSpeedslist = []
            for i in range(len(self.tidPhaseSpeeds)):
                tidPhaseSpeedslist.append(builder.CreateString(self.tidPhaseSpeeds[i]))
            IonoObservation_IngestStartTidPhaseSpeedsVector(builder, len(self.tidPhaseSpeeds))
            for i in reversed(range(len(self.tidPhaseSpeeds))):
                builder.PrependUOffsetTRelative(tidPhaseSpeedslist[i])
            tidPhaseSpeeds = builder.EndVector()
        if self.tidAzimuth is not None:
            tidAzimuthlist = []
            for i in range(len(self.tidAzimuth)):
                tidAzimuthlist.append(builder.CreateString(self.tidAzimuth[i]))
            IonoObservation_IngestStartTidAzimuthVector(builder, len(self.tidAzimuth))
            for i in reversed(range(len(self.tidAzimuth))):
                builder.PrependUOffsetTRelative(tidAzimuthlist[i])
            tidAzimuth = builder.EndVector()
        if self.tidPeriods is not None:
            tidPeriodslist = []
            for i in range(len(self.tidPeriods)):
                tidPeriodslist.append(builder.CreateString(self.tidPeriods[i]))
            IonoObservation_IngestStartTidPeriodsVector(builder, len(self.tidPeriods))
            for i in reversed(range(len(self.tidPeriods))):
                builder.PrependUOffsetTRelative(tidPeriodslist[i])
            tidPeriods = builder.EndVector()
        if self.datum is not None:
            datum = builder.CreateString(self.datum)
        if self.platformName is not None:
            platformName = builder.CreateString(self.platformName)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        IonoObservation_IngestStart(builder)
        if self.id is not None:
            IonoObservation_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            IonoObservation_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idSensor is not None:
            IonoObservation_IngestAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            IonoObservation_IngestAddOrigSensorId(builder, origSensorId)
        if self.system is not None:
            IonoObservation_IngestAddSystem(builder, system)
        if self.neProfileName is not None:
            IonoObservation_IngestAddNeProfileName(builder, neProfileName)
        IonoObservation_IngestAddNeProfileVersion(builder, self.neProfileVersion)
        if self.scalerInfo is not None:
            IonoObservation_IngestAddScalerInfo(builder, scalerInfo)
        if self.densityProfile is not None:
            IonoObservation_IngestAddDensityProfile(builder, densityProfile)
        if self.stationId is not None:
            IonoObservation_IngestAddStationId(builder, stationId)
        if self.startTimeUtc is not None:
            IonoObservation_IngestAddStartTimeUtc(builder, startTimeUtc)
        if self.systemInfo is not None:
            IonoObservation_IngestAddSystemInfo(builder, systemInfo)
        if self.systemNotes is not None:
            IonoObservation_IngestAddSystemNotes(builder, systemNotes)
        if self.transmitCoordinates is not None:
            IonoObservation_IngestAddTransmitCoordinates(builder, transmitCoordinates)
        IonoObservation_IngestAddTransmitSensorType(builder, self.transmitSensorType)
        if self.receiveCoordinates is not None:
            IonoObservation_IngestAddReceiveCoordinates(builder, receiveCoordinates)
        IonoObservation_IngestAddReceiveSensorType(builder, self.receiveSensorType)
        if self.antennaElementPosition is not None:
            IonoObservation_IngestAddAntennaElementPosition(builder, antennaElementPosition)
        IonoObservation_IngestAddAntennaElementPositionCoordinateSystem(builder, self.antennaElementPositionCoordinateSystem)
        if self.power is not None:
            IonoObservation_IngestAddPower(builder, power)
        if self.range is not None:
            IonoObservation_IngestAddRange(builder, range)
        if self.frequency is not None:
            IonoObservation_IngestAddFrequency(builder, frequency)
        if self.polarization is not None:
            IonoObservation_IngestAddPolarization(builder, polarization)
        if self.azimuth is not None:
            IonoObservation_IngestAddAzimuth(builder, azimuth)
        if self.elevation is not None:
            IonoObservation_IngestAddElevation(builder, elevation)
        if self.restrictedFrequency is not None:
            IonoObservation_IngestAddRestrictedFrequency(builder, restrictedFrequency)
        if self.restrictedFrequencyNotes is not None:
            IonoObservation_IngestAddRestrictedFrequencyNotes(builder, restrictedFrequencyNotes)
        if self.doppler is not None:
            IonoObservation_IngestAddDoppler(builder, doppler)
        if self.time is not None:
            IonoObservation_IngestAddTime(builder, time)
        if self.stokes is not None:
            IonoObservation_IngestAddStokes(builder, stokes)
        if self.amplitude is not None:
            IonoObservation_IngestAddAmplitude(builder, amplitude)
        if self.phase is not None:
            IonoObservation_IngestAddPhase(builder, phase)
        IonoObservation_IngestAddFoF2(builder, self.foF2)
        IonoObservation_IngestAddFoF1(builder, self.foF1)
        IonoObservation_IngestAddFxF2(builder, self.fxF2)
        IonoObservation_IngestAddFxF1(builder, self.fxF1)
        IonoObservation_IngestAddMd(builder, self.md)
        IonoObservation_IngestAddLuf(builder, self.luf)
        IonoObservation_IngestAddMufd(builder, self.mufd)
        IonoObservation_IngestAddFmin(builder, self.fmin)
        IonoObservation_IngestAddFoEs(builder, self.foEs)
        IonoObservation_IngestAddFminF(builder, self.fminF)
        IonoObservation_IngestAddFminE(builder, self.fminE)
        IonoObservation_IngestAddFoE(builder, self.foE)
        IonoObservation_IngestAddFxE(builder, self.fxE)
        IonoObservation_IngestAddFxI(builder, self.fxI)
        IonoObservation_IngestAddHprimeF(builder, self.hprimeF)
        IonoObservation_IngestAddHprimeF2(builder, self.hprimeF2)
        IonoObservation_IngestAddHprimeF1(builder, self.hprimeF1)
        IonoObservation_IngestAddHprimeE(builder, self.hprimeE)
        IonoObservation_IngestAddHprimeEs(builder, self.hprimeEs)
        IonoObservation_IngestAddZmE(builder, self.zmE)
        IonoObservation_IngestAddYE(builder, self.yE)
        IonoObservation_IngestAddQf(builder, self.qf)
        IonoObservation_IngestAddQe(builder, self.qe)
        IonoObservation_IngestAddDownF(builder, self.downF)
        IonoObservation_IngestAddDownE(builder, self.downE)
        IonoObservation_IngestAddDownEs(builder, self.downEs)
        IonoObservation_IngestAddFf(builder, self.ff)
        IonoObservation_IngestAddFe(builder, self.fe)
        IonoObservation_IngestAddD(builder, self.d)
        IonoObservation_IngestAddFmuf(builder, self.fmuf)
        IonoObservation_IngestAddHprimefMuf(builder, self.hprimefMuf)
        IonoObservation_IngestAddDeltafoF2(builder, self.deltafoF2)
        IonoObservation_IngestAddFoEp(builder, self.foEp)
        IonoObservation_IngestAddFhprimeF(builder, self.fhprimeF)
        IonoObservation_IngestAddFhprimeF2(builder, self.fhprimeF2)
        IonoObservation_IngestAddFoF1p(builder, self.foF1p)
        IonoObservation_IngestAddFoF2p(builder, self.foF2p)
        IonoObservation_IngestAddHmF2(builder, self.hmF2)
        IonoObservation_IngestAddHmF1(builder, self.hmF1)
        IonoObservation_IngestAddHmE(builder, self.hmE)
        IonoObservation_IngestAddZhalfNm(builder, self.zhalfNm)
        IonoObservation_IngestAddFminEs(builder, self.fminEs)
        IonoObservation_IngestAddYF2(builder, self.yF2)
        IonoObservation_IngestAddYF1(builder, self.yF1)
        IonoObservation_IngestAddTec(builder, self.tec)
        IonoObservation_IngestAddScaleHeightF2Peak(builder, self.scaleHeightF2Peak)
        IonoObservation_IngestAddB0(builder, self.b0)
        IonoObservation_IngestAddB1(builder, self.b1)
        IonoObservation_IngestAddD1(builder, self.d1)
        IonoObservation_IngestAddFoEa(builder, self.foEa)
        IonoObservation_IngestAddHprimeEa(builder, self.hprimeEa)
        IonoObservation_IngestAddFoP(builder, self.foP)
        IonoObservation_IngestAddHprimeP(builder, self.hprimeP)
        IonoObservation_IngestAddFbEs(builder, self.fbEs)
        if self.typeEs is not None:
            IonoObservation_IngestAddTypeEs(builder, typeEs)
        if self.charAtts is not None:
            IonoObservation_IngestAddCharAtts(builder, charAtts)
        if self.height is not None:
            IonoObservation_IngestAddHeight(builder, height)
        if self.plasmaFrequency is not None:
            IonoObservation_IngestAddPlasmaFrequency(builder, plasmaFrequency)
        if self.plasmaFrequencyUncertainty is not None:
            IonoObservation_IngestAddPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertainty)
        if self.electronDensity is not None:
            IonoObservation_IngestAddElectronDensity(builder, electronDensity)
        if self.electronDensityUncertainty is not None:
            IonoObservation_IngestAddElectronDensityUncertainty(builder, electronDensityUncertainty)
        if self.artistFlags is not None:
            IonoObservation_IngestAddArtistFlags(builder, artistFlags)
        if self.traceGeneric is not None:
            IonoObservation_IngestAddTraceGeneric(builder, traceGeneric)
        if self.tidPhaseSpeeds is not None:
            IonoObservation_IngestAddTidPhaseSpeeds(builder, tidPhaseSpeeds)
        if self.tidAzimuth is not None:
            IonoObservation_IngestAddTidAzimuth(builder, tidAzimuth)
        if self.tidPeriods is not None:
            IonoObservation_IngestAddTidPeriods(builder, tidPeriods)
        if self.datum is not None:
            IonoObservation_IngestAddDatum(builder, datum)
        if self.platformName is not None:
            IonoObservation_IngestAddPlatformName(builder, platformName)
        if self.createdAt is not None:
            IonoObservation_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            IonoObservation_IngestAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            IonoObservation_IngestAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            IonoObservation_IngestAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            IonoObservation_IngestAddSource(builder, source)
        if self.origin is not None:
            IonoObservation_IngestAddOrigin(builder, origin)
        IonoObservation_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            IonoObservation_IngestAddOrigNetwork(builder, origNetwork)
        ionoObservationIngest = IonoObservation_IngestEnd(builder)
        return ionoObservationIngest
