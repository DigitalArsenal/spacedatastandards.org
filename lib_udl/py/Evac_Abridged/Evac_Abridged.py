# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
class Evac_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Evac_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvac_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Evac_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # Evac_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MEDEVACEVENT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Evac_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Evac_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
    # Example: /// Example: MedEvac-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Abridged
    def MedevacId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this medevac record (REQUEST, RESPONSE).
    # Example: /// Example: REQUEST
    # Constraints: Minimum length = 1, Maximum length = 8
    # Evac_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
    # Example: /// Example: GROUND
    # Constraints: Minimum length = 0, Maximum length = 8
    # Evac_Abridged
    def MissionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of a weather report associated with this evacuation.
    # Example: /// Example: WeatherReport-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Abridged
    def IdWeatherReport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of people Killed In Action.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # Evac_Abridged
    def NumKia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of people Wounded In Action.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Evac_Abridged
    def NumWia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of littered personnel requiring evacuation.
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # Evac_Abridged
    def NumLitter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of ambulatory personnel requiring evacuation.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Evac_Abridged
    def NumAmbulatory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating whether the mission requires medical personnel.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Evac_Abridged
    def MedicReq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Externally provided Medevac request number (e.g. MED.1.223908).
    # Example: /// Example: MED.1.234567
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Abridged
    def ReqNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The request time, in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # Evac_Abridged
    def ReqTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign of this medevac requestor.
    # Example: /// Example: Bravo
    # Constraints: Minimum length = 0, Maximum length = 36
    # Evac_Abridged
    def ReqCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The expected pickup time, in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-20T16:00:00.123Z
    # Constraints: No constraints specified.
    # Evac_Abridged
    def PickupTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 75.1234
    # Constraints: No constraints specified.
    # Evac_Abridged
    def PickupLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 175.1234
    # Constraints: No constraints specified.
    # Evac_Abridged
    def PickupLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
    # Example: /// Example: 30.1234
    # Constraints: No constraints specified.
    # Evac_Abridged
    def PickupAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    # Example: /// Example: 10.1234
    # Constraints: No constraints specified.
    # Evac_Abridged
    def Ce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height above lat/lon point, in meters (1-sigma, if representing linear error).
    # Example: /// Example: 5.1234
    # Constraints: No constraints specified.
    # Evac_Abridged
    def Le(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
    # Example: /// Example: ROCKY
    # Constraints: Minimum length = 0, Maximum length = 32
    # Evac_Abridged
    def Terrain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifying data for the terrain describing important obstacles in or around the zone.
    # Example: /// Example: N/A
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Abridged
    def ObstaclesRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Amplifying data for the terrain describing any notable additional terrain features.
    # Example: /// Example: N/A
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Abridged
    def TerrainRemarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the zone.
    # Example: /// Example: example-zone
    # Constraints: Minimum length = 0, Maximum length = 128
    # Evac_Abridged
    def ZoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
    # Example: /// Example: ILLUMINATION
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Abridged
    def ZoneMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
    # Example: /// Example: NO ENEMY
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Abridged
    def ZoneSecurity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
    # Example: /// Example: RED
    # Constraints: Minimum length = 0, Maximum length = 32
    # Evac_Abridged
    def ZoneMarkingColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that the pickup site is hot and hostiles are in the area.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Evac_Abridged
    def ZoneHot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The contact frequency, in Hz, of the agency or zone controller.
    # Example: /// Example: 3.11
    # Constraints: No constraints specified.
    # Evac_Abridged
    def CntctFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The call sign of the zone controller.
    # Example: /// Example: Tango
    # Constraints: Minimum length = 0, Maximum length = 128
    # Evac_Abridged
    def ZoneContrCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The count of people requiring medevac.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # Evac_Abridged
    def NumCasualties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Additional comments for the medevac mission.
    # Example: /// Example: Comments concerning mission
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Evac_Abridged
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Evac_Abridged
    def CasualtyInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Evac_Abridged
    def CasualtyInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Evac_Abridged
    def CasualtyInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Evac_Abridged
    def EnemyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Evac_Abridged
    def EnemyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Evac_Abridged
    def EnemyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # Evac_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Evac_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Evac_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Evac_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Evac_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Evac_AbridgedStart(builder):
    builder.StartObject(40)

def Start(builder):
    Evac_AbridgedStart(builder)

def Evac_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Evac_AbridgedAddId(builder, id)

def Evac_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Evac_AbridgedAddClassificationMarking(builder, classificationMarking)

def Evac_AbridgedAddMedevacId(builder, medevacId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(medevacId), 0)

def AddMedevacId(builder, medevacId):
    Evac_AbridgedAddMedevacId(builder, medevacId)

def Evac_AbridgedAddType(builder, type):
    builder.PrependInt8Slot(3, type, 0)

def AddType(builder, type):
    Evac_AbridgedAddType(builder, type)

def Evac_AbridgedAddMissionType(builder, missionType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionType), 0)

def AddMissionType(builder, missionType):
    Evac_AbridgedAddMissionType(builder, missionType)

def Evac_AbridgedAddIdWeatherReport(builder, idWeatherReport):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idWeatherReport), 0)

def AddIdWeatherReport(builder, idWeatherReport):
    Evac_AbridgedAddIdWeatherReport(builder, idWeatherReport)

def Evac_AbridgedAddNumKia(builder, numKia):
    builder.PrependInt32Slot(6, numKia, 0)

def AddNumKia(builder, numKia):
    Evac_AbridgedAddNumKia(builder, numKia)

def Evac_AbridgedAddNumWia(builder, numWia):
    builder.PrependInt32Slot(7, numWia, 0)

def AddNumWia(builder, numWia):
    Evac_AbridgedAddNumWia(builder, numWia)

def Evac_AbridgedAddNumLitter(builder, numLitter):
    builder.PrependInt32Slot(8, numLitter, 0)

def AddNumLitter(builder, numLitter):
    Evac_AbridgedAddNumLitter(builder, numLitter)

def Evac_AbridgedAddNumAmbulatory(builder, numAmbulatory):
    builder.PrependInt32Slot(9, numAmbulatory, 0)

def AddNumAmbulatory(builder, numAmbulatory):
    Evac_AbridgedAddNumAmbulatory(builder, numAmbulatory)

def Evac_AbridgedAddMedicReq(builder, medicReq):
    builder.PrependBoolSlot(10, medicReq, 0)

def AddMedicReq(builder, medicReq):
    Evac_AbridgedAddMedicReq(builder, medicReq)

def Evac_AbridgedAddReqNum(builder, reqNum):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(reqNum), 0)

def AddReqNum(builder, reqNum):
    Evac_AbridgedAddReqNum(builder, reqNum)

def Evac_AbridgedAddReqTime(builder, reqTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(reqTime), 0)

def AddReqTime(builder, reqTime):
    Evac_AbridgedAddReqTime(builder, reqTime)

def Evac_AbridgedAddReqCallSign(builder, reqCallSign):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(reqCallSign), 0)

def AddReqCallSign(builder, reqCallSign):
    Evac_AbridgedAddReqCallSign(builder, reqCallSign)

def Evac_AbridgedAddPickupTime(builder, pickupTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(pickupTime), 0)

def AddPickupTime(builder, pickupTime):
    Evac_AbridgedAddPickupTime(builder, pickupTime)

def Evac_AbridgedAddPickupLat(builder, pickupLat):
    builder.PrependFloat64Slot(15, pickupLat, 0.0)

def AddPickupLat(builder, pickupLat):
    Evac_AbridgedAddPickupLat(builder, pickupLat)

def Evac_AbridgedAddPickupLon(builder, pickupLon):
    builder.PrependFloat64Slot(16, pickupLon, 0.0)

def AddPickupLon(builder, pickupLon):
    Evac_AbridgedAddPickupLon(builder, pickupLon)

def Evac_AbridgedAddPickupAlt(builder, pickupAlt):
    builder.PrependFloat64Slot(17, pickupAlt, 0.0)

def AddPickupAlt(builder, pickupAlt):
    Evac_AbridgedAddPickupAlt(builder, pickupAlt)

def Evac_AbridgedAddCe(builder, ce):
    builder.PrependFloat64Slot(18, ce, 0.0)

def AddCe(builder, ce):
    Evac_AbridgedAddCe(builder, ce)

def Evac_AbridgedAddLe(builder, le):
    builder.PrependFloat64Slot(19, le, 0.0)

def AddLe(builder, le):
    Evac_AbridgedAddLe(builder, le)

def Evac_AbridgedAddTerrain(builder, terrain):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(terrain), 0)

def AddTerrain(builder, terrain):
    Evac_AbridgedAddTerrain(builder, terrain)

def Evac_AbridgedAddObstaclesRemarks(builder, obstaclesRemarks):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(obstaclesRemarks), 0)

def AddObstaclesRemarks(builder, obstaclesRemarks):
    Evac_AbridgedAddObstaclesRemarks(builder, obstaclesRemarks)

def Evac_AbridgedAddTerrainRemarks(builder, terrainRemarks):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(terrainRemarks), 0)

def AddTerrainRemarks(builder, terrainRemarks):
    Evac_AbridgedAddTerrainRemarks(builder, terrainRemarks)

def Evac_AbridgedAddZoneName(builder, zoneName):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(zoneName), 0)

def AddZoneName(builder, zoneName):
    Evac_AbridgedAddZoneName(builder, zoneName)

def Evac_AbridgedAddZoneMarking(builder, zoneMarking):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(zoneMarking), 0)

def AddZoneMarking(builder, zoneMarking):
    Evac_AbridgedAddZoneMarking(builder, zoneMarking)

def Evac_AbridgedAddZoneSecurity(builder, zoneSecurity):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(zoneSecurity), 0)

def AddZoneSecurity(builder, zoneSecurity):
    Evac_AbridgedAddZoneSecurity(builder, zoneSecurity)

def Evac_AbridgedAddZoneMarkingColor(builder, zoneMarkingColor):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(zoneMarkingColor), 0)

def AddZoneMarkingColor(builder, zoneMarkingColor):
    Evac_AbridgedAddZoneMarkingColor(builder, zoneMarkingColor)

def Evac_AbridgedAddZoneHot(builder, zoneHot):
    builder.PrependBoolSlot(27, zoneHot, 0)

def AddZoneHot(builder, zoneHot):
    Evac_AbridgedAddZoneHot(builder, zoneHot)

def Evac_AbridgedAddCntctFreq(builder, cntctFreq):
    builder.PrependFloat64Slot(28, cntctFreq, 0.0)

def AddCntctFreq(builder, cntctFreq):
    Evac_AbridgedAddCntctFreq(builder, cntctFreq)

def Evac_AbridgedAddZoneContrCallSign(builder, zoneContrCallSign):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(zoneContrCallSign), 0)

def AddZoneContrCallSign(builder, zoneContrCallSign):
    Evac_AbridgedAddZoneContrCallSign(builder, zoneContrCallSign)

def Evac_AbridgedAddNumCasualties(builder, numCasualties):
    builder.PrependInt32Slot(30, numCasualties, 0)

def AddNumCasualties(builder, numCasualties):
    Evac_AbridgedAddNumCasualties(builder, numCasualties)

def Evac_AbridgedAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    Evac_AbridgedAddComments(builder, comments)

def Evac_AbridgedAddCasualtyInfo(builder, casualtyInfo):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(casualtyInfo), 0)

def AddCasualtyInfo(builder, casualtyInfo):
    Evac_AbridgedAddCasualtyInfo(builder, casualtyInfo)

def Evac_AbridgedStartCasualtyInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCasualtyInfoVector(builder, numElems):
    return Evac_AbridgedStartCasualtyInfoVector(builder, numElems)

def Evac_AbridgedAddEnemyData(builder, enemyData):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(enemyData), 0)

def AddEnemyData(builder, enemyData):
    Evac_AbridgedAddEnemyData(builder, enemyData)

def Evac_AbridgedStartEnemyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyDataVector(builder, numElems):
    return Evac_AbridgedStartEnemyDataVector(builder, numElems)

def Evac_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Evac_AbridgedAddOrigNetwork(builder, origNetwork)

def Evac_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Evac_AbridgedAddCreatedAt(builder, createdAt)

def Evac_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Evac_AbridgedAddCreatedBy(builder, createdBy)

def Evac_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Evac_AbridgedAddSource(builder, source)

def Evac_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Evac_AbridgedAddOrigin(builder, origin)

def Evac_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(39, dataMode, 0)

def AddDataMode(builder, dataMode):
    Evac_AbridgedAddDataMode(builder, dataMode)

def Evac_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Evac_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class Evac_AbridgedT(object):

    # Evac_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.medevacId = None  # type: str
        self.type = 0  # type: int
        self.missionType = None  # type: str
        self.idWeatherReport = None  # type: str
        self.numKia = 0  # type: int
        self.numWia = 0  # type: int
        self.numLitter = 0  # type: int
        self.numAmbulatory = 0  # type: int
        self.medicReq = False  # type: bool
        self.reqNum = None  # type: str
        self.reqTime = None  # type: str
        self.reqCallSign = None  # type: str
        self.pickupTime = None  # type: str
        self.pickupLat = 0.0  # type: float
        self.pickupLon = 0.0  # type: float
        self.pickupAlt = 0.0  # type: float
        self.ce = 0.0  # type: float
        self.le = 0.0  # type: float
        self.terrain = None  # type: str
        self.obstaclesRemarks = None  # type: str
        self.terrainRemarks = None  # type: str
        self.zoneName = None  # type: str
        self.zoneMarking = None  # type: str
        self.zoneSecurity = None  # type: str
        self.zoneMarkingColor = None  # type: str
        self.zoneHot = False  # type: bool
        self.cntctFreq = 0.0  # type: float
        self.zoneContrCallSign = None  # type: str
        self.numCasualties = 0  # type: int
        self.comments = None  # type: str
        self.casualtyInfo = None  # type: List[str]
        self.enemyData = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacAbridged = Evac_Abridged()
        evacAbridged.Init(buf, pos)
        return cls.InitFromObj(evacAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacAbridged):
        x = Evac_AbridgedT()
        x._UnPack(evacAbridged)
        return x

    # Evac_AbridgedT
    def _UnPack(self, evacAbridged):
        if evacAbridged is None:
            return
        self.id = evacAbridged.Id()
        self.classificationMarking = evacAbridged.ClassificationMarking()
        self.medevacId = evacAbridged.MedevacId()
        self.type = evacAbridged.Type()
        self.missionType = evacAbridged.MissionType()
        self.idWeatherReport = evacAbridged.IdWeatherReport()
        self.numKia = evacAbridged.NumKia()
        self.numWia = evacAbridged.NumWia()
        self.numLitter = evacAbridged.NumLitter()
        self.numAmbulatory = evacAbridged.NumAmbulatory()
        self.medicReq = evacAbridged.MedicReq()
        self.reqNum = evacAbridged.ReqNum()
        self.reqTime = evacAbridged.ReqTime()
        self.reqCallSign = evacAbridged.ReqCallSign()
        self.pickupTime = evacAbridged.PickupTime()
        self.pickupLat = evacAbridged.PickupLat()
        self.pickupLon = evacAbridged.PickupLon()
        self.pickupAlt = evacAbridged.PickupAlt()
        self.ce = evacAbridged.Ce()
        self.le = evacAbridged.Le()
        self.terrain = evacAbridged.Terrain()
        self.obstaclesRemarks = evacAbridged.ObstaclesRemarks()
        self.terrainRemarks = evacAbridged.TerrainRemarks()
        self.zoneName = evacAbridged.ZoneName()
        self.zoneMarking = evacAbridged.ZoneMarking()
        self.zoneSecurity = evacAbridged.ZoneSecurity()
        self.zoneMarkingColor = evacAbridged.ZoneMarkingColor()
        self.zoneHot = evacAbridged.ZoneHot()
        self.cntctFreq = evacAbridged.CntctFreq()
        self.zoneContrCallSign = evacAbridged.ZoneContrCallSign()
        self.numCasualties = evacAbridged.NumCasualties()
        self.comments = evacAbridged.Comments()
        if not evacAbridged.CasualtyInfoIsNone():
            self.casualtyInfo = []
            for i in range(evacAbridged.CasualtyInfoLength()):
                self.casualtyInfo.append(evacAbridged.CasualtyInfo(i))
        if not evacAbridged.EnemyDataIsNone():
            self.enemyData = []
            for i in range(evacAbridged.EnemyDataLength()):
                self.enemyData.append(evacAbridged.EnemyData(i))
        self.origNetwork = evacAbridged.OrigNetwork()
        self.createdAt = evacAbridged.CreatedAt()
        self.createdBy = evacAbridged.CreatedBy()
        self.source = evacAbridged.Source()
        self.origin = evacAbridged.Origin()
        self.dataMode = evacAbridged.DataMode()

    # Evac_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.medevacId is not None:
            medevacId = builder.CreateString(self.medevacId)
        if self.missionType is not None:
            missionType = builder.CreateString(self.missionType)
        if self.idWeatherReport is not None:
            idWeatherReport = builder.CreateString(self.idWeatherReport)
        if self.reqNum is not None:
            reqNum = builder.CreateString(self.reqNum)
        if self.reqTime is not None:
            reqTime = builder.CreateString(self.reqTime)
        if self.reqCallSign is not None:
            reqCallSign = builder.CreateString(self.reqCallSign)
        if self.pickupTime is not None:
            pickupTime = builder.CreateString(self.pickupTime)
        if self.terrain is not None:
            terrain = builder.CreateString(self.terrain)
        if self.obstaclesRemarks is not None:
            obstaclesRemarks = builder.CreateString(self.obstaclesRemarks)
        if self.terrainRemarks is not None:
            terrainRemarks = builder.CreateString(self.terrainRemarks)
        if self.zoneName is not None:
            zoneName = builder.CreateString(self.zoneName)
        if self.zoneMarking is not None:
            zoneMarking = builder.CreateString(self.zoneMarking)
        if self.zoneSecurity is not None:
            zoneSecurity = builder.CreateString(self.zoneSecurity)
        if self.zoneMarkingColor is not None:
            zoneMarkingColor = builder.CreateString(self.zoneMarkingColor)
        if self.zoneContrCallSign is not None:
            zoneContrCallSign = builder.CreateString(self.zoneContrCallSign)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        if self.casualtyInfo is not None:
            casualtyInfolist = []
            for i in range(len(self.casualtyInfo)):
                casualtyInfolist.append(builder.CreateString(self.casualtyInfo[i]))
            Evac_AbridgedStartCasualtyInfoVector(builder, len(self.casualtyInfo))
            for i in reversed(range(len(self.casualtyInfo))):
                builder.PrependUOffsetTRelative(casualtyInfolist[i])
            casualtyInfo = builder.EndVector()
        if self.enemyData is not None:
            enemyDatalist = []
            for i in range(len(self.enemyData)):
                enemyDatalist.append(builder.CreateString(self.enemyData[i]))
            Evac_AbridgedStartEnemyDataVector(builder, len(self.enemyData))
            for i in reversed(range(len(self.enemyData))):
                builder.PrependUOffsetTRelative(enemyDatalist[i])
            enemyData = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        Evac_AbridgedStart(builder)
        if self.id is not None:
            Evac_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Evac_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.medevacId is not None:
            Evac_AbridgedAddMedevacId(builder, medevacId)
        Evac_AbridgedAddType(builder, self.type)
        if self.missionType is not None:
            Evac_AbridgedAddMissionType(builder, missionType)
        if self.idWeatherReport is not None:
            Evac_AbridgedAddIdWeatherReport(builder, idWeatherReport)
        Evac_AbridgedAddNumKia(builder, self.numKia)
        Evac_AbridgedAddNumWia(builder, self.numWia)
        Evac_AbridgedAddNumLitter(builder, self.numLitter)
        Evac_AbridgedAddNumAmbulatory(builder, self.numAmbulatory)
        Evac_AbridgedAddMedicReq(builder, self.medicReq)
        if self.reqNum is not None:
            Evac_AbridgedAddReqNum(builder, reqNum)
        if self.reqTime is not None:
            Evac_AbridgedAddReqTime(builder, reqTime)
        if self.reqCallSign is not None:
            Evac_AbridgedAddReqCallSign(builder, reqCallSign)
        if self.pickupTime is not None:
            Evac_AbridgedAddPickupTime(builder, pickupTime)
        Evac_AbridgedAddPickupLat(builder, self.pickupLat)
        Evac_AbridgedAddPickupLon(builder, self.pickupLon)
        Evac_AbridgedAddPickupAlt(builder, self.pickupAlt)
        Evac_AbridgedAddCe(builder, self.ce)
        Evac_AbridgedAddLe(builder, self.le)
        if self.terrain is not None:
            Evac_AbridgedAddTerrain(builder, terrain)
        if self.obstaclesRemarks is not None:
            Evac_AbridgedAddObstaclesRemarks(builder, obstaclesRemarks)
        if self.terrainRemarks is not None:
            Evac_AbridgedAddTerrainRemarks(builder, terrainRemarks)
        if self.zoneName is not None:
            Evac_AbridgedAddZoneName(builder, zoneName)
        if self.zoneMarking is not None:
            Evac_AbridgedAddZoneMarking(builder, zoneMarking)
        if self.zoneSecurity is not None:
            Evac_AbridgedAddZoneSecurity(builder, zoneSecurity)
        if self.zoneMarkingColor is not None:
            Evac_AbridgedAddZoneMarkingColor(builder, zoneMarkingColor)
        Evac_AbridgedAddZoneHot(builder, self.zoneHot)
        Evac_AbridgedAddCntctFreq(builder, self.cntctFreq)
        if self.zoneContrCallSign is not None:
            Evac_AbridgedAddZoneContrCallSign(builder, zoneContrCallSign)
        Evac_AbridgedAddNumCasualties(builder, self.numCasualties)
        if self.comments is not None:
            Evac_AbridgedAddComments(builder, comments)
        if self.casualtyInfo is not None:
            Evac_AbridgedAddCasualtyInfo(builder, casualtyInfo)
        if self.enemyData is not None:
            Evac_AbridgedAddEnemyData(builder, enemyData)
        if self.origNetwork is not None:
            Evac_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            Evac_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Evac_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Evac_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Evac_AbridgedAddOrigin(builder, origin)
        Evac_AbridgedAddDataMode(builder, self.dataMode)
        evacAbridged = Evac_AbridgedEnd(builder)
        return evacAbridged
