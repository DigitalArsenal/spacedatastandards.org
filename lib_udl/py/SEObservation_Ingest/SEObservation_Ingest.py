# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A single space environment observation.
class SEObservation_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SEObservation_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSEObservation_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SEObservation_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4F\x42", size_prefixed=size_prefixed)

    # SEObservation_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The type of observation associated with this record.
    # Example: /// Example: INTEGRAL FLUX
    # Constraints: Minimum length = 1, Maximum length = 24
    # SEObservation_Ingest
    def ObType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
    # Example: /// Example: particles/cm^2/s/sr
    # Constraints: Minimum length = 1, Maximum length = 32
    # SEObservation_Ingest
    def ObUoM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    # Example: /// Example: 0.487687826
    # Constraints: No constraints specified.
    # SEObservation_Ingest
    def ObValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    # Example: /// Example: C1.3
    # Constraints: Minimum length = 0, Maximum length = 64
    # SEObservation_Ingest
    def ObString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    # Example: /// Example: [1.7, 35.6, 21.2, 19.01]
    # Constraints: No constraints specified.
    # SEObservation_Ingest
    def ObArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SEObservation_Ingest
    def ObArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SEObservation_Ingest
    def ObArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # SEObservation_Ingest
    def ObBool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
    # Example: /// Example: GOOD
    # Constraints: Minimum length = 0, Maximum length = 16
    # SEObservation_Ingest
    def ObQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Descriptive or additional information associated with this individual observation.
    # Example: /// Example: Observation Description Text
    # Constraints: Minimum length = 0, Maximum length = 512
    # SEObservation_Ingest
    def ObDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SEObservation_IngestStart(builder):
    builder.StartObject(8)

def Start(builder):
    SEObservation_IngestStart(builder)

def SEObservation_IngestAddObType(builder, obType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(obType), 0)

def AddObType(builder, obType):
    SEObservation_IngestAddObType(builder, obType)

def SEObservation_IngestAddObUoM(builder, obUoM):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(obUoM), 0)

def AddObUoM(builder, obUoM):
    SEObservation_IngestAddObUoM(builder, obUoM)

def SEObservation_IngestAddObValue(builder, obValue):
    builder.PrependFloat64Slot(2, obValue, 0.0)

def AddObValue(builder, obValue):
    SEObservation_IngestAddObValue(builder, obValue)

def SEObservation_IngestAddObString(builder, obString):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(obString), 0)

def AddObString(builder, obString):
    SEObservation_IngestAddObString(builder, obString)

def SEObservation_IngestAddObArray(builder, obArray):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(obArray), 0)

def AddObArray(builder, obArray):
    SEObservation_IngestAddObArray(builder, obArray)

def SEObservation_IngestStartObArrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartObArrayVector(builder, numElems):
    return SEObservation_IngestStartObArrayVector(builder, numElems)

def SEObservation_IngestAddObBool(builder, obBool):
    builder.PrependBoolSlot(5, obBool, 0)

def AddObBool(builder, obBool):
    SEObservation_IngestAddObBool(builder, obBool)

def SEObservation_IngestAddObQuality(builder, obQuality):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(obQuality), 0)

def AddObQuality(builder, obQuality):
    SEObservation_IngestAddObQuality(builder, obQuality)

def SEObservation_IngestAddObDescription(builder, obDescription):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(obDescription), 0)

def AddObDescription(builder, obDescription):
    SEObservation_IngestAddObDescription(builder, obDescription)

def SEObservation_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SEObservation_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class SEObservation_IngestT(object):

    # SEObservation_IngestT
    def __init__(self):
        self.obType = None  # type: str
        self.obUoM = None  # type: str
        self.obValue = 0.0  # type: float
        self.obString = None  # type: str
        self.obArray = None  # type: List[str]
        self.obBool = False  # type: bool
        self.obQuality = None  # type: str
        self.obDescription = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seobservationIngest = SEObservation_Ingest()
        seobservationIngest.Init(buf, pos)
        return cls.InitFromObj(seobservationIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seobservationIngest):
        x = SEObservation_IngestT()
        x._UnPack(seobservationIngest)
        return x

    # SEObservation_IngestT
    def _UnPack(self, seobservationIngest):
        if seobservationIngest is None:
            return
        self.obType = seobservationIngest.ObType()
        self.obUoM = seobservationIngest.ObUoM()
        self.obValue = seobservationIngest.ObValue()
        self.obString = seobservationIngest.ObString()
        if not seobservationIngest.ObArrayIsNone():
            self.obArray = []
            for i in range(seobservationIngest.ObArrayLength()):
                self.obArray.append(seobservationIngest.ObArray(i))
        self.obBool = seobservationIngest.ObBool()
        self.obQuality = seobservationIngest.ObQuality()
        self.obDescription = seobservationIngest.ObDescription()

    # SEObservation_IngestT
    def Pack(self, builder):
        if self.obType is not None:
            obType = builder.CreateString(self.obType)
        if self.obUoM is not None:
            obUoM = builder.CreateString(self.obUoM)
        if self.obString is not None:
            obString = builder.CreateString(self.obString)
        if self.obArray is not None:
            obArraylist = []
            for i in range(len(self.obArray)):
                obArraylist.append(builder.CreateString(self.obArray[i]))
            SEObservation_IngestStartObArrayVector(builder, len(self.obArray))
            for i in reversed(range(len(self.obArray))):
                builder.PrependUOffsetTRelative(obArraylist[i])
            obArray = builder.EndVector()
        if self.obQuality is not None:
            obQuality = builder.CreateString(self.obQuality)
        if self.obDescription is not None:
            obDescription = builder.CreateString(self.obDescription)
        SEObservation_IngestStart(builder)
        if self.obType is not None:
            SEObservation_IngestAddObType(builder, obType)
        if self.obUoM is not None:
            SEObservation_IngestAddObUoM(builder, obUoM)
        SEObservation_IngestAddObValue(builder, self.obValue)
        if self.obString is not None:
            SEObservation_IngestAddObString(builder, obString)
        if self.obArray is not None:
            SEObservation_IngestAddObArray(builder, obArray)
        SEObservation_IngestAddObBool(builder, self.obBool)
        if self.obQuality is not None:
            SEObservation_IngestAddObQuality(builder, obQuality)
        if self.obDescription is not None:
            SEObservation_IngestAddObDescription(builder, obDescription)
        seobservationIngest = SEObservation_IngestEnd(builder)
        return seobservationIngest
