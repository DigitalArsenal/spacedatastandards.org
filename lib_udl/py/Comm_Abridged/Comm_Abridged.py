# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Comm represents communications entities (e.g. on-orbit communications satellite payloads) within the SSA environment.
class Comm_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Comm_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsComm_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Comm_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x4D\x4D", size_prefixed=size_prefixed)

    # Comm_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: COMM-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Comm_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent entity. idEntity is required for Put.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Comm_Abridged
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the Comm entity.
    # Example: /// Example: DSCS II C-7-COMM Payload
    # Constraints: Minimum length = 1, Maximum length = 128
    # Comm_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Comm_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the comm entity.
    # Example: /// Example: Description for comm A
    # Constraints: Minimum length = 0, Maximum length = 256
    # Comm_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Comm_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Comm_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Comm_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Comm_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Comm_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Comm_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Comm_AbridgedStart(builder):
    builder.StartObject(11)

def Start(builder):
    Comm_AbridgedStart(builder)

def Comm_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Comm_AbridgedAddId(builder, id)

def Comm_AbridgedAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Comm_AbridgedAddIdEntity(builder, idEntity)

def Comm_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Comm_AbridgedAddName(builder, name)

def Comm_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Comm_AbridgedAddClassificationMarking(builder, classificationMarking)

def Comm_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    Comm_AbridgedAddDescription(builder, description)

def Comm_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Comm_AbridgedAddSource(builder, source)

def Comm_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Comm_AbridgedAddOrigin(builder, origin)

def Comm_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Comm_AbridgedAddOrigNetwork(builder, origNetwork)

def Comm_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(8, dataMode, 0)

def AddDataMode(builder, dataMode):
    Comm_AbridgedAddDataMode(builder, dataMode)

def Comm_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Comm_AbridgedAddCreatedAt(builder, createdAt)

def Comm_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Comm_AbridgedAddCreatedBy(builder, createdBy)

def Comm_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Comm_AbridgedEnd(builder)


class Comm_AbridgedT(object):

    # Comm_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idEntity = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.description = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        commAbridged = Comm_Abridged()
        commAbridged.Init(buf, pos)
        return cls.InitFromObj(commAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, commAbridged):
        x = Comm_AbridgedT()
        x._UnPack(commAbridged)
        return x

    # Comm_AbridgedT
    def _UnPack(self, commAbridged):
        if commAbridged is None:
            return
        self.id = commAbridged.Id()
        self.idEntity = commAbridged.IdEntity()
        self.name = commAbridged.Name()
        self.classificationMarking = commAbridged.ClassificationMarking()
        self.description = commAbridged.Description()
        self.source = commAbridged.Source()
        self.origin = commAbridged.Origin()
        self.origNetwork = commAbridged.OrigNetwork()
        self.dataMode = commAbridged.DataMode()
        self.createdAt = commAbridged.CreatedAt()
        self.createdBy = commAbridged.CreatedBy()

    # Comm_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        Comm_AbridgedStart(builder)
        if self.id is not None:
            Comm_AbridgedAddId(builder, id)
        if self.idEntity is not None:
            Comm_AbridgedAddIdEntity(builder, idEntity)
        if self.name is not None:
            Comm_AbridgedAddName(builder, name)
        if self.classificationMarking is not None:
            Comm_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.description is not None:
            Comm_AbridgedAddDescription(builder, description)
        if self.source is not None:
            Comm_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Comm_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Comm_AbridgedAddOrigNetwork(builder, origNetwork)
        Comm_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Comm_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Comm_AbridgedAddCreatedBy(builder, createdBy)
        commAbridged = Comm_AbridgedEnd(builder)
        return commAbridged
