# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.
class SolarArray(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SolarArray()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSolarArray(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SolarArrayBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4F\x4C\x41", size_prefixed=size_prefixed)

    # SolarArray
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SOLARARRAY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SolarArray
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar Array name.
    # Example: /// Example: Solar1
    # Constraints: Minimum length = 1, Maximum length = 128
    # SolarArray
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SolarArray
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArray
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SolarArray
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArray
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArray
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArray
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArray
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArray
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SolarArray
    def SolarArrayDetails(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SolarArray
    def SolarArrayDetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SolarArray
    def SolarArrayDetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def SolarArrayStart(builder):
    builder.StartObject(11)

def Start(builder):
    SolarArrayStart(builder)

def SolarArrayAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SolarArrayAddId(builder, id)

def SolarArrayAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SolarArrayAddName(builder, name)

def SolarArrayAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SolarArrayAddCreatedAt(builder, createdAt)

def SolarArrayAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SolarArrayAddCreatedBy(builder, createdBy)

def SolarArrayAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SolarArrayAddUpdatedAt(builder, updatedAt)

def SolarArrayAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SolarArrayAddUpdatedBy(builder, updatedBy)

def SolarArrayAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SolarArrayAddSource(builder, source)

def SolarArrayAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SolarArrayAddOrigin(builder, origin)

def SolarArrayAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SolarArrayAddOrigNetwork(builder, origNetwork)

def SolarArrayAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    SolarArrayAddDataMode(builder, dataMode)

def SolarArrayAddSolarArrayDetails(builder, solarArrayDetails):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(solarArrayDetails), 0)

def AddSolarArrayDetails(builder, solarArrayDetails):
    SolarArrayAddSolarArrayDetails(builder, solarArrayDetails)

def SolarArrayStartSolarArrayDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSolarArrayDetailsVector(builder, numElems):
    return SolarArrayStartSolarArrayDetailsVector(builder, numElems)

def SolarArrayEnd(builder):
    return builder.EndObject()

def End(builder):
    return SolarArrayEnd(builder)

try:
    from typing import List
except:
    pass

class SolarArrayT(object):

    # SolarArrayT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.solarArrayDetails = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        solarArray = SolarArray()
        solarArray.Init(buf, pos)
        return cls.InitFromObj(solarArray)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, solarArray):
        x = SolarArrayT()
        x._UnPack(solarArray)
        return x

    # SolarArrayT
    def _UnPack(self, solarArray):
        if solarArray is None:
            return
        self.id = solarArray.Id()
        self.name = solarArray.Name()
        self.createdAt = solarArray.CreatedAt()
        self.createdBy = solarArray.CreatedBy()
        self.updatedAt = solarArray.UpdatedAt()
        self.updatedBy = solarArray.UpdatedBy()
        self.source = solarArray.Source()
        self.origin = solarArray.Origin()
        self.origNetwork = solarArray.OrigNetwork()
        self.dataMode = solarArray.DataMode()
        if not solarArray.SolarArrayDetailsIsNone():
            self.solarArrayDetails = []
            for i in range(solarArray.SolarArrayDetailsLength()):
                self.solarArrayDetails.append(solarArray.SolarArrayDetails(i))

    # SolarArrayT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.solarArrayDetails is not None:
            solarArrayDetailslist = []
            for i in range(len(self.solarArrayDetails)):
                solarArrayDetailslist.append(builder.CreateString(self.solarArrayDetails[i]))
            SolarArrayStartSolarArrayDetailsVector(builder, len(self.solarArrayDetails))
            for i in reversed(range(len(self.solarArrayDetails))):
                builder.PrependUOffsetTRelative(solarArrayDetailslist[i])
            solarArrayDetails = builder.EndVector()
        SolarArrayStart(builder)
        if self.id is not None:
            SolarArrayAddId(builder, id)
        if self.name is not None:
            SolarArrayAddName(builder, name)
        if self.createdAt is not None:
            SolarArrayAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SolarArrayAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SolarArrayAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SolarArrayAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SolarArrayAddSource(builder, source)
        if self.origin is not None:
            SolarArrayAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SolarArrayAddOrigNetwork(builder, origNetwork)
        SolarArrayAddDataMode(builder, self.dataMode)
        if self.solarArrayDetails is not None:
            SolarArrayAddSolarArrayDetails(builder, solarArrayDetails)
        solarArray = SolarArrayEnd(builder)
        return solarArray
