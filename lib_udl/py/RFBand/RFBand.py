# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
class RFBand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RFBand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRFBand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RFBandBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x46\x42\x41", size_prefixed=size_prefixed)

    # RFBand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: RFBAND-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFBand
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Entity which uses this band.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RFBand
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFBand
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RF Band name.
    # Example: /// Example: BAND_NAME
    # Constraints: Minimum length = 1, Maximum length = 128
    # RFBand
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
    # Example: /// Example: Ku
    # Constraints: Minimum length = 0, Maximum length = 5
    # RFBand
    def Band(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RF Band mode (e.g. TX, RX).
    # Example: /// Example: TX
    # Constraints: Minimum length = 0, Maximum length = 4
    # RFBand
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
    # Example: /// Example: TTC
    # Constraints: Minimum length = 0, Maximum length = 16
    # RFBand
    def Purpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Start/minimum of transmit RF frequency range, if applicable, in Mhz.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # RFBand
    def FreqMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # End/maximum of transmit RF frequency range, if applicable, in Mhz.
    # Example: /// Example: 2000.23
    # Constraints: No constraints specified.
    # RFBand
    def FreqMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Center frequency of RF frequency range, if applicable, in Mhz.
    # Example: /// Example: 1000.23
    # Constraints: No constraints specified.
    # RFBand
    def CenterFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # RF Range maximum gain, in dBi.
    # Example: /// Example: 120.23
    # Constraints: No constraints specified.
    # RFBand
    def PeakGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # RF Range edge gain, in dBi.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # RFBand
    def EdgeGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # RF Band frequency range bandwidth in Mhz.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # RFBand
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RFBand
    def Beamwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
    # Example: /// Example: H
    # Constraints: Minimum length = 0, Maximum length = 4
    # RFBand
    def Polarization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
    # Example: /// Example: 2.23
    # Constraints: No constraints specified.
    # RFBand
    def Erp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
    # Example: /// Example: 2.23
    # Constraints: No constraints specified.
    # RFBand
    def Eirp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFBand
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFBand
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFBand
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFBand
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RFBand
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RFBand
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # RFBand
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # RFBand
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RFBandStart(builder):
    builder.StartObject(25)

def Start(builder):
    RFBandStart(builder)

def RFBandAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RFBandAddId(builder, id)

def RFBandAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    RFBandAddIdEntity(builder, idEntity)

def RFBandAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RFBandAddClassificationMarking(builder, classificationMarking)

def RFBandAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    RFBandAddName(builder, name)

def RFBandAddBand(builder, band):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(band), 0)

def AddBand(builder, band):
    RFBandAddBand(builder, band)

def RFBandAddMode(builder, mode):
    builder.PrependInt8Slot(5, mode, 0)

def AddMode(builder, mode):
    RFBandAddMode(builder, mode)

def RFBandAddPurpose(builder, purpose):
    builder.PrependInt8Slot(6, purpose, 0)

def AddPurpose(builder, purpose):
    RFBandAddPurpose(builder, purpose)

def RFBandAddFreqMin(builder, freqMin):
    builder.PrependFloat64Slot(7, freqMin, 0.0)

def AddFreqMin(builder, freqMin):
    RFBandAddFreqMin(builder, freqMin)

def RFBandAddFreqMax(builder, freqMax):
    builder.PrependFloat64Slot(8, freqMax, 0.0)

def AddFreqMax(builder, freqMax):
    RFBandAddFreqMax(builder, freqMax)

def RFBandAddCenterFreq(builder, centerFreq):
    builder.PrependFloat64Slot(9, centerFreq, 0.0)

def AddCenterFreq(builder, centerFreq):
    RFBandAddCenterFreq(builder, centerFreq)

def RFBandAddPeakGain(builder, peakGain):
    builder.PrependFloat64Slot(10, peakGain, 0.0)

def AddPeakGain(builder, peakGain):
    RFBandAddPeakGain(builder, peakGain)

def RFBandAddEdgeGain(builder, edgeGain):
    builder.PrependFloat64Slot(11, edgeGain, 0.0)

def AddEdgeGain(builder, edgeGain):
    RFBandAddEdgeGain(builder, edgeGain)

def RFBandAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(12, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    RFBandAddBandwidth(builder, bandwidth)

def RFBandAddBeamwidth(builder, beamwidth):
    builder.PrependFloat64Slot(13, beamwidth, 0.0)

def AddBeamwidth(builder, beamwidth):
    RFBandAddBeamwidth(builder, beamwidth)

def RFBandAddPolarization(builder, polarization):
    builder.PrependInt8Slot(14, polarization, 0)

def AddPolarization(builder, polarization):
    RFBandAddPolarization(builder, polarization)

def RFBandAddErp(builder, erp):
    builder.PrependFloat64Slot(15, erp, 0.0)

def AddErp(builder, erp):
    RFBandAddErp(builder, erp)

def RFBandAddEirp(builder, eirp):
    builder.PrependFloat64Slot(16, eirp, 0.0)

def AddEirp(builder, eirp):
    RFBandAddEirp(builder, eirp)

def RFBandAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RFBandAddSource(builder, source)

def RFBandAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RFBandAddOrigin(builder, origin)

def RFBandAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(19, dataMode, 0)

def AddDataMode(builder, dataMode):
    RFBandAddDataMode(builder, dataMode)

def RFBandAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RFBandAddCreatedAt(builder, createdAt)

def RFBandAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RFBandAddCreatedBy(builder, createdBy)

def RFBandAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    RFBandAddUpdatedAt(builder, updatedAt)

def RFBandAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    RFBandAddUpdatedBy(builder, updatedBy)

def RFBandAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    RFBandAddOrigNetwork(builder, origNetwork)

def RFBandEnd(builder):
    return builder.EndObject()

def End(builder):
    return RFBandEnd(builder)


class RFBandT(object):

    # RFBandT
    def __init__(self):
        self.id = None  # type: str
        self.idEntity = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.band = None  # type: str
        self.mode = 0  # type: int
        self.purpose = 0  # type: int
        self.freqMin = 0.0  # type: float
        self.freqMax = 0.0  # type: float
        self.centerFreq = 0.0  # type: float
        self.peakGain = 0.0  # type: float
        self.edgeGain = 0.0  # type: float
        self.bandwidth = 0.0  # type: float
        self.beamwidth = 0.0  # type: float
        self.polarization = 0  # type: int
        self.erp = 0.0  # type: float
        self.eirp = 0.0  # type: float
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rfband = RFBand()
        rfband.Init(buf, pos)
        return cls.InitFromObj(rfband)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rfband):
        x = RFBandT()
        x._UnPack(rfband)
        return x

    # RFBandT
    def _UnPack(self, rfband):
        if rfband is None:
            return
        self.id = rfband.Id()
        self.idEntity = rfband.IdEntity()
        self.classificationMarking = rfband.ClassificationMarking()
        self.name = rfband.Name()
        self.band = rfband.Band()
        self.mode = rfband.Mode()
        self.purpose = rfband.Purpose()
        self.freqMin = rfband.FreqMin()
        self.freqMax = rfband.FreqMax()
        self.centerFreq = rfband.CenterFreq()
        self.peakGain = rfband.PeakGain()
        self.edgeGain = rfband.EdgeGain()
        self.bandwidth = rfband.Bandwidth()
        self.beamwidth = rfband.Beamwidth()
        self.polarization = rfband.Polarization()
        self.erp = rfband.Erp()
        self.eirp = rfband.Eirp()
        self.source = rfband.Source()
        self.origin = rfband.Origin()
        self.dataMode = rfband.DataMode()
        self.createdAt = rfband.CreatedAt()
        self.createdBy = rfband.CreatedBy()
        self.updatedAt = rfband.UpdatedAt()
        self.updatedBy = rfband.UpdatedBy()
        self.origNetwork = rfband.OrigNetwork()

    # RFBandT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.band is not None:
            band = builder.CreateString(self.band)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        RFBandStart(builder)
        if self.id is not None:
            RFBandAddId(builder, id)
        if self.idEntity is not None:
            RFBandAddIdEntity(builder, idEntity)
        if self.classificationMarking is not None:
            RFBandAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            RFBandAddName(builder, name)
        if self.band is not None:
            RFBandAddBand(builder, band)
        RFBandAddMode(builder, self.mode)
        RFBandAddPurpose(builder, self.purpose)
        RFBandAddFreqMin(builder, self.freqMin)
        RFBandAddFreqMax(builder, self.freqMax)
        RFBandAddCenterFreq(builder, self.centerFreq)
        RFBandAddPeakGain(builder, self.peakGain)
        RFBandAddEdgeGain(builder, self.edgeGain)
        RFBandAddBandwidth(builder, self.bandwidth)
        RFBandAddBeamwidth(builder, self.beamwidth)
        RFBandAddPolarization(builder, self.polarization)
        RFBandAddErp(builder, self.erp)
        RFBandAddEirp(builder, self.eirp)
        if self.source is not None:
            RFBandAddSource(builder, source)
        if self.origin is not None:
            RFBandAddOrigin(builder, origin)
        RFBandAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            RFBandAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RFBandAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            RFBandAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            RFBandAddUpdatedBy(builder, updatedBy)
        if self.origNetwork is not None:
            RFBandAddOrigNetwork(builder, origNetwork)
        rfband = RFBandEnd(builder)
        return rfband
