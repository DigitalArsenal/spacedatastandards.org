# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
class RadarObservation_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RadarObservation_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRadarObservation_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RadarObservation_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x52\x41\x44\x41", size_prefixed=size_prefixed)

    # RadarObservation_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: RADAROBSERVATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # RadarObservation_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # RadarObservation_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RadarObservation_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the reporting sensor.
    # Example: /// Example: SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RadarObservation_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RadarObservation_Full
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RadarObservation_Full
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier of the track to which this observation belongs.
    # Example: /// Example: TRACK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # RadarObservation_Full
    def TrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
    # Example: /// Example: FIRST
    # Constraints: Minimum length = 0, Maximum length = 8
    # RadarObservation_Full
    def ObPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RadarObservation_Full
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # RadarObservation_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # azimuth angle in degrees and topocentric frame.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def AzimuthUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor azimuth angle bias in degrees.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def AzimuthBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight azimuth in degrees per second.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def AzimuthRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight elevation in degrees and topocentric frame.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def ElevationUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor elevation bias in degrees.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def ElevationBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight elevation in degrees per second.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def ElevationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Target range in km.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Range accelaration in km/s2.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RangeAccel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RangeAccelUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range measurement, in kilometers.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor range bias in km.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RangeBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Rate of change of the line of sight range in km/sec.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the range rate measurement, in kilometers/second.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Corrected doppler measurement in meters per second.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Doppler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the corrected doppler measurement, in meters/second.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def DopplerUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight right ascension in degrees and J2000 coordinate frame.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Ra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Line of sight declination angle in degrees and J2000 coordinate frame.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Declination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # X position of target in km in J2000 coordinate frame.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Y position of target in km in J2000 coordinate frame.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Z position of target in km in J2000 coordinate frame.
    # Example: /// Example: 50.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # X velocity of target in km/sec in J2000 coordinate frame.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Xvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Y velocity of target in km/sec in J2000 coordinate frame.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Yvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Z velocity of target in km/sec in J2000 coordinate frame.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Zvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Senx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    # Example: /// Example: 40.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Seny(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
    # Example: /// Example: 35.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Senz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radar cross section in meters squared for polarization principal.
    # Example: /// Example: 100.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Rcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def RcsUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Radar cross section in meters squared for orthogonal polarization.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def OrthogonalRcs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def OrthogonalRcsUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ID of the beam that produced this observation.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Beam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor timing bias in seconds.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def TimingBias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: rawFileURI
    # Constraints: Minimum length = 0, Maximum length = 256
    # RadarObservation_Full
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # RadarObservation_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RadarObservation_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # RadarObservation_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RadarObservation_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RadarObservation_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # RadarObservation_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
    # Example: /// Example: J2000
    # Constraints: Minimum length = 0, Maximum length = 24
    # RadarObservation_Full
    def SenReferenceFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # RadarObservation_Full
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # RadarObservation_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # RadarObservation_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
    # Example: /// Example: RADAR
    # Constraints: No constraints specified.
    # RadarObservation_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RadarObservation_FullStart(builder):
    builder.StartObject(61)

def Start(builder):
    RadarObservation_FullStart(builder)

def RadarObservation_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    RadarObservation_FullAddId(builder, id)

def RadarObservation_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    RadarObservation_FullAddClassificationMarking(builder, classificationMarking)

def RadarObservation_FullAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    RadarObservation_FullAddObTime(builder, obTime)

def RadarObservation_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    RadarObservation_FullAddIdOnOrbit(builder, idOnOrbit)

def RadarObservation_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    RadarObservation_FullAddIdSensor(builder, idSensor)

def RadarObservation_FullAddSatNo(builder, satNo):
    builder.PrependInt32Slot(5, satNo, 0)

def AddSatNo(builder, satNo):
    RadarObservation_FullAddSatNo(builder, satNo)

def RadarObservation_FullAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    RadarObservation_FullAddTaskId(builder, taskId)

def RadarObservation_FullAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    RadarObservation_FullAddTransactionId(builder, transactionId)

def RadarObservation_FullAddTrackId(builder, trackId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(trackId), 0)

def AddTrackId(builder, trackId):
    RadarObservation_FullAddTrackId(builder, trackId)

def RadarObservation_FullAddObPosition(builder, obPosition):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(obPosition), 0)

def AddObPosition(builder, obPosition):
    RadarObservation_FullAddObPosition(builder, obPosition)

def RadarObservation_FullAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    RadarObservation_FullAddOrigObjectId(builder, origObjectId)

def RadarObservation_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    RadarObservation_FullAddOrigSensorId(builder, origSensorId)

def RadarObservation_FullAddUct(builder, uct):
    builder.PrependBoolSlot(12, uct, 0)

def AddUct(builder, uct):
    RadarObservation_FullAddUct(builder, uct)

def RadarObservation_FullAddAzimuth(builder, azimuth):
    builder.PrependFloat64Slot(13, azimuth, 0.0)

def AddAzimuth(builder, azimuth):
    RadarObservation_FullAddAzimuth(builder, azimuth)

def RadarObservation_FullAddAzimuthUnc(builder, azimuthUnc):
    builder.PrependFloat64Slot(14, azimuthUnc, 0.0)

def AddAzimuthUnc(builder, azimuthUnc):
    RadarObservation_FullAddAzimuthUnc(builder, azimuthUnc)

def RadarObservation_FullAddAzimuthBias(builder, azimuthBias):
    builder.PrependFloat64Slot(15, azimuthBias, 0.0)

def AddAzimuthBias(builder, azimuthBias):
    RadarObservation_FullAddAzimuthBias(builder, azimuthBias)

def RadarObservation_FullAddAzimuthRate(builder, azimuthRate):
    builder.PrependFloat64Slot(16, azimuthRate, 0.0)

def AddAzimuthRate(builder, azimuthRate):
    RadarObservation_FullAddAzimuthRate(builder, azimuthRate)

def RadarObservation_FullAddElevation(builder, elevation):
    builder.PrependFloat64Slot(17, elevation, 0.0)

def AddElevation(builder, elevation):
    RadarObservation_FullAddElevation(builder, elevation)

def RadarObservation_FullAddElevationUnc(builder, elevationUnc):
    builder.PrependFloat64Slot(18, elevationUnc, 0.0)

def AddElevationUnc(builder, elevationUnc):
    RadarObservation_FullAddElevationUnc(builder, elevationUnc)

def RadarObservation_FullAddElevationBias(builder, elevationBias):
    builder.PrependFloat64Slot(19, elevationBias, 0.0)

def AddElevationBias(builder, elevationBias):
    RadarObservation_FullAddElevationBias(builder, elevationBias)

def RadarObservation_FullAddElevationRate(builder, elevationRate):
    builder.PrependFloat64Slot(20, elevationRate, 0.0)

def AddElevationRate(builder, elevationRate):
    RadarObservation_FullAddElevationRate(builder, elevationRate)

def RadarObservation_FullAddRange(builder, range):
    builder.PrependFloat64Slot(21, range, 0.0)

def AddRange(builder, range):
    RadarObservation_FullAddRange(builder, range)

def RadarObservation_FullAddRangeAccel(builder, rangeAccel):
    builder.PrependFloat64Slot(22, rangeAccel, 0.0)

def AddRangeAccel(builder, rangeAccel):
    RadarObservation_FullAddRangeAccel(builder, rangeAccel)

def RadarObservation_FullAddRangeAccelUnc(builder, rangeAccelUnc):
    builder.PrependFloat64Slot(23, rangeAccelUnc, 0.0)

def AddRangeAccelUnc(builder, rangeAccelUnc):
    RadarObservation_FullAddRangeAccelUnc(builder, rangeAccelUnc)

def RadarObservation_FullAddRangeUnc(builder, rangeUnc):
    builder.PrependFloat64Slot(24, rangeUnc, 0.0)

def AddRangeUnc(builder, rangeUnc):
    RadarObservation_FullAddRangeUnc(builder, rangeUnc)

def RadarObservation_FullAddRangeBias(builder, rangeBias):
    builder.PrependFloat64Slot(25, rangeBias, 0.0)

def AddRangeBias(builder, rangeBias):
    RadarObservation_FullAddRangeBias(builder, rangeBias)

def RadarObservation_FullAddRangeRate(builder, rangeRate):
    builder.PrependFloat64Slot(26, rangeRate, 0.0)

def AddRangeRate(builder, rangeRate):
    RadarObservation_FullAddRangeRate(builder, rangeRate)

def RadarObservation_FullAddRangeRateUnc(builder, rangeRateUnc):
    builder.PrependFloat64Slot(27, rangeRateUnc, 0.0)

def AddRangeRateUnc(builder, rangeRateUnc):
    RadarObservation_FullAddRangeRateUnc(builder, rangeRateUnc)

def RadarObservation_FullAddDoppler(builder, doppler):
    builder.PrependFloat64Slot(28, doppler, 0.0)

def AddDoppler(builder, doppler):
    RadarObservation_FullAddDoppler(builder, doppler)

def RadarObservation_FullAddDopplerUnc(builder, dopplerUnc):
    builder.PrependFloat64Slot(29, dopplerUnc, 0.0)

def AddDopplerUnc(builder, dopplerUnc):
    RadarObservation_FullAddDopplerUnc(builder, dopplerUnc)

def RadarObservation_FullAddRa(builder, ra):
    builder.PrependFloat64Slot(30, ra, 0.0)

def AddRa(builder, ra):
    RadarObservation_FullAddRa(builder, ra)

def RadarObservation_FullAddDeclination(builder, declination):
    builder.PrependFloat64Slot(31, declination, 0.0)

def AddDeclination(builder, declination):
    RadarObservation_FullAddDeclination(builder, declination)

def RadarObservation_FullAddX(builder, x):
    builder.PrependFloat64Slot(32, x, 0.0)

def AddX(builder, x):
    RadarObservation_FullAddX(builder, x)

def RadarObservation_FullAddY(builder, y):
    builder.PrependFloat64Slot(33, y, 0.0)

def AddY(builder, y):
    RadarObservation_FullAddY(builder, y)

def RadarObservation_FullAddZ(builder, z):
    builder.PrependFloat64Slot(34, z, 0.0)

def AddZ(builder, z):
    RadarObservation_FullAddZ(builder, z)

def RadarObservation_FullAddXvel(builder, xvel):
    builder.PrependFloat64Slot(35, xvel, 0.0)

def AddXvel(builder, xvel):
    RadarObservation_FullAddXvel(builder, xvel)

def RadarObservation_FullAddYvel(builder, yvel):
    builder.PrependFloat64Slot(36, yvel, 0.0)

def AddYvel(builder, yvel):
    RadarObservation_FullAddYvel(builder, yvel)

def RadarObservation_FullAddZvel(builder, zvel):
    builder.PrependFloat64Slot(37, zvel, 0.0)

def AddZvel(builder, zvel):
    RadarObservation_FullAddZvel(builder, zvel)

def RadarObservation_FullAddSenx(builder, senx):
    builder.PrependFloat64Slot(38, senx, 0.0)

def AddSenx(builder, senx):
    RadarObservation_FullAddSenx(builder, senx)

def RadarObservation_FullAddSeny(builder, seny):
    builder.PrependFloat64Slot(39, seny, 0.0)

def AddSeny(builder, seny):
    RadarObservation_FullAddSeny(builder, seny)

def RadarObservation_FullAddSenz(builder, senz):
    builder.PrependFloat64Slot(40, senz, 0.0)

def AddSenz(builder, senz):
    RadarObservation_FullAddSenz(builder, senz)

def RadarObservation_FullAddRcs(builder, rcs):
    builder.PrependFloat64Slot(41, rcs, 0.0)

def AddRcs(builder, rcs):
    RadarObservation_FullAddRcs(builder, rcs)

def RadarObservation_FullAddRcsUnc(builder, rcsUnc):
    builder.PrependFloat64Slot(42, rcsUnc, 0.0)

def AddRcsUnc(builder, rcsUnc):
    RadarObservation_FullAddRcsUnc(builder, rcsUnc)

def RadarObservation_FullAddOrthogonalRcs(builder, orthogonalRcs):
    builder.PrependFloat64Slot(43, orthogonalRcs, 0.0)

def AddOrthogonalRcs(builder, orthogonalRcs):
    RadarObservation_FullAddOrthogonalRcs(builder, orthogonalRcs)

def RadarObservation_FullAddOrthogonalRcsUnc(builder, orthogonalRcsUnc):
    builder.PrependFloat64Slot(44, orthogonalRcsUnc, 0.0)

def AddOrthogonalRcsUnc(builder, orthogonalRcsUnc):
    RadarObservation_FullAddOrthogonalRcsUnc(builder, orthogonalRcsUnc)

def RadarObservation_FullAddSnr(builder, snr):
    builder.PrependFloat64Slot(45, snr, 0.0)

def AddSnr(builder, snr):
    RadarObservation_FullAddSnr(builder, snr)

def RadarObservation_FullAddBeam(builder, beam):
    builder.PrependFloat64Slot(46, beam, 0.0)

def AddBeam(builder, beam):
    RadarObservation_FullAddBeam(builder, beam)

def RadarObservation_FullAddTimingBias(builder, timingBias):
    builder.PrependFloat64Slot(47, timingBias, 0.0)

def AddTimingBias(builder, timingBias):
    RadarObservation_FullAddTimingBias(builder, timingBias)

def RadarObservation_FullAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    RadarObservation_FullAddRawFileUri(builder, rawFileUri)

def RadarObservation_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    RadarObservation_FullAddSource(builder, source)

def RadarObservation_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    RadarObservation_FullAddOrigin(builder, origin)

def RadarObservation_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(51, dataMode, 0)

def AddDataMode(builder, dataMode):
    RadarObservation_FullAddDataMode(builder, dataMode)

def RadarObservation_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    RadarObservation_FullAddTags(builder, tags)

def RadarObservation_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return RadarObservation_FullStartTagsVector(builder, numElems)

def RadarObservation_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    RadarObservation_FullAddCreatedAt(builder, createdAt)

def RadarObservation_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    RadarObservation_FullAddCreatedBy(builder, createdBy)

def RadarObservation_FullAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    RadarObservation_FullAddOnOrbit(builder, onOrbit)

def RadarObservation_FullAddSenReferenceFrame(builder, senReferenceFrame):
    builder.PrependInt8Slot(56, senReferenceFrame, 0)

def AddSenReferenceFrame(builder, senReferenceFrame):
    RadarObservation_FullAddSenReferenceFrame(builder, senReferenceFrame)

def RadarObservation_FullAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    RadarObservation_FullAddDescriptor(builder, descriptor)

def RadarObservation_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    RadarObservation_FullAddOrigNetwork(builder, origNetwork)

def RadarObservation_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    RadarObservation_FullAddSourceDl(builder, sourceDl)

def RadarObservation_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    RadarObservation_FullAddType(builder, type)

def RadarObservation_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return RadarObservation_FullEnd(builder)

try:
    from typing import List
except:
    pass

class RadarObservation_FullT(object):

    # RadarObservation_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSensor = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.transactionId = None  # type: str
        self.trackId = None  # type: str
        self.obPosition = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId = None  # type: str
        self.uct = False  # type: bool
        self.azimuth = 0.0  # type: float
        self.azimuthUnc = 0.0  # type: float
        self.azimuthBias = 0.0  # type: float
        self.azimuthRate = 0.0  # type: float
        self.elevation = 0.0  # type: float
        self.elevationUnc = 0.0  # type: float
        self.elevationBias = 0.0  # type: float
        self.elevationRate = 0.0  # type: float
        self.range = 0.0  # type: float
        self.rangeAccel = 0.0  # type: float
        self.rangeAccelUnc = 0.0  # type: float
        self.rangeUnc = 0.0  # type: float
        self.rangeBias = 0.0  # type: float
        self.rangeRate = 0.0  # type: float
        self.rangeRateUnc = 0.0  # type: float
        self.doppler = 0.0  # type: float
        self.dopplerUnc = 0.0  # type: float
        self.ra = 0.0  # type: float
        self.declination = 0.0  # type: float
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.xvel = 0.0  # type: float
        self.yvel = 0.0  # type: float
        self.zvel = 0.0  # type: float
        self.senx = 0.0  # type: float
        self.seny = 0.0  # type: float
        self.senz = 0.0  # type: float
        self.rcs = 0.0  # type: float
        self.rcsUnc = 0.0  # type: float
        self.orthogonalRcs = 0.0  # type: float
        self.orthogonalRcsUnc = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.beam = 0.0  # type: float
        self.timingBias = 0.0  # type: float
        self.rawFileUri = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.onOrbit = None  # type: str
        self.senReferenceFrame = 0  # type: int
        self.descriptor = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.type = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        radarObservationFull = RadarObservation_Full()
        radarObservationFull.Init(buf, pos)
        return cls.InitFromObj(radarObservationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, radarObservationFull):
        x = RadarObservation_FullT()
        x._UnPack(radarObservationFull)
        return x

    # RadarObservation_FullT
    def _UnPack(self, radarObservationFull):
        if radarObservationFull is None:
            return
        self.id = radarObservationFull.Id()
        self.classificationMarking = radarObservationFull.ClassificationMarking()
        self.obTime = radarObservationFull.ObTime()
        self.idOnOrbit = radarObservationFull.IdOnOrbit()
        self.idSensor = radarObservationFull.IdSensor()
        self.satNo = radarObservationFull.SatNo()
        self.taskId = radarObservationFull.TaskId()
        self.transactionId = radarObservationFull.TransactionId()
        self.trackId = radarObservationFull.TrackId()
        self.obPosition = radarObservationFull.ObPosition()
        self.origObjectId = radarObservationFull.OrigObjectId()
        self.origSensorId = radarObservationFull.OrigSensorId()
        self.uct = radarObservationFull.Uct()
        self.azimuth = radarObservationFull.Azimuth()
        self.azimuthUnc = radarObservationFull.AzimuthUnc()
        self.azimuthBias = radarObservationFull.AzimuthBias()
        self.azimuthRate = radarObservationFull.AzimuthRate()
        self.elevation = radarObservationFull.Elevation()
        self.elevationUnc = radarObservationFull.ElevationUnc()
        self.elevationBias = radarObservationFull.ElevationBias()
        self.elevationRate = radarObservationFull.ElevationRate()
        self.range = radarObservationFull.Range()
        self.rangeAccel = radarObservationFull.RangeAccel()
        self.rangeAccelUnc = radarObservationFull.RangeAccelUnc()
        self.rangeUnc = radarObservationFull.RangeUnc()
        self.rangeBias = radarObservationFull.RangeBias()
        self.rangeRate = radarObservationFull.RangeRate()
        self.rangeRateUnc = radarObservationFull.RangeRateUnc()
        self.doppler = radarObservationFull.Doppler()
        self.dopplerUnc = radarObservationFull.DopplerUnc()
        self.ra = radarObservationFull.Ra()
        self.declination = radarObservationFull.Declination()
        self.x = radarObservationFull.X()
        self.y = radarObservationFull.Y()
        self.z = radarObservationFull.Z()
        self.xvel = radarObservationFull.Xvel()
        self.yvel = radarObservationFull.Yvel()
        self.zvel = radarObservationFull.Zvel()
        self.senx = radarObservationFull.Senx()
        self.seny = radarObservationFull.Seny()
        self.senz = radarObservationFull.Senz()
        self.rcs = radarObservationFull.Rcs()
        self.rcsUnc = radarObservationFull.RcsUnc()
        self.orthogonalRcs = radarObservationFull.OrthogonalRcs()
        self.orthogonalRcsUnc = radarObservationFull.OrthogonalRcsUnc()
        self.snr = radarObservationFull.Snr()
        self.beam = radarObservationFull.Beam()
        self.timingBias = radarObservationFull.TimingBias()
        self.rawFileUri = radarObservationFull.RawFileUri()
        self.source = radarObservationFull.Source()
        self.origin = radarObservationFull.Origin()
        self.dataMode = radarObservationFull.DataMode()
        if not radarObservationFull.TagsIsNone():
            self.tags = []
            for i in range(radarObservationFull.TagsLength()):
                self.tags.append(radarObservationFull.Tags(i))
        self.createdAt = radarObservationFull.CreatedAt()
        self.createdBy = radarObservationFull.CreatedBy()
        self.onOrbit = radarObservationFull.OnOrbit()
        self.senReferenceFrame = radarObservationFull.SenReferenceFrame()
        self.descriptor = radarObservationFull.Descriptor()
        self.origNetwork = radarObservationFull.OrigNetwork()
        self.sourceDl = radarObservationFull.SourceDl()
        self.type = radarObservationFull.Type()

    # RadarObservation_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.trackId is not None:
            trackId = builder.CreateString(self.trackId)
        if self.obPosition is not None:
            obPosition = builder.CreateString(self.obPosition)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            RadarObservation_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.type is not None:
            type = builder.CreateString(self.type)
        RadarObservation_FullStart(builder)
        if self.id is not None:
            RadarObservation_FullAddId(builder, id)
        if self.classificationMarking is not None:
            RadarObservation_FullAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            RadarObservation_FullAddObTime(builder, obTime)
        if self.idOnOrbit is not None:
            RadarObservation_FullAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor is not None:
            RadarObservation_FullAddIdSensor(builder, idSensor)
        RadarObservation_FullAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            RadarObservation_FullAddTaskId(builder, taskId)
        if self.transactionId is not None:
            RadarObservation_FullAddTransactionId(builder, transactionId)
        if self.trackId is not None:
            RadarObservation_FullAddTrackId(builder, trackId)
        if self.obPosition is not None:
            RadarObservation_FullAddObPosition(builder, obPosition)
        if self.origObjectId is not None:
            RadarObservation_FullAddOrigObjectId(builder, origObjectId)
        if self.origSensorId is not None:
            RadarObservation_FullAddOrigSensorId(builder, origSensorId)
        RadarObservation_FullAddUct(builder, self.uct)
        RadarObservation_FullAddAzimuth(builder, self.azimuth)
        RadarObservation_FullAddAzimuthUnc(builder, self.azimuthUnc)
        RadarObservation_FullAddAzimuthBias(builder, self.azimuthBias)
        RadarObservation_FullAddAzimuthRate(builder, self.azimuthRate)
        RadarObservation_FullAddElevation(builder, self.elevation)
        RadarObservation_FullAddElevationUnc(builder, self.elevationUnc)
        RadarObservation_FullAddElevationBias(builder, self.elevationBias)
        RadarObservation_FullAddElevationRate(builder, self.elevationRate)
        RadarObservation_FullAddRange(builder, self.range)
        RadarObservation_FullAddRangeAccel(builder, self.rangeAccel)
        RadarObservation_FullAddRangeAccelUnc(builder, self.rangeAccelUnc)
        RadarObservation_FullAddRangeUnc(builder, self.rangeUnc)
        RadarObservation_FullAddRangeBias(builder, self.rangeBias)
        RadarObservation_FullAddRangeRate(builder, self.rangeRate)
        RadarObservation_FullAddRangeRateUnc(builder, self.rangeRateUnc)
        RadarObservation_FullAddDoppler(builder, self.doppler)
        RadarObservation_FullAddDopplerUnc(builder, self.dopplerUnc)
        RadarObservation_FullAddRa(builder, self.ra)
        RadarObservation_FullAddDeclination(builder, self.declination)
        RadarObservation_FullAddX(builder, self.x)
        RadarObservation_FullAddY(builder, self.y)
        RadarObservation_FullAddZ(builder, self.z)
        RadarObservation_FullAddXvel(builder, self.xvel)
        RadarObservation_FullAddYvel(builder, self.yvel)
        RadarObservation_FullAddZvel(builder, self.zvel)
        RadarObservation_FullAddSenx(builder, self.senx)
        RadarObservation_FullAddSeny(builder, self.seny)
        RadarObservation_FullAddSenz(builder, self.senz)
        RadarObservation_FullAddRcs(builder, self.rcs)
        RadarObservation_FullAddRcsUnc(builder, self.rcsUnc)
        RadarObservation_FullAddOrthogonalRcs(builder, self.orthogonalRcs)
        RadarObservation_FullAddOrthogonalRcsUnc(builder, self.orthogonalRcsUnc)
        RadarObservation_FullAddSnr(builder, self.snr)
        RadarObservation_FullAddBeam(builder, self.beam)
        RadarObservation_FullAddTimingBias(builder, self.timingBias)
        if self.rawFileUri is not None:
            RadarObservation_FullAddRawFileUri(builder, rawFileUri)
        if self.source is not None:
            RadarObservation_FullAddSource(builder, source)
        if self.origin is not None:
            RadarObservation_FullAddOrigin(builder, origin)
        RadarObservation_FullAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            RadarObservation_FullAddTags(builder, tags)
        if self.createdAt is not None:
            RadarObservation_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            RadarObservation_FullAddCreatedBy(builder, createdBy)
        if self.onOrbit is not None:
            RadarObservation_FullAddOnOrbit(builder, onOrbit)
        RadarObservation_FullAddSenReferenceFrame(builder, self.senReferenceFrame)
        if self.descriptor is not None:
            RadarObservation_FullAddDescriptor(builder, descriptor)
        if self.origNetwork is not None:
            RadarObservation_FullAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            RadarObservation_FullAddSourceDl(builder, sourceDl)
        if self.type is not None:
            RadarObservation_FullAddType(builder, type)
        radarObservationFull = RadarObservation_FullEnd(builder)
        return radarObservationFull
