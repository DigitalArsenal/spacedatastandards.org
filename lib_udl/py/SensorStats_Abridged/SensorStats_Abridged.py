# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// SensorStats contain statistics on sensors related to observation production such as last reported observation time.
class SensorStats_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SensorStats_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorStats_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SensorStats_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # SensorStats_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSORSTATS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorStats_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique ID of the parent sensor.
    # Example: /// Example: idSensor
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorStats_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SensorStats_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of last reported observation in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # SensorStats_Abridged
    def LastObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorStats_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SensorStats_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only time the row was updated in the database, set automatically by the system on update.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorStats_Abridged
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorStats_Abridged
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SensorStats_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SensorStats_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SensorStats_AbridgedStart(builder):
    builder.StartObject(10)

def Start(builder):
    SensorStats_AbridgedStart(builder)

def SensorStats_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SensorStats_AbridgedAddId(builder, id)

def SensorStats_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SensorStats_AbridgedAddIdSensor(builder, idSensor)

def SensorStats_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SensorStats_AbridgedAddClassificationMarking(builder, classificationMarking)

def SensorStats_AbridgedAddLastObTime(builder, lastObTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lastObTime), 0)

def AddLastObTime(builder, lastObTime):
    SensorStats_AbridgedAddLastObTime(builder, lastObTime)

def SensorStats_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SensorStats_AbridgedAddCreatedAt(builder, createdAt)

def SensorStats_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SensorStats_AbridgedAddCreatedBy(builder, createdBy)

def SensorStats_AbridgedAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SensorStats_AbridgedAddUpdatedAt(builder, updatedAt)

def SensorStats_AbridgedAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SensorStats_AbridgedAddUpdatedBy(builder, updatedBy)

def SensorStats_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SensorStats_AbridgedAddSource(builder, source)

def SensorStats_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    SensorStats_AbridgedAddDataMode(builder, dataMode)

def SensorStats_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SensorStats_AbridgedEnd(builder)


class SensorStats_AbridgedT(object):

    # SensorStats_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idSensor = None  # type: str
        self.classificationMarking = None  # type: str
        self.lastObTime = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorStatsAbridged = SensorStats_Abridged()
        sensorStatsAbridged.Init(buf, pos)
        return cls.InitFromObj(sensorStatsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorStatsAbridged):
        x = SensorStats_AbridgedT()
        x._UnPack(sensorStatsAbridged)
        return x

    # SensorStats_AbridgedT
    def _UnPack(self, sensorStatsAbridged):
        if sensorStatsAbridged is None:
            return
        self.id = sensorStatsAbridged.Id()
        self.idSensor = sensorStatsAbridged.IdSensor()
        self.classificationMarking = sensorStatsAbridged.ClassificationMarking()
        self.lastObTime = sensorStatsAbridged.LastObTime()
        self.createdAt = sensorStatsAbridged.CreatedAt()
        self.createdBy = sensorStatsAbridged.CreatedBy()
        self.updatedAt = sensorStatsAbridged.UpdatedAt()
        self.updatedBy = sensorStatsAbridged.UpdatedBy()
        self.source = sensorStatsAbridged.Source()
        self.dataMode = sensorStatsAbridged.DataMode()

    # SensorStats_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.lastObTime is not None:
            lastObTime = builder.CreateString(self.lastObTime)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        SensorStats_AbridgedStart(builder)
        if self.id is not None:
            SensorStats_AbridgedAddId(builder, id)
        if self.idSensor is not None:
            SensorStats_AbridgedAddIdSensor(builder, idSensor)
        if self.classificationMarking is not None:
            SensorStats_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.lastObTime is not None:
            SensorStats_AbridgedAddLastObTime(builder, lastObTime)
        if self.createdAt is not None:
            SensorStats_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SensorStats_AbridgedAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SensorStats_AbridgedAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SensorStats_AbridgedAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SensorStats_AbridgedAddSource(builder, source)
        SensorStats_AbridgedAddDataMode(builder, self.dataMode)
        sensorStatsAbridged = SensorStats_AbridgedEnd(builder)
        return sensorStatsAbridged
