# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
class DataLinkReferences_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkReferences_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkReferences_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkReferences_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkReferences_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Specifies an alphabetic serial identifier a reference pertaining to the data link message.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 2
    # DataLinkReferences_Full
    def RefSerialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the type of document referenced.
    # Example: /// Example: ABSTAT
    # Constraints: Minimum length = 0, Maximum length = 56
    # DataLinkReferences_Full
    def RefType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originator of this reference.
    # Example: /// Example: CENTCOM
    # Constraints: Minimum length = 0, Maximum length = 30
    # DataLinkReferences_Full
    def RefOriginator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLinkReferences_Full
    def RefTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Serial number assigned to this reference.
    # Example: /// Example: 1402001
    # Constraints: Minimum length = 0, Maximum length = 10
    # DataLinkReferences_Full
    def RefSerialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates any special actions, restrictions, guidance, or information relating to this reference.
    # Example: /// Example: NOTAL
    # Constraints: Minimum length = 0, Maximum length = 5
    # DataLinkReferences_Full
    def RefSpecialNotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
    # Example: /// Example: ['RDU', 'C-123-92']
    # Constraints: No constraints specified.
    # DataLinkReferences_Full
    def RefSics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataLinkReferences_Full
    def RefSicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataLinkReferences_Full
    def RefSicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def DataLinkReferences_FullStart(builder):
    builder.StartObject(7)

def Start(builder):
    DataLinkReferences_FullStart(builder)

def DataLinkReferences_FullAddRefSerialId(builder, refSerialId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(refSerialId), 0)

def AddRefSerialId(builder, refSerialId):
    DataLinkReferences_FullAddRefSerialId(builder, refSerialId)

def DataLinkReferences_FullAddRefType(builder, refType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(refType), 0)

def AddRefType(builder, refType):
    DataLinkReferences_FullAddRefType(builder, refType)

def DataLinkReferences_FullAddRefOriginator(builder, refOriginator):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(refOriginator), 0)

def AddRefOriginator(builder, refOriginator):
    DataLinkReferences_FullAddRefOriginator(builder, refOriginator)

def DataLinkReferences_FullAddRefTs(builder, refTs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(refTs), 0)

def AddRefTs(builder, refTs):
    DataLinkReferences_FullAddRefTs(builder, refTs)

def DataLinkReferences_FullAddRefSerialNum(builder, refSerialNum):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(refSerialNum), 0)

def AddRefSerialNum(builder, refSerialNum):
    DataLinkReferences_FullAddRefSerialNum(builder, refSerialNum)

def DataLinkReferences_FullAddRefSpecialNotation(builder, refSpecialNotation):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(refSpecialNotation), 0)

def AddRefSpecialNotation(builder, refSpecialNotation):
    DataLinkReferences_FullAddRefSpecialNotation(builder, refSpecialNotation)

def DataLinkReferences_FullAddRefSics(builder, refSics):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(refSics), 0)

def AddRefSics(builder, refSics):
    DataLinkReferences_FullAddRefSics(builder, refSics)

def DataLinkReferences_FullStartRefSicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRefSicsVector(builder, numElems):
    return DataLinkReferences_FullStartRefSicsVector(builder, numElems)

def DataLinkReferences_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkReferences_FullEnd(builder)

try:
    from typing import List
except:
    pass

class DataLinkReferences_FullT(object):

    # DataLinkReferences_FullT
    def __init__(self):
        self.refSerialId = None  # type: str
        self.refType = None  # type: str
        self.refOriginator = None  # type: str
        self.refTs = None  # type: str
        self.refSerialNum = None  # type: str
        self.refSpecialNotation = None  # type: str
        self.refSics = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkReferencesFull = DataLinkReferences_Full()
        dataLinkReferencesFull.Init(buf, pos)
        return cls.InitFromObj(dataLinkReferencesFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkReferencesFull):
        x = DataLinkReferences_FullT()
        x._UnPack(dataLinkReferencesFull)
        return x

    # DataLinkReferences_FullT
    def _UnPack(self, dataLinkReferencesFull):
        if dataLinkReferencesFull is None:
            return
        self.refSerialId = dataLinkReferencesFull.RefSerialId()
        self.refType = dataLinkReferencesFull.RefType()
        self.refOriginator = dataLinkReferencesFull.RefOriginator()
        self.refTs = dataLinkReferencesFull.RefTs()
        self.refSerialNum = dataLinkReferencesFull.RefSerialNum()
        self.refSpecialNotation = dataLinkReferencesFull.RefSpecialNotation()
        if not dataLinkReferencesFull.RefSicsIsNone():
            self.refSics = []
            for i in range(dataLinkReferencesFull.RefSicsLength()):
                self.refSics.append(dataLinkReferencesFull.RefSics(i))

    # DataLinkReferences_FullT
    def Pack(self, builder):
        if self.refSerialId is not None:
            refSerialId = builder.CreateString(self.refSerialId)
        if self.refType is not None:
            refType = builder.CreateString(self.refType)
        if self.refOriginator is not None:
            refOriginator = builder.CreateString(self.refOriginator)
        if self.refTs is not None:
            refTs = builder.CreateString(self.refTs)
        if self.refSerialNum is not None:
            refSerialNum = builder.CreateString(self.refSerialNum)
        if self.refSpecialNotation is not None:
            refSpecialNotation = builder.CreateString(self.refSpecialNotation)
        if self.refSics is not None:
            refSicslist = []
            for i in range(len(self.refSics)):
                refSicslist.append(builder.CreateString(self.refSics[i]))
            DataLinkReferences_FullStartRefSicsVector(builder, len(self.refSics))
            for i in reversed(range(len(self.refSics))):
                builder.PrependUOffsetTRelative(refSicslist[i])
            refSics = builder.EndVector()
        DataLinkReferences_FullStart(builder)
        if self.refSerialId is not None:
            DataLinkReferences_FullAddRefSerialId(builder, refSerialId)
        if self.refType is not None:
            DataLinkReferences_FullAddRefType(builder, refType)
        if self.refOriginator is not None:
            DataLinkReferences_FullAddRefOriginator(builder, refOriginator)
        if self.refTs is not None:
            DataLinkReferences_FullAddRefTs(builder, refTs)
        if self.refSerialNum is not None:
            DataLinkReferences_FullAddRefSerialNum(builder, refSerialNum)
        if self.refSpecialNotation is not None:
            DataLinkReferences_FullAddRefSpecialNotation(builder, refSpecialNotation)
        if self.refSics is not None:
            DataLinkReferences_FullAddRefSics(builder, refSics)
        dataLinkReferencesFull = DataLinkReferences_FullEnd(builder)
        return dataLinkReferencesFull
