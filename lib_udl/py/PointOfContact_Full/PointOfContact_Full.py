# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Point of contacts for scheduling or modifying the route.
class PointOfContact_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PointOfContact_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPointOfContact_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PointOfContact_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x4F\x49\x4E", size_prefixed=size_prefixed)

    # PointOfContact_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sequencing field for point of contact.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # PointOfContact_Full
    def PocSequenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
    # Example: /// Example: Originator
    # Constraints: Minimum length = 0, Maximum length = 36
    # PointOfContact_Full
    def PocTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the contact.
    # Example: /// Example: Fred Smith
    # Constraints: Minimum length = 0, Maximum length = 36
    # PointOfContact_Full
    def PocName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Office name for which the contact belongs.
    # Example: /// Example: A34
    # Constraints: Minimum length = 0, Maximum length = 36
    # PointOfContact_Full
    def Office(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The username of the contact.
    # Example: /// Example: fgsmith
    # Constraints: Minimum length = 0, Maximum length = 64
    # PointOfContact_Full
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The rank of contact.
    # Example: /// Example: Capt
    # Constraints: Minimum length = 0, Maximum length = 32
    # PointOfContact_Full
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization name for which the contact belongs.
    # Example: /// Example: HQAF
    # Constraints: Minimum length = 0, Maximum length = 36
    # PointOfContact_Full
    def PocOrg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Phone number of the contact.
    # Example: /// Example: 8675309
    # Constraints: Minimum length = 0, Maximum length = 45
    # PointOfContact_Full
    def Phone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text of the remark.
    # Example: /// Example: POC remark.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # PointOfContact_Full
    def Remark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PointOfContact_FullStart(builder):
    builder.StartObject(9)

def Start(builder):
    PointOfContact_FullStart(builder)

def PointOfContact_FullAddPocSequenceId(builder, pocSequenceId):
    builder.PrependInt32Slot(0, pocSequenceId, 0)

def AddPocSequenceId(builder, pocSequenceId):
    PointOfContact_FullAddPocSequenceId(builder, pocSequenceId)

def PointOfContact_FullAddPocTypeName(builder, pocTypeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pocTypeName), 0)

def AddPocTypeName(builder, pocTypeName):
    PointOfContact_FullAddPocTypeName(builder, pocTypeName)

def PointOfContact_FullAddPocName(builder, pocName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pocName), 0)

def AddPocName(builder, pocName):
    PointOfContact_FullAddPocName(builder, pocName)

def PointOfContact_FullAddOffice(builder, office):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(office), 0)

def AddOffice(builder, office):
    PointOfContact_FullAddOffice(builder, office)

def PointOfContact_FullAddUsername(builder, username):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)

def AddUsername(builder, username):
    PointOfContact_FullAddUsername(builder, username)

def PointOfContact_FullAddRank(builder, rank):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rank), 0)

def AddRank(builder, rank):
    PointOfContact_FullAddRank(builder, rank)

def PointOfContact_FullAddPocOrg(builder, pocOrg):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pocOrg), 0)

def AddPocOrg(builder, pocOrg):
    PointOfContact_FullAddPocOrg(builder, pocOrg)

def PointOfContact_FullAddPhone(builder, phone):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(phone), 0)

def AddPhone(builder, phone):
    PointOfContact_FullAddPhone(builder, phone)

def PointOfContact_FullAddRemark(builder, remark):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(remark), 0)

def AddRemark(builder, remark):
    PointOfContact_FullAddRemark(builder, remark)

def PointOfContact_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return PointOfContact_FullEnd(builder)


class PointOfContact_FullT(object):

    # PointOfContact_FullT
    def __init__(self):
        self.pocSequenceId = 0  # type: int
        self.pocTypeName = None  # type: str
        self.pocName = None  # type: str
        self.office = None  # type: str
        self.username = None  # type: str
        self.rank = None  # type: str
        self.pocOrg = None  # type: str
        self.phone = None  # type: str
        self.remark = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        pointOfContactFull = PointOfContact_Full()
        pointOfContactFull.Init(buf, pos)
        return cls.InitFromObj(pointOfContactFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, pointOfContactFull):
        x = PointOfContact_FullT()
        x._UnPack(pointOfContactFull)
        return x

    # PointOfContact_FullT
    def _UnPack(self, pointOfContactFull):
        if pointOfContactFull is None:
            return
        self.pocSequenceId = pointOfContactFull.PocSequenceId()
        self.pocTypeName = pointOfContactFull.PocTypeName()
        self.pocName = pointOfContactFull.PocName()
        self.office = pointOfContactFull.Office()
        self.username = pointOfContactFull.Username()
        self.rank = pointOfContactFull.Rank()
        self.pocOrg = pointOfContactFull.PocOrg()
        self.phone = pointOfContactFull.Phone()
        self.remark = pointOfContactFull.Remark()

    # PointOfContact_FullT
    def Pack(self, builder):
        if self.pocTypeName is not None:
            pocTypeName = builder.CreateString(self.pocTypeName)
        if self.pocName is not None:
            pocName = builder.CreateString(self.pocName)
        if self.office is not None:
            office = builder.CreateString(self.office)
        if self.username is not None:
            username = builder.CreateString(self.username)
        if self.rank is not None:
            rank = builder.CreateString(self.rank)
        if self.pocOrg is not None:
            pocOrg = builder.CreateString(self.pocOrg)
        if self.phone is not None:
            phone = builder.CreateString(self.phone)
        if self.remark is not None:
            remark = builder.CreateString(self.remark)
        PointOfContact_FullStart(builder)
        PointOfContact_FullAddPocSequenceId(builder, self.pocSequenceId)
        if self.pocTypeName is not None:
            PointOfContact_FullAddPocTypeName(builder, pocTypeName)
        if self.pocName is not None:
            PointOfContact_FullAddPocName(builder, pocName)
        if self.office is not None:
            PointOfContact_FullAddOffice(builder, office)
        if self.username is not None:
            PointOfContact_FullAddUsername(builder, username)
        if self.rank is not None:
            PointOfContact_FullAddRank(builder, rank)
        if self.pocOrg is not None:
            PointOfContact_FullAddPocOrg(builder, pocOrg)
        if self.phone is not None:
            PointOfContact_FullAddPhone(builder, phone)
        if self.remark is not None:
            PointOfContact_FullAddRemark(builder, remark)
        pointOfContactFull = PointOfContact_FullEnd(builder)
        return pointOfContactFull
