# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Objective Area Information.
class PersonnelRecoveryObjectiveAreaInfo_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PersonnelRecoveryObjectiveAreaInfo_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPersonnelRecoveryObjectiveAreaInfo_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PersonnelRecoveryObjectiveAreaInfo_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x45\x52\x53", size_prefixed=size_prefixed)

    # PersonnelRecoveryObjectiveAreaInfo_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
    # Example: /// Example: [103.23, 30.445]
    # Constraints: No constraints specified.
    # PersonnelRecoveryObjectiveAreaInfo_Full
    def PzLocation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PersonnelRecoveryObjectiveAreaInfo_Full
    def PzLocationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PersonnelRecoveryObjectiveAreaInfo_Full
    def PzLocationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Description of the pickup zone location.
    # Example: /// Example: Near the lake.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # PersonnelRecoveryObjectiveAreaInfo_Full
    def PzDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign of the on-scene commander.
    # Example: /// Example: STARFOX
    # Constraints: Minimum length = 0, Maximum length = 128
    # PersonnelRecoveryObjectiveAreaInfo_Full
    def OscCallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The radio frequency of the on-scene commander.
    # Example: /// Example: 12.55
    # Constraints: No constraints specified.
    # PersonnelRecoveryObjectiveAreaInfo_Full
    def OscFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Information detailing knowledge of enemies in the area.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # PersonnelRecoveryObjectiveAreaInfo_Full
    def EnemyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # PersonnelRecoveryObjectiveAreaInfo_Full
    def EnemyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PersonnelRecoveryObjectiveAreaInfo_Full
    def EnemyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def PersonnelRecoveryObjectiveAreaInfo_FullStart(builder):
    builder.StartObject(5)

def Start(builder):
    PersonnelRecoveryObjectiveAreaInfo_FullStart(builder)

def PersonnelRecoveryObjectiveAreaInfo_FullAddPzLocation(builder, pzLocation):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pzLocation), 0)

def AddPzLocation(builder, pzLocation):
    PersonnelRecoveryObjectiveAreaInfo_FullAddPzLocation(builder, pzLocation)

def PersonnelRecoveryObjectiveAreaInfo_FullStartPzLocationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPzLocationVector(builder, numElems):
    return PersonnelRecoveryObjectiveAreaInfo_FullStartPzLocationVector(builder, numElems)

def PersonnelRecoveryObjectiveAreaInfo_FullAddPzDesc(builder, pzDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pzDesc), 0)

def AddPzDesc(builder, pzDesc):
    PersonnelRecoveryObjectiveAreaInfo_FullAddPzDesc(builder, pzDesc)

def PersonnelRecoveryObjectiveAreaInfo_FullAddOscCallSign(builder, oscCallSign):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(oscCallSign), 0)

def AddOscCallSign(builder, oscCallSign):
    PersonnelRecoveryObjectiveAreaInfo_FullAddOscCallSign(builder, oscCallSign)

def PersonnelRecoveryObjectiveAreaInfo_FullAddOscFreq(builder, oscFreq):
    builder.PrependFloat64Slot(3, oscFreq, 0.0)

def AddOscFreq(builder, oscFreq):
    PersonnelRecoveryObjectiveAreaInfo_FullAddOscFreq(builder, oscFreq)

def PersonnelRecoveryObjectiveAreaInfo_FullAddEnemyData(builder, enemyData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyData), 0)

def AddEnemyData(builder, enemyData):
    PersonnelRecoveryObjectiveAreaInfo_FullAddEnemyData(builder, enemyData)

def PersonnelRecoveryObjectiveAreaInfo_FullStartEnemyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyDataVector(builder, numElems):
    return PersonnelRecoveryObjectiveAreaInfo_FullStartEnemyDataVector(builder, numElems)

def PersonnelRecoveryObjectiveAreaInfo_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return PersonnelRecoveryObjectiveAreaInfo_FullEnd(builder)

try:
    from typing import List
except:
    pass

class PersonnelRecoveryObjectiveAreaInfo_FullT(object):

    # PersonnelRecoveryObjectiveAreaInfo_FullT
    def __init__(self):
        self.pzLocation = None  # type: List[str]
        self.pzDesc = None  # type: str
        self.oscCallSign = None  # type: str
        self.oscFreq = 0.0  # type: float
        self.enemyData = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        personnelRecoveryObjectiveAreaInfoFull = PersonnelRecoveryObjectiveAreaInfo_Full()
        personnelRecoveryObjectiveAreaInfoFull.Init(buf, pos)
        return cls.InitFromObj(personnelRecoveryObjectiveAreaInfoFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, personnelRecoveryObjectiveAreaInfoFull):
        x = PersonnelRecoveryObjectiveAreaInfo_FullT()
        x._UnPack(personnelRecoveryObjectiveAreaInfoFull)
        return x

    # PersonnelRecoveryObjectiveAreaInfo_FullT
    def _UnPack(self, personnelRecoveryObjectiveAreaInfoFull):
        if personnelRecoveryObjectiveAreaInfoFull is None:
            return
        if not personnelRecoveryObjectiveAreaInfoFull.PzLocationIsNone():
            self.pzLocation = []
            for i in range(personnelRecoveryObjectiveAreaInfoFull.PzLocationLength()):
                self.pzLocation.append(personnelRecoveryObjectiveAreaInfoFull.PzLocation(i))
        self.pzDesc = personnelRecoveryObjectiveAreaInfoFull.PzDesc()
        self.oscCallSign = personnelRecoveryObjectiveAreaInfoFull.OscCallSign()
        self.oscFreq = personnelRecoveryObjectiveAreaInfoFull.OscFreq()
        if not personnelRecoveryObjectiveAreaInfoFull.EnemyDataIsNone():
            self.enemyData = []
            for i in range(personnelRecoveryObjectiveAreaInfoFull.EnemyDataLength()):
                self.enemyData.append(personnelRecoveryObjectiveAreaInfoFull.EnemyData(i))

    # PersonnelRecoveryObjectiveAreaInfo_FullT
    def Pack(self, builder):
        if self.pzLocation is not None:
            pzLocationlist = []
            for i in range(len(self.pzLocation)):
                pzLocationlist.append(builder.CreateString(self.pzLocation[i]))
            PersonnelRecoveryObjectiveAreaInfo_FullStartPzLocationVector(builder, len(self.pzLocation))
            for i in reversed(range(len(self.pzLocation))):
                builder.PrependUOffsetTRelative(pzLocationlist[i])
            pzLocation = builder.EndVector()
        if self.pzDesc is not None:
            pzDesc = builder.CreateString(self.pzDesc)
        if self.oscCallSign is not None:
            oscCallSign = builder.CreateString(self.oscCallSign)
        if self.enemyData is not None:
            enemyDatalist = []
            for i in range(len(self.enemyData)):
                enemyDatalist.append(builder.CreateString(self.enemyData[i]))
            PersonnelRecoveryObjectiveAreaInfo_FullStartEnemyDataVector(builder, len(self.enemyData))
            for i in reversed(range(len(self.enemyData))):
                builder.PrependUOffsetTRelative(enemyDatalist[i])
            enemyData = builder.EndVector()
        PersonnelRecoveryObjectiveAreaInfo_FullStart(builder)
        if self.pzLocation is not None:
            PersonnelRecoveryObjectiveAreaInfo_FullAddPzLocation(builder, pzLocation)
        if self.pzDesc is not None:
            PersonnelRecoveryObjectiveAreaInfo_FullAddPzDesc(builder, pzDesc)
        if self.oscCallSign is not None:
            PersonnelRecoveryObjectiveAreaInfo_FullAddOscCallSign(builder, oscCallSign)
        PersonnelRecoveryObjectiveAreaInfo_FullAddOscFreq(builder, self.oscFreq)
        if self.enemyData is not None:
            PersonnelRecoveryObjectiveAreaInfo_FullAddEnemyData(builder, enemyData)
        personnelRecoveryObjectiveAreaInfoFull = PersonnelRecoveryObjectiveAreaInfo_FullEnd(builder)
        return personnelRecoveryObjectiveAreaInfoFull
