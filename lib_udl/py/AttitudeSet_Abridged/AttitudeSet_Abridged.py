# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
class AttitudeSet_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AttitudeSet_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAttitudeSet_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AttitudeSet_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x54\x54\x49", size_prefixed=size_prefixed)

    # AttitudeSet_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ATTITUDESET-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeSet_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AttitudeSet_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the on-orbit satellite to which this attitude set applies.
    # Example: /// Example: 41947
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeSet_Abridged
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the on-orbit object to which this attitude set applies.
    # Example: /// Example: 41947
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: D6593
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeSet_Abridged
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of attitude message or messages associated with this set.
    # AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
    # APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
    # Example: /// Example: AEM
    # Constraints: Minimum length = 1, Maximum length = 3
    # AttitudeSet_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
    # Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeSet_Abridged
    def EsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
    # Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
    # Constraints: Minimum length = 0, Maximum length = 36
    # AttitudeSet_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # AttitudeSet_Abridged
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
    # Example: /// Example: 2022-07-07T16:00:00.123456Z
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
    # Example: /// Example: 2022-07-07T18:00:00.654321Z
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
    # Example: /// Example: SCBODY
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeSet_Abridged
    def Frame1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
    # Example: /// Example: J2000
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeSet_Abridged
    def Frame2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of attitude records contained in this set.
    # Example: /// Example: 120
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def NumPoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
    # Example: /// Example: 60
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def StepSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Initial precession angle (ECI J2000 frame) in degrees.
    # Example: /// Example: 30.5
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def PrecAngleInit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Initial spin angle (ECI J2000 frame) in degrees.
    # Example: /// Example: 25.5
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def SpinAngleInit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
    # The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
    # Example: /// Example: 123
    # Constraints: Minimum length = 0, Maximum length = 3
    # AttitudeSet_Abridged
    def EulerRotSeq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Recommended interpolation method for estimating attitude ephemeris data.
    # Example: /// Example: LINEAR
    # Constraints: Minimum length = 0, Maximum length = 16
    # AttitudeSet_Abridged
    def Interpolator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Recommended polynomial interpolation degree.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def InterpolatorDegree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional notes/comments for this attitude set.
    # Example: /// Example: Notes for this attitude set
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AttitudeSet_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-07-05T12:00:00.123Z
    # Constraints: No constraints specified.
    # AttitudeSet_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AttitudeSet_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AttitudeSet_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AttitudeSet_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AttitudeSet_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AttitudeSet_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AttitudeSet_AbridgedStart(builder):
    builder.StartObject(27)

def Start(builder):
    AttitudeSet_AbridgedStart(builder)

def AttitudeSet_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AttitudeSet_AbridgedAddId(builder, id)

def AttitudeSet_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AttitudeSet_AbridgedAddClassificationMarking(builder, classificationMarking)

def AttitudeSet_AbridgedAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    AttitudeSet_AbridgedAddIdOnOrbit(builder, idOnOrbit)

def AttitudeSet_AbridgedAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    AttitudeSet_AbridgedAddSatNo(builder, satNo)

def AttitudeSet_AbridgedAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    AttitudeSet_AbridgedAddOrigObjectId(builder, origObjectId)

def AttitudeSet_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AttitudeSet_AbridgedAddType(builder, type)

def AttitudeSet_AbridgedAddEsId(builder, esId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(esId), 0)

def AddEsId(builder, esId):
    AttitudeSet_AbridgedAddEsId(builder, esId)

def AttitudeSet_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    AttitudeSet_AbridgedAddIdSensor(builder, idSensor)

def AttitudeSet_AbridgedAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    AttitudeSet_AbridgedAddOrigSensorId(builder, origSensorId)

def AttitudeSet_AbridgedAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    AttitudeSet_AbridgedAddStartTime(builder, startTime)

def AttitudeSet_AbridgedAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    AttitudeSet_AbridgedAddEndTime(builder, endTime)

def AttitudeSet_AbridgedAddFrame1(builder, frame1):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(frame1), 0)

def AddFrame1(builder, frame1):
    AttitudeSet_AbridgedAddFrame1(builder, frame1)

def AttitudeSet_AbridgedAddFrame2(builder, frame2):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(frame2), 0)

def AddFrame2(builder, frame2):
    AttitudeSet_AbridgedAddFrame2(builder, frame2)

def AttitudeSet_AbridgedAddNumPoints(builder, numPoints):
    builder.PrependInt32Slot(13, numPoints, 0)

def AddNumPoints(builder, numPoints):
    AttitudeSet_AbridgedAddNumPoints(builder, numPoints)

def AttitudeSet_AbridgedAddStepSize(builder, stepSize):
    builder.PrependInt32Slot(14, stepSize, 0)

def AddStepSize(builder, stepSize):
    AttitudeSet_AbridgedAddStepSize(builder, stepSize)

def AttitudeSet_AbridgedAddPrecAngleInit(builder, precAngleInit):
    builder.PrependFloat64Slot(15, precAngleInit, 0.0)

def AddPrecAngleInit(builder, precAngleInit):
    AttitudeSet_AbridgedAddPrecAngleInit(builder, precAngleInit)

def AttitudeSet_AbridgedAddSpinAngleInit(builder, spinAngleInit):
    builder.PrependFloat64Slot(16, spinAngleInit, 0.0)

def AddSpinAngleInit(builder, spinAngleInit):
    AttitudeSet_AbridgedAddSpinAngleInit(builder, spinAngleInit)

def AttitudeSet_AbridgedAddEulerRotSeq(builder, eulerRotSeq):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(eulerRotSeq), 0)

def AddEulerRotSeq(builder, eulerRotSeq):
    AttitudeSet_AbridgedAddEulerRotSeq(builder, eulerRotSeq)

def AttitudeSet_AbridgedAddInterpolator(builder, interpolator):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(interpolator), 0)

def AddInterpolator(builder, interpolator):
    AttitudeSet_AbridgedAddInterpolator(builder, interpolator)

def AttitudeSet_AbridgedAddInterpolatorDegree(builder, interpolatorDegree):
    builder.PrependInt32Slot(19, interpolatorDegree, 0)

def AddInterpolatorDegree(builder, interpolatorDegree):
    AttitudeSet_AbridgedAddInterpolatorDegree(builder, interpolatorDegree)

def AttitudeSet_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    AttitudeSet_AbridgedAddNotes(builder, notes)

def AttitudeSet_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AttitudeSet_AbridgedAddCreatedAt(builder, createdAt)

def AttitudeSet_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AttitudeSet_AbridgedAddCreatedBy(builder, createdBy)

def AttitudeSet_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AttitudeSet_AbridgedAddSource(builder, source)

def AttitudeSet_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AttitudeSet_AbridgedAddOrigin(builder, origin)

def AttitudeSet_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(25, dataMode, 0)

def AddDataMode(builder, dataMode):
    AttitudeSet_AbridgedAddDataMode(builder, dataMode)

def AttitudeSet_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AttitudeSet_AbridgedAddOrigNetwork(builder, origNetwork)

def AttitudeSet_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AttitudeSet_AbridgedEnd(builder)


class AttitudeSet_AbridgedT(object):

    # AttitudeSet_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.type = None  # type: str
        self.esId = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.frame1 = None  # type: str
        self.frame2 = None  # type: str
        self.numPoints = 0  # type: int
        self.stepSize = 0  # type: int
        self.precAngleInit = 0.0  # type: float
        self.spinAngleInit = 0.0  # type: float
        self.eulerRotSeq = None  # type: str
        self.interpolator = None  # type: str
        self.interpolatorDegree = 0  # type: int
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        attitudeSetAbridged = AttitudeSet_Abridged()
        attitudeSetAbridged.Init(buf, pos)
        return cls.InitFromObj(attitudeSetAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, attitudeSetAbridged):
        x = AttitudeSet_AbridgedT()
        x._UnPack(attitudeSetAbridged)
        return x

    # AttitudeSet_AbridgedT
    def _UnPack(self, attitudeSetAbridged):
        if attitudeSetAbridged is None:
            return
        self.id = attitudeSetAbridged.Id()
        self.classificationMarking = attitudeSetAbridged.ClassificationMarking()
        self.idOnOrbit = attitudeSetAbridged.IdOnOrbit()
        self.satNo = attitudeSetAbridged.SatNo()
        self.origObjectId = attitudeSetAbridged.OrigObjectId()
        self.type = attitudeSetAbridged.Type()
        self.esId = attitudeSetAbridged.EsId()
        self.idSensor = attitudeSetAbridged.IdSensor()
        self.origSensorId = attitudeSetAbridged.OrigSensorId()
        self.startTime = attitudeSetAbridged.StartTime()
        self.endTime = attitudeSetAbridged.EndTime()
        self.frame1 = attitudeSetAbridged.Frame1()
        self.frame2 = attitudeSetAbridged.Frame2()
        self.numPoints = attitudeSetAbridged.NumPoints()
        self.stepSize = attitudeSetAbridged.StepSize()
        self.precAngleInit = attitudeSetAbridged.PrecAngleInit()
        self.spinAngleInit = attitudeSetAbridged.SpinAngleInit()
        self.eulerRotSeq = attitudeSetAbridged.EulerRotSeq()
        self.interpolator = attitudeSetAbridged.Interpolator()
        self.interpolatorDegree = attitudeSetAbridged.InterpolatorDegree()
        self.notes = attitudeSetAbridged.Notes()
        self.createdAt = attitudeSetAbridged.CreatedAt()
        self.createdBy = attitudeSetAbridged.CreatedBy()
        self.source = attitudeSetAbridged.Source()
        self.origin = attitudeSetAbridged.Origin()
        self.dataMode = attitudeSetAbridged.DataMode()
        self.origNetwork = attitudeSetAbridged.OrigNetwork()

    # AttitudeSet_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.esId is not None:
            esId = builder.CreateString(self.esId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.frame1 is not None:
            frame1 = builder.CreateString(self.frame1)
        if self.frame2 is not None:
            frame2 = builder.CreateString(self.frame2)
        if self.eulerRotSeq is not None:
            eulerRotSeq = builder.CreateString(self.eulerRotSeq)
        if self.interpolator is not None:
            interpolator = builder.CreateString(self.interpolator)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AttitudeSet_AbridgedStart(builder)
        if self.id is not None:
            AttitudeSet_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AttitudeSet_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            AttitudeSet_AbridgedAddIdOnOrbit(builder, idOnOrbit)
        AttitudeSet_AbridgedAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            AttitudeSet_AbridgedAddOrigObjectId(builder, origObjectId)
        if self.type is not None:
            AttitudeSet_AbridgedAddType(builder, type)
        if self.esId is not None:
            AttitudeSet_AbridgedAddEsId(builder, esId)
        if self.idSensor is not None:
            AttitudeSet_AbridgedAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            AttitudeSet_AbridgedAddOrigSensorId(builder, origSensorId)
        if self.startTime is not None:
            AttitudeSet_AbridgedAddStartTime(builder, startTime)
        if self.endTime is not None:
            AttitudeSet_AbridgedAddEndTime(builder, endTime)
        if self.frame1 is not None:
            AttitudeSet_AbridgedAddFrame1(builder, frame1)
        if self.frame2 is not None:
            AttitudeSet_AbridgedAddFrame2(builder, frame2)
        AttitudeSet_AbridgedAddNumPoints(builder, self.numPoints)
        AttitudeSet_AbridgedAddStepSize(builder, self.stepSize)
        AttitudeSet_AbridgedAddPrecAngleInit(builder, self.precAngleInit)
        AttitudeSet_AbridgedAddSpinAngleInit(builder, self.spinAngleInit)
        if self.eulerRotSeq is not None:
            AttitudeSet_AbridgedAddEulerRotSeq(builder, eulerRotSeq)
        if self.interpolator is not None:
            AttitudeSet_AbridgedAddInterpolator(builder, interpolator)
        AttitudeSet_AbridgedAddInterpolatorDegree(builder, self.interpolatorDegree)
        if self.notes is not None:
            AttitudeSet_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            AttitudeSet_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AttitudeSet_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            AttitudeSet_AbridgedAddSource(builder, source)
        if self.origin is not None:
            AttitudeSet_AbridgedAddOrigin(builder, origin)
        AttitudeSet_AbridgedAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AttitudeSet_AbridgedAddOrigNetwork(builder, origNetwork)
        attitudeSetAbridged = AttitudeSet_AbridgedEnd(builder)
        return attitudeSetAbridged
