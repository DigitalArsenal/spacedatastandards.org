# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information pertaining to UDL data owners.
class DataOwner_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataOwner_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataOwner_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataOwner_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataOwner_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The name of the data owner.
    # Example: /// Example: Data owner name
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataOwner_Abridged
    def DoName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # DataOwner_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
    # Example: /// Example: Commercial
    # Constraints: Minimum length = 1, Maximum length = 32
    # DataOwner_Abridged
    def OwnerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
    # Example: /// Example: ELSET
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataOwner_Abridged
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization name for the data provider.
    # Example: /// Example: ACME
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataOwner_Abridged
    def Provider(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 1, Maximum length = 4
    # DataOwner_Abridged
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the contact for this data owner.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # DataOwner_Abridged
    def IdContact(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of this data owner.
    # Example: /// Example: Description of this data owner.
    # Constraints: No constraints specified.
    # DataOwner_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional control required to access this data type from this owner.
    # Example: /// Example: PR-ACME-ELSETS
    # Constraints: Minimum length = 1, Maximum length = 128
    # DataOwner_Abridged
    def Control(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # DataOwner_Abridged
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Boolean indicating if the data owner is coming soon or not yet available.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # DataOwner_Abridged
    def ComingSoon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Source of the data.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # DataOwner_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataOwner_AbridgedStart(builder):
    builder.StartObject(12)

def Start(builder):
    DataOwner_AbridgedStart(builder)

def DataOwner_AbridgedAddDoName(builder, doName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(doName), 0)

def AddDoName(builder, doName):
    DataOwner_AbridgedAddDoName(builder, doName)

def DataOwner_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    DataOwner_AbridgedAddClassificationMarking(builder, classificationMarking)

def DataOwner_AbridgedAddOwnerType(builder, ownerType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ownerType), 0)

def AddOwnerType(builder, ownerType):
    DataOwner_AbridgedAddOwnerType(builder, ownerType)

def DataOwner_AbridgedAddDataType(builder, dataType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)

def AddDataType(builder, dataType):
    DataOwner_AbridgedAddDataType(builder, dataType)

def DataOwner_AbridgedAddProvider(builder, provider):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(provider), 0)

def AddProvider(builder, provider):
    DataOwner_AbridgedAddProvider(builder, provider)

def DataOwner_AbridgedAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    DataOwner_AbridgedAddCountryCode(builder, countryCode)

def DataOwner_AbridgedAddIdContact(builder, idContact):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(idContact), 0)

def AddIdContact(builder, idContact):
    DataOwner_AbridgedAddIdContact(builder, idContact)

def DataOwner_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    DataOwner_AbridgedAddDescription(builder, description)

def DataOwner_AbridgedAddControl(builder, control):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(control), 0)

def AddControl(builder, control):
    DataOwner_AbridgedAddControl(builder, control)

def DataOwner_AbridgedAddEnabled(builder, enabled):
    builder.PrependBoolSlot(9, enabled, 0)

def AddEnabled(builder, enabled):
    DataOwner_AbridgedAddEnabled(builder, enabled)

def DataOwner_AbridgedAddComingSoon(builder, comingSoon):
    builder.PrependBoolSlot(10, comingSoon, 0)

def AddComingSoon(builder, comingSoon):
    DataOwner_AbridgedAddComingSoon(builder, comingSoon)

def DataOwner_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    DataOwner_AbridgedAddSource(builder, source)

def DataOwner_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataOwner_AbridgedEnd(builder)


class DataOwner_AbridgedT(object):

    # DataOwner_AbridgedT
    def __init__(self):
        self.doName = None  # type: str
        self.classificationMarking = None  # type: str
        self.ownerType = None  # type: str
        self.dataType = None  # type: str
        self.provider = None  # type: str
        self.countryCode = None  # type: str
        self.idContact = None  # type: str
        self.description = None  # type: str
        self.control = None  # type: str
        self.enabled = False  # type: bool
        self.comingSoon = False  # type: bool
        self.source = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataOwnerAbridged = DataOwner_Abridged()
        dataOwnerAbridged.Init(buf, pos)
        return cls.InitFromObj(dataOwnerAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataOwnerAbridged):
        x = DataOwner_AbridgedT()
        x._UnPack(dataOwnerAbridged)
        return x

    # DataOwner_AbridgedT
    def _UnPack(self, dataOwnerAbridged):
        if dataOwnerAbridged is None:
            return
        self.doName = dataOwnerAbridged.DoName()
        self.classificationMarking = dataOwnerAbridged.ClassificationMarking()
        self.ownerType = dataOwnerAbridged.OwnerType()
        self.dataType = dataOwnerAbridged.DataType()
        self.provider = dataOwnerAbridged.Provider()
        self.countryCode = dataOwnerAbridged.CountryCode()
        self.idContact = dataOwnerAbridged.IdContact()
        self.description = dataOwnerAbridged.Description()
        self.control = dataOwnerAbridged.Control()
        self.enabled = dataOwnerAbridged.Enabled()
        self.comingSoon = dataOwnerAbridged.ComingSoon()
        self.source = dataOwnerAbridged.Source()

    # DataOwner_AbridgedT
    def Pack(self, builder):
        if self.doName is not None:
            doName = builder.CreateString(self.doName)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.ownerType is not None:
            ownerType = builder.CreateString(self.ownerType)
        if self.dataType is not None:
            dataType = builder.CreateString(self.dataType)
        if self.provider is not None:
            provider = builder.CreateString(self.provider)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.idContact is not None:
            idContact = builder.CreateString(self.idContact)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.control is not None:
            control = builder.CreateString(self.control)
        if self.source is not None:
            source = builder.CreateString(self.source)
        DataOwner_AbridgedStart(builder)
        if self.doName is not None:
            DataOwner_AbridgedAddDoName(builder, doName)
        if self.classificationMarking is not None:
            DataOwner_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.ownerType is not None:
            DataOwner_AbridgedAddOwnerType(builder, ownerType)
        if self.dataType is not None:
            DataOwner_AbridgedAddDataType(builder, dataType)
        if self.provider is not None:
            DataOwner_AbridgedAddProvider(builder, provider)
        if self.countryCode is not None:
            DataOwner_AbridgedAddCountryCode(builder, countryCode)
        if self.idContact is not None:
            DataOwner_AbridgedAddIdContact(builder, idContact)
        if self.description is not None:
            DataOwner_AbridgedAddDescription(builder, description)
        if self.control is not None:
            DataOwner_AbridgedAddControl(builder, control)
        DataOwner_AbridgedAddEnabled(builder, self.enabled)
        DataOwner_AbridgedAddComingSoon(builder, self.comingSoon)
        if self.source is not None:
            DataOwner_AbridgedAddSource(builder, source)
        dataOwnerAbridged = DataOwner_AbridgedEnd(builder)
        return dataOwnerAbridged
