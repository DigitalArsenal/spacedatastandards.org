# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of waypoints associated with this flight plan.
class FlightPlanWaypoints_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlightPlanWaypoints_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlightPlanWaypoints_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def FlightPlanWaypoints_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x49\x47", size_prefixed=size_prefixed)

    # FlightPlanWaypoints_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
    # Example: /// Example: COMMENT
    # Constraints: Minimum length = 1, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 1, Maximum length = 32
    # FlightPlanWaypoints_Abridged
    def WaypointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The waypoint number on the route. Comment points do not get a waypoint number.
    # Example: /// Example: 20
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def WaypointNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The flight path flown for this leg.
    # Example: /// Example: W15
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def Airway(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point identifying an air refueling track/anchor or fixed track.
    # Example: /// Example: ARIP
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def Arpt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The ID of the air refueling track/anchor or fixed track.
    # Example: /// Example: AR202
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def ArId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Navigational Aid (NAVAID) identification code.
    # Example: /// Example: HTO
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def Navaid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
    # Example: /// Example: 83X
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def TacanChannel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
    # Example: /// Example: 113.6
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def VorFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
    # Example: /// Example: EXTREME
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def TurbCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The icing intensity classification for this flight (LIGHT, MODERATE, etc).
    # Example: /// Example: MODERATE
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def IceCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
    # Example: /// Example: MODERATE
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def ThunderCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Altitude of a level, point, or object measured in feet above mean sea level.
    # Example: /// Example: 27000.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average temperature deviation from standard day profile for this leg in degrees Celsius.
    # Example: /// Example: 12.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TempDev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The fuel degrade percentage used for this leg.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def LegFuelDegrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average Mach speed for this leg.
    # Example: /// Example: 0.74
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def LegMach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
    # Example: /// Example: 65
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def LegMsnIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The percent degrade due to drag for this aircraft for this leg.
    # Example: /// Example: 1.2
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def LegDragIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average calibrated airspeed (CAS) for this leg in knots.
    # Example: /// Example: 200.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AvgCalAirspeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average true airspeed (TAS) for this leg in knots.
    # Example: /// Example: 210.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AvgTrueAirspeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average ground speed for this leg in knots.
    # Example: /// Example: 300.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AvgGroundSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
    # Example: /// Example: 357.5
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def PriFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The wind direction at this specific point in degrees from true north.
    # Example: /// Example: 165.5
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def PointWindDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The wind velocity at this specific point in knots.
    # Example: /// Example: 14.4
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def PointWindSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average wind direction for this leg in degrees from true north.
    # Example: /// Example: 165.5
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AvgWindDir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average wind speed for this leg in knots.
    # Example: /// Example: 14.4
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AvgWindSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
    # Example: /// Example: -32.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def LegWindFac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The average drift angle for this leg in degrees from true north.
    # Example: /// Example: -3.2
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AvgDriftAng(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
    # Example: /// Example: 357.5
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def SecFreq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The magnetic course at leg midpoint in degrees from true north.
    # Example: /// Example: 338.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def MagCourse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The true course at leg midpoint in degrees from true north.
    # Example: /// Example: 328.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TrueCourse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The magnetic heading at leg midpoint in degrees from true north.
    # Example: /// Example: 212.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def MagHeading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
    # Example: /// Example: 31/94
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def AaTacanChannel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The zone/leg distance flown in nautical miles.
    # Example: /// Example: 212.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def ZoneDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total distance flown to this waypoint calculated from point of departure in nautical miles.
    # Example: /// Example: 688.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TotalFlownDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total distance remaining from this waypoint to the point of arrival in nautical miles.
    # Example: /// Example: 1288.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TotalRemDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The time to fly this zone/leg in minutes.
    # Example: /// Example: 36.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def ZoneTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total time accumulated from takeoff to this waypoint expressed as HH:MM.
    # Example: /// Example: 08:45
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlanWaypoints_Abridged
    def TotalTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
    # Example: /// Example: 01:43
    # Constraints: Minimum length = 0, Maximum length = 6
    # FlightPlanWaypoints_Abridged
    def TotalTimeRem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The amount of fuel used on this zone/leg in pounds.
    # Example: /// Example: 1120.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def ZoneFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total fuel used to this waypoint from point of departure in pounds.
    # Example: /// Example: 70431.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TotalUsedFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total fuel remaining at this waypoint in pounds.
    # Example: /// Example: 30453.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TotalRemFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
    # Example: /// Example: -30400.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def ExchangedFuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The air distance of this leg in nautical miles.
    # Example: /// Example: 321.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def AirDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total air distance to this waypoint in nautical miles.
    # Example: /// Example: 3251.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TotalAirDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The total weight of the aircraft at this waypoint in pounds.
    # Example: /// Example: 207123.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def TotalWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-09-09T01:00:00.123Z
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def Eta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-09-09T01:00:00.123Z
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def Ata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The leg fuel flow in pounds per hour.
    # Example: /// Example: 17654.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def FuelFlow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 0, Maximum length = 16
    # FlightPlanWaypoints_Abridged
    def LegAlternate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The magnetic variation for this leg in degrees.
    # Example: /// Example: -13.2
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def MagVar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The day low level altitude in feet above sea level for the leg ending at this waypoint.
    # Example: /// Example: 1500.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def DayLowAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The night low level altitude in feet above sea level for the leg ending at this waypoint.
    # Example: /// Example: 2300.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def NightLowAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
    # Example: /// Example: 2450.1
    # Constraints: No constraints specified.
    # FlightPlanWaypoints_Abridged
    def NvgLowAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def FlightPlanWaypoints_AbridgedStart(builder):
    builder.StartObject(56)

def Start(builder):
    FlightPlanWaypoints_AbridgedStart(builder)

def FlightPlanWaypoints_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    FlightPlanWaypoints_AbridgedAddType(builder, type)

def FlightPlanWaypoints_AbridgedAddWaypointName(builder, waypointName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(waypointName), 0)

def AddWaypointName(builder, waypointName):
    FlightPlanWaypoints_AbridgedAddWaypointName(builder, waypointName)

def FlightPlanWaypoints_AbridgedAddWaypointNum(builder, waypointNum):
    builder.PrependInt32Slot(2, waypointNum, 0)

def AddWaypointNum(builder, waypointNum):
    FlightPlanWaypoints_AbridgedAddWaypointNum(builder, waypointNum)

def FlightPlanWaypoints_AbridgedAddAirway(builder, airway):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(airway), 0)

def AddAirway(builder, airway):
    FlightPlanWaypoints_AbridgedAddAirway(builder, airway)

def FlightPlanWaypoints_AbridgedAddArpt(builder, arpt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(arpt), 0)

def AddArpt(builder, arpt):
    FlightPlanWaypoints_AbridgedAddArpt(builder, arpt)

def FlightPlanWaypoints_AbridgedAddLat(builder, lat):
    builder.PrependFloat64Slot(5, lat, 0.0)

def AddLat(builder, lat):
    FlightPlanWaypoints_AbridgedAddLat(builder, lat)

def FlightPlanWaypoints_AbridgedAddLon(builder, lon):
    builder.PrependFloat64Slot(6, lon, 0.0)

def AddLon(builder, lon):
    FlightPlanWaypoints_AbridgedAddLon(builder, lon)

def FlightPlanWaypoints_AbridgedAddArId(builder, arId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(arId), 0)

def AddArId(builder, arId):
    FlightPlanWaypoints_AbridgedAddArId(builder, arId)

def FlightPlanWaypoints_AbridgedAddNavaid(builder, navaid):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(navaid), 0)

def AddNavaid(builder, navaid):
    FlightPlanWaypoints_AbridgedAddNavaid(builder, navaid)

def FlightPlanWaypoints_AbridgedAddTacanChannel(builder, tacanChannel):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tacanChannel), 0)

def AddTacanChannel(builder, tacanChannel):
    FlightPlanWaypoints_AbridgedAddTacanChannel(builder, tacanChannel)

def FlightPlanWaypoints_AbridgedAddVorFreq(builder, vorFreq):
    builder.PrependFloat64Slot(10, vorFreq, 0.0)

def AddVorFreq(builder, vorFreq):
    FlightPlanWaypoints_AbridgedAddVorFreq(builder, vorFreq)

def FlightPlanWaypoints_AbridgedAddTurbCat(builder, turbCat):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(turbCat), 0)

def AddTurbCat(builder, turbCat):
    FlightPlanWaypoints_AbridgedAddTurbCat(builder, turbCat)

def FlightPlanWaypoints_AbridgedAddIceCat(builder, iceCat):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(iceCat), 0)

def AddIceCat(builder, iceCat):
    FlightPlanWaypoints_AbridgedAddIceCat(builder, iceCat)

def FlightPlanWaypoints_AbridgedAddThunderCat(builder, thunderCat):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(thunderCat), 0)

def AddThunderCat(builder, thunderCat):
    FlightPlanWaypoints_AbridgedAddThunderCat(builder, thunderCat)

def FlightPlanWaypoints_AbridgedAddAlt(builder, alt):
    builder.PrependFloat64Slot(14, alt, 0.0)

def AddAlt(builder, alt):
    FlightPlanWaypoints_AbridgedAddAlt(builder, alt)

def FlightPlanWaypoints_AbridgedAddTempDev(builder, tempDev):
    builder.PrependFloat64Slot(15, tempDev, 0.0)

def AddTempDev(builder, tempDev):
    FlightPlanWaypoints_AbridgedAddTempDev(builder, tempDev)

def FlightPlanWaypoints_AbridgedAddLegFuelDegrade(builder, legFuelDegrade):
    builder.PrependFloat64Slot(16, legFuelDegrade, 0.0)

def AddLegFuelDegrade(builder, legFuelDegrade):
    FlightPlanWaypoints_AbridgedAddLegFuelDegrade(builder, legFuelDegrade)

def FlightPlanWaypoints_AbridgedAddLegMach(builder, legMach):
    builder.PrependFloat64Slot(17, legMach, 0.0)

def AddLegMach(builder, legMach):
    FlightPlanWaypoints_AbridgedAddLegMach(builder, legMach)

def FlightPlanWaypoints_AbridgedAddLegMsnIndex(builder, legMsnIndex):
    builder.PrependFloat64Slot(18, legMsnIndex, 0.0)

def AddLegMsnIndex(builder, legMsnIndex):
    FlightPlanWaypoints_AbridgedAddLegMsnIndex(builder, legMsnIndex)

def FlightPlanWaypoints_AbridgedAddLegDragIndex(builder, legDragIndex):
    builder.PrependFloat64Slot(19, legDragIndex, 0.0)

def AddLegDragIndex(builder, legDragIndex):
    FlightPlanWaypoints_AbridgedAddLegDragIndex(builder, legDragIndex)

def FlightPlanWaypoints_AbridgedAddAvgCalAirspeed(builder, avgCalAirspeed):
    builder.PrependFloat64Slot(20, avgCalAirspeed, 0.0)

def AddAvgCalAirspeed(builder, avgCalAirspeed):
    FlightPlanWaypoints_AbridgedAddAvgCalAirspeed(builder, avgCalAirspeed)

def FlightPlanWaypoints_AbridgedAddAvgTrueAirspeed(builder, avgTrueAirspeed):
    builder.PrependFloat64Slot(21, avgTrueAirspeed, 0.0)

def AddAvgTrueAirspeed(builder, avgTrueAirspeed):
    FlightPlanWaypoints_AbridgedAddAvgTrueAirspeed(builder, avgTrueAirspeed)

def FlightPlanWaypoints_AbridgedAddAvgGroundSpeed(builder, avgGroundSpeed):
    builder.PrependFloat64Slot(22, avgGroundSpeed, 0.0)

def AddAvgGroundSpeed(builder, avgGroundSpeed):
    FlightPlanWaypoints_AbridgedAddAvgGroundSpeed(builder, avgGroundSpeed)

def FlightPlanWaypoints_AbridgedAddPriFreq(builder, priFreq):
    builder.PrependFloat64Slot(23, priFreq, 0.0)

def AddPriFreq(builder, priFreq):
    FlightPlanWaypoints_AbridgedAddPriFreq(builder, priFreq)

def FlightPlanWaypoints_AbridgedAddPointWindDir(builder, pointWindDir):
    builder.PrependFloat64Slot(24, pointWindDir, 0.0)

def AddPointWindDir(builder, pointWindDir):
    FlightPlanWaypoints_AbridgedAddPointWindDir(builder, pointWindDir)

def FlightPlanWaypoints_AbridgedAddPointWindSpeed(builder, pointWindSpeed):
    builder.PrependFloat64Slot(25, pointWindSpeed, 0.0)

def AddPointWindSpeed(builder, pointWindSpeed):
    FlightPlanWaypoints_AbridgedAddPointWindSpeed(builder, pointWindSpeed)

def FlightPlanWaypoints_AbridgedAddAvgWindDir(builder, avgWindDir):
    builder.PrependFloat64Slot(26, avgWindDir, 0.0)

def AddAvgWindDir(builder, avgWindDir):
    FlightPlanWaypoints_AbridgedAddAvgWindDir(builder, avgWindDir)

def FlightPlanWaypoints_AbridgedAddAvgWindSpeed(builder, avgWindSpeed):
    builder.PrependFloat64Slot(27, avgWindSpeed, 0.0)

def AddAvgWindSpeed(builder, avgWindSpeed):
    FlightPlanWaypoints_AbridgedAddAvgWindSpeed(builder, avgWindSpeed)

def FlightPlanWaypoints_AbridgedAddLegWindFac(builder, legWindFac):
    builder.PrependFloat64Slot(28, legWindFac, 0.0)

def AddLegWindFac(builder, legWindFac):
    FlightPlanWaypoints_AbridgedAddLegWindFac(builder, legWindFac)

def FlightPlanWaypoints_AbridgedAddAvgDriftAng(builder, avgDriftAng):
    builder.PrependFloat64Slot(29, avgDriftAng, 0.0)

def AddAvgDriftAng(builder, avgDriftAng):
    FlightPlanWaypoints_AbridgedAddAvgDriftAng(builder, avgDriftAng)

def FlightPlanWaypoints_AbridgedAddSecFreq(builder, secFreq):
    builder.PrependFloat64Slot(30, secFreq, 0.0)

def AddSecFreq(builder, secFreq):
    FlightPlanWaypoints_AbridgedAddSecFreq(builder, secFreq)

def FlightPlanWaypoints_AbridgedAddMagCourse(builder, magCourse):
    builder.PrependFloat64Slot(31, magCourse, 0.0)

def AddMagCourse(builder, magCourse):
    FlightPlanWaypoints_AbridgedAddMagCourse(builder, magCourse)

def FlightPlanWaypoints_AbridgedAddTrueCourse(builder, trueCourse):
    builder.PrependFloat64Slot(32, trueCourse, 0.0)

def AddTrueCourse(builder, trueCourse):
    FlightPlanWaypoints_AbridgedAddTrueCourse(builder, trueCourse)

def FlightPlanWaypoints_AbridgedAddMagHeading(builder, magHeading):
    builder.PrependFloat64Slot(33, magHeading, 0.0)

def AddMagHeading(builder, magHeading):
    FlightPlanWaypoints_AbridgedAddMagHeading(builder, magHeading)

def FlightPlanWaypoints_AbridgedAddAaTacanChannel(builder, aaTacanChannel):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(aaTacanChannel), 0)

def AddAaTacanChannel(builder, aaTacanChannel):
    FlightPlanWaypoints_AbridgedAddAaTacanChannel(builder, aaTacanChannel)

def FlightPlanWaypoints_AbridgedAddZoneDistance(builder, zoneDistance):
    builder.PrependFloat64Slot(35, zoneDistance, 0.0)

def AddZoneDistance(builder, zoneDistance):
    FlightPlanWaypoints_AbridgedAddZoneDistance(builder, zoneDistance)

def FlightPlanWaypoints_AbridgedAddTotalFlownDistance(builder, totalFlownDistance):
    builder.PrependFloat64Slot(36, totalFlownDistance, 0.0)

def AddTotalFlownDistance(builder, totalFlownDistance):
    FlightPlanWaypoints_AbridgedAddTotalFlownDistance(builder, totalFlownDistance)

def FlightPlanWaypoints_AbridgedAddTotalRemDistance(builder, totalRemDistance):
    builder.PrependFloat64Slot(37, totalRemDistance, 0.0)

def AddTotalRemDistance(builder, totalRemDistance):
    FlightPlanWaypoints_AbridgedAddTotalRemDistance(builder, totalRemDistance)

def FlightPlanWaypoints_AbridgedAddZoneTime(builder, zoneTime):
    builder.PrependFloat64Slot(38, zoneTime, 0.0)

def AddZoneTime(builder, zoneTime):
    FlightPlanWaypoints_AbridgedAddZoneTime(builder, zoneTime)

def FlightPlanWaypoints_AbridgedAddTotalTime(builder, totalTime):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(totalTime), 0)

def AddTotalTime(builder, totalTime):
    FlightPlanWaypoints_AbridgedAddTotalTime(builder, totalTime)

def FlightPlanWaypoints_AbridgedAddTotalTimeRem(builder, totalTimeRem):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(totalTimeRem), 0)

def AddTotalTimeRem(builder, totalTimeRem):
    FlightPlanWaypoints_AbridgedAddTotalTimeRem(builder, totalTimeRem)

def FlightPlanWaypoints_AbridgedAddZoneFuel(builder, zoneFuel):
    builder.PrependFloat64Slot(41, zoneFuel, 0.0)

def AddZoneFuel(builder, zoneFuel):
    FlightPlanWaypoints_AbridgedAddZoneFuel(builder, zoneFuel)

def FlightPlanWaypoints_AbridgedAddTotalUsedFuel(builder, totalUsedFuel):
    builder.PrependFloat64Slot(42, totalUsedFuel, 0.0)

def AddTotalUsedFuel(builder, totalUsedFuel):
    FlightPlanWaypoints_AbridgedAddTotalUsedFuel(builder, totalUsedFuel)

def FlightPlanWaypoints_AbridgedAddTotalRemFuel(builder, totalRemFuel):
    builder.PrependFloat64Slot(43, totalRemFuel, 0.0)

def AddTotalRemFuel(builder, totalRemFuel):
    FlightPlanWaypoints_AbridgedAddTotalRemFuel(builder, totalRemFuel)

def FlightPlanWaypoints_AbridgedAddExchangedFuel(builder, exchangedFuel):
    builder.PrependFloat64Slot(44, exchangedFuel, 0.0)

def AddExchangedFuel(builder, exchangedFuel):
    FlightPlanWaypoints_AbridgedAddExchangedFuel(builder, exchangedFuel)

def FlightPlanWaypoints_AbridgedAddAirDistance(builder, airDistance):
    builder.PrependFloat64Slot(45, airDistance, 0.0)

def AddAirDistance(builder, airDistance):
    FlightPlanWaypoints_AbridgedAddAirDistance(builder, airDistance)

def FlightPlanWaypoints_AbridgedAddTotalAirDistance(builder, totalAirDistance):
    builder.PrependFloat64Slot(46, totalAirDistance, 0.0)

def AddTotalAirDistance(builder, totalAirDistance):
    FlightPlanWaypoints_AbridgedAddTotalAirDistance(builder, totalAirDistance)

def FlightPlanWaypoints_AbridgedAddTotalWeight(builder, totalWeight):
    builder.PrependFloat64Slot(47, totalWeight, 0.0)

def AddTotalWeight(builder, totalWeight):
    FlightPlanWaypoints_AbridgedAddTotalWeight(builder, totalWeight)

def FlightPlanWaypoints_AbridgedAddEta(builder, eta):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(eta), 0)

def AddEta(builder, eta):
    FlightPlanWaypoints_AbridgedAddEta(builder, eta)

def FlightPlanWaypoints_AbridgedAddAta(builder, ata):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(ata), 0)

def AddAta(builder, ata):
    FlightPlanWaypoints_AbridgedAddAta(builder, ata)

def FlightPlanWaypoints_AbridgedAddFuelFlow(builder, fuelFlow):
    builder.PrependFloat64Slot(50, fuelFlow, 0.0)

def AddFuelFlow(builder, fuelFlow):
    FlightPlanWaypoints_AbridgedAddFuelFlow(builder, fuelFlow)

def FlightPlanWaypoints_AbridgedAddLegAlternate(builder, legAlternate):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(legAlternate), 0)

def AddLegAlternate(builder, legAlternate):
    FlightPlanWaypoints_AbridgedAddLegAlternate(builder, legAlternate)

def FlightPlanWaypoints_AbridgedAddMagVar(builder, magVar):
    builder.PrependFloat64Slot(52, magVar, 0.0)

def AddMagVar(builder, magVar):
    FlightPlanWaypoints_AbridgedAddMagVar(builder, magVar)

def FlightPlanWaypoints_AbridgedAddDayLowAlt(builder, dayLowAlt):
    builder.PrependFloat64Slot(53, dayLowAlt, 0.0)

def AddDayLowAlt(builder, dayLowAlt):
    FlightPlanWaypoints_AbridgedAddDayLowAlt(builder, dayLowAlt)

def FlightPlanWaypoints_AbridgedAddNightLowAlt(builder, nightLowAlt):
    builder.PrependFloat64Slot(54, nightLowAlt, 0.0)

def AddNightLowAlt(builder, nightLowAlt):
    FlightPlanWaypoints_AbridgedAddNightLowAlt(builder, nightLowAlt)

def FlightPlanWaypoints_AbridgedAddNvgLowAlt(builder, nvgLowAlt):
    builder.PrependFloat64Slot(55, nvgLowAlt, 0.0)

def AddNvgLowAlt(builder, nvgLowAlt):
    FlightPlanWaypoints_AbridgedAddNvgLowAlt(builder, nvgLowAlt)

def FlightPlanWaypoints_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlightPlanWaypoints_AbridgedEnd(builder)


class FlightPlanWaypoints_AbridgedT(object):

    # FlightPlanWaypoints_AbridgedT
    def __init__(self):
        self.type = None  # type: str
        self.waypointName = None  # type: str
        self.waypointNum = 0  # type: int
        self.airway = None  # type: str
        self.arpt = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.arId = None  # type: str
        self.navaid = None  # type: str
        self.tacanChannel = None  # type: str
        self.vorFreq = 0.0  # type: float
        self.turbCat = None  # type: str
        self.iceCat = None  # type: str
        self.thunderCat = None  # type: str
        self.alt = 0.0  # type: float
        self.tempDev = 0.0  # type: float
        self.legFuelDegrade = 0.0  # type: float
        self.legMach = 0.0  # type: float
        self.legMsnIndex = 0.0  # type: float
        self.legDragIndex = 0.0  # type: float
        self.avgCalAirspeed = 0.0  # type: float
        self.avgTrueAirspeed = 0.0  # type: float
        self.avgGroundSpeed = 0.0  # type: float
        self.priFreq = 0.0  # type: float
        self.pointWindDir = 0.0  # type: float
        self.pointWindSpeed = 0.0  # type: float
        self.avgWindDir = 0.0  # type: float
        self.avgWindSpeed = 0.0  # type: float
        self.legWindFac = 0.0  # type: float
        self.avgDriftAng = 0.0  # type: float
        self.secFreq = 0.0  # type: float
        self.magCourse = 0.0  # type: float
        self.trueCourse = 0.0  # type: float
        self.magHeading = 0.0  # type: float
        self.aaTacanChannel = None  # type: str
        self.zoneDistance = 0.0  # type: float
        self.totalFlownDistance = 0.0  # type: float
        self.totalRemDistance = 0.0  # type: float
        self.zoneTime = 0.0  # type: float
        self.totalTime = None  # type: str
        self.totalTimeRem = None  # type: str
        self.zoneFuel = 0.0  # type: float
        self.totalUsedFuel = 0.0  # type: float
        self.totalRemFuel = 0.0  # type: float
        self.exchangedFuel = 0.0  # type: float
        self.airDistance = 0.0  # type: float
        self.totalAirDistance = 0.0  # type: float
        self.totalWeight = 0.0  # type: float
        self.eta = None  # type: str
        self.ata = None  # type: str
        self.fuelFlow = 0.0  # type: float
        self.legAlternate = None  # type: str
        self.magVar = 0.0  # type: float
        self.dayLowAlt = 0.0  # type: float
        self.nightLowAlt = 0.0  # type: float
        self.nvgLowAlt = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        flightPlanWaypointsAbridged = FlightPlanWaypoints_Abridged()
        flightPlanWaypointsAbridged.Init(buf, pos)
        return cls.InitFromObj(flightPlanWaypointsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, flightPlanWaypointsAbridged):
        x = FlightPlanWaypoints_AbridgedT()
        x._UnPack(flightPlanWaypointsAbridged)
        return x

    # FlightPlanWaypoints_AbridgedT
    def _UnPack(self, flightPlanWaypointsAbridged):
        if flightPlanWaypointsAbridged is None:
            return
        self.type = flightPlanWaypointsAbridged.Type()
        self.waypointName = flightPlanWaypointsAbridged.WaypointName()
        self.waypointNum = flightPlanWaypointsAbridged.WaypointNum()
        self.airway = flightPlanWaypointsAbridged.Airway()
        self.arpt = flightPlanWaypointsAbridged.Arpt()
        self.lat = flightPlanWaypointsAbridged.Lat()
        self.lon = flightPlanWaypointsAbridged.Lon()
        self.arId = flightPlanWaypointsAbridged.ArId()
        self.navaid = flightPlanWaypointsAbridged.Navaid()
        self.tacanChannel = flightPlanWaypointsAbridged.TacanChannel()
        self.vorFreq = flightPlanWaypointsAbridged.VorFreq()
        self.turbCat = flightPlanWaypointsAbridged.TurbCat()
        self.iceCat = flightPlanWaypointsAbridged.IceCat()
        self.thunderCat = flightPlanWaypointsAbridged.ThunderCat()
        self.alt = flightPlanWaypointsAbridged.Alt()
        self.tempDev = flightPlanWaypointsAbridged.TempDev()
        self.legFuelDegrade = flightPlanWaypointsAbridged.LegFuelDegrade()
        self.legMach = flightPlanWaypointsAbridged.LegMach()
        self.legMsnIndex = flightPlanWaypointsAbridged.LegMsnIndex()
        self.legDragIndex = flightPlanWaypointsAbridged.LegDragIndex()
        self.avgCalAirspeed = flightPlanWaypointsAbridged.AvgCalAirspeed()
        self.avgTrueAirspeed = flightPlanWaypointsAbridged.AvgTrueAirspeed()
        self.avgGroundSpeed = flightPlanWaypointsAbridged.AvgGroundSpeed()
        self.priFreq = flightPlanWaypointsAbridged.PriFreq()
        self.pointWindDir = flightPlanWaypointsAbridged.PointWindDir()
        self.pointWindSpeed = flightPlanWaypointsAbridged.PointWindSpeed()
        self.avgWindDir = flightPlanWaypointsAbridged.AvgWindDir()
        self.avgWindSpeed = flightPlanWaypointsAbridged.AvgWindSpeed()
        self.legWindFac = flightPlanWaypointsAbridged.LegWindFac()
        self.avgDriftAng = flightPlanWaypointsAbridged.AvgDriftAng()
        self.secFreq = flightPlanWaypointsAbridged.SecFreq()
        self.magCourse = flightPlanWaypointsAbridged.MagCourse()
        self.trueCourse = flightPlanWaypointsAbridged.TrueCourse()
        self.magHeading = flightPlanWaypointsAbridged.MagHeading()
        self.aaTacanChannel = flightPlanWaypointsAbridged.AaTacanChannel()
        self.zoneDistance = flightPlanWaypointsAbridged.ZoneDistance()
        self.totalFlownDistance = flightPlanWaypointsAbridged.TotalFlownDistance()
        self.totalRemDistance = flightPlanWaypointsAbridged.TotalRemDistance()
        self.zoneTime = flightPlanWaypointsAbridged.ZoneTime()
        self.totalTime = flightPlanWaypointsAbridged.TotalTime()
        self.totalTimeRem = flightPlanWaypointsAbridged.TotalTimeRem()
        self.zoneFuel = flightPlanWaypointsAbridged.ZoneFuel()
        self.totalUsedFuel = flightPlanWaypointsAbridged.TotalUsedFuel()
        self.totalRemFuel = flightPlanWaypointsAbridged.TotalRemFuel()
        self.exchangedFuel = flightPlanWaypointsAbridged.ExchangedFuel()
        self.airDistance = flightPlanWaypointsAbridged.AirDistance()
        self.totalAirDistance = flightPlanWaypointsAbridged.TotalAirDistance()
        self.totalWeight = flightPlanWaypointsAbridged.TotalWeight()
        self.eta = flightPlanWaypointsAbridged.Eta()
        self.ata = flightPlanWaypointsAbridged.Ata()
        self.fuelFlow = flightPlanWaypointsAbridged.FuelFlow()
        self.legAlternate = flightPlanWaypointsAbridged.LegAlternate()
        self.magVar = flightPlanWaypointsAbridged.MagVar()
        self.dayLowAlt = flightPlanWaypointsAbridged.DayLowAlt()
        self.nightLowAlt = flightPlanWaypointsAbridged.NightLowAlt()
        self.nvgLowAlt = flightPlanWaypointsAbridged.NvgLowAlt()

    # FlightPlanWaypoints_AbridgedT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.waypointName is not None:
            waypointName = builder.CreateString(self.waypointName)
        if self.airway is not None:
            airway = builder.CreateString(self.airway)
        if self.arpt is not None:
            arpt = builder.CreateString(self.arpt)
        if self.arId is not None:
            arId = builder.CreateString(self.arId)
        if self.navaid is not None:
            navaid = builder.CreateString(self.navaid)
        if self.tacanChannel is not None:
            tacanChannel = builder.CreateString(self.tacanChannel)
        if self.turbCat is not None:
            turbCat = builder.CreateString(self.turbCat)
        if self.iceCat is not None:
            iceCat = builder.CreateString(self.iceCat)
        if self.thunderCat is not None:
            thunderCat = builder.CreateString(self.thunderCat)
        if self.aaTacanChannel is not None:
            aaTacanChannel = builder.CreateString(self.aaTacanChannel)
        if self.totalTime is not None:
            totalTime = builder.CreateString(self.totalTime)
        if self.totalTimeRem is not None:
            totalTimeRem = builder.CreateString(self.totalTimeRem)
        if self.eta is not None:
            eta = builder.CreateString(self.eta)
        if self.ata is not None:
            ata = builder.CreateString(self.ata)
        if self.legAlternate is not None:
            legAlternate = builder.CreateString(self.legAlternate)
        FlightPlanWaypoints_AbridgedStart(builder)
        if self.type is not None:
            FlightPlanWaypoints_AbridgedAddType(builder, type)
        if self.waypointName is not None:
            FlightPlanWaypoints_AbridgedAddWaypointName(builder, waypointName)
        FlightPlanWaypoints_AbridgedAddWaypointNum(builder, self.waypointNum)
        if self.airway is not None:
            FlightPlanWaypoints_AbridgedAddAirway(builder, airway)
        if self.arpt is not None:
            FlightPlanWaypoints_AbridgedAddArpt(builder, arpt)
        FlightPlanWaypoints_AbridgedAddLat(builder, self.lat)
        FlightPlanWaypoints_AbridgedAddLon(builder, self.lon)
        if self.arId is not None:
            FlightPlanWaypoints_AbridgedAddArId(builder, arId)
        if self.navaid is not None:
            FlightPlanWaypoints_AbridgedAddNavaid(builder, navaid)
        if self.tacanChannel is not None:
            FlightPlanWaypoints_AbridgedAddTacanChannel(builder, tacanChannel)
        FlightPlanWaypoints_AbridgedAddVorFreq(builder, self.vorFreq)
        if self.turbCat is not None:
            FlightPlanWaypoints_AbridgedAddTurbCat(builder, turbCat)
        if self.iceCat is not None:
            FlightPlanWaypoints_AbridgedAddIceCat(builder, iceCat)
        if self.thunderCat is not None:
            FlightPlanWaypoints_AbridgedAddThunderCat(builder, thunderCat)
        FlightPlanWaypoints_AbridgedAddAlt(builder, self.alt)
        FlightPlanWaypoints_AbridgedAddTempDev(builder, self.tempDev)
        FlightPlanWaypoints_AbridgedAddLegFuelDegrade(builder, self.legFuelDegrade)
        FlightPlanWaypoints_AbridgedAddLegMach(builder, self.legMach)
        FlightPlanWaypoints_AbridgedAddLegMsnIndex(builder, self.legMsnIndex)
        FlightPlanWaypoints_AbridgedAddLegDragIndex(builder, self.legDragIndex)
        FlightPlanWaypoints_AbridgedAddAvgCalAirspeed(builder, self.avgCalAirspeed)
        FlightPlanWaypoints_AbridgedAddAvgTrueAirspeed(builder, self.avgTrueAirspeed)
        FlightPlanWaypoints_AbridgedAddAvgGroundSpeed(builder, self.avgGroundSpeed)
        FlightPlanWaypoints_AbridgedAddPriFreq(builder, self.priFreq)
        FlightPlanWaypoints_AbridgedAddPointWindDir(builder, self.pointWindDir)
        FlightPlanWaypoints_AbridgedAddPointWindSpeed(builder, self.pointWindSpeed)
        FlightPlanWaypoints_AbridgedAddAvgWindDir(builder, self.avgWindDir)
        FlightPlanWaypoints_AbridgedAddAvgWindSpeed(builder, self.avgWindSpeed)
        FlightPlanWaypoints_AbridgedAddLegWindFac(builder, self.legWindFac)
        FlightPlanWaypoints_AbridgedAddAvgDriftAng(builder, self.avgDriftAng)
        FlightPlanWaypoints_AbridgedAddSecFreq(builder, self.secFreq)
        FlightPlanWaypoints_AbridgedAddMagCourse(builder, self.magCourse)
        FlightPlanWaypoints_AbridgedAddTrueCourse(builder, self.trueCourse)
        FlightPlanWaypoints_AbridgedAddMagHeading(builder, self.magHeading)
        if self.aaTacanChannel is not None:
            FlightPlanWaypoints_AbridgedAddAaTacanChannel(builder, aaTacanChannel)
        FlightPlanWaypoints_AbridgedAddZoneDistance(builder, self.zoneDistance)
        FlightPlanWaypoints_AbridgedAddTotalFlownDistance(builder, self.totalFlownDistance)
        FlightPlanWaypoints_AbridgedAddTotalRemDistance(builder, self.totalRemDistance)
        FlightPlanWaypoints_AbridgedAddZoneTime(builder, self.zoneTime)
        if self.totalTime is not None:
            FlightPlanWaypoints_AbridgedAddTotalTime(builder, totalTime)
        if self.totalTimeRem is not None:
            FlightPlanWaypoints_AbridgedAddTotalTimeRem(builder, totalTimeRem)
        FlightPlanWaypoints_AbridgedAddZoneFuel(builder, self.zoneFuel)
        FlightPlanWaypoints_AbridgedAddTotalUsedFuel(builder, self.totalUsedFuel)
        FlightPlanWaypoints_AbridgedAddTotalRemFuel(builder, self.totalRemFuel)
        FlightPlanWaypoints_AbridgedAddExchangedFuel(builder, self.exchangedFuel)
        FlightPlanWaypoints_AbridgedAddAirDistance(builder, self.airDistance)
        FlightPlanWaypoints_AbridgedAddTotalAirDistance(builder, self.totalAirDistance)
        FlightPlanWaypoints_AbridgedAddTotalWeight(builder, self.totalWeight)
        if self.eta is not None:
            FlightPlanWaypoints_AbridgedAddEta(builder, eta)
        if self.ata is not None:
            FlightPlanWaypoints_AbridgedAddAta(builder, ata)
        FlightPlanWaypoints_AbridgedAddFuelFlow(builder, self.fuelFlow)
        if self.legAlternate is not None:
            FlightPlanWaypoints_AbridgedAddLegAlternate(builder, legAlternate)
        FlightPlanWaypoints_AbridgedAddMagVar(builder, self.magVar)
        FlightPlanWaypoints_AbridgedAddDayLowAlt(builder, self.dayLowAlt)
        FlightPlanWaypoints_AbridgedAddNightLowAlt(builder, self.nightLowAlt)
        FlightPlanWaypoints_AbridgedAddNvgLowAlt(builder, self.nvgLowAlt)
        flightPlanWaypointsAbridged = FlightPlanWaypoints_AbridgedEnd(builder)
        return flightPlanWaypointsAbridged
