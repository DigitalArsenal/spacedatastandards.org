# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// High priority time windows.
class ISRCollectionCriticalTimes_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionCriticalTimes_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionCriticalTimes_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionCriticalTimes_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionCriticalTimes_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Critical start time to collect an image for this requirement.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionCriticalTimes_Abridged
    def EarliestImagingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Critical stop time to collect an image for this requirement.
    # Example: /// Example: 2021-01-19T01:11:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionCriticalTimes_Abridged
    def LatestImagingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ISRCollectionCriticalTimes_AbridgedStart(builder):
    builder.StartObject(2)

def Start(builder):
    ISRCollectionCriticalTimes_AbridgedStart(builder)

def ISRCollectionCriticalTimes_AbridgedAddEarliestImagingTime(builder, earliestImagingTime):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(earliestImagingTime), 0)

def AddEarliestImagingTime(builder, earliestImagingTime):
    ISRCollectionCriticalTimes_AbridgedAddEarliestImagingTime(builder, earliestImagingTime)

def ISRCollectionCriticalTimes_AbridgedAddLatestImagingTime(builder, latestImagingTime):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(latestImagingTime), 0)

def AddLatestImagingTime(builder, latestImagingTime):
    ISRCollectionCriticalTimes_AbridgedAddLatestImagingTime(builder, latestImagingTime)

def ISRCollectionCriticalTimes_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionCriticalTimes_AbridgedEnd(builder)


class ISRCollectionCriticalTimes_AbridgedT(object):

    # ISRCollectionCriticalTimes_AbridgedT
    def __init__(self):
        self.earliestImagingTime = None  # type: str
        self.latestImagingTime = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionCriticalTimesAbridged = ISRCollectionCriticalTimes_Abridged()
        isrcollectionCriticalTimesAbridged.Init(buf, pos)
        return cls.InitFromObj(isrcollectionCriticalTimesAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionCriticalTimesAbridged):
        x = ISRCollectionCriticalTimes_AbridgedT()
        x._UnPack(isrcollectionCriticalTimesAbridged)
        return x

    # ISRCollectionCriticalTimes_AbridgedT
    def _UnPack(self, isrcollectionCriticalTimesAbridged):
        if isrcollectionCriticalTimesAbridged is None:
            return
        self.earliestImagingTime = isrcollectionCriticalTimesAbridged.EarliestImagingTime()
        self.latestImagingTime = isrcollectionCriticalTimesAbridged.LatestImagingTime()

    # ISRCollectionCriticalTimes_AbridgedT
    def Pack(self, builder):
        if self.earliestImagingTime is not None:
            earliestImagingTime = builder.CreateString(self.earliestImagingTime)
        if self.latestImagingTime is not None:
            latestImagingTime = builder.CreateString(self.latestImagingTime)
        ISRCollectionCriticalTimes_AbridgedStart(builder)
        if self.earliestImagingTime is not None:
            ISRCollectionCriticalTimes_AbridgedAddEarliestImagingTime(builder, earliestImagingTime)
        if self.latestImagingTime is not None:
            ISRCollectionCriticalTimes_AbridgedAddLatestImagingTime(builder, latestImagingTime)
        isrcollectionCriticalTimesAbridged = ISRCollectionCriticalTimes_AbridgedEnd(builder)
        return isrcollectionCriticalTimesAbridged
