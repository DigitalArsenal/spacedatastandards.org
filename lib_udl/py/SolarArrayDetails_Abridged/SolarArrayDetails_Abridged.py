# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
class SolarArrayDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SolarArrayDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSolarArrayDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SolarArrayDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4F\x4C\x41", size_prefixed=size_prefixed)

    # SolarArrayDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SOLARARRAYDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SolarArrayDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent SolarArray.
    # Example: /// Example: SOLARARRAY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SolarArrayDetails_Abridged
    def IdSolarArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SolarArrayDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of solar array (e.g. U Shaped).
    # Example: /// Example: U Shaped
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar array technology (e.g. Ga-As).
    # Example: /// Example: Ga-As
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Abridged
    def Technology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar array junction technology (e.g. Triple).
    # Example: /// Example: Triple
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Abridged
    def JunctionTechnology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization that manufactures the solar array.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SolarArrayDetails_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar Array span in meters.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # SolarArrayDetails_Abridged
    def Span(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Solar Array area in square meters.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # SolarArrayDetails_Abridged
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Solar array description/notes.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SolarArrayDetails_Abridged
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SolarArrayDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArrayDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArrayDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArrayDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArrayDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SolarArrayDetails_AbridgedStart(builder):
    builder.StartObject(16)

def Start(builder):
    SolarArrayDetails_AbridgedStart(builder)

def SolarArrayDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SolarArrayDetails_AbridgedAddId(builder, id)

def SolarArrayDetails_AbridgedAddIdSolarArray(builder, idSolarArray):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idSolarArray), 0)

def AddIdSolarArray(builder, idSolarArray):
    SolarArrayDetails_AbridgedAddIdSolarArray(builder, idSolarArray)

def SolarArrayDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SolarArrayDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def SolarArrayDetails_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    SolarArrayDetails_AbridgedAddType(builder, type)

def SolarArrayDetails_AbridgedAddTechnology(builder, technology):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(technology), 0)

def AddTechnology(builder, technology):
    SolarArrayDetails_AbridgedAddTechnology(builder, technology)

def SolarArrayDetails_AbridgedAddJunctionTechnology(builder, junctionTechnology):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(junctionTechnology), 0)

def AddJunctionTechnology(builder, junctionTechnology):
    SolarArrayDetails_AbridgedAddJunctionTechnology(builder, junctionTechnology)

def SolarArrayDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SolarArrayDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def SolarArrayDetails_AbridgedAddSpan(builder, span):
    builder.PrependFloat64Slot(7, span, 0.0)

def AddSpan(builder, span):
    SolarArrayDetails_AbridgedAddSpan(builder, span)

def SolarArrayDetails_AbridgedAddArea(builder, area):
    builder.PrependFloat64Slot(8, area, 0.0)

def AddArea(builder, area):
    SolarArrayDetails_AbridgedAddArea(builder, area)

def SolarArrayDetails_AbridgedAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    SolarArrayDetails_AbridgedAddDescription(builder, description)

def SolarArrayDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SolarArrayDetails_AbridgedAddCreatedAt(builder, createdAt)

def SolarArrayDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SolarArrayDetails_AbridgedAddCreatedBy(builder, createdBy)

def SolarArrayDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SolarArrayDetails_AbridgedAddSource(builder, source)

def SolarArrayDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SolarArrayDetails_AbridgedAddOrigin(builder, origin)

def SolarArrayDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SolarArrayDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def SolarArrayDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(15, dataMode, 0)

def AddDataMode(builder, dataMode):
    SolarArrayDetails_AbridgedAddDataMode(builder, dataMode)

def SolarArrayDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SolarArrayDetails_AbridgedEnd(builder)


class SolarArrayDetails_AbridgedT(object):

    # SolarArrayDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idSolarArray = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.technology = None  # type: str
        self.junctionTechnology = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.span = 0.0  # type: float
        self.area = 0.0  # type: float
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        solarArrayDetailsAbridged = SolarArrayDetails_Abridged()
        solarArrayDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(solarArrayDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, solarArrayDetailsAbridged):
        x = SolarArrayDetails_AbridgedT()
        x._UnPack(solarArrayDetailsAbridged)
        return x

    # SolarArrayDetails_AbridgedT
    def _UnPack(self, solarArrayDetailsAbridged):
        if solarArrayDetailsAbridged is None:
            return
        self.id = solarArrayDetailsAbridged.Id()
        self.idSolarArray = solarArrayDetailsAbridged.IdSolarArray()
        self.classificationMarking = solarArrayDetailsAbridged.ClassificationMarking()
        self.type = solarArrayDetailsAbridged.Type()
        self.technology = solarArrayDetailsAbridged.Technology()
        self.junctionTechnology = solarArrayDetailsAbridged.JunctionTechnology()
        self.manufacturerOrgId = solarArrayDetailsAbridged.ManufacturerOrgId()
        self.span = solarArrayDetailsAbridged.Span()
        self.area = solarArrayDetailsAbridged.Area()
        self.description = solarArrayDetailsAbridged.Description()
        self.createdAt = solarArrayDetailsAbridged.CreatedAt()
        self.createdBy = solarArrayDetailsAbridged.CreatedBy()
        self.source = solarArrayDetailsAbridged.Source()
        self.origin = solarArrayDetailsAbridged.Origin()
        self.origNetwork = solarArrayDetailsAbridged.OrigNetwork()
        self.dataMode = solarArrayDetailsAbridged.DataMode()

    # SolarArrayDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idSolarArray is not None:
            idSolarArray = builder.CreateString(self.idSolarArray)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.technology is not None:
            technology = builder.CreateString(self.technology)
        if self.junctionTechnology is not None:
            junctionTechnology = builder.CreateString(self.junctionTechnology)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SolarArrayDetails_AbridgedStart(builder)
        if self.id is not None:
            SolarArrayDetails_AbridgedAddId(builder, id)
        if self.idSolarArray is not None:
            SolarArrayDetails_AbridgedAddIdSolarArray(builder, idSolarArray)
        if self.classificationMarking is not None:
            SolarArrayDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            SolarArrayDetails_AbridgedAddType(builder, type)
        if self.technology is not None:
            SolarArrayDetails_AbridgedAddTechnology(builder, technology)
        if self.junctionTechnology is not None:
            SolarArrayDetails_AbridgedAddJunctionTechnology(builder, junctionTechnology)
        if self.manufacturerOrgId is not None:
            SolarArrayDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        SolarArrayDetails_AbridgedAddSpan(builder, self.span)
        SolarArrayDetails_AbridgedAddArea(builder, self.area)
        if self.description is not None:
            SolarArrayDetails_AbridgedAddDescription(builder, description)
        if self.createdAt is not None:
            SolarArrayDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SolarArrayDetails_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SolarArrayDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SolarArrayDetails_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SolarArrayDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        SolarArrayDetails_AbridgedAddDataMode(builder, self.dataMode)
        solarArrayDetailsAbridged = SolarArrayDetails_AbridgedEnd(builder)
        return solarArrayDetailsAbridged
