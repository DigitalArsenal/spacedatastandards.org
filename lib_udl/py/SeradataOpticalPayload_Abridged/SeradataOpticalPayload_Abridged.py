# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Details for an optical payload from  Seradata.
class SeradataOpticalPayload_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeradataOpticalPayload_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeradataOpticalPayload_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SeradataOpticalPayload_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x52\x41", size_prefixed=size_prefixed)

    # SeradataOpticalPayload_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SERADATAOPTICALPAYLOAD-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataOpticalPayload_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SeradataOpticalPayload_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
    # Example: /// Example: spacecraftId
    # Constraints: Minimum length = 1, Maximum length = 36
    # SeradataOpticalPayload_Abridged
    def SpacecraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UUID of the Sensor record.
    # Example: /// Example: idSensor
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataOpticalPayload_Abridged
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Hosted for company/Organization Id.
    # Example: /// Example: hostedForCompanyOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataOpticalPayload_Abridged
    def HostedForCompanyOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Manufacturer Organization Id.
    # Example: /// Example: manufacturerOrgId
    # Constraints: Minimum length = 0, Maximum length = 36
    # SeradataOpticalPayload_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
    # Example: /// Example: Infrared
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataOpticalPayload_Abridged
    def ImagingPayloadCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
    # Example: /// Example: TOURNESOL
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataOpticalPayload_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
    # Example: /// Example: Green
    # Constraints: Minimum length = 0, Maximum length = 20
    # SeradataOpticalPayload_Abridged
    def SpectralBand(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Frequency limit for this payload, e.g. 0.51 - 0.59.
    # Example: /// Example: 0.51
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataOpticalPayload_Abridged
    def SpectralFrequencyLimits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of film return canisters.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # SeradataOpticalPayload_Abridged
    def NumberOfFilmReturnCanisters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Best resolution.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataOpticalPayload_Abridged
    def BestResolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Swath width in kilometers.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataOpticalPayload_Abridged
    def SwathWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Recorder size.
    # Example: /// Example: 1024
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataOpticalPayload_Abridged
    def RecorderSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Field of view of this radar in kilometers.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataOpticalPayload_Abridged
    def FieldOfView(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Field of regard of this radar in degrees.
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # SeradataOpticalPayload_Abridged
    def FieldOfRegard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Point method for this radar, e.g. Spacecraft.
    # Example: /// Example: Spacecraft
    # Constraints: Minimum length = 0, Maximum length = 50
    # SeradataOpticalPayload_Abridged
    def PointingMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground Station info for this payload.
    # Example: /// Example: groundStations
    # Constraints: Minimum length = 0, Maximum length = 256
    # SeradataOpticalPayload_Abridged
    def GroundStations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ground Station Locations for this payload.
    # Example: /// Example: groundStationLocations
    # Constraints: Minimum length = 0, Maximum length = 128
    # SeradataOpticalPayload_Abridged
    def GroundStationLocations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Payload notes.
    # Example: /// Example: Sample Notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SeradataOpticalPayload_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SeradataOpticalPayload_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataOpticalPayload_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SeradataOpticalPayload_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SeradataOpticalPayload_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataOpticalPayload_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SeradataOpticalPayload_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SeradataOpticalPayload_AbridgedStart(builder):
    builder.StartObject(26)

def Start(builder):
    SeradataOpticalPayload_AbridgedStart(builder)

def SeradataOpticalPayload_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SeradataOpticalPayload_AbridgedAddId(builder, id)

def SeradataOpticalPayload_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SeradataOpticalPayload_AbridgedAddClassificationMarking(builder, classificationMarking)

def SeradataOpticalPayload_AbridgedAddSpacecraftId(builder, spacecraftId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(spacecraftId), 0)

def AddSpacecraftId(builder, spacecraftId):
    SeradataOpticalPayload_AbridgedAddSpacecraftId(builder, spacecraftId)

def SeradataOpticalPayload_AbridgedAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SeradataOpticalPayload_AbridgedAddIdSensor(builder, idSensor)

def SeradataOpticalPayload_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(hostedForCompanyOrgId), 0)

def AddHostedForCompanyOrgId(builder, hostedForCompanyOrgId):
    SeradataOpticalPayload_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)

def SeradataOpticalPayload_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SeradataOpticalPayload_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def SeradataOpticalPayload_AbridgedAddImagingPayloadCategory(builder, imagingPayloadCategory):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(imagingPayloadCategory), 0)

def AddImagingPayloadCategory(builder, imagingPayloadCategory):
    SeradataOpticalPayload_AbridgedAddImagingPayloadCategory(builder, imagingPayloadCategory)

def SeradataOpticalPayload_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SeradataOpticalPayload_AbridgedAddName(builder, name)

def SeradataOpticalPayload_AbridgedAddSpectralBand(builder, spectralBand):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(spectralBand), 0)

def AddSpectralBand(builder, spectralBand):
    SeradataOpticalPayload_AbridgedAddSpectralBand(builder, spectralBand)

def SeradataOpticalPayload_AbridgedAddSpectralFrequencyLimits(builder, spectralFrequencyLimits):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(spectralFrequencyLimits), 0)

def AddSpectralFrequencyLimits(builder, spectralFrequencyLimits):
    SeradataOpticalPayload_AbridgedAddSpectralFrequencyLimits(builder, spectralFrequencyLimits)

def SeradataOpticalPayload_AbridgedAddNumberOfFilmReturnCanisters(builder, numberOfFilmReturnCanisters):
    builder.PrependInt32Slot(10, numberOfFilmReturnCanisters, 0)

def AddNumberOfFilmReturnCanisters(builder, numberOfFilmReturnCanisters):
    SeradataOpticalPayload_AbridgedAddNumberOfFilmReturnCanisters(builder, numberOfFilmReturnCanisters)

def SeradataOpticalPayload_AbridgedAddBestResolution(builder, bestResolution):
    builder.PrependFloat64Slot(11, bestResolution, 0.0)

def AddBestResolution(builder, bestResolution):
    SeradataOpticalPayload_AbridgedAddBestResolution(builder, bestResolution)

def SeradataOpticalPayload_AbridgedAddSwathWidth(builder, swathWidth):
    builder.PrependFloat64Slot(12, swathWidth, 0.0)

def AddSwathWidth(builder, swathWidth):
    SeradataOpticalPayload_AbridgedAddSwathWidth(builder, swathWidth)

def SeradataOpticalPayload_AbridgedAddRecorderSize(builder, recorderSize):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(recorderSize), 0)

def AddRecorderSize(builder, recorderSize):
    SeradataOpticalPayload_AbridgedAddRecorderSize(builder, recorderSize)

def SeradataOpticalPayload_AbridgedAddFieldOfView(builder, fieldOfView):
    builder.PrependFloat64Slot(14, fieldOfView, 0.0)

def AddFieldOfView(builder, fieldOfView):
    SeradataOpticalPayload_AbridgedAddFieldOfView(builder, fieldOfView)

def SeradataOpticalPayload_AbridgedAddFieldOfRegard(builder, fieldOfRegard):
    builder.PrependFloat64Slot(15, fieldOfRegard, 0.0)

def AddFieldOfRegard(builder, fieldOfRegard):
    SeradataOpticalPayload_AbridgedAddFieldOfRegard(builder, fieldOfRegard)

def SeradataOpticalPayload_AbridgedAddPointingMethod(builder, pointingMethod):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(pointingMethod), 0)

def AddPointingMethod(builder, pointingMethod):
    SeradataOpticalPayload_AbridgedAddPointingMethod(builder, pointingMethod)

def SeradataOpticalPayload_AbridgedAddGroundStations(builder, groundStations):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(groundStations), 0)

def AddGroundStations(builder, groundStations):
    SeradataOpticalPayload_AbridgedAddGroundStations(builder, groundStations)

def SeradataOpticalPayload_AbridgedAddGroundStationLocations(builder, groundStationLocations):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(groundStationLocations), 0)

def AddGroundStationLocations(builder, groundStationLocations):
    SeradataOpticalPayload_AbridgedAddGroundStationLocations(builder, groundStationLocations)

def SeradataOpticalPayload_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    SeradataOpticalPayload_AbridgedAddNotes(builder, notes)

def SeradataOpticalPayload_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SeradataOpticalPayload_AbridgedAddCreatedAt(builder, createdAt)

def SeradataOpticalPayload_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SeradataOpticalPayload_AbridgedAddCreatedBy(builder, createdBy)

def SeradataOpticalPayload_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SeradataOpticalPayload_AbridgedAddSource(builder, source)

def SeradataOpticalPayload_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SeradataOpticalPayload_AbridgedAddOrigin(builder, origin)

def SeradataOpticalPayload_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SeradataOpticalPayload_AbridgedAddOrigNetwork(builder, origNetwork)

def SeradataOpticalPayload_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(25, dataMode, 0)

def AddDataMode(builder, dataMode):
    SeradataOpticalPayload_AbridgedAddDataMode(builder, dataMode)

def SeradataOpticalPayload_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SeradataOpticalPayload_AbridgedEnd(builder)


class SeradataOpticalPayload_AbridgedT(object):

    # SeradataOpticalPayload_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.spacecraftId = None  # type: str
        self.idSensor = None  # type: str
        self.hostedForCompanyOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.imagingPayloadCategory = None  # type: str
        self.name = None  # type: str
        self.spectralBand = None  # type: str
        self.spectralFrequencyLimits = None  # type: str
        self.numberOfFilmReturnCanisters = 0  # type: int
        self.bestResolution = 0.0  # type: float
        self.swathWidth = 0.0  # type: float
        self.recorderSize = None  # type: str
        self.fieldOfView = 0.0  # type: float
        self.fieldOfRegard = 0.0  # type: float
        self.pointingMethod = None  # type: str
        self.groundStations = None  # type: str
        self.groundStationLocations = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        seradataOpticalPayloadAbridged = SeradataOpticalPayload_Abridged()
        seradataOpticalPayloadAbridged.Init(buf, pos)
        return cls.InitFromObj(seradataOpticalPayloadAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, seradataOpticalPayloadAbridged):
        x = SeradataOpticalPayload_AbridgedT()
        x._UnPack(seradataOpticalPayloadAbridged)
        return x

    # SeradataOpticalPayload_AbridgedT
    def _UnPack(self, seradataOpticalPayloadAbridged):
        if seradataOpticalPayloadAbridged is None:
            return
        self.id = seradataOpticalPayloadAbridged.Id()
        self.classificationMarking = seradataOpticalPayloadAbridged.ClassificationMarking()
        self.spacecraftId = seradataOpticalPayloadAbridged.SpacecraftId()
        self.idSensor = seradataOpticalPayloadAbridged.IdSensor()
        self.hostedForCompanyOrgId = seradataOpticalPayloadAbridged.HostedForCompanyOrgId()
        self.manufacturerOrgId = seradataOpticalPayloadAbridged.ManufacturerOrgId()
        self.imagingPayloadCategory = seradataOpticalPayloadAbridged.ImagingPayloadCategory()
        self.name = seradataOpticalPayloadAbridged.Name()
        self.spectralBand = seradataOpticalPayloadAbridged.SpectralBand()
        self.spectralFrequencyLimits = seradataOpticalPayloadAbridged.SpectralFrequencyLimits()
        self.numberOfFilmReturnCanisters = seradataOpticalPayloadAbridged.NumberOfFilmReturnCanisters()
        self.bestResolution = seradataOpticalPayloadAbridged.BestResolution()
        self.swathWidth = seradataOpticalPayloadAbridged.SwathWidth()
        self.recorderSize = seradataOpticalPayloadAbridged.RecorderSize()
        self.fieldOfView = seradataOpticalPayloadAbridged.FieldOfView()
        self.fieldOfRegard = seradataOpticalPayloadAbridged.FieldOfRegard()
        self.pointingMethod = seradataOpticalPayloadAbridged.PointingMethod()
        self.groundStations = seradataOpticalPayloadAbridged.GroundStations()
        self.groundStationLocations = seradataOpticalPayloadAbridged.GroundStationLocations()
        self.notes = seradataOpticalPayloadAbridged.Notes()
        self.createdAt = seradataOpticalPayloadAbridged.CreatedAt()
        self.createdBy = seradataOpticalPayloadAbridged.CreatedBy()
        self.source = seradataOpticalPayloadAbridged.Source()
        self.origin = seradataOpticalPayloadAbridged.Origin()
        self.origNetwork = seradataOpticalPayloadAbridged.OrigNetwork()
        self.dataMode = seradataOpticalPayloadAbridged.DataMode()

    # SeradataOpticalPayload_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.spacecraftId is not None:
            spacecraftId = builder.CreateString(self.spacecraftId)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.hostedForCompanyOrgId is not None:
            hostedForCompanyOrgId = builder.CreateString(self.hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.imagingPayloadCategory is not None:
            imagingPayloadCategory = builder.CreateString(self.imagingPayloadCategory)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.spectralBand is not None:
            spectralBand = builder.CreateString(self.spectralBand)
        if self.spectralFrequencyLimits is not None:
            spectralFrequencyLimits = builder.CreateString(self.spectralFrequencyLimits)
        if self.recorderSize is not None:
            recorderSize = builder.CreateString(self.recorderSize)
        if self.pointingMethod is not None:
            pointingMethod = builder.CreateString(self.pointingMethod)
        if self.groundStations is not None:
            groundStations = builder.CreateString(self.groundStations)
        if self.groundStationLocations is not None:
            groundStationLocations = builder.CreateString(self.groundStationLocations)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        SeradataOpticalPayload_AbridgedStart(builder)
        if self.id is not None:
            SeradataOpticalPayload_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            SeradataOpticalPayload_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.spacecraftId is not None:
            SeradataOpticalPayload_AbridgedAddSpacecraftId(builder, spacecraftId)
        if self.idSensor is not None:
            SeradataOpticalPayload_AbridgedAddIdSensor(builder, idSensor)
        if self.hostedForCompanyOrgId is not None:
            SeradataOpticalPayload_AbridgedAddHostedForCompanyOrgId(builder, hostedForCompanyOrgId)
        if self.manufacturerOrgId is not None:
            SeradataOpticalPayload_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.imagingPayloadCategory is not None:
            SeradataOpticalPayload_AbridgedAddImagingPayloadCategory(builder, imagingPayloadCategory)
        if self.name is not None:
            SeradataOpticalPayload_AbridgedAddName(builder, name)
        if self.spectralBand is not None:
            SeradataOpticalPayload_AbridgedAddSpectralBand(builder, spectralBand)
        if self.spectralFrequencyLimits is not None:
            SeradataOpticalPayload_AbridgedAddSpectralFrequencyLimits(builder, spectralFrequencyLimits)
        SeradataOpticalPayload_AbridgedAddNumberOfFilmReturnCanisters(builder, self.numberOfFilmReturnCanisters)
        SeradataOpticalPayload_AbridgedAddBestResolution(builder, self.bestResolution)
        SeradataOpticalPayload_AbridgedAddSwathWidth(builder, self.swathWidth)
        if self.recorderSize is not None:
            SeradataOpticalPayload_AbridgedAddRecorderSize(builder, recorderSize)
        SeradataOpticalPayload_AbridgedAddFieldOfView(builder, self.fieldOfView)
        SeradataOpticalPayload_AbridgedAddFieldOfRegard(builder, self.fieldOfRegard)
        if self.pointingMethod is not None:
            SeradataOpticalPayload_AbridgedAddPointingMethod(builder, pointingMethod)
        if self.groundStations is not None:
            SeradataOpticalPayload_AbridgedAddGroundStations(builder, groundStations)
        if self.groundStationLocations is not None:
            SeradataOpticalPayload_AbridgedAddGroundStationLocations(builder, groundStationLocations)
        if self.notes is not None:
            SeradataOpticalPayload_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            SeradataOpticalPayload_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SeradataOpticalPayload_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SeradataOpticalPayload_AbridgedAddSource(builder, source)
        if self.origin is not None:
            SeradataOpticalPayload_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SeradataOpticalPayload_AbridgedAddOrigNetwork(builder, origNetwork)
        SeradataOpticalPayload_AbridgedAddDataMode(builder, self.dataMode)
        seradataOpticalPayloadAbridged = SeradataOpticalPayload_AbridgedEnd(builder)
        return seradataOpticalPayloadAbridged
