# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
class LogisticsSupport_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsSupport_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsSupport_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsSupport_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsSupport_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LogisticsSupport_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LogisticsSupport_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: GDSSBL012307131347070165
    # Constraints: Minimum length = 0, Maximum length = 24
    # LogisticsSupport_Abridged
    def ExtSystemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
    # Example: /// Example: 99290
    # Constraints: Minimum length = 0, Maximum length = 7
    # LogisticsSupport_Abridged
    def TailNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
    # Example: /// Example: CO17A
    # Constraints: Minimum length = 0, Maximum length = 8
    # LogisticsSupport_Abridged
    def AircraftMds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSupport_Abridged
    def CurrIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
    # Example: /// Example: KCOS
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSupport_Abridged
    def SuppIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time this report was created, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def RptCreatedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time this report was closed, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def RptClosedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def MeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def McTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
    # Example: /// Example: WA
    # Constraints: Minimum length = 0, Maximum length = 9
    # LogisticsSupport_Abridged
    def LogisticAction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The identifier that represents a Logistics Master Record.
    # Example: /// Example: L62017
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsSupport_Abridged
    def LogisticsRecordId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def Etic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Logistics estimated time mission capable.
    # Example: /// Example: 2023-07-13T13:47:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def Etmc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
    # Example: /// Example: NMCMU
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsSupport_Abridged
    def MaintStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # This is used to indicate whether a closed master record has been reopened.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def ReopenFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The organization that owns this logistics record.
    # Example: /// Example: EXAMPLE_OWNER
    # Constraints: Minimum length = 0, Maximum length = 250
    # LogisticsSupport_Abridged
    def Owner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Remarks associated with this LogisticsSupport record.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def LogisticsRemarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Abridged
    def LogisticsRemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Abridged
    def LogisticsRemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Discrepancy information associated with this LogisticsSupport record.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def LogisticsDiscrepancyInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Abridged
    def LogisticsDiscrepancyInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Abridged
    def LogisticsDiscrepancyInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def LogisticsTransportationPlans(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Abridged
    def LogisticsTransportationPlansLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Abridged
    def LogisticsTransportationPlansIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Support items associated with this LogisticsSupport record.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def LogisticsSupportItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # LogisticsSupport_Abridged
    def LogisticsSupportItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LogisticsSupport_Abridged
    def LogisticsSupportItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # LogisticsSupport_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LogisticsSupport_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LogisticsSupport_Abridged
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LogisticsSupport_Abridged
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # LogisticsSupport_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LogisticsSupport_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LogisticsSupport_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def LogisticsSupport_AbridgedStart(builder):
    builder.StartObject(30)

def Start(builder):
    LogisticsSupport_AbridgedStart(builder)

def LogisticsSupport_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LogisticsSupport_AbridgedAddId(builder, id)

def LogisticsSupport_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LogisticsSupport_AbridgedAddClassificationMarking(builder, classificationMarking)

def LogisticsSupport_AbridgedAddExtSystemId(builder, extSystemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(extSystemId), 0)

def AddExtSystemId(builder, extSystemId):
    LogisticsSupport_AbridgedAddExtSystemId(builder, extSystemId)

def LogisticsSupport_AbridgedAddTailNumber(builder, tailNumber):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tailNumber), 0)

def AddTailNumber(builder, tailNumber):
    LogisticsSupport_AbridgedAddTailNumber(builder, tailNumber)

def LogisticsSupport_AbridgedAddAircraftMds(builder, aircraftMds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftMds), 0)

def AddAircraftMds(builder, aircraftMds):
    LogisticsSupport_AbridgedAddAircraftMds(builder, aircraftMds)

def LogisticsSupport_AbridgedAddCurrIcao(builder, currIcao):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(currIcao), 0)

def AddCurrIcao(builder, currIcao):
    LogisticsSupport_AbridgedAddCurrIcao(builder, currIcao)

def LogisticsSupport_AbridgedAddSuppIcao(builder, suppIcao):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(suppIcao), 0)

def AddSuppIcao(builder, suppIcao):
    LogisticsSupport_AbridgedAddSuppIcao(builder, suppIcao)

def LogisticsSupport_AbridgedAddRptCreatedTime(builder, rptCreatedTime):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rptCreatedTime), 0)

def AddRptCreatedTime(builder, rptCreatedTime):
    LogisticsSupport_AbridgedAddRptCreatedTime(builder, rptCreatedTime)

def LogisticsSupport_AbridgedAddRptClosedTime(builder, rptClosedTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rptClosedTime), 0)

def AddRptClosedTime(builder, rptClosedTime):
    LogisticsSupport_AbridgedAddRptClosedTime(builder, rptClosedTime)

def LogisticsSupport_AbridgedAddMeTime(builder, meTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(meTime), 0)

def AddMeTime(builder, meTime):
    LogisticsSupport_AbridgedAddMeTime(builder, meTime)

def LogisticsSupport_AbridgedAddMcTime(builder, mcTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(mcTime), 0)

def AddMcTime(builder, mcTime):
    LogisticsSupport_AbridgedAddMcTime(builder, mcTime)

def LogisticsSupport_AbridgedAddLogisticAction(builder, logisticAction):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(logisticAction), 0)

def AddLogisticAction(builder, logisticAction):
    LogisticsSupport_AbridgedAddLogisticAction(builder, logisticAction)

def LogisticsSupport_AbridgedAddLogisticsRecordId(builder, logisticsRecordId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsRecordId), 0)

def AddLogisticsRecordId(builder, logisticsRecordId):
    LogisticsSupport_AbridgedAddLogisticsRecordId(builder, logisticsRecordId)

def LogisticsSupport_AbridgedAddEtic(builder, etic):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(etic), 0)

def AddEtic(builder, etic):
    LogisticsSupport_AbridgedAddEtic(builder, etic)

def LogisticsSupport_AbridgedAddEtmc(builder, etmc):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(etmc), 0)

def AddEtmc(builder, etmc):
    LogisticsSupport_AbridgedAddEtmc(builder, etmc)

def LogisticsSupport_AbridgedAddMaintStatusCode(builder, maintStatusCode):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(maintStatusCode), 0)

def AddMaintStatusCode(builder, maintStatusCode):
    LogisticsSupport_AbridgedAddMaintStatusCode(builder, maintStatusCode)

def LogisticsSupport_AbridgedAddReopenFlag(builder, reopenFlag):
    builder.PrependBoolSlot(16, reopenFlag, 0)

def AddReopenFlag(builder, reopenFlag):
    LogisticsSupport_AbridgedAddReopenFlag(builder, reopenFlag)

def LogisticsSupport_AbridgedAddOwner(builder, owner):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(owner), 0)

def AddOwner(builder, owner):
    LogisticsSupport_AbridgedAddOwner(builder, owner)

def LogisticsSupport_AbridgedAddLogisticsRemarks(builder, logisticsRemarks):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsRemarks), 0)

def AddLogisticsRemarks(builder, logisticsRemarks):
    LogisticsSupport_AbridgedAddLogisticsRemarks(builder, logisticsRemarks)

def LogisticsSupport_AbridgedStartLogisticsRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsRemarksVector(builder, numElems):
    return LogisticsSupport_AbridgedStartLogisticsRemarksVector(builder, numElems)

def LogisticsSupport_AbridgedAddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsDiscrepancyInfos), 0)

def AddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos):
    LogisticsSupport_AbridgedAddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos)

def LogisticsSupport_AbridgedStartLogisticsDiscrepancyInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsDiscrepancyInfosVector(builder, numElems):
    return LogisticsSupport_AbridgedStartLogisticsDiscrepancyInfosVector(builder, numElems)

def LogisticsSupport_AbridgedAddLogisticsTransportationPlans(builder, logisticsTransportationPlans):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsTransportationPlans), 0)

def AddLogisticsTransportationPlans(builder, logisticsTransportationPlans):
    LogisticsSupport_AbridgedAddLogisticsTransportationPlans(builder, logisticsTransportationPlans)

def LogisticsSupport_AbridgedStartLogisticsTransportationPlansVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsTransportationPlansVector(builder, numElems):
    return LogisticsSupport_AbridgedStartLogisticsTransportationPlansVector(builder, numElems)

def LogisticsSupport_AbridgedAddLogisticsSupportItems(builder, logisticsSupportItems):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsSupportItems), 0)

def AddLogisticsSupportItems(builder, logisticsSupportItems):
    LogisticsSupport_AbridgedAddLogisticsSupportItems(builder, logisticsSupportItems)

def LogisticsSupport_AbridgedStartLogisticsSupportItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLogisticsSupportItemsVector(builder, numElems):
    return LogisticsSupport_AbridgedStartLogisticsSupportItemsVector(builder, numElems)

def LogisticsSupport_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LogisticsSupport_AbridgedAddOrigNetwork(builder, origNetwork)

def LogisticsSupport_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LogisticsSupport_AbridgedAddCreatedAt(builder, createdAt)

def LogisticsSupport_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LogisticsSupport_AbridgedAddCreatedBy(builder, createdBy)

def LogisticsSupport_AbridgedAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    LogisticsSupport_AbridgedAddUpdatedAt(builder, updatedAt)

def LogisticsSupport_AbridgedAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    LogisticsSupport_AbridgedAddUpdatedBy(builder, updatedBy)

def LogisticsSupport_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LogisticsSupport_AbridgedAddSource(builder, source)

def LogisticsSupport_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LogisticsSupport_AbridgedAddOrigin(builder, origin)

def LogisticsSupport_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(29, dataMode, 0)

def AddDataMode(builder, dataMode):
    LogisticsSupport_AbridgedAddDataMode(builder, dataMode)

def LogisticsSupport_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsSupport_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class LogisticsSupport_AbridgedT(object):

    # LogisticsSupport_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.extSystemId = None  # type: str
        self.tailNumber = None  # type: str
        self.aircraftMds = None  # type: str
        self.currIcao = None  # type: str
        self.suppIcao = None  # type: str
        self.rptCreatedTime = None  # type: str
        self.rptClosedTime = None  # type: str
        self.meTime = None  # type: str
        self.mcTime = None  # type: str
        self.logisticAction = None  # type: str
        self.logisticsRecordId = None  # type: str
        self.etic = None  # type: str
        self.etmc = None  # type: str
        self.maintStatusCode = None  # type: str
        self.reopenFlag = False  # type: bool
        self.owner = None  # type: str
        self.logisticsRemarks = None  # type: List[str]
        self.logisticsDiscrepancyInfos = None  # type: List[str]
        self.logisticsTransportationPlans = None  # type: List[str]
        self.logisticsSupportItems = None  # type: List[str]
        self.origNetwork = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsSupportAbridged = LogisticsSupport_Abridged()
        logisticsSupportAbridged.Init(buf, pos)
        return cls.InitFromObj(logisticsSupportAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsSupportAbridged):
        x = LogisticsSupport_AbridgedT()
        x._UnPack(logisticsSupportAbridged)
        return x

    # LogisticsSupport_AbridgedT
    def _UnPack(self, logisticsSupportAbridged):
        if logisticsSupportAbridged is None:
            return
        self.id = logisticsSupportAbridged.Id()
        self.classificationMarking = logisticsSupportAbridged.ClassificationMarking()
        self.extSystemId = logisticsSupportAbridged.ExtSystemId()
        self.tailNumber = logisticsSupportAbridged.TailNumber()
        self.aircraftMds = logisticsSupportAbridged.AircraftMds()
        self.currIcao = logisticsSupportAbridged.CurrIcao()
        self.suppIcao = logisticsSupportAbridged.SuppIcao()
        self.rptCreatedTime = logisticsSupportAbridged.RptCreatedTime()
        self.rptClosedTime = logisticsSupportAbridged.RptClosedTime()
        self.meTime = logisticsSupportAbridged.MeTime()
        self.mcTime = logisticsSupportAbridged.McTime()
        self.logisticAction = logisticsSupportAbridged.LogisticAction()
        self.logisticsRecordId = logisticsSupportAbridged.LogisticsRecordId()
        self.etic = logisticsSupportAbridged.Etic()
        self.etmc = logisticsSupportAbridged.Etmc()
        self.maintStatusCode = logisticsSupportAbridged.MaintStatusCode()
        self.reopenFlag = logisticsSupportAbridged.ReopenFlag()
        self.owner = logisticsSupportAbridged.Owner()
        if not logisticsSupportAbridged.LogisticsRemarksIsNone():
            self.logisticsRemarks = []
            for i in range(logisticsSupportAbridged.LogisticsRemarksLength()):
                self.logisticsRemarks.append(logisticsSupportAbridged.LogisticsRemarks(i))
        if not logisticsSupportAbridged.LogisticsDiscrepancyInfosIsNone():
            self.logisticsDiscrepancyInfos = []
            for i in range(logisticsSupportAbridged.LogisticsDiscrepancyInfosLength()):
                self.logisticsDiscrepancyInfos.append(logisticsSupportAbridged.LogisticsDiscrepancyInfos(i))
        if not logisticsSupportAbridged.LogisticsTransportationPlansIsNone():
            self.logisticsTransportationPlans = []
            for i in range(logisticsSupportAbridged.LogisticsTransportationPlansLength()):
                self.logisticsTransportationPlans.append(logisticsSupportAbridged.LogisticsTransportationPlans(i))
        if not logisticsSupportAbridged.LogisticsSupportItemsIsNone():
            self.logisticsSupportItems = []
            for i in range(logisticsSupportAbridged.LogisticsSupportItemsLength()):
                self.logisticsSupportItems.append(logisticsSupportAbridged.LogisticsSupportItems(i))
        self.origNetwork = logisticsSupportAbridged.OrigNetwork()
        self.createdAt = logisticsSupportAbridged.CreatedAt()
        self.createdBy = logisticsSupportAbridged.CreatedBy()
        self.updatedAt = logisticsSupportAbridged.UpdatedAt()
        self.updatedBy = logisticsSupportAbridged.UpdatedBy()
        self.source = logisticsSupportAbridged.Source()
        self.origin = logisticsSupportAbridged.Origin()
        self.dataMode = logisticsSupportAbridged.DataMode()

    # LogisticsSupport_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.extSystemId is not None:
            extSystemId = builder.CreateString(self.extSystemId)
        if self.tailNumber is not None:
            tailNumber = builder.CreateString(self.tailNumber)
        if self.aircraftMds is not None:
            aircraftMds = builder.CreateString(self.aircraftMds)
        if self.currIcao is not None:
            currIcao = builder.CreateString(self.currIcao)
        if self.suppIcao is not None:
            suppIcao = builder.CreateString(self.suppIcao)
        if self.rptCreatedTime is not None:
            rptCreatedTime = builder.CreateString(self.rptCreatedTime)
        if self.rptClosedTime is not None:
            rptClosedTime = builder.CreateString(self.rptClosedTime)
        if self.meTime is not None:
            meTime = builder.CreateString(self.meTime)
        if self.mcTime is not None:
            mcTime = builder.CreateString(self.mcTime)
        if self.logisticAction is not None:
            logisticAction = builder.CreateString(self.logisticAction)
        if self.logisticsRecordId is not None:
            logisticsRecordId = builder.CreateString(self.logisticsRecordId)
        if self.etic is not None:
            etic = builder.CreateString(self.etic)
        if self.etmc is not None:
            etmc = builder.CreateString(self.etmc)
        if self.maintStatusCode is not None:
            maintStatusCode = builder.CreateString(self.maintStatusCode)
        if self.owner is not None:
            owner = builder.CreateString(self.owner)
        if self.logisticsRemarks is not None:
            logisticsRemarkslist = []
            for i in range(len(self.logisticsRemarks)):
                logisticsRemarkslist.append(builder.CreateString(self.logisticsRemarks[i]))
            LogisticsSupport_AbridgedStartLogisticsRemarksVector(builder, len(self.logisticsRemarks))
            for i in reversed(range(len(self.logisticsRemarks))):
                builder.PrependUOffsetTRelative(logisticsRemarkslist[i])
            logisticsRemarks = builder.EndVector()
        if self.logisticsDiscrepancyInfos is not None:
            logisticsDiscrepancyInfoslist = []
            for i in range(len(self.logisticsDiscrepancyInfos)):
                logisticsDiscrepancyInfoslist.append(builder.CreateString(self.logisticsDiscrepancyInfos[i]))
            LogisticsSupport_AbridgedStartLogisticsDiscrepancyInfosVector(builder, len(self.logisticsDiscrepancyInfos))
            for i in reversed(range(len(self.logisticsDiscrepancyInfos))):
                builder.PrependUOffsetTRelative(logisticsDiscrepancyInfoslist[i])
            logisticsDiscrepancyInfos = builder.EndVector()
        if self.logisticsTransportationPlans is not None:
            logisticsTransportationPlanslist = []
            for i in range(len(self.logisticsTransportationPlans)):
                logisticsTransportationPlanslist.append(builder.CreateString(self.logisticsTransportationPlans[i]))
            LogisticsSupport_AbridgedStartLogisticsTransportationPlansVector(builder, len(self.logisticsTransportationPlans))
            for i in reversed(range(len(self.logisticsTransportationPlans))):
                builder.PrependUOffsetTRelative(logisticsTransportationPlanslist[i])
            logisticsTransportationPlans = builder.EndVector()
        if self.logisticsSupportItems is not None:
            logisticsSupportItemslist = []
            for i in range(len(self.logisticsSupportItems)):
                logisticsSupportItemslist.append(builder.CreateString(self.logisticsSupportItems[i]))
            LogisticsSupport_AbridgedStartLogisticsSupportItemsVector(builder, len(self.logisticsSupportItems))
            for i in reversed(range(len(self.logisticsSupportItems))):
                builder.PrependUOffsetTRelative(logisticsSupportItemslist[i])
            logisticsSupportItems = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        LogisticsSupport_AbridgedStart(builder)
        if self.id is not None:
            LogisticsSupport_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            LogisticsSupport_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.extSystemId is not None:
            LogisticsSupport_AbridgedAddExtSystemId(builder, extSystemId)
        if self.tailNumber is not None:
            LogisticsSupport_AbridgedAddTailNumber(builder, tailNumber)
        if self.aircraftMds is not None:
            LogisticsSupport_AbridgedAddAircraftMds(builder, aircraftMds)
        if self.currIcao is not None:
            LogisticsSupport_AbridgedAddCurrIcao(builder, currIcao)
        if self.suppIcao is not None:
            LogisticsSupport_AbridgedAddSuppIcao(builder, suppIcao)
        if self.rptCreatedTime is not None:
            LogisticsSupport_AbridgedAddRptCreatedTime(builder, rptCreatedTime)
        if self.rptClosedTime is not None:
            LogisticsSupport_AbridgedAddRptClosedTime(builder, rptClosedTime)
        if self.meTime is not None:
            LogisticsSupport_AbridgedAddMeTime(builder, meTime)
        if self.mcTime is not None:
            LogisticsSupport_AbridgedAddMcTime(builder, mcTime)
        if self.logisticAction is not None:
            LogisticsSupport_AbridgedAddLogisticAction(builder, logisticAction)
        if self.logisticsRecordId is not None:
            LogisticsSupport_AbridgedAddLogisticsRecordId(builder, logisticsRecordId)
        if self.etic is not None:
            LogisticsSupport_AbridgedAddEtic(builder, etic)
        if self.etmc is not None:
            LogisticsSupport_AbridgedAddEtmc(builder, etmc)
        if self.maintStatusCode is not None:
            LogisticsSupport_AbridgedAddMaintStatusCode(builder, maintStatusCode)
        LogisticsSupport_AbridgedAddReopenFlag(builder, self.reopenFlag)
        if self.owner is not None:
            LogisticsSupport_AbridgedAddOwner(builder, owner)
        if self.logisticsRemarks is not None:
            LogisticsSupport_AbridgedAddLogisticsRemarks(builder, logisticsRemarks)
        if self.logisticsDiscrepancyInfos is not None:
            LogisticsSupport_AbridgedAddLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfos)
        if self.logisticsTransportationPlans is not None:
            LogisticsSupport_AbridgedAddLogisticsTransportationPlans(builder, logisticsTransportationPlans)
        if self.logisticsSupportItems is not None:
            LogisticsSupport_AbridgedAddLogisticsSupportItems(builder, logisticsSupportItems)
        if self.origNetwork is not None:
            LogisticsSupport_AbridgedAddOrigNetwork(builder, origNetwork)
        if self.createdAt is not None:
            LogisticsSupport_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LogisticsSupport_AbridgedAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            LogisticsSupport_AbridgedAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            LogisticsSupport_AbridgedAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            LogisticsSupport_AbridgedAddSource(builder, source)
        if self.origin is not None:
            LogisticsSupport_AbridgedAddOrigin(builder, origin)
        LogisticsSupport_AbridgedAddDataMode(builder, self.dataMode)
        logisticsSupportAbridged = LogisticsSupport_AbridgedEnd(builder)
        return logisticsSupportAbridged
