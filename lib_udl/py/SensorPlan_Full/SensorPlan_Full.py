# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
class SensorPlan_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SensorPlan_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensorPlan_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SensorPlan_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # SensorPlan_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SENSORPLAN-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorPlan_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SensorPlan_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
    # Example: /// Example: PLAN
    # Constraints: Minimum length = 1, Maximum length = 12
    # SensorPlan_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of records that comprise this parent set (COLLECT, CONTACT).
    # Example: /// Example: COLLECT
    # Constraints: Minimum length = 1, Maximum length = 12
    # SensorPlan_Full
    def RecType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start time of the plan or schedule, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the plan or schedule, in ISO 8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name associated with this plan or schedule.
    # Example: /// Example: EXAMPLE NAME
    # Constraints: Minimum length = 0, Maximum length = 24
    # SensorPlan_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the requested/schedule/planned sensor associated with this request.
    # Example: /// Example: REF-SENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SensorPlan_Full
    def IdSensor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Full
    def OrigSensorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The purpose/description of this plan or schedule.
    # Example: /// Example: Example purpose
    # Constraints: Minimum length = 0, Maximum length = 256
    # SensorPlan_Full
    def Purpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sensor or ground network associated with this plan or schedule.
    # Example: /// Example: NETWORK
    # Constraints: Minimum length = 0, Maximum length = 24
    # SensorPlan_Full
    def SenNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def ReqTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The customer for this plan or schedule.
    # Example: /// Example: CUSTOMER
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Full
    def Customer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
    # Example: /// Example: ACCEPTED
    # Constraints: Minimum length = 0, Maximum length = 24
    # SensorPlan_Full
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SensorPlan_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # SensorPlan_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SensorPlan_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SensorPlan_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # SensorPlan_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def CollectRequests(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SensorPlan_Full
    def CollectRequestsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SensorPlan_Full
    def CollectRequestsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # SensorPlan_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SensorPlan_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SensorPlan_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

def SensorPlan_FullStart(builder):
    builder.StartObject(24)

def Start(builder):
    SensorPlan_FullStart(builder)

def SensorPlan_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SensorPlan_FullAddId(builder, id)

def SensorPlan_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SensorPlan_FullAddClassificationMarking(builder, classificationMarking)

def SensorPlan_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    SensorPlan_FullAddType(builder, type)

def SensorPlan_FullAddRecType(builder, recType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(recType), 0)

def AddRecType(builder, recType):
    SensorPlan_FullAddRecType(builder, recType)

def SensorPlan_FullAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    SensorPlan_FullAddStartTime(builder, startTime)

def SensorPlan_FullAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    SensorPlan_FullAddEndTime(builder, endTime)

def SensorPlan_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    SensorPlan_FullAddName(builder, name)

def SensorPlan_FullAddIdSensor(builder, idSensor):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor), 0)

def AddIdSensor(builder, idSensor):
    SensorPlan_FullAddIdSensor(builder, idSensor)

def SensorPlan_FullAddOrigSensorId(builder, origSensorId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId), 0)

def AddOrigSensorId(builder, origSensorId):
    SensorPlan_FullAddOrigSensorId(builder, origSensorId)

def SensorPlan_FullAddPurpose(builder, purpose):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(purpose), 0)

def AddPurpose(builder, purpose):
    SensorPlan_FullAddPurpose(builder, purpose)

def SensorPlan_FullAddSenNetwork(builder, senNetwork):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(senNetwork), 0)

def AddSenNetwork(builder, senNetwork):
    SensorPlan_FullAddSenNetwork(builder, senNetwork)

def SensorPlan_FullAddReqTotal(builder, reqTotal):
    builder.PrependInt32Slot(11, reqTotal, 0)

def AddReqTotal(builder, reqTotal):
    SensorPlan_FullAddReqTotal(builder, reqTotal)

def SensorPlan_FullAddCustomer(builder, customer):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(customer), 0)

def AddCustomer(builder, customer):
    SensorPlan_FullAddCustomer(builder, customer)

def SensorPlan_FullAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def AddStatus(builder, status):
    SensorPlan_FullAddStatus(builder, status)

def SensorPlan_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SensorPlan_FullAddCreatedAt(builder, createdAt)

def SensorPlan_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SensorPlan_FullAddCreatedBy(builder, createdBy)

def SensorPlan_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    SensorPlan_FullAddUpdatedAt(builder, updatedAt)

def SensorPlan_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    SensorPlan_FullAddUpdatedBy(builder, updatedBy)

def SensorPlan_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SensorPlan_FullAddSource(builder, source)

def SensorPlan_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SensorPlan_FullAddOrigin(builder, origin)

def SensorPlan_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(20, dataMode, 0)

def AddDataMode(builder, dataMode):
    SensorPlan_FullAddDataMode(builder, dataMode)

def SensorPlan_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SensorPlan_FullAddOrigNetwork(builder, origNetwork)

def SensorPlan_FullAddCollectRequests(builder, collectRequests):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(collectRequests), 0)

def AddCollectRequests(builder, collectRequests):
    SensorPlan_FullAddCollectRequests(builder, collectRequests)

def SensorPlan_FullStartCollectRequestsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCollectRequestsVector(builder, numElems):
    return SensorPlan_FullStartCollectRequestsVector(builder, numElems)

def SensorPlan_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    SensorPlan_FullAddTags(builder, tags)

def SensorPlan_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return SensorPlan_FullStartTagsVector(builder, numElems)

def SensorPlan_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return SensorPlan_FullEnd(builder)

try:
    from typing import List
except:
    pass

class SensorPlan_FullT(object):

    # SensorPlan_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.recType = None  # type: str
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.name = None  # type: str
        self.idSensor = None  # type: str
        self.origSensorId = None  # type: str
        self.purpose = None  # type: str
        self.senNetwork = None  # type: str
        self.reqTotal = 0  # type: int
        self.customer = None  # type: str
        self.status = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str
        self.collectRequests = None  # type: List[str]
        self.tags = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensorPlanFull = SensorPlan_Full()
        sensorPlanFull.Init(buf, pos)
        return cls.InitFromObj(sensorPlanFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensorPlanFull):
        x = SensorPlan_FullT()
        x._UnPack(sensorPlanFull)
        return x

    # SensorPlan_FullT
    def _UnPack(self, sensorPlanFull):
        if sensorPlanFull is None:
            return
        self.id = sensorPlanFull.Id()
        self.classificationMarking = sensorPlanFull.ClassificationMarking()
        self.type = sensorPlanFull.Type()
        self.recType = sensorPlanFull.RecType()
        self.startTime = sensorPlanFull.StartTime()
        self.endTime = sensorPlanFull.EndTime()
        self.name = sensorPlanFull.Name()
        self.idSensor = sensorPlanFull.IdSensor()
        self.origSensorId = sensorPlanFull.OrigSensorId()
        self.purpose = sensorPlanFull.Purpose()
        self.senNetwork = sensorPlanFull.SenNetwork()
        self.reqTotal = sensorPlanFull.ReqTotal()
        self.customer = sensorPlanFull.Customer()
        self.status = sensorPlanFull.Status()
        self.createdAt = sensorPlanFull.CreatedAt()
        self.createdBy = sensorPlanFull.CreatedBy()
        self.updatedAt = sensorPlanFull.UpdatedAt()
        self.updatedBy = sensorPlanFull.UpdatedBy()
        self.source = sensorPlanFull.Source()
        self.origin = sensorPlanFull.Origin()
        self.dataMode = sensorPlanFull.DataMode()
        self.origNetwork = sensorPlanFull.OrigNetwork()
        if not sensorPlanFull.CollectRequestsIsNone():
            self.collectRequests = []
            for i in range(sensorPlanFull.CollectRequestsLength()):
                self.collectRequests.append(sensorPlanFull.CollectRequests(i))
        if not sensorPlanFull.TagsIsNone():
            self.tags = []
            for i in range(sensorPlanFull.TagsLength()):
                self.tags.append(sensorPlanFull.Tags(i))

    # SensorPlan_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.recType is not None:
            recType = builder.CreateString(self.recType)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.idSensor is not None:
            idSensor = builder.CreateString(self.idSensor)
        if self.origSensorId is not None:
            origSensorId = builder.CreateString(self.origSensorId)
        if self.purpose is not None:
            purpose = builder.CreateString(self.purpose)
        if self.senNetwork is not None:
            senNetwork = builder.CreateString(self.senNetwork)
        if self.customer is not None:
            customer = builder.CreateString(self.customer)
        if self.status is not None:
            status = builder.CreateString(self.status)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.collectRequests is not None:
            collectRequestslist = []
            for i in range(len(self.collectRequests)):
                collectRequestslist.append(builder.CreateString(self.collectRequests[i]))
            SensorPlan_FullStartCollectRequestsVector(builder, len(self.collectRequests))
            for i in reversed(range(len(self.collectRequests))):
                builder.PrependUOffsetTRelative(collectRequestslist[i])
            collectRequests = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            SensorPlan_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        SensorPlan_FullStart(builder)
        if self.id is not None:
            SensorPlan_FullAddId(builder, id)
        if self.classificationMarking is not None:
            SensorPlan_FullAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            SensorPlan_FullAddType(builder, type)
        if self.recType is not None:
            SensorPlan_FullAddRecType(builder, recType)
        if self.startTime is not None:
            SensorPlan_FullAddStartTime(builder, startTime)
        if self.endTime is not None:
            SensorPlan_FullAddEndTime(builder, endTime)
        if self.name is not None:
            SensorPlan_FullAddName(builder, name)
        if self.idSensor is not None:
            SensorPlan_FullAddIdSensor(builder, idSensor)
        if self.origSensorId is not None:
            SensorPlan_FullAddOrigSensorId(builder, origSensorId)
        if self.purpose is not None:
            SensorPlan_FullAddPurpose(builder, purpose)
        if self.senNetwork is not None:
            SensorPlan_FullAddSenNetwork(builder, senNetwork)
        SensorPlan_FullAddReqTotal(builder, self.reqTotal)
        if self.customer is not None:
            SensorPlan_FullAddCustomer(builder, customer)
        if self.status is not None:
            SensorPlan_FullAddStatus(builder, status)
        if self.createdAt is not None:
            SensorPlan_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SensorPlan_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            SensorPlan_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            SensorPlan_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            SensorPlan_FullAddSource(builder, source)
        if self.origin is not None:
            SensorPlan_FullAddOrigin(builder, origin)
        SensorPlan_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            SensorPlan_FullAddOrigNetwork(builder, origNetwork)
        if self.collectRequests is not None:
            SensorPlan_FullAddCollectRequests(builder, collectRequests)
        if self.tags is not None:
            SensorPlan_FullAddTags(builder, tags)
        sensorPlanFull = SensorPlan_FullEnd(builder)
        return sensorPlanFull
