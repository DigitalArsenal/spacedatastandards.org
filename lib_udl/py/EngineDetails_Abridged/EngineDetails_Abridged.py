# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
class EngineDetails_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EngineDetails_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEngineDetails_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EngineDetails_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4E\x47\x49", size_prefixed=size_prefixed)

    # EngineDetails_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ENGINEDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EngineDetails_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the parent engine record.
    # Example: /// Example: ENGINE-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EngineDetails_Abridged
    def IdEngine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EngineDetails_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Engine type or family.
    # Example: /// Example: ENGINE_TYPE1
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails_Abridged
    def Family(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
    # Example: /// Example: Pressure Fed
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails_Abridged
    def CycleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
    # Example: /// Example: Electric
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails_Abridged
    def CharacteristicType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization ID of the engine manufacturer.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # EngineDetails_Abridged
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Launch engine specific impulse in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def SpecificImpulse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch engine maximum burn time in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def BurnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine maximum thrust at sea level in Kilo-Newtons.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def SeaLevelThrust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine maximum thrust in a vacuum in Kilo-Newtons.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def VacuumThrust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine chamber pressure in bars.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def ChamberPressure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine nozzle expansion ratio.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def NozzleExpansionRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Engine maximum number of firings.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def MaxFirings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
    # Example: /// Example: Liquid
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails_Abridged
    def Propellant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
    # Example: /// Example: Liquid Oxygen
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails_Abridged
    def Oxidizer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes/Description of the engine.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EngineDetails_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EngineDetails_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # EngineDetails_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # EngineDetails_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EngineDetails_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # EngineDetails_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EngineDetails_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EngineDetails_AbridgedStart(builder):
    builder.StartObject(23)

def Start(builder):
    EngineDetails_AbridgedStart(builder)

def EngineDetails_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EngineDetails_AbridgedAddId(builder, id)

def EngineDetails_AbridgedAddIdEngine(builder, idEngine):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idEngine), 0)

def AddIdEngine(builder, idEngine):
    EngineDetails_AbridgedAddIdEngine(builder, idEngine)

def EngineDetails_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EngineDetails_AbridgedAddClassificationMarking(builder, classificationMarking)

def EngineDetails_AbridgedAddFamily(builder, family):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(family), 0)

def AddFamily(builder, family):
    EngineDetails_AbridgedAddFamily(builder, family)

def EngineDetails_AbridgedAddCycleType(builder, cycleType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(cycleType), 0)

def AddCycleType(builder, cycleType):
    EngineDetails_AbridgedAddCycleType(builder, cycleType)

def EngineDetails_AbridgedAddCharacteristicType(builder, characteristicType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(characteristicType), 0)

def AddCharacteristicType(builder, characteristicType):
    EngineDetails_AbridgedAddCharacteristicType(builder, characteristicType)

def EngineDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    EngineDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)

def EngineDetails_AbridgedAddSpecificImpulse(builder, specificImpulse):
    builder.PrependFloat64Slot(7, specificImpulse, 0.0)

def AddSpecificImpulse(builder, specificImpulse):
    EngineDetails_AbridgedAddSpecificImpulse(builder, specificImpulse)

def EngineDetails_AbridgedAddBurnTime(builder, burnTime):
    builder.PrependFloat64Slot(8, burnTime, 0.0)

def AddBurnTime(builder, burnTime):
    EngineDetails_AbridgedAddBurnTime(builder, burnTime)

def EngineDetails_AbridgedAddSeaLevelThrust(builder, seaLevelThrust):
    builder.PrependFloat64Slot(9, seaLevelThrust, 0.0)

def AddSeaLevelThrust(builder, seaLevelThrust):
    EngineDetails_AbridgedAddSeaLevelThrust(builder, seaLevelThrust)

def EngineDetails_AbridgedAddVacuumThrust(builder, vacuumThrust):
    builder.PrependFloat64Slot(10, vacuumThrust, 0.0)

def AddVacuumThrust(builder, vacuumThrust):
    EngineDetails_AbridgedAddVacuumThrust(builder, vacuumThrust)

def EngineDetails_AbridgedAddChamberPressure(builder, chamberPressure):
    builder.PrependFloat64Slot(11, chamberPressure, 0.0)

def AddChamberPressure(builder, chamberPressure):
    EngineDetails_AbridgedAddChamberPressure(builder, chamberPressure)

def EngineDetails_AbridgedAddNozzleExpansionRatio(builder, nozzleExpansionRatio):
    builder.PrependFloat64Slot(12, nozzleExpansionRatio, 0.0)

def AddNozzleExpansionRatio(builder, nozzleExpansionRatio):
    EngineDetails_AbridgedAddNozzleExpansionRatio(builder, nozzleExpansionRatio)

def EngineDetails_AbridgedAddMaxFirings(builder, maxFirings):
    builder.PrependInt32Slot(13, maxFirings, 0)

def AddMaxFirings(builder, maxFirings):
    EngineDetails_AbridgedAddMaxFirings(builder, maxFirings)

def EngineDetails_AbridgedAddPropellant(builder, propellant):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(propellant), 0)

def AddPropellant(builder, propellant):
    EngineDetails_AbridgedAddPropellant(builder, propellant)

def EngineDetails_AbridgedAddOxidizer(builder, oxidizer):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(oxidizer), 0)

def AddOxidizer(builder, oxidizer):
    EngineDetails_AbridgedAddOxidizer(builder, oxidizer)

def EngineDetails_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    EngineDetails_AbridgedAddNotes(builder, notes)

def EngineDetails_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EngineDetails_AbridgedAddCreatedAt(builder, createdAt)

def EngineDetails_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EngineDetails_AbridgedAddCreatedBy(builder, createdBy)

def EngineDetails_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EngineDetails_AbridgedAddSource(builder, source)

def EngineDetails_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EngineDetails_AbridgedAddOrigin(builder, origin)

def EngineDetails_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    EngineDetails_AbridgedAddOrigNetwork(builder, origNetwork)

def EngineDetails_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(22, dataMode, 0)

def AddDataMode(builder, dataMode):
    EngineDetails_AbridgedAddDataMode(builder, dataMode)

def EngineDetails_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return EngineDetails_AbridgedEnd(builder)


class EngineDetails_AbridgedT(object):

    # EngineDetails_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.idEngine = None  # type: str
        self.classificationMarking = None  # type: str
        self.family = None  # type: str
        self.cycleType = None  # type: str
        self.characteristicType = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.specificImpulse = 0.0  # type: float
        self.burnTime = 0.0  # type: float
        self.seaLevelThrust = 0.0  # type: float
        self.vacuumThrust = 0.0  # type: float
        self.chamberPressure = 0.0  # type: float
        self.nozzleExpansionRatio = 0.0  # type: float
        self.maxFirings = 0  # type: int
        self.propellant = None  # type: str
        self.oxidizer = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        engineDetailsAbridged = EngineDetails_Abridged()
        engineDetailsAbridged.Init(buf, pos)
        return cls.InitFromObj(engineDetailsAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, engineDetailsAbridged):
        x = EngineDetails_AbridgedT()
        x._UnPack(engineDetailsAbridged)
        return x

    # EngineDetails_AbridgedT
    def _UnPack(self, engineDetailsAbridged):
        if engineDetailsAbridged is None:
            return
        self.id = engineDetailsAbridged.Id()
        self.idEngine = engineDetailsAbridged.IdEngine()
        self.classificationMarking = engineDetailsAbridged.ClassificationMarking()
        self.family = engineDetailsAbridged.Family()
        self.cycleType = engineDetailsAbridged.CycleType()
        self.characteristicType = engineDetailsAbridged.CharacteristicType()
        self.manufacturerOrgId = engineDetailsAbridged.ManufacturerOrgId()
        self.specificImpulse = engineDetailsAbridged.SpecificImpulse()
        self.burnTime = engineDetailsAbridged.BurnTime()
        self.seaLevelThrust = engineDetailsAbridged.SeaLevelThrust()
        self.vacuumThrust = engineDetailsAbridged.VacuumThrust()
        self.chamberPressure = engineDetailsAbridged.ChamberPressure()
        self.nozzleExpansionRatio = engineDetailsAbridged.NozzleExpansionRatio()
        self.maxFirings = engineDetailsAbridged.MaxFirings()
        self.propellant = engineDetailsAbridged.Propellant()
        self.oxidizer = engineDetailsAbridged.Oxidizer()
        self.notes = engineDetailsAbridged.Notes()
        self.createdAt = engineDetailsAbridged.CreatedAt()
        self.createdBy = engineDetailsAbridged.CreatedBy()
        self.source = engineDetailsAbridged.Source()
        self.origin = engineDetailsAbridged.Origin()
        self.origNetwork = engineDetailsAbridged.OrigNetwork()
        self.dataMode = engineDetailsAbridged.DataMode()

    # EngineDetails_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idEngine is not None:
            idEngine = builder.CreateString(self.idEngine)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.family is not None:
            family = builder.CreateString(self.family)
        if self.cycleType is not None:
            cycleType = builder.CreateString(self.cycleType)
        if self.characteristicType is not None:
            characteristicType = builder.CreateString(self.characteristicType)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.propellant is not None:
            propellant = builder.CreateString(self.propellant)
        if self.oxidizer is not None:
            oxidizer = builder.CreateString(self.oxidizer)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        EngineDetails_AbridgedStart(builder)
        if self.id is not None:
            EngineDetails_AbridgedAddId(builder, id)
        if self.idEngine is not None:
            EngineDetails_AbridgedAddIdEngine(builder, idEngine)
        if self.classificationMarking is not None:
            EngineDetails_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.family is not None:
            EngineDetails_AbridgedAddFamily(builder, family)
        if self.cycleType is not None:
            EngineDetails_AbridgedAddCycleType(builder, cycleType)
        if self.characteristicType is not None:
            EngineDetails_AbridgedAddCharacteristicType(builder, characteristicType)
        if self.manufacturerOrgId is not None:
            EngineDetails_AbridgedAddManufacturerOrgId(builder, manufacturerOrgId)
        EngineDetails_AbridgedAddSpecificImpulse(builder, self.specificImpulse)
        EngineDetails_AbridgedAddBurnTime(builder, self.burnTime)
        EngineDetails_AbridgedAddSeaLevelThrust(builder, self.seaLevelThrust)
        EngineDetails_AbridgedAddVacuumThrust(builder, self.vacuumThrust)
        EngineDetails_AbridgedAddChamberPressure(builder, self.chamberPressure)
        EngineDetails_AbridgedAddNozzleExpansionRatio(builder, self.nozzleExpansionRatio)
        EngineDetails_AbridgedAddMaxFirings(builder, self.maxFirings)
        if self.propellant is not None:
            EngineDetails_AbridgedAddPropellant(builder, propellant)
        if self.oxidizer is not None:
            EngineDetails_AbridgedAddOxidizer(builder, oxidizer)
        if self.notes is not None:
            EngineDetails_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            EngineDetails_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EngineDetails_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            EngineDetails_AbridgedAddSource(builder, source)
        if self.origin is not None:
            EngineDetails_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            EngineDetails_AbridgedAddOrigNetwork(builder, origNetwork)
        EngineDetails_AbridgedAddDataMode(builder, self.dataMode)
        engineDetailsAbridged = EngineDetails_AbridgedEnd(builder)
        return engineDetailsAbridged
