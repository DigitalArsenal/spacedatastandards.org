# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The group path from transmitter to receiver.
class EvacCondition_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacCondition_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacCondition_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacCondition_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacCondition_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
    # Example: /// Example: ACTIVITY LOW
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacCondition_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    # Example: /// Example: ANKLE LEFT FRONT
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacCondition_Full
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacCondition_Full
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the patient's condition.
    # Example: /// Example: Comments on the patient's condition.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacCondition_Full
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacCondition_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacCondition_FullStart(builder)

def EvacCondition_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacCondition_FullAddType(builder, type)

def EvacCondition_FullAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacCondition_FullAddBodyPart(builder, bodyPart)

def EvacCondition_FullAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacCondition_FullAddTime(builder, time)

def EvacCondition_FullAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacCondition_FullAddComments(builder, comments)

def EvacCondition_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacCondition_FullEnd(builder)


class EvacCondition_FullT(object):

    # EvacCondition_FullT
    def __init__(self):
        self.type = None  # type: str
        self.bodyPart = None  # type: str
        self.time = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacConditionFull = EvacCondition_Full()
        evacConditionFull.Init(buf, pos)
        return cls.InitFromObj(evacConditionFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacConditionFull):
        x = EvacCondition_FullT()
        x._UnPack(evacConditionFull)
        return x

    # EvacCondition_FullT
    def _UnPack(self, evacConditionFull):
        if evacConditionFull is None:
            return
        self.type = evacConditionFull.Type()
        self.bodyPart = evacConditionFull.BodyPart()
        self.time = evacConditionFull.Time()
        self.comments = evacConditionFull.Comments()

    # EvacCondition_FullT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacCondition_FullStart(builder)
        if self.type is not None:
            EvacCondition_FullAddType(builder, type)
        if self.bodyPart is not None:
            EvacCondition_FullAddBodyPart(builder, bodyPart)
        if self.time is not None:
            EvacCondition_FullAddTime(builder, time)
        if self.comments is not None:
            EvacCondition_FullAddComments(builder, comments)
        evacConditionFull = EvacCondition_FullEnd(builder)
        return evacConditionFull
