# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
class GNSSRawIF_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GNSSRawIF_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGNSSRawIF_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GNSSRawIF_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x47\x4E\x53\x53", size_prefixed=size_prefixed)

    # GNSSRawIF_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: GNSSRawIF-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # GNSSRawIF_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # GNSSRawIF_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the primary satellite on-orbit object.
    # Example: /// Example: 32375
    # Constraints: Minimum length = 0, Maximum length = 36
    # GNSSRawIF_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 32375
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: L2045
    # Constraints: Minimum length = 0, Maximum length = 36
    # GNSSRawIF_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
    # Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
    # Constraints: Minimum length = 0, Maximum length = 36
    # GNSSRawIF_Ingest
    def EsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
    # Example: /// Example: GPS1
    # Constraints: Minimum length = 0, Maximum length = 36
    # GNSSRawIF_Ingest
    def Receiver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
    # Example: /// Example: [0, 1, 0]
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def Boresight(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def BoresightLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def BoresightIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
    # Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def Quat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def QuatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def QuatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def StartIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2022-04-09T18:11:28.919768Z
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2022-04-09T18:12:28.919768Z
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 38.834
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def StartLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -104.821
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def StartLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
    # Example: /// Example: 525.664
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def StartAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 38.922
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def EndLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: -104.67
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def EndLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
    # Example: /// Example: 525.626
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def EndAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
    # Example: /// Example: [1227.6, 1575.4]
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def CenterFreq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def CenterFreqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def CenterFreqIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
    # Example: /// Example: [4.09, 5.87]
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def IfFreq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def IfFreqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def IfFreqIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # The number of samples taken per second.
    # Example: /// Example: [8000, 9000]
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SampleRate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def SampleRateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def SampleRateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
    # Example: /// Example: ['NONE', 'NONE']
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def PostFourier(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def PostFourierLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def PostFourierIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
    # Example: /// Example: COMPLEX
    # Constraints: Minimum length = 0, Maximum length = 10
    # GNSSRawIF_Ingest
    def SampleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
    # Example: /// Example: 8
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def BitDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
    # Example: /// Example: [0.0271, 0.0016]
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def DiffCodeBias(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def DiffCodeBiasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def DiffCodeBiasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # The amount of data generated per unit time, expressed in Megabytes/minute.
    # Example: /// Example: 0.205
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def DataRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
    # Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of raw IF records/files in a set.
    # Example: /// Example: 7
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SequenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
    # Example: /// Example: somefile.hdf5
    # Constraints: Minimum length = 0, Maximum length = 128
    # GNSSRawIF_Ingest
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['GNSSSET']
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
    # Example: /// Example: ['GNSSSET_ID']
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
    # Example: /// Example: 3168895
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def FileSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSRawIF_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSRawIF_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # GNSSRawIF_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # GNSSRawIF_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # GNSSRawIF_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # GNSSRawIF_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # GNSSRawIF_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # GNSSRawIF_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GNSSRawIF_IngestStart(builder):
    builder.StartObject(40)

def Start(builder):
    GNSSRawIF_IngestStart(builder)

def GNSSRawIF_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    GNSSRawIF_IngestAddId(builder, id)

def GNSSRawIF_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    GNSSRawIF_IngestAddClassificationMarking(builder, classificationMarking)

def GNSSRawIF_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    GNSSRawIF_IngestAddIdOnOrbit(builder, idOnOrbit)

def GNSSRawIF_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(3, satNo, 0)

def AddSatNo(builder, satNo):
    GNSSRawIF_IngestAddSatNo(builder, satNo)

def GNSSRawIF_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    GNSSRawIF_IngestAddOrigObjectId(builder, origObjectId)

def GNSSRawIF_IngestAddEsId(builder, esId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(esId), 0)

def AddEsId(builder, esId):
    GNSSRawIF_IngestAddEsId(builder, esId)

def GNSSRawIF_IngestAddReceiver(builder, receiver):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(receiver), 0)

def AddReceiver(builder, receiver):
    GNSSRawIF_IngestAddReceiver(builder, receiver)

def GNSSRawIF_IngestAddBoresight(builder, boresight):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(boresight), 0)

def AddBoresight(builder, boresight):
    GNSSRawIF_IngestAddBoresight(builder, boresight)

def GNSSRawIF_IngestStartBoresightVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBoresightVector(builder, numElems):
    return GNSSRawIF_IngestStartBoresightVector(builder, numElems)

def GNSSRawIF_IngestAddQuat(builder, quat):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(quat), 0)

def AddQuat(builder, quat):
    GNSSRawIF_IngestAddQuat(builder, quat)

def GNSSRawIF_IngestStartQuatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartQuatVector(builder, numElems):
    return GNSSRawIF_IngestStartQuatVector(builder, numElems)

def GNSSRawIF_IngestAddStartIndex(builder, startIndex):
    builder.PrependInt32Slot(9, startIndex, 0)

def AddStartIndex(builder, startIndex):
    GNSSRawIF_IngestAddStartIndex(builder, startIndex)

def GNSSRawIF_IngestAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    GNSSRawIF_IngestAddStartTime(builder, startTime)

def GNSSRawIF_IngestAddEndTime(builder, endTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(endTime), 0)

def AddEndTime(builder, endTime):
    GNSSRawIF_IngestAddEndTime(builder, endTime)

def GNSSRawIF_IngestAddStartLat(builder, startLat):
    builder.PrependFloat64Slot(12, startLat, 0.0)

def AddStartLat(builder, startLat):
    GNSSRawIF_IngestAddStartLat(builder, startLat)

def GNSSRawIF_IngestAddStartLon(builder, startLon):
    builder.PrependFloat64Slot(13, startLon, 0.0)

def AddStartLon(builder, startLon):
    GNSSRawIF_IngestAddStartLon(builder, startLon)

def GNSSRawIF_IngestAddStartAlt(builder, startAlt):
    builder.PrependFloat64Slot(14, startAlt, 0.0)

def AddStartAlt(builder, startAlt):
    GNSSRawIF_IngestAddStartAlt(builder, startAlt)

def GNSSRawIF_IngestAddEndLat(builder, endLat):
    builder.PrependFloat64Slot(15, endLat, 0.0)

def AddEndLat(builder, endLat):
    GNSSRawIF_IngestAddEndLat(builder, endLat)

def GNSSRawIF_IngestAddEndLon(builder, endLon):
    builder.PrependFloat64Slot(16, endLon, 0.0)

def AddEndLon(builder, endLon):
    GNSSRawIF_IngestAddEndLon(builder, endLon)

def GNSSRawIF_IngestAddEndAlt(builder, endAlt):
    builder.PrependFloat64Slot(17, endAlt, 0.0)

def AddEndAlt(builder, endAlt):
    GNSSRawIF_IngestAddEndAlt(builder, endAlt)

def GNSSRawIF_IngestAddCenterFreq(builder, centerFreq):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(centerFreq), 0)

def AddCenterFreq(builder, centerFreq):
    GNSSRawIF_IngestAddCenterFreq(builder, centerFreq)

def GNSSRawIF_IngestStartCenterFreqVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCenterFreqVector(builder, numElems):
    return GNSSRawIF_IngestStartCenterFreqVector(builder, numElems)

def GNSSRawIF_IngestAddIfFreq(builder, ifFreq):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ifFreq), 0)

def AddIfFreq(builder, ifFreq):
    GNSSRawIF_IngestAddIfFreq(builder, ifFreq)

def GNSSRawIF_IngestStartIfFreqVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIfFreqVector(builder, numElems):
    return GNSSRawIF_IngestStartIfFreqVector(builder, numElems)

def GNSSRawIF_IngestAddSampleRate(builder, sampleRate):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(sampleRate), 0)

def AddSampleRate(builder, sampleRate):
    GNSSRawIF_IngestAddSampleRate(builder, sampleRate)

def GNSSRawIF_IngestStartSampleRateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSampleRateVector(builder, numElems):
    return GNSSRawIF_IngestStartSampleRateVector(builder, numElems)

def GNSSRawIF_IngestAddPostFourier(builder, postFourier):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(postFourier), 0)

def AddPostFourier(builder, postFourier):
    GNSSRawIF_IngestAddPostFourier(builder, postFourier)

def GNSSRawIF_IngestStartPostFourierVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPostFourierVector(builder, numElems):
    return GNSSRawIF_IngestStartPostFourierVector(builder, numElems)

def GNSSRawIF_IngestAddSampleType(builder, sampleType):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(sampleType), 0)

def AddSampleType(builder, sampleType):
    GNSSRawIF_IngestAddSampleType(builder, sampleType)

def GNSSRawIF_IngestAddBitDepth(builder, bitDepth):
    builder.PrependInt32Slot(23, bitDepth, 0)

def AddBitDepth(builder, bitDepth):
    GNSSRawIF_IngestAddBitDepth(builder, bitDepth)

def GNSSRawIF_IngestAddDiffCodeBias(builder, diffCodeBias):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(diffCodeBias), 0)

def AddDiffCodeBias(builder, diffCodeBias):
    GNSSRawIF_IngestAddDiffCodeBias(builder, diffCodeBias)

def GNSSRawIF_IngestStartDiffCodeBiasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDiffCodeBiasVector(builder, numElems):
    return GNSSRawIF_IngestStartDiffCodeBiasVector(builder, numElems)

def GNSSRawIF_IngestAddDataRate(builder, dataRate):
    builder.PrependFloat64Slot(25, dataRate, 0.0)

def AddDataRate(builder, dataRate):
    GNSSRawIF_IngestAddDataRate(builder, dataRate)

def GNSSRawIF_IngestAddSetId(builder, setId):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(setId), 0)

def AddSetId(builder, setId):
    GNSSRawIF_IngestAddSetId(builder, setId)

def GNSSRawIF_IngestAddSetLength(builder, setLength):
    builder.PrependInt32Slot(27, setLength, 0)

def AddSetLength(builder, setLength):
    GNSSRawIF_IngestAddSetLength(builder, setLength)

def GNSSRawIF_IngestAddSequenceId(builder, sequenceId):
    builder.PrependInt32Slot(28, sequenceId, 0)

def AddSequenceId(builder, sequenceId):
    GNSSRawIF_IngestAddSequenceId(builder, sequenceId)

def GNSSRawIF_IngestAddFileName(builder, fileName):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0)

def AddFileName(builder, fileName):
    GNSSRawIF_IngestAddFileName(builder, fileName)

def GNSSRawIF_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    GNSSRawIF_IngestAddSrcTyps(builder, srcTyps)

def GNSSRawIF_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return GNSSRawIF_IngestStartSrcTypsVector(builder, numElems)

def GNSSRawIF_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    GNSSRawIF_IngestAddSrcIds(builder, srcIds)

def GNSSRawIF_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return GNSSRawIF_IngestStartSrcIdsVector(builder, numElems)

def GNSSRawIF_IngestAddFileSize(builder, fileSize):
    builder.PrependInt64Slot(32, fileSize, 0)

def AddFileSize(builder, fileSize):
    GNSSRawIF_IngestAddFileSize(builder, fileSize)

def GNSSRawIF_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    GNSSRawIF_IngestAddTags(builder, tags)

def GNSSRawIF_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return GNSSRawIF_IngestStartTagsVector(builder, numElems)

def GNSSRawIF_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    GNSSRawIF_IngestAddCreatedAt(builder, createdAt)

def GNSSRawIF_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    GNSSRawIF_IngestAddCreatedBy(builder, createdBy)

def GNSSRawIF_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    GNSSRawIF_IngestAddSource(builder, source)

def GNSSRawIF_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    GNSSRawIF_IngestAddOrigin(builder, origin)

def GNSSRawIF_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(38, dataMode, 0)

def AddDataMode(builder, dataMode):
    GNSSRawIF_IngestAddDataMode(builder, dataMode)

def GNSSRawIF_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    GNSSRawIF_IngestAddOrigNetwork(builder, origNetwork)

def GNSSRawIF_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return GNSSRawIF_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class GNSSRawIF_IngestT(object):

    # GNSSRawIF_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.esId = None  # type: str
        self.receiver = None  # type: str
        self.boresight = None  # type: List[str]
        self.quat = None  # type: List[str]
        self.startIndex = 0  # type: int
        self.startTime = None  # type: str
        self.endTime = None  # type: str
        self.startLat = 0.0  # type: float
        self.startLon = 0.0  # type: float
        self.startAlt = 0.0  # type: float
        self.endLat = 0.0  # type: float
        self.endLon = 0.0  # type: float
        self.endAlt = 0.0  # type: float
        self.centerFreq = None  # type: List[str]
        self.ifFreq = None  # type: List[str]
        self.sampleRate = None  # type: List[str]
        self.postFourier = None  # type: List[str]
        self.sampleType = None  # type: str
        self.bitDepth = 0  # type: int
        self.diffCodeBias = None  # type: List[str]
        self.dataRate = 0.0  # type: float
        self.setId = None  # type: str
        self.setLength = 0  # type: int
        self.sequenceId = 0  # type: int
        self.fileName = None  # type: str
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.fileSize = 0  # type: int
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gnssrawIfIngest = GNSSRawIF_Ingest()
        gnssrawIfIngest.Init(buf, pos)
        return cls.InitFromObj(gnssrawIfIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, gnssrawIfIngest):
        x = GNSSRawIF_IngestT()
        x._UnPack(gnssrawIfIngest)
        return x

    # GNSSRawIF_IngestT
    def _UnPack(self, gnssrawIfIngest):
        if gnssrawIfIngest is None:
            return
        self.id = gnssrawIfIngest.Id()
        self.classificationMarking = gnssrawIfIngest.ClassificationMarking()
        self.idOnOrbit = gnssrawIfIngest.IdOnOrbit()
        self.satNo = gnssrawIfIngest.SatNo()
        self.origObjectId = gnssrawIfIngest.OrigObjectId()
        self.esId = gnssrawIfIngest.EsId()
        self.receiver = gnssrawIfIngest.Receiver()
        if not gnssrawIfIngest.BoresightIsNone():
            self.boresight = []
            for i in range(gnssrawIfIngest.BoresightLength()):
                self.boresight.append(gnssrawIfIngest.Boresight(i))
        if not gnssrawIfIngest.QuatIsNone():
            self.quat = []
            for i in range(gnssrawIfIngest.QuatLength()):
                self.quat.append(gnssrawIfIngest.Quat(i))
        self.startIndex = gnssrawIfIngest.StartIndex()
        self.startTime = gnssrawIfIngest.StartTime()
        self.endTime = gnssrawIfIngest.EndTime()
        self.startLat = gnssrawIfIngest.StartLat()
        self.startLon = gnssrawIfIngest.StartLon()
        self.startAlt = gnssrawIfIngest.StartAlt()
        self.endLat = gnssrawIfIngest.EndLat()
        self.endLon = gnssrawIfIngest.EndLon()
        self.endAlt = gnssrawIfIngest.EndAlt()
        if not gnssrawIfIngest.CenterFreqIsNone():
            self.centerFreq = []
            for i in range(gnssrawIfIngest.CenterFreqLength()):
                self.centerFreq.append(gnssrawIfIngest.CenterFreq(i))
        if not gnssrawIfIngest.IfFreqIsNone():
            self.ifFreq = []
            for i in range(gnssrawIfIngest.IfFreqLength()):
                self.ifFreq.append(gnssrawIfIngest.IfFreq(i))
        if not gnssrawIfIngest.SampleRateIsNone():
            self.sampleRate = []
            for i in range(gnssrawIfIngest.SampleRateLength()):
                self.sampleRate.append(gnssrawIfIngest.SampleRate(i))
        if not gnssrawIfIngest.PostFourierIsNone():
            self.postFourier = []
            for i in range(gnssrawIfIngest.PostFourierLength()):
                self.postFourier.append(gnssrawIfIngest.PostFourier(i))
        self.sampleType = gnssrawIfIngest.SampleType()
        self.bitDepth = gnssrawIfIngest.BitDepth()
        if not gnssrawIfIngest.DiffCodeBiasIsNone():
            self.diffCodeBias = []
            for i in range(gnssrawIfIngest.DiffCodeBiasLength()):
                self.diffCodeBias.append(gnssrawIfIngest.DiffCodeBias(i))
        self.dataRate = gnssrawIfIngest.DataRate()
        self.setId = gnssrawIfIngest.SetId()
        self.setLength = gnssrawIfIngest.SetLength()
        self.sequenceId = gnssrawIfIngest.SequenceId()
        self.fileName = gnssrawIfIngest.FileName()
        if not gnssrawIfIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(gnssrawIfIngest.SrcTypsLength()):
                self.srcTyps.append(gnssrawIfIngest.SrcTyps(i))
        if not gnssrawIfIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(gnssrawIfIngest.SrcIdsLength()):
                self.srcIds.append(gnssrawIfIngest.SrcIds(i))
        self.fileSize = gnssrawIfIngest.FileSize()
        if not gnssrawIfIngest.TagsIsNone():
            self.tags = []
            for i in range(gnssrawIfIngest.TagsLength()):
                self.tags.append(gnssrawIfIngest.Tags(i))
        self.createdAt = gnssrawIfIngest.CreatedAt()
        self.createdBy = gnssrawIfIngest.CreatedBy()
        self.source = gnssrawIfIngest.Source()
        self.origin = gnssrawIfIngest.Origin()
        self.dataMode = gnssrawIfIngest.DataMode()
        self.origNetwork = gnssrawIfIngest.OrigNetwork()

    # GNSSRawIF_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.esId is not None:
            esId = builder.CreateString(self.esId)
        if self.receiver is not None:
            receiver = builder.CreateString(self.receiver)
        if self.boresight is not None:
            boresightlist = []
            for i in range(len(self.boresight)):
                boresightlist.append(builder.CreateString(self.boresight[i]))
            GNSSRawIF_IngestStartBoresightVector(builder, len(self.boresight))
            for i in reversed(range(len(self.boresight))):
                builder.PrependUOffsetTRelative(boresightlist[i])
            boresight = builder.EndVector()
        if self.quat is not None:
            quatlist = []
            for i in range(len(self.quat)):
                quatlist.append(builder.CreateString(self.quat[i]))
            GNSSRawIF_IngestStartQuatVector(builder, len(self.quat))
            for i in reversed(range(len(self.quat))):
                builder.PrependUOffsetTRelative(quatlist[i])
            quat = builder.EndVector()
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.endTime is not None:
            endTime = builder.CreateString(self.endTime)
        if self.centerFreq is not None:
            centerFreqlist = []
            for i in range(len(self.centerFreq)):
                centerFreqlist.append(builder.CreateString(self.centerFreq[i]))
            GNSSRawIF_IngestStartCenterFreqVector(builder, len(self.centerFreq))
            for i in reversed(range(len(self.centerFreq))):
                builder.PrependUOffsetTRelative(centerFreqlist[i])
            centerFreq = builder.EndVector()
        if self.ifFreq is not None:
            ifFreqlist = []
            for i in range(len(self.ifFreq)):
                ifFreqlist.append(builder.CreateString(self.ifFreq[i]))
            GNSSRawIF_IngestStartIfFreqVector(builder, len(self.ifFreq))
            for i in reversed(range(len(self.ifFreq))):
                builder.PrependUOffsetTRelative(ifFreqlist[i])
            ifFreq = builder.EndVector()
        if self.sampleRate is not None:
            sampleRatelist = []
            for i in range(len(self.sampleRate)):
                sampleRatelist.append(builder.CreateString(self.sampleRate[i]))
            GNSSRawIF_IngestStartSampleRateVector(builder, len(self.sampleRate))
            for i in reversed(range(len(self.sampleRate))):
                builder.PrependUOffsetTRelative(sampleRatelist[i])
            sampleRate = builder.EndVector()
        if self.postFourier is not None:
            postFourierlist = []
            for i in range(len(self.postFourier)):
                postFourierlist.append(builder.CreateString(self.postFourier[i]))
            GNSSRawIF_IngestStartPostFourierVector(builder, len(self.postFourier))
            for i in reversed(range(len(self.postFourier))):
                builder.PrependUOffsetTRelative(postFourierlist[i])
            postFourier = builder.EndVector()
        if self.sampleType is not None:
            sampleType = builder.CreateString(self.sampleType)
        if self.diffCodeBias is not None:
            diffCodeBiaslist = []
            for i in range(len(self.diffCodeBias)):
                diffCodeBiaslist.append(builder.CreateString(self.diffCodeBias[i]))
            GNSSRawIF_IngestStartDiffCodeBiasVector(builder, len(self.diffCodeBias))
            for i in reversed(range(len(self.diffCodeBias))):
                builder.PrependUOffsetTRelative(diffCodeBiaslist[i])
            diffCodeBias = builder.EndVector()
        if self.setId is not None:
            setId = builder.CreateString(self.setId)
        if self.fileName is not None:
            fileName = builder.CreateString(self.fileName)
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            GNSSRawIF_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            GNSSRawIF_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            GNSSRawIF_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        GNSSRawIF_IngestStart(builder)
        if self.id is not None:
            GNSSRawIF_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            GNSSRawIF_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit is not None:
            GNSSRawIF_IngestAddIdOnOrbit(builder, idOnOrbit)
        GNSSRawIF_IngestAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            GNSSRawIF_IngestAddOrigObjectId(builder, origObjectId)
        if self.esId is not None:
            GNSSRawIF_IngestAddEsId(builder, esId)
        if self.receiver is not None:
            GNSSRawIF_IngestAddReceiver(builder, receiver)
        if self.boresight is not None:
            GNSSRawIF_IngestAddBoresight(builder, boresight)
        if self.quat is not None:
            GNSSRawIF_IngestAddQuat(builder, quat)
        GNSSRawIF_IngestAddStartIndex(builder, self.startIndex)
        if self.startTime is not None:
            GNSSRawIF_IngestAddStartTime(builder, startTime)
        if self.endTime is not None:
            GNSSRawIF_IngestAddEndTime(builder, endTime)
        GNSSRawIF_IngestAddStartLat(builder, self.startLat)
        GNSSRawIF_IngestAddStartLon(builder, self.startLon)
        GNSSRawIF_IngestAddStartAlt(builder, self.startAlt)
        GNSSRawIF_IngestAddEndLat(builder, self.endLat)
        GNSSRawIF_IngestAddEndLon(builder, self.endLon)
        GNSSRawIF_IngestAddEndAlt(builder, self.endAlt)
        if self.centerFreq is not None:
            GNSSRawIF_IngestAddCenterFreq(builder, centerFreq)
        if self.ifFreq is not None:
            GNSSRawIF_IngestAddIfFreq(builder, ifFreq)
        if self.sampleRate is not None:
            GNSSRawIF_IngestAddSampleRate(builder, sampleRate)
        if self.postFourier is not None:
            GNSSRawIF_IngestAddPostFourier(builder, postFourier)
        if self.sampleType is not None:
            GNSSRawIF_IngestAddSampleType(builder, sampleType)
        GNSSRawIF_IngestAddBitDepth(builder, self.bitDepth)
        if self.diffCodeBias is not None:
            GNSSRawIF_IngestAddDiffCodeBias(builder, diffCodeBias)
        GNSSRawIF_IngestAddDataRate(builder, self.dataRate)
        if self.setId is not None:
            GNSSRawIF_IngestAddSetId(builder, setId)
        GNSSRawIF_IngestAddSetLength(builder, self.setLength)
        GNSSRawIF_IngestAddSequenceId(builder, self.sequenceId)
        if self.fileName is not None:
            GNSSRawIF_IngestAddFileName(builder, fileName)
        if self.srcTyps is not None:
            GNSSRawIF_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            GNSSRawIF_IngestAddSrcIds(builder, srcIds)
        GNSSRawIF_IngestAddFileSize(builder, self.fileSize)
        if self.tags is not None:
            GNSSRawIF_IngestAddTags(builder, tags)
        if self.createdAt is not None:
            GNSSRawIF_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            GNSSRawIF_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            GNSSRawIF_IngestAddSource(builder, source)
        if self.origin is not None:
            GNSSRawIF_IngestAddOrigin(builder, origin)
        GNSSRawIF_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            GNSSRawIF_IngestAddOrigNetwork(builder, origNetwork)
        gnssrawIfIngest = GNSSRawIF_IngestEnd(builder)
        return gnssrawIfIngest
