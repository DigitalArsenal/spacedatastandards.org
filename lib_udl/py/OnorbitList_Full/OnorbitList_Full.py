# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Table for maintaining generic lists of OnOrbit objects (e.g.  Favorites, HIO, SHIO, HVA, etc).
class OnorbitList_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitList_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitList_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitList_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitList_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITLIST-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitList_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitList_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique name of the list.
    # Example: /// Example: People
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitList_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the list.
    # Example: /// Example: DESCRIPTION_OF_LIST
    # Constraints: Minimum length = 0, Maximum length = 512
    # OnorbitList_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ordered array of Onorbit IDs belonging to this list.
    # Example: /// Example: ['ID1', 'ID2']
    # Constraints: No constraints specified.
    # OnorbitList_Full
    def Onorbits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OnorbitList_Full
    def OnorbitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OnorbitList_Full
    def OnorbitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitList_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitList_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitList_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitList_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitList_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitList_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitList_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitList_FullStart(builder):
    builder.StartObject(12)

def Start(builder):
    OnorbitList_FullStart(builder)

def OnorbitList_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitList_FullAddId(builder, id)

def OnorbitList_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitList_FullAddClassificationMarking(builder, classificationMarking)

def OnorbitList_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OnorbitList_FullAddName(builder, name)

def OnorbitList_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    OnorbitList_FullAddDescription(builder, description)

def OnorbitList_FullAddOnorbits(builder, onorbits):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(onorbits), 0)

def AddOnorbits(builder, onorbits):
    OnorbitList_FullAddOnorbits(builder, onorbits)

def OnorbitList_FullStartOnorbitsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOnorbitsVector(builder, numElems):
    return OnorbitList_FullStartOnorbitsVector(builder, numElems)

def OnorbitList_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitList_FullAddSource(builder, source)

def OnorbitList_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitList_FullAddOrigin(builder, origin)

def OnorbitList_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(7, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitList_FullAddDataMode(builder, dataMode)

def OnorbitList_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitList_FullAddCreatedAt(builder, createdAt)

def OnorbitList_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitList_FullAddCreatedBy(builder, createdBy)

def OnorbitList_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OnorbitList_FullAddUpdatedAt(builder, updatedAt)

def OnorbitList_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OnorbitList_FullAddUpdatedBy(builder, updatedBy)

def OnorbitList_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitList_FullEnd(builder)

try:
    from typing import List
except:
    pass

class OnorbitList_FullT(object):

    # OnorbitList_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.onorbits = None  # type: List[str]
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitListFull = OnorbitList_Full()
        onorbitListFull.Init(buf, pos)
        return cls.InitFromObj(onorbitListFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitListFull):
        x = OnorbitList_FullT()
        x._UnPack(onorbitListFull)
        return x

    # OnorbitList_FullT
    def _UnPack(self, onorbitListFull):
        if onorbitListFull is None:
            return
        self.id = onorbitListFull.Id()
        self.classificationMarking = onorbitListFull.ClassificationMarking()
        self.name = onorbitListFull.Name()
        self.description = onorbitListFull.Description()
        if not onorbitListFull.OnorbitsIsNone():
            self.onorbits = []
            for i in range(onorbitListFull.OnorbitsLength()):
                self.onorbits.append(onorbitListFull.Onorbits(i))
        self.source = onorbitListFull.Source()
        self.origin = onorbitListFull.Origin()
        self.dataMode = onorbitListFull.DataMode()
        self.createdAt = onorbitListFull.CreatedAt()
        self.createdBy = onorbitListFull.CreatedBy()
        self.updatedAt = onorbitListFull.UpdatedAt()
        self.updatedBy = onorbitListFull.UpdatedBy()

    # OnorbitList_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.onorbits is not None:
            onorbitslist = []
            for i in range(len(self.onorbits)):
                onorbitslist.append(builder.CreateString(self.onorbits[i]))
            OnorbitList_FullStartOnorbitsVector(builder, len(self.onorbits))
            for i in reversed(range(len(self.onorbits))):
                builder.PrependUOffsetTRelative(onorbitslist[i])
            onorbits = builder.EndVector()
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        OnorbitList_FullStart(builder)
        if self.id is not None:
            OnorbitList_FullAddId(builder, id)
        if self.classificationMarking is not None:
            OnorbitList_FullAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            OnorbitList_FullAddName(builder, name)
        if self.description is not None:
            OnorbitList_FullAddDescription(builder, description)
        if self.onorbits is not None:
            OnorbitList_FullAddOnorbits(builder, onorbits)
        if self.source is not None:
            OnorbitList_FullAddSource(builder, source)
        if self.origin is not None:
            OnorbitList_FullAddOrigin(builder, origin)
        OnorbitList_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            OnorbitList_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitList_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OnorbitList_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OnorbitList_FullAddUpdatedBy(builder, updatedBy)
        onorbitListFull = OnorbitList_FullEnd(builder)
        return onorbitListFull
