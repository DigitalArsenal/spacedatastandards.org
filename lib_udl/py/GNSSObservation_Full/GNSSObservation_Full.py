# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
class GNSSObservation_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GNSSObservation_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGNSSObservation_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GNSSObservation_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x47\x4E\x53\x53", size_prefixed=size_prefixed)

    # GNSSObservation_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
    # G - GPS (NN = PRN)
    # R - GLONASS (NN = Slot Number)
    # S - SBAS Payload (NN = PRN-100)
    # E - Galileo (NN = PRN)
    # C - BeiDou (NN = PRN)
    # J - QZSS (NN = PRN - 1923)
    # I - IRNSS (NN = PRN)
    # Example: /// Example: GEJ
    # Constraints: Minimum length = 0, Maximum length = 6
    # GNSSObservation_Full
    def GnssSatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
    # Example: /// Example: 0
    # Constraints: No constraints specified.
    # GNSSObservation_Full
    def TrackingStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GNSS Automatic Gain Control State.
    # Example: /// Example: 20
    # Constraints: No constraints specified.
    # GNSSObservation_Full
    def AgcState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
    # Example: /// Example: ['S1C', 'C1C', 'C1D']
    # Constraints: No constraints specified.
    # GNSSObservation_Full
    def ObsCodeSet(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSObservation_Full
    def ObsCodeSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSObservation_Full
    def ObsCodeSetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
    # Example: /// Example: [42.1, 1000.0, 0.9]
    # Constraints: No constraints specified.
    # GNSSObservation_Full
    def Ob(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # GNSSObservation_Full
    def ObLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GNSSObservation_Full
    def ObIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def GNSSObservation_FullStart(builder):
    builder.StartObject(5)

def Start(builder):
    GNSSObservation_FullStart(builder)

def GNSSObservation_FullAddGnssSatId(builder, gnssSatId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gnssSatId), 0)

def AddGnssSatId(builder, gnssSatId):
    GNSSObservation_FullAddGnssSatId(builder, gnssSatId)

def GNSSObservation_FullAddTrackingStatus(builder, trackingStatus):
    builder.PrependInt32Slot(1, trackingStatus, 0)

def AddTrackingStatus(builder, trackingStatus):
    GNSSObservation_FullAddTrackingStatus(builder, trackingStatus)

def GNSSObservation_FullAddAgcState(builder, agcState):
    builder.PrependInt32Slot(2, agcState, 0)

def AddAgcState(builder, agcState):
    GNSSObservation_FullAddAgcState(builder, agcState)

def GNSSObservation_FullAddObsCodeSet(builder, obsCodeSet):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(obsCodeSet), 0)

def AddObsCodeSet(builder, obsCodeSet):
    GNSSObservation_FullAddObsCodeSet(builder, obsCodeSet)

def GNSSObservation_FullStartObsCodeSetVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartObsCodeSetVector(builder, numElems):
    return GNSSObservation_FullStartObsCodeSetVector(builder, numElems)

def GNSSObservation_FullAddOb(builder, ob):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ob), 0)

def AddOb(builder, ob):
    GNSSObservation_FullAddOb(builder, ob)

def GNSSObservation_FullStartObVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartObVector(builder, numElems):
    return GNSSObservation_FullStartObVector(builder, numElems)

def GNSSObservation_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return GNSSObservation_FullEnd(builder)

try:
    from typing import List
except:
    pass

class GNSSObservation_FullT(object):

    # GNSSObservation_FullT
    def __init__(self):
        self.gnssSatId = None  # type: str
        self.trackingStatus = 0  # type: int
        self.agcState = 0  # type: int
        self.obsCodeSet = None  # type: List[str]
        self.ob = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        gnssobservationFull = GNSSObservation_Full()
        gnssobservationFull.Init(buf, pos)
        return cls.InitFromObj(gnssobservationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, gnssobservationFull):
        x = GNSSObservation_FullT()
        x._UnPack(gnssobservationFull)
        return x

    # GNSSObservation_FullT
    def _UnPack(self, gnssobservationFull):
        if gnssobservationFull is None:
            return
        self.gnssSatId = gnssobservationFull.GnssSatId()
        self.trackingStatus = gnssobservationFull.TrackingStatus()
        self.agcState = gnssobservationFull.AgcState()
        if not gnssobservationFull.ObsCodeSetIsNone():
            self.obsCodeSet = []
            for i in range(gnssobservationFull.ObsCodeSetLength()):
                self.obsCodeSet.append(gnssobservationFull.ObsCodeSet(i))
        if not gnssobservationFull.ObIsNone():
            self.ob = []
            for i in range(gnssobservationFull.ObLength()):
                self.ob.append(gnssobservationFull.Ob(i))

    # GNSSObservation_FullT
    def Pack(self, builder):
        if self.gnssSatId is not None:
            gnssSatId = builder.CreateString(self.gnssSatId)
        if self.obsCodeSet is not None:
            obsCodeSetlist = []
            for i in range(len(self.obsCodeSet)):
                obsCodeSetlist.append(builder.CreateString(self.obsCodeSet[i]))
            GNSSObservation_FullStartObsCodeSetVector(builder, len(self.obsCodeSet))
            for i in reversed(range(len(self.obsCodeSet))):
                builder.PrependUOffsetTRelative(obsCodeSetlist[i])
            obsCodeSet = builder.EndVector()
        if self.ob is not None:
            oblist = []
            for i in range(len(self.ob)):
                oblist.append(builder.CreateString(self.ob[i]))
            GNSSObservation_FullStartObVector(builder, len(self.ob))
            for i in reversed(range(len(self.ob))):
                builder.PrependUOffsetTRelative(oblist[i])
            ob = builder.EndVector()
        GNSSObservation_FullStart(builder)
        if self.gnssSatId is not None:
            GNSSObservation_FullAddGnssSatId(builder, gnssSatId)
        GNSSObservation_FullAddTrackingStatus(builder, self.trackingStatus)
        GNSSObservation_FullAddAgcState(builder, self.agcState)
        if self.obsCodeSet is not None:
            GNSSObservation_FullAddObsCodeSet(builder, obsCodeSet)
        if self.ob is not None:
            GNSSObservation_FullAddOb(builder, ob)
        gnssobservationFull = GNSSObservation_FullEnd(builder)
        return gnssobservationFull
