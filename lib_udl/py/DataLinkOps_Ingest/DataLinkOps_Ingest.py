# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
class DataLinkOps_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataLinkOps_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDataLinkOps_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DataLinkOps_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x41\x54\x41", size_prefixed=size_prefixed)

    # DataLinkOps_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Name of the data link.
    # Example: /// Example: Link-16
    # Constraints: Minimum length = 0, Maximum length = 24
    # DataLinkOps_Ingest
    def LinkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLinkOps_Ingest
    def LinkStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-08T13:55:43.123Z
    # Constraints: No constraints specified.
    # DataLinkOps_Ingest
    def LinkStopTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
    # Example: /// Example: AFTER
    # Constraints: Minimum length = 0, Maximum length = 8
    # DataLinkOps_Ingest
    def LinkStopTimeMod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Detailed characteristics of the data link.
    # Example: /// Example: Link details
    # Constraints: Minimum length = 0, Maximum length = 3000
    # DataLinkOps_Ingest
    def LinkDetails(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DataLinkOps_IngestStart(builder):
    builder.StartObject(5)

def Start(builder):
    DataLinkOps_IngestStart(builder)

def DataLinkOps_IngestAddLinkName(builder, linkName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(linkName), 0)

def AddLinkName(builder, linkName):
    DataLinkOps_IngestAddLinkName(builder, linkName)

def DataLinkOps_IngestAddLinkStartTime(builder, linkStartTime):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkStartTime), 0)

def AddLinkStartTime(builder, linkStartTime):
    DataLinkOps_IngestAddLinkStartTime(builder, linkStartTime)

def DataLinkOps_IngestAddLinkStopTime(builder, linkStopTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linkStopTime), 0)

def AddLinkStopTime(builder, linkStopTime):
    DataLinkOps_IngestAddLinkStopTime(builder, linkStopTime)

def DataLinkOps_IngestAddLinkStopTimeMod(builder, linkStopTimeMod):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(linkStopTimeMod), 0)

def AddLinkStopTimeMod(builder, linkStopTimeMod):
    DataLinkOps_IngestAddLinkStopTimeMod(builder, linkStopTimeMod)

def DataLinkOps_IngestAddLinkDetails(builder, linkDetails):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(linkDetails), 0)

def AddLinkDetails(builder, linkDetails):
    DataLinkOps_IngestAddLinkDetails(builder, linkDetails)

def DataLinkOps_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return DataLinkOps_IngestEnd(builder)


class DataLinkOps_IngestT(object):

    # DataLinkOps_IngestT
    def __init__(self):
        self.linkName = None  # type: str
        self.linkStartTime = None  # type: str
        self.linkStopTime = None  # type: str
        self.linkStopTimeMod = None  # type: str
        self.linkDetails = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dataLinkOpsIngest = DataLinkOps_Ingest()
        dataLinkOpsIngest.Init(buf, pos)
        return cls.InitFromObj(dataLinkOpsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dataLinkOpsIngest):
        x = DataLinkOps_IngestT()
        x._UnPack(dataLinkOpsIngest)
        return x

    # DataLinkOps_IngestT
    def _UnPack(self, dataLinkOpsIngest):
        if dataLinkOpsIngest is None:
            return
        self.linkName = dataLinkOpsIngest.LinkName()
        self.linkStartTime = dataLinkOpsIngest.LinkStartTime()
        self.linkStopTime = dataLinkOpsIngest.LinkStopTime()
        self.linkStopTimeMod = dataLinkOpsIngest.LinkStopTimeMod()
        self.linkDetails = dataLinkOpsIngest.LinkDetails()

    # DataLinkOps_IngestT
    def Pack(self, builder):
        if self.linkName is not None:
            linkName = builder.CreateString(self.linkName)
        if self.linkStartTime is not None:
            linkStartTime = builder.CreateString(self.linkStartTime)
        if self.linkStopTime is not None:
            linkStopTime = builder.CreateString(self.linkStopTime)
        if self.linkStopTimeMod is not None:
            linkStopTimeMod = builder.CreateString(self.linkStopTimeMod)
        if self.linkDetails is not None:
            linkDetails = builder.CreateString(self.linkDetails)
        DataLinkOps_IngestStart(builder)
        if self.linkName is not None:
            DataLinkOps_IngestAddLinkName(builder, linkName)
        if self.linkStartTime is not None:
            DataLinkOps_IngestAddLinkStartTime(builder, linkStartTime)
        if self.linkStopTime is not None:
            DataLinkOps_IngestAddLinkStopTime(builder, linkStopTime)
        if self.linkStopTimeMod is not None:
            DataLinkOps_IngestAddLinkStopTimeMod(builder, linkStopTimeMod)
        if self.linkDetails is not None:
            DataLinkOps_IngestAddLinkDetails(builder, linkDetails)
        dataLinkOpsIngest = DataLinkOps_IngestEnd(builder)
        return dataLinkOpsIngest
