# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
class AirEvent_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirEvent_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirEvent_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirEvent_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x45", size_prefixed=size_prefixed)

    # AirEvent_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirEvent_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirEvent_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
    # Example: /// Example: FUEL TRANSFER
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirEvent_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL unique identifier of the sortie associated with this air event.
    # Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEvent_Abridged
    def IdSortie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The UDL unique identifier of the mission associated with this air event.
    # Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEvent_Abridged
    def IdMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: MB014313032022407540
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEvent_Abridged
    def ExternalAirEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifies the Itinerary point of a sortie where an air event occurs.
    # Example: /// Example: 825
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def LegNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
    # Example: /// Example: 901EW
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirEvent_Abridged
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
    # Example: /// Example: A
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEvent_Abridged
    def ArrPurpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def PlannedArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T13:59:48.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def EstArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T14:00:03.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def ActualArrTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
    # Example: /// Example: Q
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEvent_Abridged
    def DepPurpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T14:15:43.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def PlannedDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T14:19:48.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def EstDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-07T14:17:03.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def ActualDepTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
    # Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirEvent_Abridged
    def ExternalArtrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the air refueling track, if applicable.
    # Example: /// Example: CH61
    # Constraints: Minimum length = 0, Maximum length = 15
    # AirEvent_Abridged
    def ArTrackId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the air refueling track, if applicable.
    # Example: /// Example: CH61 POST
    # Constraints: Minimum length = 0, Maximum length = 50
    # AirEvent_Abridged
    def ArTrackName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2024-01-07T13:55:43.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def Rzct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2024-01-07T15:11:27.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def Arct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Altitude of this air event, in feet.
    # Example: /// Example: 28000.1
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def BaseAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Priority of this air event.
    # Example: /// Example: 1A2
    # Constraints: Minimum length = 0, Maximum length = 3
    # AirEvent_Abridged
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Length of time the receiver unit has requested for an air event, in hours.
    # Example: /// Example: 1.5
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def TrackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
    # Example: /// Example: R
    # Constraints: Minimum length = 0, Maximum length = 2
    # AirEvent_Abridged
    def StatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
    # Example: /// Example: AN
    # Constraints: Minimum length = 0, Maximum length = 20
    # AirEvent_Abridged
    def RzPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
    # Example: /// Example: PP
    # Constraints: Minimum length = 0, Maximum length = 3
    # AirEvent_Abridged
    def RzType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
    # Example: /// Example: V
    # Constraints: Minimum length = 0, Maximum length = 2
    # AirEvent_Abridged
    def ArEventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of tankers requested for an air refueling event.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def NumTankers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def RevTrack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def ShortTrack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that this air refueling event has been cancelled.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def Cancelled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Collection of tanker aircraft associated with this Air Event.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def Tankers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirEvent_Abridged
    def TankersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirEvent_Abridged
    def TankersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # Collection of receiver aircraft associated with this Air Event.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def Receivers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirEvent_Abridged
    def ReceiversLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirEvent_Abridged
    def ReceiversIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # Collection of remarks associated with this Air Event.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def Remarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirEvent_Abridged
    def RemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirEvent_Abridged
    def RemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirEvent_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirEvent_Abridged
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirEvent_Abridged
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirEvent_Abridged
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirEvent_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirEvent_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirEvent_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirEvent_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AirEvent_AbridgedStart(builder):
    builder.StartObject(44)

def Start(builder):
    AirEvent_AbridgedStart(builder)

def AirEvent_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirEvent_AbridgedAddId(builder, id)

def AirEvent_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirEvent_AbridgedAddClassificationMarking(builder, classificationMarking)

def AirEvent_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AirEvent_AbridgedAddType(builder, type)

def AirEvent_AbridgedAddIdSortie(builder, idSortie):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idSortie), 0)

def AddIdSortie(builder, idSortie):
    AirEvent_AbridgedAddIdSortie(builder, idSortie)

def AirEvent_AbridgedAddIdMission(builder, idMission):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idMission), 0)

def AddIdMission(builder, idMission):
    AirEvent_AbridgedAddIdMission(builder, idMission)

def AirEvent_AbridgedAddExternalAirEventId(builder, externalAirEventId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(externalAirEventId), 0)

def AddExternalAirEventId(builder, externalAirEventId):
    AirEvent_AbridgedAddExternalAirEventId(builder, externalAirEventId)

def AirEvent_AbridgedAddLegNum(builder, legNum):
    builder.PrependInt32Slot(6, legNum, 0)

def AddLegNum(builder, legNum):
    AirEvent_AbridgedAddLegNum(builder, legNum)

def AirEvent_AbridgedAddLocation(builder, location):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)

def AddLocation(builder, location):
    AirEvent_AbridgedAddLocation(builder, location)

def AirEvent_AbridgedAddArrPurpose(builder, arrPurpose):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(arrPurpose), 0)

def AddArrPurpose(builder, arrPurpose):
    AirEvent_AbridgedAddArrPurpose(builder, arrPurpose)

def AirEvent_AbridgedAddPlannedArrTime(builder, plannedArrTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(plannedArrTime), 0)

def AddPlannedArrTime(builder, plannedArrTime):
    AirEvent_AbridgedAddPlannedArrTime(builder, plannedArrTime)

def AirEvent_AbridgedAddEstArrTime(builder, estArrTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(estArrTime), 0)

def AddEstArrTime(builder, estArrTime):
    AirEvent_AbridgedAddEstArrTime(builder, estArrTime)

def AirEvent_AbridgedAddActualArrTime(builder, actualArrTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(actualArrTime), 0)

def AddActualArrTime(builder, actualArrTime):
    AirEvent_AbridgedAddActualArrTime(builder, actualArrTime)

def AirEvent_AbridgedAddDepPurpose(builder, depPurpose):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(depPurpose), 0)

def AddDepPurpose(builder, depPurpose):
    AirEvent_AbridgedAddDepPurpose(builder, depPurpose)

def AirEvent_AbridgedAddPlannedDepTime(builder, plannedDepTime):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(plannedDepTime), 0)

def AddPlannedDepTime(builder, plannedDepTime):
    AirEvent_AbridgedAddPlannedDepTime(builder, plannedDepTime)

def AirEvent_AbridgedAddEstDepTime(builder, estDepTime):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(estDepTime), 0)

def AddEstDepTime(builder, estDepTime):
    AirEvent_AbridgedAddEstDepTime(builder, estDepTime)

def AirEvent_AbridgedAddActualDepTime(builder, actualDepTime):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(actualDepTime), 0)

def AddActualDepTime(builder, actualDepTime):
    AirEvent_AbridgedAddActualDepTime(builder, actualDepTime)

def AirEvent_AbridgedAddExternalArtrackId(builder, externalArtrackId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(externalArtrackId), 0)

def AddExternalArtrackId(builder, externalArtrackId):
    AirEvent_AbridgedAddExternalArtrackId(builder, externalArtrackId)

def AirEvent_AbridgedAddArTrackId(builder, arTrackId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(arTrackId), 0)

def AddArTrackId(builder, arTrackId):
    AirEvent_AbridgedAddArTrackId(builder, arTrackId)

def AirEvent_AbridgedAddArTrackName(builder, arTrackName):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(arTrackName), 0)

def AddArTrackName(builder, arTrackName):
    AirEvent_AbridgedAddArTrackName(builder, arTrackName)

def AirEvent_AbridgedAddRzct(builder, rzct):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(rzct), 0)

def AddRzct(builder, rzct):
    AirEvent_AbridgedAddRzct(builder, rzct)

def AirEvent_AbridgedAddArct(builder, arct):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(arct), 0)

def AddArct(builder, arct):
    AirEvent_AbridgedAddArct(builder, arct)

def AirEvent_AbridgedAddBaseAlt(builder, baseAlt):
    builder.PrependFloat64Slot(21, baseAlt, 0.0)

def AddBaseAlt(builder, baseAlt):
    AirEvent_AbridgedAddBaseAlt(builder, baseAlt)

def AirEvent_AbridgedAddPriority(builder, priority):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(priority), 0)

def AddPriority(builder, priority):
    AirEvent_AbridgedAddPriority(builder, priority)

def AirEvent_AbridgedAddTrackTime(builder, trackTime):
    builder.PrependFloat64Slot(23, trackTime, 0.0)

def AddTrackTime(builder, trackTime):
    AirEvent_AbridgedAddTrackTime(builder, trackTime)

def AirEvent_AbridgedAddStatusCode(builder, statusCode):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(statusCode), 0)

def AddStatusCode(builder, statusCode):
    AirEvent_AbridgedAddStatusCode(builder, statusCode)

def AirEvent_AbridgedAddRzPoint(builder, rzPoint):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(rzPoint), 0)

def AddRzPoint(builder, rzPoint):
    AirEvent_AbridgedAddRzPoint(builder, rzPoint)

def AirEvent_AbridgedAddRzType(builder, rzType):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(rzType), 0)

def AddRzType(builder, rzType):
    AirEvent_AbridgedAddRzType(builder, rzType)

def AirEvent_AbridgedAddArEventType(builder, arEventType):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(arEventType), 0)

def AddArEventType(builder, arEventType):
    AirEvent_AbridgedAddArEventType(builder, arEventType)

def AirEvent_AbridgedAddNumTankers(builder, numTankers):
    builder.PrependInt32Slot(28, numTankers, 0)

def AddNumTankers(builder, numTankers):
    AirEvent_AbridgedAddNumTankers(builder, numTankers)

def AirEvent_AbridgedAddRevTrack(builder, revTrack):
    builder.PrependBoolSlot(29, revTrack, 0)

def AddRevTrack(builder, revTrack):
    AirEvent_AbridgedAddRevTrack(builder, revTrack)

def AirEvent_AbridgedAddShortTrack(builder, shortTrack):
    builder.PrependBoolSlot(30, shortTrack, 0)

def AddShortTrack(builder, shortTrack):
    AirEvent_AbridgedAddShortTrack(builder, shortTrack)

def AirEvent_AbridgedAddCancelled(builder, cancelled):
    builder.PrependBoolSlot(31, cancelled, 0)

def AddCancelled(builder, cancelled):
    AirEvent_AbridgedAddCancelled(builder, cancelled)

def AirEvent_AbridgedAddTankers(builder, tankers):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(tankers), 0)

def AddTankers(builder, tankers):
    AirEvent_AbridgedAddTankers(builder, tankers)

def AirEvent_AbridgedStartTankersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTankersVector(builder, numElems):
    return AirEvent_AbridgedStartTankersVector(builder, numElems)

def AirEvent_AbridgedAddReceivers(builder, receivers):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(receivers), 0)

def AddReceivers(builder, receivers):
    AirEvent_AbridgedAddReceivers(builder, receivers)

def AirEvent_AbridgedStartReceiversVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReceiversVector(builder, numElems):
    return AirEvent_AbridgedStartReceiversVector(builder, numElems)

def AirEvent_AbridgedAddRemarks(builder, remarks):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(remarks), 0)

def AddRemarks(builder, remarks):
    AirEvent_AbridgedAddRemarks(builder, remarks)

def AirEvent_AbridgedStartRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRemarksVector(builder, numElems):
    return AirEvent_AbridgedStartRemarksVector(builder, numElems)

def AirEvent_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirEvent_AbridgedAddCreatedAt(builder, createdAt)

def AirEvent_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirEvent_AbridgedAddCreatedBy(builder, createdBy)

def AirEvent_AbridgedAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AirEvent_AbridgedAddUpdatedAt(builder, updatedAt)

def AirEvent_AbridgedAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AirEvent_AbridgedAddUpdatedBy(builder, updatedBy)

def AirEvent_AbridgedAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirEvent_AbridgedAddSourceDl(builder, sourceDl)

def AirEvent_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirEvent_AbridgedAddSource(builder, source)

def AirEvent_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirEvent_AbridgedAddOrigin(builder, origin)

def AirEvent_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirEvent_AbridgedAddOrigNetwork(builder, origNetwork)

def AirEvent_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(43, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirEvent_AbridgedAddDataMode(builder, dataMode)

def AirEvent_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirEvent_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class AirEvent_AbridgedT(object):

    # AirEvent_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.idSortie = None  # type: str
        self.idMission = None  # type: str
        self.externalAirEventId = None  # type: str
        self.legNum = 0  # type: int
        self.location = None  # type: str
        self.arrPurpose = None  # type: str
        self.plannedArrTime = None  # type: str
        self.estArrTime = None  # type: str
        self.actualArrTime = None  # type: str
        self.depPurpose = None  # type: str
        self.plannedDepTime = None  # type: str
        self.estDepTime = None  # type: str
        self.actualDepTime = None  # type: str
        self.externalArtrackId = None  # type: str
        self.arTrackId = None  # type: str
        self.arTrackName = None  # type: str
        self.rzct = None  # type: str
        self.arct = None  # type: str
        self.baseAlt = 0.0  # type: float
        self.priority = None  # type: str
        self.trackTime = 0.0  # type: float
        self.statusCode = None  # type: str
        self.rzPoint = None  # type: str
        self.rzType = None  # type: str
        self.arEventType = None  # type: str
        self.numTankers = 0  # type: int
        self.revTrack = False  # type: bool
        self.shortTrack = False  # type: bool
        self.cancelled = False  # type: bool
        self.tankers = None  # type: List[str]
        self.receivers = None  # type: List[str]
        self.remarks = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airEventAbridged = AirEvent_Abridged()
        airEventAbridged.Init(buf, pos)
        return cls.InitFromObj(airEventAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airEventAbridged):
        x = AirEvent_AbridgedT()
        x._UnPack(airEventAbridged)
        return x

    # AirEvent_AbridgedT
    def _UnPack(self, airEventAbridged):
        if airEventAbridged is None:
            return
        self.id = airEventAbridged.Id()
        self.classificationMarking = airEventAbridged.ClassificationMarking()
        self.type = airEventAbridged.Type()
        self.idSortie = airEventAbridged.IdSortie()
        self.idMission = airEventAbridged.IdMission()
        self.externalAirEventId = airEventAbridged.ExternalAirEventId()
        self.legNum = airEventAbridged.LegNum()
        self.location = airEventAbridged.Location()
        self.arrPurpose = airEventAbridged.ArrPurpose()
        self.plannedArrTime = airEventAbridged.PlannedArrTime()
        self.estArrTime = airEventAbridged.EstArrTime()
        self.actualArrTime = airEventAbridged.ActualArrTime()
        self.depPurpose = airEventAbridged.DepPurpose()
        self.plannedDepTime = airEventAbridged.PlannedDepTime()
        self.estDepTime = airEventAbridged.EstDepTime()
        self.actualDepTime = airEventAbridged.ActualDepTime()
        self.externalArtrackId = airEventAbridged.ExternalArtrackId()
        self.arTrackId = airEventAbridged.ArTrackId()
        self.arTrackName = airEventAbridged.ArTrackName()
        self.rzct = airEventAbridged.Rzct()
        self.arct = airEventAbridged.Arct()
        self.baseAlt = airEventAbridged.BaseAlt()
        self.priority = airEventAbridged.Priority()
        self.trackTime = airEventAbridged.TrackTime()
        self.statusCode = airEventAbridged.StatusCode()
        self.rzPoint = airEventAbridged.RzPoint()
        self.rzType = airEventAbridged.RzType()
        self.arEventType = airEventAbridged.ArEventType()
        self.numTankers = airEventAbridged.NumTankers()
        self.revTrack = airEventAbridged.RevTrack()
        self.shortTrack = airEventAbridged.ShortTrack()
        self.cancelled = airEventAbridged.Cancelled()
        if not airEventAbridged.TankersIsNone():
            self.tankers = []
            for i in range(airEventAbridged.TankersLength()):
                self.tankers.append(airEventAbridged.Tankers(i))
        if not airEventAbridged.ReceiversIsNone():
            self.receivers = []
            for i in range(airEventAbridged.ReceiversLength()):
                self.receivers.append(airEventAbridged.Receivers(i))
        if not airEventAbridged.RemarksIsNone():
            self.remarks = []
            for i in range(airEventAbridged.RemarksLength()):
                self.remarks.append(airEventAbridged.Remarks(i))
        self.createdAt = airEventAbridged.CreatedAt()
        self.createdBy = airEventAbridged.CreatedBy()
        self.updatedAt = airEventAbridged.UpdatedAt()
        self.updatedBy = airEventAbridged.UpdatedBy()
        self.sourceDl = airEventAbridged.SourceDl()
        self.source = airEventAbridged.Source()
        self.origin = airEventAbridged.Origin()
        self.origNetwork = airEventAbridged.OrigNetwork()
        self.dataMode = airEventAbridged.DataMode()

    # AirEvent_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.idSortie is not None:
            idSortie = builder.CreateString(self.idSortie)
        if self.idMission is not None:
            idMission = builder.CreateString(self.idMission)
        if self.externalAirEventId is not None:
            externalAirEventId = builder.CreateString(self.externalAirEventId)
        if self.location is not None:
            location = builder.CreateString(self.location)
        if self.arrPurpose is not None:
            arrPurpose = builder.CreateString(self.arrPurpose)
        if self.plannedArrTime is not None:
            plannedArrTime = builder.CreateString(self.plannedArrTime)
        if self.estArrTime is not None:
            estArrTime = builder.CreateString(self.estArrTime)
        if self.actualArrTime is not None:
            actualArrTime = builder.CreateString(self.actualArrTime)
        if self.depPurpose is not None:
            depPurpose = builder.CreateString(self.depPurpose)
        if self.plannedDepTime is not None:
            plannedDepTime = builder.CreateString(self.plannedDepTime)
        if self.estDepTime is not None:
            estDepTime = builder.CreateString(self.estDepTime)
        if self.actualDepTime is not None:
            actualDepTime = builder.CreateString(self.actualDepTime)
        if self.externalArtrackId is not None:
            externalArtrackId = builder.CreateString(self.externalArtrackId)
        if self.arTrackId is not None:
            arTrackId = builder.CreateString(self.arTrackId)
        if self.arTrackName is not None:
            arTrackName = builder.CreateString(self.arTrackName)
        if self.rzct is not None:
            rzct = builder.CreateString(self.rzct)
        if self.arct is not None:
            arct = builder.CreateString(self.arct)
        if self.priority is not None:
            priority = builder.CreateString(self.priority)
        if self.statusCode is not None:
            statusCode = builder.CreateString(self.statusCode)
        if self.rzPoint is not None:
            rzPoint = builder.CreateString(self.rzPoint)
        if self.rzType is not None:
            rzType = builder.CreateString(self.rzType)
        if self.arEventType is not None:
            arEventType = builder.CreateString(self.arEventType)
        if self.tankers is not None:
            tankerslist = []
            for i in range(len(self.tankers)):
                tankerslist.append(builder.CreateString(self.tankers[i]))
            AirEvent_AbridgedStartTankersVector(builder, len(self.tankers))
            for i in reversed(range(len(self.tankers))):
                builder.PrependUOffsetTRelative(tankerslist[i])
            tankers = builder.EndVector()
        if self.receivers is not None:
            receiverslist = []
            for i in range(len(self.receivers)):
                receiverslist.append(builder.CreateString(self.receivers[i]))
            AirEvent_AbridgedStartReceiversVector(builder, len(self.receivers))
            for i in reversed(range(len(self.receivers))):
                builder.PrependUOffsetTRelative(receiverslist[i])
            receivers = builder.EndVector()
        if self.remarks is not None:
            remarkslist = []
            for i in range(len(self.remarks)):
                remarkslist.append(builder.CreateString(self.remarks[i]))
            AirEvent_AbridgedStartRemarksVector(builder, len(self.remarks))
            for i in reversed(range(len(self.remarks))):
                builder.PrependUOffsetTRelative(remarkslist[i])
            remarks = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AirEvent_AbridgedStart(builder)
        if self.id is not None:
            AirEvent_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            AirEvent_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            AirEvent_AbridgedAddType(builder, type)
        if self.idSortie is not None:
            AirEvent_AbridgedAddIdSortie(builder, idSortie)
        if self.idMission is not None:
            AirEvent_AbridgedAddIdMission(builder, idMission)
        if self.externalAirEventId is not None:
            AirEvent_AbridgedAddExternalAirEventId(builder, externalAirEventId)
        AirEvent_AbridgedAddLegNum(builder, self.legNum)
        if self.location is not None:
            AirEvent_AbridgedAddLocation(builder, location)
        if self.arrPurpose is not None:
            AirEvent_AbridgedAddArrPurpose(builder, arrPurpose)
        if self.plannedArrTime is not None:
            AirEvent_AbridgedAddPlannedArrTime(builder, plannedArrTime)
        if self.estArrTime is not None:
            AirEvent_AbridgedAddEstArrTime(builder, estArrTime)
        if self.actualArrTime is not None:
            AirEvent_AbridgedAddActualArrTime(builder, actualArrTime)
        if self.depPurpose is not None:
            AirEvent_AbridgedAddDepPurpose(builder, depPurpose)
        if self.plannedDepTime is not None:
            AirEvent_AbridgedAddPlannedDepTime(builder, plannedDepTime)
        if self.estDepTime is not None:
            AirEvent_AbridgedAddEstDepTime(builder, estDepTime)
        if self.actualDepTime is not None:
            AirEvent_AbridgedAddActualDepTime(builder, actualDepTime)
        if self.externalArtrackId is not None:
            AirEvent_AbridgedAddExternalArtrackId(builder, externalArtrackId)
        if self.arTrackId is not None:
            AirEvent_AbridgedAddArTrackId(builder, arTrackId)
        if self.arTrackName is not None:
            AirEvent_AbridgedAddArTrackName(builder, arTrackName)
        if self.rzct is not None:
            AirEvent_AbridgedAddRzct(builder, rzct)
        if self.arct is not None:
            AirEvent_AbridgedAddArct(builder, arct)
        AirEvent_AbridgedAddBaseAlt(builder, self.baseAlt)
        if self.priority is not None:
            AirEvent_AbridgedAddPriority(builder, priority)
        AirEvent_AbridgedAddTrackTime(builder, self.trackTime)
        if self.statusCode is not None:
            AirEvent_AbridgedAddStatusCode(builder, statusCode)
        if self.rzPoint is not None:
            AirEvent_AbridgedAddRzPoint(builder, rzPoint)
        if self.rzType is not None:
            AirEvent_AbridgedAddRzType(builder, rzType)
        if self.arEventType is not None:
            AirEvent_AbridgedAddArEventType(builder, arEventType)
        AirEvent_AbridgedAddNumTankers(builder, self.numTankers)
        AirEvent_AbridgedAddRevTrack(builder, self.revTrack)
        AirEvent_AbridgedAddShortTrack(builder, self.shortTrack)
        AirEvent_AbridgedAddCancelled(builder, self.cancelled)
        if self.tankers is not None:
            AirEvent_AbridgedAddTankers(builder, tankers)
        if self.receivers is not None:
            AirEvent_AbridgedAddReceivers(builder, receivers)
        if self.remarks is not None:
            AirEvent_AbridgedAddRemarks(builder, remarks)
        if self.createdAt is not None:
            AirEvent_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirEvent_AbridgedAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AirEvent_AbridgedAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AirEvent_AbridgedAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            AirEvent_AbridgedAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirEvent_AbridgedAddSource(builder, source)
        if self.origin is not None:
            AirEvent_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AirEvent_AbridgedAddOrigNetwork(builder, origNetwork)
        AirEvent_AbridgedAddDataMode(builder, self.dataMode)
        airEventAbridged = AirEvent_AbridgedEnd(builder)
        return airEventAbridged
