# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
class Surface_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Surface_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSurface_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Surface_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x55\x52\x46", size_prefixed=size_prefixed)

    # Surface_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
    # Constraints: Minimum length = 1, Maximum length = 36
    # Surface_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Surface_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface name or identifier.
    # Example: /// Example: West lot
    # Constraints: Minimum length = 1, Maximum length = 64
    # Surface_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
    # Example: /// Example: PARKING
    # Constraints: Minimum length = 1, Maximum length = 7
    # Surface_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the site where this surface is located.
    # Example: /// Example: SITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Surface_Abridged
    def IdSite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate site identifier provided by the source.
    # Example: /// Example: ORIG-SITE-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Surface_Abridged
    def AltSiteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this is the primary runway.  Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def Primary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The length of the surface type, in feet.  Applicable for runway and parking surface types.
    # Example: /// Example: 1500
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LengthFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The landing distance available for the runway, in feet.  Applicable for runway surface types only.
    # Example: /// Example: 475
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LdaFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The width of the surface type, in feet.
    # Example: /// Example: 220
    # Constraints: No constraints specified.
    # Surface_Abridged
    def WidthFt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The length of the surface type, in meters.  Applicable for runway and parking surface types.
    # Example: /// Example: 457
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LengthM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The landing distance available for the runway, in meters.  Applicable for runway surface types only.
    # Example: /// Example: 145
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LdaM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The width of the surface type, in meters.
    # Example: /// Example: 67
    # Constraints: No constraints specified.
    # Surface_Abridged
    def WidthM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The surface material (e.g. Asphalt, Concrete, Dirt).
    # Example: /// Example: Concrete
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Abridged
    def Material(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
    # Example: /// Example: GOOD
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Abridged
    def Condition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Raw weight bearing capacity value or pavement strength.
    # Example: /// Example: LCN 42
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Abridged
    def RawWbc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pavement classification number (PCN) and tire pressure code.
    # Example: /// Example: 73RBWT
    # Constraints: Minimum length = 0, Maximum length = 16
    # Surface_Abridged
    def Pcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
    # Example: /// Example: 50
    # Constraints: No constraints specified.
    # Surface_Abridged
    def Lcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 143
    # Constraints: No constraints specified.
    # Surface_Abridged
    def SWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 188
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 195
    # Constraints: No constraints specified.
    # Surface_Abridged
    def StWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 414
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TtWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 416
    # Constraints: No constraints specified.
    # Surface_Abridged
    def DdWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 603
    # Constraints: No constraints specified.
    # Surface_Abridged
    def SbttWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 870
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TdtWtkip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 622
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TrtWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 833
    # Constraints: No constraints specified.
    # Surface_Abridged
    def DdtWtKip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 636
    # Constraints: No constraints specified.
    # Surface_Abridged
    def SWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 836
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 867
    # Constraints: No constraints specified.
    # Surface_Abridged
    def StWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 1842
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 1850
    # Constraints: No constraints specified.
    # Surface_Abridged
    def DdWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 2682
    # Constraints: No constraints specified.
    # Surface_Abridged
    def SbttWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 3870
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TdtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 2767
    # Constraints: No constraints specified.
    # Surface_Abridged
    def TrtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
    # Example: /// Example: 3705
    # Constraints: No constraints specified.
    # Surface_Abridged
    def DdtWtKn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Flag indicating the surface has lighting.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def Lighting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsUnkn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has approach lights. Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsAprch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsVasi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsPapi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsOls(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsReil(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsTdzl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the runway has centerline lights. Applicable for runway surface types only.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def LightsCl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # Surface_Abridged
    def Obstacle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Surface_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Surface_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Surface_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Surface_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Surface_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Surface_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Surface_AbridgedStart(builder):
    builder.StartObject(52)

def Start(builder):
    Surface_AbridgedStart(builder)

def Surface_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Surface_AbridgedAddId(builder, id)

def Surface_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Surface_AbridgedAddClassificationMarking(builder, classificationMarking)

def Surface_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Surface_AbridgedAddName(builder, name)

def Surface_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Surface_AbridgedAddType(builder, type)

def Surface_AbridgedAddIdSite(builder, idSite):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSite), 0)

def AddIdSite(builder, idSite):
    Surface_AbridgedAddIdSite(builder, idSite)

def Surface_AbridgedAddAltSiteId(builder, altSiteId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(altSiteId), 0)

def AddAltSiteId(builder, altSiteId):
    Surface_AbridgedAddAltSiteId(builder, altSiteId)

def Surface_AbridgedAddPrimary(builder, primary):
    builder.PrependBoolSlot(6, primary, 0)

def AddPrimary(builder, primary):
    Surface_AbridgedAddPrimary(builder, primary)

def Surface_AbridgedAddLengthFt(builder, lengthFt):
    builder.PrependInt32Slot(7, lengthFt, 0)

def AddLengthFt(builder, lengthFt):
    Surface_AbridgedAddLengthFt(builder, lengthFt)

def Surface_AbridgedAddLdaFt(builder, ldaFt):
    builder.PrependInt32Slot(8, ldaFt, 0)

def AddLdaFt(builder, ldaFt):
    Surface_AbridgedAddLdaFt(builder, ldaFt)

def Surface_AbridgedAddWidthFt(builder, widthFt):
    builder.PrependInt32Slot(9, widthFt, 0)

def AddWidthFt(builder, widthFt):
    Surface_AbridgedAddWidthFt(builder, widthFt)

def Surface_AbridgedAddLengthM(builder, lengthM):
    builder.PrependInt32Slot(10, lengthM, 0)

def AddLengthM(builder, lengthM):
    Surface_AbridgedAddLengthM(builder, lengthM)

def Surface_AbridgedAddLdaM(builder, ldaM):
    builder.PrependInt32Slot(11, ldaM, 0)

def AddLdaM(builder, ldaM):
    Surface_AbridgedAddLdaM(builder, ldaM)

def Surface_AbridgedAddWidthM(builder, widthM):
    builder.PrependInt32Slot(12, widthM, 0)

def AddWidthM(builder, widthM):
    Surface_AbridgedAddWidthM(builder, widthM)

def Surface_AbridgedAddMaterial(builder, material):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(material), 0)

def AddMaterial(builder, material):
    Surface_AbridgedAddMaterial(builder, material)

def Surface_AbridgedAddCondition(builder, condition):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(condition), 0)

def AddCondition(builder, condition):
    Surface_AbridgedAddCondition(builder, condition)

def Surface_AbridgedAddRawWbc(builder, rawWbc):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(rawWbc), 0)

def AddRawWbc(builder, rawWbc):
    Surface_AbridgedAddRawWbc(builder, rawWbc)

def Surface_AbridgedAddPcn(builder, pcn):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(pcn), 0)

def AddPcn(builder, pcn):
    Surface_AbridgedAddPcn(builder, pcn)

def Surface_AbridgedAddLcn(builder, lcn):
    builder.PrependInt32Slot(17, lcn, 0)

def AddLcn(builder, lcn):
    Surface_AbridgedAddLcn(builder, lcn)

def Surface_AbridgedAddSWtKip(builder, sWtKip):
    builder.PrependInt32Slot(18, sWtKip, 0)

def AddSWtKip(builder, sWtKip):
    Surface_AbridgedAddSWtKip(builder, sWtKip)

def Surface_AbridgedAddTWtKip(builder, tWtKip):
    builder.PrependInt32Slot(19, tWtKip, 0)

def AddTWtKip(builder, tWtKip):
    Surface_AbridgedAddTWtKip(builder, tWtKip)

def Surface_AbridgedAddStWtKip(builder, stWtKip):
    builder.PrependInt32Slot(20, stWtKip, 0)

def AddStWtKip(builder, stWtKip):
    Surface_AbridgedAddStWtKip(builder, stWtKip)

def Surface_AbridgedAddTtWtKip(builder, ttWtKip):
    builder.PrependInt32Slot(21, ttWtKip, 0)

def AddTtWtKip(builder, ttWtKip):
    Surface_AbridgedAddTtWtKip(builder, ttWtKip)

def Surface_AbridgedAddDdWtKip(builder, ddWtKip):
    builder.PrependInt32Slot(22, ddWtKip, 0)

def AddDdWtKip(builder, ddWtKip):
    Surface_AbridgedAddDdWtKip(builder, ddWtKip)

def Surface_AbridgedAddSbttWtKip(builder, sbttWtKip):
    builder.PrependInt32Slot(23, sbttWtKip, 0)

def AddSbttWtKip(builder, sbttWtKip):
    Surface_AbridgedAddSbttWtKip(builder, sbttWtKip)

def Surface_AbridgedAddTdtWtkip(builder, tdtWtkip):
    builder.PrependInt32Slot(24, tdtWtkip, 0)

def AddTdtWtkip(builder, tdtWtkip):
    Surface_AbridgedAddTdtWtkip(builder, tdtWtkip)

def Surface_AbridgedAddTrtWtKip(builder, trtWtKip):
    builder.PrependInt32Slot(25, trtWtKip, 0)

def AddTrtWtKip(builder, trtWtKip):
    Surface_AbridgedAddTrtWtKip(builder, trtWtKip)

def Surface_AbridgedAddDdtWtKip(builder, ddtWtKip):
    builder.PrependInt32Slot(26, ddtWtKip, 0)

def AddDdtWtKip(builder, ddtWtKip):
    Surface_AbridgedAddDdtWtKip(builder, ddtWtKip)

def Surface_AbridgedAddSWtKn(builder, sWtKn):
    builder.PrependInt32Slot(27, sWtKn, 0)

def AddSWtKn(builder, sWtKn):
    Surface_AbridgedAddSWtKn(builder, sWtKn)

def Surface_AbridgedAddTWtKn(builder, tWtKn):
    builder.PrependInt32Slot(28, tWtKn, 0)

def AddTWtKn(builder, tWtKn):
    Surface_AbridgedAddTWtKn(builder, tWtKn)

def Surface_AbridgedAddStWtKn(builder, stWtKn):
    builder.PrependInt32Slot(29, stWtKn, 0)

def AddStWtKn(builder, stWtKn):
    Surface_AbridgedAddStWtKn(builder, stWtKn)

def Surface_AbridgedAddTtWtKn(builder, ttWtKn):
    builder.PrependInt32Slot(30, ttWtKn, 0)

def AddTtWtKn(builder, ttWtKn):
    Surface_AbridgedAddTtWtKn(builder, ttWtKn)

def Surface_AbridgedAddDdWtKn(builder, ddWtKn):
    builder.PrependInt32Slot(31, ddWtKn, 0)

def AddDdWtKn(builder, ddWtKn):
    Surface_AbridgedAddDdWtKn(builder, ddWtKn)

def Surface_AbridgedAddSbttWtKn(builder, sbttWtKn):
    builder.PrependInt32Slot(32, sbttWtKn, 0)

def AddSbttWtKn(builder, sbttWtKn):
    Surface_AbridgedAddSbttWtKn(builder, sbttWtKn)

def Surface_AbridgedAddTdtWtKn(builder, tdtWtKn):
    builder.PrependInt32Slot(33, tdtWtKn, 0)

def AddTdtWtKn(builder, tdtWtKn):
    Surface_AbridgedAddTdtWtKn(builder, tdtWtKn)

def Surface_AbridgedAddTrtWtKn(builder, trtWtKn):
    builder.PrependInt32Slot(34, trtWtKn, 0)

def AddTrtWtKn(builder, trtWtKn):
    Surface_AbridgedAddTrtWtKn(builder, trtWtKn)

def Surface_AbridgedAddDdtWtKn(builder, ddtWtKn):
    builder.PrependInt32Slot(35, ddtWtKn, 0)

def AddDdtWtKn(builder, ddtWtKn):
    Surface_AbridgedAddDdtWtKn(builder, ddtWtKn)

def Surface_AbridgedAddLighting(builder, lighting):
    builder.PrependBoolSlot(36, lighting, 0)

def AddLighting(builder, lighting):
    Surface_AbridgedAddLighting(builder, lighting)

def Surface_AbridgedAddLightsUnkn(builder, lightsUnkn):
    builder.PrependBoolSlot(37, lightsUnkn, 0)

def AddLightsUnkn(builder, lightsUnkn):
    Surface_AbridgedAddLightsUnkn(builder, lightsUnkn)

def Surface_AbridgedAddLightsAprch(builder, lightsAprch):
    builder.PrependBoolSlot(38, lightsAprch, 0)

def AddLightsAprch(builder, lightsAprch):
    Surface_AbridgedAddLightsAprch(builder, lightsAprch)

def Surface_AbridgedAddLightsVasi(builder, lightsVasi):
    builder.PrependBoolSlot(39, lightsVasi, 0)

def AddLightsVasi(builder, lightsVasi):
    Surface_AbridgedAddLightsVasi(builder, lightsVasi)

def Surface_AbridgedAddLightsPapi(builder, lightsPapi):
    builder.PrependBoolSlot(40, lightsPapi, 0)

def AddLightsPapi(builder, lightsPapi):
    Surface_AbridgedAddLightsPapi(builder, lightsPapi)

def Surface_AbridgedAddLightsOls(builder, lightsOls):
    builder.PrependBoolSlot(41, lightsOls, 0)

def AddLightsOls(builder, lightsOls):
    Surface_AbridgedAddLightsOls(builder, lightsOls)

def Surface_AbridgedAddLightsReil(builder, lightsReil):
    builder.PrependBoolSlot(42, lightsReil, 0)

def AddLightsReil(builder, lightsReil):
    Surface_AbridgedAddLightsReil(builder, lightsReil)

def Surface_AbridgedAddLightsTdzl(builder, lightsTdzl):
    builder.PrependBoolSlot(43, lightsTdzl, 0)

def AddLightsTdzl(builder, lightsTdzl):
    Surface_AbridgedAddLightsTdzl(builder, lightsTdzl)

def Surface_AbridgedAddLightsCl(builder, lightsCl):
    builder.PrependBoolSlot(44, lightsCl, 0)

def AddLightsCl(builder, lightsCl):
    Surface_AbridgedAddLightsCl(builder, lightsCl)

def Surface_AbridgedAddObstacle(builder, obstacle):
    builder.PrependBoolSlot(45, obstacle, 0)

def AddObstacle(builder, obstacle):
    Surface_AbridgedAddObstacle(builder, obstacle)

def Surface_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Surface_AbridgedAddCreatedAt(builder, createdAt)

def Surface_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Surface_AbridgedAddCreatedBy(builder, createdBy)

def Surface_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Surface_AbridgedAddSource(builder, source)

def Surface_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Surface_AbridgedAddOrigin(builder, origin)

def Surface_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Surface_AbridgedAddOrigNetwork(builder, origNetwork)

def Surface_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(51, dataMode, 0)

def AddDataMode(builder, dataMode):
    Surface_AbridgedAddDataMode(builder, dataMode)

def Surface_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Surface_AbridgedEnd(builder)


class Surface_AbridgedT(object):

    # Surface_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.idSite = None  # type: str
        self.altSiteId = None  # type: str
        self.primary = False  # type: bool
        self.lengthFt = 0  # type: int
        self.ldaFt = 0  # type: int
        self.widthFt = 0  # type: int
        self.lengthM = 0  # type: int
        self.ldaM = 0  # type: int
        self.widthM = 0  # type: int
        self.material = None  # type: str
        self.condition = None  # type: str
        self.rawWbc = None  # type: str
        self.pcn = None  # type: str
        self.lcn = 0  # type: int
        self.sWtKip = 0  # type: int
        self.tWtKip = 0  # type: int
        self.stWtKip = 0  # type: int
        self.ttWtKip = 0  # type: int
        self.ddWtKip = 0  # type: int
        self.sbttWtKip = 0  # type: int
        self.tdtWtkip = 0  # type: int
        self.trtWtKip = 0  # type: int
        self.ddtWtKip = 0  # type: int
        self.sWtKn = 0  # type: int
        self.tWtKn = 0  # type: int
        self.stWtKn = 0  # type: int
        self.ttWtKn = 0  # type: int
        self.ddWtKn = 0  # type: int
        self.sbttWtKn = 0  # type: int
        self.tdtWtKn = 0  # type: int
        self.trtWtKn = 0  # type: int
        self.ddtWtKn = 0  # type: int
        self.lighting = False  # type: bool
        self.lightsUnkn = False  # type: bool
        self.lightsAprch = False  # type: bool
        self.lightsVasi = False  # type: bool
        self.lightsPapi = False  # type: bool
        self.lightsOls = False  # type: bool
        self.lightsReil = False  # type: bool
        self.lightsTdzl = False  # type: bool
        self.lightsCl = False  # type: bool
        self.obstacle = False  # type: bool
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        surfaceAbridged = Surface_Abridged()
        surfaceAbridged.Init(buf, pos)
        return cls.InitFromObj(surfaceAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, surfaceAbridged):
        x = Surface_AbridgedT()
        x._UnPack(surfaceAbridged)
        return x

    # Surface_AbridgedT
    def _UnPack(self, surfaceAbridged):
        if surfaceAbridged is None:
            return
        self.id = surfaceAbridged.Id()
        self.classificationMarking = surfaceAbridged.ClassificationMarking()
        self.name = surfaceAbridged.Name()
        self.type = surfaceAbridged.Type()
        self.idSite = surfaceAbridged.IdSite()
        self.altSiteId = surfaceAbridged.AltSiteId()
        self.primary = surfaceAbridged.Primary()
        self.lengthFt = surfaceAbridged.LengthFt()
        self.ldaFt = surfaceAbridged.LdaFt()
        self.widthFt = surfaceAbridged.WidthFt()
        self.lengthM = surfaceAbridged.LengthM()
        self.ldaM = surfaceAbridged.LdaM()
        self.widthM = surfaceAbridged.WidthM()
        self.material = surfaceAbridged.Material()
        self.condition = surfaceAbridged.Condition()
        self.rawWbc = surfaceAbridged.RawWbc()
        self.pcn = surfaceAbridged.Pcn()
        self.lcn = surfaceAbridged.Lcn()
        self.sWtKip = surfaceAbridged.SWtKip()
        self.tWtKip = surfaceAbridged.TWtKip()
        self.stWtKip = surfaceAbridged.StWtKip()
        self.ttWtKip = surfaceAbridged.TtWtKip()
        self.ddWtKip = surfaceAbridged.DdWtKip()
        self.sbttWtKip = surfaceAbridged.SbttWtKip()
        self.tdtWtkip = surfaceAbridged.TdtWtkip()
        self.trtWtKip = surfaceAbridged.TrtWtKip()
        self.ddtWtKip = surfaceAbridged.DdtWtKip()
        self.sWtKn = surfaceAbridged.SWtKn()
        self.tWtKn = surfaceAbridged.TWtKn()
        self.stWtKn = surfaceAbridged.StWtKn()
        self.ttWtKn = surfaceAbridged.TtWtKn()
        self.ddWtKn = surfaceAbridged.DdWtKn()
        self.sbttWtKn = surfaceAbridged.SbttWtKn()
        self.tdtWtKn = surfaceAbridged.TdtWtKn()
        self.trtWtKn = surfaceAbridged.TrtWtKn()
        self.ddtWtKn = surfaceAbridged.DdtWtKn()
        self.lighting = surfaceAbridged.Lighting()
        self.lightsUnkn = surfaceAbridged.LightsUnkn()
        self.lightsAprch = surfaceAbridged.LightsAprch()
        self.lightsVasi = surfaceAbridged.LightsVasi()
        self.lightsPapi = surfaceAbridged.LightsPapi()
        self.lightsOls = surfaceAbridged.LightsOls()
        self.lightsReil = surfaceAbridged.LightsReil()
        self.lightsTdzl = surfaceAbridged.LightsTdzl()
        self.lightsCl = surfaceAbridged.LightsCl()
        self.obstacle = surfaceAbridged.Obstacle()
        self.createdAt = surfaceAbridged.CreatedAt()
        self.createdBy = surfaceAbridged.CreatedBy()
        self.source = surfaceAbridged.Source()
        self.origin = surfaceAbridged.Origin()
        self.origNetwork = surfaceAbridged.OrigNetwork()
        self.dataMode = surfaceAbridged.DataMode()

    # Surface_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.idSite is not None:
            idSite = builder.CreateString(self.idSite)
        if self.altSiteId is not None:
            altSiteId = builder.CreateString(self.altSiteId)
        if self.material is not None:
            material = builder.CreateString(self.material)
        if self.condition is not None:
            condition = builder.CreateString(self.condition)
        if self.rawWbc is not None:
            rawWbc = builder.CreateString(self.rawWbc)
        if self.pcn is not None:
            pcn = builder.CreateString(self.pcn)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Surface_AbridgedStart(builder)
        if self.id is not None:
            Surface_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Surface_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            Surface_AbridgedAddName(builder, name)
        if self.type is not None:
            Surface_AbridgedAddType(builder, type)
        if self.idSite is not None:
            Surface_AbridgedAddIdSite(builder, idSite)
        if self.altSiteId is not None:
            Surface_AbridgedAddAltSiteId(builder, altSiteId)
        Surface_AbridgedAddPrimary(builder, self.primary)
        Surface_AbridgedAddLengthFt(builder, self.lengthFt)
        Surface_AbridgedAddLdaFt(builder, self.ldaFt)
        Surface_AbridgedAddWidthFt(builder, self.widthFt)
        Surface_AbridgedAddLengthM(builder, self.lengthM)
        Surface_AbridgedAddLdaM(builder, self.ldaM)
        Surface_AbridgedAddWidthM(builder, self.widthM)
        if self.material is not None:
            Surface_AbridgedAddMaterial(builder, material)
        if self.condition is not None:
            Surface_AbridgedAddCondition(builder, condition)
        if self.rawWbc is not None:
            Surface_AbridgedAddRawWbc(builder, rawWbc)
        if self.pcn is not None:
            Surface_AbridgedAddPcn(builder, pcn)
        Surface_AbridgedAddLcn(builder, self.lcn)
        Surface_AbridgedAddSWtKip(builder, self.sWtKip)
        Surface_AbridgedAddTWtKip(builder, self.tWtKip)
        Surface_AbridgedAddStWtKip(builder, self.stWtKip)
        Surface_AbridgedAddTtWtKip(builder, self.ttWtKip)
        Surface_AbridgedAddDdWtKip(builder, self.ddWtKip)
        Surface_AbridgedAddSbttWtKip(builder, self.sbttWtKip)
        Surface_AbridgedAddTdtWtkip(builder, self.tdtWtkip)
        Surface_AbridgedAddTrtWtKip(builder, self.trtWtKip)
        Surface_AbridgedAddDdtWtKip(builder, self.ddtWtKip)
        Surface_AbridgedAddSWtKn(builder, self.sWtKn)
        Surface_AbridgedAddTWtKn(builder, self.tWtKn)
        Surface_AbridgedAddStWtKn(builder, self.stWtKn)
        Surface_AbridgedAddTtWtKn(builder, self.ttWtKn)
        Surface_AbridgedAddDdWtKn(builder, self.ddWtKn)
        Surface_AbridgedAddSbttWtKn(builder, self.sbttWtKn)
        Surface_AbridgedAddTdtWtKn(builder, self.tdtWtKn)
        Surface_AbridgedAddTrtWtKn(builder, self.trtWtKn)
        Surface_AbridgedAddDdtWtKn(builder, self.ddtWtKn)
        Surface_AbridgedAddLighting(builder, self.lighting)
        Surface_AbridgedAddLightsUnkn(builder, self.lightsUnkn)
        Surface_AbridgedAddLightsAprch(builder, self.lightsAprch)
        Surface_AbridgedAddLightsVasi(builder, self.lightsVasi)
        Surface_AbridgedAddLightsPapi(builder, self.lightsPapi)
        Surface_AbridgedAddLightsOls(builder, self.lightsOls)
        Surface_AbridgedAddLightsReil(builder, self.lightsReil)
        Surface_AbridgedAddLightsTdzl(builder, self.lightsTdzl)
        Surface_AbridgedAddLightsCl(builder, self.lightsCl)
        Surface_AbridgedAddObstacle(builder, self.obstacle)
        if self.createdAt is not None:
            Surface_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Surface_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Surface_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Surface_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Surface_AbridgedAddOrigNetwork(builder, origNetwork)
        Surface_AbridgedAddDataMode(builder, self.dataMode)
        surfaceAbridged = Surface_AbridgedEnd(builder)
        return surfaceAbridged
