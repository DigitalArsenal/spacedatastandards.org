# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
class Mti_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mti_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMti_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Mti_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x54\x49\x49", size_prefixed=size_prefixed)

    # Mti_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Mti_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Mti_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Mti_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MTI-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Mti_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Mti_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Mti_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Mti_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Nationality of the platform providing the data.
    # Example: /// Example: NATIONALITY
    # Constraints: Minimum length = 0, Maximum length = 32
    # Mti_Ingest
    def P3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Control / handling marking.
    # Example: /// Example: MARKING
    # Constraints: Minimum length = 0, Maximum length = 128
    # Mti_Ingest
    def P6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Data record exercise indicator.
    # Example: /// Example: INDICATOR
    # Constraints: Minimum length = 0, Maximum length = 32
    # Mti_Ingest
    def P7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
    # Example: /// Example: P8-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Mti_Ingest
    def P8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
    # Example: /// Example: 45
    # Constraints: No constraints specified.
    # Mti_Ingest
    def P9(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: 45
    # Constraints: No constraints specified.
    # Mti_Ingest
    def P10(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def Missions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def MissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def MissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def Dwells(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def DwellsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def DwellsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def Hrrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def HrrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def HrrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def JobDefs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def JobDefsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def JobDefsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def FreeTexts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def FreeTextsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def FreeTextsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def PlatformLocs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def PlatformLocsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def PlatformLocsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Mti_Ingest
    def JobRequests(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Mti_Ingest
    def JobRequestsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mti_Ingest
    def JobRequestsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Mti_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Mti_IngestStart(builder):
    builder.StartObject(21)

def Start(builder):
    Mti_IngestStart(builder)

def Mti_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Mti_IngestAddClassificationMarking(builder, classificationMarking)

def Mti_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Mti_IngestAddSource(builder, source)

def Mti_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Mti_IngestAddOrigin(builder, origin)

def Mti_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Mti_IngestAddId(builder, id)

def Mti_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(4, dataMode, 0)

def AddDataMode(builder, dataMode):
    Mti_IngestAddDataMode(builder, dataMode)

def Mti_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Mti_IngestAddCreatedBy(builder, createdBy)

def Mti_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Mti_IngestAddCreatedAt(builder, createdAt)

def Mti_IngestAddP3(builder, p3):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(p3), 0)

def AddP3(builder, p3):
    Mti_IngestAddP3(builder, p3)

def Mti_IngestAddP6(builder, p6):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(p6), 0)

def AddP6(builder, p6):
    Mti_IngestAddP6(builder, p6)

def Mti_IngestAddP7(builder, p7):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(p7), 0)

def AddP7(builder, p7):
    Mti_IngestAddP7(builder, p7)

def Mti_IngestAddP8(builder, p8):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(p8), 0)

def AddP8(builder, p8):
    Mti_IngestAddP8(builder, p8)

def Mti_IngestAddP9(builder, p9):
    builder.PrependInt32Slot(11, p9, 0)

def AddP9(builder, p9):
    Mti_IngestAddP9(builder, p9)

def Mti_IngestAddP10(builder, p10):
    builder.PrependInt32Slot(12, p10, 0)

def AddP10(builder, p10):
    Mti_IngestAddP10(builder, p10)

def Mti_IngestAddMissions(builder, missions):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(missions), 0)

def AddMissions(builder, missions):
    Mti_IngestAddMissions(builder, missions)

def Mti_IngestStartMissionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMissionsVector(builder, numElems):
    return Mti_IngestStartMissionsVector(builder, numElems)

def Mti_IngestAddDwells(builder, dwells):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(dwells), 0)

def AddDwells(builder, dwells):
    Mti_IngestAddDwells(builder, dwells)

def Mti_IngestStartDwellsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDwellsVector(builder, numElems):
    return Mti_IngestStartDwellsVector(builder, numElems)

def Mti_IngestAddHrrs(builder, hrrs):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(hrrs), 0)

def AddHrrs(builder, hrrs):
    Mti_IngestAddHrrs(builder, hrrs)

def Mti_IngestStartHrrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHrrsVector(builder, numElems):
    return Mti_IngestStartHrrsVector(builder, numElems)

def Mti_IngestAddJobDefs(builder, jobDefs):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(jobDefs), 0)

def AddJobDefs(builder, jobDefs):
    Mti_IngestAddJobDefs(builder, jobDefs)

def Mti_IngestStartJobDefsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartJobDefsVector(builder, numElems):
    return Mti_IngestStartJobDefsVector(builder, numElems)

def Mti_IngestAddFreeTexts(builder, freeTexts):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(freeTexts), 0)

def AddFreeTexts(builder, freeTexts):
    Mti_IngestAddFreeTexts(builder, freeTexts)

def Mti_IngestStartFreeTextsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFreeTextsVector(builder, numElems):
    return Mti_IngestStartFreeTextsVector(builder, numElems)

def Mti_IngestAddPlatformLocs(builder, platformLocs):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(platformLocs), 0)

def AddPlatformLocs(builder, platformLocs):
    Mti_IngestAddPlatformLocs(builder, platformLocs)

def Mti_IngestStartPlatformLocsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlatformLocsVector(builder, numElems):
    return Mti_IngestStartPlatformLocsVector(builder, numElems)

def Mti_IngestAddJobRequests(builder, jobRequests):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(jobRequests), 0)

def AddJobRequests(builder, jobRequests):
    Mti_IngestAddJobRequests(builder, jobRequests)

def Mti_IngestStartJobRequestsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartJobRequestsVector(builder, numElems):
    return Mti_IngestStartJobRequestsVector(builder, numElems)

def Mti_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Mti_IngestAddOrigNetwork(builder, origNetwork)

def Mti_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Mti_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class Mti_IngestT(object):

    # Mti_IngestT
    def __init__(self):
        self.classificationMarking = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.id = None  # type: str
        self.dataMode = 0  # type: int
        self.createdBy = None  # type: str
        self.createdAt = None  # type: str
        self.p3 = None  # type: str
        self.p6 = None  # type: str
        self.p7 = None  # type: str
        self.p8 = None  # type: str
        self.p9 = 0  # type: int
        self.p10 = 0  # type: int
        self.missions = None  # type: List[str]
        self.dwells = None  # type: List[str]
        self.hrrs = None  # type: List[str]
        self.jobDefs = None  # type: List[str]
        self.freeTexts = None  # type: List[str]
        self.platformLocs = None  # type: List[str]
        self.jobRequests = None  # type: List[str]
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtiIngest = Mti_Ingest()
        mtiIngest.Init(buf, pos)
        return cls.InitFromObj(mtiIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtiIngest):
        x = Mti_IngestT()
        x._UnPack(mtiIngest)
        return x

    # Mti_IngestT
    def _UnPack(self, mtiIngest):
        if mtiIngest is None:
            return
        self.classificationMarking = mtiIngest.ClassificationMarking()
        self.source = mtiIngest.Source()
        self.origin = mtiIngest.Origin()
        self.id = mtiIngest.Id()
        self.dataMode = mtiIngest.DataMode()
        self.createdBy = mtiIngest.CreatedBy()
        self.createdAt = mtiIngest.CreatedAt()
        self.p3 = mtiIngest.P3()
        self.p6 = mtiIngest.P6()
        self.p7 = mtiIngest.P7()
        self.p8 = mtiIngest.P8()
        self.p9 = mtiIngest.P9()
        self.p10 = mtiIngest.P10()
        if not mtiIngest.MissionsIsNone():
            self.missions = []
            for i in range(mtiIngest.MissionsLength()):
                self.missions.append(mtiIngest.Missions(i))
        if not mtiIngest.DwellsIsNone():
            self.dwells = []
            for i in range(mtiIngest.DwellsLength()):
                self.dwells.append(mtiIngest.Dwells(i))
        if not mtiIngest.HrrsIsNone():
            self.hrrs = []
            for i in range(mtiIngest.HrrsLength()):
                self.hrrs.append(mtiIngest.Hrrs(i))
        if not mtiIngest.JobDefsIsNone():
            self.jobDefs = []
            for i in range(mtiIngest.JobDefsLength()):
                self.jobDefs.append(mtiIngest.JobDefs(i))
        if not mtiIngest.FreeTextsIsNone():
            self.freeTexts = []
            for i in range(mtiIngest.FreeTextsLength()):
                self.freeTexts.append(mtiIngest.FreeTexts(i))
        if not mtiIngest.PlatformLocsIsNone():
            self.platformLocs = []
            for i in range(mtiIngest.PlatformLocsLength()):
                self.platformLocs.append(mtiIngest.PlatformLocs(i))
        if not mtiIngest.JobRequestsIsNone():
            self.jobRequests = []
            for i in range(mtiIngest.JobRequestsLength()):
                self.jobRequests.append(mtiIngest.JobRequests(i))
        self.origNetwork = mtiIngest.OrigNetwork()

    # Mti_IngestT
    def Pack(self, builder):
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.p3 is not None:
            p3 = builder.CreateString(self.p3)
        if self.p6 is not None:
            p6 = builder.CreateString(self.p6)
        if self.p7 is not None:
            p7 = builder.CreateString(self.p7)
        if self.p8 is not None:
            p8 = builder.CreateString(self.p8)
        if self.missions is not None:
            missionslist = []
            for i in range(len(self.missions)):
                missionslist.append(builder.CreateString(self.missions[i]))
            Mti_IngestStartMissionsVector(builder, len(self.missions))
            for i in reversed(range(len(self.missions))):
                builder.PrependUOffsetTRelative(missionslist[i])
            missions = builder.EndVector()
        if self.dwells is not None:
            dwellslist = []
            for i in range(len(self.dwells)):
                dwellslist.append(builder.CreateString(self.dwells[i]))
            Mti_IngestStartDwellsVector(builder, len(self.dwells))
            for i in reversed(range(len(self.dwells))):
                builder.PrependUOffsetTRelative(dwellslist[i])
            dwells = builder.EndVector()
        if self.hrrs is not None:
            hrrslist = []
            for i in range(len(self.hrrs)):
                hrrslist.append(builder.CreateString(self.hrrs[i]))
            Mti_IngestStartHrrsVector(builder, len(self.hrrs))
            for i in reversed(range(len(self.hrrs))):
                builder.PrependUOffsetTRelative(hrrslist[i])
            hrrs = builder.EndVector()
        if self.jobDefs is not None:
            jobDefslist = []
            for i in range(len(self.jobDefs)):
                jobDefslist.append(builder.CreateString(self.jobDefs[i]))
            Mti_IngestStartJobDefsVector(builder, len(self.jobDefs))
            for i in reversed(range(len(self.jobDefs))):
                builder.PrependUOffsetTRelative(jobDefslist[i])
            jobDefs = builder.EndVector()
        if self.freeTexts is not None:
            freeTextslist = []
            for i in range(len(self.freeTexts)):
                freeTextslist.append(builder.CreateString(self.freeTexts[i]))
            Mti_IngestStartFreeTextsVector(builder, len(self.freeTexts))
            for i in reversed(range(len(self.freeTexts))):
                builder.PrependUOffsetTRelative(freeTextslist[i])
            freeTexts = builder.EndVector()
        if self.platformLocs is not None:
            platformLocslist = []
            for i in range(len(self.platformLocs)):
                platformLocslist.append(builder.CreateString(self.platformLocs[i]))
            Mti_IngestStartPlatformLocsVector(builder, len(self.platformLocs))
            for i in reversed(range(len(self.platformLocs))):
                builder.PrependUOffsetTRelative(platformLocslist[i])
            platformLocs = builder.EndVector()
        if self.jobRequests is not None:
            jobRequestslist = []
            for i in range(len(self.jobRequests)):
                jobRequestslist.append(builder.CreateString(self.jobRequests[i]))
            Mti_IngestStartJobRequestsVector(builder, len(self.jobRequests))
            for i in reversed(range(len(self.jobRequests))):
                builder.PrependUOffsetTRelative(jobRequestslist[i])
            jobRequests = builder.EndVector()
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Mti_IngestStart(builder)
        if self.classificationMarking is not None:
            Mti_IngestAddClassificationMarking(builder, classificationMarking)
        if self.source is not None:
            Mti_IngestAddSource(builder, source)
        if self.origin is not None:
            Mti_IngestAddOrigin(builder, origin)
        if self.id is not None:
            Mti_IngestAddId(builder, id)
        Mti_IngestAddDataMode(builder, self.dataMode)
        if self.createdBy is not None:
            Mti_IngestAddCreatedBy(builder, createdBy)
        if self.createdAt is not None:
            Mti_IngestAddCreatedAt(builder, createdAt)
        if self.p3 is not None:
            Mti_IngestAddP3(builder, p3)
        if self.p6 is not None:
            Mti_IngestAddP6(builder, p6)
        if self.p7 is not None:
            Mti_IngestAddP7(builder, p7)
        if self.p8 is not None:
            Mti_IngestAddP8(builder, p8)
        Mti_IngestAddP9(builder, self.p9)
        Mti_IngestAddP10(builder, self.p10)
        if self.missions is not None:
            Mti_IngestAddMissions(builder, missions)
        if self.dwells is not None:
            Mti_IngestAddDwells(builder, dwells)
        if self.hrrs is not None:
            Mti_IngestAddHrrs(builder, hrrs)
        if self.jobDefs is not None:
            Mti_IngestAddJobDefs(builder, jobDefs)
        if self.freeTexts is not None:
            Mti_IngestAddFreeTexts(builder, freeTexts)
        if self.platformLocs is not None:
            Mti_IngestAddPlatformLocs(builder, platformLocs)
        if self.jobRequests is not None:
            Mti_IngestAddJobRequests(builder, jobRequests)
        if self.origNetwork is not None:
            Mti_IngestAddOrigNetwork(builder, origNetwork)
        mtiIngest = Mti_IngestEnd(builder)
        return mtiIngest
