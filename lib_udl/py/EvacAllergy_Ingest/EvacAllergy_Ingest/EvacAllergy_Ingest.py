# automatically generated by the FlatBuffers compiler, do not modify

# namespace: EvacAllergy_Ingest

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Allergy information.
class EvacAllergy_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacAllergy_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacAllergy_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EvacAllergy_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
    # Example: PENICILLIN
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacAllergy_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the  patient's allergy information.
    # Example: Comments on the patient's allergies.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacAllergy_Ingest
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacAllergy_IngestStart(builder):
    builder.StartObject(2)

def Start(builder):
    EvacAllergy_IngestStart(builder)

def EvacAllergy_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacAllergy_IngestAddType(builder, type)

def EvacAllergy_IngestAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacAllergy_IngestAddComments(builder, comments)

def EvacAllergy_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacAllergy_IngestEnd(builder)


class EvacAllergy_IngestT(object):

    # EvacAllergy_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacAllergyIngest = EvacAllergy_Ingest()
        evacAllergyIngest.Init(buf, pos)
        return cls.InitFromObj(evacAllergyIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacAllergyIngest):
        x = EvacAllergy_IngestT()
        x._UnPack(evacAllergyIngest)
        return x

    # EvacAllergy_IngestT
    def _UnPack(self, evacAllergyIngest):
        if evacAllergyIngest is None:
            return
        self.type = evacAllergyIngest.Type()
        self.comments = evacAllergyIngest.Comments()

    # EvacAllergy_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacAllergy_IngestStart(builder)
        if self.type is not None:
            EvacAllergy_IngestAddType(builder, type)
        if self.comments is not None:
            EvacAllergy_IngestAddComments(builder, comments)
        evacAllergyIngest = EvacAllergy_IngestEnd(builder)
        return evacAllergyIngest
