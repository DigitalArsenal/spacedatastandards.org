# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
class SolarArrayDetails_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SolarArrayDetails_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSolarArrayDetails_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SolarArrayDetails_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x4F\x4C\x41", size_prefixed=size_prefixed)

    # SolarArrayDetails_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: SOLARARRAYDETAILS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SolarArrayDetails_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent SolarArray.
    # Example: /// Example: SOLARARRAY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # SolarArrayDetails_Ingest
    def IdSolarArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # SolarArrayDetails_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of solar array (e.g. U Shaped).
    # Example: /// Example: U Shaped
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar array technology (e.g. Ga-As).
    # Example: /// Example: Ga-As
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Ingest
    def Technology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar array junction technology (e.g. Triple).
    # Example: /// Example: Triple
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Ingest
    def JunctionTechnology(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization that manufactures the solar array.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # SolarArrayDetails_Ingest
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Solar Array span in meters.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # SolarArrayDetails_Ingest
    def Span(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Solar Array area in square meters.
    # Example: /// Example: 123.4
    # Constraints: No constraints specified.
    # SolarArrayDetails_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Solar array description/notes.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 2147483647
    # SolarArrayDetails_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # SolarArrayDetails_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArrayDetails_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # SolarArrayDetails_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # SolarArrayDetails_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArrayDetails_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # SolarArrayDetails_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # SolarArrayDetails_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SolarArrayDetails_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SolarArrayDetails_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def SolarArrayDetails_IngestStart(builder):
    builder.StartObject(17)

def Start(builder):
    SolarArrayDetails_IngestStart(builder)

def SolarArrayDetails_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    SolarArrayDetails_IngestAddId(builder, id)

def SolarArrayDetails_IngestAddIdSolarArray(builder, idSolarArray):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idSolarArray), 0)

def AddIdSolarArray(builder, idSolarArray):
    SolarArrayDetails_IngestAddIdSolarArray(builder, idSolarArray)

def SolarArrayDetails_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    SolarArrayDetails_IngestAddClassificationMarking(builder, classificationMarking)

def SolarArrayDetails_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    SolarArrayDetails_IngestAddType(builder, type)

def SolarArrayDetails_IngestAddTechnology(builder, technology):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(technology), 0)

def AddTechnology(builder, technology):
    SolarArrayDetails_IngestAddTechnology(builder, technology)

def SolarArrayDetails_IngestAddJunctionTechnology(builder, junctionTechnology):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(junctionTechnology), 0)

def AddJunctionTechnology(builder, junctionTechnology):
    SolarArrayDetails_IngestAddJunctionTechnology(builder, junctionTechnology)

def SolarArrayDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    SolarArrayDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId)

def SolarArrayDetails_IngestAddSpan(builder, span):
    builder.PrependFloat64Slot(7, span, 0.0)

def AddSpan(builder, span):
    SolarArrayDetails_IngestAddSpan(builder, span)

def SolarArrayDetails_IngestAddArea(builder, area):
    builder.PrependFloat64Slot(8, area, 0.0)

def AddArea(builder, area):
    SolarArrayDetails_IngestAddArea(builder, area)

def SolarArrayDetails_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    SolarArrayDetails_IngestAddDescription(builder, description)

def SolarArrayDetails_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SolarArrayDetails_IngestAddCreatedAt(builder, createdAt)

def SolarArrayDetails_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    SolarArrayDetails_IngestAddCreatedBy(builder, createdBy)

def SolarArrayDetails_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    SolarArrayDetails_IngestAddSource(builder, source)

def SolarArrayDetails_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    SolarArrayDetails_IngestAddOrigin(builder, origin)

def SolarArrayDetails_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    SolarArrayDetails_IngestAddOrigNetwork(builder, origNetwork)

def SolarArrayDetails_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(15, dataMode, 0)

def AddDataMode(builder, dataMode):
    SolarArrayDetails_IngestAddDataMode(builder, dataMode)

def SolarArrayDetails_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    SolarArrayDetails_IngestAddTags(builder, tags)

def SolarArrayDetails_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return SolarArrayDetails_IngestStartTagsVector(builder, numElems)

def SolarArrayDetails_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SolarArrayDetails_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class SolarArrayDetails_IngestT(object):

    # SolarArrayDetails_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.idSolarArray = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.technology = None  # type: str
        self.junctionTechnology = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.span = 0.0  # type: float
        self.area = 0.0  # type: float
        self.description = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        solarArrayDetailsIngest = SolarArrayDetails_Ingest()
        solarArrayDetailsIngest.Init(buf, pos)
        return cls.InitFromObj(solarArrayDetailsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, solarArrayDetailsIngest):
        x = SolarArrayDetails_IngestT()
        x._UnPack(solarArrayDetailsIngest)
        return x

    # SolarArrayDetails_IngestT
    def _UnPack(self, solarArrayDetailsIngest):
        if solarArrayDetailsIngest is None:
            return
        self.id = solarArrayDetailsIngest.Id()
        self.idSolarArray = solarArrayDetailsIngest.IdSolarArray()
        self.classificationMarking = solarArrayDetailsIngest.ClassificationMarking()
        self.type = solarArrayDetailsIngest.Type()
        self.technology = solarArrayDetailsIngest.Technology()
        self.junctionTechnology = solarArrayDetailsIngest.JunctionTechnology()
        self.manufacturerOrgId = solarArrayDetailsIngest.ManufacturerOrgId()
        self.span = solarArrayDetailsIngest.Span()
        self.area = solarArrayDetailsIngest.Area()
        self.description = solarArrayDetailsIngest.Description()
        self.createdAt = solarArrayDetailsIngest.CreatedAt()
        self.createdBy = solarArrayDetailsIngest.CreatedBy()
        self.source = solarArrayDetailsIngest.Source()
        self.origin = solarArrayDetailsIngest.Origin()
        self.origNetwork = solarArrayDetailsIngest.OrigNetwork()
        self.dataMode = solarArrayDetailsIngest.DataMode()
        if not solarArrayDetailsIngest.TagsIsNone():
            self.tags = []
            for i in range(solarArrayDetailsIngest.TagsLength()):
                self.tags.append(solarArrayDetailsIngest.Tags(i))

    # SolarArrayDetails_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idSolarArray is not None:
            idSolarArray = builder.CreateString(self.idSolarArray)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.technology is not None:
            technology = builder.CreateString(self.technology)
        if self.junctionTechnology is not None:
            junctionTechnology = builder.CreateString(self.junctionTechnology)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            SolarArrayDetails_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        SolarArrayDetails_IngestStart(builder)
        if self.id is not None:
            SolarArrayDetails_IngestAddId(builder, id)
        if self.idSolarArray is not None:
            SolarArrayDetails_IngestAddIdSolarArray(builder, idSolarArray)
        if self.classificationMarking is not None:
            SolarArrayDetails_IngestAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            SolarArrayDetails_IngestAddType(builder, type)
        if self.technology is not None:
            SolarArrayDetails_IngestAddTechnology(builder, technology)
        if self.junctionTechnology is not None:
            SolarArrayDetails_IngestAddJunctionTechnology(builder, junctionTechnology)
        if self.manufacturerOrgId is not None:
            SolarArrayDetails_IngestAddManufacturerOrgId(builder, manufacturerOrgId)
        SolarArrayDetails_IngestAddSpan(builder, self.span)
        SolarArrayDetails_IngestAddArea(builder, self.area)
        if self.description is not None:
            SolarArrayDetails_IngestAddDescription(builder, description)
        if self.createdAt is not None:
            SolarArrayDetails_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            SolarArrayDetails_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            SolarArrayDetails_IngestAddSource(builder, source)
        if self.origin is not None:
            SolarArrayDetails_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            SolarArrayDetails_IngestAddOrigNetwork(builder, origNetwork)
        SolarArrayDetails_IngestAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            SolarArrayDetails_IngestAddTags(builder, tags)
        solarArrayDetailsIngest = SolarArrayDetails_IngestEnd(builder)
        return solarArrayDetailsIngest
