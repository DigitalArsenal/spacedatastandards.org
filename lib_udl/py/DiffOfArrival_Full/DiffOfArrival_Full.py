# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
class DiffOfArrival_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiffOfArrival_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiffOfArrival_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DiffOfArrival_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x49\x46\x46", size_prefixed=size_prefixed)

    # DiffOfArrival_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: DIFFOFARRIVAL-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # DiffOfArrival_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # DiffOfArrival_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Ob detection time in ISO 8601 UTC with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def ObTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the target on-orbit object, if correlated.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor ID of the primary/1st sensor used for this measurement.
    # Example: /// Example: SENSOR1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Full
    def IdSensor1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sensor ID of the secondary/2nd sensor used for this measurement.
    # Example: /// Example: SENSOR2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Full
    def IdSensor2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Catalog number of the target on-orbit object.
    # Example: /// Example: 25544
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to indicate the specific tasking which produced this observation.
    # Example: /// Example: TASK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiffOfArrival_Full
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR1-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def OrigSensorId1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
    # Example: /// Example: ORIGSENSOR2-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def OrigSensorId2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The signal arrival delay relative to sensor 1 in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Sensor1Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The signal arrival delay relative to sensor 2 in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Sensor2Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Senlat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 120.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Senlon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Senalt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Sen2lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Sen2lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Sen2alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Center frequency of the collect in Hz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Bandwidth of the signal in Hz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Bandwidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def DeltaRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in delta range, in km.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def DeltaRangeUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def DeltaRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in the delta range rate, in km/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def DeltaRangeRateUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Signal to noise ratio, in dB.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Snr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Tdoa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def TdoaUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Fdoa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def FdoaUnc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
    # Example: /// Example: SURVEY
    # Constraints: Minimum length = 0, Maximum length = 32
    # DiffOfArrival_Full
    def CollectionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: No example provided.
    # Constraints: Minimum length = 0, Maximum length = 256
    # DiffOfArrival_Full
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # DiffOfArrival_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # DiffOfArrival_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DiffOfArrival_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DiffOfArrival_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # DiffOfArrival_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # DiffOfArrival_Full
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Example descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # DiffOfArrival_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # DiffOfArrival_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiffOfArrival_FullStart(builder):
    builder.StartObject(44)

def Start(builder):
    DiffOfArrival_FullStart(builder)

def DiffOfArrival_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    DiffOfArrival_FullAddId(builder, id)

def DiffOfArrival_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    DiffOfArrival_FullAddClassificationMarking(builder, classificationMarking)

def DiffOfArrival_FullAddObTime(builder, obTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obTime), 0)

def AddObTime(builder, obTime):
    DiffOfArrival_FullAddObTime(builder, obTime)

def DiffOfArrival_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    DiffOfArrival_FullAddIdOnOrbit(builder, idOnOrbit)

def DiffOfArrival_FullAddIdSensor1(builder, idSensor1):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor1), 0)

def AddIdSensor1(builder, idSensor1):
    DiffOfArrival_FullAddIdSensor1(builder, idSensor1)

def DiffOfArrival_FullAddIdSensor2(builder, idSensor2):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idSensor2), 0)

def AddIdSensor2(builder, idSensor2):
    DiffOfArrival_FullAddIdSensor2(builder, idSensor2)

def DiffOfArrival_FullAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    DiffOfArrival_FullAddSatNo(builder, satNo)

def DiffOfArrival_FullAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def AddTaskId(builder, taskId):
    DiffOfArrival_FullAddTaskId(builder, taskId)

def DiffOfArrival_FullAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    DiffOfArrival_FullAddOrigObjectId(builder, origObjectId)

def DiffOfArrival_FullAddOrigSensorId1(builder, origSensorId1):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId1), 0)

def AddOrigSensorId1(builder, origSensorId1):
    DiffOfArrival_FullAddOrigSensorId1(builder, origSensorId1)

def DiffOfArrival_FullAddOrigSensorId2(builder, origSensorId2):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origSensorId2), 0)

def AddOrigSensorId2(builder, origSensorId2):
    DiffOfArrival_FullAddOrigSensorId2(builder, origSensorId2)

def DiffOfArrival_FullAddUct(builder, uct):
    builder.PrependBoolSlot(11, uct, 0)

def AddUct(builder, uct):
    DiffOfArrival_FullAddUct(builder, uct)

def DiffOfArrival_FullAddSensor1Delay(builder, sensor1Delay):
    builder.PrependFloat64Slot(12, sensor1Delay, 0.0)

def AddSensor1Delay(builder, sensor1Delay):
    DiffOfArrival_FullAddSensor1Delay(builder, sensor1Delay)

def DiffOfArrival_FullAddSensor2Delay(builder, sensor2Delay):
    builder.PrependFloat64Slot(13, sensor2Delay, 0.0)

def AddSensor2Delay(builder, sensor2Delay):
    DiffOfArrival_FullAddSensor2Delay(builder, sensor2Delay)

def DiffOfArrival_FullAddSenlat(builder, senlat):
    builder.PrependFloat64Slot(14, senlat, 0.0)

def AddSenlat(builder, senlat):
    DiffOfArrival_FullAddSenlat(builder, senlat)

def DiffOfArrival_FullAddSenlon(builder, senlon):
    builder.PrependFloat64Slot(15, senlon, 0.0)

def AddSenlon(builder, senlon):
    DiffOfArrival_FullAddSenlon(builder, senlon)

def DiffOfArrival_FullAddSenalt(builder, senalt):
    builder.PrependFloat64Slot(16, senalt, 0.0)

def AddSenalt(builder, senalt):
    DiffOfArrival_FullAddSenalt(builder, senalt)

def DiffOfArrival_FullAddSen2lat(builder, sen2lat):
    builder.PrependFloat64Slot(17, sen2lat, 0.0)

def AddSen2lat(builder, sen2lat):
    DiffOfArrival_FullAddSen2lat(builder, sen2lat)

def DiffOfArrival_FullAddSen2lon(builder, sen2lon):
    builder.PrependFloat64Slot(18, sen2lon, 0.0)

def AddSen2lon(builder, sen2lon):
    DiffOfArrival_FullAddSen2lon(builder, sen2lon)

def DiffOfArrival_FullAddSen2alt(builder, sen2alt):
    builder.PrependFloat64Slot(19, sen2alt, 0.0)

def AddSen2alt(builder, sen2alt):
    DiffOfArrival_FullAddSen2alt(builder, sen2alt)

def DiffOfArrival_FullAddFrequency(builder, frequency):
    builder.PrependFloat64Slot(20, frequency, 0.0)

def AddFrequency(builder, frequency):
    DiffOfArrival_FullAddFrequency(builder, frequency)

def DiffOfArrival_FullAddBandwidth(builder, bandwidth):
    builder.PrependFloat64Slot(21, bandwidth, 0.0)

def AddBandwidth(builder, bandwidth):
    DiffOfArrival_FullAddBandwidth(builder, bandwidth)

def DiffOfArrival_FullAddDeltaRange(builder, deltaRange):
    builder.PrependFloat64Slot(22, deltaRange, 0.0)

def AddDeltaRange(builder, deltaRange):
    DiffOfArrival_FullAddDeltaRange(builder, deltaRange)

def DiffOfArrival_FullAddDeltaRangeUnc(builder, deltaRangeUnc):
    builder.PrependFloat64Slot(23, deltaRangeUnc, 0.0)

def AddDeltaRangeUnc(builder, deltaRangeUnc):
    DiffOfArrival_FullAddDeltaRangeUnc(builder, deltaRangeUnc)

def DiffOfArrival_FullAddDeltaRangeRate(builder, deltaRangeRate):
    builder.PrependFloat64Slot(24, deltaRangeRate, 0.0)

def AddDeltaRangeRate(builder, deltaRangeRate):
    DiffOfArrival_FullAddDeltaRangeRate(builder, deltaRangeRate)

def DiffOfArrival_FullAddDeltaRangeRateUnc(builder, deltaRangeRateUnc):
    builder.PrependFloat64Slot(25, deltaRangeRateUnc, 0.0)

def AddDeltaRangeRateUnc(builder, deltaRangeRateUnc):
    DiffOfArrival_FullAddDeltaRangeRateUnc(builder, deltaRangeRateUnc)

def DiffOfArrival_FullAddSnr(builder, snr):
    builder.PrependFloat64Slot(26, snr, 0.0)

def AddSnr(builder, snr):
    DiffOfArrival_FullAddSnr(builder, snr)

def DiffOfArrival_FullAddTdoa(builder, tdoa):
    builder.PrependFloat64Slot(27, tdoa, 0.0)

def AddTdoa(builder, tdoa):
    DiffOfArrival_FullAddTdoa(builder, tdoa)

def DiffOfArrival_FullAddTdoaUnc(builder, tdoaUnc):
    builder.PrependFloat64Slot(28, tdoaUnc, 0.0)

def AddTdoaUnc(builder, tdoaUnc):
    DiffOfArrival_FullAddTdoaUnc(builder, tdoaUnc)

def DiffOfArrival_FullAddFdoa(builder, fdoa):
    builder.PrependFloat64Slot(29, fdoa, 0.0)

def AddFdoa(builder, fdoa):
    DiffOfArrival_FullAddFdoa(builder, fdoa)

def DiffOfArrival_FullAddFdoaUnc(builder, fdoaUnc):
    builder.PrependFloat64Slot(30, fdoaUnc, 0.0)

def AddFdoaUnc(builder, fdoaUnc):
    DiffOfArrival_FullAddFdoaUnc(builder, fdoaUnc)

def DiffOfArrival_FullAddCollectionMode(builder, collectionMode):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(collectionMode), 0)

def AddCollectionMode(builder, collectionMode):
    DiffOfArrival_FullAddCollectionMode(builder, collectionMode)

def DiffOfArrival_FullAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    DiffOfArrival_FullAddRawFileUri(builder, rawFileUri)

def DiffOfArrival_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    DiffOfArrival_FullAddSource(builder, source)

def DiffOfArrival_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(34, dataMode, 0)

def AddDataMode(builder, dataMode):
    DiffOfArrival_FullAddDataMode(builder, dataMode)

def DiffOfArrival_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    DiffOfArrival_FullAddTags(builder, tags)

def DiffOfArrival_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return DiffOfArrival_FullStartTagsVector(builder, numElems)

def DiffOfArrival_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    DiffOfArrival_FullAddOrigin(builder, origin)

def DiffOfArrival_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    DiffOfArrival_FullAddCreatedAt(builder, createdAt)

def DiffOfArrival_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    DiffOfArrival_FullAddCreatedBy(builder, createdBy)

def DiffOfArrival_FullAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    DiffOfArrival_FullAddOnOrbit(builder, onOrbit)

def DiffOfArrival_FullAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    DiffOfArrival_FullAddDescriptor(builder, descriptor)

def DiffOfArrival_FullAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    DiffOfArrival_FullAddTransactionId(builder, transactionId)

def DiffOfArrival_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    DiffOfArrival_FullAddOrigNetwork(builder, origNetwork)

def DiffOfArrival_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    DiffOfArrival_FullAddSourceDl(builder, sourceDl)

def DiffOfArrival_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return DiffOfArrival_FullEnd(builder)

try:
    from typing import List
except:
    pass

class DiffOfArrival_FullT(object):

    # DiffOfArrival_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.obTime = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSensor1 = None  # type: str
        self.idSensor2 = None  # type: str
        self.satNo = 0  # type: int
        self.taskId = None  # type: str
        self.origObjectId = None  # type: str
        self.origSensorId1 = None  # type: str
        self.origSensorId2 = None  # type: str
        self.uct = False  # type: bool
        self.sensor1Delay = 0.0  # type: float
        self.sensor2Delay = 0.0  # type: float
        self.senlat = 0.0  # type: float
        self.senlon = 0.0  # type: float
        self.senalt = 0.0  # type: float
        self.sen2lat = 0.0  # type: float
        self.sen2lon = 0.0  # type: float
        self.sen2alt = 0.0  # type: float
        self.frequency = 0.0  # type: float
        self.bandwidth = 0.0  # type: float
        self.deltaRange = 0.0  # type: float
        self.deltaRangeUnc = 0.0  # type: float
        self.deltaRangeRate = 0.0  # type: float
        self.deltaRangeRateUnc = 0.0  # type: float
        self.snr = 0.0  # type: float
        self.tdoa = 0.0  # type: float
        self.tdoaUnc = 0.0  # type: float
        self.fdoa = 0.0  # type: float
        self.fdoaUnc = 0.0  # type: float
        self.collectionMode = None  # type: str
        self.rawFileUri = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.origin = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.onOrbit = None  # type: str
        self.descriptor = None  # type: str
        self.transactionId = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diffOfArrivalFull = DiffOfArrival_Full()
        diffOfArrivalFull.Init(buf, pos)
        return cls.InitFromObj(diffOfArrivalFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diffOfArrivalFull):
        x = DiffOfArrival_FullT()
        x._UnPack(diffOfArrivalFull)
        return x

    # DiffOfArrival_FullT
    def _UnPack(self, diffOfArrivalFull):
        if diffOfArrivalFull is None:
            return
        self.id = diffOfArrivalFull.Id()
        self.classificationMarking = diffOfArrivalFull.ClassificationMarking()
        self.obTime = diffOfArrivalFull.ObTime()
        self.idOnOrbit = diffOfArrivalFull.IdOnOrbit()
        self.idSensor1 = diffOfArrivalFull.IdSensor1()
        self.idSensor2 = diffOfArrivalFull.IdSensor2()
        self.satNo = diffOfArrivalFull.SatNo()
        self.taskId = diffOfArrivalFull.TaskId()
        self.origObjectId = diffOfArrivalFull.OrigObjectId()
        self.origSensorId1 = diffOfArrivalFull.OrigSensorId1()
        self.origSensorId2 = diffOfArrivalFull.OrigSensorId2()
        self.uct = diffOfArrivalFull.Uct()
        self.sensor1Delay = diffOfArrivalFull.Sensor1Delay()
        self.sensor2Delay = diffOfArrivalFull.Sensor2Delay()
        self.senlat = diffOfArrivalFull.Senlat()
        self.senlon = diffOfArrivalFull.Senlon()
        self.senalt = diffOfArrivalFull.Senalt()
        self.sen2lat = diffOfArrivalFull.Sen2lat()
        self.sen2lon = diffOfArrivalFull.Sen2lon()
        self.sen2alt = diffOfArrivalFull.Sen2alt()
        self.frequency = diffOfArrivalFull.Frequency()
        self.bandwidth = diffOfArrivalFull.Bandwidth()
        self.deltaRange = diffOfArrivalFull.DeltaRange()
        self.deltaRangeUnc = diffOfArrivalFull.DeltaRangeUnc()
        self.deltaRangeRate = diffOfArrivalFull.DeltaRangeRate()
        self.deltaRangeRateUnc = diffOfArrivalFull.DeltaRangeRateUnc()
        self.snr = diffOfArrivalFull.Snr()
        self.tdoa = diffOfArrivalFull.Tdoa()
        self.tdoaUnc = diffOfArrivalFull.TdoaUnc()
        self.fdoa = diffOfArrivalFull.Fdoa()
        self.fdoaUnc = diffOfArrivalFull.FdoaUnc()
        self.collectionMode = diffOfArrivalFull.CollectionMode()
        self.rawFileUri = diffOfArrivalFull.RawFileUri()
        self.source = diffOfArrivalFull.Source()
        self.dataMode = diffOfArrivalFull.DataMode()
        if not diffOfArrivalFull.TagsIsNone():
            self.tags = []
            for i in range(diffOfArrivalFull.TagsLength()):
                self.tags.append(diffOfArrivalFull.Tags(i))
        self.origin = diffOfArrivalFull.Origin()
        self.createdAt = diffOfArrivalFull.CreatedAt()
        self.createdBy = diffOfArrivalFull.CreatedBy()
        self.onOrbit = diffOfArrivalFull.OnOrbit()
        self.descriptor = diffOfArrivalFull.Descriptor()
        self.transactionId = diffOfArrivalFull.TransactionId()
        self.origNetwork = diffOfArrivalFull.OrigNetwork()
        self.sourceDl = diffOfArrivalFull.SourceDl()

    # DiffOfArrival_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.obTime is not None:
            obTime = builder.CreateString(self.obTime)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSensor1 is not None:
            idSensor1 = builder.CreateString(self.idSensor1)
        if self.idSensor2 is not None:
            idSensor2 = builder.CreateString(self.idSensor2)
        if self.taskId is not None:
            taskId = builder.CreateString(self.taskId)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origSensorId1 is not None:
            origSensorId1 = builder.CreateString(self.origSensorId1)
        if self.origSensorId2 is not None:
            origSensorId2 = builder.CreateString(self.origSensorId2)
        if self.collectionMode is not None:
            collectionMode = builder.CreateString(self.collectionMode)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            DiffOfArrival_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        DiffOfArrival_FullStart(builder)
        if self.id is not None:
            DiffOfArrival_FullAddId(builder, id)
        if self.classificationMarking is not None:
            DiffOfArrival_FullAddClassificationMarking(builder, classificationMarking)
        if self.obTime is not None:
            DiffOfArrival_FullAddObTime(builder, obTime)
        if self.idOnOrbit is not None:
            DiffOfArrival_FullAddIdOnOrbit(builder, idOnOrbit)
        if self.idSensor1 is not None:
            DiffOfArrival_FullAddIdSensor1(builder, idSensor1)
        if self.idSensor2 is not None:
            DiffOfArrival_FullAddIdSensor2(builder, idSensor2)
        DiffOfArrival_FullAddSatNo(builder, self.satNo)
        if self.taskId is not None:
            DiffOfArrival_FullAddTaskId(builder, taskId)
        if self.origObjectId is not None:
            DiffOfArrival_FullAddOrigObjectId(builder, origObjectId)
        if self.origSensorId1 is not None:
            DiffOfArrival_FullAddOrigSensorId1(builder, origSensorId1)
        if self.origSensorId2 is not None:
            DiffOfArrival_FullAddOrigSensorId2(builder, origSensorId2)
        DiffOfArrival_FullAddUct(builder, self.uct)
        DiffOfArrival_FullAddSensor1Delay(builder, self.sensor1Delay)
        DiffOfArrival_FullAddSensor2Delay(builder, self.sensor2Delay)
        DiffOfArrival_FullAddSenlat(builder, self.senlat)
        DiffOfArrival_FullAddSenlon(builder, self.senlon)
        DiffOfArrival_FullAddSenalt(builder, self.senalt)
        DiffOfArrival_FullAddSen2lat(builder, self.sen2lat)
        DiffOfArrival_FullAddSen2lon(builder, self.sen2lon)
        DiffOfArrival_FullAddSen2alt(builder, self.sen2alt)
        DiffOfArrival_FullAddFrequency(builder, self.frequency)
        DiffOfArrival_FullAddBandwidth(builder, self.bandwidth)
        DiffOfArrival_FullAddDeltaRange(builder, self.deltaRange)
        DiffOfArrival_FullAddDeltaRangeUnc(builder, self.deltaRangeUnc)
        DiffOfArrival_FullAddDeltaRangeRate(builder, self.deltaRangeRate)
        DiffOfArrival_FullAddDeltaRangeRateUnc(builder, self.deltaRangeRateUnc)
        DiffOfArrival_FullAddSnr(builder, self.snr)
        DiffOfArrival_FullAddTdoa(builder, self.tdoa)
        DiffOfArrival_FullAddTdoaUnc(builder, self.tdoaUnc)
        DiffOfArrival_FullAddFdoa(builder, self.fdoa)
        DiffOfArrival_FullAddFdoaUnc(builder, self.fdoaUnc)
        if self.collectionMode is not None:
            DiffOfArrival_FullAddCollectionMode(builder, collectionMode)
        if self.rawFileUri is not None:
            DiffOfArrival_FullAddRawFileUri(builder, rawFileUri)
        if self.source is not None:
            DiffOfArrival_FullAddSource(builder, source)
        DiffOfArrival_FullAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            DiffOfArrival_FullAddTags(builder, tags)
        if self.origin is not None:
            DiffOfArrival_FullAddOrigin(builder, origin)
        if self.createdAt is not None:
            DiffOfArrival_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            DiffOfArrival_FullAddCreatedBy(builder, createdBy)
        if self.onOrbit is not None:
            DiffOfArrival_FullAddOnOrbit(builder, onOrbit)
        if self.descriptor is not None:
            DiffOfArrival_FullAddDescriptor(builder, descriptor)
        if self.transactionId is not None:
            DiffOfArrival_FullAddTransactionId(builder, transactionId)
        if self.origNetwork is not None:
            DiffOfArrival_FullAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            DiffOfArrival_FullAddSourceDl(builder, sourceDl)
        diffOfArrivalFull = DiffOfArrival_FullEnd(builder)
        return diffOfArrivalFull
