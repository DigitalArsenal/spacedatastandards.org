# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
class Status_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Status_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatus_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Status_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x54\x41\x54", size_prefixed=size_prefixed)

    # Status_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: STATUS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Status_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Status_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sources or SCG references from which the classification of this data is derived.
    # Example: /// Example: SOME_SOURCE
    # Constraints: Minimum length = 0, Maximum length = 128
    # Status_Full
    def DerivedFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The declassification date of this data, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:02:02.123Z
    # Constraints: No constraints specified.
    # Status_Full
    def DeclassificationDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Declassification string of this data.
    # Example: /// Example: U
    # Constraints: Minimum length = 0, Maximum length = 256
    # Status_Full
    def DeclassificationString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent entity.
    # Example: /// Example: ENTITY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Status_Full
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
    # Example: /// Example: ACTIVE
    # Constraints: Minimum length = 0, Maximum length = 16
    # Status_Full
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
    # Example: /// Example: FMC
    # Constraints: Minimum length = 0, Maximum length = 3
    # Status_Full
    def SysCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
    # Example: /// Example: FMC
    # Constraints: Minimum length = 0, Maximum length = 3
    # Status_Full
    def OpsCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Status_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Status_Full
    def SubStatusCollection(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Status_Full
    def SubStatusCollectionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Status_Full
    def SubStatusCollectionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Status_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Comments describing the status creation and or updates to an entity.
    # Example: /// Example: Example Notes
    # Constraints: No constraints specified.
    # Status_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Status_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Status_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Status_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Status_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Status_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: TST1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Status_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Status_FullStart(builder):
    builder.StartObject(19)

def Start(builder):
    Status_FullStart(builder)

def Status_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Status_FullAddId(builder, id)

def Status_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Status_FullAddClassificationMarking(builder, classificationMarking)

def Status_FullAddDerivedFrom(builder, derivedFrom):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(derivedFrom), 0)

def AddDerivedFrom(builder, derivedFrom):
    Status_FullAddDerivedFrom(builder, derivedFrom)

def Status_FullAddDeclassificationDate(builder, declassificationDate):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(declassificationDate), 0)

def AddDeclassificationDate(builder, declassificationDate):
    Status_FullAddDeclassificationDate(builder, declassificationDate)

def Status_FullAddDeclassificationString(builder, declassificationString):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(declassificationString), 0)

def AddDeclassificationString(builder, declassificationString):
    Status_FullAddDeclassificationString(builder, declassificationString)

def Status_FullAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Status_FullAddIdEntity(builder, idEntity)

def Status_FullAddState(builder, state):
    builder.PrependInt8Slot(6, state, 0)

def AddState(builder, state):
    Status_FullAddState(builder, state)

def Status_FullAddSysCap(builder, sysCap):
    builder.PrependInt8Slot(7, sysCap, 0)

def AddSysCap(builder, sysCap):
    Status_FullAddSysCap(builder, sysCap)

def Status_FullAddOpsCap(builder, opsCap):
    builder.PrependInt8Slot(8, opsCap, 0)

def AddOpsCap(builder, opsCap):
    Status_FullAddOpsCap(builder, opsCap)

def Status_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Status_FullAddSource(builder, source)

def Status_FullAddSubStatusCollection(builder, subStatusCollection):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(subStatusCollection), 0)

def AddSubStatusCollection(builder, subStatusCollection):
    Status_FullAddSubStatusCollection(builder, subStatusCollection)

def Status_FullStartSubStatusCollectionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSubStatusCollectionVector(builder, numElems):
    return Status_FullStartSubStatusCollectionVector(builder, numElems)

def Status_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(11, dataMode, 0)

def AddDataMode(builder, dataMode):
    Status_FullAddDataMode(builder, dataMode)

def Status_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Status_FullAddNotes(builder, notes)

def Status_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Status_FullAddCreatedAt(builder, createdAt)

def Status_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Status_FullAddCreatedBy(builder, createdBy)

def Status_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    Status_FullAddUpdatedAt(builder, updatedAt)

def Status_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    Status_FullAddUpdatedBy(builder, updatedBy)

def Status_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Status_FullAddOrigin(builder, origin)

def Status_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Status_FullAddOrigNetwork(builder, origNetwork)

def Status_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Status_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Status_FullT(object):

    # Status_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.derivedFrom = None  # type: str
        self.declassificationDate = None  # type: str
        self.declassificationString = None  # type: str
        self.idEntity = None  # type: str
        self.state = 0  # type: int
        self.sysCap = 0  # type: int
        self.opsCap = 0  # type: int
        self.source = None  # type: str
        self.subStatusCollection = None  # type: List[str]
        self.dataMode = 0  # type: int
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        statusFull = Status_Full()
        statusFull.Init(buf, pos)
        return cls.InitFromObj(statusFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, statusFull):
        x = Status_FullT()
        x._UnPack(statusFull)
        return x

    # Status_FullT
    def _UnPack(self, statusFull):
        if statusFull is None:
            return
        self.id = statusFull.Id()
        self.classificationMarking = statusFull.ClassificationMarking()
        self.derivedFrom = statusFull.DerivedFrom()
        self.declassificationDate = statusFull.DeclassificationDate()
        self.declassificationString = statusFull.DeclassificationString()
        self.idEntity = statusFull.IdEntity()
        self.state = statusFull.State()
        self.sysCap = statusFull.SysCap()
        self.opsCap = statusFull.OpsCap()
        self.source = statusFull.Source()
        if not statusFull.SubStatusCollectionIsNone():
            self.subStatusCollection = []
            for i in range(statusFull.SubStatusCollectionLength()):
                self.subStatusCollection.append(statusFull.SubStatusCollection(i))
        self.dataMode = statusFull.DataMode()
        self.notes = statusFull.Notes()
        self.createdAt = statusFull.CreatedAt()
        self.createdBy = statusFull.CreatedBy()
        self.updatedAt = statusFull.UpdatedAt()
        self.updatedBy = statusFull.UpdatedBy()
        self.origin = statusFull.Origin()
        self.origNetwork = statusFull.OrigNetwork()

    # Status_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.derivedFrom is not None:
            derivedFrom = builder.CreateString(self.derivedFrom)
        if self.declassificationDate is not None:
            declassificationDate = builder.CreateString(self.declassificationDate)
        if self.declassificationString is not None:
            declassificationString = builder.CreateString(self.declassificationString)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.subStatusCollection is not None:
            subStatusCollectionlist = []
            for i in range(len(self.subStatusCollection)):
                subStatusCollectionlist.append(builder.CreateString(self.subStatusCollection[i]))
            Status_FullStartSubStatusCollectionVector(builder, len(self.subStatusCollection))
            for i in reversed(range(len(self.subStatusCollection))):
                builder.PrependUOffsetTRelative(subStatusCollectionlist[i])
            subStatusCollection = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Status_FullStart(builder)
        if self.id is not None:
            Status_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Status_FullAddClassificationMarking(builder, classificationMarking)
        if self.derivedFrom is not None:
            Status_FullAddDerivedFrom(builder, derivedFrom)
        if self.declassificationDate is not None:
            Status_FullAddDeclassificationDate(builder, declassificationDate)
        if self.declassificationString is not None:
            Status_FullAddDeclassificationString(builder, declassificationString)
        if self.idEntity is not None:
            Status_FullAddIdEntity(builder, idEntity)
        Status_FullAddState(builder, self.state)
        Status_FullAddSysCap(builder, self.sysCap)
        Status_FullAddOpsCap(builder, self.opsCap)
        if self.source is not None:
            Status_FullAddSource(builder, source)
        if self.subStatusCollection is not None:
            Status_FullAddSubStatusCollection(builder, subStatusCollection)
        Status_FullAddDataMode(builder, self.dataMode)
        if self.notes is not None:
            Status_FullAddNotes(builder, notes)
        if self.createdAt is not None:
            Status_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Status_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            Status_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            Status_FullAddUpdatedBy(builder, updatedBy)
        if self.origin is not None:
            Status_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Status_FullAddOrigNetwork(builder, origNetwork)
        statusFull = Status_FullEnd(builder)
        return statusFull
