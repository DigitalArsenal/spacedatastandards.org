# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// No description available.
class OnorbitEvent_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitEvent_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitEvent_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitEvent_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitEvent_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITEVENT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitEvent_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitEvent_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The sources or SCG references from which the classification of this data is derived.
    # Example: /// Example: DERIVED_SOURCE
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def DerivedFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The declassification date of this data, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:02:02.123Z
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def DeclassificationDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Declassification string of this data.
    # Example: /// Example: DECLASS_STRING
    # Constraints: Minimum length = 0, Maximum length = 256
    # OnorbitEvent_Full
    def DeclassificationString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the on-orbit object for this event.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitEvent_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/Catalog number of the target on-orbit object.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def EventTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes/remarks on the validity/accuracy of the eventTime.
    # Example: /// Example: Notes on validity
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def EventTimeNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization ID of the operator of the on-orbit spacecraft at the time of the event.
    # Example: /// Example: OPERATORORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnorbitEvent_Full
    def OperatorOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Organization ID of the owner of the on-orbit spacecraft at the time of the event.
    # Example: /// Example: OWNERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnorbitEvent_Full
    def OwnerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization which leases this on-orbit spacecraft.
    # Example: /// Example: LESSEEORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnorbitEvent_Full
    def LesseeOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
    # Example: /// Example: OPERATEDONBEHALFOFORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # OnorbitEvent_Full
    def OperatedOnBehalfOfOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GEO position longitude at event time if applicable. Negative values are west.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def GeoPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GEO plane slot of the spacecraft at event time.
    # Example: /// Example: example_slot
    # Constraints: Minimum length = 0, Maximum length = 16
    # OnorbitEvent_Full
    def PlaneSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # GEO slot plane number/designator of the spacecraft at event time.
    # Example: /// Example: PL_1
    # Constraints: Minimum length = 0, Maximum length = 4
    # OnorbitEvent_Full
    def PlaneNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
    # Example: /// Example: Stable
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def PositionStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maximum validity time of the event.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def UntilTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date time of official loss of the spacecraft.
    # Example: /// Example: 2021-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def OfficialLossDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Net amount of the insurance claim for the event, in USD.
    # Example: /// Example: 10000.23
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def NetAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Underlying cause of the event.
    # Example: /// Example: CAUSE_EXAMPLE
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def UnderlyingCause(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Spacecraft capability loss incurred, as a fraction of 1.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def CapabilityLoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft capacity loss incurred, as a fraction of 1.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def CapacityLoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Insurance loss incurred, as a fraction of 1.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def InsuranceLoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Insurance loss incurred by 3rd party insurance, in USD.
    # Example: /// Example: 10000.23
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def ThirdPartyInsuranceLoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Number of humans injured in the event.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def Injured(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Number of humans killed in the event.
    # Example: /// Example: 23
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def Killed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Spacecraft life lost due to the event as a percent/fraction of 1.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def LifeLost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Spacecraft age at the event in years.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def AgeAtEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Achieved phase of flight prior to the event.
    # Example: /// Example: Phase 2
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def AchievedFlightPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Phase of flight during which the event occurred.
    # Example: /// Example: Phase 2
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def OccurrenceFlightPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Faulty stage of flight for the event.
    # Example: /// Example: Phase 2
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def StageAtFault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Equipment on the spacecraft which caused the event.
    # Example: /// Example: Example Equipment
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def EquipmentAtFault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of the equipment on the spacecraft which caused the event.
    # Example: /// Example: Example Equipment
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def EquipmentTypeAtFault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specific part of the equipment on the spacecraft which caused the event.
    # Example: /// Example: Example Equipment
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def EquipmentPartAtFault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
    # Example: /// Example: Example Equipment
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def ConsequentialEquipmentFailure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating if the spacecraft is inclined.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def Inclined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Notes/description of the event.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # OnorbitEvent_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional remarks on the event description.
    # Example: /// Example: Example remarks
    # Constraints: Minimum length = 0, Maximum length = 512
    # OnorbitEvent_Full
    def Remarks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional insurance notes if the event is an official loss.
    # Example: /// Example: Insurance notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # OnorbitEvent_Full
    def InsuranceLossNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notes on capability loss at the time of event.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # OnorbitEvent_Full
    def CapabilityLossNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional insurance notes on coverages at the time of event.
    # Example: /// Example: Insurance notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # OnorbitEvent_Full
    def InsuranceCarriedNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional notes on the equipment causing the event/loss.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 512
    # OnorbitEvent_Full
    def EquipmentCausingLossNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of on-orbit event being reported.
    # Example: /// Example: Type1
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The result of the reported event.
    # Example: /// Example: Example results
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def EventResult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The status of the on-orbit object.
    # Example: /// Example: Status1
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def ObjectStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the satellite orbital position or regime.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 0, Maximum length = 128
    # OnorbitEvent_Full
    def SatellitePosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitEvent_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitEvent_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitEvent_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitEvent_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OnorbitEvent_Full
    def OnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitEvent_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitEvent_FullStart(builder):
    builder.StartObject(57)

def Start(builder):
    OnorbitEvent_FullStart(builder)

def OnorbitEvent_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitEvent_FullAddId(builder, id)

def OnorbitEvent_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitEvent_FullAddClassificationMarking(builder, classificationMarking)

def OnorbitEvent_FullAddDerivedFrom(builder, derivedFrom):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(derivedFrom), 0)

def AddDerivedFrom(builder, derivedFrom):
    OnorbitEvent_FullAddDerivedFrom(builder, derivedFrom)

def OnorbitEvent_FullAddDeclassificationDate(builder, declassificationDate):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(declassificationDate), 0)

def AddDeclassificationDate(builder, declassificationDate):
    OnorbitEvent_FullAddDeclassificationDate(builder, declassificationDate)

def OnorbitEvent_FullAddDeclassificationString(builder, declassificationString):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(declassificationString), 0)

def AddDeclassificationString(builder, declassificationString):
    OnorbitEvent_FullAddDeclassificationString(builder, declassificationString)

def OnorbitEvent_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitEvent_FullAddIdOnOrbit(builder, idOnOrbit)

def OnorbitEvent_FullAddSatNo(builder, satNo):
    builder.PrependInt32Slot(6, satNo, 0)

def AddSatNo(builder, satNo):
    OnorbitEvent_FullAddSatNo(builder, satNo)

def OnorbitEvent_FullAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    OnorbitEvent_FullAddOrigObjectId(builder, origObjectId)

def OnorbitEvent_FullAddEventTime(builder, eventTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(eventTime), 0)

def AddEventTime(builder, eventTime):
    OnorbitEvent_FullAddEventTime(builder, eventTime)

def OnorbitEvent_FullAddEventTimeNotes(builder, eventTimeNotes):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(eventTimeNotes), 0)

def AddEventTimeNotes(builder, eventTimeNotes):
    OnorbitEvent_FullAddEventTimeNotes(builder, eventTimeNotes)

def OnorbitEvent_FullAddOperatorOrgId(builder, operatorOrgId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(operatorOrgId), 0)

def AddOperatorOrgId(builder, operatorOrgId):
    OnorbitEvent_FullAddOperatorOrgId(builder, operatorOrgId)

def OnorbitEvent_FullAddOwnerOrgId(builder, ownerOrgId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ownerOrgId), 0)

def AddOwnerOrgId(builder, ownerOrgId):
    OnorbitEvent_FullAddOwnerOrgId(builder, ownerOrgId)

def OnorbitEvent_FullAddLesseeOrgId(builder, lesseeOrgId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(lesseeOrgId), 0)

def AddLesseeOrgId(builder, lesseeOrgId):
    OnorbitEvent_FullAddLesseeOrgId(builder, lesseeOrgId)

def OnorbitEvent_FullAddOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(operatedOnBehalfOfOrgId), 0)

def AddOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgId):
    OnorbitEvent_FullAddOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgId)

def OnorbitEvent_FullAddGeoPosition(builder, geoPosition):
    builder.PrependFloat64Slot(14, geoPosition, 0.0)

def AddGeoPosition(builder, geoPosition):
    OnorbitEvent_FullAddGeoPosition(builder, geoPosition)

def OnorbitEvent_FullAddPlaneSlot(builder, planeSlot):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(planeSlot), 0)

def AddPlaneSlot(builder, planeSlot):
    OnorbitEvent_FullAddPlaneSlot(builder, planeSlot)

def OnorbitEvent_FullAddPlaneNumber(builder, planeNumber):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(planeNumber), 0)

def AddPlaneNumber(builder, planeNumber):
    OnorbitEvent_FullAddPlaneNumber(builder, planeNumber)

def OnorbitEvent_FullAddPositionStatus(builder, positionStatus):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(positionStatus), 0)

def AddPositionStatus(builder, positionStatus):
    OnorbitEvent_FullAddPositionStatus(builder, positionStatus)

def OnorbitEvent_FullAddUntilTime(builder, untilTime):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(untilTime), 0)

def AddUntilTime(builder, untilTime):
    OnorbitEvent_FullAddUntilTime(builder, untilTime)

def OnorbitEvent_FullAddOfficialLossDate(builder, officialLossDate):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(officialLossDate), 0)

def AddOfficialLossDate(builder, officialLossDate):
    OnorbitEvent_FullAddOfficialLossDate(builder, officialLossDate)

def OnorbitEvent_FullAddNetAmount(builder, netAmount):
    builder.PrependFloat64Slot(20, netAmount, 0.0)

def AddNetAmount(builder, netAmount):
    OnorbitEvent_FullAddNetAmount(builder, netAmount)

def OnorbitEvent_FullAddUnderlyingCause(builder, underlyingCause):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(underlyingCause), 0)

def AddUnderlyingCause(builder, underlyingCause):
    OnorbitEvent_FullAddUnderlyingCause(builder, underlyingCause)

def OnorbitEvent_FullAddCapabilityLoss(builder, capabilityLoss):
    builder.PrependFloat64Slot(22, capabilityLoss, 0.0)

def AddCapabilityLoss(builder, capabilityLoss):
    OnorbitEvent_FullAddCapabilityLoss(builder, capabilityLoss)

def OnorbitEvent_FullAddCapacityLoss(builder, capacityLoss):
    builder.PrependFloat64Slot(23, capacityLoss, 0.0)

def AddCapacityLoss(builder, capacityLoss):
    OnorbitEvent_FullAddCapacityLoss(builder, capacityLoss)

def OnorbitEvent_FullAddInsuranceLoss(builder, insuranceLoss):
    builder.PrependFloat64Slot(24, insuranceLoss, 0.0)

def AddInsuranceLoss(builder, insuranceLoss):
    OnorbitEvent_FullAddInsuranceLoss(builder, insuranceLoss)

def OnorbitEvent_FullAddThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss):
    builder.PrependFloat64Slot(25, thirdPartyInsuranceLoss, 0.0)

def AddThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss):
    OnorbitEvent_FullAddThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss)

def OnorbitEvent_FullAddInjured(builder, injured):
    builder.PrependInt32Slot(26, injured, 0)

def AddInjured(builder, injured):
    OnorbitEvent_FullAddInjured(builder, injured)

def OnorbitEvent_FullAddKilled(builder, killed):
    builder.PrependInt32Slot(27, killed, 0)

def AddKilled(builder, killed):
    OnorbitEvent_FullAddKilled(builder, killed)

def OnorbitEvent_FullAddLifeLost(builder, lifeLost):
    builder.PrependFloat64Slot(28, lifeLost, 0.0)

def AddLifeLost(builder, lifeLost):
    OnorbitEvent_FullAddLifeLost(builder, lifeLost)

def OnorbitEvent_FullAddAgeAtEvent(builder, ageAtEvent):
    builder.PrependFloat64Slot(29, ageAtEvent, 0.0)

def AddAgeAtEvent(builder, ageAtEvent):
    OnorbitEvent_FullAddAgeAtEvent(builder, ageAtEvent)

def OnorbitEvent_FullAddAchievedFlightPhase(builder, achievedFlightPhase):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(achievedFlightPhase), 0)

def AddAchievedFlightPhase(builder, achievedFlightPhase):
    OnorbitEvent_FullAddAchievedFlightPhase(builder, achievedFlightPhase)

def OnorbitEvent_FullAddOccurrenceFlightPhase(builder, occurrenceFlightPhase):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(occurrenceFlightPhase), 0)

def AddOccurrenceFlightPhase(builder, occurrenceFlightPhase):
    OnorbitEvent_FullAddOccurrenceFlightPhase(builder, occurrenceFlightPhase)

def OnorbitEvent_FullAddStageAtFault(builder, stageAtFault):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(stageAtFault), 0)

def AddStageAtFault(builder, stageAtFault):
    OnorbitEvent_FullAddStageAtFault(builder, stageAtFault)

def OnorbitEvent_FullAddEquipmentAtFault(builder, equipmentAtFault):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentAtFault), 0)

def AddEquipmentAtFault(builder, equipmentAtFault):
    OnorbitEvent_FullAddEquipmentAtFault(builder, equipmentAtFault)

def OnorbitEvent_FullAddEquipmentTypeAtFault(builder, equipmentTypeAtFault):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentTypeAtFault), 0)

def AddEquipmentTypeAtFault(builder, equipmentTypeAtFault):
    OnorbitEvent_FullAddEquipmentTypeAtFault(builder, equipmentTypeAtFault)

def OnorbitEvent_FullAddEquipmentPartAtFault(builder, equipmentPartAtFault):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentPartAtFault), 0)

def AddEquipmentPartAtFault(builder, equipmentPartAtFault):
    OnorbitEvent_FullAddEquipmentPartAtFault(builder, equipmentPartAtFault)

def OnorbitEvent_FullAddConsequentialEquipmentFailure(builder, consequentialEquipmentFailure):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(consequentialEquipmentFailure), 0)

def AddConsequentialEquipmentFailure(builder, consequentialEquipmentFailure):
    OnorbitEvent_FullAddConsequentialEquipmentFailure(builder, consequentialEquipmentFailure)

def OnorbitEvent_FullAddInclined(builder, inclined):
    builder.PrependBoolSlot(37, inclined, 0)

def AddInclined(builder, inclined):
    OnorbitEvent_FullAddInclined(builder, inclined)

def OnorbitEvent_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    OnorbitEvent_FullAddDescription(builder, description)

def OnorbitEvent_FullAddRemarks(builder, remarks):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(remarks), 0)

def AddRemarks(builder, remarks):
    OnorbitEvent_FullAddRemarks(builder, remarks)

def OnorbitEvent_FullAddInsuranceLossNotes(builder, insuranceLossNotes):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(insuranceLossNotes), 0)

def AddInsuranceLossNotes(builder, insuranceLossNotes):
    OnorbitEvent_FullAddInsuranceLossNotes(builder, insuranceLossNotes)

def OnorbitEvent_FullAddCapabilityLossNotes(builder, capabilityLossNotes):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(capabilityLossNotes), 0)

def AddCapabilityLossNotes(builder, capabilityLossNotes):
    OnorbitEvent_FullAddCapabilityLossNotes(builder, capabilityLossNotes)

def OnorbitEvent_FullAddInsuranceCarriedNotes(builder, insuranceCarriedNotes):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(insuranceCarriedNotes), 0)

def AddInsuranceCarriedNotes(builder, insuranceCarriedNotes):
    OnorbitEvent_FullAddInsuranceCarriedNotes(builder, insuranceCarriedNotes)

def OnorbitEvent_FullAddEquipmentCausingLossNotes(builder, equipmentCausingLossNotes):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(equipmentCausingLossNotes), 0)

def AddEquipmentCausingLossNotes(builder, equipmentCausingLossNotes):
    OnorbitEvent_FullAddEquipmentCausingLossNotes(builder, equipmentCausingLossNotes)

def OnorbitEvent_FullAddEventType(builder, eventType):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(eventType), 0)

def AddEventType(builder, eventType):
    OnorbitEvent_FullAddEventType(builder, eventType)

def OnorbitEvent_FullAddEventResult(builder, eventResult):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(eventResult), 0)

def AddEventResult(builder, eventResult):
    OnorbitEvent_FullAddEventResult(builder, eventResult)

def OnorbitEvent_FullAddObjectStatus(builder, objectStatus):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(objectStatus), 0)

def AddObjectStatus(builder, objectStatus):
    OnorbitEvent_FullAddObjectStatus(builder, objectStatus)

def OnorbitEvent_FullAddSatellitePosition(builder, satellitePosition):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(satellitePosition), 0)

def AddSatellitePosition(builder, satellitePosition):
    OnorbitEvent_FullAddSatellitePosition(builder, satellitePosition)

def OnorbitEvent_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitEvent_FullAddSource(builder, source)

def OnorbitEvent_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitEvent_FullAddOrigin(builder, origin)

def OnorbitEvent_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(50, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitEvent_FullAddDataMode(builder, dataMode)

def OnorbitEvent_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitEvent_FullAddCreatedAt(builder, createdAt)

def OnorbitEvent_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitEvent_FullAddCreatedBy(builder, createdBy)

def OnorbitEvent_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OnorbitEvent_FullAddUpdatedAt(builder, updatedAt)

def OnorbitEvent_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OnorbitEvent_FullAddUpdatedBy(builder, updatedBy)

def OnorbitEvent_FullAddOnOrbit(builder, onOrbit):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(onOrbit), 0)

def AddOnOrbit(builder, onOrbit):
    OnorbitEvent_FullAddOnOrbit(builder, onOrbit)

def OnorbitEvent_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitEvent_FullAddOrigNetwork(builder, origNetwork)

def OnorbitEvent_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitEvent_FullEnd(builder)


class OnorbitEvent_FullT(object):

    # OnorbitEvent_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.derivedFrom = None  # type: str
        self.declassificationDate = None  # type: str
        self.declassificationString = None  # type: str
        self.idOnOrbit = None  # type: str
        self.satNo = 0  # type: int
        self.origObjectId = None  # type: str
        self.eventTime = None  # type: str
        self.eventTimeNotes = None  # type: str
        self.operatorOrgId = None  # type: str
        self.ownerOrgId = None  # type: str
        self.lesseeOrgId = None  # type: str
        self.operatedOnBehalfOfOrgId = None  # type: str
        self.geoPosition = 0.0  # type: float
        self.planeSlot = None  # type: str
        self.planeNumber = None  # type: str
        self.positionStatus = None  # type: str
        self.untilTime = None  # type: str
        self.officialLossDate = None  # type: str
        self.netAmount = 0.0  # type: float
        self.underlyingCause = None  # type: str
        self.capabilityLoss = 0.0  # type: float
        self.capacityLoss = 0.0  # type: float
        self.insuranceLoss = 0.0  # type: float
        self.thirdPartyInsuranceLoss = 0.0  # type: float
        self.injured = 0  # type: int
        self.killed = 0  # type: int
        self.lifeLost = 0.0  # type: float
        self.ageAtEvent = 0.0  # type: float
        self.achievedFlightPhase = None  # type: str
        self.occurrenceFlightPhase = None  # type: str
        self.stageAtFault = None  # type: str
        self.equipmentAtFault = None  # type: str
        self.equipmentTypeAtFault = None  # type: str
        self.equipmentPartAtFault = None  # type: str
        self.consequentialEquipmentFailure = None  # type: str
        self.inclined = False  # type: bool
        self.description = None  # type: str
        self.remarks = None  # type: str
        self.insuranceLossNotes = None  # type: str
        self.capabilityLossNotes = None  # type: str
        self.insuranceCarriedNotes = None  # type: str
        self.equipmentCausingLossNotes = None  # type: str
        self.eventType = None  # type: str
        self.eventResult = None  # type: str
        self.objectStatus = None  # type: str
        self.satellitePosition = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.onOrbit = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitEventFull = OnorbitEvent_Full()
        onorbitEventFull.Init(buf, pos)
        return cls.InitFromObj(onorbitEventFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitEventFull):
        x = OnorbitEvent_FullT()
        x._UnPack(onorbitEventFull)
        return x

    # OnorbitEvent_FullT
    def _UnPack(self, onorbitEventFull):
        if onorbitEventFull is None:
            return
        self.id = onorbitEventFull.Id()
        self.classificationMarking = onorbitEventFull.ClassificationMarking()
        self.derivedFrom = onorbitEventFull.DerivedFrom()
        self.declassificationDate = onorbitEventFull.DeclassificationDate()
        self.declassificationString = onorbitEventFull.DeclassificationString()
        self.idOnOrbit = onorbitEventFull.IdOnOrbit()
        self.satNo = onorbitEventFull.SatNo()
        self.origObjectId = onorbitEventFull.OrigObjectId()
        self.eventTime = onorbitEventFull.EventTime()
        self.eventTimeNotes = onorbitEventFull.EventTimeNotes()
        self.operatorOrgId = onorbitEventFull.OperatorOrgId()
        self.ownerOrgId = onorbitEventFull.OwnerOrgId()
        self.lesseeOrgId = onorbitEventFull.LesseeOrgId()
        self.operatedOnBehalfOfOrgId = onorbitEventFull.OperatedOnBehalfOfOrgId()
        self.geoPosition = onorbitEventFull.GeoPosition()
        self.planeSlot = onorbitEventFull.PlaneSlot()
        self.planeNumber = onorbitEventFull.PlaneNumber()
        self.positionStatus = onorbitEventFull.PositionStatus()
        self.untilTime = onorbitEventFull.UntilTime()
        self.officialLossDate = onorbitEventFull.OfficialLossDate()
        self.netAmount = onorbitEventFull.NetAmount()
        self.underlyingCause = onorbitEventFull.UnderlyingCause()
        self.capabilityLoss = onorbitEventFull.CapabilityLoss()
        self.capacityLoss = onorbitEventFull.CapacityLoss()
        self.insuranceLoss = onorbitEventFull.InsuranceLoss()
        self.thirdPartyInsuranceLoss = onorbitEventFull.ThirdPartyInsuranceLoss()
        self.injured = onorbitEventFull.Injured()
        self.killed = onorbitEventFull.Killed()
        self.lifeLost = onorbitEventFull.LifeLost()
        self.ageAtEvent = onorbitEventFull.AgeAtEvent()
        self.achievedFlightPhase = onorbitEventFull.AchievedFlightPhase()
        self.occurrenceFlightPhase = onorbitEventFull.OccurrenceFlightPhase()
        self.stageAtFault = onorbitEventFull.StageAtFault()
        self.equipmentAtFault = onorbitEventFull.EquipmentAtFault()
        self.equipmentTypeAtFault = onorbitEventFull.EquipmentTypeAtFault()
        self.equipmentPartAtFault = onorbitEventFull.EquipmentPartAtFault()
        self.consequentialEquipmentFailure = onorbitEventFull.ConsequentialEquipmentFailure()
        self.inclined = onorbitEventFull.Inclined()
        self.description = onorbitEventFull.Description()
        self.remarks = onorbitEventFull.Remarks()
        self.insuranceLossNotes = onorbitEventFull.InsuranceLossNotes()
        self.capabilityLossNotes = onorbitEventFull.CapabilityLossNotes()
        self.insuranceCarriedNotes = onorbitEventFull.InsuranceCarriedNotes()
        self.equipmentCausingLossNotes = onorbitEventFull.EquipmentCausingLossNotes()
        self.eventType = onorbitEventFull.EventType()
        self.eventResult = onorbitEventFull.EventResult()
        self.objectStatus = onorbitEventFull.ObjectStatus()
        self.satellitePosition = onorbitEventFull.SatellitePosition()
        self.source = onorbitEventFull.Source()
        self.origin = onorbitEventFull.Origin()
        self.dataMode = onorbitEventFull.DataMode()
        self.createdAt = onorbitEventFull.CreatedAt()
        self.createdBy = onorbitEventFull.CreatedBy()
        self.updatedAt = onorbitEventFull.UpdatedAt()
        self.updatedBy = onorbitEventFull.UpdatedBy()
        self.onOrbit = onorbitEventFull.OnOrbit()
        self.origNetwork = onorbitEventFull.OrigNetwork()

    # OnorbitEvent_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.derivedFrom is not None:
            derivedFrom = builder.CreateString(self.derivedFrom)
        if self.declassificationDate is not None:
            declassificationDate = builder.CreateString(self.declassificationDate)
        if self.declassificationString is not None:
            declassificationString = builder.CreateString(self.declassificationString)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.eventTime is not None:
            eventTime = builder.CreateString(self.eventTime)
        if self.eventTimeNotes is not None:
            eventTimeNotes = builder.CreateString(self.eventTimeNotes)
        if self.operatorOrgId is not None:
            operatorOrgId = builder.CreateString(self.operatorOrgId)
        if self.ownerOrgId is not None:
            ownerOrgId = builder.CreateString(self.ownerOrgId)
        if self.lesseeOrgId is not None:
            lesseeOrgId = builder.CreateString(self.lesseeOrgId)
        if self.operatedOnBehalfOfOrgId is not None:
            operatedOnBehalfOfOrgId = builder.CreateString(self.operatedOnBehalfOfOrgId)
        if self.planeSlot is not None:
            planeSlot = builder.CreateString(self.planeSlot)
        if self.planeNumber is not None:
            planeNumber = builder.CreateString(self.planeNumber)
        if self.positionStatus is not None:
            positionStatus = builder.CreateString(self.positionStatus)
        if self.untilTime is not None:
            untilTime = builder.CreateString(self.untilTime)
        if self.officialLossDate is not None:
            officialLossDate = builder.CreateString(self.officialLossDate)
        if self.underlyingCause is not None:
            underlyingCause = builder.CreateString(self.underlyingCause)
        if self.achievedFlightPhase is not None:
            achievedFlightPhase = builder.CreateString(self.achievedFlightPhase)
        if self.occurrenceFlightPhase is not None:
            occurrenceFlightPhase = builder.CreateString(self.occurrenceFlightPhase)
        if self.stageAtFault is not None:
            stageAtFault = builder.CreateString(self.stageAtFault)
        if self.equipmentAtFault is not None:
            equipmentAtFault = builder.CreateString(self.equipmentAtFault)
        if self.equipmentTypeAtFault is not None:
            equipmentTypeAtFault = builder.CreateString(self.equipmentTypeAtFault)
        if self.equipmentPartAtFault is not None:
            equipmentPartAtFault = builder.CreateString(self.equipmentPartAtFault)
        if self.consequentialEquipmentFailure is not None:
            consequentialEquipmentFailure = builder.CreateString(self.consequentialEquipmentFailure)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.remarks is not None:
            remarks = builder.CreateString(self.remarks)
        if self.insuranceLossNotes is not None:
            insuranceLossNotes = builder.CreateString(self.insuranceLossNotes)
        if self.capabilityLossNotes is not None:
            capabilityLossNotes = builder.CreateString(self.capabilityLossNotes)
        if self.insuranceCarriedNotes is not None:
            insuranceCarriedNotes = builder.CreateString(self.insuranceCarriedNotes)
        if self.equipmentCausingLossNotes is not None:
            equipmentCausingLossNotes = builder.CreateString(self.equipmentCausingLossNotes)
        if self.eventType is not None:
            eventType = builder.CreateString(self.eventType)
        if self.eventResult is not None:
            eventResult = builder.CreateString(self.eventResult)
        if self.objectStatus is not None:
            objectStatus = builder.CreateString(self.objectStatus)
        if self.satellitePosition is not None:
            satellitePosition = builder.CreateString(self.satellitePosition)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.onOrbit is not None:
            onOrbit = builder.CreateString(self.onOrbit)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitEvent_FullStart(builder)
        if self.id is not None:
            OnorbitEvent_FullAddId(builder, id)
        if self.classificationMarking is not None:
            OnorbitEvent_FullAddClassificationMarking(builder, classificationMarking)
        if self.derivedFrom is not None:
            OnorbitEvent_FullAddDerivedFrom(builder, derivedFrom)
        if self.declassificationDate is not None:
            OnorbitEvent_FullAddDeclassificationDate(builder, declassificationDate)
        if self.declassificationString is not None:
            OnorbitEvent_FullAddDeclassificationString(builder, declassificationString)
        if self.idOnOrbit is not None:
            OnorbitEvent_FullAddIdOnOrbit(builder, idOnOrbit)
        OnorbitEvent_FullAddSatNo(builder, self.satNo)
        if self.origObjectId is not None:
            OnorbitEvent_FullAddOrigObjectId(builder, origObjectId)
        if self.eventTime is not None:
            OnorbitEvent_FullAddEventTime(builder, eventTime)
        if self.eventTimeNotes is not None:
            OnorbitEvent_FullAddEventTimeNotes(builder, eventTimeNotes)
        if self.operatorOrgId is not None:
            OnorbitEvent_FullAddOperatorOrgId(builder, operatorOrgId)
        if self.ownerOrgId is not None:
            OnorbitEvent_FullAddOwnerOrgId(builder, ownerOrgId)
        if self.lesseeOrgId is not None:
            OnorbitEvent_FullAddLesseeOrgId(builder, lesseeOrgId)
        if self.operatedOnBehalfOfOrgId is not None:
            OnorbitEvent_FullAddOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgId)
        OnorbitEvent_FullAddGeoPosition(builder, self.geoPosition)
        if self.planeSlot is not None:
            OnorbitEvent_FullAddPlaneSlot(builder, planeSlot)
        if self.planeNumber is not None:
            OnorbitEvent_FullAddPlaneNumber(builder, planeNumber)
        if self.positionStatus is not None:
            OnorbitEvent_FullAddPositionStatus(builder, positionStatus)
        if self.untilTime is not None:
            OnorbitEvent_FullAddUntilTime(builder, untilTime)
        if self.officialLossDate is not None:
            OnorbitEvent_FullAddOfficialLossDate(builder, officialLossDate)
        OnorbitEvent_FullAddNetAmount(builder, self.netAmount)
        if self.underlyingCause is not None:
            OnorbitEvent_FullAddUnderlyingCause(builder, underlyingCause)
        OnorbitEvent_FullAddCapabilityLoss(builder, self.capabilityLoss)
        OnorbitEvent_FullAddCapacityLoss(builder, self.capacityLoss)
        OnorbitEvent_FullAddInsuranceLoss(builder, self.insuranceLoss)
        OnorbitEvent_FullAddThirdPartyInsuranceLoss(builder, self.thirdPartyInsuranceLoss)
        OnorbitEvent_FullAddInjured(builder, self.injured)
        OnorbitEvent_FullAddKilled(builder, self.killed)
        OnorbitEvent_FullAddLifeLost(builder, self.lifeLost)
        OnorbitEvent_FullAddAgeAtEvent(builder, self.ageAtEvent)
        if self.achievedFlightPhase is not None:
            OnorbitEvent_FullAddAchievedFlightPhase(builder, achievedFlightPhase)
        if self.occurrenceFlightPhase is not None:
            OnorbitEvent_FullAddOccurrenceFlightPhase(builder, occurrenceFlightPhase)
        if self.stageAtFault is not None:
            OnorbitEvent_FullAddStageAtFault(builder, stageAtFault)
        if self.equipmentAtFault is not None:
            OnorbitEvent_FullAddEquipmentAtFault(builder, equipmentAtFault)
        if self.equipmentTypeAtFault is not None:
            OnorbitEvent_FullAddEquipmentTypeAtFault(builder, equipmentTypeAtFault)
        if self.equipmentPartAtFault is not None:
            OnorbitEvent_FullAddEquipmentPartAtFault(builder, equipmentPartAtFault)
        if self.consequentialEquipmentFailure is not None:
            OnorbitEvent_FullAddConsequentialEquipmentFailure(builder, consequentialEquipmentFailure)
        OnorbitEvent_FullAddInclined(builder, self.inclined)
        if self.description is not None:
            OnorbitEvent_FullAddDescription(builder, description)
        if self.remarks is not None:
            OnorbitEvent_FullAddRemarks(builder, remarks)
        if self.insuranceLossNotes is not None:
            OnorbitEvent_FullAddInsuranceLossNotes(builder, insuranceLossNotes)
        if self.capabilityLossNotes is not None:
            OnorbitEvent_FullAddCapabilityLossNotes(builder, capabilityLossNotes)
        if self.insuranceCarriedNotes is not None:
            OnorbitEvent_FullAddInsuranceCarriedNotes(builder, insuranceCarriedNotes)
        if self.equipmentCausingLossNotes is not None:
            OnorbitEvent_FullAddEquipmentCausingLossNotes(builder, equipmentCausingLossNotes)
        if self.eventType is not None:
            OnorbitEvent_FullAddEventType(builder, eventType)
        if self.eventResult is not None:
            OnorbitEvent_FullAddEventResult(builder, eventResult)
        if self.objectStatus is not None:
            OnorbitEvent_FullAddObjectStatus(builder, objectStatus)
        if self.satellitePosition is not None:
            OnorbitEvent_FullAddSatellitePosition(builder, satellitePosition)
        if self.source is not None:
            OnorbitEvent_FullAddSource(builder, source)
        if self.origin is not None:
            OnorbitEvent_FullAddOrigin(builder, origin)
        OnorbitEvent_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            OnorbitEvent_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitEvent_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OnorbitEvent_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OnorbitEvent_FullAddUpdatedBy(builder, updatedBy)
        if self.onOrbit is not None:
            OnorbitEvent_FullAddOnOrbit(builder, onOrbit)
        if self.origNetwork is not None:
            OnorbitEvent_FullAddOrigNetwork(builder, origNetwork)
        onorbitEventFull = OnorbitEvent_FullEnd(builder)
        return onorbitEventFull
