# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Injury specifics.
class EvacInjury_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacInjury_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacInjury_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacInjury_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacInjury_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
    # Example: /// Example: ABRASION
    # Constraints: Minimum length = 0, Maximum length = 64
    # EvacInjury_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
    # Example: /// Example: ARM LEFT FRONT
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacInjury_Full
    def BodyPart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time of the injury, in ISO 8601 UTC format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacInjury_Full
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Additional comments on the patient's injury information.
    # Example: /// Example: Comments on the patient's injury.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EvacInjury_Full
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacInjury_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacInjury_FullStart(builder)

def EvacInjury_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacInjury_FullAddType(builder, type)

def EvacInjury_FullAddBodyPart(builder, bodyPart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodyPart), 0)

def AddBodyPart(builder, bodyPart):
    EvacInjury_FullAddBodyPart(builder, bodyPart)

def EvacInjury_FullAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacInjury_FullAddTime(builder, time)

def EvacInjury_FullAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    EvacInjury_FullAddComments(builder, comments)

def EvacInjury_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacInjury_FullEnd(builder)


class EvacInjury_FullT(object):

    # EvacInjury_FullT
    def __init__(self):
        self.type = None  # type: str
        self.bodyPart = None  # type: str
        self.time = None  # type: str
        self.comments = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacInjuryFull = EvacInjury_Full()
        evacInjuryFull.Init(buf, pos)
        return cls.InitFromObj(evacInjuryFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacInjuryFull):
        x = EvacInjury_FullT()
        x._UnPack(evacInjuryFull)
        return x

    # EvacInjury_FullT
    def _UnPack(self, evacInjuryFull):
        if evacInjuryFull is None:
            return
        self.type = evacInjuryFull.Type()
        self.bodyPart = evacInjuryFull.BodyPart()
        self.time = evacInjuryFull.Time()
        self.comments = evacInjuryFull.Comments()

    # EvacInjury_FullT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.bodyPart is not None:
            bodyPart = builder.CreateString(self.bodyPart)
        if self.time is not None:
            time = builder.CreateString(self.time)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        EvacInjury_FullStart(builder)
        if self.type is not None:
            EvacInjury_FullAddType(builder, type)
        if self.bodyPart is not None:
            EvacInjury_FullAddBodyPart(builder, bodyPart)
        if self.time is not None:
            EvacInjury_FullAddTime(builder, time)
        if self.comments is not None:
            EvacInjury_FullAddComments(builder, comments)
        evacInjuryFull = EvacInjury_FullEnd(builder)
        return evacInjuryFull
