# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Array to support sparse data collections.
class IonoObservationDatum_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationDatum_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationDatum_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationDatum_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationDatum_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notes for the datum with details of what the data is, units, etc.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservationDatum_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array to support sparse data collections.
    # Example: /// Example: [1.1, 2.1, 3.1]
    # Constraints: No constraints specified.
    # IonoObservationDatum_Full
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationDatum_Full
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationDatum_Full
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def IonoObservationDatum_FullStart(builder):
    builder.StartObject(2)

def Start(builder):
    IonoObservationDatum_FullStart(builder)

def IonoObservationDatum_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    IonoObservationDatum_FullAddNotes(builder, notes)

def IonoObservationDatum_FullAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationDatum_FullAddData(builder, data)

def IonoObservationDatum_FullStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationDatum_FullStartDataVector(builder, numElems)

def IonoObservationDatum_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationDatum_FullEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationDatum_FullT(object):

    # IonoObservationDatum_FullT
    def __init__(self):
        self.notes = None  # type: str
        self.data = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationDatumFull = IonoObservationDatum_Full()
        ionoObservationDatumFull.Init(buf, pos)
        return cls.InitFromObj(ionoObservationDatumFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationDatumFull):
        x = IonoObservationDatum_FullT()
        x._UnPack(ionoObservationDatumFull)
        return x

    # IonoObservationDatum_FullT
    def _UnPack(self, ionoObservationDatumFull):
        if ionoObservationDatumFull is None:
            return
        self.notes = ionoObservationDatumFull.Notes()
        if not ionoObservationDatumFull.DataIsNone():
            self.data = []
            for i in range(ionoObservationDatumFull.DataLength()):
                self.data.append(ionoObservationDatumFull.Data(i))

    # IonoObservationDatum_FullT
    def Pack(self, builder):
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationDatum_FullStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        IonoObservationDatum_FullStart(builder)
        if self.notes is not None:
            IonoObservationDatum_FullAddNotes(builder, notes)
        if self.data is not None:
            IonoObservationDatum_FullAddData(builder, data)
        ionoObservationDatumFull = IonoObservationDatum_FullEnd(builder)
        return ionoObservationDatumFull
