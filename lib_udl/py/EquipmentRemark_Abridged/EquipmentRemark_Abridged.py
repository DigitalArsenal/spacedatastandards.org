# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
class EquipmentRemark_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EquipmentRemark_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEquipmentRemark_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EquipmentRemark_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x51\x55\x49", size_prefixed=size_prefixed)

    # EquipmentRemark_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # EquipmentRemark_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # EquipmentRemark_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the Equipment to which this remark applies.
    # Example: /// Example: EQUIPMENT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # EquipmentRemark_Abridged
    def IdEquipment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Equipment Remark record from the originating system.
    # Example: /// Example: 123456ABC
    # Constraints: Minimum length = 0, Maximum length = 36
    # EquipmentRemark_Abridged
    def AltRmkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the remark.
    # Example: /// Example: Remark name
    # Constraints: Minimum length = 0, Maximum length = 64
    # EquipmentRemark_Abridged
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
    # Example: /// Example: Restriction
    # Constraints: Minimum length = 0, Maximum length = 64
    # EquipmentRemark_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The text of the remark.
    # Example: /// Example: This is a remark
    # Constraints: Minimum length = 1, Maximum length = 16384
    # EquipmentRemark_Abridged
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
    # Example: /// Example: M
    # Constraints: Minimum length = 0, Maximum length = 16
    # EquipmentRemark_Abridged
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # EquipmentRemark_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # EquipmentRemark_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # EquipmentRemark_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # EquipmentRemark_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # EquipmentRemark_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def EquipmentRemark_AbridgedStart(builder):
    builder.StartObject(13)

def Start(builder):
    EquipmentRemark_AbridgedStart(builder)

def EquipmentRemark_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    EquipmentRemark_AbridgedAddId(builder, id)

def EquipmentRemark_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    EquipmentRemark_AbridgedAddClassificationMarking(builder, classificationMarking)

def EquipmentRemark_AbridgedAddIdEquipment(builder, idEquipment):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idEquipment), 0)

def AddIdEquipment(builder, idEquipment):
    EquipmentRemark_AbridgedAddIdEquipment(builder, idEquipment)

def EquipmentRemark_AbridgedAddAltRmkId(builder, altRmkId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altRmkId), 0)

def AddAltRmkId(builder, altRmkId):
    EquipmentRemark_AbridgedAddAltRmkId(builder, altRmkId)

def EquipmentRemark_AbridgedAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    EquipmentRemark_AbridgedAddName(builder, name)

def EquipmentRemark_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EquipmentRemark_AbridgedAddType(builder, type)

def EquipmentRemark_AbridgedAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    EquipmentRemark_AbridgedAddText(builder, text)

def EquipmentRemark_AbridgedAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def AddCode(builder, code):
    EquipmentRemark_AbridgedAddCode(builder, code)

def EquipmentRemark_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    EquipmentRemark_AbridgedAddCreatedAt(builder, createdAt)

def EquipmentRemark_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    EquipmentRemark_AbridgedAddCreatedBy(builder, createdBy)

def EquipmentRemark_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    EquipmentRemark_AbridgedAddSource(builder, source)

def EquipmentRemark_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    EquipmentRemark_AbridgedAddOrigin(builder, origin)

def EquipmentRemark_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(12, dataMode, 0)

def AddDataMode(builder, dataMode):
    EquipmentRemark_AbridgedAddDataMode(builder, dataMode)

def EquipmentRemark_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return EquipmentRemark_AbridgedEnd(builder)


class EquipmentRemark_AbridgedT(object):

    # EquipmentRemark_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idEquipment = None  # type: str
        self.altRmkId = None  # type: str
        self.name = None  # type: str
        self.type = None  # type: str
        self.text = None  # type: str
        self.code = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        equipmentRemarkAbridged = EquipmentRemark_Abridged()
        equipmentRemarkAbridged.Init(buf, pos)
        return cls.InitFromObj(equipmentRemarkAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, equipmentRemarkAbridged):
        x = EquipmentRemark_AbridgedT()
        x._UnPack(equipmentRemarkAbridged)
        return x

    # EquipmentRemark_AbridgedT
    def _UnPack(self, equipmentRemarkAbridged):
        if equipmentRemarkAbridged is None:
            return
        self.id = equipmentRemarkAbridged.Id()
        self.classificationMarking = equipmentRemarkAbridged.ClassificationMarking()
        self.idEquipment = equipmentRemarkAbridged.IdEquipment()
        self.altRmkId = equipmentRemarkAbridged.AltRmkId()
        self.name = equipmentRemarkAbridged.Name()
        self.type = equipmentRemarkAbridged.Type()
        self.text = equipmentRemarkAbridged.Text()
        self.code = equipmentRemarkAbridged.Code()
        self.createdAt = equipmentRemarkAbridged.CreatedAt()
        self.createdBy = equipmentRemarkAbridged.CreatedBy()
        self.source = equipmentRemarkAbridged.Source()
        self.origin = equipmentRemarkAbridged.Origin()
        self.dataMode = equipmentRemarkAbridged.DataMode()

    # EquipmentRemark_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idEquipment is not None:
            idEquipment = builder.CreateString(self.idEquipment)
        if self.altRmkId is not None:
            altRmkId = builder.CreateString(self.altRmkId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.code is not None:
            code = builder.CreateString(self.code)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        EquipmentRemark_AbridgedStart(builder)
        if self.id is not None:
            EquipmentRemark_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            EquipmentRemark_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idEquipment is not None:
            EquipmentRemark_AbridgedAddIdEquipment(builder, idEquipment)
        if self.altRmkId is not None:
            EquipmentRemark_AbridgedAddAltRmkId(builder, altRmkId)
        if self.name is not None:
            EquipmentRemark_AbridgedAddName(builder, name)
        if self.type is not None:
            EquipmentRemark_AbridgedAddType(builder, type)
        if self.text is not None:
            EquipmentRemark_AbridgedAddText(builder, text)
        if self.code is not None:
            EquipmentRemark_AbridgedAddCode(builder, code)
        if self.createdAt is not None:
            EquipmentRemark_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            EquipmentRemark_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            EquipmentRemark_AbridgedAddSource(builder, source)
        if self.origin is not None:
            EquipmentRemark_AbridgedAddOrigin(builder, origin)
        EquipmentRemark_AbridgedAddDataMode(builder, self.dataMode)
        equipmentRemarkAbridged = EquipmentRemark_AbridgedEnd(builder)
        return equipmentRemarkAbridged
