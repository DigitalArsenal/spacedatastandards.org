# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
class IonoObservationDensityProfileParabolic_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationDensityProfileParabolic_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationDensityProfileParabolic_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationDensityProfileParabolic_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationDensityProfileParabolic_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # General description of the QP computation algorithm.
    # Example: /// Example: Best-fit algorithm in NHPC software.
    # Constraints: No constraints specified.
    # IonoObservationDensityProfileParabolic_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Describes the E, F1, and F2 layers as parabolic-shape segments.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # IonoObservationDensityProfileParabolic_Ingest
    def ParabolicItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationDensityProfileParabolic_Ingest
    def ParabolicItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationDensityProfileParabolic_Ingest
    def ParabolicItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def IonoObservationDensityProfileParabolic_IngestStart(builder):
    builder.StartObject(2)

def Start(builder):
    IonoObservationDensityProfileParabolic_IngestStart(builder)

def IonoObservationDensityProfileParabolic_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    IonoObservationDensityProfileParabolic_IngestAddDescription(builder, description)

def IonoObservationDensityProfileParabolic_IngestAddParabolicItems(builder, parabolicItems):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parabolicItems), 0)

def AddParabolicItems(builder, parabolicItems):
    IonoObservationDensityProfileParabolic_IngestAddParabolicItems(builder, parabolicItems)

def IonoObservationDensityProfileParabolic_IngestStartParabolicItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartParabolicItemsVector(builder, numElems):
    return IonoObservationDensityProfileParabolic_IngestStartParabolicItemsVector(builder, numElems)

def IonoObservationDensityProfileParabolic_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationDensityProfileParabolic_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationDensityProfileParabolic_IngestT(object):

    # IonoObservationDensityProfileParabolic_IngestT
    def __init__(self):
        self.description = None  # type: str
        self.parabolicItems = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationDensityProfileParabolicIngest = IonoObservationDensityProfileParabolic_Ingest()
        ionoObservationDensityProfileParabolicIngest.Init(buf, pos)
        return cls.InitFromObj(ionoObservationDensityProfileParabolicIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationDensityProfileParabolicIngest):
        x = IonoObservationDensityProfileParabolic_IngestT()
        x._UnPack(ionoObservationDensityProfileParabolicIngest)
        return x

    # IonoObservationDensityProfileParabolic_IngestT
    def _UnPack(self, ionoObservationDensityProfileParabolicIngest):
        if ionoObservationDensityProfileParabolicIngest is None:
            return
        self.description = ionoObservationDensityProfileParabolicIngest.Description()
        if not ionoObservationDensityProfileParabolicIngest.ParabolicItemsIsNone():
            self.parabolicItems = []
            for i in range(ionoObservationDensityProfileParabolicIngest.ParabolicItemsLength()):
                self.parabolicItems.append(ionoObservationDensityProfileParabolicIngest.ParabolicItems(i))

    # IonoObservationDensityProfileParabolic_IngestT
    def Pack(self, builder):
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.parabolicItems is not None:
            parabolicItemslist = []
            for i in range(len(self.parabolicItems)):
                parabolicItemslist.append(builder.CreateString(self.parabolicItems[i]))
            IonoObservationDensityProfileParabolic_IngestStartParabolicItemsVector(builder, len(self.parabolicItems))
            for i in reversed(range(len(self.parabolicItems))):
                builder.PrependUOffsetTRelative(parabolicItemslist[i])
            parabolicItems = builder.EndVector()
        IonoObservationDensityProfileParabolic_IngestStart(builder)
        if self.description is not None:
            IonoObservationDensityProfileParabolic_IngestAddDescription(builder, description)
        if self.parabolicItems is not None:
            IonoObservationDensityProfileParabolic_IngestAddParabolicItems(builder, parabolicItems)
        ionoObservationDensityProfileParabolicIngest = IonoObservationDensityProfileParabolic_IngestEnd(builder)
        return ionoObservationDensityProfileParabolicIngest
