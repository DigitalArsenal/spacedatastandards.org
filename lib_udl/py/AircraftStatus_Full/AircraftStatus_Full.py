# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
class AircraftStatus_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftStatus_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftStatus_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftStatus_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftStatus_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # AircraftStatus_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AircraftStatus_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the aircraft.
    # Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
    # Constraints: Minimum length = 1, Maximum length = 36
    # AircraftStatus_Full
    def IdAircraft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Alternate Aircraft Identifier provided by source.
    # Example: /// Example: ORIG-AIRCRAFT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftStatus_Full
    def AltAircraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
    # Example: /// Example: AVAILABLE
    # Constraints: Minimum length = 0, Maximum length = 32
    # AircraftStatus_Full
    def CurrentState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # If not airborne, the unique identifier of the installation currently hosting the aircraft.
    # Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftStatus_Full
    def IdAirfield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # US Air Force geographic location code of the airfield where the aircraft is located.
    # Example: /// Example: AJJY
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftStatus_Full
    def GeoLoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
    # Example: /// Example: EGLL
    # Constraints: Minimum length = 0, Maximum length = 4
    # AircraftStatus_Full
    def PreviousIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
    # Example: /// Example: KCHS
    # Constraints: Minimum length = 0, Maximum length = 4
    # AircraftStatus_Full
    def CurrentIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
    # Example: /// Example: PHNL
    # Constraints: Minimum length = 0, Maximum length = 4
    # AircraftStatus_Full
    def NextIcao(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
    # Example: /// Example: Landing
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftStatus_Full
    def FlightPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The turnaround start time, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def TaStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def EarliestTaendTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
    # Example: /// Example: ABLE
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftStatus_Full
    def MissionReadiness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mass of fuel remaining on the aircraft, in kilograms.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def Fuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Used in conjunction with the fuel field to indicate either burnable or offload fuel.
    # Example: /// Example: Burn
    # Constraints: Minimum length = 0, Maximum length = 8
    # AircraftStatus_Full
    def FuelFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating that the aircraft is capable of making at least one gun pass.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def GunCapable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
    # Example: /// Example: 7.62 MM
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatus_Full
    def GunRdsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The lower bound of the estimated number of gun rounds available.
    # Example: /// Example: 150
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def GunRdsMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The upper bound of the estimated number of gun rounds available.
    # Example: /// Example: 550
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def GunRdsMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
    # Example: /// Example: OPERATIONAL
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftStatus_Full
    def AirToAirStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
    # Example: /// Example: OPERATIONAL
    # Constraints: Minimum length = 0, Maximum length = 16
    # AircraftStatus_Full
    def AirToGroundStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
    # Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def Inventory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftStatus_Full
    def InventoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftStatus_Full
    def InventoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
    # Example: /// Example: [1, 2]
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def InventoryMin(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftStatus_Full
    def InventoryMinLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftStatus_Full
    def InventoryMinIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
    # Example: /// Example: [2, 2]
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def InventoryMax(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftStatus_Full
    def InventoryMaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftStatus_Full
    def InventoryMaxIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # List of unavailable systems that would normally be on this aircraft.
    # Example: /// Example: ['CMDS', 'AOC']
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def UnavailableSys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftStatus_Full
    def UnavailableSysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftStatus_Full
    def UnavailableSysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # List of additional operational systems on this aircraft beyond what is normally available.
    # Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def AdditionalSys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AircraftStatus_Full
    def AdditionalSysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AircraftStatus_Full
    def AdditionalSysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Optional notes/comments concerning this aircraft status.
    # Example: /// Example: Some notes for aircraft A
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AircraftStatus_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maintenance pacing remarks assocociated with this aircraft.
    # Example: /// Example: COM2 INOP
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AircraftStatus_Full
    def MxRemark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The maintenance status of the aircraft.
    # Example: /// Example: maintenance status
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftStatus_Full
    def MaintStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the maintenance discrepancy that drives the current maintenance status.
    # Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
    # Constraints: Minimum length = 0, Maximum length = 128
    # AircraftStatus_Full
    def MaintStatusDriver(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicates the priority of the maintenance effort.
    # Example: /// Example: 1
    # Constraints: Minimum length = 0, Maximum length = 1
    # AircraftStatus_Full
    def MaintPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
    # Example: /// Example: A2
    # Constraints: Minimum length = 0, Maximum length = 2
    # AircraftStatus_Full
    def AlphaStatusCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def MaintStatusUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-09-09T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def LastInspectionDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Military aircraft maintenance point of contact for this aircraft.
    # Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
    # Constraints: Minimum length = 0, Maximum length = 32
    # AircraftStatus_Full
    def MaintPoc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
    # Example: /// Example: ALERT
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftStatus_Full
    def GroundStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
    # Example: /// Example: CLEAR
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftStatus_Full
    def ContaminationStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
    # Example: /// Example: DELIVERED
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftStatus_Full
    def FuelStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name or ID of the external user that updated this status.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftStatus_Full
    def LastUpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def TroubleshootEtic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def Etic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The parking location of this aircraft.
    # Example: /// Example: B1
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftStatus_Full
    def ParkLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
    # Example: /// Example: GDSS
    # Constraints: Minimum length = 0, Maximum length = 24
    # AircraftStatus_Full
    def ParkLocationSystem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
    # Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftStatus_Full
    def IdPoi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftStatus_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatus_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftStatus_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatus_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftStatus_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatus_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AircraftStatus_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # AircraftStatus_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AircraftStatus_FullStart(builder):
    builder.StartObject(54)

def Start(builder):
    AircraftStatus_FullStart(builder)

def AircraftStatus_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AircraftStatus_FullAddId(builder, id)

def AircraftStatus_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AircraftStatus_FullAddClassificationMarking(builder, classificationMarking)

def AircraftStatus_FullAddIdAircraft(builder, idAircraft):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idAircraft), 0)

def AddIdAircraft(builder, idAircraft):
    AircraftStatus_FullAddIdAircraft(builder, idAircraft)

def AircraftStatus_FullAddAltAircraftId(builder, altAircraftId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altAircraftId), 0)

def AddAltAircraftId(builder, altAircraftId):
    AircraftStatus_FullAddAltAircraftId(builder, altAircraftId)

def AircraftStatus_FullAddCurrentState(builder, currentState):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(currentState), 0)

def AddCurrentState(builder, currentState):
    AircraftStatus_FullAddCurrentState(builder, currentState)

def AircraftStatus_FullAddIdAirfield(builder, idAirfield):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idAirfield), 0)

def AddIdAirfield(builder, idAirfield):
    AircraftStatus_FullAddIdAirfield(builder, idAirfield)

def AircraftStatus_FullAddGeoLoc(builder, geoLoc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(geoLoc), 0)

def AddGeoLoc(builder, geoLoc):
    AircraftStatus_FullAddGeoLoc(builder, geoLoc)

def AircraftStatus_FullAddPreviousIcao(builder, previousIcao):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(previousIcao), 0)

def AddPreviousIcao(builder, previousIcao):
    AircraftStatus_FullAddPreviousIcao(builder, previousIcao)

def AircraftStatus_FullAddCurrentIcao(builder, currentIcao):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(currentIcao), 0)

def AddCurrentIcao(builder, currentIcao):
    AircraftStatus_FullAddCurrentIcao(builder, currentIcao)

def AircraftStatus_FullAddNextIcao(builder, nextIcao):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(nextIcao), 0)

def AddNextIcao(builder, nextIcao):
    AircraftStatus_FullAddNextIcao(builder, nextIcao)

def AircraftStatus_FullAddFlightPhase(builder, flightPhase):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(flightPhase), 0)

def AddFlightPhase(builder, flightPhase):
    AircraftStatus_FullAddFlightPhase(builder, flightPhase)

def AircraftStatus_FullAddTaStartTime(builder, taStartTime):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(taStartTime), 0)

def AddTaStartTime(builder, taStartTime):
    AircraftStatus_FullAddTaStartTime(builder, taStartTime)

def AircraftStatus_FullAddEarliestTaendTime(builder, earliestTaendTime):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(earliestTaendTime), 0)

def AddEarliestTaendTime(builder, earliestTaendTime):
    AircraftStatus_FullAddEarliestTaendTime(builder, earliestTaendTime)

def AircraftStatus_FullAddMissionReadiness(builder, missionReadiness):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(missionReadiness), 0)

def AddMissionReadiness(builder, missionReadiness):
    AircraftStatus_FullAddMissionReadiness(builder, missionReadiness)

def AircraftStatus_FullAddFuel(builder, fuel):
    builder.PrependInt32Slot(14, fuel, 0)

def AddFuel(builder, fuel):
    AircraftStatus_FullAddFuel(builder, fuel)

def AircraftStatus_FullAddFuelFunction(builder, fuelFunction):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(fuelFunction), 0)

def AddFuelFunction(builder, fuelFunction):
    AircraftStatus_FullAddFuelFunction(builder, fuelFunction)

def AircraftStatus_FullAddGunCapable(builder, gunCapable):
    builder.PrependBoolSlot(16, gunCapable, 0)

def AddGunCapable(builder, gunCapable):
    AircraftStatus_FullAddGunCapable(builder, gunCapable)

def AircraftStatus_FullAddGunRdsType(builder, gunRdsType):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(gunRdsType), 0)

def AddGunRdsType(builder, gunRdsType):
    AircraftStatus_FullAddGunRdsType(builder, gunRdsType)

def AircraftStatus_FullAddGunRdsMin(builder, gunRdsMin):
    builder.PrependInt32Slot(18, gunRdsMin, 0)

def AddGunRdsMin(builder, gunRdsMin):
    AircraftStatus_FullAddGunRdsMin(builder, gunRdsMin)

def AircraftStatus_FullAddGunRdsMax(builder, gunRdsMax):
    builder.PrependInt32Slot(19, gunRdsMax, 0)

def AddGunRdsMax(builder, gunRdsMax):
    AircraftStatus_FullAddGunRdsMax(builder, gunRdsMax)

def AircraftStatus_FullAddAirToAirStatus(builder, airToAirStatus):
    builder.PrependInt8Slot(20, airToAirStatus, 0)

def AddAirToAirStatus(builder, airToAirStatus):
    AircraftStatus_FullAddAirToAirStatus(builder, airToAirStatus)

def AircraftStatus_FullAddAirToGroundStatus(builder, airToGroundStatus):
    builder.PrependInt8Slot(21, airToGroundStatus, 0)

def AddAirToGroundStatus(builder, airToGroundStatus):
    AircraftStatus_FullAddAirToGroundStatus(builder, airToGroundStatus)

def AircraftStatus_FullAddInventory(builder, inventory):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(inventory), 0)

def AddInventory(builder, inventory):
    AircraftStatus_FullAddInventory(builder, inventory)

def AircraftStatus_FullStartInventoryVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInventoryVector(builder, numElems):
    return AircraftStatus_FullStartInventoryVector(builder, numElems)

def AircraftStatus_FullAddInventoryMin(builder, inventoryMin):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(inventoryMin), 0)

def AddInventoryMin(builder, inventoryMin):
    AircraftStatus_FullAddInventoryMin(builder, inventoryMin)

def AircraftStatus_FullStartInventoryMinVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInventoryMinVector(builder, numElems):
    return AircraftStatus_FullStartInventoryMinVector(builder, numElems)

def AircraftStatus_FullAddInventoryMax(builder, inventoryMax):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(inventoryMax), 0)

def AddInventoryMax(builder, inventoryMax):
    AircraftStatus_FullAddInventoryMax(builder, inventoryMax)

def AircraftStatus_FullStartInventoryMaxVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInventoryMaxVector(builder, numElems):
    return AircraftStatus_FullStartInventoryMaxVector(builder, numElems)

def AircraftStatus_FullAddUnavailableSys(builder, unavailableSys):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(unavailableSys), 0)

def AddUnavailableSys(builder, unavailableSys):
    AircraftStatus_FullAddUnavailableSys(builder, unavailableSys)

def AircraftStatus_FullStartUnavailableSysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUnavailableSysVector(builder, numElems):
    return AircraftStatus_FullStartUnavailableSysVector(builder, numElems)

def AircraftStatus_FullAddAdditionalSys(builder, additionalSys):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(additionalSys), 0)

def AddAdditionalSys(builder, additionalSys):
    AircraftStatus_FullAddAdditionalSys(builder, additionalSys)

def AircraftStatus_FullStartAdditionalSysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAdditionalSysVector(builder, numElems):
    return AircraftStatus_FullStartAdditionalSysVector(builder, numElems)

def AircraftStatus_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    AircraftStatus_FullAddNotes(builder, notes)

def AircraftStatus_FullAddMxRemark(builder, mxRemark):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(mxRemark), 0)

def AddMxRemark(builder, mxRemark):
    AircraftStatus_FullAddMxRemark(builder, mxRemark)

def AircraftStatus_FullAddMaintStatus(builder, maintStatus):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(maintStatus), 0)

def AddMaintStatus(builder, maintStatus):
    AircraftStatus_FullAddMaintStatus(builder, maintStatus)

def AircraftStatus_FullAddMaintStatusDriver(builder, maintStatusDriver):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(maintStatusDriver), 0)

def AddMaintStatusDriver(builder, maintStatusDriver):
    AircraftStatus_FullAddMaintStatusDriver(builder, maintStatusDriver)

def AircraftStatus_FullAddMaintPriority(builder, maintPriority):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(maintPriority), 0)

def AddMaintPriority(builder, maintPriority):
    AircraftStatus_FullAddMaintPriority(builder, maintPriority)

def AircraftStatus_FullAddAlphaStatusCode(builder, alphaStatusCode):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(alphaStatusCode), 0)

def AddAlphaStatusCode(builder, alphaStatusCode):
    AircraftStatus_FullAddAlphaStatusCode(builder, alphaStatusCode)

def AircraftStatus_FullAddMaintStatusUpdate(builder, maintStatusUpdate):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(maintStatusUpdate), 0)

def AddMaintStatusUpdate(builder, maintStatusUpdate):
    AircraftStatus_FullAddMaintStatusUpdate(builder, maintStatusUpdate)

def AircraftStatus_FullAddLastInspectionDate(builder, lastInspectionDate):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(lastInspectionDate), 0)

def AddLastInspectionDate(builder, lastInspectionDate):
    AircraftStatus_FullAddLastInspectionDate(builder, lastInspectionDate)

def AircraftStatus_FullAddMaintPoc(builder, maintPoc):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(maintPoc), 0)

def AddMaintPoc(builder, maintPoc):
    AircraftStatus_FullAddMaintPoc(builder, maintPoc)

def AircraftStatus_FullAddGroundStatus(builder, groundStatus):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(groundStatus), 0)

def AddGroundStatus(builder, groundStatus):
    AircraftStatus_FullAddGroundStatus(builder, groundStatus)

def AircraftStatus_FullAddContaminationStatus(builder, contaminationStatus):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(contaminationStatus), 0)

def AddContaminationStatus(builder, contaminationStatus):
    AircraftStatus_FullAddContaminationStatus(builder, contaminationStatus)

def AircraftStatus_FullAddFuelStatus(builder, fuelStatus):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(fuelStatus), 0)

def AddFuelStatus(builder, fuelStatus):
    AircraftStatus_FullAddFuelStatus(builder, fuelStatus)

def AircraftStatus_FullAddLastUpdatedBy(builder, lastUpdatedBy):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(lastUpdatedBy), 0)

def AddLastUpdatedBy(builder, lastUpdatedBy):
    AircraftStatus_FullAddLastUpdatedBy(builder, lastUpdatedBy)

def AircraftStatus_FullAddTroubleshootEtic(builder, troubleshootEtic):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(troubleshootEtic), 0)

def AddTroubleshootEtic(builder, troubleshootEtic):
    AircraftStatus_FullAddTroubleshootEtic(builder, troubleshootEtic)

def AircraftStatus_FullAddEtic(builder, etic):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(etic), 0)

def AddEtic(builder, etic):
    AircraftStatus_FullAddEtic(builder, etic)

def AircraftStatus_FullAddParkLocation(builder, parkLocation):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(parkLocation), 0)

def AddParkLocation(builder, parkLocation):
    AircraftStatus_FullAddParkLocation(builder, parkLocation)

def AircraftStatus_FullAddParkLocationSystem(builder, parkLocationSystem):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(parkLocationSystem), 0)

def AddParkLocationSystem(builder, parkLocationSystem):
    AircraftStatus_FullAddParkLocationSystem(builder, parkLocationSystem)

def AircraftStatus_FullAddIdPoi(builder, idPoi):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(idPoi), 0)

def AddIdPoi(builder, idPoi):
    AircraftStatus_FullAddIdPoi(builder, idPoi)

def AircraftStatus_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AircraftStatus_FullAddCreatedAt(builder, createdAt)

def AircraftStatus_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AircraftStatus_FullAddCreatedBy(builder, createdBy)

def AircraftStatus_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AircraftStatus_FullAddUpdatedAt(builder, updatedAt)

def AircraftStatus_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AircraftStatus_FullAddUpdatedBy(builder, updatedBy)

def AircraftStatus_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AircraftStatus_FullAddSourceDl(builder, sourceDl)

def AircraftStatus_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AircraftStatus_FullAddSource(builder, source)

def AircraftStatus_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AircraftStatus_FullAddOrigin(builder, origin)

def AircraftStatus_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(52, dataMode, 0)

def AddDataMode(builder, dataMode):
    AircraftStatus_FullAddDataMode(builder, dataMode)

def AircraftStatus_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AircraftStatus_FullAddOrigNetwork(builder, origNetwork)

def AircraftStatus_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftStatus_FullEnd(builder)

try:
    from typing import List
except:
    pass

class AircraftStatus_FullT(object):

    # AircraftStatus_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idAircraft = None  # type: str
        self.altAircraftId = None  # type: str
        self.currentState = None  # type: str
        self.idAirfield = None  # type: str
        self.geoLoc = None  # type: str
        self.previousIcao = None  # type: str
        self.currentIcao = None  # type: str
        self.nextIcao = None  # type: str
        self.flightPhase = None  # type: str
        self.taStartTime = None  # type: str
        self.earliestTaendTime = None  # type: str
        self.missionReadiness = None  # type: str
        self.fuel = 0  # type: int
        self.fuelFunction = None  # type: str
        self.gunCapable = False  # type: bool
        self.gunRdsType = None  # type: str
        self.gunRdsMin = 0  # type: int
        self.gunRdsMax = 0  # type: int
        self.airToAirStatus = 0  # type: int
        self.airToGroundStatus = 0  # type: int
        self.inventory = None  # type: List[str]
        self.inventoryMin = None  # type: List[str]
        self.inventoryMax = None  # type: List[str]
        self.unavailableSys = None  # type: List[str]
        self.additionalSys = None  # type: List[str]
        self.notes = None  # type: str
        self.mxRemark = None  # type: str
        self.maintStatus = None  # type: str
        self.maintStatusDriver = None  # type: str
        self.maintPriority = None  # type: str
        self.alphaStatusCode = None  # type: str
        self.maintStatusUpdate = None  # type: str
        self.lastInspectionDate = None  # type: str
        self.maintPoc = None  # type: str
        self.groundStatus = None  # type: str
        self.contaminationStatus = None  # type: str
        self.fuelStatus = None  # type: str
        self.lastUpdatedBy = None  # type: str
        self.troubleshootEtic = None  # type: str
        self.etic = None  # type: str
        self.parkLocation = None  # type: str
        self.parkLocationSystem = None  # type: str
        self.idPoi = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftStatusFull = AircraftStatus_Full()
        aircraftStatusFull.Init(buf, pos)
        return cls.InitFromObj(aircraftStatusFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftStatusFull):
        x = AircraftStatus_FullT()
        x._UnPack(aircraftStatusFull)
        return x

    # AircraftStatus_FullT
    def _UnPack(self, aircraftStatusFull):
        if aircraftStatusFull is None:
            return
        self.id = aircraftStatusFull.Id()
        self.classificationMarking = aircraftStatusFull.ClassificationMarking()
        self.idAircraft = aircraftStatusFull.IdAircraft()
        self.altAircraftId = aircraftStatusFull.AltAircraftId()
        self.currentState = aircraftStatusFull.CurrentState()
        self.idAirfield = aircraftStatusFull.IdAirfield()
        self.geoLoc = aircraftStatusFull.GeoLoc()
        self.previousIcao = aircraftStatusFull.PreviousIcao()
        self.currentIcao = aircraftStatusFull.CurrentIcao()
        self.nextIcao = aircraftStatusFull.NextIcao()
        self.flightPhase = aircraftStatusFull.FlightPhase()
        self.taStartTime = aircraftStatusFull.TaStartTime()
        self.earliestTaendTime = aircraftStatusFull.EarliestTaendTime()
        self.missionReadiness = aircraftStatusFull.MissionReadiness()
        self.fuel = aircraftStatusFull.Fuel()
        self.fuelFunction = aircraftStatusFull.FuelFunction()
        self.gunCapable = aircraftStatusFull.GunCapable()
        self.gunRdsType = aircraftStatusFull.GunRdsType()
        self.gunRdsMin = aircraftStatusFull.GunRdsMin()
        self.gunRdsMax = aircraftStatusFull.GunRdsMax()
        self.airToAirStatus = aircraftStatusFull.AirToAirStatus()
        self.airToGroundStatus = aircraftStatusFull.AirToGroundStatus()
        if not aircraftStatusFull.InventoryIsNone():
            self.inventory = []
            for i in range(aircraftStatusFull.InventoryLength()):
                self.inventory.append(aircraftStatusFull.Inventory(i))
        if not aircraftStatusFull.InventoryMinIsNone():
            self.inventoryMin = []
            for i in range(aircraftStatusFull.InventoryMinLength()):
                self.inventoryMin.append(aircraftStatusFull.InventoryMin(i))
        if not aircraftStatusFull.InventoryMaxIsNone():
            self.inventoryMax = []
            for i in range(aircraftStatusFull.InventoryMaxLength()):
                self.inventoryMax.append(aircraftStatusFull.InventoryMax(i))
        if not aircraftStatusFull.UnavailableSysIsNone():
            self.unavailableSys = []
            for i in range(aircraftStatusFull.UnavailableSysLength()):
                self.unavailableSys.append(aircraftStatusFull.UnavailableSys(i))
        if not aircraftStatusFull.AdditionalSysIsNone():
            self.additionalSys = []
            for i in range(aircraftStatusFull.AdditionalSysLength()):
                self.additionalSys.append(aircraftStatusFull.AdditionalSys(i))
        self.notes = aircraftStatusFull.Notes()
        self.mxRemark = aircraftStatusFull.MxRemark()
        self.maintStatus = aircraftStatusFull.MaintStatus()
        self.maintStatusDriver = aircraftStatusFull.MaintStatusDriver()
        self.maintPriority = aircraftStatusFull.MaintPriority()
        self.alphaStatusCode = aircraftStatusFull.AlphaStatusCode()
        self.maintStatusUpdate = aircraftStatusFull.MaintStatusUpdate()
        self.lastInspectionDate = aircraftStatusFull.LastInspectionDate()
        self.maintPoc = aircraftStatusFull.MaintPoc()
        self.groundStatus = aircraftStatusFull.GroundStatus()
        self.contaminationStatus = aircraftStatusFull.ContaminationStatus()
        self.fuelStatus = aircraftStatusFull.FuelStatus()
        self.lastUpdatedBy = aircraftStatusFull.LastUpdatedBy()
        self.troubleshootEtic = aircraftStatusFull.TroubleshootEtic()
        self.etic = aircraftStatusFull.Etic()
        self.parkLocation = aircraftStatusFull.ParkLocation()
        self.parkLocationSystem = aircraftStatusFull.ParkLocationSystem()
        self.idPoi = aircraftStatusFull.IdPoi()
        self.createdAt = aircraftStatusFull.CreatedAt()
        self.createdBy = aircraftStatusFull.CreatedBy()
        self.updatedAt = aircraftStatusFull.UpdatedAt()
        self.updatedBy = aircraftStatusFull.UpdatedBy()
        self.sourceDl = aircraftStatusFull.SourceDl()
        self.source = aircraftStatusFull.Source()
        self.origin = aircraftStatusFull.Origin()
        self.dataMode = aircraftStatusFull.DataMode()
        self.origNetwork = aircraftStatusFull.OrigNetwork()

    # AircraftStatus_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idAircraft is not None:
            idAircraft = builder.CreateString(self.idAircraft)
        if self.altAircraftId is not None:
            altAircraftId = builder.CreateString(self.altAircraftId)
        if self.currentState is not None:
            currentState = builder.CreateString(self.currentState)
        if self.idAirfield is not None:
            idAirfield = builder.CreateString(self.idAirfield)
        if self.geoLoc is not None:
            geoLoc = builder.CreateString(self.geoLoc)
        if self.previousIcao is not None:
            previousIcao = builder.CreateString(self.previousIcao)
        if self.currentIcao is not None:
            currentIcao = builder.CreateString(self.currentIcao)
        if self.nextIcao is not None:
            nextIcao = builder.CreateString(self.nextIcao)
        if self.flightPhase is not None:
            flightPhase = builder.CreateString(self.flightPhase)
        if self.taStartTime is not None:
            taStartTime = builder.CreateString(self.taStartTime)
        if self.earliestTaendTime is not None:
            earliestTaendTime = builder.CreateString(self.earliestTaendTime)
        if self.missionReadiness is not None:
            missionReadiness = builder.CreateString(self.missionReadiness)
        if self.fuelFunction is not None:
            fuelFunction = builder.CreateString(self.fuelFunction)
        if self.gunRdsType is not None:
            gunRdsType = builder.CreateString(self.gunRdsType)
        if self.inventory is not None:
            inventorylist = []
            for i in range(len(self.inventory)):
                inventorylist.append(builder.CreateString(self.inventory[i]))
            AircraftStatus_FullStartInventoryVector(builder, len(self.inventory))
            for i in reversed(range(len(self.inventory))):
                builder.PrependUOffsetTRelative(inventorylist[i])
            inventory = builder.EndVector()
        if self.inventoryMin is not None:
            inventoryMinlist = []
            for i in range(len(self.inventoryMin)):
                inventoryMinlist.append(builder.CreateString(self.inventoryMin[i]))
            AircraftStatus_FullStartInventoryMinVector(builder, len(self.inventoryMin))
            for i in reversed(range(len(self.inventoryMin))):
                builder.PrependUOffsetTRelative(inventoryMinlist[i])
            inventoryMin = builder.EndVector()
        if self.inventoryMax is not None:
            inventoryMaxlist = []
            for i in range(len(self.inventoryMax)):
                inventoryMaxlist.append(builder.CreateString(self.inventoryMax[i]))
            AircraftStatus_FullStartInventoryMaxVector(builder, len(self.inventoryMax))
            for i in reversed(range(len(self.inventoryMax))):
                builder.PrependUOffsetTRelative(inventoryMaxlist[i])
            inventoryMax = builder.EndVector()
        if self.unavailableSys is not None:
            unavailableSyslist = []
            for i in range(len(self.unavailableSys)):
                unavailableSyslist.append(builder.CreateString(self.unavailableSys[i]))
            AircraftStatus_FullStartUnavailableSysVector(builder, len(self.unavailableSys))
            for i in reversed(range(len(self.unavailableSys))):
                builder.PrependUOffsetTRelative(unavailableSyslist[i])
            unavailableSys = builder.EndVector()
        if self.additionalSys is not None:
            additionalSyslist = []
            for i in range(len(self.additionalSys)):
                additionalSyslist.append(builder.CreateString(self.additionalSys[i]))
            AircraftStatus_FullStartAdditionalSysVector(builder, len(self.additionalSys))
            for i in reversed(range(len(self.additionalSys))):
                builder.PrependUOffsetTRelative(additionalSyslist[i])
            additionalSys = builder.EndVector()
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.mxRemark is not None:
            mxRemark = builder.CreateString(self.mxRemark)
        if self.maintStatus is not None:
            maintStatus = builder.CreateString(self.maintStatus)
        if self.maintStatusDriver is not None:
            maintStatusDriver = builder.CreateString(self.maintStatusDriver)
        if self.maintPriority is not None:
            maintPriority = builder.CreateString(self.maintPriority)
        if self.alphaStatusCode is not None:
            alphaStatusCode = builder.CreateString(self.alphaStatusCode)
        if self.maintStatusUpdate is not None:
            maintStatusUpdate = builder.CreateString(self.maintStatusUpdate)
        if self.lastInspectionDate is not None:
            lastInspectionDate = builder.CreateString(self.lastInspectionDate)
        if self.maintPoc is not None:
            maintPoc = builder.CreateString(self.maintPoc)
        if self.groundStatus is not None:
            groundStatus = builder.CreateString(self.groundStatus)
        if self.contaminationStatus is not None:
            contaminationStatus = builder.CreateString(self.contaminationStatus)
        if self.fuelStatus is not None:
            fuelStatus = builder.CreateString(self.fuelStatus)
        if self.lastUpdatedBy is not None:
            lastUpdatedBy = builder.CreateString(self.lastUpdatedBy)
        if self.troubleshootEtic is not None:
            troubleshootEtic = builder.CreateString(self.troubleshootEtic)
        if self.etic is not None:
            etic = builder.CreateString(self.etic)
        if self.parkLocation is not None:
            parkLocation = builder.CreateString(self.parkLocation)
        if self.parkLocationSystem is not None:
            parkLocationSystem = builder.CreateString(self.parkLocationSystem)
        if self.idPoi is not None:
            idPoi = builder.CreateString(self.idPoi)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AircraftStatus_FullStart(builder)
        if self.id is not None:
            AircraftStatus_FullAddId(builder, id)
        if self.classificationMarking is not None:
            AircraftStatus_FullAddClassificationMarking(builder, classificationMarking)
        if self.idAircraft is not None:
            AircraftStatus_FullAddIdAircraft(builder, idAircraft)
        if self.altAircraftId is not None:
            AircraftStatus_FullAddAltAircraftId(builder, altAircraftId)
        if self.currentState is not None:
            AircraftStatus_FullAddCurrentState(builder, currentState)
        if self.idAirfield is not None:
            AircraftStatus_FullAddIdAirfield(builder, idAirfield)
        if self.geoLoc is not None:
            AircraftStatus_FullAddGeoLoc(builder, geoLoc)
        if self.previousIcao is not None:
            AircraftStatus_FullAddPreviousIcao(builder, previousIcao)
        if self.currentIcao is not None:
            AircraftStatus_FullAddCurrentIcao(builder, currentIcao)
        if self.nextIcao is not None:
            AircraftStatus_FullAddNextIcao(builder, nextIcao)
        if self.flightPhase is not None:
            AircraftStatus_FullAddFlightPhase(builder, flightPhase)
        if self.taStartTime is not None:
            AircraftStatus_FullAddTaStartTime(builder, taStartTime)
        if self.earliestTaendTime is not None:
            AircraftStatus_FullAddEarliestTaendTime(builder, earliestTaendTime)
        if self.missionReadiness is not None:
            AircraftStatus_FullAddMissionReadiness(builder, missionReadiness)
        AircraftStatus_FullAddFuel(builder, self.fuel)
        if self.fuelFunction is not None:
            AircraftStatus_FullAddFuelFunction(builder, fuelFunction)
        AircraftStatus_FullAddGunCapable(builder, self.gunCapable)
        if self.gunRdsType is not None:
            AircraftStatus_FullAddGunRdsType(builder, gunRdsType)
        AircraftStatus_FullAddGunRdsMin(builder, self.gunRdsMin)
        AircraftStatus_FullAddGunRdsMax(builder, self.gunRdsMax)
        AircraftStatus_FullAddAirToAirStatus(builder, self.airToAirStatus)
        AircraftStatus_FullAddAirToGroundStatus(builder, self.airToGroundStatus)
        if self.inventory is not None:
            AircraftStatus_FullAddInventory(builder, inventory)
        if self.inventoryMin is not None:
            AircraftStatus_FullAddInventoryMin(builder, inventoryMin)
        if self.inventoryMax is not None:
            AircraftStatus_FullAddInventoryMax(builder, inventoryMax)
        if self.unavailableSys is not None:
            AircraftStatus_FullAddUnavailableSys(builder, unavailableSys)
        if self.additionalSys is not None:
            AircraftStatus_FullAddAdditionalSys(builder, additionalSys)
        if self.notes is not None:
            AircraftStatus_FullAddNotes(builder, notes)
        if self.mxRemark is not None:
            AircraftStatus_FullAddMxRemark(builder, mxRemark)
        if self.maintStatus is not None:
            AircraftStatus_FullAddMaintStatus(builder, maintStatus)
        if self.maintStatusDriver is not None:
            AircraftStatus_FullAddMaintStatusDriver(builder, maintStatusDriver)
        if self.maintPriority is not None:
            AircraftStatus_FullAddMaintPriority(builder, maintPriority)
        if self.alphaStatusCode is not None:
            AircraftStatus_FullAddAlphaStatusCode(builder, alphaStatusCode)
        if self.maintStatusUpdate is not None:
            AircraftStatus_FullAddMaintStatusUpdate(builder, maintStatusUpdate)
        if self.lastInspectionDate is not None:
            AircraftStatus_FullAddLastInspectionDate(builder, lastInspectionDate)
        if self.maintPoc is not None:
            AircraftStatus_FullAddMaintPoc(builder, maintPoc)
        if self.groundStatus is not None:
            AircraftStatus_FullAddGroundStatus(builder, groundStatus)
        if self.contaminationStatus is not None:
            AircraftStatus_FullAddContaminationStatus(builder, contaminationStatus)
        if self.fuelStatus is not None:
            AircraftStatus_FullAddFuelStatus(builder, fuelStatus)
        if self.lastUpdatedBy is not None:
            AircraftStatus_FullAddLastUpdatedBy(builder, lastUpdatedBy)
        if self.troubleshootEtic is not None:
            AircraftStatus_FullAddTroubleshootEtic(builder, troubleshootEtic)
        if self.etic is not None:
            AircraftStatus_FullAddEtic(builder, etic)
        if self.parkLocation is not None:
            AircraftStatus_FullAddParkLocation(builder, parkLocation)
        if self.parkLocationSystem is not None:
            AircraftStatus_FullAddParkLocationSystem(builder, parkLocationSystem)
        if self.idPoi is not None:
            AircraftStatus_FullAddIdPoi(builder, idPoi)
        if self.createdAt is not None:
            AircraftStatus_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AircraftStatus_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AircraftStatus_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AircraftStatus_FullAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            AircraftStatus_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AircraftStatus_FullAddSource(builder, source)
        if self.origin is not None:
            AircraftStatus_FullAddOrigin(builder, origin)
        AircraftStatus_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AircraftStatus_FullAddOrigNetwork(builder, origNetwork)
        aircraftStatusFull = AircraftStatus_FullEnd(builder)
        return aircraftStatusFull
