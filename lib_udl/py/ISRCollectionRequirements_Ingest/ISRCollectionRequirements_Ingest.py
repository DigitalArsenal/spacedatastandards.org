# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Tasking desired collection requirements.
class ISRCollectionRequirements_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionRequirements_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionRequirements_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionRequirements_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionRequirements_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Collection Requirement Unique Identifier.
    # Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
    # Constraints: Minimum length = 0, Maximum length = 36
    # ISRCollectionRequirements_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Encryption hashing algorithm.
    # Example: /// Example: HASH
    # Constraints: Minimum length = 0, Maximum length = 128
    # ISRCollectionRequirements_Ingest
    def Hash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type collection this requirement applies to.
    # Example: /// Example: COLLECTION_TYPE
    # Constraints: Minimum length = 0, Maximum length = 128
    # ISRCollectionRequirements_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Collection Requirement Unique Identifier.
    # Example: /// Example: CRID
    # Constraints: Minimum length = 0, Maximum length = 256
    # ISRCollectionRequirements_Ingest
    def CridNumbers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # 1-n priority for this collection requirement.
    # Example: /// Example: 20.23
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Record id.
    # Example: /// Example: RECORD-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ISRCollectionRequirements_Ingest
    def RecordId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Reconnaissance Survey information the operator needs.
    # Example: /// Example: SURVEY_INFO
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionRequirements_Ingest
    def ReconSurvey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Primary type of intelligence to be collected for this requirement.
    # Example: /// Example: Sig
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionRequirements_Ingest
    def IntelDiscipline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Sub category of primary intelligence to be collected for this requirement.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def Secondary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Is this collection requirement an emphasized/critical requirement.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def Emphasized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Is this collection request for the Prism system?.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def IsPrismCr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Start time for this requirement, should be within the mission time window.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Stop time for this requirement, should be within the mission time window.
    # Example: /// Example: 2021-01-19T01:20:01.001Z
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def Stop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Human readable name for this operation.
    # Example: /// Example: NAME
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionRequirements_Ingest
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the military unit that this assigned collection requirement will support.
    # Example: /// Example: UNIT
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionRequirements_Ingest
    def SupportedUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
    # Example: /// Example: COUNTRY_CODE
    # Constraints: Minimum length = 0, Maximum length = 4
    # ISRCollectionRequirements_Ingest
    def Country(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Region of the collection requirement.
    # Example: /// Example: REGION
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionRequirements_Ingest
    def Region(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Subregion of the collection requirement.
    # Example: /// Example: SUBREGION
    # Constraints: Minimum length = 0, Maximum length = 32
    # ISRCollectionRequirements_Ingest
    def Subregion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Free text field for the user to specify special instructions needed for this collection.
    # Example: /// Example: TEXT
    # Constraints: Minimum length = 0, Maximum length = 256
    # ISRCollectionRequirements_Ingest
    def SpecialComGuidance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def CriticalTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def ExploitationRequirement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of POI Id's for the targets being tasked.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # ISRCollectionRequirements_Ingest
    def TargetList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ISRCollectionRequirements_Ingest
    def TargetListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ISRCollectionRequirements_Ingest
    def TargetListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

def ISRCollectionRequirements_IngestStart(builder):
    builder.StartObject(22)

def Start(builder):
    ISRCollectionRequirements_IngestStart(builder)

def ISRCollectionRequirements_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ISRCollectionRequirements_IngestAddId(builder, id)

def ISRCollectionRequirements_IngestAddHash(builder, hash):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(hash), 0)

def AddHash(builder, hash):
    ISRCollectionRequirements_IngestAddHash(builder, hash)

def ISRCollectionRequirements_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    ISRCollectionRequirements_IngestAddType(builder, type)

def ISRCollectionRequirements_IngestAddCridNumbers(builder, cridNumbers):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cridNumbers), 0)

def AddCridNumbers(builder, cridNumbers):
    ISRCollectionRequirements_IngestAddCridNumbers(builder, cridNumbers)

def ISRCollectionRequirements_IngestAddPriority(builder, priority):
    builder.PrependFloat64Slot(4, priority, 0.0)

def AddPriority(builder, priority):
    ISRCollectionRequirements_IngestAddPriority(builder, priority)

def ISRCollectionRequirements_IngestAddRecordId(builder, recordId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(recordId), 0)

def AddRecordId(builder, recordId):
    ISRCollectionRequirements_IngestAddRecordId(builder, recordId)

def ISRCollectionRequirements_IngestAddReconSurvey(builder, reconSurvey):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(reconSurvey), 0)

def AddReconSurvey(builder, reconSurvey):
    ISRCollectionRequirements_IngestAddReconSurvey(builder, reconSurvey)

def ISRCollectionRequirements_IngestAddIntelDiscipline(builder, intelDiscipline):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(intelDiscipline), 0)

def AddIntelDiscipline(builder, intelDiscipline):
    ISRCollectionRequirements_IngestAddIntelDiscipline(builder, intelDiscipline)

def ISRCollectionRequirements_IngestAddSecondary(builder, secondary):
    builder.PrependBoolSlot(8, secondary, 0)

def AddSecondary(builder, secondary):
    ISRCollectionRequirements_IngestAddSecondary(builder, secondary)

def ISRCollectionRequirements_IngestAddEmphasized(builder, emphasized):
    builder.PrependBoolSlot(9, emphasized, 0)

def AddEmphasized(builder, emphasized):
    ISRCollectionRequirements_IngestAddEmphasized(builder, emphasized)

def ISRCollectionRequirements_IngestAddIsPrismCr(builder, isPrismCr):
    builder.PrependBoolSlot(10, isPrismCr, 0)

def AddIsPrismCr(builder, isPrismCr):
    ISRCollectionRequirements_IngestAddIsPrismCr(builder, isPrismCr)

def ISRCollectionRequirements_IngestAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    ISRCollectionRequirements_IngestAddStart(builder, start)

def ISRCollectionRequirements_IngestAddStop(builder, stop):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(stop), 0)

def AddStop(builder, stop):
    ISRCollectionRequirements_IngestAddStop(builder, stop)

def ISRCollectionRequirements_IngestAddOperation(builder, operation):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(operation), 0)

def AddOperation(builder, operation):
    ISRCollectionRequirements_IngestAddOperation(builder, operation)

def ISRCollectionRequirements_IngestAddSupportedUnit(builder, supportedUnit):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(supportedUnit), 0)

def AddSupportedUnit(builder, supportedUnit):
    ISRCollectionRequirements_IngestAddSupportedUnit(builder, supportedUnit)

def ISRCollectionRequirements_IngestAddCountry(builder, country):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(country), 0)

def AddCountry(builder, country):
    ISRCollectionRequirements_IngestAddCountry(builder, country)

def ISRCollectionRequirements_IngestAddRegion(builder, region):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(region), 0)

def AddRegion(builder, region):
    ISRCollectionRequirements_IngestAddRegion(builder, region)

def ISRCollectionRequirements_IngestAddSubregion(builder, subregion):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(subregion), 0)

def AddSubregion(builder, subregion):
    ISRCollectionRequirements_IngestAddSubregion(builder, subregion)

def ISRCollectionRequirements_IngestAddSpecialComGuidance(builder, specialComGuidance):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(specialComGuidance), 0)

def AddSpecialComGuidance(builder, specialComGuidance):
    ISRCollectionRequirements_IngestAddSpecialComGuidance(builder, specialComGuidance)

def ISRCollectionRequirements_IngestAddCriticalTimes(builder, criticalTimes):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(criticalTimes), 0)

def AddCriticalTimes(builder, criticalTimes):
    ISRCollectionRequirements_IngestAddCriticalTimes(builder, criticalTimes)

def ISRCollectionRequirements_IngestAddExploitationRequirement(builder, exploitationRequirement):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(exploitationRequirement), 0)

def AddExploitationRequirement(builder, exploitationRequirement):
    ISRCollectionRequirements_IngestAddExploitationRequirement(builder, exploitationRequirement)

def ISRCollectionRequirements_IngestAddTargetList(builder, targetList):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(targetList), 0)

def AddTargetList(builder, targetList):
    ISRCollectionRequirements_IngestAddTargetList(builder, targetList)

def ISRCollectionRequirements_IngestStartTargetListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTargetListVector(builder, numElems):
    return ISRCollectionRequirements_IngestStartTargetListVector(builder, numElems)

def ISRCollectionRequirements_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionRequirements_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class ISRCollectionRequirements_IngestT(object):

    # ISRCollectionRequirements_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.hash = None  # type: str
        self.type = None  # type: str
        self.cridNumbers = None  # type: str
        self.priority = 0.0  # type: float
        self.recordId = None  # type: str
        self.reconSurvey = None  # type: str
        self.intelDiscipline = None  # type: str
        self.secondary = False  # type: bool
        self.emphasized = False  # type: bool
        self.isPrismCr = False  # type: bool
        self.start = None  # type: str
        self.stop = None  # type: str
        self.operation = None  # type: str
        self.supportedUnit = None  # type: str
        self.country = None  # type: str
        self.region = None  # type: str
        self.subregion = None  # type: str
        self.specialComGuidance = None  # type: str
        self.criticalTimes = None  # type: str
        self.exploitationRequirement = None  # type: str
        self.targetList = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionRequirementsIngest = ISRCollectionRequirements_Ingest()
        isrcollectionRequirementsIngest.Init(buf, pos)
        return cls.InitFromObj(isrcollectionRequirementsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionRequirementsIngest):
        x = ISRCollectionRequirements_IngestT()
        x._UnPack(isrcollectionRequirementsIngest)
        return x

    # ISRCollectionRequirements_IngestT
    def _UnPack(self, isrcollectionRequirementsIngest):
        if isrcollectionRequirementsIngest is None:
            return
        self.id = isrcollectionRequirementsIngest.Id()
        self.hash = isrcollectionRequirementsIngest.Hash()
        self.type = isrcollectionRequirementsIngest.Type()
        self.cridNumbers = isrcollectionRequirementsIngest.CridNumbers()
        self.priority = isrcollectionRequirementsIngest.Priority()
        self.recordId = isrcollectionRequirementsIngest.RecordId()
        self.reconSurvey = isrcollectionRequirementsIngest.ReconSurvey()
        self.intelDiscipline = isrcollectionRequirementsIngest.IntelDiscipline()
        self.secondary = isrcollectionRequirementsIngest.Secondary()
        self.emphasized = isrcollectionRequirementsIngest.Emphasized()
        self.isPrismCr = isrcollectionRequirementsIngest.IsPrismCr()
        self.start = isrcollectionRequirementsIngest.Start()
        self.stop = isrcollectionRequirementsIngest.Stop()
        self.operation = isrcollectionRequirementsIngest.Operation()
        self.supportedUnit = isrcollectionRequirementsIngest.SupportedUnit()
        self.country = isrcollectionRequirementsIngest.Country()
        self.region = isrcollectionRequirementsIngest.Region()
        self.subregion = isrcollectionRequirementsIngest.Subregion()
        self.specialComGuidance = isrcollectionRequirementsIngest.SpecialComGuidance()
        self.criticalTimes = isrcollectionRequirementsIngest.CriticalTimes()
        self.exploitationRequirement = isrcollectionRequirementsIngest.ExploitationRequirement()
        if not isrcollectionRequirementsIngest.TargetListIsNone():
            self.targetList = []
            for i in range(isrcollectionRequirementsIngest.TargetListLength()):
                self.targetList.append(isrcollectionRequirementsIngest.TargetList(i))

    # ISRCollectionRequirements_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.hash is not None:
            hash = builder.CreateString(self.hash)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.cridNumbers is not None:
            cridNumbers = builder.CreateString(self.cridNumbers)
        if self.recordId is not None:
            recordId = builder.CreateString(self.recordId)
        if self.reconSurvey is not None:
            reconSurvey = builder.CreateString(self.reconSurvey)
        if self.intelDiscipline is not None:
            intelDiscipline = builder.CreateString(self.intelDiscipline)
        if self.start is not None:
            start = builder.CreateString(self.start)
        if self.stop is not None:
            stop = builder.CreateString(self.stop)
        if self.operation is not None:
            operation = builder.CreateString(self.operation)
        if self.supportedUnit is not None:
            supportedUnit = builder.CreateString(self.supportedUnit)
        if self.country is not None:
            country = builder.CreateString(self.country)
        if self.region is not None:
            region = builder.CreateString(self.region)
        if self.subregion is not None:
            subregion = builder.CreateString(self.subregion)
        if self.specialComGuidance is not None:
            specialComGuidance = builder.CreateString(self.specialComGuidance)
        if self.criticalTimes is not None:
            criticalTimes = builder.CreateString(self.criticalTimes)
        if self.exploitationRequirement is not None:
            exploitationRequirement = builder.CreateString(self.exploitationRequirement)
        if self.targetList is not None:
            targetListlist = []
            for i in range(len(self.targetList)):
                targetListlist.append(builder.CreateString(self.targetList[i]))
            ISRCollectionRequirements_IngestStartTargetListVector(builder, len(self.targetList))
            for i in reversed(range(len(self.targetList))):
                builder.PrependUOffsetTRelative(targetListlist[i])
            targetList = builder.EndVector()
        ISRCollectionRequirements_IngestStart(builder)
        if self.id is not None:
            ISRCollectionRequirements_IngestAddId(builder, id)
        if self.hash is not None:
            ISRCollectionRequirements_IngestAddHash(builder, hash)
        if self.type is not None:
            ISRCollectionRequirements_IngestAddType(builder, type)
        if self.cridNumbers is not None:
            ISRCollectionRequirements_IngestAddCridNumbers(builder, cridNumbers)
        ISRCollectionRequirements_IngestAddPriority(builder, self.priority)
        if self.recordId is not None:
            ISRCollectionRequirements_IngestAddRecordId(builder, recordId)
        if self.reconSurvey is not None:
            ISRCollectionRequirements_IngestAddReconSurvey(builder, reconSurvey)
        if self.intelDiscipline is not None:
            ISRCollectionRequirements_IngestAddIntelDiscipline(builder, intelDiscipline)
        ISRCollectionRequirements_IngestAddSecondary(builder, self.secondary)
        ISRCollectionRequirements_IngestAddEmphasized(builder, self.emphasized)
        ISRCollectionRequirements_IngestAddIsPrismCr(builder, self.isPrismCr)
        if self.start is not None:
            ISRCollectionRequirements_IngestAddStart(builder, start)
        if self.stop is not None:
            ISRCollectionRequirements_IngestAddStop(builder, stop)
        if self.operation is not None:
            ISRCollectionRequirements_IngestAddOperation(builder, operation)
        if self.supportedUnit is not None:
            ISRCollectionRequirements_IngestAddSupportedUnit(builder, supportedUnit)
        if self.country is not None:
            ISRCollectionRequirements_IngestAddCountry(builder, country)
        if self.region is not None:
            ISRCollectionRequirements_IngestAddRegion(builder, region)
        if self.subregion is not None:
            ISRCollectionRequirements_IngestAddSubregion(builder, subregion)
        if self.specialComGuidance is not None:
            ISRCollectionRequirements_IngestAddSpecialComGuidance(builder, specialComGuidance)
        if self.criticalTimes is not None:
            ISRCollectionRequirements_IngestAddCriticalTimes(builder, criticalTimes)
        if self.exploitationRequirement is not None:
            ISRCollectionRequirements_IngestAddExploitationRequirement(builder, exploitationRequirement)
        if self.targetList is not None:
            ISRCollectionRequirements_IngestAddTargetList(builder, targetList)
        isrcollectionRequirementsIngest = ISRCollectionRequirements_IngestEnd(builder)
        return isrcollectionRequirementsIngest
