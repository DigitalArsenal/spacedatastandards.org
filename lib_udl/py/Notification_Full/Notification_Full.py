# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Model representation of client generated notification data.  Contains a message type and message body field to store notification information.
class Notification_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Notification_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNotification_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Notification_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4E\x4F\x54\x49", size_prefixed=size_prefixed)

    # Notification_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: NOTIFICATION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Notification_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Notification_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source provided message type.
    # Example: /// Example: msgType
    # Constraints: Minimum length = 1, Maximum length = 64
    # Notification_Full
    def MsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The message body content as a text string, XML, JSON, etc. If JSON is used for the msgBody, it should be 'inline' with the notification message JSON (without quotation marks or escape characters). Size of the msg body cannot be over 1MB.
    # Example: /// Example: msgBody
    # Constraints: Minimum length = 1, Maximum length = 1000000
    # Notification_Full
    def MsgBody(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Notification_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Notification_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Notification_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Notification_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of provider/source specific tags for this data, used for implementing data owner conditional access controls to restrict access to the data.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # Notification_Full
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Notification_Full
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Notification_Full
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # The date and time the notification was created, auto-generated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Notification_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The user that created the notification.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Notification_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Notification_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Notification_FullStart(builder):
    builder.StartObject(12)

def Start(builder):
    Notification_FullStart(builder)

def Notification_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Notification_FullAddId(builder, id)

def Notification_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Notification_FullAddClassificationMarking(builder, classificationMarking)

def Notification_FullAddMsgType(builder, msgType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(msgType), 0)

def AddMsgType(builder, msgType):
    Notification_FullAddMsgType(builder, msgType)

def Notification_FullAddMsgBody(builder, msgBody):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgBody), 0)

def AddMsgBody(builder, msgBody):
    Notification_FullAddMsgBody(builder, msgBody)

def Notification_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(4, dataMode, 0)

def AddDataMode(builder, dataMode):
    Notification_FullAddDataMode(builder, dataMode)

def Notification_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    Notification_FullAddSourceDl(builder, sourceDl)

def Notification_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Notification_FullAddSource(builder, source)

def Notification_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Notification_FullAddOrigin(builder, origin)

def Notification_FullAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    Notification_FullAddTags(builder, tags)

def Notification_FullStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return Notification_FullStartTagsVector(builder, numElems)

def Notification_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Notification_FullAddCreatedAt(builder, createdAt)

def Notification_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Notification_FullAddCreatedBy(builder, createdBy)

def Notification_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Notification_FullAddOrigNetwork(builder, origNetwork)

def Notification_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Notification_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Notification_FullT(object):

    # Notification_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.msgType = None  # type: str
        self.msgBody = None  # type: str
        self.dataMode = 0  # type: int
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.tags = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        notificationFull = Notification_Full()
        notificationFull.Init(buf, pos)
        return cls.InitFromObj(notificationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, notificationFull):
        x = Notification_FullT()
        x._UnPack(notificationFull)
        return x

    # Notification_FullT
    def _UnPack(self, notificationFull):
        if notificationFull is None:
            return
        self.id = notificationFull.Id()
        self.classificationMarking = notificationFull.ClassificationMarking()
        self.msgType = notificationFull.MsgType()
        self.msgBody = notificationFull.MsgBody()
        self.dataMode = notificationFull.DataMode()
        self.sourceDl = notificationFull.SourceDl()
        self.source = notificationFull.Source()
        self.origin = notificationFull.Origin()
        if not notificationFull.TagsIsNone():
            self.tags = []
            for i in range(notificationFull.TagsLength()):
                self.tags.append(notificationFull.Tags(i))
        self.createdAt = notificationFull.CreatedAt()
        self.createdBy = notificationFull.CreatedBy()
        self.origNetwork = notificationFull.OrigNetwork()

    # Notification_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.msgType is not None:
            msgType = builder.CreateString(self.msgType)
        if self.msgBody is not None:
            msgBody = builder.CreateString(self.msgBody)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            Notification_FullStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Notification_FullStart(builder)
        if self.id is not None:
            Notification_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Notification_FullAddClassificationMarking(builder, classificationMarking)
        if self.msgType is not None:
            Notification_FullAddMsgType(builder, msgType)
        if self.msgBody is not None:
            Notification_FullAddMsgBody(builder, msgBody)
        Notification_FullAddDataMode(builder, self.dataMode)
        if self.sourceDl is not None:
            Notification_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            Notification_FullAddSource(builder, source)
        if self.origin is not None:
            Notification_FullAddOrigin(builder, origin)
        if self.tags is not None:
            Notification_FullAddTags(builder, tags)
        if self.createdAt is not None:
            Notification_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Notification_FullAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            Notification_FullAddOrigNetwork(builder, origNetwork)
        notificationFull = Notification_FullEnd(builder)
        return notificationFull
