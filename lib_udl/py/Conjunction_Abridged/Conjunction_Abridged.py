# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Stores the results of a particular Conjunction Assessment (CA) run.
class Conjunction_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Conjunction_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConjunction_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Conjunction_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x4E\x4A", size_prefixed=size_prefixed)

    # Conjunction_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: CONJUNCTION-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Conjunction_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the primary satellite on-orbit object, if correlated.
    # Example: /// Example: ONORBIT1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def IdOnOrbit1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the secondary satellite on-orbit object, if correlated.
    # Example: /// Example: ONORBIT2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def IdOnOrbit2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
    # Example: /// Example: CONJUNCTION
    # Constraints: Minimum length = 0, Maximum length = 24
    # Conjunction_Abridged
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of closest approach (TCA) in UTC.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def Tca(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Distance between objects at Time of Closest Approach (TCA) in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def MissDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
    # Example: /// Example: 0.5
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def CollisionProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The method that was used to calculate the collision probability, ex. FOSTER-1992.
    # Example: /// Example: FOSTER-1992
    # Constraints: Minimum length = 0, Maximum length = 32
    # Conjunction_Abridged
    def CollisionProbMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The filename of the primary (object1) ephemeris used in the screening, if applicable.
    # Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def EphemName1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
    # Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def EsId1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The filename of the secondary (object2) ephemeris used in the screening, if applicable.
    # Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def EphemName2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
    # Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def EsId2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Distance between objects along Radial Vector at Time of Closest Approach in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelPosR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Distance between objects along Tangential Vector in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelPosT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Distance between objects along Normal vector in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelPosN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelVelMag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelVelR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Closing velocity between objects along Tangential Vector in meters/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelVelT(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Closing velocity between objects along Normal Vector in meters/sec.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def RelVelN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The start time in UTC of the screening period for the conjunction assessment.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ScreenEntryTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The stop time in UTC of the screening period for the conjunction assessment.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ScreenExitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ScreenVolumeX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ScreenVolumeY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ScreenVolumeZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The shape (BOX, ELLIPSOID) of the screening volume.
    # Example: /// Example: ELLIPSOID
    # Constraints: Minimum length = 0, Maximum length = 12
    # Conjunction_Abridged
    def VolShape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-01-01T01:02:01.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def VolEntryTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
    # Example: /// Example: 2021-01-01T01:02:28.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def VolExitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Penetration Level Sigma.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def PenetrationLevelSigma(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
    # Example: /// Example: REF-STATEVECTOR1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def IdStateVector1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of last positive metric observation of the primary satellite.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def LastObTime1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    # Example: /// Example: 0.016386
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def CdAoM1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    # Example: /// Example: 0.013814
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def CrAoM1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    # Example: /// Example: 0.033814
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ThrustAccel1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
    # Example: /// Example: REF-STATEVECTOR2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def IdStateVector2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of last positive metric observation of the secondary satellite.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def LastObTime2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
    # Example: /// Example: 0.016386
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def CdAoM2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
    # Example: /// Example: 0.013814
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def CrAoM2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
    # Example: /// Example: 0.033814
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def ThrustAccel2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Additional notes from data providers.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Conjunction_Abridged
    def Comments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Commander's critical information requirements notes.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 128
    # Conjunction_Abridged
    def Ccir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Emergency comments.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # Conjunction_Abridged
    def ConcernNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating if State department was notified.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def StateDeptNotified(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating if owner was contacted.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def OwnerContacted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Link to filename associated with JMS record.
    # Example: /// Example: Example link
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Spacecraft name(s) for which the Collision message is provided.
    # Example: /// Example: Message for space craft A
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def MessageFor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # JMS provided message ID link.
    # Example: /// Example: MESSAGE-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def UvwWarn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def SmallRelVelWarning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def LargeRelPosWarning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def SmallCovWarning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Used for probability of collision calculation, not Warning/Alert Threshold notifications.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def LargeCovWarning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Conjunction_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def Originator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: sample_descriptor here
    # Constraints: Minimum length = 0, Maximum length = 64
    # Conjunction_Abridged
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Conjunction_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Conjunction_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def StateVector1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def StateVector2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit primary object.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def SatNo1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Satellite/catalog number of the target on-orbit secondary object.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # Conjunction_Abridged
    def SatNo2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional place holder for an OnOrbit ID that does not exist in UDL.
    # Example: /// Example: ORIGONORBIT1-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def OrigIdOnOrbit1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional place holder for an OnOrbit ID that does not exist in UDL.
    # Example: /// Example: ORIGONORBIT2-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Conjunction_Abridged
    def OrigIdOnOrbit2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 0, Maximum length = 32
    # Conjunction_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Conjunction_AbridgedStart(builder):
    builder.StartObject(68)

def Start(builder):
    Conjunction_AbridgedStart(builder)

def Conjunction_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Conjunction_AbridgedAddId(builder, id)

def Conjunction_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Conjunction_AbridgedAddClassificationMarking(builder, classificationMarking)

def Conjunction_AbridgedAddIdOnOrbit1(builder, idOnOrbit1):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit1), 0)

def AddIdOnOrbit1(builder, idOnOrbit1):
    Conjunction_AbridgedAddIdOnOrbit1(builder, idOnOrbit1)

def Conjunction_AbridgedAddIdOnOrbit2(builder, idOnOrbit2):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit2), 0)

def AddIdOnOrbit2(builder, idOnOrbit2):
    Conjunction_AbridgedAddIdOnOrbit2(builder, idOnOrbit2)

def Conjunction_AbridgedAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Conjunction_AbridgedAddType(builder, type)

def Conjunction_AbridgedAddTca(builder, tca):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tca), 0)

def AddTca(builder, tca):
    Conjunction_AbridgedAddTca(builder, tca)

def Conjunction_AbridgedAddMissDistance(builder, missDistance):
    builder.PrependFloat64Slot(6, missDistance, 0.0)

def AddMissDistance(builder, missDistance):
    Conjunction_AbridgedAddMissDistance(builder, missDistance)

def Conjunction_AbridgedAddCollisionProb(builder, collisionProb):
    builder.PrependFloat64Slot(7, collisionProb, 0.0)

def AddCollisionProb(builder, collisionProb):
    Conjunction_AbridgedAddCollisionProb(builder, collisionProb)

def Conjunction_AbridgedAddCollisionProbMethod(builder, collisionProbMethod):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(collisionProbMethod), 0)

def AddCollisionProbMethod(builder, collisionProbMethod):
    Conjunction_AbridgedAddCollisionProbMethod(builder, collisionProbMethod)

def Conjunction_AbridgedAddEphemName1(builder, ephemName1):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ephemName1), 0)

def AddEphemName1(builder, ephemName1):
    Conjunction_AbridgedAddEphemName1(builder, ephemName1)

def Conjunction_AbridgedAddEsId1(builder, esId1):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(esId1), 0)

def AddEsId1(builder, esId1):
    Conjunction_AbridgedAddEsId1(builder, esId1)

def Conjunction_AbridgedAddEphemName2(builder, ephemName2):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ephemName2), 0)

def AddEphemName2(builder, ephemName2):
    Conjunction_AbridgedAddEphemName2(builder, ephemName2)

def Conjunction_AbridgedAddEsId2(builder, esId2):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(esId2), 0)

def AddEsId2(builder, esId2):
    Conjunction_AbridgedAddEsId2(builder, esId2)

def Conjunction_AbridgedAddRelPosR(builder, relPosR):
    builder.PrependFloat64Slot(13, relPosR, 0.0)

def AddRelPosR(builder, relPosR):
    Conjunction_AbridgedAddRelPosR(builder, relPosR)

def Conjunction_AbridgedAddRelPosT(builder, relPosT):
    builder.PrependFloat64Slot(14, relPosT, 0.0)

def AddRelPosT(builder, relPosT):
    Conjunction_AbridgedAddRelPosT(builder, relPosT)

def Conjunction_AbridgedAddRelPosN(builder, relPosN):
    builder.PrependFloat64Slot(15, relPosN, 0.0)

def AddRelPosN(builder, relPosN):
    Conjunction_AbridgedAddRelPosN(builder, relPosN)

def Conjunction_AbridgedAddRelVelMag(builder, relVelMag):
    builder.PrependFloat64Slot(16, relVelMag, 0.0)

def AddRelVelMag(builder, relVelMag):
    Conjunction_AbridgedAddRelVelMag(builder, relVelMag)

def Conjunction_AbridgedAddRelVelR(builder, relVelR):
    builder.PrependFloat64Slot(17, relVelR, 0.0)

def AddRelVelR(builder, relVelR):
    Conjunction_AbridgedAddRelVelR(builder, relVelR)

def Conjunction_AbridgedAddRelVelT(builder, relVelT):
    builder.PrependFloat64Slot(18, relVelT, 0.0)

def AddRelVelT(builder, relVelT):
    Conjunction_AbridgedAddRelVelT(builder, relVelT)

def Conjunction_AbridgedAddRelVelN(builder, relVelN):
    builder.PrependFloat64Slot(19, relVelN, 0.0)

def AddRelVelN(builder, relVelN):
    Conjunction_AbridgedAddRelVelN(builder, relVelN)

def Conjunction_AbridgedAddScreenEntryTime(builder, screenEntryTime):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(screenEntryTime), 0)

def AddScreenEntryTime(builder, screenEntryTime):
    Conjunction_AbridgedAddScreenEntryTime(builder, screenEntryTime)

def Conjunction_AbridgedAddScreenExitTime(builder, screenExitTime):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(screenExitTime), 0)

def AddScreenExitTime(builder, screenExitTime):
    Conjunction_AbridgedAddScreenExitTime(builder, screenExitTime)

def Conjunction_AbridgedAddScreenVolumeX(builder, screenVolumeX):
    builder.PrependFloat64Slot(22, screenVolumeX, 0.0)

def AddScreenVolumeX(builder, screenVolumeX):
    Conjunction_AbridgedAddScreenVolumeX(builder, screenVolumeX)

def Conjunction_AbridgedAddScreenVolumeY(builder, screenVolumeY):
    builder.PrependFloat64Slot(23, screenVolumeY, 0.0)

def AddScreenVolumeY(builder, screenVolumeY):
    Conjunction_AbridgedAddScreenVolumeY(builder, screenVolumeY)

def Conjunction_AbridgedAddScreenVolumeZ(builder, screenVolumeZ):
    builder.PrependFloat64Slot(24, screenVolumeZ, 0.0)

def AddScreenVolumeZ(builder, screenVolumeZ):
    Conjunction_AbridgedAddScreenVolumeZ(builder, screenVolumeZ)

def Conjunction_AbridgedAddVolShape(builder, volShape):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(volShape), 0)

def AddVolShape(builder, volShape):
    Conjunction_AbridgedAddVolShape(builder, volShape)

def Conjunction_AbridgedAddVolEntryTime(builder, volEntryTime):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(volEntryTime), 0)

def AddVolEntryTime(builder, volEntryTime):
    Conjunction_AbridgedAddVolEntryTime(builder, volEntryTime)

def Conjunction_AbridgedAddVolExitTime(builder, volExitTime):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(volExitTime), 0)

def AddVolExitTime(builder, volExitTime):
    Conjunction_AbridgedAddVolExitTime(builder, volExitTime)

def Conjunction_AbridgedAddPenetrationLevelSigma(builder, penetrationLevelSigma):
    builder.PrependFloat64Slot(28, penetrationLevelSigma, 0.0)

def AddPenetrationLevelSigma(builder, penetrationLevelSigma):
    Conjunction_AbridgedAddPenetrationLevelSigma(builder, penetrationLevelSigma)

def Conjunction_AbridgedAddIdStateVector1(builder, idStateVector1):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(idStateVector1), 0)

def AddIdStateVector1(builder, idStateVector1):
    Conjunction_AbridgedAddIdStateVector1(builder, idStateVector1)

def Conjunction_AbridgedAddLastObTime1(builder, lastObTime1):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(lastObTime1), 0)

def AddLastObTime1(builder, lastObTime1):
    Conjunction_AbridgedAddLastObTime1(builder, lastObTime1)

def Conjunction_AbridgedAddCdAoM1(builder, cdAoM1):
    builder.PrependFloat64Slot(31, cdAoM1, 0.0)

def AddCdAoM1(builder, cdAoM1):
    Conjunction_AbridgedAddCdAoM1(builder, cdAoM1)

def Conjunction_AbridgedAddCrAoM1(builder, crAoM1):
    builder.PrependFloat64Slot(32, crAoM1, 0.0)

def AddCrAoM1(builder, crAoM1):
    Conjunction_AbridgedAddCrAoM1(builder, crAoM1)

def Conjunction_AbridgedAddThrustAccel1(builder, thrustAccel1):
    builder.PrependFloat64Slot(33, thrustAccel1, 0.0)

def AddThrustAccel1(builder, thrustAccel1):
    Conjunction_AbridgedAddThrustAccel1(builder, thrustAccel1)

def Conjunction_AbridgedAddIdStateVector2(builder, idStateVector2):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(idStateVector2), 0)

def AddIdStateVector2(builder, idStateVector2):
    Conjunction_AbridgedAddIdStateVector2(builder, idStateVector2)

def Conjunction_AbridgedAddLastObTime2(builder, lastObTime2):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(lastObTime2), 0)

def AddLastObTime2(builder, lastObTime2):
    Conjunction_AbridgedAddLastObTime2(builder, lastObTime2)

def Conjunction_AbridgedAddCdAoM2(builder, cdAoM2):
    builder.PrependFloat64Slot(36, cdAoM2, 0.0)

def AddCdAoM2(builder, cdAoM2):
    Conjunction_AbridgedAddCdAoM2(builder, cdAoM2)

def Conjunction_AbridgedAddCrAoM2(builder, crAoM2):
    builder.PrependFloat64Slot(37, crAoM2, 0.0)

def AddCrAoM2(builder, crAoM2):
    Conjunction_AbridgedAddCrAoM2(builder, crAoM2)

def Conjunction_AbridgedAddThrustAccel2(builder, thrustAccel2):
    builder.PrependFloat64Slot(38, thrustAccel2, 0.0)

def AddThrustAccel2(builder, thrustAccel2):
    Conjunction_AbridgedAddThrustAccel2(builder, thrustAccel2)

def Conjunction_AbridgedAddComments(builder, comments):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(comments), 0)

def AddComments(builder, comments):
    Conjunction_AbridgedAddComments(builder, comments)

def Conjunction_AbridgedAddCcir(builder, ccir):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(ccir), 0)

def AddCcir(builder, ccir):
    Conjunction_AbridgedAddCcir(builder, ccir)

def Conjunction_AbridgedAddConcernNotes(builder, concernNotes):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(concernNotes), 0)

def AddConcernNotes(builder, concernNotes):
    Conjunction_AbridgedAddConcernNotes(builder, concernNotes)

def Conjunction_AbridgedAddStateDeptNotified(builder, stateDeptNotified):
    builder.PrependBoolSlot(42, stateDeptNotified, 0)

def AddStateDeptNotified(builder, stateDeptNotified):
    Conjunction_AbridgedAddStateDeptNotified(builder, stateDeptNotified)

def Conjunction_AbridgedAddOwnerContacted(builder, ownerContacted):
    builder.PrependBoolSlot(43, ownerContacted, 0)

def AddOwnerContacted(builder, ownerContacted):
    Conjunction_AbridgedAddOwnerContacted(builder, ownerContacted)

def Conjunction_AbridgedAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    Conjunction_AbridgedAddRawFileUri(builder, rawFileUri)

def Conjunction_AbridgedAddMessageFor(builder, messageFor):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(messageFor), 0)

def AddMessageFor(builder, messageFor):
    Conjunction_AbridgedAddMessageFor(builder, messageFor)

def Conjunction_AbridgedAddMessageId(builder, messageId):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(messageId), 0)

def AddMessageId(builder, messageId):
    Conjunction_AbridgedAddMessageId(builder, messageId)

def Conjunction_AbridgedAddUvwWarn(builder, uvwWarn):
    builder.PrependBoolSlot(47, uvwWarn, 0)

def AddUvwWarn(builder, uvwWarn):
    Conjunction_AbridgedAddUvwWarn(builder, uvwWarn)

def Conjunction_AbridgedAddSmallRelVelWarning(builder, smallRelVelWarning):
    builder.PrependBoolSlot(48, smallRelVelWarning, 0)

def AddSmallRelVelWarning(builder, smallRelVelWarning):
    Conjunction_AbridgedAddSmallRelVelWarning(builder, smallRelVelWarning)

def Conjunction_AbridgedAddLargeRelPosWarning(builder, largeRelPosWarning):
    builder.PrependBoolSlot(49, largeRelPosWarning, 0)

def AddLargeRelPosWarning(builder, largeRelPosWarning):
    Conjunction_AbridgedAddLargeRelPosWarning(builder, largeRelPosWarning)

def Conjunction_AbridgedAddSmallCovWarning(builder, smallCovWarning):
    builder.PrependBoolSlot(50, smallCovWarning, 0)

def AddSmallCovWarning(builder, smallCovWarning):
    Conjunction_AbridgedAddSmallCovWarning(builder, smallCovWarning)

def Conjunction_AbridgedAddLargeCovWarning(builder, largeCovWarning):
    builder.PrependBoolSlot(51, largeCovWarning, 0)

def AddLargeCovWarning(builder, largeCovWarning):
    Conjunction_AbridgedAddLargeCovWarning(builder, largeCovWarning)

def Conjunction_AbridgedAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    Conjunction_AbridgedAddTransactionId(builder, transactionId)

def Conjunction_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Conjunction_AbridgedAddSource(builder, source)

def Conjunction_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Conjunction_AbridgedAddOrigin(builder, origin)

def Conjunction_AbridgedAddOriginator(builder, originator):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(originator), 0)

def AddOriginator(builder, originator):
    Conjunction_AbridgedAddOriginator(builder, originator)

def Conjunction_AbridgedAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def AddEventId(builder, eventId):
    Conjunction_AbridgedAddEventId(builder, eventId)

def Conjunction_AbridgedAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    Conjunction_AbridgedAddDescriptor(builder, descriptor)

def Conjunction_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(58, dataMode, 0)

def AddDataMode(builder, dataMode):
    Conjunction_AbridgedAddDataMode(builder, dataMode)

def Conjunction_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Conjunction_AbridgedAddCreatedAt(builder, createdAt)

def Conjunction_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Conjunction_AbridgedAddCreatedBy(builder, createdBy)

def Conjunction_AbridgedAddStateVector1(builder, stateVector1):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(stateVector1), 0)

def AddStateVector1(builder, stateVector1):
    Conjunction_AbridgedAddStateVector1(builder, stateVector1)

def Conjunction_AbridgedAddStateVector2(builder, stateVector2):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(stateVector2), 0)

def AddStateVector2(builder, stateVector2):
    Conjunction_AbridgedAddStateVector2(builder, stateVector2)

def Conjunction_AbridgedAddSatNo1(builder, satNo1):
    builder.PrependInt32Slot(63, satNo1, 0)

def AddSatNo1(builder, satNo1):
    Conjunction_AbridgedAddSatNo1(builder, satNo1)

def Conjunction_AbridgedAddSatNo2(builder, satNo2):
    builder.PrependInt32Slot(64, satNo2, 0)

def AddSatNo2(builder, satNo2):
    Conjunction_AbridgedAddSatNo2(builder, satNo2)

def Conjunction_AbridgedAddOrigIdOnOrbit1(builder, origIdOnOrbit1):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(origIdOnOrbit1), 0)

def AddOrigIdOnOrbit1(builder, origIdOnOrbit1):
    Conjunction_AbridgedAddOrigIdOnOrbit1(builder, origIdOnOrbit1)

def Conjunction_AbridgedAddOrigIdOnOrbit2(builder, origIdOnOrbit2):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(origIdOnOrbit2), 0)

def AddOrigIdOnOrbit2(builder, origIdOnOrbit2):
    Conjunction_AbridgedAddOrigIdOnOrbit2(builder, origIdOnOrbit2)

def Conjunction_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Conjunction_AbridgedAddOrigNetwork(builder, origNetwork)

def Conjunction_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Conjunction_AbridgedEnd(builder)


class Conjunction_AbridgedT(object):

    # Conjunction_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idOnOrbit1 = None  # type: str
        self.idOnOrbit2 = None  # type: str
        self.type = None  # type: str
        self.tca = None  # type: str
        self.missDistance = 0.0  # type: float
        self.collisionProb = 0.0  # type: float
        self.collisionProbMethod = None  # type: str
        self.ephemName1 = None  # type: str
        self.esId1 = None  # type: str
        self.ephemName2 = None  # type: str
        self.esId2 = None  # type: str
        self.relPosR = 0.0  # type: float
        self.relPosT = 0.0  # type: float
        self.relPosN = 0.0  # type: float
        self.relVelMag = 0.0  # type: float
        self.relVelR = 0.0  # type: float
        self.relVelT = 0.0  # type: float
        self.relVelN = 0.0  # type: float
        self.screenEntryTime = None  # type: str
        self.screenExitTime = None  # type: str
        self.screenVolumeX = 0.0  # type: float
        self.screenVolumeY = 0.0  # type: float
        self.screenVolumeZ = 0.0  # type: float
        self.volShape = None  # type: str
        self.volEntryTime = None  # type: str
        self.volExitTime = None  # type: str
        self.penetrationLevelSigma = 0.0  # type: float
        self.idStateVector1 = None  # type: str
        self.lastObTime1 = None  # type: str
        self.cdAoM1 = 0.0  # type: float
        self.crAoM1 = 0.0  # type: float
        self.thrustAccel1 = 0.0  # type: float
        self.idStateVector2 = None  # type: str
        self.lastObTime2 = None  # type: str
        self.cdAoM2 = 0.0  # type: float
        self.crAoM2 = 0.0  # type: float
        self.thrustAccel2 = 0.0  # type: float
        self.comments = None  # type: str
        self.ccir = None  # type: str
        self.concernNotes = None  # type: str
        self.stateDeptNotified = False  # type: bool
        self.ownerContacted = False  # type: bool
        self.rawFileUri = None  # type: str
        self.messageFor = None  # type: str
        self.messageId = None  # type: str
        self.uvwWarn = False  # type: bool
        self.smallRelVelWarning = False  # type: bool
        self.largeRelPosWarning = False  # type: bool
        self.smallCovWarning = False  # type: bool
        self.largeCovWarning = False  # type: bool
        self.transactionId = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.originator = None  # type: str
        self.eventId = None  # type: str
        self.descriptor = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.stateVector1 = None  # type: str
        self.stateVector2 = None  # type: str
        self.satNo1 = 0  # type: int
        self.satNo2 = 0  # type: int
        self.origIdOnOrbit1 = None  # type: str
        self.origIdOnOrbit2 = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        conjunctionAbridged = Conjunction_Abridged()
        conjunctionAbridged.Init(buf, pos)
        return cls.InitFromObj(conjunctionAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, conjunctionAbridged):
        x = Conjunction_AbridgedT()
        x._UnPack(conjunctionAbridged)
        return x

    # Conjunction_AbridgedT
    def _UnPack(self, conjunctionAbridged):
        if conjunctionAbridged is None:
            return
        self.id = conjunctionAbridged.Id()
        self.classificationMarking = conjunctionAbridged.ClassificationMarking()
        self.idOnOrbit1 = conjunctionAbridged.IdOnOrbit1()
        self.idOnOrbit2 = conjunctionAbridged.IdOnOrbit2()
        self.type = conjunctionAbridged.Type()
        self.tca = conjunctionAbridged.Tca()
        self.missDistance = conjunctionAbridged.MissDistance()
        self.collisionProb = conjunctionAbridged.CollisionProb()
        self.collisionProbMethod = conjunctionAbridged.CollisionProbMethod()
        self.ephemName1 = conjunctionAbridged.EphemName1()
        self.esId1 = conjunctionAbridged.EsId1()
        self.ephemName2 = conjunctionAbridged.EphemName2()
        self.esId2 = conjunctionAbridged.EsId2()
        self.relPosR = conjunctionAbridged.RelPosR()
        self.relPosT = conjunctionAbridged.RelPosT()
        self.relPosN = conjunctionAbridged.RelPosN()
        self.relVelMag = conjunctionAbridged.RelVelMag()
        self.relVelR = conjunctionAbridged.RelVelR()
        self.relVelT = conjunctionAbridged.RelVelT()
        self.relVelN = conjunctionAbridged.RelVelN()
        self.screenEntryTime = conjunctionAbridged.ScreenEntryTime()
        self.screenExitTime = conjunctionAbridged.ScreenExitTime()
        self.screenVolumeX = conjunctionAbridged.ScreenVolumeX()
        self.screenVolumeY = conjunctionAbridged.ScreenVolumeY()
        self.screenVolumeZ = conjunctionAbridged.ScreenVolumeZ()
        self.volShape = conjunctionAbridged.VolShape()
        self.volEntryTime = conjunctionAbridged.VolEntryTime()
        self.volExitTime = conjunctionAbridged.VolExitTime()
        self.penetrationLevelSigma = conjunctionAbridged.PenetrationLevelSigma()
        self.idStateVector1 = conjunctionAbridged.IdStateVector1()
        self.lastObTime1 = conjunctionAbridged.LastObTime1()
        self.cdAoM1 = conjunctionAbridged.CdAoM1()
        self.crAoM1 = conjunctionAbridged.CrAoM1()
        self.thrustAccel1 = conjunctionAbridged.ThrustAccel1()
        self.idStateVector2 = conjunctionAbridged.IdStateVector2()
        self.lastObTime2 = conjunctionAbridged.LastObTime2()
        self.cdAoM2 = conjunctionAbridged.CdAoM2()
        self.crAoM2 = conjunctionAbridged.CrAoM2()
        self.thrustAccel2 = conjunctionAbridged.ThrustAccel2()
        self.comments = conjunctionAbridged.Comments()
        self.ccir = conjunctionAbridged.Ccir()
        self.concernNotes = conjunctionAbridged.ConcernNotes()
        self.stateDeptNotified = conjunctionAbridged.StateDeptNotified()
        self.ownerContacted = conjunctionAbridged.OwnerContacted()
        self.rawFileUri = conjunctionAbridged.RawFileUri()
        self.messageFor = conjunctionAbridged.MessageFor()
        self.messageId = conjunctionAbridged.MessageId()
        self.uvwWarn = conjunctionAbridged.UvwWarn()
        self.smallRelVelWarning = conjunctionAbridged.SmallRelVelWarning()
        self.largeRelPosWarning = conjunctionAbridged.LargeRelPosWarning()
        self.smallCovWarning = conjunctionAbridged.SmallCovWarning()
        self.largeCovWarning = conjunctionAbridged.LargeCovWarning()
        self.transactionId = conjunctionAbridged.TransactionId()
        self.source = conjunctionAbridged.Source()
        self.origin = conjunctionAbridged.Origin()
        self.originator = conjunctionAbridged.Originator()
        self.eventId = conjunctionAbridged.EventId()
        self.descriptor = conjunctionAbridged.Descriptor()
        self.dataMode = conjunctionAbridged.DataMode()
        self.createdAt = conjunctionAbridged.CreatedAt()
        self.createdBy = conjunctionAbridged.CreatedBy()
        self.stateVector1 = conjunctionAbridged.StateVector1()
        self.stateVector2 = conjunctionAbridged.StateVector2()
        self.satNo1 = conjunctionAbridged.SatNo1()
        self.satNo2 = conjunctionAbridged.SatNo2()
        self.origIdOnOrbit1 = conjunctionAbridged.OrigIdOnOrbit1()
        self.origIdOnOrbit2 = conjunctionAbridged.OrigIdOnOrbit2()
        self.origNetwork = conjunctionAbridged.OrigNetwork()

    # Conjunction_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idOnOrbit1 is not None:
            idOnOrbit1 = builder.CreateString(self.idOnOrbit1)
        if self.idOnOrbit2 is not None:
            idOnOrbit2 = builder.CreateString(self.idOnOrbit2)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.tca is not None:
            tca = builder.CreateString(self.tca)
        if self.collisionProbMethod is not None:
            collisionProbMethod = builder.CreateString(self.collisionProbMethod)
        if self.ephemName1 is not None:
            ephemName1 = builder.CreateString(self.ephemName1)
        if self.esId1 is not None:
            esId1 = builder.CreateString(self.esId1)
        if self.ephemName2 is not None:
            ephemName2 = builder.CreateString(self.ephemName2)
        if self.esId2 is not None:
            esId2 = builder.CreateString(self.esId2)
        if self.screenEntryTime is not None:
            screenEntryTime = builder.CreateString(self.screenEntryTime)
        if self.screenExitTime is not None:
            screenExitTime = builder.CreateString(self.screenExitTime)
        if self.volShape is not None:
            volShape = builder.CreateString(self.volShape)
        if self.volEntryTime is not None:
            volEntryTime = builder.CreateString(self.volEntryTime)
        if self.volExitTime is not None:
            volExitTime = builder.CreateString(self.volExitTime)
        if self.idStateVector1 is not None:
            idStateVector1 = builder.CreateString(self.idStateVector1)
        if self.lastObTime1 is not None:
            lastObTime1 = builder.CreateString(self.lastObTime1)
        if self.idStateVector2 is not None:
            idStateVector2 = builder.CreateString(self.idStateVector2)
        if self.lastObTime2 is not None:
            lastObTime2 = builder.CreateString(self.lastObTime2)
        if self.comments is not None:
            comments = builder.CreateString(self.comments)
        if self.ccir is not None:
            ccir = builder.CreateString(self.ccir)
        if self.concernNotes is not None:
            concernNotes = builder.CreateString(self.concernNotes)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.messageFor is not None:
            messageFor = builder.CreateString(self.messageFor)
        if self.messageId is not None:
            messageId = builder.CreateString(self.messageId)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.originator is not None:
            originator = builder.CreateString(self.originator)
        if self.eventId is not None:
            eventId = builder.CreateString(self.eventId)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.stateVector1 is not None:
            stateVector1 = builder.CreateString(self.stateVector1)
        if self.stateVector2 is not None:
            stateVector2 = builder.CreateString(self.stateVector2)
        if self.origIdOnOrbit1 is not None:
            origIdOnOrbit1 = builder.CreateString(self.origIdOnOrbit1)
        if self.origIdOnOrbit2 is not None:
            origIdOnOrbit2 = builder.CreateString(self.origIdOnOrbit2)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Conjunction_AbridgedStart(builder)
        if self.id is not None:
            Conjunction_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Conjunction_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.idOnOrbit1 is not None:
            Conjunction_AbridgedAddIdOnOrbit1(builder, idOnOrbit1)
        if self.idOnOrbit2 is not None:
            Conjunction_AbridgedAddIdOnOrbit2(builder, idOnOrbit2)
        if self.type is not None:
            Conjunction_AbridgedAddType(builder, type)
        if self.tca is not None:
            Conjunction_AbridgedAddTca(builder, tca)
        Conjunction_AbridgedAddMissDistance(builder, self.missDistance)
        Conjunction_AbridgedAddCollisionProb(builder, self.collisionProb)
        if self.collisionProbMethod is not None:
            Conjunction_AbridgedAddCollisionProbMethod(builder, collisionProbMethod)
        if self.ephemName1 is not None:
            Conjunction_AbridgedAddEphemName1(builder, ephemName1)
        if self.esId1 is not None:
            Conjunction_AbridgedAddEsId1(builder, esId1)
        if self.ephemName2 is not None:
            Conjunction_AbridgedAddEphemName2(builder, ephemName2)
        if self.esId2 is not None:
            Conjunction_AbridgedAddEsId2(builder, esId2)
        Conjunction_AbridgedAddRelPosR(builder, self.relPosR)
        Conjunction_AbridgedAddRelPosT(builder, self.relPosT)
        Conjunction_AbridgedAddRelPosN(builder, self.relPosN)
        Conjunction_AbridgedAddRelVelMag(builder, self.relVelMag)
        Conjunction_AbridgedAddRelVelR(builder, self.relVelR)
        Conjunction_AbridgedAddRelVelT(builder, self.relVelT)
        Conjunction_AbridgedAddRelVelN(builder, self.relVelN)
        if self.screenEntryTime is not None:
            Conjunction_AbridgedAddScreenEntryTime(builder, screenEntryTime)
        if self.screenExitTime is not None:
            Conjunction_AbridgedAddScreenExitTime(builder, screenExitTime)
        Conjunction_AbridgedAddScreenVolumeX(builder, self.screenVolumeX)
        Conjunction_AbridgedAddScreenVolumeY(builder, self.screenVolumeY)
        Conjunction_AbridgedAddScreenVolumeZ(builder, self.screenVolumeZ)
        if self.volShape is not None:
            Conjunction_AbridgedAddVolShape(builder, volShape)
        if self.volEntryTime is not None:
            Conjunction_AbridgedAddVolEntryTime(builder, volEntryTime)
        if self.volExitTime is not None:
            Conjunction_AbridgedAddVolExitTime(builder, volExitTime)
        Conjunction_AbridgedAddPenetrationLevelSigma(builder, self.penetrationLevelSigma)
        if self.idStateVector1 is not None:
            Conjunction_AbridgedAddIdStateVector1(builder, idStateVector1)
        if self.lastObTime1 is not None:
            Conjunction_AbridgedAddLastObTime1(builder, lastObTime1)
        Conjunction_AbridgedAddCdAoM1(builder, self.cdAoM1)
        Conjunction_AbridgedAddCrAoM1(builder, self.crAoM1)
        Conjunction_AbridgedAddThrustAccel1(builder, self.thrustAccel1)
        if self.idStateVector2 is not None:
            Conjunction_AbridgedAddIdStateVector2(builder, idStateVector2)
        if self.lastObTime2 is not None:
            Conjunction_AbridgedAddLastObTime2(builder, lastObTime2)
        Conjunction_AbridgedAddCdAoM2(builder, self.cdAoM2)
        Conjunction_AbridgedAddCrAoM2(builder, self.crAoM2)
        Conjunction_AbridgedAddThrustAccel2(builder, self.thrustAccel2)
        if self.comments is not None:
            Conjunction_AbridgedAddComments(builder, comments)
        if self.ccir is not None:
            Conjunction_AbridgedAddCcir(builder, ccir)
        if self.concernNotes is not None:
            Conjunction_AbridgedAddConcernNotes(builder, concernNotes)
        Conjunction_AbridgedAddStateDeptNotified(builder, self.stateDeptNotified)
        Conjunction_AbridgedAddOwnerContacted(builder, self.ownerContacted)
        if self.rawFileUri is not None:
            Conjunction_AbridgedAddRawFileUri(builder, rawFileUri)
        if self.messageFor is not None:
            Conjunction_AbridgedAddMessageFor(builder, messageFor)
        if self.messageId is not None:
            Conjunction_AbridgedAddMessageId(builder, messageId)
        Conjunction_AbridgedAddUvwWarn(builder, self.uvwWarn)
        Conjunction_AbridgedAddSmallRelVelWarning(builder, self.smallRelVelWarning)
        Conjunction_AbridgedAddLargeRelPosWarning(builder, self.largeRelPosWarning)
        Conjunction_AbridgedAddSmallCovWarning(builder, self.smallCovWarning)
        Conjunction_AbridgedAddLargeCovWarning(builder, self.largeCovWarning)
        if self.transactionId is not None:
            Conjunction_AbridgedAddTransactionId(builder, transactionId)
        if self.source is not None:
            Conjunction_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Conjunction_AbridgedAddOrigin(builder, origin)
        if self.originator is not None:
            Conjunction_AbridgedAddOriginator(builder, originator)
        if self.eventId is not None:
            Conjunction_AbridgedAddEventId(builder, eventId)
        if self.descriptor is not None:
            Conjunction_AbridgedAddDescriptor(builder, descriptor)
        Conjunction_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Conjunction_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Conjunction_AbridgedAddCreatedBy(builder, createdBy)
        if self.stateVector1 is not None:
            Conjunction_AbridgedAddStateVector1(builder, stateVector1)
        if self.stateVector2 is not None:
            Conjunction_AbridgedAddStateVector2(builder, stateVector2)
        Conjunction_AbridgedAddSatNo1(builder, self.satNo1)
        Conjunction_AbridgedAddSatNo2(builder, self.satNo2)
        if self.origIdOnOrbit1 is not None:
            Conjunction_AbridgedAddOrigIdOnOrbit1(builder, origIdOnOrbit1)
        if self.origIdOnOrbit2 is not None:
            Conjunction_AbridgedAddOrigIdOnOrbit2(builder, origIdOnOrbit2)
        if self.origNetwork is not None:
            Conjunction_AbridgedAddOrigNetwork(builder, origNetwork)
        conjunctionAbridged = Conjunction_AbridgedEnd(builder)
        return conjunctionAbridged
