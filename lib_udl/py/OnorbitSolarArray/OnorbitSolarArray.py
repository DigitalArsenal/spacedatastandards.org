# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Read-only collection of solar arrays on this on-orbit object.
class OnorbitSolarArray(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitSolarArray()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitSolarArray(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitSolarArrayBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitSolarArray
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITSOLARARRAY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitSolarArray
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the on-orbit object.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitSolarArray
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the SolarArray.
    # Example: /// Example: SOLARARRAY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitSolarArray
    def IdSolarArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitSolarArray
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of solar arrays on the spacecraft of the type identified by idSolarArray.
    # Example: /// Example: 10
    # Constraints: No constraints specified.
    # OnorbitSolarArray
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitSolarArray
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitSolarArray
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitSolarArray
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitSolarArray
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitSolarArray
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitSolarArray
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitSolarArray
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OnorbitSolarArray
    def SolarArray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitSolarArray
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitSolarArrayStart(builder):
    builder.StartObject(14)

def Start(builder):
    OnorbitSolarArrayStart(builder)

def OnorbitSolarArrayAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitSolarArrayAddId(builder, id)

def OnorbitSolarArrayAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitSolarArrayAddIdOnOrbit(builder, idOnOrbit)

def OnorbitSolarArrayAddIdSolarArray(builder, idSolarArray):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idSolarArray), 0)

def AddIdSolarArray(builder, idSolarArray):
    OnorbitSolarArrayAddIdSolarArray(builder, idSolarArray)

def OnorbitSolarArrayAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitSolarArrayAddClassificationMarking(builder, classificationMarking)

def OnorbitSolarArrayAddQuantity(builder, quantity):
    builder.PrependInt32Slot(4, quantity, 0)

def AddQuantity(builder, quantity):
    OnorbitSolarArrayAddQuantity(builder, quantity)

def OnorbitSolarArrayAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitSolarArrayAddCreatedAt(builder, createdAt)

def OnorbitSolarArrayAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitSolarArrayAddCreatedBy(builder, createdBy)

def OnorbitSolarArrayAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OnorbitSolarArrayAddUpdatedAt(builder, updatedAt)

def OnorbitSolarArrayAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OnorbitSolarArrayAddUpdatedBy(builder, updatedBy)

def OnorbitSolarArrayAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitSolarArrayAddSource(builder, source)

def OnorbitSolarArrayAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitSolarArrayAddOrigin(builder, origin)

def OnorbitSolarArrayAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(11, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitSolarArrayAddDataMode(builder, dataMode)

def OnorbitSolarArrayAddSolarArray(builder, solarArray):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(solarArray), 0)

def AddSolarArray(builder, solarArray):
    OnorbitSolarArrayAddSolarArray(builder, solarArray)

def OnorbitSolarArrayAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitSolarArrayAddOrigNetwork(builder, origNetwork)

def OnorbitSolarArrayEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitSolarArrayEnd(builder)


class OnorbitSolarArrayT(object):

    # OnorbitSolarArrayT
    def __init__(self):
        self.id = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idSolarArray = None  # type: str
        self.classificationMarking = None  # type: str
        self.quantity = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.solarArray = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitSolarArray = OnorbitSolarArray()
        onorbitSolarArray.Init(buf, pos)
        return cls.InitFromObj(onorbitSolarArray)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitSolarArray):
        x = OnorbitSolarArrayT()
        x._UnPack(onorbitSolarArray)
        return x

    # OnorbitSolarArrayT
    def _UnPack(self, onorbitSolarArray):
        if onorbitSolarArray is None:
            return
        self.id = onorbitSolarArray.Id()
        self.idOnOrbit = onorbitSolarArray.IdOnOrbit()
        self.idSolarArray = onorbitSolarArray.IdSolarArray()
        self.classificationMarking = onorbitSolarArray.ClassificationMarking()
        self.quantity = onorbitSolarArray.Quantity()
        self.createdAt = onorbitSolarArray.CreatedAt()
        self.createdBy = onorbitSolarArray.CreatedBy()
        self.updatedAt = onorbitSolarArray.UpdatedAt()
        self.updatedBy = onorbitSolarArray.UpdatedBy()
        self.source = onorbitSolarArray.Source()
        self.origin = onorbitSolarArray.Origin()
        self.dataMode = onorbitSolarArray.DataMode()
        self.solarArray = onorbitSolarArray.SolarArray()
        self.origNetwork = onorbitSolarArray.OrigNetwork()

    # OnorbitSolarArrayT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idSolarArray is not None:
            idSolarArray = builder.CreateString(self.idSolarArray)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.solarArray is not None:
            solarArray = builder.CreateString(self.solarArray)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        OnorbitSolarArrayStart(builder)
        if self.id is not None:
            OnorbitSolarArrayAddId(builder, id)
        if self.idOnOrbit is not None:
            OnorbitSolarArrayAddIdOnOrbit(builder, idOnOrbit)
        if self.idSolarArray is not None:
            OnorbitSolarArrayAddIdSolarArray(builder, idSolarArray)
        if self.classificationMarking is not None:
            OnorbitSolarArrayAddClassificationMarking(builder, classificationMarking)
        OnorbitSolarArrayAddQuantity(builder, self.quantity)
        if self.createdAt is not None:
            OnorbitSolarArrayAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitSolarArrayAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OnorbitSolarArrayAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OnorbitSolarArrayAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            OnorbitSolarArrayAddSource(builder, source)
        if self.origin is not None:
            OnorbitSolarArrayAddOrigin(builder, origin)
        OnorbitSolarArrayAddDataMode(builder, self.dataMode)
        if self.solarArray is not None:
            OnorbitSolarArrayAddSolarArray(builder, solarArray)
        if self.origNetwork is not None:
            OnorbitSolarArrayAddOrigNetwork(builder, origNetwork)
        onorbitSolarArray = OnorbitSolarArrayEnd(builder)
        return onorbitSolarArray
