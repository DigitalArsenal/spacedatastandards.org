# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Health state information.
class EvacHealthState_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EvacHealthState_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEvacHealthState_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EvacHealthState_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x56\x41\x43", size_prefixed=size_prefixed)

    # EvacHealthState_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
    # Example: /// Example: COGNITIVE
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacHealthState_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
    # Example: /// Example: BLUE
    # Constraints: Minimum length = 0, Maximum length = 32
    # EvacHealthState_Ingest
    def HealthStateCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Medical confidence factor.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # EvacHealthState_Ingest
    def MedConfFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
    # Example: /// Example: 2021-10-15T16:00:00.123Z
    # Constraints: No constraints specified.
    # EvacHealthState_Ingest
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def EvacHealthState_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    EvacHealthState_IngestStart(builder)

def EvacHealthState_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    EvacHealthState_IngestAddType(builder, type)

def EvacHealthState_IngestAddHealthStateCode(builder, healthStateCode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(healthStateCode), 0)

def AddHealthStateCode(builder, healthStateCode):
    EvacHealthState_IngestAddHealthStateCode(builder, healthStateCode)

def EvacHealthState_IngestAddMedConfFactor(builder, medConfFactor):
    builder.PrependInt32Slot(2, medConfFactor, 0)

def AddMedConfFactor(builder, medConfFactor):
    EvacHealthState_IngestAddMedConfFactor(builder, medConfFactor)

def EvacHealthState_IngestAddTime(builder, time):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder, time):
    EvacHealthState_IngestAddTime(builder, time)

def EvacHealthState_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EvacHealthState_IngestEnd(builder)


class EvacHealthState_IngestT(object):

    # EvacHealthState_IngestT
    def __init__(self):
        self.type = None  # type: str
        self.healthStateCode = None  # type: str
        self.medConfFactor = 0  # type: int
        self.time = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        evacHealthStateIngest = EvacHealthState_Ingest()
        evacHealthStateIngest.Init(buf, pos)
        return cls.InitFromObj(evacHealthStateIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, evacHealthStateIngest):
        x = EvacHealthState_IngestT()
        x._UnPack(evacHealthStateIngest)
        return x

    # EvacHealthState_IngestT
    def _UnPack(self, evacHealthStateIngest):
        if evacHealthStateIngest is None:
            return
        self.type = evacHealthStateIngest.Type()
        self.healthStateCode = evacHealthStateIngest.HealthStateCode()
        self.medConfFactor = evacHealthStateIngest.MedConfFactor()
        self.time = evacHealthStateIngest.Time()

    # EvacHealthState_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.healthStateCode is not None:
            healthStateCode = builder.CreateString(self.healthStateCode)
        if self.time is not None:
            time = builder.CreateString(self.time)
        EvacHealthState_IngestStart(builder)
        if self.type is not None:
            EvacHealthState_IngestAddType(builder, type)
        if self.healthStateCode is not None:
            EvacHealthState_IngestAddHealthStateCode(builder, healthStateCode)
        EvacHealthState_IngestAddMedConfFactor(builder, self.medConfFactor)
        if self.time is not None:
            EvacHealthState_IngestAddTime(builder, time)
        evacHealthStateIngest = EvacHealthState_IngestEnd(builder)
        return evacHealthStateIngest
