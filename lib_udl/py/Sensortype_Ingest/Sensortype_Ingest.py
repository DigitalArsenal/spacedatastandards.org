# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Sensor type..see the /udl/sensortype service for a complete list of all available sensor types.
class Sensortype_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sensortype_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSensortype_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Sensortype_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x45\x4E\x53", size_prefixed=size_prefixed)

    # Sensortype_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: 12344411
    # Constraints: No constraints specified.
    # Sensortype_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The specific sensor type and/or surveillance capability of this sensor.
    # Example: /// Example: Space Borne
    # Constraints: Minimum length = 0, Maximum length = 128
    # Sensortype_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Sensortype_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Sensortype_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # Sensortype_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Sensortype_IngestStart(builder):
    builder.StartObject(5)

def Start(builder):
    Sensortype_IngestStart(builder)

def Sensortype_IngestAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)

def AddId(builder, id):
    Sensortype_IngestAddId(builder, id)

def Sensortype_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Sensortype_IngestAddType(builder, type)

def Sensortype_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Sensortype_IngestAddCreatedAt(builder, createdAt)

def Sensortype_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Sensortype_IngestAddCreatedBy(builder, createdBy)

def Sensortype_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Sensortype_IngestAddOrigNetwork(builder, origNetwork)

def Sensortype_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Sensortype_IngestEnd(builder)


class Sensortype_IngestT(object):

    # Sensortype_IngestT
    def __init__(self):
        self.id = 0  # type: int
        self.type = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sensortypeIngest = Sensortype_Ingest()
        sensortypeIngest.Init(buf, pos)
        return cls.InitFromObj(sensortypeIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sensortypeIngest):
        x = Sensortype_IngestT()
        x._UnPack(sensortypeIngest)
        return x

    # Sensortype_IngestT
    def _UnPack(self, sensortypeIngest):
        if sensortypeIngest is None:
            return
        self.id = sensortypeIngest.Id()
        self.type = sensortypeIngest.Type()
        self.createdAt = sensortypeIngest.CreatedAt()
        self.createdBy = sensortypeIngest.CreatedBy()
        self.origNetwork = sensortypeIngest.OrigNetwork()

    # Sensortype_IngestT
    def Pack(self, builder):
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Sensortype_IngestStart(builder)
        Sensortype_IngestAddId(builder, self.id)
        if self.type is not None:
            Sensortype_IngestAddType(builder, type)
        if self.createdAt is not None:
            Sensortype_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Sensortype_IngestAddCreatedBy(builder, createdBy)
        if self.origNetwork is not None:
            Sensortype_IngestAddOrigNetwork(builder, origNetwork)
        sensortypeIngest = Sensortype_IngestEnd(builder)
        return sensortypeIngest
