# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Multidimensional array of incoming elevation at the receiver. Has the same dimensions as power. Antenna type, configuration, and method of determination to be documented in the metadata notes field.
class IonoObservationElevation_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationElevation_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationElevation_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationElevation_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationElevation_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notes for the elevation data.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservationElevation_Full
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of integers of the elevation array dimensions.
    # Example: /// Example: [2, 3]
    # Constraints: No constraints specified.
    # IonoObservationElevation_Full
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationElevation_Full
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationElevation_Full
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Array of names for dimensions.
    # Example: /// Example: ['NAME1', 'NAME2']
    # Constraints: No constraints specified.
    # IonoObservationElevation_Full
    def DimensionName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationElevation_Full
    def DimensionNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationElevation_Full
    def DimensionNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Array of incoming elevation at the receiver.
    # Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    # Constraints: No constraints specified.
    # IonoObservationElevation_Full
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationElevation_Full
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationElevation_Full
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def IonoObservationElevation_FullStart(builder):
    builder.StartObject(4)

def Start(builder):
    IonoObservationElevation_FullStart(builder)

def IonoObservationElevation_FullAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    IonoObservationElevation_FullAddNotes(builder, notes)

def IonoObservationElevation_FullAddDimensions(builder, dimensions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)

def AddDimensions(builder, dimensions):
    IonoObservationElevation_FullAddDimensions(builder, dimensions)

def IonoObservationElevation_FullStartDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionsVector(builder, numElems):
    return IonoObservationElevation_FullStartDimensionsVector(builder, numElems)

def IonoObservationElevation_FullAddDimensionName(builder, dimensionName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionName), 0)

def AddDimensionName(builder, dimensionName):
    IonoObservationElevation_FullAddDimensionName(builder, dimensionName)

def IonoObservationElevation_FullStartDimensionNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionNameVector(builder, numElems):
    return IonoObservationElevation_FullStartDimensionNameVector(builder, numElems)

def IonoObservationElevation_FullAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationElevation_FullAddData(builder, data)

def IonoObservationElevation_FullStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationElevation_FullStartDataVector(builder, numElems)

def IonoObservationElevation_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationElevation_FullEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationElevation_FullT(object):

    # IonoObservationElevation_FullT
    def __init__(self):
        self.notes = None  # type: str
        self.dimensions = None  # type: List[str]
        self.dimensionName = None  # type: List[str]
        self.data = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationElevationFull = IonoObservationElevation_Full()
        ionoObservationElevationFull.Init(buf, pos)
        return cls.InitFromObj(ionoObservationElevationFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationElevationFull):
        x = IonoObservationElevation_FullT()
        x._UnPack(ionoObservationElevationFull)
        return x

    # IonoObservationElevation_FullT
    def _UnPack(self, ionoObservationElevationFull):
        if ionoObservationElevationFull is None:
            return
        self.notes = ionoObservationElevationFull.Notes()
        if not ionoObservationElevationFull.DimensionsIsNone():
            self.dimensions = []
            for i in range(ionoObservationElevationFull.DimensionsLength()):
                self.dimensions.append(ionoObservationElevationFull.Dimensions(i))
        if not ionoObservationElevationFull.DimensionNameIsNone():
            self.dimensionName = []
            for i in range(ionoObservationElevationFull.DimensionNameLength()):
                self.dimensionName.append(ionoObservationElevationFull.DimensionName(i))
        if not ionoObservationElevationFull.DataIsNone():
            self.data = []
            for i in range(ionoObservationElevationFull.DataLength()):
                self.data.append(ionoObservationElevationFull.Data(i))

    # IonoObservationElevation_FullT
    def Pack(self, builder):
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.dimensions is not None:
            dimensionslist = []
            for i in range(len(self.dimensions)):
                dimensionslist.append(builder.CreateString(self.dimensions[i]))
            IonoObservationElevation_FullStartDimensionsVector(builder, len(self.dimensions))
            for i in reversed(range(len(self.dimensions))):
                builder.PrependUOffsetTRelative(dimensionslist[i])
            dimensions = builder.EndVector()
        if self.dimensionName is not None:
            dimensionNamelist = []
            for i in range(len(self.dimensionName)):
                dimensionNamelist.append(builder.CreateString(self.dimensionName[i]))
            IonoObservationElevation_FullStartDimensionNameVector(builder, len(self.dimensionName))
            for i in reversed(range(len(self.dimensionName))):
                builder.PrependUOffsetTRelative(dimensionNamelist[i])
            dimensionName = builder.EndVector()
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationElevation_FullStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        IonoObservationElevation_FullStart(builder)
        if self.notes is not None:
            IonoObservationElevation_FullAddNotes(builder, notes)
        if self.dimensions is not None:
            IonoObservationElevation_FullAddDimensions(builder, dimensions)
        if self.dimensionName is not None:
            IonoObservationElevation_FullAddDimensionName(builder, dimensionName)
        if self.data is not None:
            IonoObservationElevation_FullAddData(builder, data)
        ionoObservationElevationFull = IonoObservationElevation_FullEnd(builder)
        return ionoObservationElevationFull
