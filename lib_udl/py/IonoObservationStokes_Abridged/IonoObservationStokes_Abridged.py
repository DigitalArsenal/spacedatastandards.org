# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Multi-dimensional array with the same dimensions as power plus one additional dimension spanning an S dimension for S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3). It is advised to describe the antenna type, antenna configuration, and Stokes coordinate system as a notes to the variable.
class IonoObservationStokes_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IonoObservationStokes_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIonoObservationStokes_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IonoObservationStokes_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4F\x4E\x4F", size_prefixed=size_prefixed)

    # IonoObservationStokes_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notes for the stokes data.
    # Example: /// Example: NOTES
    # Constraints: Minimum length = 0, Maximum length = 512
    # IonoObservationStokes_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Array of integers of the stoke array dimensions.
    # Example: /// Example: [2, 3]
    # Constraints: No constraints specified.
    # IonoObservationStokes_Abridged
    def Dimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationStokes_Abridged
    def DimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationStokes_Abridged
    def DimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Array of names for dimensions.
    # Example: /// Example: ['NAMES1', 'NAMES2']
    # Constraints: No constraints specified.
    # IonoObservationStokes_Abridged
    def DimensionName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationStokes_Abridged
    def DimensionNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationStokes_Abridged
    def DimensionNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Array of received stokes data.
    # Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
    # Constraints: No constraints specified.
    # IonoObservationStokes_Abridged
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationStokes_Abridged
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationStokes_Abridged
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).
    # Example: /// Example: [1.0, 2.0]
    # Constraints: No constraints specified.
    # IonoObservationStokes_Abridged
    def S(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IonoObservationStokes_Abridged
    def SLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IonoObservationStokes_Abridged
    def SIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def IonoObservationStokes_AbridgedStart(builder):
    builder.StartObject(5)

def Start(builder):
    IonoObservationStokes_AbridgedStart(builder)

def IonoObservationStokes_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    IonoObservationStokes_AbridgedAddNotes(builder, notes)

def IonoObservationStokes_AbridgedAddDimensions(builder, dimensions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)

def AddDimensions(builder, dimensions):
    IonoObservationStokes_AbridgedAddDimensions(builder, dimensions)

def IonoObservationStokes_AbridgedStartDimensionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionsVector(builder, numElems):
    return IonoObservationStokes_AbridgedStartDimensionsVector(builder, numElems)

def IonoObservationStokes_AbridgedAddDimensionName(builder, dimensionName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensionName), 0)

def AddDimensionName(builder, dimensionName):
    IonoObservationStokes_AbridgedAddDimensionName(builder, dimensionName)

def IonoObservationStokes_AbridgedStartDimensionNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimensionNameVector(builder, numElems):
    return IonoObservationStokes_AbridgedStartDimensionNameVector(builder, numElems)

def IonoObservationStokes_AbridgedAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IonoObservationStokes_AbridgedAddData(builder, data)

def IonoObservationStokes_AbridgedStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IonoObservationStokes_AbridgedStartDataVector(builder, numElems)

def IonoObservationStokes_AbridgedAddS(builder, s):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(s), 0)

def AddS(builder, s):
    IonoObservationStokes_AbridgedAddS(builder, s)

def IonoObservationStokes_AbridgedStartSVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSVector(builder, numElems):
    return IonoObservationStokes_AbridgedStartSVector(builder, numElems)

def IonoObservationStokes_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return IonoObservationStokes_AbridgedEnd(builder)

try:
    from typing import List
except:
    pass

class IonoObservationStokes_AbridgedT(object):

    # IonoObservationStokes_AbridgedT
    def __init__(self):
        self.notes = None  # type: str
        self.dimensions = None  # type: List[str]
        self.dimensionName = None  # type: List[str]
        self.data = None  # type: List[str]
        self.s = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ionoObservationStokesAbridged = IonoObservationStokes_Abridged()
        ionoObservationStokesAbridged.Init(buf, pos)
        return cls.InitFromObj(ionoObservationStokesAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ionoObservationStokesAbridged):
        x = IonoObservationStokes_AbridgedT()
        x._UnPack(ionoObservationStokesAbridged)
        return x

    # IonoObservationStokes_AbridgedT
    def _UnPack(self, ionoObservationStokesAbridged):
        if ionoObservationStokesAbridged is None:
            return
        self.notes = ionoObservationStokesAbridged.Notes()
        if not ionoObservationStokesAbridged.DimensionsIsNone():
            self.dimensions = []
            for i in range(ionoObservationStokesAbridged.DimensionsLength()):
                self.dimensions.append(ionoObservationStokesAbridged.Dimensions(i))
        if not ionoObservationStokesAbridged.DimensionNameIsNone():
            self.dimensionName = []
            for i in range(ionoObservationStokesAbridged.DimensionNameLength()):
                self.dimensionName.append(ionoObservationStokesAbridged.DimensionName(i))
        if not ionoObservationStokesAbridged.DataIsNone():
            self.data = []
            for i in range(ionoObservationStokesAbridged.DataLength()):
                self.data.append(ionoObservationStokesAbridged.Data(i))
        if not ionoObservationStokesAbridged.SIsNone():
            self.s = []
            for i in range(ionoObservationStokesAbridged.SLength()):
                self.s.append(ionoObservationStokesAbridged.S(i))

    # IonoObservationStokes_AbridgedT
    def Pack(self, builder):
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.dimensions is not None:
            dimensionslist = []
            for i in range(len(self.dimensions)):
                dimensionslist.append(builder.CreateString(self.dimensions[i]))
            IonoObservationStokes_AbridgedStartDimensionsVector(builder, len(self.dimensions))
            for i in reversed(range(len(self.dimensions))):
                builder.PrependUOffsetTRelative(dimensionslist[i])
            dimensions = builder.EndVector()
        if self.dimensionName is not None:
            dimensionNamelist = []
            for i in range(len(self.dimensionName)):
                dimensionNamelist.append(builder.CreateString(self.dimensionName[i]))
            IonoObservationStokes_AbridgedStartDimensionNameVector(builder, len(self.dimensionName))
            for i in reversed(range(len(self.dimensionName))):
                builder.PrependUOffsetTRelative(dimensionNamelist[i])
            dimensionName = builder.EndVector()
        if self.data is not None:
            datalist = []
            for i in range(len(self.data)):
                datalist.append(builder.CreateString(self.data[i]))
            IonoObservationStokes_AbridgedStartDataVector(builder, len(self.data))
            for i in reversed(range(len(self.data))):
                builder.PrependUOffsetTRelative(datalist[i])
            data = builder.EndVector()
        if self.s is not None:
            slist = []
            for i in range(len(self.s)):
                slist.append(builder.CreateString(self.s[i]))
            IonoObservationStokes_AbridgedStartSVector(builder, len(self.s))
            for i in reversed(range(len(self.s))):
                builder.PrependUOffsetTRelative(slist[i])
            s = builder.EndVector()
        IonoObservationStokes_AbridgedStart(builder)
        if self.notes is not None:
            IonoObservationStokes_AbridgedAddNotes(builder, notes)
        if self.dimensions is not None:
            IonoObservationStokes_AbridgedAddDimensions(builder, dimensions)
        if self.dimensionName is not None:
            IonoObservationStokes_AbridgedAddDimensionName(builder, dimensionName)
        if self.data is not None:
            IonoObservationStokes_AbridgedAddData(builder, data)
        if self.s is not None:
            IonoObservationStokes_AbridgedAddS(builder, s)
        ionoObservationStokesAbridged = IonoObservationStokes_AbridgedEnd(builder)
        return ionoObservationStokesAbridged
