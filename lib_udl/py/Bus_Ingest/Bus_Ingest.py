# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
class Bus_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bus_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBus_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Bus_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x55\x53\x49", size_prefixed=size_prefixed)

    # Bus_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BUS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Bus_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of this bus.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 1, Maximum length = 128
    # Bus_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Bus_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the parent entity for this bus.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 0, Maximum length = 36
    # Bus_Ingest
    def IdEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of this bus.
    # Example: /// Example: Example type
    # Constraints: Minimum length = 0, Maximum length = 128
    # Bus_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maximum mass at launch, lower bounds, in kilograms.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxLaunchMassLower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum mass at launch, upper bounds, in kilograms.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxLaunchMassUpper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum mass on station at beginning of life, in kilograms.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxBolstationMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average mass available on this bus for payloads, in kilograms.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def AvgPayloadMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum payload mass available, in kilograms.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxPayloadMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum mass of this bus without payloads or fuel, in kilograms.
    # Example: /// Example: 2858.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MinDryMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average mass of this bus without payloads or fuel, in kilograms.
    # Example: /// Example: 2879.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def AvgDryMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Median mass of this bus without payloads or fuel, in kilograms.
    # Example: /// Example: 2950.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MedianDryMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum mass of this bus without payloads or fuel, in kilograms.
    # Example: /// Example: 2900.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxDryMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Minimum mass of this bus with fuel, but without payloads, in kilograms.
    # Example: /// Example: 5192.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MinWetMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average mass of this bus with fuel, but without payloads, in kilograms.
    # Example: /// Example: 5246.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def AvgWetMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Median mass of this bus with fuel, but without payloads, in kilograms.
    # Example: /// Example: 5260.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MedianWetMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum mass of this bus with fuel, but without payloads, in kilograms.
    # Example: /// Example: 5300.0
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxWetMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum power at beginning of life, lower bounds, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxBolpowerLower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum power at beginning of life, upper bounds, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxBolpowerUpper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum power at end of life, lower bounds, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxEolpowerLower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum power at end of life, upper bounds, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxEolpowerUpper(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average power available on this bus, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def AvgSpacecraftPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum power available on this bus, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxSpacecraftPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def OapSpacecraftPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Average power available on this bus for payloads, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def AvgPayloadPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Maximum payload power available, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def MaxPayloadPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def OapPayloadPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Body dimension in X direction pertaining to length, in meters.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def BodyDimensionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Body dimension in Y direction pertaining to height, in meters.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def BodyDimensionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Body dimension in Z direction pertaining to width, in meters.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def BodyDimensionZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The radial dimension available on this bus for payloads, in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def PayloadDimensionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The in-track dimension available on this bus for payloads, in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def PayloadDimensionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The cross-track dimension available on this bus for payloads, in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def PayloadDimensionZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The volume available on this bus for payloads, in cubic meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def PayloadVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch envelope dimension in X direction, in meters.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def LaunchEnvelopeDimensionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch envelope dimension in Y direction, in meters.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def LaunchEnvelopeDimensionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Launch envelope dimension in Z direction, in meters.
    # Example: /// Example: 10.1
    # Constraints: No constraints specified.
    # Bus_Ingest
    def LaunchEnvelopeDimensionZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The number of orbit types this bus can support.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Bus_Ingest
    def NumOrbitType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
    # Example: /// Example: ['LEO', 'HEO', 'GEO']
    # Constraints: No constraints specified.
    # Bus_Ingest
    def OrbitTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Bus_Ingest
    def OrbitTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Bus_Ingest
    def OrbitTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
    # Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Bus_Ingest
    def TelemetryTrackingManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization which manufactures the main onboard computer for this bus.
    # Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Bus_Ingest
    def MainComputerManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization which manufactures this bus.
    # Example: /// Example: MANUFACTURERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Bus_Ingest
    def ManufacturerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the organization which designs the bus kit.
    # Example: /// Example: BUSKITDESIGNERORG-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Bus_Ingest
    def BusKitDesignerOrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
    # Example: /// Example: US
    # Constraints: Minimum length = 0, Maximum length = 4
    # Bus_Ingest
    def CountryCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
    # Example: /// Example: Nanosatellite
    # Constraints: Minimum length = 0, Maximum length = 64
    # Bus_Ingest
    def MassCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Power category of this bus (e.g. 0-1kW low power, etc).
    # Example: /// Example: low power
    # Constraints: Minimum length = 0, Maximum length = 64
    # Bus_Ingest
    def PowerCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating if this bus is generic.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Bus_Ingest
    def Generic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Notes/description of the bus.
    # Example: /// Example: Dedicated small spacecraft bus.
    # Constraints: Minimum length = 0, Maximum length = 128
    # Bus_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Attitude and Orbital Control Notes/description for the bus.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 256
    # Bus_Ingest
    def AocsNotes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Bus_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Bus_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Bus_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Bus_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Bus_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Bus_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Bus_Ingest
    def Entity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Bus_IngestStart(builder):
    builder.StartObject(57)

def Start(builder):
    Bus_IngestStart(builder)

def Bus_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Bus_IngestAddId(builder, id)

def Bus_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Bus_IngestAddName(builder, name)

def Bus_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Bus_IngestAddClassificationMarking(builder, classificationMarking)

def Bus_IngestAddIdEntity(builder, idEntity):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(idEntity), 0)

def AddIdEntity(builder, idEntity):
    Bus_IngestAddIdEntity(builder, idEntity)

def Bus_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Bus_IngestAddType(builder, type)

def Bus_IngestAddMaxLaunchMassLower(builder, maxLaunchMassLower):
    builder.PrependFloat64Slot(5, maxLaunchMassLower, 0.0)

def AddMaxLaunchMassLower(builder, maxLaunchMassLower):
    Bus_IngestAddMaxLaunchMassLower(builder, maxLaunchMassLower)

def Bus_IngestAddMaxLaunchMassUpper(builder, maxLaunchMassUpper):
    builder.PrependFloat64Slot(6, maxLaunchMassUpper, 0.0)

def AddMaxLaunchMassUpper(builder, maxLaunchMassUpper):
    Bus_IngestAddMaxLaunchMassUpper(builder, maxLaunchMassUpper)

def Bus_IngestAddMaxBolstationMass(builder, maxBolstationMass):
    builder.PrependFloat64Slot(7, maxBolstationMass, 0.0)

def AddMaxBolstationMass(builder, maxBolstationMass):
    Bus_IngestAddMaxBolstationMass(builder, maxBolstationMass)

def Bus_IngestAddAvgPayloadMass(builder, avgPayloadMass):
    builder.PrependFloat64Slot(8, avgPayloadMass, 0.0)

def AddAvgPayloadMass(builder, avgPayloadMass):
    Bus_IngestAddAvgPayloadMass(builder, avgPayloadMass)

def Bus_IngestAddMaxPayloadMass(builder, maxPayloadMass):
    builder.PrependFloat64Slot(9, maxPayloadMass, 0.0)

def AddMaxPayloadMass(builder, maxPayloadMass):
    Bus_IngestAddMaxPayloadMass(builder, maxPayloadMass)

def Bus_IngestAddMinDryMass(builder, minDryMass):
    builder.PrependFloat64Slot(10, minDryMass, 0.0)

def AddMinDryMass(builder, minDryMass):
    Bus_IngestAddMinDryMass(builder, minDryMass)

def Bus_IngestAddAvgDryMass(builder, avgDryMass):
    builder.PrependFloat64Slot(11, avgDryMass, 0.0)

def AddAvgDryMass(builder, avgDryMass):
    Bus_IngestAddAvgDryMass(builder, avgDryMass)

def Bus_IngestAddMedianDryMass(builder, medianDryMass):
    builder.PrependFloat64Slot(12, medianDryMass, 0.0)

def AddMedianDryMass(builder, medianDryMass):
    Bus_IngestAddMedianDryMass(builder, medianDryMass)

def Bus_IngestAddMaxDryMass(builder, maxDryMass):
    builder.PrependFloat64Slot(13, maxDryMass, 0.0)

def AddMaxDryMass(builder, maxDryMass):
    Bus_IngestAddMaxDryMass(builder, maxDryMass)

def Bus_IngestAddMinWetMass(builder, minWetMass):
    builder.PrependFloat64Slot(14, minWetMass, 0.0)

def AddMinWetMass(builder, minWetMass):
    Bus_IngestAddMinWetMass(builder, minWetMass)

def Bus_IngestAddAvgWetMass(builder, avgWetMass):
    builder.PrependFloat64Slot(15, avgWetMass, 0.0)

def AddAvgWetMass(builder, avgWetMass):
    Bus_IngestAddAvgWetMass(builder, avgWetMass)

def Bus_IngestAddMedianWetMass(builder, medianWetMass):
    builder.PrependFloat64Slot(16, medianWetMass, 0.0)

def AddMedianWetMass(builder, medianWetMass):
    Bus_IngestAddMedianWetMass(builder, medianWetMass)

def Bus_IngestAddMaxWetMass(builder, maxWetMass):
    builder.PrependFloat64Slot(17, maxWetMass, 0.0)

def AddMaxWetMass(builder, maxWetMass):
    Bus_IngestAddMaxWetMass(builder, maxWetMass)

def Bus_IngestAddMaxBolpowerLower(builder, maxBolpowerLower):
    builder.PrependFloat64Slot(18, maxBolpowerLower, 0.0)

def AddMaxBolpowerLower(builder, maxBolpowerLower):
    Bus_IngestAddMaxBolpowerLower(builder, maxBolpowerLower)

def Bus_IngestAddMaxBolpowerUpper(builder, maxBolpowerUpper):
    builder.PrependFloat64Slot(19, maxBolpowerUpper, 0.0)

def AddMaxBolpowerUpper(builder, maxBolpowerUpper):
    Bus_IngestAddMaxBolpowerUpper(builder, maxBolpowerUpper)

def Bus_IngestAddMaxEolpowerLower(builder, maxEolpowerLower):
    builder.PrependFloat64Slot(20, maxEolpowerLower, 0.0)

def AddMaxEolpowerLower(builder, maxEolpowerLower):
    Bus_IngestAddMaxEolpowerLower(builder, maxEolpowerLower)

def Bus_IngestAddMaxEolpowerUpper(builder, maxEolpowerUpper):
    builder.PrependFloat64Slot(21, maxEolpowerUpper, 0.0)

def AddMaxEolpowerUpper(builder, maxEolpowerUpper):
    Bus_IngestAddMaxEolpowerUpper(builder, maxEolpowerUpper)

def Bus_IngestAddAvgSpacecraftPower(builder, avgSpacecraftPower):
    builder.PrependFloat64Slot(22, avgSpacecraftPower, 0.0)

def AddAvgSpacecraftPower(builder, avgSpacecraftPower):
    Bus_IngestAddAvgSpacecraftPower(builder, avgSpacecraftPower)

def Bus_IngestAddMaxSpacecraftPower(builder, maxSpacecraftPower):
    builder.PrependFloat64Slot(23, maxSpacecraftPower, 0.0)

def AddMaxSpacecraftPower(builder, maxSpacecraftPower):
    Bus_IngestAddMaxSpacecraftPower(builder, maxSpacecraftPower)

def Bus_IngestAddOapSpacecraftPower(builder, oapSpacecraftPower):
    builder.PrependFloat64Slot(24, oapSpacecraftPower, 0.0)

def AddOapSpacecraftPower(builder, oapSpacecraftPower):
    Bus_IngestAddOapSpacecraftPower(builder, oapSpacecraftPower)

def Bus_IngestAddAvgPayloadPower(builder, avgPayloadPower):
    builder.PrependFloat64Slot(25, avgPayloadPower, 0.0)

def AddAvgPayloadPower(builder, avgPayloadPower):
    Bus_IngestAddAvgPayloadPower(builder, avgPayloadPower)

def Bus_IngestAddMaxPayloadPower(builder, maxPayloadPower):
    builder.PrependFloat64Slot(26, maxPayloadPower, 0.0)

def AddMaxPayloadPower(builder, maxPayloadPower):
    Bus_IngestAddMaxPayloadPower(builder, maxPayloadPower)

def Bus_IngestAddOapPayloadPower(builder, oapPayloadPower):
    builder.PrependFloat64Slot(27, oapPayloadPower, 0.0)

def AddOapPayloadPower(builder, oapPayloadPower):
    Bus_IngestAddOapPayloadPower(builder, oapPayloadPower)

def Bus_IngestAddBodyDimensionX(builder, bodyDimensionX):
    builder.PrependFloat64Slot(28, bodyDimensionX, 0.0)

def AddBodyDimensionX(builder, bodyDimensionX):
    Bus_IngestAddBodyDimensionX(builder, bodyDimensionX)

def Bus_IngestAddBodyDimensionY(builder, bodyDimensionY):
    builder.PrependFloat64Slot(29, bodyDimensionY, 0.0)

def AddBodyDimensionY(builder, bodyDimensionY):
    Bus_IngestAddBodyDimensionY(builder, bodyDimensionY)

def Bus_IngestAddBodyDimensionZ(builder, bodyDimensionZ):
    builder.PrependFloat64Slot(30, bodyDimensionZ, 0.0)

def AddBodyDimensionZ(builder, bodyDimensionZ):
    Bus_IngestAddBodyDimensionZ(builder, bodyDimensionZ)

def Bus_IngestAddPayloadDimensionX(builder, payloadDimensionX):
    builder.PrependFloat64Slot(31, payloadDimensionX, 0.0)

def AddPayloadDimensionX(builder, payloadDimensionX):
    Bus_IngestAddPayloadDimensionX(builder, payloadDimensionX)

def Bus_IngestAddPayloadDimensionY(builder, payloadDimensionY):
    builder.PrependFloat64Slot(32, payloadDimensionY, 0.0)

def AddPayloadDimensionY(builder, payloadDimensionY):
    Bus_IngestAddPayloadDimensionY(builder, payloadDimensionY)

def Bus_IngestAddPayloadDimensionZ(builder, payloadDimensionZ):
    builder.PrependFloat64Slot(33, payloadDimensionZ, 0.0)

def AddPayloadDimensionZ(builder, payloadDimensionZ):
    Bus_IngestAddPayloadDimensionZ(builder, payloadDimensionZ)

def Bus_IngestAddPayloadVolume(builder, payloadVolume):
    builder.PrependFloat64Slot(34, payloadVolume, 0.0)

def AddPayloadVolume(builder, payloadVolume):
    Bus_IngestAddPayloadVolume(builder, payloadVolume)

def Bus_IngestAddLaunchEnvelopeDimensionX(builder, launchEnvelopeDimensionX):
    builder.PrependFloat64Slot(35, launchEnvelopeDimensionX, 0.0)

def AddLaunchEnvelopeDimensionX(builder, launchEnvelopeDimensionX):
    Bus_IngestAddLaunchEnvelopeDimensionX(builder, launchEnvelopeDimensionX)

def Bus_IngestAddLaunchEnvelopeDimensionY(builder, launchEnvelopeDimensionY):
    builder.PrependFloat64Slot(36, launchEnvelopeDimensionY, 0.0)

def AddLaunchEnvelopeDimensionY(builder, launchEnvelopeDimensionY):
    Bus_IngestAddLaunchEnvelopeDimensionY(builder, launchEnvelopeDimensionY)

def Bus_IngestAddLaunchEnvelopeDimensionZ(builder, launchEnvelopeDimensionZ):
    builder.PrependFloat64Slot(37, launchEnvelopeDimensionZ, 0.0)

def AddLaunchEnvelopeDimensionZ(builder, launchEnvelopeDimensionZ):
    Bus_IngestAddLaunchEnvelopeDimensionZ(builder, launchEnvelopeDimensionZ)

def Bus_IngestAddNumOrbitType(builder, numOrbitType):
    builder.PrependInt32Slot(38, numOrbitType, 0)

def AddNumOrbitType(builder, numOrbitType):
    Bus_IngestAddNumOrbitType(builder, numOrbitType)

def Bus_IngestAddOrbitTypes(builder, orbitTypes):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(orbitTypes), 0)

def AddOrbitTypes(builder, orbitTypes):
    Bus_IngestAddOrbitTypes(builder, orbitTypes)

def Bus_IngestStartOrbitTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOrbitTypesVector(builder, numElems):
    return Bus_IngestStartOrbitTypesVector(builder, numElems)

def Bus_IngestAddTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(telemetryTrackingManufacturerOrgId), 0)

def AddTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgId):
    Bus_IngestAddTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgId)

def Bus_IngestAddMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(mainComputerManufacturerOrgId), 0)

def AddMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgId):
    Bus_IngestAddMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgId)

def Bus_IngestAddManufacturerOrgId(builder, manufacturerOrgId):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(manufacturerOrgId), 0)

def AddManufacturerOrgId(builder, manufacturerOrgId):
    Bus_IngestAddManufacturerOrgId(builder, manufacturerOrgId)

def Bus_IngestAddBusKitDesignerOrgId(builder, busKitDesignerOrgId):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(busKitDesignerOrgId), 0)

def AddBusKitDesignerOrgId(builder, busKitDesignerOrgId):
    Bus_IngestAddBusKitDesignerOrgId(builder, busKitDesignerOrgId)

def Bus_IngestAddCountryCode(builder, countryCode):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(countryCode), 0)

def AddCountryCode(builder, countryCode):
    Bus_IngestAddCountryCode(builder, countryCode)

def Bus_IngestAddMassCategory(builder, massCategory):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(massCategory), 0)

def AddMassCategory(builder, massCategory):
    Bus_IngestAddMassCategory(builder, massCategory)

def Bus_IngestAddPowerCategory(builder, powerCategory):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(powerCategory), 0)

def AddPowerCategory(builder, powerCategory):
    Bus_IngestAddPowerCategory(builder, powerCategory)

def Bus_IngestAddGeneric(builder, generic):
    builder.PrependBoolSlot(47, generic, 0)

def AddGeneric(builder, generic):
    Bus_IngestAddGeneric(builder, generic)

def Bus_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    Bus_IngestAddDescription(builder, description)

def Bus_IngestAddAocsNotes(builder, aocsNotes):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(aocsNotes), 0)

def AddAocsNotes(builder, aocsNotes):
    Bus_IngestAddAocsNotes(builder, aocsNotes)

def Bus_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Bus_IngestAddSource(builder, source)

def Bus_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Bus_IngestAddOrigin(builder, origin)

def Bus_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Bus_IngestAddOrigNetwork(builder, origNetwork)

def Bus_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(53, dataMode, 0)

def AddDataMode(builder, dataMode):
    Bus_IngestAddDataMode(builder, dataMode)

def Bus_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Bus_IngestAddCreatedAt(builder, createdAt)

def Bus_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Bus_IngestAddCreatedBy(builder, createdBy)

def Bus_IngestAddEntity(builder, entity):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(entity), 0)

def AddEntity(builder, entity):
    Bus_IngestAddEntity(builder, entity)

def Bus_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Bus_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class Bus_IngestT(object):

    # Bus_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.idEntity = None  # type: str
        self.type = None  # type: str
        self.maxLaunchMassLower = 0.0  # type: float
        self.maxLaunchMassUpper = 0.0  # type: float
        self.maxBolstationMass = 0.0  # type: float
        self.avgPayloadMass = 0.0  # type: float
        self.maxPayloadMass = 0.0  # type: float
        self.minDryMass = 0.0  # type: float
        self.avgDryMass = 0.0  # type: float
        self.medianDryMass = 0.0  # type: float
        self.maxDryMass = 0.0  # type: float
        self.minWetMass = 0.0  # type: float
        self.avgWetMass = 0.0  # type: float
        self.medianWetMass = 0.0  # type: float
        self.maxWetMass = 0.0  # type: float
        self.maxBolpowerLower = 0.0  # type: float
        self.maxBolpowerUpper = 0.0  # type: float
        self.maxEolpowerLower = 0.0  # type: float
        self.maxEolpowerUpper = 0.0  # type: float
        self.avgSpacecraftPower = 0.0  # type: float
        self.maxSpacecraftPower = 0.0  # type: float
        self.oapSpacecraftPower = 0.0  # type: float
        self.avgPayloadPower = 0.0  # type: float
        self.maxPayloadPower = 0.0  # type: float
        self.oapPayloadPower = 0.0  # type: float
        self.bodyDimensionX = 0.0  # type: float
        self.bodyDimensionY = 0.0  # type: float
        self.bodyDimensionZ = 0.0  # type: float
        self.payloadDimensionX = 0.0  # type: float
        self.payloadDimensionY = 0.0  # type: float
        self.payloadDimensionZ = 0.0  # type: float
        self.payloadVolume = 0.0  # type: float
        self.launchEnvelopeDimensionX = 0.0  # type: float
        self.launchEnvelopeDimensionY = 0.0  # type: float
        self.launchEnvelopeDimensionZ = 0.0  # type: float
        self.numOrbitType = 0  # type: int
        self.orbitTypes = None  # type: List[str]
        self.telemetryTrackingManufacturerOrgId = None  # type: str
        self.mainComputerManufacturerOrgId = None  # type: str
        self.manufacturerOrgId = None  # type: str
        self.busKitDesignerOrgId = None  # type: str
        self.countryCode = None  # type: str
        self.massCategory = None  # type: str
        self.powerCategory = None  # type: str
        self.generic = False  # type: bool
        self.description = None  # type: str
        self.aocsNotes = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.entity = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        busIngest = Bus_Ingest()
        busIngest.Init(buf, pos)
        return cls.InitFromObj(busIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, busIngest):
        x = Bus_IngestT()
        x._UnPack(busIngest)
        return x

    # Bus_IngestT
    def _UnPack(self, busIngest):
        if busIngest is None:
            return
        self.id = busIngest.Id()
        self.name = busIngest.Name()
        self.classificationMarking = busIngest.ClassificationMarking()
        self.idEntity = busIngest.IdEntity()
        self.type = busIngest.Type()
        self.maxLaunchMassLower = busIngest.MaxLaunchMassLower()
        self.maxLaunchMassUpper = busIngest.MaxLaunchMassUpper()
        self.maxBolstationMass = busIngest.MaxBolstationMass()
        self.avgPayloadMass = busIngest.AvgPayloadMass()
        self.maxPayloadMass = busIngest.MaxPayloadMass()
        self.minDryMass = busIngest.MinDryMass()
        self.avgDryMass = busIngest.AvgDryMass()
        self.medianDryMass = busIngest.MedianDryMass()
        self.maxDryMass = busIngest.MaxDryMass()
        self.minWetMass = busIngest.MinWetMass()
        self.avgWetMass = busIngest.AvgWetMass()
        self.medianWetMass = busIngest.MedianWetMass()
        self.maxWetMass = busIngest.MaxWetMass()
        self.maxBolpowerLower = busIngest.MaxBolpowerLower()
        self.maxBolpowerUpper = busIngest.MaxBolpowerUpper()
        self.maxEolpowerLower = busIngest.MaxEolpowerLower()
        self.maxEolpowerUpper = busIngest.MaxEolpowerUpper()
        self.avgSpacecraftPower = busIngest.AvgSpacecraftPower()
        self.maxSpacecraftPower = busIngest.MaxSpacecraftPower()
        self.oapSpacecraftPower = busIngest.OapSpacecraftPower()
        self.avgPayloadPower = busIngest.AvgPayloadPower()
        self.maxPayloadPower = busIngest.MaxPayloadPower()
        self.oapPayloadPower = busIngest.OapPayloadPower()
        self.bodyDimensionX = busIngest.BodyDimensionX()
        self.bodyDimensionY = busIngest.BodyDimensionY()
        self.bodyDimensionZ = busIngest.BodyDimensionZ()
        self.payloadDimensionX = busIngest.PayloadDimensionX()
        self.payloadDimensionY = busIngest.PayloadDimensionY()
        self.payloadDimensionZ = busIngest.PayloadDimensionZ()
        self.payloadVolume = busIngest.PayloadVolume()
        self.launchEnvelopeDimensionX = busIngest.LaunchEnvelopeDimensionX()
        self.launchEnvelopeDimensionY = busIngest.LaunchEnvelopeDimensionY()
        self.launchEnvelopeDimensionZ = busIngest.LaunchEnvelopeDimensionZ()
        self.numOrbitType = busIngest.NumOrbitType()
        if not busIngest.OrbitTypesIsNone():
            self.orbitTypes = []
            for i in range(busIngest.OrbitTypesLength()):
                self.orbitTypes.append(busIngest.OrbitTypes(i))
        self.telemetryTrackingManufacturerOrgId = busIngest.TelemetryTrackingManufacturerOrgId()
        self.mainComputerManufacturerOrgId = busIngest.MainComputerManufacturerOrgId()
        self.manufacturerOrgId = busIngest.ManufacturerOrgId()
        self.busKitDesignerOrgId = busIngest.BusKitDesignerOrgId()
        self.countryCode = busIngest.CountryCode()
        self.massCategory = busIngest.MassCategory()
        self.powerCategory = busIngest.PowerCategory()
        self.generic = busIngest.Generic()
        self.description = busIngest.Description()
        self.aocsNotes = busIngest.AocsNotes()
        self.source = busIngest.Source()
        self.origin = busIngest.Origin()
        self.origNetwork = busIngest.OrigNetwork()
        self.dataMode = busIngest.DataMode()
        self.createdAt = busIngest.CreatedAt()
        self.createdBy = busIngest.CreatedBy()
        self.entity = busIngest.Entity()

    # Bus_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idEntity is not None:
            idEntity = builder.CreateString(self.idEntity)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.orbitTypes is not None:
            orbitTypeslist = []
            for i in range(len(self.orbitTypes)):
                orbitTypeslist.append(builder.CreateString(self.orbitTypes[i]))
            Bus_IngestStartOrbitTypesVector(builder, len(self.orbitTypes))
            for i in reversed(range(len(self.orbitTypes))):
                builder.PrependUOffsetTRelative(orbitTypeslist[i])
            orbitTypes = builder.EndVector()
        if self.telemetryTrackingManufacturerOrgId is not None:
            telemetryTrackingManufacturerOrgId = builder.CreateString(self.telemetryTrackingManufacturerOrgId)
        if self.mainComputerManufacturerOrgId is not None:
            mainComputerManufacturerOrgId = builder.CreateString(self.mainComputerManufacturerOrgId)
        if self.manufacturerOrgId is not None:
            manufacturerOrgId = builder.CreateString(self.manufacturerOrgId)
        if self.busKitDesignerOrgId is not None:
            busKitDesignerOrgId = builder.CreateString(self.busKitDesignerOrgId)
        if self.countryCode is not None:
            countryCode = builder.CreateString(self.countryCode)
        if self.massCategory is not None:
            massCategory = builder.CreateString(self.massCategory)
        if self.powerCategory is not None:
            powerCategory = builder.CreateString(self.powerCategory)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.aocsNotes is not None:
            aocsNotes = builder.CreateString(self.aocsNotes)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.entity is not None:
            entity = builder.CreateString(self.entity)
        Bus_IngestStart(builder)
        if self.id is not None:
            Bus_IngestAddId(builder, id)
        if self.name is not None:
            Bus_IngestAddName(builder, name)
        if self.classificationMarking is not None:
            Bus_IngestAddClassificationMarking(builder, classificationMarking)
        if self.idEntity is not None:
            Bus_IngestAddIdEntity(builder, idEntity)
        if self.type is not None:
            Bus_IngestAddType(builder, type)
        Bus_IngestAddMaxLaunchMassLower(builder, self.maxLaunchMassLower)
        Bus_IngestAddMaxLaunchMassUpper(builder, self.maxLaunchMassUpper)
        Bus_IngestAddMaxBolstationMass(builder, self.maxBolstationMass)
        Bus_IngestAddAvgPayloadMass(builder, self.avgPayloadMass)
        Bus_IngestAddMaxPayloadMass(builder, self.maxPayloadMass)
        Bus_IngestAddMinDryMass(builder, self.minDryMass)
        Bus_IngestAddAvgDryMass(builder, self.avgDryMass)
        Bus_IngestAddMedianDryMass(builder, self.medianDryMass)
        Bus_IngestAddMaxDryMass(builder, self.maxDryMass)
        Bus_IngestAddMinWetMass(builder, self.minWetMass)
        Bus_IngestAddAvgWetMass(builder, self.avgWetMass)
        Bus_IngestAddMedianWetMass(builder, self.medianWetMass)
        Bus_IngestAddMaxWetMass(builder, self.maxWetMass)
        Bus_IngestAddMaxBolpowerLower(builder, self.maxBolpowerLower)
        Bus_IngestAddMaxBolpowerUpper(builder, self.maxBolpowerUpper)
        Bus_IngestAddMaxEolpowerLower(builder, self.maxEolpowerLower)
        Bus_IngestAddMaxEolpowerUpper(builder, self.maxEolpowerUpper)
        Bus_IngestAddAvgSpacecraftPower(builder, self.avgSpacecraftPower)
        Bus_IngestAddMaxSpacecraftPower(builder, self.maxSpacecraftPower)
        Bus_IngestAddOapSpacecraftPower(builder, self.oapSpacecraftPower)
        Bus_IngestAddAvgPayloadPower(builder, self.avgPayloadPower)
        Bus_IngestAddMaxPayloadPower(builder, self.maxPayloadPower)
        Bus_IngestAddOapPayloadPower(builder, self.oapPayloadPower)
        Bus_IngestAddBodyDimensionX(builder, self.bodyDimensionX)
        Bus_IngestAddBodyDimensionY(builder, self.bodyDimensionY)
        Bus_IngestAddBodyDimensionZ(builder, self.bodyDimensionZ)
        Bus_IngestAddPayloadDimensionX(builder, self.payloadDimensionX)
        Bus_IngestAddPayloadDimensionY(builder, self.payloadDimensionY)
        Bus_IngestAddPayloadDimensionZ(builder, self.payloadDimensionZ)
        Bus_IngestAddPayloadVolume(builder, self.payloadVolume)
        Bus_IngestAddLaunchEnvelopeDimensionX(builder, self.launchEnvelopeDimensionX)
        Bus_IngestAddLaunchEnvelopeDimensionY(builder, self.launchEnvelopeDimensionY)
        Bus_IngestAddLaunchEnvelopeDimensionZ(builder, self.launchEnvelopeDimensionZ)
        Bus_IngestAddNumOrbitType(builder, self.numOrbitType)
        if self.orbitTypes is not None:
            Bus_IngestAddOrbitTypes(builder, orbitTypes)
        if self.telemetryTrackingManufacturerOrgId is not None:
            Bus_IngestAddTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgId)
        if self.mainComputerManufacturerOrgId is not None:
            Bus_IngestAddMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgId)
        if self.manufacturerOrgId is not None:
            Bus_IngestAddManufacturerOrgId(builder, manufacturerOrgId)
        if self.busKitDesignerOrgId is not None:
            Bus_IngestAddBusKitDesignerOrgId(builder, busKitDesignerOrgId)
        if self.countryCode is not None:
            Bus_IngestAddCountryCode(builder, countryCode)
        if self.massCategory is not None:
            Bus_IngestAddMassCategory(builder, massCategory)
        if self.powerCategory is not None:
            Bus_IngestAddPowerCategory(builder, powerCategory)
        Bus_IngestAddGeneric(builder, self.generic)
        if self.description is not None:
            Bus_IngestAddDescription(builder, description)
        if self.aocsNotes is not None:
            Bus_IngestAddAocsNotes(builder, aocsNotes)
        if self.source is not None:
            Bus_IngestAddSource(builder, source)
        if self.origin is not None:
            Bus_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Bus_IngestAddOrigNetwork(builder, origNetwork)
        Bus_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Bus_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Bus_IngestAddCreatedBy(builder, createdBy)
        if self.entity is not None:
            Bus_IngestAddEntity(builder, entity)
        busIngest = Bus_IngestEnd(builder)
        return busIngest
