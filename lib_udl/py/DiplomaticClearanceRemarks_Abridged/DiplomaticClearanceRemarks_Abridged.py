# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection of diplomatic clearance remarks.
class DiplomaticClearanceRemarks_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiplomaticClearanceRemarks_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDiplomaticClearanceRemarks_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def DiplomaticClearanceRemarks_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x44\x49\x50\x4C", size_prefixed=size_prefixed)

    # DiplomaticClearanceRemarks_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Global Decision Support System (GDSS) remark identifier.
    # Example: /// Example: GDSSREMARK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # DiplomaticClearanceRemarks_Abridged
    def GdssRemarkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text of the remark.
    # Example: /// Example: Example mission remarks.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # DiplomaticClearanceRemarks_Abridged
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2024-01-01T01:01:01.123Z
    # Constraints: No constraints specified.
    # DiplomaticClearanceRemarks_Abridged
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User who published the remark.
    # Example: /// Example: John Doe
    # Constraints: Minimum length = 0, Maximum length = 20
    # DiplomaticClearanceRemarks_Abridged
    def User(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiplomaticClearanceRemarks_AbridgedStart(builder):
    builder.StartObject(4)

def Start(builder):
    DiplomaticClearanceRemarks_AbridgedStart(builder)

def DiplomaticClearanceRemarks_AbridgedAddGdssRemarkId(builder, gdssRemarkId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gdssRemarkId), 0)

def AddGdssRemarkId(builder, gdssRemarkId):
    DiplomaticClearanceRemarks_AbridgedAddGdssRemarkId(builder, gdssRemarkId)

def DiplomaticClearanceRemarks_AbridgedAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    DiplomaticClearanceRemarks_AbridgedAddText(builder, text)

def DiplomaticClearanceRemarks_AbridgedAddDate(builder, date):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def AddDate(builder, date):
    DiplomaticClearanceRemarks_AbridgedAddDate(builder, date)

def DiplomaticClearanceRemarks_AbridgedAddUser(builder, user):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(user), 0)

def AddUser(builder, user):
    DiplomaticClearanceRemarks_AbridgedAddUser(builder, user)

def DiplomaticClearanceRemarks_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return DiplomaticClearanceRemarks_AbridgedEnd(builder)


class DiplomaticClearanceRemarks_AbridgedT(object):

    # DiplomaticClearanceRemarks_AbridgedT
    def __init__(self):
        self.gdssRemarkId = None  # type: str
        self.text = None  # type: str
        self.date = None  # type: str
        self.user = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diplomaticClearanceRemarksAbridged = DiplomaticClearanceRemarks_Abridged()
        diplomaticClearanceRemarksAbridged.Init(buf, pos)
        return cls.InitFromObj(diplomaticClearanceRemarksAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, diplomaticClearanceRemarksAbridged):
        x = DiplomaticClearanceRemarks_AbridgedT()
        x._UnPack(diplomaticClearanceRemarksAbridged)
        return x

    # DiplomaticClearanceRemarks_AbridgedT
    def _UnPack(self, diplomaticClearanceRemarksAbridged):
        if diplomaticClearanceRemarksAbridged is None:
            return
        self.gdssRemarkId = diplomaticClearanceRemarksAbridged.GdssRemarkId()
        self.text = diplomaticClearanceRemarksAbridged.Text()
        self.date = diplomaticClearanceRemarksAbridged.Date()
        self.user = diplomaticClearanceRemarksAbridged.User()

    # DiplomaticClearanceRemarks_AbridgedT
    def Pack(self, builder):
        if self.gdssRemarkId is not None:
            gdssRemarkId = builder.CreateString(self.gdssRemarkId)
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.date is not None:
            date = builder.CreateString(self.date)
        if self.user is not None:
            user = builder.CreateString(self.user)
        DiplomaticClearanceRemarks_AbridgedStart(builder)
        if self.gdssRemarkId is not None:
            DiplomaticClearanceRemarks_AbridgedAddGdssRemarkId(builder, gdssRemarkId)
        if self.text is not None:
            DiplomaticClearanceRemarks_AbridgedAddText(builder, text)
        if self.date is not None:
            DiplomaticClearanceRemarks_AbridgedAddDate(builder, date)
        if self.user is not None:
            DiplomaticClearanceRemarks_AbridgedAddUser(builder, user)
        diplomaticClearanceRemarksAbridged = DiplomaticClearanceRemarks_AbridgedEnd(builder)
        return diplomaticClearanceRemarksAbridged
