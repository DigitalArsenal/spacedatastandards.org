# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The table captures metadata associated with the published videos in UDL.
class VideoStreams_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VideoStreams_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVideoStreams_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VideoStreams_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x56\x49\x44\x45", size_prefixed=size_prefixed)

    # VideoStreams_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: VIDEOSTREAMS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # VideoStreams_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # VideoStreams_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Name of the video stream.
    # Example: /// Example: name
    # Constraints: Minimum length = 1, Maximum length = 128
    # VideoStreams_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description/notes associated with the video stream.
    # Example: /// Example: description
    # Constraints: Minimum length = 1, Maximum length = 1024
    # VideoStreams_Full
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timestamp when the stream is available from. The unit is ISO 8601 format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # VideoStreams_Full
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timestamp when the stream is available until. The unit is ISO 8601 format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # VideoStreams_Full
    def StopTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # VideoStreams_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Video Publisher Token.
    # Example: /// Example: tokenValue
    # Constraints: Minimum length = 1, Maximum length = 1024
    # VideoStreams_Full
    def TokenValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Video Streaming Support URLs.
    # Example: /// Example: ['videoUrls', 'videoUrls2']
    # Constraints: No constraints specified.
    # VideoStreams_Full
    def VideoUrls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VideoStreams_Full
    def VideoUrlsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VideoStreams_Full
    def VideoUrlsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # VideoStreams_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # VideoStreams_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # VideoStreams_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # VideoStreams_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # VideoStreams_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # VideoStreams_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # VideoStreams_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def VideoStreams_FullStart(builder):
    builder.StartObject(16)

def Start(builder):
    VideoStreams_FullStart(builder)

def VideoStreams_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    VideoStreams_FullAddId(builder, id)

def VideoStreams_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    VideoStreams_FullAddClassificationMarking(builder, classificationMarking)

def VideoStreams_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    VideoStreams_FullAddName(builder, name)

def VideoStreams_FullAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    VideoStreams_FullAddDescription(builder, description)

def VideoStreams_FullAddStartTime(builder, startTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startTime), 0)

def AddStartTime(builder, startTime):
    VideoStreams_FullAddStartTime(builder, startTime)

def VideoStreams_FullAddStopTime(builder, stopTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stopTime), 0)

def AddStopTime(builder, stopTime):
    VideoStreams_FullAddStopTime(builder, stopTime)

def VideoStreams_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    VideoStreams_FullAddSource(builder, source)

def VideoStreams_FullAddTokenValue(builder, tokenValue):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tokenValue), 0)

def AddTokenValue(builder, tokenValue):
    VideoStreams_FullAddTokenValue(builder, tokenValue)

def VideoStreams_FullAddVideoUrls(builder, videoUrls):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(videoUrls), 0)

def AddVideoUrls(builder, videoUrls):
    VideoStreams_FullAddVideoUrls(builder, videoUrls)

def VideoStreams_FullStartVideoUrlsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVideoUrlsVector(builder, numElems):
    return VideoStreams_FullStartVideoUrlsVector(builder, numElems)

def VideoStreams_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    VideoStreams_FullAddDataMode(builder, dataMode)

def VideoStreams_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    VideoStreams_FullAddCreatedAt(builder, createdAt)

def VideoStreams_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    VideoStreams_FullAddCreatedBy(builder, createdBy)

def VideoStreams_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    VideoStreams_FullAddUpdatedAt(builder, updatedAt)

def VideoStreams_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    VideoStreams_FullAddUpdatedBy(builder, updatedBy)

def VideoStreams_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    VideoStreams_FullAddOrigNetwork(builder, origNetwork)

def VideoStreams_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    VideoStreams_FullAddOrigin(builder, origin)

def VideoStreams_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return VideoStreams_FullEnd(builder)

try:
    from typing import List
except:
    pass

class VideoStreams_FullT(object):

    # VideoStreams_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.startTime = None  # type: str
        self.stopTime = None  # type: str
        self.source = None  # type: str
        self.tokenValue = None  # type: str
        self.videoUrls = None  # type: List[str]
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.origNetwork = None  # type: str
        self.origin = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        videoStreamsFull = VideoStreams_Full()
        videoStreamsFull.Init(buf, pos)
        return cls.InitFromObj(videoStreamsFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, videoStreamsFull):
        x = VideoStreams_FullT()
        x._UnPack(videoStreamsFull)
        return x

    # VideoStreams_FullT
    def _UnPack(self, videoStreamsFull):
        if videoStreamsFull is None:
            return
        self.id = videoStreamsFull.Id()
        self.classificationMarking = videoStreamsFull.ClassificationMarking()
        self.name = videoStreamsFull.Name()
        self.description = videoStreamsFull.Description()
        self.startTime = videoStreamsFull.StartTime()
        self.stopTime = videoStreamsFull.StopTime()
        self.source = videoStreamsFull.Source()
        self.tokenValue = videoStreamsFull.TokenValue()
        if not videoStreamsFull.VideoUrlsIsNone():
            self.videoUrls = []
            for i in range(videoStreamsFull.VideoUrlsLength()):
                self.videoUrls.append(videoStreamsFull.VideoUrls(i))
        self.dataMode = videoStreamsFull.DataMode()
        self.createdAt = videoStreamsFull.CreatedAt()
        self.createdBy = videoStreamsFull.CreatedBy()
        self.updatedAt = videoStreamsFull.UpdatedAt()
        self.updatedBy = videoStreamsFull.UpdatedBy()
        self.origNetwork = videoStreamsFull.OrigNetwork()
        self.origin = videoStreamsFull.Origin()

    # VideoStreams_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.startTime is not None:
            startTime = builder.CreateString(self.startTime)
        if self.stopTime is not None:
            stopTime = builder.CreateString(self.stopTime)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.tokenValue is not None:
            tokenValue = builder.CreateString(self.tokenValue)
        if self.videoUrls is not None:
            videoUrlslist = []
            for i in range(len(self.videoUrls)):
                videoUrlslist.append(builder.CreateString(self.videoUrls[i]))
            VideoStreams_FullStartVideoUrlsVector(builder, len(self.videoUrls))
            for i in reversed(range(len(self.videoUrls))):
                builder.PrependUOffsetTRelative(videoUrlslist[i])
            videoUrls = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        VideoStreams_FullStart(builder)
        if self.id is not None:
            VideoStreams_FullAddId(builder, id)
        if self.classificationMarking is not None:
            VideoStreams_FullAddClassificationMarking(builder, classificationMarking)
        if self.name is not None:
            VideoStreams_FullAddName(builder, name)
        if self.description is not None:
            VideoStreams_FullAddDescription(builder, description)
        if self.startTime is not None:
            VideoStreams_FullAddStartTime(builder, startTime)
        if self.stopTime is not None:
            VideoStreams_FullAddStopTime(builder, stopTime)
        if self.source is not None:
            VideoStreams_FullAddSource(builder, source)
        if self.tokenValue is not None:
            VideoStreams_FullAddTokenValue(builder, tokenValue)
        if self.videoUrls is not None:
            VideoStreams_FullAddVideoUrls(builder, videoUrls)
        VideoStreams_FullAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            VideoStreams_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            VideoStreams_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            VideoStreams_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            VideoStreams_FullAddUpdatedBy(builder, updatedBy)
        if self.origNetwork is not None:
            VideoStreams_FullAddOrigNetwork(builder, origNetwork)
        if self.origin is not None:
            VideoStreams_FullAddOrigin(builder, origin)
        videoStreamsFull = VideoStreams_FullEnd(builder)
        return videoStreamsFull
