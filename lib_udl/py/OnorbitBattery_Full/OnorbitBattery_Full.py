# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Read-only collection of batteries on this on-orbit object.
class OnorbitBattery_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OnorbitBattery_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOnorbitBattery_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OnorbitBattery_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4F\x4E\x4F\x52", size_prefixed=size_prefixed)

    # OnorbitBattery_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ONORBITBATTERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitBattery_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the on-orbit object.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitBattery_Full
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the battery.
    # Example: /// Example: BATTERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # OnorbitBattery_Full
    def IdBattery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # OnorbitBattery_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of batteries on the spacecraft of the type identified by idBattery.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # OnorbitBattery_Full
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitBattery_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitBattery_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was last updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # OnorbitBattery_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitBattery_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # OnorbitBattery_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # OnorbitBattery_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitBattery_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # OnorbitBattery_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # OnorbitBattery_Full
    def Battery(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OnorbitBattery_FullStart(builder):
    builder.StartObject(14)

def Start(builder):
    OnorbitBattery_FullStart(builder)

def OnorbitBattery_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    OnorbitBattery_FullAddId(builder, id)

def OnorbitBattery_FullAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    OnorbitBattery_FullAddIdOnOrbit(builder, idOnOrbit)

def OnorbitBattery_FullAddIdBattery(builder, idBattery):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idBattery), 0)

def AddIdBattery(builder, idBattery):
    OnorbitBattery_FullAddIdBattery(builder, idBattery)

def OnorbitBattery_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    OnorbitBattery_FullAddClassificationMarking(builder, classificationMarking)

def OnorbitBattery_FullAddQuantity(builder, quantity):
    builder.PrependInt32Slot(4, quantity, 0)

def AddQuantity(builder, quantity):
    OnorbitBattery_FullAddQuantity(builder, quantity)

def OnorbitBattery_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    OnorbitBattery_FullAddCreatedAt(builder, createdAt)

def OnorbitBattery_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    OnorbitBattery_FullAddCreatedBy(builder, createdBy)

def OnorbitBattery_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    OnorbitBattery_FullAddUpdatedAt(builder, updatedAt)

def OnorbitBattery_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    OnorbitBattery_FullAddUpdatedBy(builder, updatedBy)

def OnorbitBattery_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    OnorbitBattery_FullAddSource(builder, source)

def OnorbitBattery_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    OnorbitBattery_FullAddOrigin(builder, origin)

def OnorbitBattery_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(11, dataMode, 0)

def AddDataMode(builder, dataMode):
    OnorbitBattery_FullAddDataMode(builder, dataMode)

def OnorbitBattery_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    OnorbitBattery_FullAddOrigNetwork(builder, origNetwork)

def OnorbitBattery_FullAddBattery(builder, battery):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(battery), 0)

def AddBattery(builder, battery):
    OnorbitBattery_FullAddBattery(builder, battery)

def OnorbitBattery_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return OnorbitBattery_FullEnd(builder)


class OnorbitBattery_FullT(object):

    # OnorbitBattery_FullT
    def __init__(self):
        self.id = None  # type: str
        self.idOnOrbit = None  # type: str
        self.idBattery = None  # type: str
        self.classificationMarking = None  # type: str
        self.quantity = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str
        self.battery = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        onorbitBatteryFull = OnorbitBattery_Full()
        onorbitBatteryFull.Init(buf, pos)
        return cls.InitFromObj(onorbitBatteryFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, onorbitBatteryFull):
        x = OnorbitBattery_FullT()
        x._UnPack(onorbitBatteryFull)
        return x

    # OnorbitBattery_FullT
    def _UnPack(self, onorbitBatteryFull):
        if onorbitBatteryFull is None:
            return
        self.id = onorbitBatteryFull.Id()
        self.idOnOrbit = onorbitBatteryFull.IdOnOrbit()
        self.idBattery = onorbitBatteryFull.IdBattery()
        self.classificationMarking = onorbitBatteryFull.ClassificationMarking()
        self.quantity = onorbitBatteryFull.Quantity()
        self.createdAt = onorbitBatteryFull.CreatedAt()
        self.createdBy = onorbitBatteryFull.CreatedBy()
        self.updatedAt = onorbitBatteryFull.UpdatedAt()
        self.updatedBy = onorbitBatteryFull.UpdatedBy()
        self.source = onorbitBatteryFull.Source()
        self.origin = onorbitBatteryFull.Origin()
        self.dataMode = onorbitBatteryFull.DataMode()
        self.origNetwork = onorbitBatteryFull.OrigNetwork()
        self.battery = onorbitBatteryFull.Battery()

    # OnorbitBattery_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.idBattery is not None:
            idBattery = builder.CreateString(self.idBattery)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.battery is not None:
            battery = builder.CreateString(self.battery)
        OnorbitBattery_FullStart(builder)
        if self.id is not None:
            OnorbitBattery_FullAddId(builder, id)
        if self.idOnOrbit is not None:
            OnorbitBattery_FullAddIdOnOrbit(builder, idOnOrbit)
        if self.idBattery is not None:
            OnorbitBattery_FullAddIdBattery(builder, idBattery)
        if self.classificationMarking is not None:
            OnorbitBattery_FullAddClassificationMarking(builder, classificationMarking)
        OnorbitBattery_FullAddQuantity(builder, self.quantity)
        if self.createdAt is not None:
            OnorbitBattery_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            OnorbitBattery_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            OnorbitBattery_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            OnorbitBattery_FullAddUpdatedBy(builder, updatedBy)
        if self.source is not None:
            OnorbitBattery_FullAddSource(builder, source)
        if self.origin is not None:
            OnorbitBattery_FullAddOrigin(builder, origin)
        OnorbitBattery_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            OnorbitBattery_FullAddOrigNetwork(builder, origNetwork)
        if self.battery is not None:
            OnorbitBattery_FullAddBattery(builder, battery)
        onorbitBatteryFull = OnorbitBattery_FullEnd(builder)
        return onorbitBatteryFull
