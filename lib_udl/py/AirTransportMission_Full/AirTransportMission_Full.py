# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
class AirTransportMission_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirTransportMission_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirTransportMission_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirTransportMission_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x54", size_prefixed=size_prefixed)

    # AirTransportMission_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirTransportMission_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AirTransportMission_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission identifier provided by the originating source.
    # Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def OrigMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
    # Example: /// Example: AJM7939B1123
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def AmcMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Global Decision Support System (GDSS) mission unique identifier.
    # Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def GdssMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def PrevMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: AJM7939B1122
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def PrevAmcmissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def NextMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
    # Example: /// Example: AJM7939B1124
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirTransportMission_Full
    def NextAmcmissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A description of this mission's objective.
    # Example: /// Example: Deliver water to island X.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AirTransportMission_Full
    def Objective(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
    # Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
    # Constraints: Minimum length = 0, Maximum length = 1024
    # AirTransportMission_Full
    def Purpose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Highest Joint Chiefs of Staff priority of this mission.
    # Example: /// Example: 1A3
    # Constraints: Minimum length = 3, Maximum length = 3
    # AirTransportMission_Full
    def JcsPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating this is a close watch mission.
    # Example: /// Example: True
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def Cw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The type of mission (e.g. SAAM, CHNL, etc.).
    # Example: /// Example: SAAM
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Full
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
    # Example: /// Example: KFAY
    # Constraints: Minimum length = 4, Maximum length = 4
    # AirTransportMission_Full
    def FirstPickUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
    # Example: /// Example: PGUA
    # Constraints: Minimum length = 4, Maximum length = 4
    # AirTransportMission_Full
    def LastDropOff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mission alias.
    # Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
    # Constraints: Minimum length = 0, Maximum length = 48
    # AirTransportMission_Full
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign for this mission.
    # Example: /// Example: RCH123
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Full
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the operation that this mission supports.
    # Example: /// Example: Golden Eye
    # Constraints: Minimum length = 0, Maximum length = 100
    # AirTransportMission_Full
    def Operation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Numbered Air Force (NAF) organization that owns the mission.
    # Example: /// Example: 18AF
    # Constraints: Minimum length = 0, Maximum length = 100
    # AirTransportMission_Full
    def Naf(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The unit the mission is allocated to.
    # Example: /// Example: 437 AEW
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirTransportMission_Full
    def AllocatedUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
    # Example: /// Example: MIXED
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Full
    def LoadCategoryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Current state of the mission.
    # Example: /// Example: EXECUTION
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Full
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
    # Example: /// Example: -90.12
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def SourceSysDeviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
    # Example: /// Example: 1083034
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTransportMission_Full
    def ApacsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
    # Example: /// Example: G2-182402-AB
    # Constraints: Minimum length = 0, Maximum length = 256
    # AirTransportMission_Full
    def DipWorksheetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirTransportMission_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AirTransportMission_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTransportMission_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AirTransportMission_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirTransportMission_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AirTransportMission_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirTransportMission_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def Requirements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Full
    def RequirementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Full
    def RequirementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def Remarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Full
    def RemarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Full
    def RemarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # Collection of Hazardous Material information associated with this Air Transport Mission.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def HazMat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Full
    def HazMatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Full
    def HazMatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirTransportMission_Full
    def AircraftSorties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirTransportMission_Full
    def AircraftSortiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirTransportMission_Full
    def AircraftSortiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

def AirTransportMission_FullStart(builder):
    builder.StartObject(39)

def Start(builder):
    AirTransportMission_FullStart(builder)

def AirTransportMission_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AirTransportMission_FullAddId(builder, id)

def AirTransportMission_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AirTransportMission_FullAddClassificationMarking(builder, classificationMarking)

def AirTransportMission_FullAddOrigMissionId(builder, origMissionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(origMissionId), 0)

def AddOrigMissionId(builder, origMissionId):
    AirTransportMission_FullAddOrigMissionId(builder, origMissionId)

def AirTransportMission_FullAddAmcMissionId(builder, amcMissionId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(amcMissionId), 0)

def AddAmcMissionId(builder, amcMissionId):
    AirTransportMission_FullAddAmcMissionId(builder, amcMissionId)

def AirTransportMission_FullAddGdssMissionId(builder, gdssMissionId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(gdssMissionId), 0)

def AddGdssMissionId(builder, gdssMissionId):
    AirTransportMission_FullAddGdssMissionId(builder, gdssMissionId)

def AirTransportMission_FullAddPrevMissionId(builder, prevMissionId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(prevMissionId), 0)

def AddPrevMissionId(builder, prevMissionId):
    AirTransportMission_FullAddPrevMissionId(builder, prevMissionId)

def AirTransportMission_FullAddPrevAmcmissionId(builder, prevAmcmissionId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(prevAmcmissionId), 0)

def AddPrevAmcmissionId(builder, prevAmcmissionId):
    AirTransportMission_FullAddPrevAmcmissionId(builder, prevAmcmissionId)

def AirTransportMission_FullAddNextMissionId(builder, nextMissionId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(nextMissionId), 0)

def AddNextMissionId(builder, nextMissionId):
    AirTransportMission_FullAddNextMissionId(builder, nextMissionId)

def AirTransportMission_FullAddNextAmcmissionId(builder, nextAmcmissionId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(nextAmcmissionId), 0)

def AddNextAmcmissionId(builder, nextAmcmissionId):
    AirTransportMission_FullAddNextAmcmissionId(builder, nextAmcmissionId)

def AirTransportMission_FullAddObjective(builder, objective):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(objective), 0)

def AddObjective(builder, objective):
    AirTransportMission_FullAddObjective(builder, objective)

def AirTransportMission_FullAddPurpose(builder, purpose):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(purpose), 0)

def AddPurpose(builder, purpose):
    AirTransportMission_FullAddPurpose(builder, purpose)

def AirTransportMission_FullAddJcsPriority(builder, jcsPriority):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(jcsPriority), 0)

def AddJcsPriority(builder, jcsPriority):
    AirTransportMission_FullAddJcsPriority(builder, jcsPriority)

def AirTransportMission_FullAddCw(builder, cw):
    builder.PrependBoolSlot(12, cw, 0)

def AddCw(builder, cw):
    AirTransportMission_FullAddCw(builder, cw)

def AirTransportMission_FullAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    AirTransportMission_FullAddType(builder, type)

def AirTransportMission_FullAddFirstPickUp(builder, firstPickUp):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(firstPickUp), 0)

def AddFirstPickUp(builder, firstPickUp):
    AirTransportMission_FullAddFirstPickUp(builder, firstPickUp)

def AirTransportMission_FullAddLastDropOff(builder, lastDropOff):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(lastDropOff), 0)

def AddLastDropOff(builder, lastDropOff):
    AirTransportMission_FullAddLastDropOff(builder, lastDropOff)

def AirTransportMission_FullAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def AddAlias(builder, alias):
    AirTransportMission_FullAddAlias(builder, alias)

def AirTransportMission_FullAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    AirTransportMission_FullAddCallSign(builder, callSign)

def AirTransportMission_FullAddOperation(builder, operation):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(operation), 0)

def AddOperation(builder, operation):
    AirTransportMission_FullAddOperation(builder, operation)

def AirTransportMission_FullAddNaf(builder, naf):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(naf), 0)

def AddNaf(builder, naf):
    AirTransportMission_FullAddNaf(builder, naf)

def AirTransportMission_FullAddAllocatedUnit(builder, allocatedUnit):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(allocatedUnit), 0)

def AddAllocatedUnit(builder, allocatedUnit):
    AirTransportMission_FullAddAllocatedUnit(builder, allocatedUnit)

def AirTransportMission_FullAddLoadCategoryType(builder, loadCategoryType):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(loadCategoryType), 0)

def AddLoadCategoryType(builder, loadCategoryType):
    AirTransportMission_FullAddLoadCategoryType(builder, loadCategoryType)

def AirTransportMission_FullAddState(builder, state):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)

def AddState(builder, state):
    AirTransportMission_FullAddState(builder, state)

def AirTransportMission_FullAddSourceSysDeviation(builder, sourceSysDeviation):
    builder.PrependFloat64Slot(23, sourceSysDeviation, 0.0)

def AddSourceSysDeviation(builder, sourceSysDeviation):
    AirTransportMission_FullAddSourceSysDeviation(builder, sourceSysDeviation)

def AirTransportMission_FullAddApacsId(builder, apacsId):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(apacsId), 0)

def AddApacsId(builder, apacsId):
    AirTransportMission_FullAddApacsId(builder, apacsId)

def AirTransportMission_FullAddDipWorksheetName(builder, dipWorksheetName):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(dipWorksheetName), 0)

def AddDipWorksheetName(builder, dipWorksheetName):
    AirTransportMission_FullAddDipWorksheetName(builder, dipWorksheetName)

def AirTransportMission_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AirTransportMission_FullAddCreatedAt(builder, createdAt)

def AirTransportMission_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AirTransportMission_FullAddCreatedBy(builder, createdBy)

def AirTransportMission_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AirTransportMission_FullAddUpdatedAt(builder, updatedAt)

def AirTransportMission_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AirTransportMission_FullAddUpdatedBy(builder, updatedBy)

def AirTransportMission_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AirTransportMission_FullAddSourceDl(builder, sourceDl)

def AirTransportMission_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AirTransportMission_FullAddSource(builder, source)

def AirTransportMission_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AirTransportMission_FullAddOrigin(builder, origin)

def AirTransportMission_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(33, dataMode, 0)

def AddDataMode(builder, dataMode):
    AirTransportMission_FullAddDataMode(builder, dataMode)

def AirTransportMission_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AirTransportMission_FullAddOrigNetwork(builder, origNetwork)

def AirTransportMission_FullAddRequirements(builder, requirements):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(requirements), 0)

def AddRequirements(builder, requirements):
    AirTransportMission_FullAddRequirements(builder, requirements)

def AirTransportMission_FullStartRequirementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRequirementsVector(builder, numElems):
    return AirTransportMission_FullStartRequirementsVector(builder, numElems)

def AirTransportMission_FullAddRemarks(builder, remarks):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(remarks), 0)

def AddRemarks(builder, remarks):
    AirTransportMission_FullAddRemarks(builder, remarks)

def AirTransportMission_FullStartRemarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRemarksVector(builder, numElems):
    return AirTransportMission_FullStartRemarksVector(builder, numElems)

def AirTransportMission_FullAddHazMat(builder, hazMat):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(hazMat), 0)

def AddHazMat(builder, hazMat):
    AirTransportMission_FullAddHazMat(builder, hazMat)

def AirTransportMission_FullStartHazMatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartHazMatVector(builder, numElems):
    return AirTransportMission_FullStartHazMatVector(builder, numElems)

def AirTransportMission_FullAddAircraftSorties(builder, aircraftSorties):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(aircraftSorties), 0)

def AddAircraftSorties(builder, aircraftSorties):
    AirTransportMission_FullAddAircraftSorties(builder, aircraftSorties)

def AirTransportMission_FullStartAircraftSortiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAircraftSortiesVector(builder, numElems):
    return AirTransportMission_FullStartAircraftSortiesVector(builder, numElems)

def AirTransportMission_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirTransportMission_FullEnd(builder)

try:
    from typing import List
except:
    pass

class AirTransportMission_FullT(object):

    # AirTransportMission_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.origMissionId = None  # type: str
        self.amcMissionId = None  # type: str
        self.gdssMissionId = None  # type: str
        self.prevMissionId = None  # type: str
        self.prevAmcmissionId = None  # type: str
        self.nextMissionId = None  # type: str
        self.nextAmcmissionId = None  # type: str
        self.objective = None  # type: str
        self.purpose = None  # type: str
        self.jcsPriority = None  # type: str
        self.cw = False  # type: bool
        self.type = None  # type: str
        self.firstPickUp = None  # type: str
        self.lastDropOff = None  # type: str
        self.alias = None  # type: str
        self.callSign = None  # type: str
        self.operation = None  # type: str
        self.naf = None  # type: str
        self.allocatedUnit = None  # type: str
        self.loadCategoryType = None  # type: str
        self.state = None  # type: str
        self.sourceSysDeviation = 0.0  # type: float
        self.apacsId = None  # type: str
        self.dipWorksheetName = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str
        self.requirements = None  # type: List[str]
        self.remarks = None  # type: List[str]
        self.hazMat = None  # type: List[str]
        self.aircraftSorties = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airTransportMissionFull = AirTransportMission_Full()
        airTransportMissionFull.Init(buf, pos)
        return cls.InitFromObj(airTransportMissionFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airTransportMissionFull):
        x = AirTransportMission_FullT()
        x._UnPack(airTransportMissionFull)
        return x

    # AirTransportMission_FullT
    def _UnPack(self, airTransportMissionFull):
        if airTransportMissionFull is None:
            return
        self.id = airTransportMissionFull.Id()
        self.classificationMarking = airTransportMissionFull.ClassificationMarking()
        self.origMissionId = airTransportMissionFull.OrigMissionId()
        self.amcMissionId = airTransportMissionFull.AmcMissionId()
        self.gdssMissionId = airTransportMissionFull.GdssMissionId()
        self.prevMissionId = airTransportMissionFull.PrevMissionId()
        self.prevAmcmissionId = airTransportMissionFull.PrevAmcmissionId()
        self.nextMissionId = airTransportMissionFull.NextMissionId()
        self.nextAmcmissionId = airTransportMissionFull.NextAmcmissionId()
        self.objective = airTransportMissionFull.Objective()
        self.purpose = airTransportMissionFull.Purpose()
        self.jcsPriority = airTransportMissionFull.JcsPriority()
        self.cw = airTransportMissionFull.Cw()
        self.type = airTransportMissionFull.Type()
        self.firstPickUp = airTransportMissionFull.FirstPickUp()
        self.lastDropOff = airTransportMissionFull.LastDropOff()
        self.alias = airTransportMissionFull.Alias()
        self.callSign = airTransportMissionFull.CallSign()
        self.operation = airTransportMissionFull.Operation()
        self.naf = airTransportMissionFull.Naf()
        self.allocatedUnit = airTransportMissionFull.AllocatedUnit()
        self.loadCategoryType = airTransportMissionFull.LoadCategoryType()
        self.state = airTransportMissionFull.State()
        self.sourceSysDeviation = airTransportMissionFull.SourceSysDeviation()
        self.apacsId = airTransportMissionFull.ApacsId()
        self.dipWorksheetName = airTransportMissionFull.DipWorksheetName()
        self.createdAt = airTransportMissionFull.CreatedAt()
        self.createdBy = airTransportMissionFull.CreatedBy()
        self.updatedAt = airTransportMissionFull.UpdatedAt()
        self.updatedBy = airTransportMissionFull.UpdatedBy()
        self.sourceDl = airTransportMissionFull.SourceDl()
        self.source = airTransportMissionFull.Source()
        self.origin = airTransportMissionFull.Origin()
        self.dataMode = airTransportMissionFull.DataMode()
        self.origNetwork = airTransportMissionFull.OrigNetwork()
        if not airTransportMissionFull.RequirementsIsNone():
            self.requirements = []
            for i in range(airTransportMissionFull.RequirementsLength()):
                self.requirements.append(airTransportMissionFull.Requirements(i))
        if not airTransportMissionFull.RemarksIsNone():
            self.remarks = []
            for i in range(airTransportMissionFull.RemarksLength()):
                self.remarks.append(airTransportMissionFull.Remarks(i))
        if not airTransportMissionFull.HazMatIsNone():
            self.hazMat = []
            for i in range(airTransportMissionFull.HazMatLength()):
                self.hazMat.append(airTransportMissionFull.HazMat(i))
        if not airTransportMissionFull.AircraftSortiesIsNone():
            self.aircraftSorties = []
            for i in range(airTransportMissionFull.AircraftSortiesLength()):
                self.aircraftSorties.append(airTransportMissionFull.AircraftSorties(i))

    # AirTransportMission_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.origMissionId is not None:
            origMissionId = builder.CreateString(self.origMissionId)
        if self.amcMissionId is not None:
            amcMissionId = builder.CreateString(self.amcMissionId)
        if self.gdssMissionId is not None:
            gdssMissionId = builder.CreateString(self.gdssMissionId)
        if self.prevMissionId is not None:
            prevMissionId = builder.CreateString(self.prevMissionId)
        if self.prevAmcmissionId is not None:
            prevAmcmissionId = builder.CreateString(self.prevAmcmissionId)
        if self.nextMissionId is not None:
            nextMissionId = builder.CreateString(self.nextMissionId)
        if self.nextAmcmissionId is not None:
            nextAmcmissionId = builder.CreateString(self.nextAmcmissionId)
        if self.objective is not None:
            objective = builder.CreateString(self.objective)
        if self.purpose is not None:
            purpose = builder.CreateString(self.purpose)
        if self.jcsPriority is not None:
            jcsPriority = builder.CreateString(self.jcsPriority)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.firstPickUp is not None:
            firstPickUp = builder.CreateString(self.firstPickUp)
        if self.lastDropOff is not None:
            lastDropOff = builder.CreateString(self.lastDropOff)
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.operation is not None:
            operation = builder.CreateString(self.operation)
        if self.naf is not None:
            naf = builder.CreateString(self.naf)
        if self.allocatedUnit is not None:
            allocatedUnit = builder.CreateString(self.allocatedUnit)
        if self.loadCategoryType is not None:
            loadCategoryType = builder.CreateString(self.loadCategoryType)
        if self.state is not None:
            state = builder.CreateString(self.state)
        if self.apacsId is not None:
            apacsId = builder.CreateString(self.apacsId)
        if self.dipWorksheetName is not None:
            dipWorksheetName = builder.CreateString(self.dipWorksheetName)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.requirements is not None:
            requirementslist = []
            for i in range(len(self.requirements)):
                requirementslist.append(builder.CreateString(self.requirements[i]))
            AirTransportMission_FullStartRequirementsVector(builder, len(self.requirements))
            for i in reversed(range(len(self.requirements))):
                builder.PrependUOffsetTRelative(requirementslist[i])
            requirements = builder.EndVector()
        if self.remarks is not None:
            remarkslist = []
            for i in range(len(self.remarks)):
                remarkslist.append(builder.CreateString(self.remarks[i]))
            AirTransportMission_FullStartRemarksVector(builder, len(self.remarks))
            for i in reversed(range(len(self.remarks))):
                builder.PrependUOffsetTRelative(remarkslist[i])
            remarks = builder.EndVector()
        if self.hazMat is not None:
            hazMatlist = []
            for i in range(len(self.hazMat)):
                hazMatlist.append(builder.CreateString(self.hazMat[i]))
            AirTransportMission_FullStartHazMatVector(builder, len(self.hazMat))
            for i in reversed(range(len(self.hazMat))):
                builder.PrependUOffsetTRelative(hazMatlist[i])
            hazMat = builder.EndVector()
        if self.aircraftSorties is not None:
            aircraftSortieslist = []
            for i in range(len(self.aircraftSorties)):
                aircraftSortieslist.append(builder.CreateString(self.aircraftSorties[i]))
            AirTransportMission_FullStartAircraftSortiesVector(builder, len(self.aircraftSorties))
            for i in reversed(range(len(self.aircraftSorties))):
                builder.PrependUOffsetTRelative(aircraftSortieslist[i])
            aircraftSorties = builder.EndVector()
        AirTransportMission_FullStart(builder)
        if self.id is not None:
            AirTransportMission_FullAddId(builder, id)
        if self.classificationMarking is not None:
            AirTransportMission_FullAddClassificationMarking(builder, classificationMarking)
        if self.origMissionId is not None:
            AirTransportMission_FullAddOrigMissionId(builder, origMissionId)
        if self.amcMissionId is not None:
            AirTransportMission_FullAddAmcMissionId(builder, amcMissionId)
        if self.gdssMissionId is not None:
            AirTransportMission_FullAddGdssMissionId(builder, gdssMissionId)
        if self.prevMissionId is not None:
            AirTransportMission_FullAddPrevMissionId(builder, prevMissionId)
        if self.prevAmcmissionId is not None:
            AirTransportMission_FullAddPrevAmcmissionId(builder, prevAmcmissionId)
        if self.nextMissionId is not None:
            AirTransportMission_FullAddNextMissionId(builder, nextMissionId)
        if self.nextAmcmissionId is not None:
            AirTransportMission_FullAddNextAmcmissionId(builder, nextAmcmissionId)
        if self.objective is not None:
            AirTransportMission_FullAddObjective(builder, objective)
        if self.purpose is not None:
            AirTransportMission_FullAddPurpose(builder, purpose)
        if self.jcsPriority is not None:
            AirTransportMission_FullAddJcsPriority(builder, jcsPriority)
        AirTransportMission_FullAddCw(builder, self.cw)
        if self.type is not None:
            AirTransportMission_FullAddType(builder, type)
        if self.firstPickUp is not None:
            AirTransportMission_FullAddFirstPickUp(builder, firstPickUp)
        if self.lastDropOff is not None:
            AirTransportMission_FullAddLastDropOff(builder, lastDropOff)
        if self.alias is not None:
            AirTransportMission_FullAddAlias(builder, alias)
        if self.callSign is not None:
            AirTransportMission_FullAddCallSign(builder, callSign)
        if self.operation is not None:
            AirTransportMission_FullAddOperation(builder, operation)
        if self.naf is not None:
            AirTransportMission_FullAddNaf(builder, naf)
        if self.allocatedUnit is not None:
            AirTransportMission_FullAddAllocatedUnit(builder, allocatedUnit)
        if self.loadCategoryType is not None:
            AirTransportMission_FullAddLoadCategoryType(builder, loadCategoryType)
        if self.state is not None:
            AirTransportMission_FullAddState(builder, state)
        AirTransportMission_FullAddSourceSysDeviation(builder, self.sourceSysDeviation)
        if self.apacsId is not None:
            AirTransportMission_FullAddApacsId(builder, apacsId)
        if self.dipWorksheetName is not None:
            AirTransportMission_FullAddDipWorksheetName(builder, dipWorksheetName)
        if self.createdAt is not None:
            AirTransportMission_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AirTransportMission_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AirTransportMission_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AirTransportMission_FullAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            AirTransportMission_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AirTransportMission_FullAddSource(builder, source)
        if self.origin is not None:
            AirTransportMission_FullAddOrigin(builder, origin)
        AirTransportMission_FullAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            AirTransportMission_FullAddOrigNetwork(builder, origNetwork)
        if self.requirements is not None:
            AirTransportMission_FullAddRequirements(builder, requirements)
        if self.remarks is not None:
            AirTransportMission_FullAddRemarks(builder, remarks)
        if self.hazMat is not None:
            AirTransportMission_FullAddHazMat(builder, hazMat)
        if self.aircraftSorties is not None:
            AirTransportMission_FullAddAircraftSorties(builder, aircraftSorties)
        airTransportMissionFull = AirTransportMission_FullEnd(builder)
        return airTransportMissionFull
